
F:\EDesign\V4.1\EDesign\Debug\EDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a5c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c30  08003c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c34  08003c34  00013c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08003c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  7 .bss          000003a8  20000008  20000008  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003b0  200003b0  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e6ef  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000035ff  00000000  00000000  0003e727  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000e270  00000000  00000000  00041d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ce8  00000000  00000000  0004ff98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001820  00000000  00000000  00050c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001f605  00000000  00000000  000524a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000decd  00000000  00000000  00071aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000b1310  00000000  00000000  0007f972  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00130c82  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002aec  00000000  00000000  00130d00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003bcc 	.word	0x08003bcc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08003bcc 	.word	0x08003bcc

080001c8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001c8:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
 80001ca:	4a09      	ldr	r2, [pc, #36]	; (80001f0 <HAL_InitTick+0x28>)
 80001cc:	681b      	ldr	r3, [r3, #0]
{
 80001ce:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001d0:	fba2 2303 	umull	r2, r3, r2, r3
{
 80001d4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001d6:	0998      	lsrs	r0, r3, #6
 80001d8:	f000 fc74 	bl	8000ac4 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	4621      	mov	r1, r4
 80001de:	2200      	movs	r2, #0
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 fc2c 	bl	8000a40 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000
 80001f0:	10624dd3 	.word	0x10624dd3

080001f4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <HAL_Init+0x20>)
{
 80001f6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f8:	6813      	ldr	r3, [r2, #0]
 80001fa:	f043 0310 	orr.w	r3, r3, #16
 80001fe:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000200:	2003      	movs	r0, #3
 8000202:	f000 fc0b 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000206:	2000      	movs	r0, #0
 8000208:	f7ff ffde 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 800020c:	f002 fcb6 	bl	8002b7c <HAL_MspInit>
}
 8000210:	2000      	movs	r0, #0
 8000212:	bd08      	pop	{r3, pc}
 8000214:	40022000 	.word	0x40022000

08000218 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000218:	4a02      	ldr	r2, [pc, #8]	; (8000224 <HAL_IncTick+0xc>)
 800021a:	6813      	ldr	r3, [r2, #0]
 800021c:	3301      	adds	r3, #1
 800021e:	6013      	str	r3, [r2, #0]
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	20000034 	.word	0x20000034

08000228 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000228:	4b01      	ldr	r3, [pc, #4]	; (8000230 <HAL_GetTick+0x8>)
 800022a:	6818      	ldr	r0, [r3, #0]
}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000034 	.word	0x20000034

08000234 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000234:	6802      	ldr	r2, [r0, #0]
{
 8000236:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000238:	6893      	ldr	r3, [r2, #8]
 800023a:	f003 0303 	and.w	r3, r3, #3
 800023e:	2b01      	cmp	r3, #1
 8000240:	d002      	beq.n	8000248 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000248:	6811      	ldr	r1, [r2, #0]
 800024a:	07c9      	lsls	r1, r1, #31
 800024c:	d5f9      	bpl.n	8000242 <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800024e:	6891      	ldr	r1, [r2, #8]
 8000250:	f001 010d 	and.w	r1, r1, #13
 8000254:	2901      	cmp	r1, #1
 8000256:	d009      	beq.n	800026c <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000258:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800025a:	f042 0210 	orr.w	r2, r2, #16
 800025e:	6442      	str	r2, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000260:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000262:	f042 0201 	orr.w	r2, r2, #1
 8000266:	6482      	str	r2, [r0, #72]	; 0x48
}
 8000268:	4618      	mov	r0, r3
 800026a:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 800026c:	6893      	ldr	r3, [r2, #8]
 800026e:	2103      	movs	r1, #3
 8000270:	f043 0302 	orr.w	r3, r3, #2
 8000274:	6093      	str	r3, [r2, #8]
 8000276:	6011      	str	r1, [r2, #0]
 8000278:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 800027a:	f7ff ffd5 	bl	8000228 <HAL_GetTick>
 800027e:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000280:	6823      	ldr	r3, [r4, #0]
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	07db      	lsls	r3, r3, #31
 8000286:	d5dc      	bpl.n	8000242 <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000288:	f7ff ffce 	bl	8000228 <HAL_GetTick>
 800028c:	1b40      	subs	r0, r0, r5
 800028e:	2802      	cmp	r0, #2
 8000290:	d9f6      	bls.n	8000280 <ADC_Disable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000292:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000294:	f043 0310 	orr.w	r3, r3, #16
 8000298:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800029a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800029c:	f043 0301 	orr.w	r3, r3, #1
 80002a0:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	e7ce      	b.n	8000244 <ADC_Disable+0x10>
 80002a6:	bf00      	nop

080002a8 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002a8:	6802      	ldr	r2, [r0, #0]
{
 80002aa:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002ac:	6893      	ldr	r3, [r2, #8]
 80002ae:	f003 0303 	and.w	r3, r3, #3
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d00d      	beq.n	80002d2 <ADC_Enable+0x2a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80002b6:	6891      	ldr	r1, [r2, #8]
 80002b8:	4b17      	ldr	r3, [pc, #92]	; (8000318 <ADC_Enable+0x70>)
 80002ba:	4219      	tst	r1, r3
 80002bc:	d00e      	beq.n	80002dc <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80002c0:	f043 0310 	orr.w	r3, r3, #16
 80002c4:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002c6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002d2:	6813      	ldr	r3, [r2, #0]
 80002d4:	07d9      	lsls	r1, r3, #31
 80002d6:	d5ee      	bpl.n	80002b6 <ADC_Enable+0xe>
  return HAL_OK;
 80002d8:	2000      	movs	r0, #0
 80002da:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80002dc:	6893      	ldr	r3, [r2, #8]
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6093      	str	r3, [r2, #8]
 80002e4:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();  
 80002e6:	f7ff ff9f 	bl	8000228 <HAL_GetTick>
 80002ea:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80002ec:	e004      	b.n	80002f8 <ADC_Enable+0x50>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80002ee:	f7ff ff9b 	bl	8000228 <HAL_GetTick>
 80002f2:	1b40      	subs	r0, r0, r5
 80002f4:	2802      	cmp	r0, #2
 80002f6:	d804      	bhi.n	8000302 <ADC_Enable+0x5a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80002f8:	6823      	ldr	r3, [r4, #0]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	07db      	lsls	r3, r3, #31
 80002fe:	d5f6      	bpl.n	80002ee <ADC_Enable+0x46>
 8000300:	e7ea      	b.n	80002d8 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000302:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000304:	f043 0310 	orr.w	r3, r3, #16
 8000308:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800030a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000312:	2001      	movs	r0, #1
 8000314:	bd38      	pop	{r3, r4, r5, pc}
 8000316:	bf00      	nop
 8000318:	8000003f 	.word	0x8000003f

0800031c <HAL_ADC_Init>:
{
 800031c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800031e:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000320:	2300      	movs	r3, #0
 8000322:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000324:	2800      	cmp	r0, #0
 8000326:	f000 809d 	beq.w	8000464 <HAL_ADC_Init+0x148>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800032a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800032c:	f013 0310 	ands.w	r3, r3, #16
 8000330:	4604      	mov	r4, r0
 8000332:	d117      	bne.n	8000364 <HAL_ADC_Init+0x48>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000334:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 8087 	beq.w	800044a <HAL_ADC_Init+0x12e>
 800033c:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800033e:	6891      	ldr	r1, [r2, #8]
 8000340:	00c9      	lsls	r1, r1, #3
 8000342:	d576      	bpl.n	8000432 <HAL_ADC_Init+0x116>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000344:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000346:	008f      	lsls	r7, r1, #2
 8000348:	d473      	bmi.n	8000432 <HAL_ADC_Init+0x116>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800034a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800034c:	06ce      	lsls	r6, r1, #27
 800034e:	d400      	bmi.n	8000352 <HAL_ADC_Init+0x36>
 8000350:	b163      	cbz	r3, 800036c <HAL_ADC_Init+0x50>
    ADC_STATE_CLR_SET(hadc->State,
 8000352:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000354:	f023 0312 	bic.w	r3, r3, #18
 8000358:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 800035c:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 800035e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000360:	b017      	add	sp, #92	; 0x5c
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000364:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000366:	06db      	lsls	r3, r3, #27
 8000368:	d4f3      	bmi.n	8000352 <HAL_ADC_Init+0x36>
 800036a:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800036c:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800036e:	f010 0004 	ands.w	r0, r0, #4
 8000372:	d1ee      	bne.n	8000352 <HAL_ADC_Init+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 8000374:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000376:	f421 7181 	bic.w	r1, r1, #258	; 0x102
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800037a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800037e:	f041 0102 	orr.w	r1, r1, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000382:	bf08      	it	eq
 8000384:	4b65      	ldreq	r3, [pc, #404]	; (800051c <HAL_ADC_Init+0x200>)
    ADC_STATE_CLR_SET(hadc->State,
 8000386:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000388:	bf18      	it	ne
 800038a:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
 800038e:	9301      	str	r3, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000390:	6893      	ldr	r3, [r2, #8]
 8000392:	f003 0303 	and.w	r3, r3, #3
 8000396:	2b01      	cmp	r3, #1
 8000398:	f000 809c 	beq.w	80004d4 <HAL_ADC_Init+0x1b8>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800039c:	9901      	ldr	r1, [sp, #4]
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800039e:	688b      	ldr	r3, [r1, #8]
 80003a0:	f003 0303 	and.w	r3, r3, #3
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d060      	beq.n	800046a <HAL_ADC_Init+0x14e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 80003a8:	495d      	ldr	r1, [pc, #372]	; (8000520 <HAL_ADC_Init+0x204>)
 80003aa:	6865      	ldr	r5, [r4, #4]
 80003ac:	688b      	ldr	r3, [r1, #8]
 80003ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80003b2:	432b      	orrs	r3, r5
 80003b4:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80003b6:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 80003b8:	68e1      	ldr	r1, [r4, #12]
 80003ba:	68a3      	ldr	r3, [r4, #8]
 80003bc:	69e6      	ldr	r6, [r4, #28]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003be:	6a65      	ldr	r5, [r4, #36]	; 0x24
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80003c0:	2f01      	cmp	r7, #1
 80003c2:	ea43 0301 	orr.w	r3, r3, r1
 80003c6:	bf18      	it	ne
 80003c8:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80003cc:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003d0:	2d01      	cmp	r5, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003d6:	f000 8086 	beq.w	80004e6 <HAL_ADC_Init+0x1ca>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d002      	beq.n	80003e6 <HAL_ADC_Init+0xca>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80003e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80003e2:	430b      	orrs	r3, r1
 80003e4:	4318      	orrs	r0, r3
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80003e6:	6893      	ldr	r3, [r2, #8]
 80003e8:	f013 0f0c 	tst.w	r3, #12
 80003ec:	d10b      	bne.n	8000406 <HAL_ADC_Init+0xea>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80003ee:	68d1      	ldr	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80003f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80003f2:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80003f4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80003f8:	005b      	lsls	r3, r3, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80003fa:	f021 0102 	bic.w	r1, r1, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80003fe:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000402:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000404:	4318      	orrs	r0, r3
    MODIFY_REG(hadc->Instance->CFGR,
 8000406:	68d5      	ldr	r5, [r2, #12]
 8000408:	4b46      	ldr	r3, [pc, #280]	; (8000524 <HAL_ADC_Init+0x208>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800040a:	6921      	ldr	r1, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 800040c:	402b      	ands	r3, r5
 800040e:	4303      	orrs	r3, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000410:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8000412:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000414:	d06f      	beq.n	80004f6 <HAL_ADC_Init+0x1da>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000416:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000418:	f023 030f 	bic.w	r3, r3, #15
 800041c:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800041e:	2000      	movs	r0, #0
 8000420:	64a0      	str	r0, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000422:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000424:	f023 0303 	bic.w	r3, r3, #3
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800042e:	b017      	add	sp, #92	; 0x5c
 8000430:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8000432:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000434:	f023 0312 	bic.w	r3, r3, #18
 8000438:	f043 0310 	orr.w	r3, r3, #16
 800043c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800043e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	64a3      	str	r3, [r4, #72]	; 0x48
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000446:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000448:	e783      	b.n	8000352 <HAL_ADC_Init+0x36>
      ADC_CLEAR_ERRORCODE(hadc);
 800044a:	6485      	str	r5, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 800044c:	6505      	str	r5, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 800044e:	64c5      	str	r5, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000450:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000454:	f002 fbd0 	bl	8002bf8 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000458:	6822      	ldr	r2, [r4, #0]
 800045a:	6893      	ldr	r3, [r2, #8]
 800045c:	00de      	lsls	r6, r3, #3
 800045e:	d508      	bpl.n	8000472 <HAL_ADC_Init+0x156>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000460:	462b      	mov	r3, r5
 8000462:	e76c      	b.n	800033e <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 8000464:	2001      	movs	r0, #1
}
 8000466:	b017      	add	sp, #92	; 0x5c
 8000468:	bdf0      	pop	{r4, r5, r6, r7, pc}
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800046a:	680b      	ldr	r3, [r1, #0]
 800046c:	07d9      	lsls	r1, r3, #31
 800046e:	d4a2      	bmi.n	80003b6 <HAL_ADC_Init+0x9a>
 8000470:	e79a      	b.n	80003a8 <HAL_ADC_Init+0x8c>
        tmp_hal_status = ADC_Disable(hadc);
 8000472:	4620      	mov	r0, r4
 8000474:	f7ff fede 	bl	8000234 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000478:	6c62      	ldr	r2, [r4, #68]	; 0x44
        tmp_hal_status = ADC_Disable(hadc);
 800047a:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800047c:	06d0      	lsls	r0, r2, #27
 800047e:	f53f af5d 	bmi.w	800033c <HAL_ADC_Init+0x20>
 8000482:	2b00      	cmp	r3, #0
 8000484:	f47f af5a 	bne.w	800033c <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8000488:	6c60      	ldr	r0, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800048a:	6822      	ldr	r2, [r4, #0]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800048c:	4926      	ldr	r1, [pc, #152]	; (8000528 <HAL_ADC_Init+0x20c>)
 800048e:	4d27      	ldr	r5, [pc, #156]	; (800052c <HAL_ADC_Init+0x210>)
 8000490:	6809      	ldr	r1, [r1, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8000492:	f420 5088 	bic.w	r0, r0, #4352	; 0x1100
 8000496:	f020 0002 	bic.w	r0, r0, #2
 800049a:	f040 0002 	orr.w	r0, r0, #2
 800049e:	6460      	str	r0, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80004a0:	6890      	ldr	r0, [r2, #8]
 80004a2:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 80004a6:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80004a8:	fba5 0101 	umull	r0, r1, r5, r1
 80004ac:	0c89      	lsrs	r1, r1, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80004ae:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80004b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80004b4:	0049      	lsls	r1, r1, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80004b6:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80004ba:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80004bc:	9100      	str	r1, [sp, #0]
          while(wait_loop_index != 0U)
 80004be:	9900      	ldr	r1, [sp, #0]
 80004c0:	2900      	cmp	r1, #0
 80004c2:	f43f af3c 	beq.w	800033e <HAL_ADC_Init+0x22>
            wait_loop_index--;
 80004c6:	9900      	ldr	r1, [sp, #0]
 80004c8:	3901      	subs	r1, #1
 80004ca:	9100      	str	r1, [sp, #0]
          while(wait_loop_index != 0U)
 80004cc:	9900      	ldr	r1, [sp, #0]
 80004ce:	2900      	cmp	r1, #0
 80004d0:	d1f9      	bne.n	80004c6 <HAL_ADC_Init+0x1aa>
 80004d2:	e734      	b.n	800033e <HAL_ADC_Init+0x22>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004d4:	6813      	ldr	r3, [r2, #0]
 80004d6:	07dd      	lsls	r5, r3, #31
 80004d8:	f53f af6d 	bmi.w	80003b6 <HAL_ADC_Init+0x9a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80004dc:	9901      	ldr	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004de:	2900      	cmp	r1, #0
 80004e0:	f43f af62 	beq.w	80003a8 <HAL_ADC_Init+0x8c>
 80004e4:	e75b      	b.n	800039e <HAL_ADC_Init+0x82>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80004e6:	b976      	cbnz	r6, 8000506 <HAL_ADC_Init+0x1ea>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80004e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004ea:	3b01      	subs	r3, #1
 80004ec:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
 80004f0:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
 80004f4:	e771      	b.n	80003da <HAL_ADC_Init+0xbe>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80004f6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80004f8:	6a23      	ldr	r3, [r4, #32]
 80004fa:	f021 010f 	bic.w	r1, r1, #15
 80004fe:	3b01      	subs	r3, #1
 8000500:	430b      	orrs	r3, r1
 8000502:	6313      	str	r3, [r2, #48]	; 0x30
 8000504:	e78b      	b.n	800041e <HAL_ADC_Init+0x102>
        ADC_STATE_CLR_SET(hadc->State,
 8000506:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000508:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800050c:	f043 0320 	orr.w	r3, r3, #32
 8000510:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000512:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	64a3      	str	r3, [r4, #72]	; 0x48
 800051a:	e75e      	b.n	80003da <HAL_ADC_Init+0xbe>
 800051c:	50000100 	.word	0x50000100
 8000520:	50000300 	.word	0x50000300
 8000524:	fff0c007 	.word	0xfff0c007
 8000528:	20000000 	.word	0x20000000
 800052c:	431bde83 	.word	0x431bde83

08000530 <HAL_ADC_Start>:
{
 8000530:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000532:	6803      	ldr	r3, [r0, #0]
 8000534:	689c      	ldr	r4, [r3, #8]
 8000536:	f014 0404 	ands.w	r4, r4, #4
 800053a:	d001      	beq.n	8000540 <HAL_ADC_Start+0x10>
    tmp_hal_status = HAL_BUSY;
 800053c:	2002      	movs	r0, #2
}
 800053e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8000540:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000544:	2b01      	cmp	r3, #1
 8000546:	4605      	mov	r5, r0
 8000548:	d0f8      	beq.n	800053c <HAL_ADC_Start+0xc>
 800054a:	2301      	movs	r3, #1
 800054c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 8000550:	f7ff feaa 	bl	80002a8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000554:	2800      	cmp	r0, #0
 8000556:	d13d      	bne.n	80005d4 <HAL_ADC_Start+0xa4>
      ADC_STATE_CLR_SET(hadc->State,
 8000558:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800055a:	4a28      	ldr	r2, [pc, #160]	; (80005fc <HAL_ADC_Start+0xcc>)
      ADC_STATE_CLR_SET(hadc->State,
 800055c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000560:	f023 0301 	bic.w	r3, r3, #1
 8000564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000568:	646b      	str	r3, [r5, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800056a:	6893      	ldr	r3, [r2, #8]
 800056c:	f013 0f1f 	tst.w	r3, #31
 8000570:	682b      	ldr	r3, [r5, #0]
 8000572:	d132      	bne.n	80005da <HAL_ADC_Start+0xaa>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000574:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000576:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800057a:	646a      	str	r2, [r5, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800057c:	68da      	ldr	r2, [r3, #12]
 800057e:	0192      	lsls	r2, r2, #6
 8000580:	d505      	bpl.n	800058e <HAL_ADC_Start+0x5e>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000582:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000584:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000588:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800058c:	646a      	str	r2, [r5, #68]	; 0x44
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800058e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000594:	bf1c      	itt	ne
 8000596:	6caa      	ldrne	r2, [r5, #72]	; 0x48
 8000598:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800059c:	64aa      	str	r2, [r5, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800059e:	211c      	movs	r1, #28
      __HAL_UNLOCK(hadc);
 80005a0:	2400      	movs	r4, #0
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80005a2:	4a16      	ldr	r2, [pc, #88]	; (80005fc <HAL_ADC_Start+0xcc>)
      __HAL_UNLOCK(hadc);
 80005a4:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005a8:	6019      	str	r1, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80005aa:	6891      	ldr	r1, [r2, #8]
 80005ac:	06c9      	lsls	r1, r1, #27
 80005ae:	d00c      	beq.n	80005ca <HAL_ADC_Start+0x9a>
 80005b0:	6891      	ldr	r1, [r2, #8]
 80005b2:	f001 011f 	and.w	r1, r1, #31
 80005b6:	2905      	cmp	r1, #5
 80005b8:	d007      	beq.n	80005ca <HAL_ADC_Start+0x9a>
 80005ba:	6892      	ldr	r2, [r2, #8]
 80005bc:	f002 021f 	and.w	r2, r2, #31
 80005c0:	2a09      	cmp	r2, #9
 80005c2:	d002      	beq.n	80005ca <HAL_ADC_Start+0x9a>
 80005c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80005c8:	d1b9      	bne.n	800053e <HAL_ADC_Start+0xe>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	f042 0204 	orr.w	r2, r2, #4
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 80005d4:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
 80005d8:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80005de:	d0c9      	beq.n	8000574 <HAL_ADC_Start+0x44>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005e0:	6c6a      	ldr	r2, [r5, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005e2:	4907      	ldr	r1, [pc, #28]	; (8000600 <HAL_ADC_Start+0xd0>)
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005e8:	428b      	cmp	r3, r1
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005ea:	646a      	str	r2, [r5, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005ec:	d1cf      	bne.n	800058e <HAL_ADC_Start+0x5e>
 80005ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005f2:	68d2      	ldr	r2, [r2, #12]
 80005f4:	0194      	lsls	r4, r2, #6
 80005f6:	d5ca      	bpl.n	800058e <HAL_ADC_Start+0x5e>
 80005f8:	e7c3      	b.n	8000582 <HAL_ADC_Start+0x52>
 80005fa:	bf00      	nop
 80005fc:	50000300 	.word	0x50000300
 8000600:	50000100 	.word	0x50000100

08000604 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000604:	6803      	ldr	r3, [r0, #0]
 8000606:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <HAL_ADC_ConfigChannel>:
{
 800060c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060e:	4603      	mov	r3, r0
 8000610:	b097      	sub	sp, #92	; 0x5c
  __HAL_LOCK(hadc);
 8000612:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
  __IO uint32_t wait_loop_index = 0U;
 8000616:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8000618:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 800061a:	9000      	str	r0, [sp, #0]
  __HAL_LOCK(hadc);
 800061c:	d047      	beq.n	80006ae <HAL_ADC_ConfigChannel+0xa2>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800061e:	681a      	ldr	r2, [r3, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000620:	68cc      	ldr	r4, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000622:	6895      	ldr	r5, [r2, #8]
  __HAL_LOCK(hadc);
 8000624:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000626:	076d      	lsls	r5, r5, #29
  __HAL_LOCK(hadc);
 8000628:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800062c:	d508      	bpl.n	8000640 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800062e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000630:	f042 0220 	orr.w	r2, r2, #32
 8000634:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 8000636:	2200      	movs	r2, #0
 8000638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800063c:	b017      	add	sp, #92	; 0x5c
 800063e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank < 5U)
 8000640:	6848      	ldr	r0, [r1, #4]
 8000642:	2804      	cmp	r0, #4
 8000644:	d936      	bls.n	80006b4 <HAL_ADC_ConfigChannel+0xa8>
    else if (sConfig->Rank < 10U)
 8000646:	2809      	cmp	r0, #9
 8000648:	d871      	bhi.n	800072e <HAL_ADC_ConfigChannel+0x122>
      MODIFY_REG(hadc->Instance->SQR2,
 800064a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800064e:	0040      	lsls	r0, r0, #1
 8000650:	381e      	subs	r0, #30
 8000652:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000654:	680d      	ldr	r5, [r1, #0]
 8000656:	271f      	movs	r7, #31
 8000658:	4087      	lsls	r7, r0
 800065a:	ea26 0607 	bic.w	r6, r6, r7
 800065e:	fa05 f000 	lsl.w	r0, r5, r0
 8000662:	4330      	orrs	r0, r6
 8000664:	6350      	str	r0, [r2, #52]	; 0x34
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000666:	6890      	ldr	r0, [r2, #8]
 8000668:	f010 0f0c 	tst.w	r0, #12
 800066c:	d133      	bne.n	80006d6 <HAL_ADC_ConfigChannel+0xca>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800066e:	2d09      	cmp	r5, #9
 8000670:	d94f      	bls.n	8000712 <HAL_ADC_ConfigChannel+0x106>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000672:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8000676:	3f1e      	subs	r7, #30
 8000678:	6990      	ldr	r0, [r2, #24]
 800067a:	688e      	ldr	r6, [r1, #8]
 800067c:	f04f 0e07 	mov.w	lr, #7
 8000680:	fa0e fe07 	lsl.w	lr, lr, r7
 8000684:	ea20 000e 	bic.w	r0, r0, lr
 8000688:	40be      	lsls	r6, r7
 800068a:	4330      	orrs	r0, r6
 800068c:	6190      	str	r0, [r2, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800068e:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 8000690:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000692:	694f      	ldr	r7, [r1, #20]
 8000694:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8000698:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 800069a:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800069c:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 80006a0:	2e03      	cmp	r6, #3
 80006a2:	f200 80cf 	bhi.w	8000844 <HAL_ADC_ConfigChannel+0x238>
 80006a6:	e8df f006 	tbb	[pc, r6]
 80006aa:	747e      	.short	0x747e
 80006ac:	606a      	.short	0x606a
  __HAL_LOCK(hadc);
 80006ae:	2002      	movs	r0, #2
}
 80006b0:	b017      	add	sp, #92	; 0x5c
 80006b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->SQR1,
 80006b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80006b8:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80006ba:	680d      	ldr	r5, [r1, #0]
 80006bc:	0040      	lsls	r0, r0, #1
 80006be:	271f      	movs	r7, #31
 80006c0:	4087      	lsls	r7, r0
 80006c2:	ea26 0607 	bic.w	r6, r6, r7
 80006c6:	fa05 f000 	lsl.w	r0, r5, r0
 80006ca:	4330      	orrs	r0, r6
 80006cc:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80006ce:	6890      	ldr	r0, [r2, #8]
 80006d0:	f010 0f0c 	tst.w	r0, #12
 80006d4:	d0cb      	beq.n	800066e <HAL_ADC_ConfigChannel+0x62>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80006d6:	6890      	ldr	r0, [r2, #8]
 80006d8:	f000 0003 	and.w	r0, r0, #3
 80006dc:	2801      	cmp	r0, #1
 80006de:	d014      	beq.n	800070a <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80006e0:	2c01      	cmp	r4, #1
 80006e2:	f000 8093 	beq.w	800080c <HAL_ADC_ConfigChannel+0x200>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80006e6:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80006ea:	2001      	movs	r0, #1
 80006ec:	40a8      	lsls	r0, r5
 80006ee:	ea21 0100 	bic.w	r1, r1, r0
 80006f2:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80006f6:	2d10      	cmp	r5, #16
 80006f8:	f000 8083 	beq.w	8000802 <HAL_ADC_ConfigChannel+0x1f6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80006fc:	2d11      	cmp	r5, #17
 80006fe:	f000 809c 	beq.w	800083a <HAL_ADC_ConfigChannel+0x22e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000702:	2d12      	cmp	r5, #18
 8000704:	d059      	beq.n	80007ba <HAL_ADC_ConfigChannel+0x1ae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000706:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000708:	e795      	b.n	8000636 <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800070a:	6810      	ldr	r0, [r2, #0]
 800070c:	07c0      	lsls	r0, r0, #31
 800070e:	d5e7      	bpl.n	80006e0 <HAL_ADC_ConfigChannel+0xd4>
 8000710:	e7f9      	b.n	8000706 <HAL_ADC_ConfigChannel+0xfa>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000712:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8000716:	6950      	ldr	r0, [r2, #20]
 8000718:	688e      	ldr	r6, [r1, #8]
 800071a:	2707      	movs	r7, #7
 800071c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000720:	ea20 0007 	bic.w	r0, r0, r7
 8000724:	fa06 f60e 	lsl.w	r6, r6, lr
 8000728:	4330      	orrs	r0, r6
 800072a:	6150      	str	r0, [r2, #20]
 800072c:	e7af      	b.n	800068e <HAL_ADC_ConfigChannel+0x82>
    else if (sConfig->Rank < 15U)
 800072e:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000730:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000734:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 8000738:	d80b      	bhi.n	8000752 <HAL_ADC_ConfigChannel+0x146>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800073a:	383c      	subs	r0, #60	; 0x3c
 800073c:	6b96      	ldr	r6, [r2, #56]	; 0x38
 800073e:	680d      	ldr	r5, [r1, #0]
 8000740:	271f      	movs	r7, #31
 8000742:	4087      	lsls	r7, r0
 8000744:	ea26 0607 	bic.w	r6, r6, r7
 8000748:	fa05 f000 	lsl.w	r0, r5, r0
 800074c:	4330      	orrs	r0, r6
 800074e:	6390      	str	r0, [r2, #56]	; 0x38
 8000750:	e789      	b.n	8000666 <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000752:	385a      	subs	r0, #90	; 0x5a
 8000754:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8000756:	680d      	ldr	r5, [r1, #0]
 8000758:	271f      	movs	r7, #31
 800075a:	4087      	lsls	r7, r0
 800075c:	ea26 0607 	bic.w	r6, r6, r7
 8000760:	fa05 f000 	lsl.w	r0, r5, r0
 8000764:	4330      	orrs	r0, r6
 8000766:	63d0      	str	r0, [r2, #60]	; 0x3c
 8000768:	e77d      	b.n	8000666 <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->OFR4               ,
 800076a:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 800076c:	4e6d      	ldr	r6, [pc, #436]	; (8000924 <HAL_ADC_ConfigChannel+0x318>)
 800076e:	403e      	ands	r6, r7
 8000770:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8000774:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 8000778:	4338      	orrs	r0, r7
 800077a:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 800077c:	e7ab      	b.n	80006d6 <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800077e:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8000780:	4e68      	ldr	r6, [pc, #416]	; (8000924 <HAL_ADC_ConfigChannel+0x318>)
 8000782:	403e      	ands	r6, r7
 8000784:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8000788:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 800078c:	4338      	orrs	r0, r7
 800078e:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 8000790:	e7a1      	b.n	80006d6 <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000792:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8000794:	4e63      	ldr	r6, [pc, #396]	; (8000924 <HAL_ADC_ConfigChannel+0x318>)
 8000796:	403e      	ands	r6, r7
 8000798:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 800079c:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 80007a0:	4338      	orrs	r0, r7
 80007a2:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 80007a4:	e797      	b.n	80006d6 <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80007a6:	6e17      	ldr	r7, [r2, #96]	; 0x60
 80007a8:	4e5e      	ldr	r6, [pc, #376]	; (8000924 <HAL_ADC_ConfigChannel+0x318>)
 80007aa:	403e      	ands	r6, r7
 80007ac:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80007b0:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 80007b4:	4338      	orrs	r0, r7
 80007b6:	6610      	str	r0, [r2, #96]	; 0x60
      break;
 80007b8:	e78d      	b.n	80006d6 <HAL_ADC_ConfigChannel+0xca>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80007ba:	495b      	ldr	r1, [pc, #364]	; (8000928 <HAL_ADC_ConfigChannel+0x31c>)
 80007bc:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80007be:	024c      	lsls	r4, r1, #9
 80007c0:	d4a1      	bmi.n	8000706 <HAL_ADC_ConfigChannel+0xfa>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80007c2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80007c6:	bf0c      	ite	eq
 80007c8:	4958      	ldreq	r1, [pc, #352]	; (800092c <HAL_ADC_ConfigChannel+0x320>)
 80007ca:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
 80007ce:	9101      	str	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80007d0:	6891      	ldr	r1, [r2, #8]
 80007d2:	f001 0103 	and.w	r1, r1, #3
 80007d6:	2901      	cmp	r1, #1
 80007d8:	d05d      	beq.n	8000896 <HAL_ADC_ConfigChannel+0x28a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80007da:	9801      	ldr	r0, [sp, #4]
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80007dc:	6881      	ldr	r1, [r0, #8]
 80007de:	f001 0103 	and.w	r1, r1, #3
 80007e2:	2901      	cmp	r1, #1
 80007e4:	d05e      	beq.n	80008a4 <HAL_ADC_ConfigChannel+0x298>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80007e6:	2d10      	cmp	r5, #16
 80007e8:	d074      	beq.n	80008d4 <HAL_ADC_ConfigChannel+0x2c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80007ea:	2d11      	cmp	r5, #17
 80007ec:	f000 808f 	beq.w	800090e <HAL_ADC_ConfigChannel+0x302>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80007f0:	2d12      	cmp	r5, #18
 80007f2:	d188      	bne.n	8000706 <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80007f4:	494c      	ldr	r1, [pc, #304]	; (8000928 <HAL_ADC_ConfigChannel+0x31c>)
 80007f6:	688a      	ldr	r2, [r1, #8]
 80007f8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80007fc:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007fe:	2000      	movs	r0, #0
 8000800:	e719      	b.n	8000636 <HAL_ADC_ConfigChannel+0x2a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000802:	4949      	ldr	r1, [pc, #292]	; (8000928 <HAL_ADC_ConfigChannel+0x31c>)
 8000804:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000806:	020f      	lsls	r7, r1, #8
 8000808:	d5db      	bpl.n	80007c2 <HAL_ADC_ConfigChannel+0x1b6>
 800080a:	e77c      	b.n	8000706 <HAL_ADC_ConfigChannel+0xfa>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800080c:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 8000810:	40ac      	lsls	r4, r5
 8000812:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000814:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000816:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800081a:	d92e      	bls.n	800087a <HAL_ADC_ConfigChannel+0x26e>
        MODIFY_REG(hadc->Instance->SMPR2,
 800081c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8000820:	688e      	ldr	r6, [r1, #8]
 8000822:	6994      	ldr	r4, [r2, #24]
 8000824:	f1a0 011b 	sub.w	r1, r0, #27
 8000828:	2707      	movs	r7, #7
 800082a:	408f      	lsls	r7, r1
 800082c:	fa06 f001 	lsl.w	r0, r6, r1
 8000830:	ea24 0107 	bic.w	r1, r4, r7
 8000834:	4301      	orrs	r1, r0
 8000836:	6191      	str	r1, [r2, #24]
 8000838:	e75d      	b.n	80006f6 <HAL_ADC_ConfigChannel+0xea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800083a:	493b      	ldr	r1, [pc, #236]	; (8000928 <HAL_ADC_ConfigChannel+0x31c>)
 800083c:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800083e:	01ce      	lsls	r6, r1, #7
 8000840:	d5bf      	bpl.n	80007c2 <HAL_ADC_ConfigChannel+0x1b6>
 8000842:	e760      	b.n	8000706 <HAL_ADC_ConfigChannel+0xfa>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000844:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8000846:	06a8      	lsls	r0, r5, #26
 8000848:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800084c:	4286      	cmp	r6, r0
 800084e:	d037      	beq.n	80008c0 <HAL_ADC_ConfigChannel+0x2b4>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000850:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8000852:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000856:	42b0      	cmp	r0, r6
 8000858:	d02d      	beq.n	80008b6 <HAL_ADC_ConfigChannel+0x2aa>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800085a:	6e96      	ldr	r6, [r2, #104]	; 0x68
 800085c:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000860:	42b0      	cmp	r0, r6
 8000862:	d032      	beq.n	80008ca <HAL_ADC_ConfigChannel+0x2be>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000864:	6ed6      	ldr	r6, [r2, #108]	; 0x6c
 8000866:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800086a:	42b0      	cmp	r0, r6
 800086c:	f47f af33 	bne.w	80006d6 <HAL_ADC_ConfigChannel+0xca>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000870:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8000872:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000876:	66d0      	str	r0, [r2, #108]	; 0x6c
 8000878:	e72d      	b.n	80006d6 <HAL_ADC_ConfigChannel+0xca>
        MODIFY_REG(hadc->Instance->SMPR1,
 800087a:	1c68      	adds	r0, r5, #1
 800087c:	688e      	ldr	r6, [r1, #8]
 800087e:	6954      	ldr	r4, [r2, #20]
 8000880:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8000884:	2707      	movs	r7, #7
 8000886:	408f      	lsls	r7, r1
 8000888:	fa06 f001 	lsl.w	r0, r6, r1
 800088c:	ea24 0107 	bic.w	r1, r4, r7
 8000890:	4301      	orrs	r1, r0
 8000892:	6151      	str	r1, [r2, #20]
 8000894:	e732      	b.n	80006fc <HAL_ADC_ConfigChannel+0xf0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000896:	6811      	ldr	r1, [r2, #0]
 8000898:	07c8      	lsls	r0, r1, #31
 800089a:	d406      	bmi.n	80008aa <HAL_ADC_ConfigChannel+0x29e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800089c:	9801      	ldr	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800089e:	2800      	cmp	r0, #0
 80008a0:	d0a1      	beq.n	80007e6 <HAL_ADC_ConfigChannel+0x1da>
 80008a2:	e79b      	b.n	80007dc <HAL_ADC_ConfigChannel+0x1d0>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80008a4:	6801      	ldr	r1, [r0, #0]
 80008a6:	07c9      	lsls	r1, r1, #31
 80008a8:	d59d      	bpl.n	80007e6 <HAL_ADC_ConfigChannel+0x1da>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008ac:	f042 0220 	orr.w	r2, r2, #32
 80008b0:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 80008b2:	2001      	movs	r0, #1
 80008b4:	e6bf      	b.n	8000636 <HAL_ADC_ConfigChannel+0x2a>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80008b6:	6e56      	ldr	r6, [r2, #100]	; 0x64
 80008b8:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80008bc:	6656      	str	r6, [r2, #100]	; 0x64
 80008be:	e7cc      	b.n	800085a <HAL_ADC_ConfigChannel+0x24e>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80008c0:	6e16      	ldr	r6, [r2, #96]	; 0x60
 80008c2:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80008c6:	6616      	str	r6, [r2, #96]	; 0x60
 80008c8:	e7c2      	b.n	8000850 <HAL_ADC_ConfigChannel+0x244>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80008ca:	6e96      	ldr	r6, [r2, #104]	; 0x68
 80008cc:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 80008d0:	6696      	str	r6, [r2, #104]	; 0x68
 80008d2:	e7c7      	b.n	8000864 <HAL_ADC_ConfigChannel+0x258>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80008d4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80008d8:	f47f af15 	bne.w	8000706 <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80008dc:	4912      	ldr	r1, [pc, #72]	; (8000928 <HAL_ADC_ConfigChannel+0x31c>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008de:	4c14      	ldr	r4, [pc, #80]	; (8000930 <HAL_ADC_ConfigChannel+0x324>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80008e0:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008e2:	4814      	ldr	r0, [pc, #80]	; (8000934 <HAL_ADC_ConfigChannel+0x328>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80008e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008e8:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008ea:	220a      	movs	r2, #10
 80008ec:	6821      	ldr	r1, [r4, #0]
 80008ee:	fbb1 f1f0 	udiv	r1, r1, r0
 80008f2:	fb02 f201 	mul.w	r2, r2, r1
 80008f6:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80008f8:	9a00      	ldr	r2, [sp, #0]
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	f43f af03 	beq.w	8000706 <HAL_ADC_ConfigChannel+0xfa>
            wait_loop_index--;
 8000900:	9a00      	ldr	r2, [sp, #0]
 8000902:	3a01      	subs	r2, #1
 8000904:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000906:	9a00      	ldr	r2, [sp, #0]
 8000908:	2a00      	cmp	r2, #0
 800090a:	d1f9      	bne.n	8000900 <HAL_ADC_ConfigChannel+0x2f4>
 800090c:	e6fb      	b.n	8000706 <HAL_ADC_ConfigChannel+0xfa>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800090e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000912:	f47f aef8 	bne.w	8000706 <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000916:	4904      	ldr	r1, [pc, #16]	; (8000928 <HAL_ADC_ConfigChannel+0x31c>)
 8000918:	688a      	ldr	r2, [r1, #8]
 800091a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800091e:	608a      	str	r2, [r1, #8]
 8000920:	e6f1      	b.n	8000706 <HAL_ADC_ConfigChannel+0xfa>
 8000922:	bf00      	nop
 8000924:	83fff000 	.word	0x83fff000
 8000928:	50000300 	.word	0x50000300
 800092c:	50000100 	.word	0x50000100
 8000930:	20000000 	.word	0x20000000
 8000934:	000f4240 	.word	0x000f4240

08000938 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8000938:	4603      	mov	r3, r0
 800093a:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800093c:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 800093e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8000942:	4834      	ldr	r0, [pc, #208]	; (8000a14 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000944:	680d      	ldr	r5, [r1, #0]
 8000946:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800094a:	bf18      	it	ne
 800094c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8000950:	2a01      	cmp	r2, #1
 8000952:	d035      	beq.n	80009c0 <HAL_ADCEx_MultiModeConfigChannel+0x88>
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000954:	68a2      	ldr	r2, [r4, #8]
  __HAL_LOCK(hadc);
 8000956:	2601      	movs	r6, #1
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000958:	0757      	lsls	r7, r2, #29
  __HAL_LOCK(hadc);
 800095a:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800095e:	d508      	bpl.n	8000972 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000962:	f042 0220 	orr.w	r2, r2, #32
 8000966:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000968:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800096a:	2200      	movs	r2, #0
 800096c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return tmp_hal_status;
 8000970:	bdf0      	pop	{r4, r5, r6, r7, pc}
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000972:	6882      	ldr	r2, [r0, #8]
 8000974:	0756      	lsls	r6, r2, #29
 8000976:	d4f3      	bmi.n	8000960 <HAL_ADCEx_MultiModeConfigChannel+0x28>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000978:	b325      	cbz	r5, 80009c4 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800097a:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8000a18 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800097e:	684f      	ldr	r7, [r1, #4]
 8000980:	f8de 6008 	ldr.w	r6, [lr, #8]
 8000984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000986:	f426 4660 	bic.w	r6, r6, #57344	; 0xe000
 800098a:	ea47 3242 	orr.w	r2, r7, r2, lsl #13
 800098e:	4332      	orrs	r2, r6
 8000990:	f8ce 2008 	str.w	r2, [lr, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000994:	68a2      	ldr	r2, [r4, #8]
 8000996:	f002 0203 	and.w	r2, r2, #3
 800099a:	2a01      	cmp	r2, #1
 800099c:	d02e      	beq.n	80009fc <HAL_ADCEx_MultiModeConfigChannel+0xc4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800099e:	6882      	ldr	r2, [r0, #8]
 80009a0:	f002 0203 	and.w	r2, r2, #3
 80009a4:	2a01      	cmp	r2, #1
 80009a6:	d031      	beq.n	8000a0c <HAL_ADCEx_MultiModeConfigChannel+0xd4>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80009a8:	481b      	ldr	r0, [pc, #108]	; (8000a18 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80009aa:	6889      	ldr	r1, [r1, #8]
 80009ac:	6882      	ldr	r2, [r0, #8]
 80009ae:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80009b2:	430d      	orrs	r5, r1
 80009b4:	f022 020f 	bic.w	r2, r2, #15
 80009b8:	4315      	orrs	r5, r2
 80009ba:	6085      	str	r5, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009bc:	2000      	movs	r0, #0
 80009be:	e7d4      	b.n	800096a <HAL_ADCEx_MultiModeConfigChannel+0x32>
  __HAL_LOCK(hadc);
 80009c0:	2002      	movs	r0, #2
 80009c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80009c4:	4914      	ldr	r1, [pc, #80]	; (8000a18 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80009c6:	688a      	ldr	r2, [r1, #8]
 80009c8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80009cc:	608a      	str	r2, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80009ce:	68a2      	ldr	r2, [r4, #8]
 80009d0:	f002 0203 	and.w	r2, r2, #3
 80009d4:	2a01      	cmp	r2, #1
 80009d6:	d00d      	beq.n	80009f4 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80009d8:	6882      	ldr	r2, [r0, #8]
 80009da:	f002 0203 	and.w	r2, r2, #3
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d010      	beq.n	8000a04 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80009e2:	490d      	ldr	r1, [pc, #52]	; (8000a18 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80009e4:	688a      	ldr	r2, [r1, #8]
 80009e6:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80009ea:	f022 020f 	bic.w	r2, r2, #15
 80009ee:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009f0:	2000      	movs	r0, #0
 80009f2:	e7ba      	b.n	800096a <HAL_ADCEx_MultiModeConfigChannel+0x32>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80009f4:	6822      	ldr	r2, [r4, #0]
 80009f6:	07d1      	lsls	r1, r2, #31
 80009f8:	d4e0      	bmi.n	80009bc <HAL_ADCEx_MultiModeConfigChannel+0x84>
 80009fa:	e7ed      	b.n	80009d8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80009fc:	6822      	ldr	r2, [r4, #0]
 80009fe:	07d4      	lsls	r4, r2, #31
 8000a00:	d5cd      	bpl.n	800099e <HAL_ADCEx_MultiModeConfigChannel+0x66>
 8000a02:	e7db      	b.n	80009bc <HAL_ADCEx_MultiModeConfigChannel+0x84>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000a04:	6802      	ldr	r2, [r0, #0]
 8000a06:	07d2      	lsls	r2, r2, #31
 8000a08:	d4d8      	bmi.n	80009bc <HAL_ADCEx_MultiModeConfigChannel+0x84>
 8000a0a:	e7ea      	b.n	80009e2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000a0c:	6802      	ldr	r2, [r0, #0]
 8000a0e:	07d0      	lsls	r0, r2, #31
 8000a10:	d4d4      	bmi.n	80009bc <HAL_ADCEx_MultiModeConfigChannel+0x84>
 8000a12:	e7c9      	b.n	80009a8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
 8000a14:	50000100 	.word	0x50000100
 8000a18:	50000300 	.word	0x50000300

08000a1c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a1e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a20:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000a24:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a26:	0200      	lsls	r0, r0, #8
 8000a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a2c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000a34:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a36:	60d3      	str	r3, [r2, #12]
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a42:	b470      	push	{r4, r5, r6}
 8000a44:	68dc      	ldr	r4, [r3, #12]
 8000a46:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4a:	f1c4 0607 	rsb	r6, r4, #7
 8000a4e:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a50:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a54:	bf28      	it	cs
 8000a56:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a58:	2b06      	cmp	r3, #6
 8000a5a:	d917      	bls.n	8000a8c <HAL_NVIC_SetPriority+0x4c>
 8000a5c:	3c03      	subs	r4, #3
 8000a5e:	2501      	movs	r5, #1
 8000a60:	40a5      	lsls	r5, r4
 8000a62:	3d01      	subs	r5, #1
 8000a64:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a66:	2301      	movs	r3, #1
 8000a68:	40b3      	lsls	r3, r6
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	4019      	ands	r1, r3
 8000a6e:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8000a70:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a72:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8000a76:	db0c      	blt.n	8000a92 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000a7c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000a80:	0109      	lsls	r1, r1, #4
 8000a82:	b2c9      	uxtb	r1, r1
 8000a84:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a88:	bc70      	pop	{r4, r5, r6}
 8000a8a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4614      	mov	r4, r2
 8000a90:	e7e9      	b.n	8000a66 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_NVIC_SetPriority+0x68>)
 8000a94:	f000 000f 	and.w	r0, r0, #15
 8000a98:	0109      	lsls	r1, r1, #4
 8000a9a:	4403      	add	r3, r0
 8000a9c:	b2c9      	uxtb	r1, r1
 8000a9e:	7619      	strb	r1, [r3, #24]
 8000aa0:	bc70      	pop	{r4, r5, r6}
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00
 8000aa8:	e000ecfc 	.word	0xe000ecfc

08000aac <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000aac:	f000 011f 	and.w	r1, r0, #31
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	0940      	lsrs	r0, r0, #5
 8000ab4:	4a02      	ldr	r2, [pc, #8]	; (8000ac0 <HAL_NVIC_EnableIRQ+0x14>)
 8000ab6:	408b      	lsls	r3, r1
 8000ab8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000e100 	.word	0xe000e100

08000ac4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac4:	3801      	subs	r0, #1
 8000ac6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aca:	d20e      	bcs.n	8000aea <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ace:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad0:	4c08      	ldr	r4, [pc, #32]	; (8000af4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	20f0      	movs	r0, #240	; 0xf0
 8000ad6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ada:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000adc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ade:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae2:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000ae4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ae8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000aea:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000e010 	.word	0xe000e010
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000afa:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000afc:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000afe:	bf0c      	ite	eq
 8000b00:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b04:	f023 0304 	bicne.w	r3, r3, #4
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	4770      	bx	lr
 8000b0c:	e000e010 	.word	0xe000e010

08000b10 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <HAL_SYSTICK_IRQHandler>:
{
 8000b14:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000b16:	f7ff fffb 	bl	8000b10 <HAL_SYSTICK_Callback>
 8000b1a:	bd08      	pop	{r3, pc}

08000b1c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b1c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000b20:	2a02      	cmp	r2, #2
{  
 8000b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b24:	d003      	beq.n	8000b2e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b26:	2204      	movs	r2, #4
 8000b28:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b2e:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b30:	6c01      	ldr	r1, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b32:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b34:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000b36:	6b46      	ldr	r6, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b38:	f024 040e 	bic.w	r4, r4, #14
 8000b3c:	6014      	str	r4, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b3e:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b40:	2501      	movs	r5, #1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b42:	f024 0401 	bic.w	r4, r4, #1
 8000b46:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b48:	fa05 f101 	lsl.w	r1, r5, r1
    __HAL_UNLOCK(hdma);
 8000b4c:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b4e:	6079      	str	r1, [r7, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000b50:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000b54:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000b58:	b116      	cbz	r6, 8000b60 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000b5a:	47b0      	blx	r6
  HAL_StatusTypeDef status = HAL_OK;
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b60:	4630      	mov	r0, r6
    } 
  }
  return status;
}
 8000b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b64:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b66:	6809      	ldr	r1, [r1, #0]
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	f000 80d9 	beq.w	8000d20 <HAL_GPIO_Init+0x1bc>
{
 8000b6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b72:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8000d34 <HAL_GPIO_Init+0x1d0>
{
 8000b76:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b78:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b7a:	f04f 0801 	mov.w	r8, #1
 8000b7e:	e079      	b.n	8000c74 <HAL_GPIO_Init+0x110>
 8000b80:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b84:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8000b86:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b8a:	fa03 f309 	lsl.w	r3, r3, r9
 8000b8e:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b90:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b94:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b98:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b9c:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ba0:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba4:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8000ba8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000baa:	f240 8098 	bls.w	8000cde <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 8000bae:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bb0:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bb4:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bb6:	fa02 f209 	lsl.w	r2, r2, r9
 8000bba:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bbc:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 8000bbe:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bc0:	d554      	bpl.n	8000c6c <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b58      	ldr	r3, [pc, #352]	; (8000d24 <HAL_GPIO_Init+0x1c0>)
 8000bc4:	4a57      	ldr	r2, [pc, #348]	; (8000d24 <HAL_GPIO_Init+0x1c0>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6193      	str	r3, [r2, #24]
 8000bce:	6993      	ldr	r3, [r2, #24]
 8000bd0:	f025 0603 	bic.w	r6, r5, #3
 8000bd4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000be0:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000be2:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000be8:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	f04f 090f 	mov.w	r9, #15
 8000bf0:	fa09 f903 	lsl.w	r9, r9, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bf4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000bf8:	ea22 0a09 	bic.w	sl, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bfc:	f000 8086 	beq.w	8000d0c <HAL_GPIO_Init+0x1a8>
 8000c00:	4a49      	ldr	r2, [pc, #292]	; (8000d28 <HAL_GPIO_Init+0x1c4>)
 8000c02:	4290      	cmp	r0, r2
 8000c04:	f000 8084 	beq.w	8000d10 <HAL_GPIO_Init+0x1ac>
 8000c08:	4a48      	ldr	r2, [pc, #288]	; (8000d2c <HAL_GPIO_Init+0x1c8>)
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	f000 8083 	beq.w	8000d16 <HAL_GPIO_Init+0x1b2>
 8000c10:	4a47      	ldr	r2, [pc, #284]	; (8000d30 <HAL_GPIO_Init+0x1cc>)
 8000c12:	4290      	cmp	r0, r2
 8000c14:	bf0b      	itete	eq
 8000c16:	f04f 0903 	moveq.w	r9, #3
 8000c1a:	2205      	movne	r2, #5
 8000c1c:	fa09 f303 	lsleq.w	r3, r9, r3
 8000c20:	fa02 f303 	lslne.w	r3, r2, r3
 8000c24:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c28:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 8000c2a:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8000c2e:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c30:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8000c32:	bf54      	ite	pl
 8000c34:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000c36:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 8000c38:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000c3c:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c40:	03a6      	lsls	r6, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8000c42:	bf54      	ite	pl
 8000c44:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000c46:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 8000c48:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c4c:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c50:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8000c52:	bf54      	ite	pl
 8000c54:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000c56:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 8000c58:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000c5c:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c60:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000c62:	bf54      	ite	pl
 8000c64:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000c66:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 8000c68:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 8000c6c:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c6e:	fa31 f305 	lsrs.w	r3, r1, r5
 8000c72:	d048      	beq.n	8000d06 <HAL_GPIO_Init+0x1a2>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c74:	fa08 f205 	lsl.w	r2, r8, r5
    if(iocurrent)
 8000c78:	ea12 0701 	ands.w	r7, r2, r1
 8000c7c:	d0f6      	beq.n	8000c6c <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c7e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000c82:	f024 0a10 	bic.w	sl, r4, #16
 8000c86:	f1ba 0f02 	cmp.w	sl, #2
 8000c8a:	f47f af79 	bne.w	8000b80 <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3];
 8000c8e:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8000c92:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c96:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3];
 8000c9a:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	f04f 0a0f 	mov.w	sl, #15
 8000ca4:	fa0a fb03 	lsl.w	fp, sl, r3
 8000ca8:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cac:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8000cb0:	fa06 f303 	lsl.w	r3, r6, r3
 8000cb4:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 8000cb8:	f8c9 3020 	str.w	r3, [r9, #32]
 8000cbc:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cc0:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8000cc2:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cc6:	fa03 f309 	lsl.w	r3, r3, r9
 8000cca:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ccc:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cd0:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cd4:	fa06 f609 	lsl.w	r6, r6, r9
 8000cd8:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 8000cdc:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 8000cde:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ce0:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce4:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8000ce8:	fa06 f609 	lsl.w	r6, r6, r9
 8000cec:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8000cf0:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cf2:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cf6:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cfa:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cfe:	40ae      	lsls	r6, r5
 8000d00:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8000d02:	6046      	str	r6, [r0, #4]
 8000d04:	e753      	b.n	8000bae <HAL_GPIO_Init+0x4a>
  }
}
 8000d06:	b003      	add	sp, #12
 8000d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e789      	b.n	8000c24 <HAL_GPIO_Init+0xc0>
 8000d10:	fa08 f303 	lsl.w	r3, r8, r3
 8000d14:	e786      	b.n	8000c24 <HAL_GPIO_Init+0xc0>
 8000d16:	f04f 0902 	mov.w	r9, #2
 8000d1a:	fa09 f303 	lsl.w	r3, r9, r3
 8000d1e:	e781      	b.n	8000c24 <HAL_GPIO_Init+0xc0>
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000
 8000d28:	48000400 	.word	0x48000400
 8000d2c:	48000800 	.word	0x48000800
 8000d30:	48000c00 	.word	0x48000c00
 8000d34:	40010400 	.word	0x40010400

08000d38 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d38:	b90a      	cbnz	r2, 8000d3e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d3a:	6281      	str	r1, [r0, #40]	; 0x28
 8000d3c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d3e:	6181      	str	r1, [r0, #24]
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000d46:	6951      	ldr	r1, [r2, #20]
 8000d48:	4201      	tst	r1, r0
 8000d4a:	d100      	bne.n	8000d4e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000d4c:	4770      	bx	lr
{
 8000d4e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d50:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d52:	f002 fee3 	bl	8003b1c <HAL_GPIO_EXTI_Callback>
 8000d56:	bd08      	pop	{r3, pc}
 8000d58:	40010400 	.word	0x40010400

08000d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d60:	6803      	ldr	r3, [r0, #0]
 8000d62:	07d9      	lsls	r1, r3, #31
{
 8000d64:	b083      	sub	sp, #12
 8000d66:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d68:	d543      	bpl.n	8000df2 <HAL_RCC_OscConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d6a:	49c0      	ldr	r1, [pc, #768]	; (800106c <HAL_RCC_OscConfig+0x310>)
 8000d6c:	684a      	ldr	r2, [r1, #4]
 8000d6e:	f002 020c 	and.w	r2, r2, #12
 8000d72:	2a04      	cmp	r2, #4
 8000d74:	f000 8184 	beq.w	8001080 <HAL_RCC_OscConfig+0x324>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d78:	684a      	ldr	r2, [r1, #4]
 8000d7a:	f002 020c 	and.w	r2, r2, #12
 8000d7e:	2a08      	cmp	r2, #8
 8000d80:	f000 817a 	beq.w	8001078 <HAL_RCC_OscConfig+0x31c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d84:	6863      	ldr	r3, [r4, #4]
 8000d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d8a:	f000 823d 	beq.w	8001208 <HAL_RCC_OscConfig+0x4ac>
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 81a1 	beq.w	80010d6 <HAL_RCC_OscConfig+0x37a>
 8000d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d98:	f000 8297 	beq.w	80012ca <HAL_RCC_OscConfig+0x56e>
 8000d9c:	4bb3      	ldr	r3, [pc, #716]	; (800106c <HAL_RCC_OscConfig+0x310>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000dac:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000dae:	4daf      	ldr	r5, [pc, #700]	; (800106c <HAL_RCC_OscConfig+0x310>)
 8000db0:	68a2      	ldr	r2, [r4, #8]
 8000db2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000db4:	f023 030f 	bic.w	r3, r3, #15
 8000db8:	4313      	orrs	r3, r2
 8000dba:	62eb      	str	r3, [r5, #44]	; 0x2c

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fa34 	bl	8000228 <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc0:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8000dc4:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc6:	2601      	movs	r6, #1
 8000dc8:	e005      	b.n	8000dd6 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dca:	f7ff fa2d 	bl	8000228 <HAL_GetTick>
 8000dce:	1bc0      	subs	r0, r0, r7
 8000dd0:	2864      	cmp	r0, #100	; 0x64
 8000dd2:	f200 81b9 	bhi.w	8001148 <HAL_RCC_OscConfig+0x3ec>
 8000dd6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dda:	682a      	ldr	r2, [r5, #0]
 8000ddc:	fa98 f3a8 	rbit	r3, r8
 8000de0:	fab3 f383 	clz	r3, r3
 8000de4:	f003 031f 	and.w	r3, r3, #31
 8000de8:	fa06 f303 	lsl.w	r3, r6, r3
 8000dec:	4213      	tst	r3, r2
 8000dee:	d0ec      	beq.n	8000dca <HAL_RCC_OscConfig+0x6e>
 8000df0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000df2:	079f      	lsls	r7, r3, #30
 8000df4:	d542      	bpl.n	8000e7c <HAL_RCC_OscConfig+0x120>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000df6:	4a9d      	ldr	r2, [pc, #628]	; (800106c <HAL_RCC_OscConfig+0x310>)
 8000df8:	6851      	ldr	r1, [r2, #4]
 8000dfa:	f011 0f0c 	tst.w	r1, #12
 8000dfe:	f000 80f7 	beq.w	8000ff0 <HAL_RCC_OscConfig+0x294>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e02:	6851      	ldr	r1, [r2, #4]
 8000e04:	f001 010c 	and.w	r1, r1, #12
 8000e08:	2908      	cmp	r1, #8
 8000e0a:	f000 80ed 	beq.w	8000fe8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e0e:	6922      	ldr	r2, [r4, #16]
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 81d3 	beq.w	80011bc <HAL_RCC_OscConfig+0x460>
 8000e16:	2201      	movs	r2, #1
 8000e18:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e1c:	fab3 f383 	clz	r3, r3
 8000e20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e28:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e2a:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8000e2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e2e:	f7ff f9fb 	bl	8000228 <HAL_GetTick>
 8000e32:	f04f 0802 	mov.w	r8, #2
 8000e36:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e38:	4d8c      	ldr	r5, [pc, #560]	; (800106c <HAL_RCC_OscConfig+0x310>)
 8000e3a:	e005      	b.n	8000e48 <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e3c:	f7ff f9f4 	bl	8000228 <HAL_GetTick>
 8000e40:	1bc0      	subs	r0, r0, r7
 8000e42:	2802      	cmp	r0, #2
 8000e44:	f200 8180 	bhi.w	8001148 <HAL_RCC_OscConfig+0x3ec>
 8000e48:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4c:	682a      	ldr	r2, [r5, #0]
 8000e4e:	fa98 f3a8 	rbit	r3, r8
 8000e52:	fab3 f383 	clz	r3, r3
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	fa06 f303 	lsl.w	r3, r6, r3
 8000e5e:	4213      	tst	r3, r2
 8000e60:	d0ec      	beq.n	8000e3c <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e62:	6829      	ldr	r1, [r5, #0]
 8000e64:	22f8      	movs	r2, #248	; 0xf8
 8000e66:	fa92 f2a2 	rbit	r2, r2
 8000e6a:	6963      	ldr	r3, [r4, #20]
 8000e6c:	fab2 f282 	clz	r2, r2
 8000e70:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8000e74:	4093      	lsls	r3, r2
 8000e76:	430b      	orrs	r3, r1
 8000e78:	602b      	str	r3, [r5, #0]
 8000e7a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e7c:	071d      	lsls	r5, r3, #28
 8000e7e:	d44f      	bmi.n	8000f20 <HAL_RCC_OscConfig+0x1c4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e80:	0758      	lsls	r0, r3, #29
 8000e82:	d57b      	bpl.n	8000f7c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e84:	4b79      	ldr	r3, [pc, #484]	; (800106c <HAL_RCC_OscConfig+0x310>)
 8000e86:	69da      	ldr	r2, [r3, #28]
 8000e88:	00d1      	lsls	r1, r2, #3
 8000e8a:	f100 8110 	bmi.w	80010ae <HAL_RCC_OscConfig+0x352>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	69da      	ldr	r2, [r3, #28]
 8000e90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e94:	61da      	str	r2, [r3, #28]
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ea0:	f04f 0801 	mov.w	r8, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea4:	4d72      	ldr	r5, [pc, #456]	; (8001070 <HAL_RCC_OscConfig+0x314>)
 8000ea6:	682b      	ldr	r3, [r5, #0]
 8000ea8:	05da      	lsls	r2, r3, #23
 8000eaa:	f140 813d 	bpl.w	8001128 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eae:	68e3      	ldr	r3, [r4, #12]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	f000 81af 	beq.w	8001214 <HAL_RCC_OscConfig+0x4b8>
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f000 8154 	beq.w	8001164 <HAL_RCC_OscConfig+0x408>
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	4b6b      	ldr	r3, [pc, #428]	; (800106c <HAL_RCC_OscConfig+0x310>)
 8000ec0:	6a1a      	ldr	r2, [r3, #32]
 8000ec2:	f000 820f 	beq.w	80012e4 <HAL_RCC_OscConfig+0x588>
 8000ec6:	f022 0201 	bic.w	r2, r2, #1
 8000eca:	621a      	str	r2, [r3, #32]
 8000ecc:	6a1a      	ldr	r2, [r3, #32]
 8000ece:	f022 0204 	bic.w	r2, r2, #4
 8000ed2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed4:	f7ff f9a8 	bl	8000228 <HAL_GetTick>
 8000ed8:	f04f 0902 	mov.w	r9, #2
 8000edc:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ede:	4e63      	ldr	r6, [pc, #396]	; (800106c <HAL_RCC_OscConfig+0x310>)
 8000ee0:	2501      	movs	r5, #1
 8000ee2:	e015      	b.n	8000f10 <HAL_RCC_OscConfig+0x1b4>
 8000ee4:	fa99 f3a9 	rbit	r3, r9
 8000ee8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000eea:	fa99 f3a9 	rbit	r3, r9
 8000eee:	fab3 f383 	clz	r3, r3
 8000ef2:	f003 031f 	and.w	r3, r3, #31
 8000ef6:	fa05 f303 	lsl.w	r3, r5, r3
 8000efa:	4213      	tst	r3, r2
 8000efc:	f040 8128 	bne.w	8001150 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f00:	f7ff f992 	bl	8000228 <HAL_GetTick>
 8000f04:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f08:	1bc0      	subs	r0, r0, r7
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	f200 811c 	bhi.w	8001148 <HAL_RCC_OscConfig+0x3ec>
 8000f10:	fa99 f3a9 	rbit	r3, r9
 8000f14:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0e3      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x188>
 8000f1c:	6a32      	ldr	r2, [r6, #32]
 8000f1e:	e7e4      	b.n	8000eea <HAL_RCC_OscConfig+0x18e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f20:	69a2      	ldr	r2, [r4, #24]
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d07b      	beq.n	800101e <HAL_RCC_OscConfig+0x2c2>
 8000f26:	2201      	movs	r2, #1
 8000f28:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8000f2c:	4b51      	ldr	r3, [pc, #324]	; (8001074 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f2e:	4e4f      	ldr	r6, [pc, #316]	; (800106c <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_ENABLE();
 8000f30:	fab1 f181 	clz	r1, r1
 8000f34:	440b      	add	r3, r1
 8000f36:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f38:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8000f3a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f3c:	f7ff f974 	bl	8000228 <HAL_GetTick>
 8000f40:	f04f 0802 	mov.w	r8, #2
 8000f44:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f46:	e005      	b.n	8000f54 <HAL_RCC_OscConfig+0x1f8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f48:	f7ff f96e 	bl	8000228 <HAL_GetTick>
 8000f4c:	1bc0      	subs	r0, r0, r7
 8000f4e:	2802      	cmp	r0, #2
 8000f50:	f200 80fa 	bhi.w	8001148 <HAL_RCC_OscConfig+0x3ec>
 8000f54:	fa98 f3a8 	rbit	r3, r8
 8000f58:	fa98 f3a8 	rbit	r3, r8
 8000f5c:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f60:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000f62:	fa98 f3a8 	rbit	r3, r8
 8000f66:	fab3 f383 	clz	r3, r3
 8000f6a:	f003 031f 	and.w	r3, r3, #31
 8000f6e:	fa05 f303 	lsl.w	r3, r5, r3
 8000f72:	4213      	tst	r3, r2
 8000f74:	d0e8      	beq.n	8000f48 <HAL_RCC_OscConfig+0x1ec>
 8000f76:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f78:	0758      	lsls	r0, r3, #29
 8000f7a:	d483      	bmi.n	8000e84 <HAL_RCC_OscConfig+0x128>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f7c:	69e3      	ldr	r3, [r4, #28]
 8000f7e:	b37b      	cbz	r3, 8000fe0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f80:	4d3a      	ldr	r5, [pc, #232]	; (800106c <HAL_RCC_OscConfig+0x310>)
 8000f82:	686a      	ldr	r2, [r5, #4]
 8000f84:	f002 020c 	and.w	r2, r2, #12
 8000f88:	2a08      	cmp	r2, #8
 8000f8a:	d044      	beq.n	8001016 <HAL_RCC_OscConfig+0x2ba>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f92:	f000 8145 	beq.w	8001220 <HAL_RCC_OscConfig+0x4c4>
 8000f96:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f9a:	fab3 f383 	clz	r3, r3
 8000f9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fa2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff f93c 	bl	8000228 <HAL_GetTick>
 8000fb0:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000fb4:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb6:	2601      	movs	r6, #1
 8000fb8:	e005      	b.n	8000fc6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fba:	f7ff f935 	bl	8000228 <HAL_GetTick>
 8000fbe:	1bc0      	subs	r0, r0, r7
 8000fc0:	2802      	cmp	r0, #2
 8000fc2:	f200 80c1 	bhi.w	8001148 <HAL_RCC_OscConfig+0x3ec>
 8000fc6:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fca:	682a      	ldr	r2, [r5, #0]
 8000fcc:	fa94 f3a4 	rbit	r3, r4
 8000fd0:	fab3 f383 	clz	r3, r3
 8000fd4:	f003 031f 	and.w	r3, r3, #31
 8000fd8:	fa06 f303 	lsl.w	r3, r6, r3
 8000fdc:	4213      	tst	r3, r2
 8000fde:	d1ec      	bne.n	8000fba <HAL_RCC_OscConfig+0x25e>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000fe0:	2000      	movs	r0, #0
}
 8000fe2:	b003      	add	sp, #12
 8000fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fe8:	6852      	ldr	r2, [r2, #4]
 8000fea:	03d6      	lsls	r6, r2, #15
 8000fec:	f53f af0f 	bmi.w	8000e0e <HAL_RCC_OscConfig+0xb2>
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff6:	491d      	ldr	r1, [pc, #116]	; (800106c <HAL_RCC_OscConfig+0x310>)
 8000ff8:	6808      	ldr	r0, [r1, #0]
 8000ffa:	fa92 f2a2 	rbit	r2, r2
 8000ffe:	fab2 f282 	clz	r2, r2
 8001002:	f002 021f 	and.w	r2, r2, #31
 8001006:	2101      	movs	r1, #1
 8001008:	fa01 f202 	lsl.w	r2, r1, r2
 800100c:	4202      	tst	r2, r0
 800100e:	d051      	beq.n	80010b4 <HAL_RCC_OscConfig+0x358>
 8001010:	6922      	ldr	r2, [r4, #16]
 8001012:	428a      	cmp	r2, r1
 8001014:	d04e      	beq.n	80010b4 <HAL_RCC_OscConfig+0x358>
        return HAL_ERROR;
 8001016:	2001      	movs	r0, #1
}
 8001018:	b003      	add	sp, #12
 800101a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800101e:	2501      	movs	r5, #1
 8001020:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001026:	4e11      	ldr	r6, [pc, #68]	; (800106c <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_DISABLE();
 8001028:	fab1 f181 	clz	r1, r1
 800102c:	440b      	add	r3, r1
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	f04f 0802 	mov.w	r8, #2
 8001034:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001036:	f7ff f8f7 	bl	8000228 <HAL_GetTick>
 800103a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800103c:	e004      	b.n	8001048 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800103e:	f7ff f8f3 	bl	8000228 <HAL_GetTick>
 8001042:	1bc0      	subs	r0, r0, r7
 8001044:	2802      	cmp	r0, #2
 8001046:	d87f      	bhi.n	8001148 <HAL_RCC_OscConfig+0x3ec>
 8001048:	fa98 f3a8 	rbit	r3, r8
 800104c:	fa98 f3a8 	rbit	r3, r8
 8001050:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001054:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001056:	fa98 f3a8 	rbit	r3, r8
 800105a:	fab3 f383 	clz	r3, r3
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	fa05 f303 	lsl.w	r3, r5, r3
 8001066:	4213      	tst	r3, r2
 8001068:	d1e9      	bne.n	800103e <HAL_RCC_OscConfig+0x2e2>
 800106a:	e784      	b.n	8000f76 <HAL_RCC_OscConfig+0x21a>
 800106c:	40021000 	.word	0x40021000
 8001070:	40007000 	.word	0x40007000
 8001074:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001078:	684a      	ldr	r2, [r1, #4]
 800107a:	03d2      	lsls	r2, r2, #15
 800107c:	f57f ae82 	bpl.w	8000d84 <HAL_RCC_OscConfig+0x28>
 8001080:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001084:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001088:	499a      	ldr	r1, [pc, #616]	; (80012f4 <HAL_RCC_OscConfig+0x598>)
 800108a:	6808      	ldr	r0, [r1, #0]
 800108c:	fa92 f2a2 	rbit	r2, r2
 8001090:	fab2 f282 	clz	r2, r2
 8001094:	f002 021f 	and.w	r2, r2, #31
 8001098:	2101      	movs	r1, #1
 800109a:	fa01 f202 	lsl.w	r2, r1, r2
 800109e:	4202      	tst	r2, r0
 80010a0:	f43f aea7 	beq.w	8000df2 <HAL_RCC_OscConfig+0x96>
 80010a4:	6862      	ldr	r2, [r4, #4]
 80010a6:	2a00      	cmp	r2, #0
 80010a8:	f47f aea3 	bne.w	8000df2 <HAL_RCC_OscConfig+0x96>
 80010ac:	e7b3      	b.n	8001016 <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 80010ae:	f04f 0800 	mov.w	r8, #0
 80010b2:	e6f7      	b.n	8000ea4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b4:	4d8f      	ldr	r5, [pc, #572]	; (80012f4 <HAL_RCC_OscConfig+0x598>)
 80010b6:	21f8      	movs	r1, #248	; 0xf8
 80010b8:	6828      	ldr	r0, [r5, #0]
 80010ba:	fa91 f1a1 	rbit	r1, r1
 80010be:	6962      	ldr	r2, [r4, #20]
 80010c0:	fab1 f181 	clz	r1, r1
 80010c4:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 80010c8:	408a      	lsls	r2, r1
 80010ca:	4302      	orrs	r2, r0
 80010cc:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ce:	071d      	lsls	r5, r3, #28
 80010d0:	f57f aed6 	bpl.w	8000e80 <HAL_RCC_OscConfig+0x124>
 80010d4:	e724      	b.n	8000f20 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d6:	4d87      	ldr	r5, [pc, #540]	; (80012f4 <HAL_RCC_OscConfig+0x598>)
 80010d8:	682b      	ldr	r3, [r5, #0]
 80010da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010de:	602b      	str	r3, [r5, #0]
 80010e0:	682b      	ldr	r3, [r5, #0]
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80010ea:	68a2      	ldr	r2, [r4, #8]
 80010ec:	f023 030f 	bic.w	r3, r3, #15
 80010f0:	4313      	orrs	r3, r2
 80010f2:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 80010f4:	f7ff f898 	bl	8000228 <HAL_GetTick>
 80010f8:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 80010fc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	2601      	movs	r6, #1
 8001100:	e004      	b.n	800110c <HAL_RCC_OscConfig+0x3b0>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001102:	f7ff f891 	bl	8000228 <HAL_GetTick>
 8001106:	1bc0      	subs	r0, r0, r7
 8001108:	2864      	cmp	r0, #100	; 0x64
 800110a:	d81d      	bhi.n	8001148 <HAL_RCC_OscConfig+0x3ec>
 800110c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001110:	682a      	ldr	r2, [r5, #0]
 8001112:	fa98 f3a8 	rbit	r3, r8
 8001116:	fab3 f383 	clz	r3, r3
 800111a:	f003 031f 	and.w	r3, r3, #31
 800111e:	fa06 f303 	lsl.w	r3, r6, r3
 8001122:	4213      	tst	r3, r2
 8001124:	d1ed      	bne.n	8001102 <HAL_RCC_OscConfig+0x3a6>
 8001126:	e663      	b.n	8000df0 <HAL_RCC_OscConfig+0x94>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001128:	682b      	ldr	r3, [r5, #0]
 800112a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001130:	f7ff f87a 	bl	8000228 <HAL_GetTick>
 8001134:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001136:	682b      	ldr	r3, [r5, #0]
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	f53f aeb8 	bmi.w	8000eae <HAL_RCC_OscConfig+0x152>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800113e:	f7ff f873 	bl	8000228 <HAL_GetTick>
 8001142:	1b80      	subs	r0, r0, r6
 8001144:	2864      	cmp	r0, #100	; 0x64
 8001146:	d9f6      	bls.n	8001136 <HAL_RCC_OscConfig+0x3da>
            return HAL_TIMEOUT;
 8001148:	2003      	movs	r0, #3
}
 800114a:	b003      	add	sp, #12
 800114c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(pwrclkchanged == SET)
 8001150:	f1b8 0f00 	cmp.w	r8, #0
 8001154:	f43f af12 	beq.w	8000f7c <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001158:	4a66      	ldr	r2, [pc, #408]	; (80012f4 <HAL_RCC_OscConfig+0x598>)
 800115a:	69d3      	ldr	r3, [r2, #28]
 800115c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001160:	61d3      	str	r3, [r2, #28]
 8001162:	e70b      	b.n	8000f7c <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001164:	4d63      	ldr	r5, [pc, #396]	; (80012f4 <HAL_RCC_OscConfig+0x598>)
 8001166:	6a2b      	ldr	r3, [r5, #32]
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	622b      	str	r3, [r5, #32]
 800116e:	6a2b      	ldr	r3, [r5, #32]
 8001170:	f023 0304 	bic.w	r3, r3, #4
 8001174:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001176:	f7ff f857 	bl	8000228 <HAL_GetTick>
 800117a:	f04f 0902 	mov.w	r9, #2
 800117e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001180:	2601      	movs	r6, #1
 8001182:	e013      	b.n	80011ac <HAL_RCC_OscConfig+0x450>
 8001184:	fa99 f3a9 	rbit	r3, r9
 8001188:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800118a:	fa99 f3a9 	rbit	r3, r9
 800118e:	fab3 f383 	clz	r3, r3
 8001192:	f003 031f 	and.w	r3, r3, #31
 8001196:	fa06 f303 	lsl.w	r3, r6, r3
 800119a:	4213      	tst	r3, r2
 800119c:	d0d8      	beq.n	8001150 <HAL_RCC_OscConfig+0x3f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800119e:	f7ff f843 	bl	8000228 <HAL_GetTick>
 80011a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80011a6:	1bc0      	subs	r0, r0, r7
 80011a8:	4298      	cmp	r0, r3
 80011aa:	d8cd      	bhi.n	8001148 <HAL_RCC_OscConfig+0x3ec>
 80011ac:	fa99 f3a9 	rbit	r3, r9
 80011b0:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0e5      	beq.n	8001184 <HAL_RCC_OscConfig+0x428>
 80011b8:	6a2a      	ldr	r2, [r5, #32]
 80011ba:	e7e6      	b.n	800118a <HAL_RCC_OscConfig+0x42e>
 80011bc:	2501      	movs	r5, #1
 80011be:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80011c2:	fab3 f383 	clz	r3, r3
 80011c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	f04f 0802 	mov.w	r8, #2
 80011d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011d6:	f7ff f827 	bl	8000228 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011da:	4e46      	ldr	r6, [pc, #280]	; (80012f4 <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 80011dc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011de:	e004      	b.n	80011ea <HAL_RCC_OscConfig+0x48e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e0:	f7ff f822 	bl	8000228 <HAL_GetTick>
 80011e4:	1bc0      	subs	r0, r0, r7
 80011e6:	2802      	cmp	r0, #2
 80011e8:	d8ae      	bhi.n	8001148 <HAL_RCC_OscConfig+0x3ec>
 80011ea:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ee:	6832      	ldr	r2, [r6, #0]
 80011f0:	fa98 f3a8 	rbit	r3, r8
 80011f4:	fab3 f383 	clz	r3, r3
 80011f8:	f003 031f 	and.w	r3, r3, #31
 80011fc:	fa05 f303 	lsl.w	r3, r5, r3
 8001200:	4213      	tst	r3, r2
 8001202:	d1ed      	bne.n	80011e0 <HAL_RCC_OscConfig+0x484>
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	e639      	b.n	8000e7c <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001208:	4a3a      	ldr	r2, [pc, #232]	; (80012f4 <HAL_RCC_OscConfig+0x598>)
 800120a:	6813      	ldr	r3, [r2, #0]
 800120c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e5cc      	b.n	8000dae <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001214:	4a37      	ldr	r2, [pc, #220]	; (80012f4 <HAL_RCC_OscConfig+0x598>)
 8001216:	6a13      	ldr	r3, [r2, #32]
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6213      	str	r3, [r2, #32]
 800121e:	e659      	b.n	8000ed4 <HAL_RCC_OscConfig+0x178>
 8001220:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001224:	fab3 f383 	clz	r3, r3
 8001228:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800122c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001236:	f7fe fff7 	bl	8000228 <HAL_GetTick>
 800123a:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 800123e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001240:	2601      	movs	r6, #1
 8001242:	e005      	b.n	8001250 <HAL_RCC_OscConfig+0x4f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001244:	f7fe fff0 	bl	8000228 <HAL_GetTick>
 8001248:	1bc0      	subs	r0, r0, r7
 800124a:	2802      	cmp	r0, #2
 800124c:	f63f af7c 	bhi.w	8001148 <HAL_RCC_OscConfig+0x3ec>
 8001250:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001254:	682a      	ldr	r2, [r5, #0]
 8001256:	fa98 f3a8 	rbit	r3, r8
 800125a:	fab3 f383 	clz	r3, r3
 800125e:	f003 031f 	and.w	r3, r3, #31
 8001262:	fa06 f303 	lsl.w	r3, r6, r3
 8001266:	4213      	tst	r3, r2
 8001268:	d1ec      	bne.n	8001244 <HAL_RCC_OscConfig+0x4e8>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800126a:	686a      	ldr	r2, [r5, #4]
 800126c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800126e:	6a21      	ldr	r1, [r4, #32]
 8001270:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001274:	430b      	orrs	r3, r1
 8001276:	4313      	orrs	r3, r2
 8001278:	606b      	str	r3, [r5, #4]
 800127a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800127e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800128a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001294:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001296:	f7fe ffc7 	bl	8000228 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800129a:	4e16      	ldr	r6, [pc, #88]	; (80012f4 <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 800129c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800129e:	2501      	movs	r5, #1
 80012a0:	e005      	b.n	80012ae <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a2:	f7fe ffc1 	bl	8000228 <HAL_GetTick>
 80012a6:	1bc0      	subs	r0, r0, r7
 80012a8:	2802      	cmp	r0, #2
 80012aa:	f63f af4d 	bhi.w	8001148 <HAL_RCC_OscConfig+0x3ec>
 80012ae:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b2:	6832      	ldr	r2, [r6, #0]
 80012b4:	fa94 f3a4 	rbit	r3, r4
 80012b8:	fab3 f383 	clz	r3, r3
 80012bc:	f003 031f 	and.w	r3, r3, #31
 80012c0:	fa05 f303 	lsl.w	r3, r5, r3
 80012c4:	4213      	tst	r3, r2
 80012c6:	d0ec      	beq.n	80012a2 <HAL_RCC_OscConfig+0x546>
 80012c8:	e68a      	b.n	8000fe0 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012ce:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	e564      	b.n	8000dae <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e4:	f042 0204 	orr.w	r2, r2, #4
 80012e8:	621a      	str	r2, [r3, #32]
 80012ea:	6a1a      	ldr	r2, [r3, #32]
 80012ec:	f042 0201 	orr.w	r2, r2, #1
 80012f0:	621a      	str	r2, [r3, #32]
 80012f2:	e5ef      	b.n	8000ed4 <HAL_RCC_OscConfig+0x178>
 80012f4:	40021000 	.word	0x40021000

080012f8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80012f8:	4a14      	ldr	r2, [pc, #80]	; (800134c <HAL_RCC_GetSysClockFreq+0x54>)
 80012fa:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012fc:	f003 010c 	and.w	r1, r3, #12
 8001300:	2908      	cmp	r1, #8
 8001302:	d121      	bne.n	8001348 <HAL_RCC_GetSysClockFreq+0x50>
 8001304:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8001308:	fa91 f1a1 	rbit	r1, r1
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800130c:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8001310:	fab1 f181 	clz	r1, r1
 8001314:	fa20 f101 	lsr.w	r1, r0, r1
 8001318:	480d      	ldr	r0, [pc, #52]	; (8001350 <HAL_RCC_GetSysClockFreq+0x58>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800131a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800131c:	5c40      	ldrb	r0, [r0, r1]
 800131e:	210f      	movs	r1, #15
 8001320:	fa91 f1a1 	rbit	r1, r1
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001324:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001326:	fab1 f181 	clz	r1, r1
 800132a:	f002 020f 	and.w	r2, r2, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800132e:	bf4c      	ite	mi
 8001330:	4b08      	ldrmi	r3, [pc, #32]	; (8001354 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001332:	4b09      	ldrpl	r3, [pc, #36]	; (8001358 <HAL_RCC_GetSysClockFreq+0x60>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001334:	fa22 f201 	lsr.w	r2, r2, r1
 8001338:	4908      	ldr	r1, [pc, #32]	; (800135c <HAL_RCC_GetSysClockFreq+0x64>)
 800133a:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800133c:	bf48      	it	mi
 800133e:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001342:	fb03 f000 	mul.w	r0, r3, r0
 8001346:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800134a:	4770      	bx	lr
 800134c:	40021000 	.word	0x40021000
 8001350:	08003be4 	.word	0x08003be4
 8001354:	007a1200 	.word	0x007a1200
 8001358:	003d0900 	.word	0x003d0900
 800135c:	08003bf4 	.word	0x08003bf4

08001360 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001360:	4a5f      	ldr	r2, [pc, #380]	; (80014e0 <HAL_RCC_ClockConfig+0x180>)
 8001362:	6813      	ldr	r3, [r2, #0]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	428b      	cmp	r3, r1
 800136a:	d20b      	bcs.n	8001384 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136c:	6813      	ldr	r3, [r2, #0]
 800136e:	f023 0307 	bic.w	r3, r3, #7
 8001372:	430b      	orrs	r3, r1
 8001374:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001376:	6813      	ldr	r3, [r2, #0]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	4299      	cmp	r1, r3
 800137e:	d001      	beq.n	8001384 <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 8001380:	2001      	movs	r0, #1
}
 8001382:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001384:	6803      	ldr	r3, [r0, #0]
{
 8001386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800138a:	079c      	lsls	r4, r3, #30
 800138c:	d506      	bpl.n	800139c <HAL_RCC_ClockConfig+0x3c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800138e:	4c55      	ldr	r4, [pc, #340]	; (80014e4 <HAL_RCC_ClockConfig+0x184>)
 8001390:	6885      	ldr	r5, [r0, #8]
 8001392:	6862      	ldr	r2, [r4, #4]
 8001394:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001398:	432a      	orrs	r2, r5
 800139a:	6062      	str	r2, [r4, #4]
 800139c:	460c      	mov	r4, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800139e:	07d9      	lsls	r1, r3, #31
 80013a0:	4606      	mov	r6, r0
 80013a2:	d531      	bpl.n	8001408 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013a4:	6842      	ldr	r2, [r0, #4]
 80013a6:	2a01      	cmp	r2, #1
 80013a8:	f000 8087 	beq.w	80014ba <HAL_RCC_ClockConfig+0x15a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ac:	2a02      	cmp	r2, #2
 80013ae:	bf0c      	ite	eq
 80013b0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80013b4:	2302      	movne	r3, #2
 80013b6:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ba:	494a      	ldr	r1, [pc, #296]	; (80014e4 <HAL_RCC_ClockConfig+0x184>)
 80013bc:	6808      	ldr	r0, [r1, #0]
 80013be:	fa93 f3a3 	rbit	r3, r3
 80013c2:	fab3 f383 	clz	r3, r3
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	2101      	movs	r1, #1
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	4203      	tst	r3, r0
 80013d2:	d029      	beq.n	8001428 <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013d4:	4d43      	ldr	r5, [pc, #268]	; (80014e4 <HAL_RCC_ClockConfig+0x184>)
 80013d6:	686b      	ldr	r3, [r5, #4]
 80013d8:	f023 0303 	bic.w	r3, r3, #3
 80013dc:	4313      	orrs	r3, r2
 80013de:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80013e0:	f7fe ff22 	bl	8000228 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e4:	6873      	ldr	r3, [r6, #4]
 80013e6:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80013e8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ea:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ee:	d023      	beq.n	8001438 <HAL_RCC_ClockConfig+0xd8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d105      	bne.n	8001400 <HAL_RCC_ClockConfig+0xa0>
 80013f4:	e058      	b.n	80014a8 <HAL_RCC_ClockConfig+0x148>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f6:	f7fe ff17 	bl	8000228 <HAL_GetTick>
 80013fa:	1bc0      	subs	r0, r0, r7
 80013fc:	4540      	cmp	r0, r8
 80013fe:	d859      	bhi.n	80014b4 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001400:	686b      	ldr	r3, [r5, #4]
 8001402:	f013 0f0c 	tst.w	r3, #12
 8001406:	d1f6      	bne.n	80013f6 <HAL_RCC_ClockConfig+0x96>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001408:	4a35      	ldr	r2, [pc, #212]	; (80014e0 <HAL_RCC_ClockConfig+0x180>)
 800140a:	6813      	ldr	r3, [r2, #0]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	429c      	cmp	r4, r3
 8001412:	d217      	bcs.n	8001444 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001414:	6813      	ldr	r3, [r2, #0]
 8001416:	f023 0307 	bic.w	r3, r3, #7
 800141a:	4323      	orrs	r3, r4
 800141c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800141e:	6813      	ldr	r3, [r2, #0]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	429c      	cmp	r4, r3
 8001426:	d00d      	beq.n	8001444 <HAL_RCC_ClockConfig+0xe4>
      return HAL_ERROR;
 8001428:	2001      	movs	r0, #1
 800142a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800142e:	f7fe fefb 	bl	8000228 <HAL_GetTick>
 8001432:	1bc0      	subs	r0, r0, r7
 8001434:	4540      	cmp	r0, r8
 8001436:	d83d      	bhi.n	80014b4 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001438:	686b      	ldr	r3, [r5, #4]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b04      	cmp	r3, #4
 8001440:	d1f5      	bne.n	800142e <HAL_RCC_ClockConfig+0xce>
 8001442:	e7e1      	b.n	8001408 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001444:	6833      	ldr	r3, [r6, #0]
 8001446:	075a      	lsls	r2, r3, #29
 8001448:	d506      	bpl.n	8001458 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800144a:	4926      	ldr	r1, [pc, #152]	; (80014e4 <HAL_RCC_ClockConfig+0x184>)
 800144c:	68f0      	ldr	r0, [r6, #12]
 800144e:	684a      	ldr	r2, [r1, #4]
 8001450:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001454:	4302      	orrs	r2, r0
 8001456:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001458:	071b      	lsls	r3, r3, #28
 800145a:	d507      	bpl.n	800146c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800145c:	4a21      	ldr	r2, [pc, #132]	; (80014e4 <HAL_RCC_ClockConfig+0x184>)
 800145e:	6931      	ldr	r1, [r6, #16]
 8001460:	6853      	ldr	r3, [r2, #4]
 8001462:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001466:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800146a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800146c:	f7ff ff44 	bl	80012f8 <HAL_RCC_GetSysClockFreq>
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <HAL_RCC_ClockConfig+0x184>)
 8001472:	4601      	mov	r1, r0
 8001474:	22f0      	movs	r2, #240	; 0xf0
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	fa92 f2a2 	rbit	r2, r2
 800147c:	fab2 f282 	clz	r2, r2
 8001480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001484:	40d3      	lsrs	r3, r2
 8001486:	4818      	ldr	r0, [pc, #96]	; (80014e8 <HAL_RCC_ClockConfig+0x188>)
 8001488:	4a18      	ldr	r2, [pc, #96]	; (80014ec <HAL_RCC_ClockConfig+0x18c>)
 800148a:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 800148c:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800148e:	fa21 f303 	lsr.w	r3, r1, r3
 8001492:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001494:	f7fe fe98 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8001498:	2000      	movs	r0, #0
}
 800149a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800149e:	f7fe fec3 	bl	8000228 <HAL_GetTick>
 80014a2:	1bc0      	subs	r0, r0, r7
 80014a4:	4540      	cmp	r0, r8
 80014a6:	d805      	bhi.n	80014b4 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014a8:	686b      	ldr	r3, [r5, #4]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d1f5      	bne.n	800149e <HAL_RCC_ClockConfig+0x13e>
 80014b2:	e7a9      	b.n	8001408 <HAL_RCC_ClockConfig+0xa8>
          return HAL_TIMEOUT;
 80014b4:	2003      	movs	r0, #3
 80014b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014be:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <HAL_RCC_ClockConfig+0x184>)
 80014c4:	6809      	ldr	r1, [r1, #0]
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	420b      	tst	r3, r1
 80014d8:	f47f af7c 	bne.w	80013d4 <HAL_RCC_ClockConfig+0x74>
 80014dc:	e7a4      	b.n	8001428 <HAL_RCC_ClockConfig+0xc8>
 80014de:	bf00      	nop
 80014e0:	40022000 	.word	0x40022000
 80014e4:	40021000 	.word	0x40021000
 80014e8:	08003c08 	.word	0x08003c08
 80014ec:	20000000 	.word	0x20000000

080014f0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80014f0:	4b01      	ldr	r3, [pc, #4]	; (80014f8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000

080014fc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	fa92 f2a2 	rbit	r2, r2
 8001508:	fab2 f282 	clz	r2, r2
 800150c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001510:	40d3      	lsrs	r3, r2
 8001512:	4904      	ldr	r1, [pc, #16]	; (8001524 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001516:	5ccb      	ldrb	r3, [r1, r3]
 8001518:	6810      	ldr	r0, [r2, #0]
}    
 800151a:	40d8      	lsrs	r0, r3
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	08003c18 	.word	0x08003c18
 8001528:	20000000 	.word	0x20000000

0800152c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_RCC_GetPCLK2Freq+0x24>)
 800152e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	fa92 f2a2 	rbit	r2, r2
 8001538:	fab2 f282 	clz	r2, r2
 800153c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001540:	40d3      	lsrs	r3, r2
 8001542:	4904      	ldr	r1, [pc, #16]	; (8001554 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001546:	5ccb      	ldrb	r3, [r1, r3]
 8001548:	6810      	ldr	r0, [r2, #0]
} 
 800154a:	40d8      	lsrs	r0, r3
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	08003c18 	.word	0x08003c18
 8001558:	20000000 	.word	0x20000000

0800155c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800155c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001560:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001562:	6800      	ldr	r0, [r0, #0]
 8001564:	03c5      	lsls	r5, r0, #15
{
 8001566:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001568:	d538      	bpl.n	80015dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156a:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800156c:	69da      	ldr	r2, [r3, #28]
 800156e:	00d1      	lsls	r1, r2, #3
 8001570:	d567      	bpl.n	8001642 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001572:	4d59      	ldr	r5, [pc, #356]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8001574:	682b      	ldr	r3, [r5, #0]
 8001576:	05da      	lsls	r2, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 8001578:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	d570      	bpl.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0x104>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800157e:	4d55      	ldr	r5, [pc, #340]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001580:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001582:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001586:	d01f      	beq.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8001588:	6861      	ldr	r1, [r4, #4]
 800158a:	f401 7240 	and.w	r2, r1, #768	; 0x300
 800158e:	4293      	cmp	r3, r2
 8001590:	d01b      	beq.n	80015ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001592:	6a29      	ldr	r1, [r5, #32]
 8001594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001598:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 800159c:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80015a0:	4f4e      	ldr	r7, [pc, #312]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x180>)
 80015a2:	fab2 f282 	clz	r2, r2
 80015a6:	443a      	add	r2, r7
 80015a8:	0092      	lsls	r2, r2, #2
 80015aa:	f04f 0e01 	mov.w	lr, #1
 80015ae:	f8c2 e000 	str.w	lr, [r2]
 80015b2:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015b6:	fab3 f383 	clz	r3, r3
 80015ba:	443b      	add	r3, r7
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80015c0:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015c2:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 80015c4:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80015c6:	d461      	bmi.n	800168c <HAL_RCCEx_PeriphCLKConfig+0x130>
 80015c8:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80015ca:	4a42      	ldr	r2, [pc, #264]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80015cc:	6a13      	ldr	r3, [r2, #32]
 80015ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015d2:	430b      	orrs	r3, r1
 80015d4:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015d6:	2e00      	cmp	r6, #0
 80015d8:	d153      	bne.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0x126>
 80015da:	6820      	ldr	r0, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80015dc:	07c5      	lsls	r5, r0, #31
 80015de:	d506      	bpl.n	80015ee <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80015e0:	4a3c      	ldr	r2, [pc, #240]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80015e2:	68a1      	ldr	r1, [r4, #8]
 80015e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015e6:	f023 0303 	bic.w	r3, r3, #3
 80015ea:	430b      	orrs	r3, r1
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015ee:	0681      	lsls	r1, r0, #26
 80015f0:	d506      	bpl.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015f2:	4a38      	ldr	r2, [pc, #224]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80015f4:	68e1      	ldr	r1, [r4, #12]
 80015f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015f8:	f023 0310 	bic.w	r3, r3, #16
 80015fc:	430b      	orrs	r3, r1
 80015fe:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001600:	0602      	lsls	r2, r0, #24
 8001602:	d506      	bpl.n	8001612 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001604:	4a33      	ldr	r2, [pc, #204]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001606:	6921      	ldr	r1, [r4, #16]
 8001608:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800160a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800160e:	430b      	orrs	r3, r1
 8001610:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001612:	04c3      	lsls	r3, r0, #19
 8001614:	d40d      	bmi.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0xd6>
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8001616:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 800161a:	d007      	beq.n	800162c <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800161c:	4a2d      	ldr	r2, [pc, #180]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800161e:	69a1      	ldr	r1, [r4, #24]
 8001620:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001626:	430b      	orrs	r3, r1
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800162a:	2000      	movs	r0, #0
}
 800162c:	b003      	add	sp, #12
 800162e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001632:	4a28      	ldr	r2, [pc, #160]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001634:	6961      	ldr	r1, [r4, #20]
 8001636:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800163c:	430b      	orrs	r3, r1
 800163e:	6313      	str	r3, [r2, #48]	; 0x30
 8001640:	e7e9      	b.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001644:	4d24      	ldr	r5, [pc, #144]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800164a:	61da      	str	r2, [r3, #28]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	682b      	ldr	r3, [r5, #0]
 8001658:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 800165a:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165e:	d48e      	bmi.n	800157e <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001660:	682b      	ldr	r3, [r5, #0]
 8001662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001666:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001668:	f7fe fdde 	bl	8000228 <HAL_GetTick>
 800166c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166e:	682b      	ldr	r3, [r5, #0]
 8001670:	05db      	lsls	r3, r3, #23
 8001672:	d484      	bmi.n	800157e <HAL_RCCEx_PeriphCLKConfig+0x22>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001674:	f7fe fdd8 	bl	8000228 <HAL_GetTick>
 8001678:	1bc0      	subs	r0, r0, r7
 800167a:	2864      	cmp	r0, #100	; 0x64
 800167c:	d9f7      	bls.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x112>
          return HAL_TIMEOUT;
 800167e:	2003      	movs	r0, #3
 8001680:	e7d4      	b.n	800162c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001682:	69d3      	ldr	r3, [r2, #28]
 8001684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	e7a6      	b.n	80015da <HAL_RCCEx_PeriphCLKConfig+0x7e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168c:	4677      	mov	r7, lr
        tickstart = HAL_GetTick();
 800168e:	f7fe fdcb 	bl	8000228 <HAL_GetTick>
 8001692:	f04f 0902 	mov.w	r9, #2
 8001696:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001698:	e014      	b.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800169a:	fa99 f3a9 	rbit	r3, r9
 800169e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80016a0:	fa99 f3a9 	rbit	r3, r9
 80016a4:	fab3 f383 	clz	r3, r3
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	fa07 f303 	lsl.w	r3, r7, r3
 80016b0:	4213      	tst	r3, r2
 80016b2:	d189      	bne.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b4:	f7fe fdb8 	bl	8000228 <HAL_GetTick>
 80016b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80016bc:	eba0 0008 	sub.w	r0, r0, r8
 80016c0:	4298      	cmp	r0, r3
 80016c2:	d8dc      	bhi.n	800167e <HAL_RCCEx_PeriphCLKConfig+0x122>
 80016c4:	fa99 f3a9 	rbit	r3, r9
 80016c8:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0e4      	beq.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80016d0:	6a2a      	ldr	r2, [r5, #32]
 80016d2:	e7e5      	b.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40007000 	.word	0x40007000
 80016dc:	10908100 	.word	0x10908100

080016e0 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80016e0:	6803      	ldr	r3, [r0, #0]
{
 80016e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80016e4:	6a9d      	ldr	r5, [r3, #40]	; 0x28

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80016e6:	691c      	ldr	r4, [r3, #16]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80016e8:	681b      	ldr	r3, [r3, #0]
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80016ea:	604d      	str	r5, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80016ec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80016f0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80016f4:	0c18      	lsrs	r0, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80016f6:	f3c3 2706 	ubfx	r7, r3, #8, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80016fa:	f3c4 040e 	ubfx	r4, r4, #0, #15
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80016fe:	b2db      	uxtb	r3, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8001700:	f000 0e40 	and.w	lr, r0, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8001704:	f000 063f 	and.w	r6, r0, #63	; 0x3f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001708:	608c      	str	r4, [r1, #8]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 800170a:	f881 e003 	strb.w	lr, [r1, #3]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800170e:	700e      	strb	r6, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8001710:	704f      	strb	r7, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8001712:	708b      	strb	r3, [r1, #2]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8001714:	b9ba      	cbnz	r2, 8001746 <HAL_RTC_GetTime+0x66>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8001716:	093d      	lsrs	r5, r7, #4
 8001718:	091c      	lsrs	r4, r3, #4
 800171a:	0936      	lsrs	r6, r6, #4
 800171c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8001720:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001724:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 8001728:	f000 000f 	and.w	r0, r0, #15
 800172c:	f007 070f 	and.w	r7, r7, #15
 8001730:	f003 030f 	and.w	r3, r3, #15
 8001734:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8001738:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 800173c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001740:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001742:	704d      	strb	r5, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8001744:	708c      	strb	r4, [r1, #2]
}
 8001746:	2000      	movs	r0, #0
 8001748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800174a:	bf00      	nop

0800174c <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 800174c:	6803      	ldr	r3, [r0, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001754:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
{
 8001758:	b4f0      	push	{r4, r5, r6, r7}
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800175a:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800175e:	b2dd      	uxtb	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8001760:	f3c3 3742 	ubfx	r7, r3, #13, #3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8001764:	f004 061f 	and.w	r6, r4, #31
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8001768:	0c1b      	lsrs	r3, r3, #16
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800176a:	700f      	strb	r7, [r1, #0]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800176c:	704e      	strb	r6, [r1, #1]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800176e:	70cb      	strb	r3, [r1, #3]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001770:	708d      	strb	r5, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8001772:	b9ba      	cbnz	r2, 80017a4 <HAL_RTC_GetDate+0x58>
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8001774:	0936      	lsrs	r6, r6, #4
 8001776:	0928      	lsrs	r0, r5, #4
 8001778:	091a      	lsrs	r2, r3, #4
 800177a:	00b7      	lsls	r7, r6, #2
 800177c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 8001780:	f004 040f 	and.w	r4, r4, #15
 8001784:	f005 050f 	and.w	r5, r5, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8001788:	443e      	add	r6, r7
 800178a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8001796:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800179a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 800179e:	7088      	strb	r0, [r1, #2]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80017a0:	704c      	strb	r4, [r1, #1]
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80017a2:	70cb      	strb	r3, [r1, #3]
}
 80017a4:	2000      	movs	r0, #0
 80017a6:	bcf0      	pop	{r4, r5, r6, r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop

080017ac <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80017ac:	6802      	ldr	r2, [r0, #0]
{
 80017ae:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80017b0:	68d3      	ldr	r3, [r2, #12]
 80017b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80017b6:	60d3      	str	r3, [r2, #12]
{
 80017b8:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80017ba:	f7fe fd35 	bl	8000228 <HAL_GetTick>
 80017be:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80017c0:	e005      	b.n	80017ce <HAL_RTC_WaitForSynchro+0x22>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80017c2:	f7fe fd31 	bl	8000228 <HAL_GetTick>
 80017c6:	1b40      	subs	r0, r0, r5
 80017c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80017cc:	d805      	bhi.n	80017da <HAL_RTC_WaitForSynchro+0x2e>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80017ce:	6823      	ldr	r3, [r4, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	069b      	lsls	r3, r3, #26
 80017d4:	d5f5      	bpl.n	80017c2 <HAL_RTC_WaitForSynchro+0x16>
  return HAL_OK;
 80017d6:	2000      	movs	r0, #0
 80017d8:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 80017da:	2003      	movs	r0, #3
}
 80017dc:	bd38      	pop	{r3, r4, r5, pc}
 80017de:	bf00      	nop

080017e0 <RTC_EnterInitMode>:
{
 80017e0:	b538      	push	{r3, r4, r5, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80017e2:	6803      	ldr	r3, [r0, #0]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	0652      	lsls	r2, r2, #25
 80017e8:	d501      	bpl.n	80017ee <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 80017ea:	2000      	movs	r0, #0
 80017ec:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 80017f6:	f7fe fd17 	bl	8000228 <HAL_GetTick>
 80017fa:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	065b      	lsls	r3, r3, #25
 8001802:	d4f2      	bmi.n	80017ea <RTC_EnterInitMode+0xa>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001804:	f7fe fd10 	bl	8000228 <HAL_GetTick>
 8001808:	1b40      	subs	r0, r0, r5
 800180a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800180e:	d9f5      	bls.n	80017fc <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001810:	2003      	movs	r0, #3
}
 8001812:	bd38      	pop	{r3, r4, r5, pc}

08001814 <HAL_RTC_Init>:
{
 8001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hrtc == NULL)
 8001816:	2800      	cmp	r0, #0
 8001818:	d050      	beq.n	80018bc <HAL_RTC_Init+0xa8>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800181a:	7f43      	ldrb	r3, [r0, #29]
 800181c:	4604      	mov	r4, r0
 800181e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001822:	2b00      	cmp	r3, #0
 8001824:	d03f      	beq.n	80018a6 <HAL_RTC_Init+0x92>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001826:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001828:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800182a:	21ca      	movs	r1, #202	; 0xca
 800182c:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800182e:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001830:	6259      	str	r1, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001832:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001836:	f7ff ffd3 	bl	80017e0 <RTC_EnterInitMode>
 800183a:	4605      	mov	r5, r0
 800183c:	2800      	cmp	r0, #0
 800183e:	d12a      	bne.n	8001896 <HAL_RTC_Init+0x82>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001840:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001842:	6862      	ldr	r2, [r4, #4]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001844:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001846:	6927      	ldr	r7, [r4, #16]
 8001848:	6966      	ldr	r6, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800184a:	68e0      	ldr	r0, [r4, #12]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800184c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8001850:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001854:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001856:	6899      	ldr	r1, [r3, #8]
 8001858:	433a      	orrs	r2, r7
 800185a:	4332      	orrs	r2, r6
 800185c:	430a      	orrs	r2, r1
 800185e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001860:	6118      	str	r0, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	68a1      	ldr	r1, [r4, #8]
 8001866:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800186a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001872:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	0692      	lsls	r2, r2, #26
 8001878:	d519      	bpl.n	80018ae <HAL_RTC_Init+0x9a>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800187a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800187c:	69a6      	ldr	r6, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800187e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001882:	6419      	str	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001886:	20ff      	movs	r0, #255	; 0xff
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001888:	4332      	orrs	r2, r6
    hrtc->State = HAL_RTC_STATE_READY;
 800188a:	2101      	movs	r1, #1
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800188c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800188e:	6258      	str	r0, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001890:	7761      	strb	r1, [r4, #29]
}
 8001892:	4628      	mov	r0, r5
 8001894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001896:	6822      	ldr	r2, [r4, #0]
 8001898:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 800189a:	2304      	movs	r3, #4
        return HAL_ERROR;
 800189c:	2501      	movs	r5, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800189e:	6251      	str	r1, [r2, #36]	; 0x24
}
 80018a0:	4628      	mov	r0, r5
        hrtc->State = HAL_RTC_STATE_ERROR;
 80018a2:	7763      	strb	r3, [r4, #29]
}
 80018a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80018a6:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80018a8:	f001 f9d4 	bl	8002c54 <HAL_RTC_MspInit>
 80018ac:	e7bb      	b.n	8001826 <HAL_RTC_Init+0x12>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff ff7c 	bl	80017ac <HAL_RTC_WaitForSynchro>
 80018b4:	2800      	cmp	r0, #0
 80018b6:	d1ee      	bne.n	8001896 <HAL_RTC_Init+0x82>
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	e7de      	b.n	800187a <HAL_RTC_Init+0x66>
     return HAL_ERROR;
 80018bc:	2501      	movs	r5, #1
}
 80018be:	4628      	mov	r0, r5
 80018c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018c2:	bf00      	nop

080018c4 <HAL_RTC_SetTime>:
{
 80018c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80018c6:	7f03      	ldrb	r3, [r0, #28]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d07b      	beq.n	80019c4 <HAL_RTC_SetTime+0x100>
 80018cc:	460e      	mov	r6, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80018ce:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 80018d0:	2101      	movs	r1, #1
 80018d2:	7701      	strb	r1, [r0, #28]
 80018d4:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 80018d6:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80018d8:	6801      	ldr	r1, [r0, #0]
  if(Format == RTC_FORMAT_BIN)
 80018da:	2a00      	cmp	r2, #0
 80018dc:	d039      	beq.n	8001952 <HAL_RTC_SetTime+0x8e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80018de:	688c      	ldr	r4, [r1, #8]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80018e0:	7870      	ldrb	r0, [r6, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80018e2:	7832      	ldrb	r2, [r6, #0]
              ((uint32_t)sTime->Seconds) | \
 80018e4:	78b3      	ldrb	r3, [r6, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80018e6:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 80018ea:	bf14      	ite	ne
 80018ec:	78f4      	ldrbne	r4, [r6, #3]
      sTime->TimeFormat = 0x00U;
 80018ee:	70f4      	strbeq	r4, [r6, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80018f0:	ea4f 2000 	mov.w	r0, r0, lsl #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80018f4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80018f8:	bf18      	it	ne
 80018fa:	0424      	lslne	r4, r4, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80018fc:	4318      	orrs	r0, r3
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80018fe:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001900:	22ca      	movs	r2, #202	; 0xca
 8001902:	2353      	movs	r3, #83	; 0x53
 8001904:	624a      	str	r2, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001906:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001908:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800190a:	f7ff ff69 	bl	80017e0 <RTC_EnterInitMode>
 800190e:	4607      	mov	r7, r0
 8001910:	2800      	cmp	r0, #0
 8001912:	d15a      	bne.n	80019ca <HAL_RTC_SetTime+0x106>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001914:	682b      	ldr	r3, [r5, #0]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001916:	68f2      	ldr	r2, [r6, #12]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001918:	f004 307f 	and.w	r0, r4, #2139062143	; 0x7f7f7f7f
 800191c:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001920:	6934      	ldr	r4, [r6, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001922:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8001924:	6899      	ldr	r1, [r3, #8]
 8001926:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800192a:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800192c:	6899      	ldr	r1, [r3, #8]
 800192e:	4322      	orrs	r2, r4
 8001930:	430a      	orrs	r2, r1
 8001932:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800193a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	0692      	lsls	r2, r2, #26
 8001940:	d54d      	bpl.n	80019de <HAL_RTC_SetTime+0x11a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001942:	20ff      	movs	r0, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 8001944:	2101      	movs	r1, #1
   __HAL_UNLOCK(hrtc); 
 8001946:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001948:	6258      	str	r0, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800194a:	7769      	strb	r1, [r5, #29]
   __HAL_UNLOCK(hrtc); 
 800194c:	772a      	strb	r2, [r5, #28]
}
 800194e:	4638      	mov	r0, r7
 8001950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001952:	688f      	ldr	r7, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001954:	7830      	ldrb	r0, [r6, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001956:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 800195a:	bf16      	itet	ne
 800195c:	78f7      	ldrbne	r7, [r6, #3]
      sTime->TimeFormat = 0x00U;
 800195e:	70f7      	strbeq	r7, [r6, #3]
 8001960:	043f      	lslne	r7, r7, #16
  while(Value >= 10U)
 8001962:	2809      	cmp	r0, #9
 8001964:	f04f 0400 	mov.w	r4, #0
 8001968:	d907      	bls.n	800197a <HAL_RTC_SetTime+0xb6>
    Value -= 10U;
 800196a:	380a      	subs	r0, #10
 800196c:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 800196e:	2809      	cmp	r0, #9
    bcdhigh++;
 8001970:	f104 0401 	add.w	r4, r4, #1
  while(Value >= 10U)
 8001974:	d8f9      	bhi.n	800196a <HAL_RTC_SetTime+0xa6>
 8001976:	0124      	lsls	r4, r4, #4
 8001978:	b2e4      	uxtb	r4, r4
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800197a:	7873      	ldrb	r3, [r6, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800197c:	4320      	orrs	r0, r4
  while(Value >= 10U)
 800197e:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001980:	ea4f 4400 	mov.w	r4, r0, lsl #16
  while(Value >= 10U)
 8001984:	d939      	bls.n	80019fa <HAL_RTC_SetTime+0x136>
 8001986:	2000      	movs	r0, #0
    Value -= 10U;
 8001988:	3b0a      	subs	r3, #10
 800198a:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 800198c:	2b09      	cmp	r3, #9
    bcdhigh++;
 800198e:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8001992:	d8f9      	bhi.n	8001988 <HAL_RTC_SetTime+0xc4>
 8001994:	0100      	lsls	r0, r0, #4
 8001996:	fa5f fe80 	uxtb.w	lr, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800199a:	78b0      	ldrb	r0, [r6, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800199c:	ea43 030e 	orr.w	r3, r3, lr
  while(Value >= 10U)
 80019a0:	2809      	cmp	r0, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80019a2:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10U)
 80019a6:	d92b      	bls.n	8001a00 <HAL_RTC_SetTime+0x13c>
    Value -= 10U;
 80019a8:	380a      	subs	r0, #10
 80019aa:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 80019ac:	2809      	cmp	r0, #9
    bcdhigh++;
 80019ae:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 80019b2:	d8f9      	bhi.n	80019a8 <HAL_RTC_SetTime+0xe4>
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80019b8:	433c      	orrs	r4, r7
 80019ba:	4323      	orrs	r3, r4
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80019bc:	4310      	orrs	r0, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80019be:	ea43 0400 	orr.w	r4, r3, r0
 80019c2:	e79d      	b.n	8001900 <HAL_RTC_SetTime+0x3c>
  __HAL_LOCK(hrtc);
 80019c4:	2702      	movs	r7, #2
}
 80019c6:	4638      	mov	r0, r7
 80019c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80019ca:	6829      	ldr	r1, [r5, #0]
 80019cc:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 80019ce:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 80019d0:	2300      	movs	r3, #0
    return HAL_ERROR;
 80019d2:	2701      	movs	r7, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80019d4:	6248      	str	r0, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80019d6:	776a      	strb	r2, [r5, #29]
    __HAL_UNLOCK(hrtc);
 80019d8:	772b      	strb	r3, [r5, #28]
}
 80019da:	4638      	mov	r0, r7
 80019dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80019de:	4628      	mov	r0, r5
 80019e0:	f7ff fee4 	bl	80017ac <HAL_RTC_WaitForSynchro>
 80019e4:	b908      	cbnz	r0, 80019ea <HAL_RTC_SetTime+0x126>
 80019e6:	682b      	ldr	r3, [r5, #0]
 80019e8:	e7ab      	b.n	8001942 <HAL_RTC_SetTime+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80019ea:	682a      	ldr	r2, [r5, #0]
 80019ec:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 80019ee:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80019f0:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 80019f2:	772f      	strb	r7, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 80019f4:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 80019f6:	2701      	movs	r7, #1
 80019f8:	e7a9      	b.n	800194e <HAL_RTC_SetTime+0x8a>
  while(Value >= 10U)
 80019fa:	f04f 0e00 	mov.w	lr, #0
 80019fe:	e7cc      	b.n	800199a <HAL_RTC_SetTime+0xd6>
 8001a00:	2200      	movs	r2, #0
 8001a02:	e7d9      	b.n	80019b8 <HAL_RTC_SetTime+0xf4>

08001a04 <HAL_RTC_SetDate>:
 __HAL_LOCK(hrtc);
 8001a04:	7f03      	ldrb	r3, [r0, #28]
 8001a06:	2b01      	cmp	r3, #1
{
 8001a08:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8001a0a:	d063      	beq.n	8001ad4 <HAL_RTC_SetDate+0xd0>
 8001a0c:	4604      	mov	r4, r0
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8001a0e:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 8001a10:	2001      	movs	r0, #1
 8001a12:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8001a14:	7763      	strb	r3, [r4, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001a16:	b34a      	cbz	r2, 8001a6c <HAL_RTC_SetDate+0x68>
                  (((uint32_t)sDate->Month) << 8U) | \
 8001a18:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001a1a:	78ca      	ldrb	r2, [r1, #3]
                  ((uint32_t)sDate->Date) | \
 8001a1c:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8001a1e:	780d      	ldrb	r5, [r1, #0]
                  (((uint32_t)sDate->Month) << 8U) | \
 8001a20:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001a22:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8001a26:	4318      	orrs	r0, r3
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001a28:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	21ca      	movs	r1, #202	; 0xca
 8001a30:	2253      	movs	r2, #83	; 0x53
 8001a32:	6259      	str	r1, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a34:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a38:	f7ff fed2 	bl	80017e0 <RTC_EnterInitMode>
 8001a3c:	4606      	mov	r6, r0
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	d14b      	bne.n	8001ada <HAL_RTC_SetDate+0xd6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001a42:	6823      	ldr	r3, [r4, #0]
 8001a44:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8001a48:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8001a4c:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a54:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	0692      	lsls	r2, r2, #26
 8001a5a:	d54e      	bpl.n	8001afa <HAL_RTC_SetDate+0xf6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001a5c:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 8001a5e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hrtc);
 8001a60:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001a62:	6258      	str	r0, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8001a64:	7761      	strb	r1, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001a66:	7722      	strb	r2, [r4, #28]
}
 8001a68:	4630      	mov	r0, r6
 8001a6a:	bd70      	pop	{r4, r5, r6, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001a6c:	784e      	ldrb	r6, [r1, #1]
 8001a6e:	06f0      	lsls	r0, r6, #27
 8001a70:	d43d      	bmi.n	8001aee <HAL_RTC_SetDate+0xea>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001a72:	78cb      	ldrb	r3, [r1, #3]
  while(Value >= 10U)
 8001a74:	2b09      	cmp	r3, #9
 8001a76:	f04f 0000 	mov.w	r0, #0
 8001a7a:	d907      	bls.n	8001a8c <HAL_RTC_SetDate+0x88>
    Value -= 10U;
 8001a7c:	3b0a      	subs	r3, #10
 8001a7e:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8001a80:	2b09      	cmp	r3, #9
    bcdhigh++;
 8001a82:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8001a86:	d8f9      	bhi.n	8001a7c <HAL_RTC_SetDate+0x78>
 8001a88:	0100      	lsls	r0, r0, #4
 8001a8a:	b2c0      	uxtb	r0, r0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001a8c:	4303      	orrs	r3, r0
  while(Value >= 10U)
 8001a8e:	2e09      	cmp	r6, #9
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001a90:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while(Value >= 10U)
 8001a94:	d93f      	bls.n	8001b16 <HAL_RTC_SetDate+0x112>
 8001a96:	2000      	movs	r0, #0
    Value -= 10U;
 8001a98:	f1a6 050a 	sub.w	r5, r6, #10
 8001a9c:	b2ee      	uxtb	r6, r5
  while(Value >= 10U)
 8001a9e:	2e09      	cmp	r6, #9
    bcdhigh++;
 8001aa0:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8001aa4:	d8f8      	bhi.n	8001a98 <HAL_RTC_SetDate+0x94>
 8001aa6:	0105      	lsls	r5, r0, #4
 8001aa8:	b2ed      	uxtb	r5, r5
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001aaa:	7888      	ldrb	r0, [r1, #2]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001aac:	4335      	orrs	r5, r6
  while(Value >= 10U)
 8001aae:	2809      	cmp	r0, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001ab0:	ea4f 2505 	mov.w	r5, r5, lsl #8
  while(Value >= 10U)
 8001ab4:	d931      	bls.n	8001b1a <HAL_RTC_SetDate+0x116>
    Value -= 10U;
 8001ab6:	380a      	subs	r0, #10
 8001ab8:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8001aba:	2809      	cmp	r0, #9
    bcdhigh++;
 8001abc:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8001ac0:	d8f9      	bhi.n	8001ab6 <HAL_RTC_SetDate+0xb2>
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
                 ((uint32_t)sDate->WeekDay << 13U));   
 8001ac6:	7809      	ldrb	r1, [r1, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001ac8:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8001acc:	431d      	orrs	r5, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001ace:	4310      	orrs	r0, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001ad0:	4305      	orrs	r5, r0
 8001ad2:	e7ab      	b.n	8001a2c <HAL_RTC_SetDate+0x28>
 __HAL_LOCK(hrtc);
 8001ad4:	2602      	movs	r6, #2
}
 8001ad6:	4630      	mov	r0, r6
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001ada:	6821      	ldr	r1, [r4, #0]
 8001adc:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ade:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 8001ae0:	2300      	movs	r3, #0
    return HAL_ERROR;
 8001ae2:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001ae4:	6248      	str	r0, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ae6:	7762      	strb	r2, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8001ae8:	7723      	strb	r3, [r4, #28]
}
 8001aea:	4630      	mov	r0, r6
 8001aec:	bd70      	pop	{r4, r5, r6, pc}
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001aee:	f026 0510 	bic.w	r5, r6, #16
 8001af2:	350a      	adds	r5, #10
 8001af4:	b2ee      	uxtb	r6, r5
 8001af6:	704e      	strb	r6, [r1, #1]
 8001af8:	e7bb      	b.n	8001a72 <HAL_RTC_SetDate+0x6e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001afa:	4620      	mov	r0, r4
 8001afc:	f7ff fe56 	bl	80017ac <HAL_RTC_WaitForSynchro>
 8001b00:	b908      	cbnz	r0, 8001b06 <HAL_RTC_SetDate+0x102>
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	e7aa      	b.n	8001a5c <HAL_RTC_SetDate+0x58>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001b0a:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001b0c:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8001b0e:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001b10:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8001b12:	2601      	movs	r6, #1
 8001b14:	e7a8      	b.n	8001a68 <HAL_RTC_SetDate+0x64>
  while(Value >= 10U)
 8001b16:	2500      	movs	r5, #0
 8001b18:	e7c7      	b.n	8001aaa <HAL_RTC_SetDate+0xa6>
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	e7d3      	b.n	8001ac6 <HAL_RTC_SetDate+0xc2>
 8001b1e:	bf00      	nop

08001b20 <HAL_RTCEx_SetWakeUpTimer_IT>:
 * @param  WakeUpCounter Wake up counter
 * @param  WakeUpClock Wake up clock
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8001b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	/* Check the parameters */
	assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
	assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8001b24:	7f03      	ldrb	r3, [r0, #28]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d058      	beq.n	8001bdc <HAL_RTCEx_SetWakeUpTimer_IT+0xbc>

	hrtc->State = HAL_RTC_STATE_BUSY;

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b2a:	6803      	ldr	r3, [r0, #0]
 8001b2c:	4605      	mov	r5, r0
 8001b2e:	4617      	mov	r7, r2
 8001b30:	4688      	mov	r8, r1
 8001b32:	2253      	movs	r2, #83	; 0x53
 8001b34:	21ca      	movs	r1, #202	; 0xca
	__HAL_LOCK(hrtc);
 8001b36:	2401      	movs	r4, #1
	hrtc->State = HAL_RTC_STATE_BUSY;
 8001b38:	2002      	movs	r0, #2
 8001b3a:	7768      	strb	r0, [r5, #29]
	__HAL_LOCK(hrtc);
 8001b3c:	772c      	strb	r4, [r5, #28]
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b3e:	6259      	str	r1, [r3, #36]	; 0x24
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24

	/*Check RTC WUTWF flag is reset only when wake up timer enabled*/
	if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	0551      	lsls	r1, r2, #21
 8001b46:	d50d      	bpl.n	8001b64 <HAL_RTCEx_SetWakeUpTimer_IT+0x44>
		tickstart = HAL_GetTick();
 8001b48:	f7fe fb6e 	bl	8000228 <HAL_GetTick>
 8001b4c:	4604      	mov	r4, r0

		/* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
		while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8001b4e:	e005      	b.n	8001b5c <HAL_RTCEx_SetWakeUpTimer_IT+0x3c>
		{
			if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001b50:	f7fe fb6a 	bl	8000228 <HAL_GetTick>
 8001b54:	1b00      	subs	r0, r0, r4
 8001b56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b5a:	d84b      	bhi.n	8001bf4 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>
		while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8001b5c:	682b      	ldr	r3, [r5, #0]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	0752      	lsls	r2, r2, #29
 8001b62:	d4f5      	bmi.n	8001b50 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
			}
		}
	}

	/* Disable the Wake-Up timer */
	__HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b6a:	609a      	str	r2, [r3, #8]

	/* Clear flag Wake-Up */
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001b74:	60da      	str	r2, [r3, #12]

	tickstart = HAL_GetTick();
 8001b76:	f7fe fb57 	bl	8000228 <HAL_GetTick>
 8001b7a:	4681      	mov	r9, r0

	/* Wait till RTC WUTWF flag is set and if Time out is reached exit */
	while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8001b7c:	e006      	b.n	8001b8c <HAL_RTCEx_SetWakeUpTimer_IT+0x6c>
	{
		if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001b7e:	f7fe fb53 	bl	8000228 <HAL_GetTick>
 8001b82:	eba0 0009 	sub.w	r0, r0, r9
 8001b86:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001b8a:	d82a      	bhi.n	8001be2 <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>
	while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8001b8c:	682e      	ldr	r6, [r5, #0]
 8001b8e:	68f4      	ldr	r4, [r6, #12]
 8001b90:	f014 0404 	ands.w	r4, r4, #4
 8001b94:	d0f3      	beq.n	8001b7e <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
			return HAL_TIMEOUT;
		}
	}

	/* Configure the Wakeup Timer counter */
	hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8001b96:	f8c6 8014 	str.w	r8, [r6, #20]

	/* Clear the Wakeup Timer clock source bits in CR register */
	hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8001b9a:	68b2      	ldr	r2, [r6, #8]

	/* Configure the clock source */
	hrtc->Instance->CR |= (uint32_t)WakeUpClock;

	/* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
	__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
	hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8001b9e:	f022 0207 	bic.w	r2, r2, #7
 8001ba2:	60b2      	str	r2, [r6, #8]
	hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8001ba4:	68b2      	ldr	r2, [r6, #8]
 8001ba6:	4317      	orrs	r7, r2
 8001ba8:	60b7      	str	r7, [r6, #8]
	__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001bb0:	601a      	str	r2, [r3, #0]

	__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001bb8:	609a      	str	r2, [r3, #8]

	/* Configure the Interrupt in the RTC_CR register */
	__HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8001bba:	68b3      	ldr	r3, [r6, #8]
 8001bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc0:	60b3      	str	r3, [r6, #8]

	/* Enable the Wakeup Timer */
	__HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8001bc2:	68b3      	ldr	r3, [r6, #8]
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);

	hrtc->State = HAL_RTC_STATE_READY;

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 8001bc4:	2200      	movs	r2, #0
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001bc6:	24ff      	movs	r4, #255	; 0xff
	__HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8001bc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
	hrtc->State = HAL_RTC_STATE_READY;
 8001bcc:	2101      	movs	r1, #1
	__HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8001bce:	60b3      	str	r3, [r6, #8]

	return HAL_OK;
 8001bd0:	4610      	mov	r0, r2
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001bd2:	6274      	str	r4, [r6, #36]	; 0x24
	hrtc->State = HAL_RTC_STATE_READY;
 8001bd4:	7769      	strb	r1, [r5, #29]
	__HAL_UNLOCK(hrtc);
 8001bd6:	772a      	strb	r2, [r5, #28]
	return HAL_OK;
 8001bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__HAL_LOCK(hrtc);
 8001bdc:	2002      	movs	r0, #2
}
 8001bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001be2:	682a      	ldr	r2, [r5, #0]
			hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
			__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001be6:	21ff      	movs	r1, #255	; 0xff
 8001be8:	6251      	str	r1, [r2, #36]	; 0x24
			return HAL_TIMEOUT;
 8001bea:	4618      	mov	r0, r3
			__HAL_UNLOCK(hrtc);
 8001bec:	772c      	strb	r4, [r5, #28]
			hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001bee:	776b      	strb	r3, [r5, #29]
			return HAL_TIMEOUT;
 8001bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001bf4:	6829      	ldr	r1, [r5, #0]
				hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
				__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001bf8:	20ff      	movs	r0, #255	; 0xff
				__HAL_UNLOCK(hrtc);
 8001bfa:	2200      	movs	r2, #0
				__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001bfc:	6248      	str	r0, [r1, #36]	; 0x24
				return HAL_TIMEOUT;
 8001bfe:	4618      	mov	r0, r3
				hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001c00:	776b      	strb	r3, [r5, #29]
				__HAL_UNLOCK(hrtc);
 8001c02:	772a      	strb	r2, [r5, #28]
				return HAL_TIMEOUT;
 8001c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c08:	40010400 	.word	0x40010400

08001c0c <HAL_RTCEx_WakeUpTimerEventCallback>:
 * @param  hrtc RTC handle
 * @retval None
 */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
	rtcSecFlag = 1; // Flag to indicate 1 second period
 8001c0c:	4b01      	ldr	r3, [pc, #4]	; (8001c14 <HAL_RTCEx_WakeUpTimerEventCallback+0x8>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
 8001c12:	4770      	bx	lr
 8001c14:	20000038 	.word	0x20000038

08001c18 <HAL_RTCEx_WakeUpTimerIRQHandler>:
	if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8001c18:	6803      	ldr	r3, [r0, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	055b      	lsls	r3, r3, #21
{
 8001c1e:	b510      	push	{r4, lr}
 8001c20:	4604      	mov	r4, r0
	if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8001c22:	d507      	bpl.n	8001c34 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
		HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8001c24:	f7ff fff2 	bl	8001c0c <HAL_RTCEx_WakeUpTimerEventCallback>
		__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8001c28:	6822      	ldr	r2, [r4, #0]
 8001c2a:	68d3      	ldr	r3, [r2, #12]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8001c32:	60d3      	str	r3, [r2, #12]
	__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8001c34:	4a03      	ldr	r2, [pc, #12]	; (8001c44 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 8001c36:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
	hrtc->State = HAL_RTC_STATE_READY;
 8001c3a:	2301      	movs	r3, #1
	__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8001c3c:	6151      	str	r1, [r2, #20]
	hrtc->State = HAL_RTC_STATE_READY;
 8001c3e:	7763      	strb	r3, [r4, #29]
 8001c40:	bd10      	pop	{r4, pc}
 8001c42:	bf00      	nop
 8001c44:	40010400 	.word	0x40010400

08001c48 <HAL_RTCEx_BKUPWrite>:
	uint32_t tmp = 0U;

	/* Check the parameters */
	assert_param(IS_RTC_BKP(BackupRegister));

	tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8001c48:	6803      	ldr	r3, [r0, #0]
 8001c4a:	3350      	adds	r3, #80	; 0x50
	tmp += (BackupRegister * 4U);

	/* Write the specified register */
	*(__IO uint32_t *)tmp = (uint32_t)Data;
 8001c4c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop

08001c54 <HAL_RTCEx_BKUPRead>:
	uint32_t tmp = 0U;

	/* Check the parameters */
	assert_param(IS_RTC_BKP(BackupRegister));

	tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8001c54:	6803      	ldr	r3, [r0, #0]
 8001c56:	3350      	adds	r3, #80	; 0x50
	tmp += (BackupRegister * 4U);

	/* Read the specified register */
	return (*(__IO uint32_t *)tmp);
 8001c58:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop

08001c60 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8001c60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d040      	beq.n	8001cea <HAL_TIM_ConfigClockSource+0x8a>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	2202      	movs	r2, #2
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c6a:	6803      	ldr	r3, [r0, #0]
{
 8001c6c:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8001c6e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001c72:	689d      	ldr	r5, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8001c74:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c76:	4a5d      	ldr	r2, [pc, #372]	; (8001dec <HAL_TIM_ConfigClockSource+0x18c>)
  switch (sClockSourceConfig->ClockSource)
 8001c78:	2c40      	cmp	r4, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c7a:	ea02 0205 	and.w	r2, r2, r5
  __HAL_LOCK(htim);
 8001c7e:	f04f 0501 	mov.w	r5, #1
 8001c82:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8001c86:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001c88:	d079      	beq.n	8001d7e <HAL_TIM_ConfigClockSource+0x11e>
 8001c8a:	d918      	bls.n	8001cbe <HAL_TIM_ConfigClockSource+0x5e>
 8001c8c:	2c70      	cmp	r4, #112	; 0x70
 8001c8e:	d062      	beq.n	8001d56 <HAL_TIM_ConfigClockSource+0xf6>
 8001c90:	d92d      	bls.n	8001cee <HAL_TIM_ConfigClockSource+0x8e>
 8001c92:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8001c96:	d057      	beq.n	8001d48 <HAL_TIM_ConfigClockSource+0xe8>
 8001c98:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8001c9c:	d11c      	bne.n	8001cd8 <HAL_TIM_ConfigClockSource+0x78>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c9e:	688a      	ldr	r2, [r1, #8]
 8001ca0:	684d      	ldr	r5, [r1, #4]
 8001ca2:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8001ca4:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ca6:	432a      	orrs	r2, r5
 8001ca8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cac:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cb0:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cb2:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cba:	609a      	str	r2, [r3, #8]
    break;
 8001cbc:	e00c      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8001cbe:	2c10      	cmp	r4, #16
 8001cc0:	d032      	beq.n	8001d28 <HAL_TIM_ConfigClockSource+0xc8>
 8001cc2:	d938      	bls.n	8001d36 <HAL_TIM_ConfigClockSource+0xd6>
 8001cc4:	2c20      	cmp	r4, #32
 8001cc6:	d072      	beq.n	8001dae <HAL_TIM_ConfigClockSource+0x14e>
 8001cc8:	2c30      	cmp	r4, #48	; 0x30
 8001cca:	d105      	bne.n	8001cd8 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8001ccc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cd2:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 8001cd6:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8001cd8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001ce0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8001ce4:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8001ce6:	4618      	mov	r0, r3
}
 8001ce8:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001cea:	2002      	movs	r0, #2
 8001cec:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8001cee:	2c50      	cmp	r4, #80	; 0x50
 8001cf0:	d064      	beq.n	8001dbc <HAL_TIM_ConfigClockSource+0x15c>
 8001cf2:	2c60      	cmp	r4, #96	; 0x60
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_TIM_ConfigClockSource+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cf6:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001cf8:	684d      	ldr	r5, [r1, #4]
 8001cfa:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cfc:	f024 0410 	bic.w	r4, r4, #16
 8001d00:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d02:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001d04:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d06:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d0e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d12:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001d16:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d18:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001d1a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d20:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	e7d7      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8001d28:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d2e:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	e7d0      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8001d36:	2c00      	cmp	r4, #0
 8001d38:	d1ce      	bne.n	8001cd8 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8001d3a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d40:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	e7c7      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x78>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d4e:	f022 0207 	bic.w	r2, r2, #7
 8001d52:	609a      	str	r2, [r3, #8]
    break;
 8001d54:	e7c0      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d56:	688a      	ldr	r2, [r1, #8]
 8001d58:	684d      	ldr	r5, [r1, #4]
 8001d5a:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8001d5c:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d5e:	432a      	orrs	r2, r5
 8001d60:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d64:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d68:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8001d6a:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001d6c:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d72:	f022 0277 	bic.w	r2, r2, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d76:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001d7a:	609a      	str	r2, [r3, #8]
    break;
 8001d7c:	e7ac      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 8001d7e:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d80:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001d82:	684c      	ldr	r4, [r1, #4]
 8001d84:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d86:	f026 0601 	bic.w	r6, r6, #1
 8001d8a:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001d8c:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d8e:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d92:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d96:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001d9a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001d9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d9e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001da0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001da2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001da6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	e794      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8001dae:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001db0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001db4:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	e78d      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 8001dbc:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dbe:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001dc0:	684c      	ldr	r4, [r1, #4]
 8001dc2:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dc4:	f026 0601 	bic.w	r6, r6, #1
 8001dc8:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001dca:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dcc:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dd0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001dd4:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001dd8:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ddc:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001dde:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001de0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001de4:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	e775      	b.n	8001cd8 <HAL_TIM_ConfigClockSource+0x78>
 8001dec:	fffe0088 	.word	0xfffe0088

08001df0 <HAL_TIM_OC_DelayElapsedCallback>:
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop

08001df4 <HAL_TIM_IC_CaptureCallback>:
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop

08001df8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop

08001dfc <HAL_TIM_TriggerCallback>:
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop

08001e00 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e00:	6803      	ldr	r3, [r0, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	0791      	lsls	r1, r2, #30
{
 8001e06:	b510      	push	{r4, lr}
 8001e08:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e0a:	d502      	bpl.n	8001e12 <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	0792      	lsls	r2, r2, #30
 8001e10:	d465      	bmi.n	8001ede <HAL_TIM_IRQHandler+0xde>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	0752      	lsls	r2, r2, #29
 8001e16:	d502      	bpl.n	8001e1e <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	0750      	lsls	r0, r2, #29
 8001e1c:	d44c      	bmi.n	8001eb8 <HAL_TIM_IRQHandler+0xb8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	0711      	lsls	r1, r2, #28
 8001e22:	d502      	bpl.n	8001e2a <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	0712      	lsls	r2, r2, #28
 8001e28:	d434      	bmi.n	8001e94 <HAL_TIM_IRQHandler+0x94>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	06d0      	lsls	r0, r2, #27
 8001e2e:	d502      	bpl.n	8001e36 <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	06d1      	lsls	r1, r2, #27
 8001e34:	d41e      	bmi.n	8001e74 <HAL_TIM_IRQHandler+0x74>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	07d2      	lsls	r2, r2, #31
 8001e3a:	d502      	bpl.n	8001e42 <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	07d0      	lsls	r0, r2, #31
 8001e40:	d46b      	bmi.n	8001f1a <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	0611      	lsls	r1, r2, #24
 8001e46:	d502      	bpl.n	8001e4e <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	0612      	lsls	r2, r2, #24
 8001e4c:	d46d      	bmi.n	8001f2a <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	05d0      	lsls	r0, r2, #23
 8001e52:	d502      	bpl.n	8001e5a <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	0611      	lsls	r1, r2, #24
 8001e58:	d46f      	bmi.n	8001f3a <HAL_TIM_IRQHandler+0x13a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	0652      	lsls	r2, r2, #25
 8001e5e:	d502      	bpl.n	8001e66 <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	0650      	lsls	r0, r2, #25
 8001e64:	d451      	bmi.n	8001f0a <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	0691      	lsls	r1, r2, #26
 8001e6a:	d502      	bpl.n	8001e72 <HAL_TIM_IRQHandler+0x72>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	0692      	lsls	r2, r2, #26
 8001e70:	d443      	bmi.n	8001efa <HAL_TIM_IRQHandler+0xfa>
 8001e72:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e74:	f06f 0210 	mvn.w	r2, #16
 8001e78:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e7a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e7c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e7e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e82:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001e84:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e86:	d06c      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e88:	f7ff ffb4 	bl	8001df4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	7722      	strb	r2, [r4, #28]
 8001e92:	e7d0      	b.n	8001e36 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e94:	f06f 0208 	mvn.w	r2, #8
 8001e98:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e9a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e9c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e9e:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ea0:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea4:	d15a      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	f7ff ffa3 	bl	8001df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f7ff ffa4 	bl	8001df8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	7722      	strb	r2, [r4, #28]
 8001eb6:	e7b8      	b.n	8001e2a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001eb8:	f06f 0204 	mvn.w	r2, #4
 8001ebc:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ebe:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ec0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ec2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ec6:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eca:	d144      	bne.n	8001f56 <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ecc:	f7ff ff90 	bl	8001df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7ff ff91 	bl	8001df8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	7722      	strb	r2, [r4, #28]
 8001edc:	e79f      	b.n	8001e1e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ede:	f06f 0202 	mvn.w	r2, #2
 8001ee2:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ee6:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee8:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eea:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eec:	d02d      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	f7ff ff81 	bl	8001df4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	7722      	strb	r2, [r4, #28]
 8001ef8:	e78b      	b.n	8001e12 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001efa:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001efe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f00:	611a      	str	r2, [r3, #16]
}
 8001f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001f06:	f000 b8d5 	b.w	80020b4 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f0e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f10:	4620      	mov	r0, r4
 8001f12:	f7ff ff73 	bl	8001dfc <HAL_TIM_TriggerCallback>
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	e7a5      	b.n	8001e66 <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f1a:	f06f 0201 	mvn.w	r2, #1
 8001f1e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f20:	4620      	mov	r0, r4
 8001f22:	f001 fdef 	bl	8003b04 <HAL_TIM_PeriodElapsedCallback>
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	e78b      	b.n	8001e42 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f2e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f30:	4620      	mov	r0, r4
 8001f32:	f000 f8c1 	bl	80020b8 <HAL_TIMEx_BreakCallback>
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	e789      	b.n	8001e4e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f3e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001f40:	4620      	mov	r0, r4
 8001f42:	f000 f8bb 	bl	80020bc <HAL_TIMEx_Break2Callback>
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	e787      	b.n	8001e5a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	f7ff ff51 	bl	8001df0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f7ff ff52 	bl	8001df8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f54:	e7cd      	b.n	8001ef2 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f56:	f7ff ff4d 	bl	8001df4 <HAL_TIM_IC_CaptureCallback>
 8001f5a:	e7bc      	b.n	8001ed6 <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5c:	f7ff ff4a 	bl	8001df4 <HAL_TIM_IC_CaptureCallback>
 8001f60:	e7a6      	b.n	8001eb0 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	f7ff ff45 	bl	8001df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f66:	4620      	mov	r0, r4
 8001f68:	f7ff ff46 	bl	8001df8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f6c:	e78e      	b.n	8001e8c <HAL_TIM_IRQHandler+0x8c>
 8001f6e:	bf00      	nop

08001f70 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f70:	4a2d      	ldr	r2, [pc, #180]	; (8002028 <TIM_Base_SetConfig+0xb8>)
  tmpcr1 = TIMx->CR1;
 8001f72:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f74:	4290      	cmp	r0, r2
{
 8001f76:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f78:	d04e      	beq.n	8002018 <TIM_Base_SetConfig+0xa8>
 8001f7a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f7e:	d02f      	beq.n	8001fe0 <TIM_Base_SetConfig+0x70>
 8001f80:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001f84:	4290      	cmp	r0, r2
 8001f86:	d02b      	beq.n	8001fe0 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f88:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8001f8c:	4290      	cmp	r0, r2
 8001f8e:	d014      	beq.n	8001fba <TIM_Base_SetConfig+0x4a>
 8001f90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f94:	4290      	cmp	r0, r2
 8001f96:	d010      	beq.n	8001fba <TIM_Base_SetConfig+0x4a>
 8001f98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f9c:	4290      	cmp	r0, r2
 8001f9e:	d00c      	beq.n	8001fba <TIM_Base_SetConfig+0x4a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa0:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa2:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001fa4:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001faa:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001fac:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8001fae:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fb0:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001fb2:	6282      	str	r2, [r0, #40]	; 0x28
}
 8001fb4:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 8001fb6:	6143      	str	r3, [r0, #20]
}
 8001fb8:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fba:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fbc:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fc2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fc8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001fca:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fcc:	688b      	ldr	r3, [r1, #8]
 8001fce:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001fd0:	680b      	ldr	r3, [r1, #0]
 8001fd2:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd4:	690b      	ldr	r3, [r1, #16]
 8001fd6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	6143      	str	r3, [r0, #20]
}
 8001fdc:	bcf0      	pop	{r4, r5, r6, r7}
 8001fde:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8001fe0:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fe2:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe4:	694a      	ldr	r2, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fe6:	688f      	ldr	r7, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001fe8:	680d      	ldr	r5, [r1, #0]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001fee:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ffa:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001ffc:	6003      	str	r3, [r0, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <TIM_Base_SetConfig+0xbc>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002000:	62c7      	str	r7, [r0, #44]	; 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002002:	4298      	cmp	r0, r3
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002004:	6285      	str	r5, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002006:	d0e5      	beq.n	8001fd4 <TIM_Base_SetConfig+0x64>
 8002008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800200c:	4298      	cmp	r0, r3
 800200e:	d0e1      	beq.n	8001fd4 <TIM_Base_SetConfig+0x64>
  TIMx->EGR = TIM_EGR_UG;
 8002010:	2301      	movs	r3, #1
 8002012:	6143      	str	r3, [r0, #20]
}
 8002014:	bcf0      	pop	{r4, r5, r6, r7}
 8002016:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002018:	684d      	ldr	r5, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800201a:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800201c:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800201e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002022:	432b      	orrs	r3, r5
 8002024:	e7cb      	b.n	8001fbe <TIM_Base_SetConfig+0x4e>
 8002026:	bf00      	nop
 8002028:	40012c00 	.word	0x40012c00
 800202c:	40014400 	.word	0x40014400

08002030 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002030:	b1b8      	cbz	r0, 8002062 <HAL_TIM_Base_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002032:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{ 
 8002036:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8002038:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800203c:	4604      	mov	r4, r0
 800203e:	b15b      	cbz	r3, 8002058 <HAL_TIM_Base_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 8002040:	2302      	movs	r3, #2
 8002042:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002046:	6820      	ldr	r0, [r4, #0]
 8002048:	1d21      	adds	r1, r4, #4
 800204a:	f7ff ff91 	bl	8001f70 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800204e:	2301      	movs	r3, #1
 8002050:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002054:	2000      	movs	r0, #0
 8002056:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002058:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800205c:	f000 fe1a 	bl	8002c94 <HAL_TIM_Base_MspInit>
 8002060:	e7ee      	b.n	8002040 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8002062:	2001      	movs	r0, #1
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop

08002068 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002068:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800206c:	2b01      	cmp	r3, #1
 800206e:	d016      	beq.n	800209e <HAL_TIMEx_MasterConfigSynchronization+0x36>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002070:	6802      	ldr	r2, [r0, #0]
{
 8002072:	b470      	push	{r4, r5, r6}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002074:	4d0e      	ldr	r5, [pc, #56]	; (80020b0 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8002076:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002078:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800207a:	42aa      	cmp	r2, r5
 800207c:	d012      	beq.n	80020a4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800207e:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002080:	688d      	ldr	r5, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002086:	f024 0180 	bic.w	r1, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800208a:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 800208c:	2400      	movs	r4, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800208e:	4329      	orrs	r1, r5
  htim->Instance->CR2 = tmpcr2;
 8002090:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002092:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8002094:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  
  return HAL_OK;
} 
 8002098:	4620      	mov	r0, r4
 800209a:	bc70      	pop	{r4, r5, r6}
 800209c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800209e:	2302      	movs	r3, #2
} 
 80020a0:	4618      	mov	r0, r3
 80020a2:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80020a4:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80020a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80020aa:	432b      	orrs	r3, r5
 80020ac:	e7e7      	b.n	800207e <HAL_TIMEx_MasterConfigSynchronization+0x16>
 80020ae:	bf00      	nop
 80020b0:	40012c00 	.word	0x40012c00

080020b4 <HAL_TIMEx_CommutationCallback>:
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop

080020b8 <HAL_TIMEx_BreakCallback>:
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop

080020bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop

080020c0 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80020c0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d001      	beq.n	80020cc <HAL_UART_Receive_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80020c8:	2002      	movs	r0, #2
  }
}
 80020ca:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 80020cc:	b349      	cbz	r1, 8002122 <HAL_UART_Receive_IT+0x62>
 80020ce:	b342      	cbz	r2, 8002122 <HAL_UART_Receive_IT+0x62>
    __HAL_LOCK(huart);
 80020d0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d0f7      	beq.n	80020c8 <HAL_UART_Receive_IT+0x8>
    UART_MASK_COMPUTATION(huart);
 80020d8:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 80020da:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 80020dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    __HAL_LOCK(huart);
 80020e0:	f04f 0101 	mov.w	r1, #1
    huart->RxXferSize = Size;
 80020e4:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 80020e8:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    __HAL_LOCK(huart);
 80020ec:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 80020f0:	d027      	beq.n	8002142 <HAL_UART_Receive_IT+0x82>
 80020f2:	b9c3      	cbnz	r3, 8002126 <HAL_UART_Receive_IT+0x66>
 80020f4:	6903      	ldr	r3, [r0, #16]
 80020f6:	b303      	cbz	r3, 800213a <HAL_UART_Receive_IT+0x7a>
 80020f8:	237f      	movs	r3, #127	; 0x7f
 80020fa:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020fe:	6802      	ldr	r2, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002100:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002102:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002104:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002106:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800210a:	6891      	ldr	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 800210c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002110:	f041 0101 	orr.w	r1, r1, #1
 8002114:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002116:	6811      	ldr	r1, [r2, #0]
 8002118:	f441 7190 	orr.w	r1, r1, #288	; 0x120
    return HAL_OK;
 800211c:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800211e:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8002120:	4770      	bx	lr
      return HAL_ERROR;
 8002122:	2001      	movs	r0, #1
 8002124:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8002126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800212a:	d1e8      	bne.n	80020fe <HAL_UART_Receive_IT+0x3e>
 800212c:	6903      	ldr	r3, [r0, #16]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0e2      	beq.n	80020f8 <HAL_UART_Receive_IT+0x38>
 8002132:	233f      	movs	r3, #63	; 0x3f
 8002134:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002138:	e7e1      	b.n	80020fe <HAL_UART_Receive_IT+0x3e>
 800213a:	23ff      	movs	r3, #255	; 0xff
 800213c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002140:	e7dd      	b.n	80020fe <HAL_UART_Receive_IT+0x3e>
 8002142:	6903      	ldr	r3, [r0, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f8      	bne.n	800213a <HAL_UART_Receive_IT+0x7a>
 8002148:	f240 13ff 	movw	r3, #511	; 0x1ff
 800214c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002150:	e7d5      	b.n	80020fe <HAL_UART_Receive_IT+0x3e>
 8002152:	bf00      	nop

08002154 <HAL_UART_TxCpltCallback>:
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop

08002158 <HAL_UART_ErrorCallback>:
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop

0800215c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800215c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800215e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002160:	2200      	movs	r2, #0
 8002162:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;

  HAL_UART_ErrorCallback(huart);
 8002166:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8002168:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800216c:	f7ff fff4 	bl	8002158 <HAL_UART_ErrorCallback>
 8002170:	bd08      	pop	{r3, pc}
 8002172:	bf00      	nop

08002174 <UART_SetConfig>:
{
 8002174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002176:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002178:	6907      	ldr	r7, [r0, #16]
 800217a:	6883      	ldr	r3, [r0, #8]
 800217c:	6946      	ldr	r6, [r0, #20]
 800217e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002180:	4a62      	ldr	r2, [pc, #392]	; (800230c <UART_SetConfig+0x198>)
{
 8002182:	4605      	mov	r5, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002184:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002186:	6820      	ldr	r0, [r4, #0]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002188:	6a2f      	ldr	r7, [r5, #32]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800218a:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800218c:	4002      	ands	r2, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800218e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002190:	4313      	orrs	r3, r2
 8002192:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002194:	6862      	ldr	r2, [r4, #4]
 8002196:	68ee      	ldr	r6, [r5, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002198:	69ab      	ldr	r3, [r5, #24]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800219a:	485d      	ldr	r0, [pc, #372]	; (8002310 <UART_SetConfig+0x19c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800219c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80021a0:	4332      	orrs	r2, r6
 80021a2:	6062      	str	r2, [r4, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80021a4:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80021a6:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80021a8:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80021ac:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021ae:	4284      	cmp	r4, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80021b0:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021b2:	d01b      	beq.n	80021ec <UART_SetConfig+0x78>
 80021b4:	4b57      	ldr	r3, [pc, #348]	; (8002314 <UART_SetConfig+0x1a0>)
 80021b6:	429c      	cmp	r4, r3
 80021b8:	d00a      	beq.n	80021d0 <UART_SetConfig+0x5c>
 80021ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021be:	429c      	cmp	r4, r3
 80021c0:	d006      	beq.n	80021d0 <UART_SetConfig+0x5c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021c2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80021c6:	d158      	bne.n	800227a <UART_SetConfig+0x106>
 80021c8:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 80021ca:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 80021cc:	60e3      	str	r3, [r4, #12]
 80021ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021d0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80021d4:	d053      	beq.n	800227e <UART_SetConfig+0x10a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80021d6:	f7ff f991 	bl	80014fc <HAL_RCC_GetPCLK1Freq>
 80021da:	686b      	ldr	r3, [r5, #4]
 80021dc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80021e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80021e4:	b280      	uxth	r0, r0
 80021e6:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80021e8:	2000      	movs	r0, #0
        break;
 80021ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021ec:	4b4a      	ldr	r3, [pc, #296]	; (8002318 <UART_SetConfig+0x1a4>)
 80021ee:	4a4b      	ldr	r2, [pc, #300]	; (800231c <UART_SetConfig+0x1a8>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021f6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80021fa:	5cd3      	ldrb	r3, [r2, r3]
 80021fc:	d051      	beq.n	80022a2 <UART_SetConfig+0x12e>
    switch (clocksource)
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d83b      	bhi.n	800227a <UART_SetConfig+0x106>
 8002202:	a201      	add	r2, pc, #4	; (adr r2, 8002208 <UART_SetConfig+0x94>)
 8002204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002208:	080021d7 	.word	0x080021d7
 800220c:	08002275 	.word	0x08002275
 8002210:	0800225b 	.word	0x0800225b
 8002214:	0800227b 	.word	0x0800227b
 8002218:	08002243 	.word	0x08002243
 800221c:	0800227b 	.word	0x0800227b
 8002220:	0800227b 	.word	0x0800227b
 8002224:	0800227b 	.word	0x0800227b
 8002228:	0800222d 	.word	0x0800222d
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800222c:	686a      	ldr	r2, [r5, #4]
 800222e:	4938      	ldr	r1, [pc, #224]	; (8002310 <UART_SetConfig+0x19c>)
 8002230:	0853      	lsrs	r3, r2, #1
 8002232:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002236:	fbb3 f3f2 	udiv	r3, r3, r2
 800223a:	b29b      	uxth	r3, r3
 800223c:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800223e:	2000      	movs	r0, #0
        break;
 8002240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002242:	f7ff f859 	bl	80012f8 <HAL_RCC_GetSysClockFreq>
 8002246:	686b      	ldr	r3, [r5, #4]
 8002248:	4a31      	ldr	r2, [pc, #196]	; (8002310 <UART_SetConfig+0x19c>)
 800224a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800224e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002252:	b280      	uxth	r0, r0
 8002254:	60d0      	str	r0, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002256:	2000      	movs	r0, #0
        break;
 8002258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800225a:	686a      	ldr	r2, [r5, #4]
 800225c:	492c      	ldr	r1, [pc, #176]	; (8002310 <UART_SetConfig+0x19c>)
 800225e:	0853      	lsrs	r3, r2, #1
 8002260:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002264:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002268:	fbb3 f3f2 	udiv	r3, r3, r2
 800226c:	b29b      	uxth	r3, r3
 800226e:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002270:	2000      	movs	r0, #0
        break;
 8002272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002274:	f7ff f95a 	bl	800152c <HAL_RCC_GetPCLK2Freq>
 8002278:	e7e5      	b.n	8002246 <UART_SetConfig+0xd2>
        ret = HAL_ERROR;
 800227a:	2001      	movs	r0, #1
  return ret;
 800227c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800227e:	f7ff f93d 	bl	80014fc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002282:	686a      	ldr	r2, [r5, #4]
 8002284:	682c      	ldr	r4, [r5, #0]
 8002286:	0853      	lsrs	r3, r2, #1
 8002288:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800228c:	fbb0 f0f2 	udiv	r0, r0, r2
 8002290:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8002294:	f020 000f 	bic.w	r0, r0, #15
 8002298:	4303      	orrs	r3, r0
 800229a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800229c:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 800229e:	60e3      	str	r3, [r4, #12]
 80022a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (clocksource)
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d890      	bhi.n	80021c8 <UART_SetConfig+0x54>
 80022a6:	a201      	add	r2, pc, #4	; (adr r2, 80022ac <UART_SetConfig+0x138>)
 80022a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ac:	0800227f 	.word	0x0800227f
 80022b0:	080022d1 	.word	0x080022d1
 80022b4:	080022f9 	.word	0x080022f9
 80022b8:	080021c9 	.word	0x080021c9
 80022bc:	080022f3 	.word	0x080022f3
 80022c0:	080021c9 	.word	0x080021c9
 80022c4:	080021c9 	.word	0x080021c9
 80022c8:	080021c9 	.word	0x080021c9
 80022cc:	080022d7 	.word	0x080022d7
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80022d0:	f7ff f92c 	bl	800152c <HAL_RCC_GetPCLK2Freq>
 80022d4:	e7d5      	b.n	8002282 <UART_SetConfig+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80022d6:	686b      	ldr	r3, [r5, #4]
 80022d8:	085a      	lsrs	r2, r3, #1
 80022da:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80022de:	fbb2 f2f3 	udiv	r2, r2, r3
 80022e2:	f3c2 0342 	ubfx	r3, r2, #1, #3
 80022e6:	f022 020f 	bic.w	r2, r2, #15
 80022ea:	4313      	orrs	r3, r2
 80022ec:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80022ee:	2000      	movs	r0, #0
        break;
 80022f0:	e76c      	b.n	80021cc <UART_SetConfig+0x58>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80022f2:	f7ff f801 	bl	80012f8 <HAL_RCC_GetSysClockFreq>
 80022f6:	e7c4      	b.n	8002282 <UART_SetConfig+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80022f8:	686a      	ldr	r2, [r5, #4]
 80022fa:	0853      	lsrs	r3, r2, #1
 80022fc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002300:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002304:	fbb3 f2f2 	udiv	r2, r3, r2
 8002308:	e7eb      	b.n	80022e2 <UART_SetConfig+0x16e>
 800230a:	bf00      	nop
 800230c:	efff69f3 	.word	0xefff69f3
 8002310:	40013800 	.word	0x40013800
 8002314:	40004400 	.word	0x40004400
 8002318:	40021000 	.word	0x40021000
 800231c:	08003c04 	.word	0x08003c04

08002320 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002320:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002322:	07da      	lsls	r2, r3, #31
{
 8002324:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002326:	d506      	bpl.n	8002336 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002328:	6801      	ldr	r1, [r0, #0]
 800232a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800232c:	684a      	ldr	r2, [r1, #4]
 800232e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002332:	4322      	orrs	r2, r4
 8002334:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002336:	079c      	lsls	r4, r3, #30
 8002338:	d506      	bpl.n	8002348 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800233a:	6801      	ldr	r1, [r0, #0]
 800233c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800233e:	684a      	ldr	r2, [r1, #4]
 8002340:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002344:	4322      	orrs	r2, r4
 8002346:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002348:	0759      	lsls	r1, r3, #29
 800234a:	d506      	bpl.n	800235a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800234c:	6801      	ldr	r1, [r0, #0]
 800234e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002350:	684a      	ldr	r2, [r1, #4]
 8002352:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002356:	4322      	orrs	r2, r4
 8002358:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800235a:	071a      	lsls	r2, r3, #28
 800235c:	d506      	bpl.n	800236c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800235e:	6801      	ldr	r1, [r0, #0]
 8002360:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002362:	684a      	ldr	r2, [r1, #4]
 8002364:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002368:	4322      	orrs	r2, r4
 800236a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800236c:	06dc      	lsls	r4, r3, #27
 800236e:	d506      	bpl.n	800237e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002370:	6801      	ldr	r1, [r0, #0]
 8002372:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002374:	688a      	ldr	r2, [r1, #8]
 8002376:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800237a:	4322      	orrs	r2, r4
 800237c:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800237e:	0699      	lsls	r1, r3, #26
 8002380:	d506      	bpl.n	8002390 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002382:	6801      	ldr	r1, [r0, #0]
 8002384:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002386:	688a      	ldr	r2, [r1, #8]
 8002388:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800238c:	4322      	orrs	r2, r4
 800238e:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002390:	065a      	lsls	r2, r3, #25
 8002392:	d509      	bpl.n	80023a8 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002394:	6801      	ldr	r1, [r0, #0]
 8002396:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002398:	684a      	ldr	r2, [r1, #4]
 800239a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800239e:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023a0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023a4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023a6:	d00b      	beq.n	80023c0 <UART_AdvFeatureConfig+0xa0>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80023a8:	061b      	lsls	r3, r3, #24
 80023aa:	d506      	bpl.n	80023ba <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80023ac:	6802      	ldr	r2, [r0, #0]
 80023ae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80023b0:	6853      	ldr	r3, [r2, #4]
 80023b2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80023b6:	430b      	orrs	r3, r1
 80023b8:	6053      	str	r3, [r2, #4]
}
 80023ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023be:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80023c0:	684a      	ldr	r2, [r1, #4]
 80023c2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80023c4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80023c8:	4322      	orrs	r2, r4
 80023ca:	604a      	str	r2, [r1, #4]
 80023cc:	e7ec      	b.n	80023a8 <UART_AdvFeatureConfig+0x88>
 80023ce:	bf00      	nop

080023d0 <UART_WaitOnFlagUntilTimeout>:
{
 80023d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023d4:	9d08      	ldr	r5, [sp, #32]
 80023d6:	4680      	mov	r8, r0
 80023d8:	460f      	mov	r7, r1
 80023da:	4616      	mov	r6, r2
 80023dc:	4699      	mov	r9, r3
 80023de:	f8d8 4000 	ldr.w	r4, [r8]
 80023e2:	e001      	b.n	80023e8 <UART_WaitOnFlagUntilTimeout+0x18>
    if(Timeout != HAL_MAX_DELAY)
 80023e4:	1c6b      	adds	r3, r5, #1
 80023e6:	d10a      	bne.n	80023fe <UART_WaitOnFlagUntilTimeout+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023e8:	69e0      	ldr	r0, [r4, #28]
 80023ea:	ea37 0300 	bics.w	r3, r7, r0
 80023ee:	bf0c      	ite	eq
 80023f0:	2001      	moveq	r0, #1
 80023f2:	2000      	movne	r0, #0
 80023f4:	42b0      	cmp	r0, r6
 80023f6:	d0f5      	beq.n	80023e4 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 80023f8:	2000      	movs	r0, #0
}
 80023fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80023fe:	b13d      	cbz	r5, 8002410 <UART_WaitOnFlagUntilTimeout+0x40>
 8002400:	f7fd ff12 	bl	8000228 <HAL_GetTick>
 8002404:	eba0 0009 	sub.w	r0, r0, r9
 8002408:	4285      	cmp	r5, r0
 800240a:	d2e8      	bcs.n	80023de <UART_WaitOnFlagUntilTimeout+0xe>
 800240c:	f8d8 4000 	ldr.w	r4, [r8]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002416:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002418:	68a3      	ldr	r3, [r4, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800241a:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800241c:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8002420:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002422:	60a3      	str	r3, [r4, #8]
        __HAL_UNLOCK(huart);
 8002424:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8002426:	f888 2069 	strb.w	r2, [r8, #105]	; 0x69
        __HAL_UNLOCK(huart);
 800242a:	f888 1068 	strb.w	r1, [r8, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 800242e:	f888 206a 	strb.w	r2, [r8, #106]	; 0x6a
 8002432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002436:	bf00      	nop

08002438 <HAL_UART_Transmit>:
{
 8002438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800243c:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 800243e:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 8002442:	2920      	cmp	r1, #32
{
 8002444:	b084      	sub	sp, #16
  if(huart->gState == HAL_UART_STATE_READY)
 8002446:	d003      	beq.n	8002450 <HAL_UART_Transmit+0x18>
    return HAL_BUSY;
 8002448:	2002      	movs	r0, #2
}
 800244a:	b004      	add	sp, #16
 800244c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((pData == NULL ) || (Size == 0U))
 8002450:	b395      	cbz	r5, 80024b8 <HAL_UART_Transmit+0x80>
 8002452:	b38a      	cbz	r2, 80024b8 <HAL_UART_Transmit+0x80>
 8002454:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8002456:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800245a:	2b01      	cmp	r3, #1
 800245c:	4604      	mov	r4, r0
 800245e:	d0f3      	beq.n	8002448 <HAL_UART_Transmit+0x10>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002460:	2000      	movs	r0, #0
    __HAL_LOCK(huart);
 8002462:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002464:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002466:	66e0      	str	r0, [r4, #108]	; 0x6c
    __HAL_LOCK(huart);
 8002468:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800246c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8002470:	9203      	str	r2, [sp, #12]
    tickstart = HAL_GetTick();
 8002472:	f7fd fed9 	bl	8000228 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002476:	9a03      	ldr	r2, [sp, #12]
 8002478:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800247c:	4680      	mov	r8, r0
    huart->TxXferCount = Size;
 800247e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002482:	f8b4 6052 	ldrh.w	r6, [r4, #82]	; 0x52
 8002486:	b2b6      	uxth	r6, r6
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002488:	4643      	mov	r3, r8
 800248a:	2200      	movs	r2, #0
 800248c:	2180      	movs	r1, #128	; 0x80
 800248e:	4620      	mov	r0, r4
    while(huart->TxXferCount > 0U)
 8002490:	b306      	cbz	r6, 80024d4 <HAL_UART_Transmit+0x9c>
      huart->TxXferCount--;
 8002492:	f8b4 6052 	ldrh.w	r6, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002496:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8002498:	3e01      	subs	r6, #1
 800249a:	b2b6      	uxth	r6, r6
 800249c:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024a0:	f7ff ff96 	bl	80023d0 <UART_WaitOnFlagUntilTimeout>
 80024a4:	b9a0      	cbnz	r0, 80024d0 <HAL_UART_Transmit+0x98>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024a6:	68a3      	ldr	r3, [r4, #8]
 80024a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ac:	d006      	beq.n	80024bc <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80024ae:	6823      	ldr	r3, [r4, #0]
 80024b0:	782a      	ldrb	r2, [r5, #0]
 80024b2:	851a      	strh	r2, [r3, #40]	; 0x28
 80024b4:	3501      	adds	r5, #1
 80024b6:	e7e4      	b.n	8002482 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 80024b8:	2001      	movs	r0, #1
 80024ba:	e7c6      	b.n	800244a <HAL_UART_Transmit+0x12>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024bc:	6923      	ldr	r3, [r4, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f5      	bne.n	80024ae <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80024c2:	f835 3b02 	ldrh.w	r3, [r5], #2
 80024c6:	6822      	ldr	r2, [r4, #0]
 80024c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024cc:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 80024ce:	e7d8      	b.n	8002482 <HAL_UART_Transmit+0x4a>
        return HAL_TIMEOUT;
 80024d0:	2003      	movs	r0, #3
 80024d2:	e7ba      	b.n	800244a <HAL_UART_Transmit+0x12>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024d4:	9700      	str	r7, [sp, #0]
 80024d6:	4632      	mov	r2, r6
 80024d8:	2140      	movs	r1, #64	; 0x40
 80024da:	f7ff ff79 	bl	80023d0 <UART_WaitOnFlagUntilTimeout>
 80024de:	2800      	cmp	r0, #0
 80024e0:	d1f6      	bne.n	80024d0 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_READY;
 80024e2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80024e4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 80024e8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 80024ec:	e7ad      	b.n	800244a <HAL_UART_Transmit+0x12>
 80024ee:	bf00      	nop

080024f0 <UART_CheckIdleState>:
{
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f4:	2500      	movs	r5, #0
{
 80024f6:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f8:	66c5      	str	r5, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80024fa:	f7fd fe95 	bl	8000228 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8002504:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002506:	d40c      	bmi.n	8002522 <UART_CheckIdleState+0x32>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	075b      	lsls	r3, r3, #29
 800250c:	d417      	bmi.n	800253e <UART_CheckIdleState+0x4e>
  huart->gState  = HAL_UART_STATE_READY;
 800250e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002510:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002512:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002516:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800251a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 800251e:	b002      	add	sp, #8
 8002520:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002522:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	462a      	mov	r2, r5
 800252a:	4603      	mov	r3, r0
 800252c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002530:	4620      	mov	r0, r4
 8002532:	f7ff ff4d 	bl	80023d0 <UART_WaitOnFlagUntilTimeout>
 8002536:	b180      	cbz	r0, 800255a <UART_CheckIdleState+0x6a>
      return HAL_TIMEOUT;
 8002538:	2003      	movs	r0, #3
}
 800253a:	b002      	add	sp, #8
 800253c:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800253e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002542:	9200      	str	r2, [sp, #0]
 8002544:	4633      	mov	r3, r6
 8002546:	2200      	movs	r2, #0
 8002548:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800254c:	4620      	mov	r0, r4
 800254e:	f7ff ff3f 	bl	80023d0 <UART_WaitOnFlagUntilTimeout>
 8002552:	2800      	cmp	r0, #0
 8002554:	d0db      	beq.n	800250e <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 8002556:	2003      	movs	r0, #3
 8002558:	e7ef      	b.n	800253a <UART_CheckIdleState+0x4a>
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	e7d4      	b.n	8002508 <UART_CheckIdleState+0x18>
 800255e:	bf00      	nop

08002560 <HAL_UART_Init>:
  if(huart == NULL)
 8002560:	b390      	cbz	r0, 80025c8 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002562:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 8002566:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8002568:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800256c:	4604      	mov	r4, r0
 800256e:	b303      	cbz	r3, 80025b2 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8002570:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002572:	2324      	movs	r3, #36	; 0x24
 8002574:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002578:	6813      	ldr	r3, [r2, #0]
 800257a:	f023 0301 	bic.w	r3, r3, #1
 800257e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002580:	4620      	mov	r0, r4
 8002582:	f7ff fdf7 	bl	8002174 <UART_SetConfig>
 8002586:	2801      	cmp	r0, #1
 8002588:	d018      	beq.n	80025bc <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800258a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800258c:	b9c3      	cbnz	r3, 80025c0 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800259e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80025a6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80025a8:	601a      	str	r2, [r3, #0]
}
 80025aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80025ae:	f7ff bf9f 	b.w	80024f0 <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 80025b2:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80025b6:	f000 fb8b 	bl	8002cd0 <HAL_UART_MspInit>
 80025ba:	e7d9      	b.n	8002570 <HAL_UART_Init+0x10>
}
 80025bc:	2001      	movs	r0, #1
 80025be:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 80025c0:	4620      	mov	r0, r4
 80025c2:	f7ff fead 	bl	8002320 <UART_AdvFeatureConfig>
 80025c6:	e7e2      	b.n	800258e <HAL_UART_Init+0x2e>
}
 80025c8:	2001      	movs	r0, #1
 80025ca:	4770      	bx	lr

080025cc <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025cc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80025d0:	2b21      	cmp	r3, #33	; 0x21
 80025d2:	d001      	beq.n	80025d8 <UART_Transmit_IT+0xc>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80025d4:	2002      	movs	r0, #2
  }
}
 80025d6:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 80025d8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80025dc:	b29b      	uxth	r3, r3
 80025de:	b18b      	cbz	r3, 8002604 <UART_Transmit_IT+0x38>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025e0:	6883      	ldr	r3, [r0, #8]
 80025e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e6:	d018      	beq.n	800261a <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80025e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80025ea:	6802      	ldr	r2, [r0, #0]
 80025ec:	1c59      	adds	r1, r3, #1
 80025ee:	64c1      	str	r1, [r0, #76]	; 0x4c
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80025f4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8002600:	2000      	movs	r0, #0
 8002602:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002604:	6802      	ldr	r2, [r0, #0]
 8002606:	6811      	ldr	r1, [r2, #0]
 8002608:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800260c:	6011      	str	r1, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800260e:	6811      	ldr	r1, [r2, #0]
 8002610:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002614:	4618      	mov	r0, r3
 8002616:	6011      	str	r1, [r2, #0]
 8002618:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800261a:	6903      	ldr	r3, [r0, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e3      	bne.n	80025e8 <UART_Transmit_IT+0x1c>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002620:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002622:	6801      	ldr	r1, [r0, #0]
 8002624:	f833 2b02 	ldrh.w	r2, [r3], #2
 8002628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800262c:	850a      	strh	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800262e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002630:	e7e0      	b.n	80025f4 <UART_Transmit_IT+0x28>
 8002632:	bf00      	nop

08002634 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002634:	b538      	push	{r3, r4, r5, lr}
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002636:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800263a:	2b22      	cmp	r3, #34	; 0x22
 800263c:	d006      	beq.n	800264c <UART_Receive_IT+0x18>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800263e:	6802      	ldr	r2, [r0, #0]
 8002640:	6993      	ldr	r3, [r2, #24]
 8002642:	f043 0308 	orr.w	r3, r3, #8
 8002646:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8002648:	2002      	movs	r0, #2
 800264a:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800264c:	6803      	ldr	r3, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800264e:	6882      	ldr	r2, [r0, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002650:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  uint16_t  uhMask = huart->Mask;
 8002652:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002656:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800265a:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800265c:	d01d      	beq.n	800269a <UART_Receive_IT+0x66>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800265e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002660:	400b      	ands	r3, r1
 8002662:	1c51      	adds	r1, r2, #1
 8002664:	6541      	str	r1, [r0, #84]	; 0x54
 8002666:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 8002668:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 800266c:	3c01      	subs	r4, #1
 800266e:	b2a4      	uxth	r4, r4
 8002670:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8002674:	b10c      	cbz	r4, 800267a <UART_Receive_IT+0x46>
    return HAL_OK;
 8002676:	2000      	movs	r0, #0
  }
}
 8002678:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800267a:	6803      	ldr	r3, [r0, #0]
 800267c:	6819      	ldr	r1, [r3, #0]
 800267e:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8002682:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002684:	6899      	ldr	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002686:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002688:	f021 0101 	bic.w	r1, r1, #1
 800268c:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800268e:	f880 506a 	strb.w	r5, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8002692:	f001 fa31 	bl	8003af8 <HAL_UART_RxCpltCallback>
 8002696:	4620      	mov	r0, r4
 8002698:	bd38      	pop	{r3, r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800269a:	6902      	ldr	r2, [r0, #16]
 800269c:	2a00      	cmp	r2, #0
 800269e:	d1de      	bne.n	800265e <UART_Receive_IT+0x2a>
      *tmp = (uint16_t)(uhdata & uhMask);
 80026a0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80026a2:	400b      	ands	r3, r1
 80026a4:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr +=2U;
 80026a8:	6542      	str	r2, [r0, #84]	; 0x54
 80026aa:	e7dd      	b.n	8002668 <UART_Receive_IT+0x34>

080026ac <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026ac:	6803      	ldr	r3, [r0, #0]
 80026ae:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026b0:	6819      	ldr	r1, [r3, #0]
{
 80026b2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80026b4:	0715      	lsls	r5, r2, #28
{
 80026b6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80026b8:	d110      	bne.n	80026dc <HAL_UART_IRQHandler+0x30>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026ba:	0696      	lsls	r6, r2, #26
 80026bc:	d45b      	bmi.n	8002776 <HAL_UART_IRQHandler+0xca>
  cr3its = READ_REG(huart->Instance->CR3);
 80026be:	6898      	ldr	r0, [r3, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80026c0:	02d5      	lsls	r5, r2, #11
 80026c2:	d501      	bpl.n	80026c8 <HAL_UART_IRQHandler+0x1c>
 80026c4:	0240      	lsls	r0, r0, #9
 80026c6:	d47f      	bmi.n	80027c8 <HAL_UART_IRQHandler+0x11c>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026c8:	0616      	lsls	r6, r2, #24
 80026ca:	d502      	bpl.n	80026d2 <HAL_UART_IRQHandler+0x26>
 80026cc:	060d      	lsls	r5, r1, #24
 80026ce:	f100 808c 	bmi.w	80027ea <HAL_UART_IRQHandler+0x13e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026d2:	0650      	lsls	r0, r2, #25
 80026d4:	d501      	bpl.n	80026da <HAL_UART_IRQHandler+0x2e>
 80026d6:	064a      	lsls	r2, r1, #25
 80026d8:	d464      	bmi.n	80027a4 <HAL_UART_IRQHandler+0xf8>
 80026da:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 80026dc:	6898      	ldr	r0, [r3, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80026de:	f010 0501 	ands.w	r5, r0, #1
 80026e2:	d04e      	beq.n	8002782 <HAL_UART_IRQHandler+0xd6>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026e4:	07d6      	lsls	r6, r2, #31
 80026e6:	d507      	bpl.n	80026f8 <HAL_UART_IRQHandler+0x4c>
 80026e8:	05c8      	lsls	r0, r1, #23
 80026ea:	d505      	bpl.n	80026f8 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80026ec:	2001      	movs	r0, #1
 80026ee:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026f0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80026f2:	f040 0001 	orr.w	r0, r0, #1
 80026f6:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026f8:	0796      	lsls	r6, r2, #30
 80026fa:	d548      	bpl.n	800278e <HAL_UART_IRQHandler+0xe2>
 80026fc:	b13d      	cbz	r5, 800270e <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80026fe:	2002      	movs	r0, #2
 8002700:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002702:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002704:	f040 0004 	orr.w	r0, r0, #4
 8002708:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800270a:	0750      	lsls	r0, r2, #29
 800270c:	d443      	bmi.n	8002796 <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800270e:	0710      	lsls	r0, r2, #28
 8002710:	d503      	bpl.n	800271a <HAL_UART_IRQHandler+0x6e>
 8002712:	068e      	lsls	r6, r1, #26
 8002714:	d451      	bmi.n	80027ba <HAL_UART_IRQHandler+0x10e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002716:	2d00      	cmp	r5, #0
 8002718:	d14f      	bne.n	80027ba <HAL_UART_IRQHandler+0x10e>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800271a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800271c:	2800      	cmp	r0, #0
 800271e:	d0dc      	beq.n	80026da <HAL_UART_IRQHandler+0x2e>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002720:	0690      	lsls	r0, r2, #26
 8002722:	d501      	bpl.n	8002728 <HAL_UART_IRQHandler+0x7c>
 8002724:	0689      	lsls	r1, r1, #26
 8002726:	d465      	bmi.n	80027f4 <HAL_UART_IRQHandler+0x148>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002728:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800272a:	0712      	lsls	r2, r2, #28
 800272c:	d403      	bmi.n	8002736 <HAL_UART_IRQHandler+0x8a>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800272e:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002730:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002734:	d063      	beq.n	80027fe <HAL_UART_IRQHandler+0x152>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800273c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800273e:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8002740:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8002748:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	0656      	lsls	r6, r2, #25
 8002750:	d547      	bpl.n	80027e2 <HAL_UART_IRQHandler+0x136>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002752:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002754:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800275a:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800275c:	2800      	cmp	r0, #0
 800275e:	d040      	beq.n	80027e2 <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002760:	4b29      	ldr	r3, [pc, #164]	; (8002808 <HAL_UART_IRQHandler+0x15c>)
 8002762:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002764:	f7fe f9da 	bl	8000b1c <HAL_DMA_Abort_IT>
 8002768:	2800      	cmp	r0, #0
 800276a:	d0b6      	beq.n	80026da <HAL_UART_IRQHandler+0x2e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800276c:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 800276e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002772:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002774:	4718      	bx	r3
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002776:	068d      	lsls	r5, r1, #26
 8002778:	d5a1      	bpl.n	80026be <HAL_UART_IRQHandler+0x12>
}
 800277a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800277e:	f7ff bf59 	b.w	8002634 <UART_Receive_IT>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002782:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002786:	d09b      	beq.n	80026c0 <HAL_UART_IRQHandler+0x14>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002788:	07d6      	lsls	r6, r2, #31
 800278a:	d5b5      	bpl.n	80026f8 <HAL_UART_IRQHandler+0x4c>
 800278c:	e7ac      	b.n	80026e8 <HAL_UART_IRQHandler+0x3c>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800278e:	0756      	lsls	r6, r2, #29
 8002790:	d5bd      	bpl.n	800270e <HAL_UART_IRQHandler+0x62>
 8002792:	2d00      	cmp	r5, #0
 8002794:	d0bb      	beq.n	800270e <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002796:	2004      	movs	r0, #4
 8002798:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800279a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800279c:	f040 0002 	orr.w	r0, r0, #2
 80027a0:	66e0      	str	r0, [r4, #108]	; 0x6c
 80027a2:	e7b4      	b.n	800270e <HAL_UART_IRQHandler+0x62>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027a4:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80027a6:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ac:	601a      	str	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 80027ae:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80027b0:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 80027b4:	f7ff fcce 	bl	8002154 <HAL_UART_TxCpltCallback>
 80027b8:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80027ba:	2008      	movs	r0, #8
 80027bc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027be:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80027c0:	f040 0008 	orr.w	r0, r0, #8
 80027c4:	66e0      	str	r0, [r4, #108]	; 0x6c
 80027c6:	e7a8      	b.n	800271a <HAL_UART_IRQHandler+0x6e>
    huart->gState  = HAL_UART_STATE_READY;
 80027c8:	2220      	movs	r2, #32
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80027ca:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80027ce:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80027d0:	4620      	mov	r0, r4
    huart->gState  = HAL_UART_STATE_READY;
 80027d2:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 80027d6:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
}
 80027da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80027de:	f000 b815 	b.w	800280c <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff fcb8 	bl	8002158 <HAL_UART_ErrorCallback>
 80027e8:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
 80027ea:	4620      	mov	r0, r4
}
 80027ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 80027f0:	f7ff beec 	b.w	80025cc <UART_Transmit_IT>
        UART_Receive_IT(huart);
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff ff1d 	bl	8002634 <UART_Receive_IT>
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	e794      	b.n	8002728 <HAL_UART_IRQHandler+0x7c>
        HAL_UART_ErrorCallback(huart);
 80027fe:	4620      	mov	r0, r4
 8002800:	f7ff fcaa 	bl	8002158 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002804:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002806:	bd70      	pop	{r4, r5, r6, pc}
 8002808:	0800215d 	.word	0x0800215d

0800280c <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop

08002810 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	b096      	sub	sp, #88	; 0x58
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002814:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002816:	260a      	movs	r6, #10
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002818:	2510      	movs	r5, #16
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800281a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800281c:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800281e:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002822:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002824:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002826:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002828:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800282a:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800282c:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800282e:	9114      	str	r1, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002830:	9215      	str	r2, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002832:	f7fe fa93 	bl	8000d5c <HAL_RCC_OscConfig>
 8002836:	b100      	cbz	r0, 800283a <SystemClock_Config+0x2a>
 8002838:	e7fe      	b.n	8002838 <SystemClock_Config+0x28>
 800283a:	4603      	mov	r3, r0
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800283c:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800283e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002842:	4621      	mov	r1, r4
 8002844:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002846:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002848:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800284a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800284c:	9500      	str	r5, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800284e:	9203      	str	r2, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002850:	f7fe fd86 	bl	8001360 <HAL_RCC_ClockConfig>
 8002854:	b100      	cbz	r0, 8002858 <SystemClock_Config+0x48>
 8002856:	e7fe      	b.n	8002856 <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC
 8002858:	4910      	ldr	r1, [pc, #64]	; (800289c <SystemClock_Config+0x8c>)
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800285a:	9007      	str	r0, [sp, #28]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800285c:	f44f 7280 	mov.w	r2, #256	; 0x100
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002860:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002864:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC
 8002866:	9105      	str	r1, [sp, #20]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002868:	9209      	str	r2, [sp, #36]	; 0x24
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800286a:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800286c:	f7fe fe76 	bl	800155c <HAL_RCCEx_PeriphCLKConfig>
 8002870:	4604      	mov	r4, r0
 8002872:	b100      	cbz	r0, 8002876 <SystemClock_Config+0x66>
 8002874:	e7fe      	b.n	8002874 <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002876:	f7fe fe3b 	bl	80014f0 <HAL_RCC_GetHCLKFreq>
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <SystemClock_Config+0x90>)
 800287c:	fba3 3000 	umull	r3, r0, r3, r0
 8002880:	0980      	lsrs	r0, r0, #6
 8002882:	f7fe f91f 	bl	8000ac4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002886:	2004      	movs	r0, #4
 8002888:	f7fe f936 	bl	8000af8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800288c:	4622      	mov	r2, r4
 800288e:	4621      	mov	r1, r4
 8002890:	f04f 30ff 	mov.w	r0, #4294967295
 8002894:	f7fe f8d4 	bl	8000a40 <HAL_NVIC_SetPriority>
}
 8002898:	b016      	add	sp, #88	; 0x58
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	00010081 	.word	0x00010081
 80028a0:	10624dd3 	.word	0x10624dd3

080028a4 <main>:
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 80028a8:	f7fd fca4 	bl	80001f4 <HAL_Init>
  SystemClock_Config();
 80028ac:	f7ff ffb0 	bl	8002810 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b0:	4ba4      	ldr	r3, [pc, #656]	; (8002b44 <main+0x2a0>)
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80028b8:	615a      	str	r2, [r3, #20]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80028c0:	9201      	str	r2, [sp, #4]
 80028c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80028ca:	615a      	str	r2, [r3, #20]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80028d2:	9202      	str	r2, [sp, #8]
 80028d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80028dc:	615a      	str	r2, [r3, #20]
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80028e4:	9203      	str	r2, [sp, #12]
 80028e6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028ee:	615a      	str	r2, [r3, #20]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f6:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 80028f8:	2200      	movs	r2, #0
 80028fa:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80028fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002902:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8002904:	f7fe fa18 	bl	8000d38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8002908:	2200      	movs	r2, #0
 800290a:	f44f 618f 	mov.w	r1, #1144	; 0x478
 800290e:	488e      	ldr	r0, [pc, #568]	; (8002b48 <main+0x2a4>)
 8002910:	f7fe fa12 	bl	8000d38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8002914:	2200      	movs	r2, #0
 8002916:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 800291a:	488c      	ldr	r0, [pc, #560]	; (8002b4c <main+0x2a8>)

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 800291e:	f7fe fa0b 	bl	8000d38 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8002922:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002926:	4b8a      	ldr	r3, [pc, #552]	; (8002b50 <main+0x2ac>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002928:	4888      	ldr	r0, [pc, #544]	; (8002b4c <main+0x2a8>)
  GPIO_InitStruct.Pin = B1_Pin;
 800292a:	9208      	str	r2, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800292c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800292e:	9309      	str	r3, [sp, #36]	; 0x24

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002930:	2603      	movs	r6, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002934:	f7fe f916 	bl	8000b64 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002938:	a908      	add	r1, sp, #32
 800293a:	4884      	ldr	r0, [pc, #528]	; (8002b4c <main+0x2a8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800293c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800293e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002942:	f7fe f90f 	bl	8000b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002946:	2313      	movs	r3, #19
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002948:	a908      	add	r1, sp, #32
 800294a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800294e:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002950:	250c      	movs	r5, #12
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002952:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002956:	f7fe f905 	bl	8000b64 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	2202      	movs	r2, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800295c:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295e:	a908      	add	r1, sp, #32
 8002960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002966:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002968:	930c      	str	r3, [sp, #48]	; 0x30

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296a:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800296e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002970:	f7fe f8f8 	bl	8000b64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8002974:	f44f 7378 	mov.w	r3, #992	; 0x3e0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002978:	a908      	add	r1, sp, #32
 800297a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 800297e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002984:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002986:	f7fe f8ed 	bl	8000b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800298a:	f44f 638f 	mov.w	r3, #1144	; 0x478
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298e:	a908      	add	r1, sp, #32
 8002990:	486d      	ldr	r0, [pc, #436]	; (8002b48 <main+0x2a4>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8002992:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002994:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002998:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299a:	f7fe f8e3 	bl	8000b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800299e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a2:	a908      	add	r1, sp, #32
 80029a4:	4869      	ldr	r0, [pc, #420]	; (8002b4c <main+0x2a8>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80029a6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a8:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ae:	f7fe f8d9 	bl	8000b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80029b6:	4b67      	ldr	r3, [pc, #412]	; (8002b54 <main+0x2b0>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029b8:	9208      	str	r2, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ba:	a908      	add	r1, sp, #32
 80029bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80029c0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c4:	f7fe f8ce 	bl	8000b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029c8:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029cc:	a908      	add	r1, sp, #32
 80029ce:	485e      	ldr	r0, [pc, #376]	; (8002b48 <main+0x2a4>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029d0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d6:	f7fe f8c5 	bl	8000b64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029da:	4622      	mov	r2, r4
 80029dc:	4621      	mov	r1, r4
 80029de:	2028      	movs	r0, #40	; 0x28
 80029e0:	f7fe f82e 	bl	8000a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029e4:	2028      	movs	r0, #40	; 0x28
 80029e6:	f7fe f861 	bl	8000aac <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 80029ea:	4b5b      	ldr	r3, [pc, #364]	; (8002b58 <main+0x2b4>)
 80029ec:	495b      	ldr	r1, [pc, #364]	; (8002b5c <main+0x2b8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029ee:	609c      	str	r4, [r3, #8]
  huart1.Init.BaudRate = 115200;
 80029f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029f4:	4618      	mov	r0, r3
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029f6:	60dc      	str	r4, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029f8:	611c      	str	r4, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029fa:	615d      	str	r5, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029fc:	619c      	str	r4, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029fe:	61dc      	str	r4, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a00:	621c      	str	r4, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a02:	625c      	str	r4, [r3, #36]	; 0x24
  huart1.Init.BaudRate = 115200;
 8002a04:	e883 0006 	stmia.w	r3, {r1, r2}
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a08:	f7ff fdaa 	bl	8002560 <HAL_UART_Init>
 8002a0c:	b100      	cbz	r0, 8002a10 <main+0x16c>
 8002a0e:	e7fe      	b.n	8002a0e <main+0x16a>
  hadc1.Instance = ADC1;
 8002a10:	4c53      	ldr	r4, [pc, #332]	; (8002b60 <main+0x2bc>)
 8002a12:	4603      	mov	r3, r0
 8002a14:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a18:	2204      	movs	r2, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a1a:	4620      	mov	r0, r4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002a1c:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a1e:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a20:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a22:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a24:	6263      	str	r3, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a26:	6323      	str	r3, [r4, #48]	; 0x30
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a28:	60e3      	str	r3, [r4, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a2a:	6363      	str	r3, [r4, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002a2c:	61a3      	str	r3, [r4, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002a2e:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a30:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 8002a32:	6226      	str	r6, [r4, #32]
  hadc1.Instance = ADC1;
 8002a34:	6021      	str	r1, [r4, #0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a36:	6162      	str	r2, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a38:	f7fd fc70 	bl	800031c <HAL_ADC_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	b100      	cbz	r0, 8002a42 <main+0x19e>
 8002a40:	e7fe      	b.n	8002a40 <main+0x19c>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002a42:	af0e      	add	r7, sp, #56	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002a44:	4620      	mov	r0, r4
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002a46:	f847 3d24 	str.w	r3, [r7, #-36]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002a4a:	4639      	mov	r1, r7
 8002a4c:	f7fd ff74 	bl	8000938 <HAL_ADCEx_MultiModeConfigChannel>
 8002a50:	4603      	mov	r3, r0
 8002a52:	b100      	cbz	r0, 8002a56 <main+0x1b2>
 8002a54:	e7fe      	b.n	8002a54 <main+0x1b0>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a56:	4620      	mov	r0, r4
 8002a58:	a908      	add	r1, sp, #32
  sConfig.Channel = ADC_CHANNEL_12;
 8002a5a:	9508      	str	r5, [sp, #32]
  sConfig.Rank = 1;
 8002a5c:	9609      	str	r6, [sp, #36]	; 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002a5e:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002a60:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a62:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.Offset = 0;
 8002a64:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a66:	f7fd fdd1 	bl	800060c <HAL_ADC_ConfigChannel>
 8002a6a:	b100      	cbz	r0, 8002a6e <main+0x1ca>
 8002a6c:	e7fe      	b.n	8002a6c <main+0x1c8>
  htim2.Instance = TIM2;
 8002a6e:	4c3d      	ldr	r4, [pc, #244]	; (8002b64 <main+0x2c0>)
 8002a70:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002a74:	2110      	movs	r1, #16
  htim2.Init.Period = 16000;
 8002a76:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
  htim2.Init.Prescaler = 0;
 8002a7a:	6060      	str	r0, [r4, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a7c:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a7e:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a80:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8002a82:	6025      	str	r5, [r4, #0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002a84:	60a1      	str	r1, [r4, #8]
  htim2.Init.Period = 16000;
 8002a86:	60e2      	str	r2, [r4, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a88:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a8a:	f7ff fad1 	bl	8002030 <HAL_TIM_Base_Init>
 8002a8e:	b100      	cbz	r0, 8002a92 <main+0x1ee>
 8002a90:	e7fe      	b.n	8002a90 <main+0x1ec>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a96:	a908      	add	r1, sp, #32
 8002a98:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a9a:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a9c:	f7ff f8e0 	bl	8001c60 <HAL_TIM_ConfigClockSource>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	b100      	cbz	r0, 8002aa6 <main+0x202>
 8002aa4:	e7fe      	b.n	8002aa4 <main+0x200>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	4639      	mov	r1, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aaa:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aac:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002aae:	f7ff fadb 	bl	8002068 <HAL_TIMEx_MasterConfigSynchronization>
 8002ab2:	b100      	cbz	r0, 8002ab6 <main+0x212>
 8002ab4:	e7fe      	b.n	8002ab4 <main+0x210>
  hrtc.Instance = RTC;
 8002ab6:	4c2c      	ldr	r4, [pc, #176]	; (8002b68 <main+0x2c4>)
 8002ab8:	492c      	ldr	r1, [pc, #176]	; (8002b6c <main+0x2c8>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002aba:	6060      	str	r0, [r4, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002abc:	227f      	movs	r2, #127	; 0x7f
  hrtc.Init.SynchPrediv = 255;
 8002abe:	23ff      	movs	r3, #255	; 0xff
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ac0:	6120      	str	r0, [r4, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ac2:	6160      	str	r0, [r4, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ac4:	61a0      	str	r0, [r4, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ac6:	4620      	mov	r0, r4
  hrtc.Instance = RTC;
 8002ac8:	6021      	str	r1, [r4, #0]
  hrtc.Init.AsynchPrediv = 127;
 8002aca:	60a2      	str	r2, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 8002acc:	60e3      	str	r3, [r4, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ace:	f7fe fea1 	bl	8001814 <HAL_RTC_Init>
 8002ad2:	4605      	mov	r5, r0
 8002ad4:	b100      	cbz	r0, 8002ad8 <main+0x234>
 8002ad6:	e7fe      	b.n	8002ad6 <main+0x232>
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8002ad8:	4601      	mov	r1, r0
 8002ada:	4620      	mov	r0, r4
 8002adc:	f7ff f8ba 	bl	8001c54 <HAL_RTCEx_BKUPRead>
 8002ae0:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8002ae4:	4298      	cmp	r0, r3
 8002ae6:	d013      	beq.n	8002b10 <main+0x26c>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002ae8:	4632      	mov	r2, r6
 8002aea:	a908      	add	r1, sp, #32
 8002aec:	4620      	mov	r0, r4
  sTime.Hours = 0x0;
 8002aee:	f88d 5020 	strb.w	r5, [sp, #32]
  sTime.Minutes = 0x0;
 8002af2:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
  sTime.Seconds = 0x0;
 8002af6:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002afa:	950b      	str	r5, [sp, #44]	; 0x2c
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002afc:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002afe:	f7fe fee1 	bl	80018c4 <HAL_RTC_SetTime>
 8002b02:	b160      	cbz	r0, 8002b1e <main+0x27a>
 8002b04:	e7fe      	b.n	8002b04 <main+0x260>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8002b06:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002b0a:	4817      	ldr	r0, [pc, #92]	; (8002b68 <main+0x2c4>)
 8002b0c:	f7ff f89c 	bl	8001c48 <HAL_RTCEx_BKUPWrite>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002b10:	2204      	movs	r2, #4
 8002b12:	2100      	movs	r1, #0
 8002b14:	4814      	ldr	r0, [pc, #80]	; (8002b68 <main+0x2c4>)
 8002b16:	f7ff f803 	bl	8001b20 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002b1a:	b348      	cbz	r0, 8002b70 <main+0x2cc>
 8002b1c:	e7fe      	b.n	8002b1c <main+0x278>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b1e:	2301      	movs	r3, #1
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b20:	4639      	mov	r1, r7
 8002b22:	461a      	mov	r2, r3
  sDate.Year = 0x0;
 8002b24:	2400      	movs	r4, #0
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b26:	4810      	ldr	r0, [pc, #64]	; (8002b68 <main+0x2c4>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b28:	f88d 3014 	strb.w	r3, [sp, #20]
  sDate.Month = RTC_MONTH_JANUARY;
 8002b2c:	f88d 3015 	strb.w	r3, [sp, #21]
  sDate.Date = 0x1;
 8002b30:	f88d 3016 	strb.w	r3, [sp, #22]
  sDate.Year = 0x0;
 8002b34:	f88d 4017 	strb.w	r4, [sp, #23]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b38:	f7fe ff64 	bl	8001a04 <HAL_RTC_SetDate>
 8002b3c:	4601      	mov	r1, r0
 8002b3e:	2800      	cmp	r0, #0
 8002b40:	d0e1      	beq.n	8002b06 <main+0x262>
 8002b42:	e7fe      	b.n	8002b42 <main+0x29e>
 8002b44:	40021000 	.word	0x40021000
 8002b48:	48000400 	.word	0x48000400
 8002b4c:	48000800 	.word	0x48000800
 8002b50:	10210000 	.word	0x10210000
 8002b54:	10310000 	.word	0x10310000
 8002b58:	20000090 	.word	0x20000090
 8002b5c:	40013800 	.word	0x40013800
 8002b60:	2000003c 	.word	0x2000003c
 8002b64:	20000120 	.word	0x20000120
 8002b68:	20000100 	.word	0x20000100
 8002b6c:	40002800 	.word	0x40002800
  UserInitialise();
 8002b70:	f000 f984 	bl	8002e7c <UserInitialise>
	  User();
 8002b74:	f000 fe90 	bl	8003898 <User>
 8002b78:	e7fc      	b.n	8002b74 <main+0x2d0>
 8002b7a:	bf00      	nop

08002b7c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <HAL_MspInit+0x78>)
{
 8002b7e:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	619a      	str	r2, [r3, #24]
 8002b88:	699b      	ldr	r3, [r3, #24]
{
 8002b8a:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b92:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b94:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b96:	f7fd ff41 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	f06f 000b 	mvn.w	r0, #11
 8002ba2:	f7fd ff4d 	bl	8000a40 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	4611      	mov	r1, r2
 8002baa:	f06f 000a 	mvn.w	r0, #10
 8002bae:	f7fd ff47 	bl	8000a40 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	f06f 0009 	mvn.w	r0, #9
 8002bba:	f7fd ff41 	bl	8000a40 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	f06f 0004 	mvn.w	r0, #4
 8002bc6:	f7fd ff3b 	bl	8000a40 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	4611      	mov	r1, r2
 8002bce:	f06f 0003 	mvn.w	r0, #3
 8002bd2:	f7fd ff35 	bl	8000a40 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	4611      	mov	r1, r2
 8002bda:	f06f 0001 	mvn.w	r0, #1
 8002bde:	f7fd ff2f 	bl	8000a40 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	4611      	mov	r1, r2
 8002be6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bea:	f7fd ff29 	bl	8000a40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bee:	b003      	add	sp, #12
 8002bf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002bf8:	6803      	ldr	r3, [r0, #0]
 8002bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bfe:	d000      	beq.n	8002c02 <HAL_ADC_MspInit+0xa>
 8002c00:	4770      	bx	lr
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002c02:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8002c06:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
{
 8002c0a:	b530      	push	{r4, r5, lr}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002c0c:	695a      	ldr	r2, [r3, #20]
    PB13     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c0e:	480f      	ldr	r0, [pc, #60]	; (8002c4c <HAL_ADC_MspInit+0x54>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002c10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c14:	615a      	str	r2, [r3, #20]
 8002c16:	695b      	ldr	r3, [r3, #20]
{
 8002c18:	b087      	sub	sp, #28
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c20:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c22:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c24:	2503      	movs	r5, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2400      	movs	r4, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002c28:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c2a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c2c:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c30:	f7fd ff98 	bl	8000b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 8002c34:	f242 0302 	movw	r3, #8194	; 0x2002
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c38:	a901      	add	r1, sp, #4
 8002c3a:	4805      	ldr	r0, [pc, #20]	; (8002c50 <HAL_ADC_MspInit+0x58>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c3c:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 8002c40:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c42:	f7fd ff8f 	bl	8000b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c46:	b007      	add	sp, #28
 8002c48:	bd30      	pop	{r4, r5, pc}
 8002c4a:	bf00      	nop
 8002c4c:	48000800 	.word	0x48000800
 8002c50:	48000400 	.word	0x48000400

08002c54 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c54:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 8002c56:	6802      	ldr	r2, [r0, #0]
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <HAL_RTC_MspInit+0x38>)
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d000      	beq.n	8002c60 <HAL_RTC_MspInit+0xc>
 8002c5e:	bd08      	pop	{r3, pc}
 8002c60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c64:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_RTC_MspInit+0x3c>)
 8002c6a:	fab2 f282 	clz	r2, r2
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	2101      	movs	r1, #1
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002c74:	2200      	movs	r2, #0
    __HAL_RCC_RTC_ENABLE();
 8002c76:	6019      	str	r1, [r3, #0]
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002c78:	2003      	movs	r0, #3
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	f7fd fee0 	bl	8000a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002c80:	2003      	movs	r0, #3
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002c86:	f7fd bf11 	b.w	8000aac <HAL_NVIC_EnableIRQ>
 8002c8a:	bf00      	nop
 8002c8c:	40002800 	.word	0x40002800
 8002c90:	10908100 	.word	0x10908100

08002c94 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8002c94:	6803      	ldr	r3, [r0, #0]
 8002c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9a:	d000      	beq.n	8002c9e <HAL_TIM_Base_MspInit+0xa>
 8002c9c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c9e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
{
 8002ca2:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	f042 0201 	orr.w	r2, r2, #1
 8002caa:	61da      	str	r2, [r3, #28]
 8002cac:	69db      	ldr	r3, [r3, #28]
{
 8002cae:	b083      	sub	sp, #12
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cb0:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cb8:	4611      	mov	r1, r2
 8002cba:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cbc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cbe:	f7fd febf 	bl	8000a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cc2:	201c      	movs	r0, #28
 8002cc4:	f7fd fef2 	bl	8000aac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cc8:	b003      	add	sp, #12
 8002cca:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cce:	bf00      	nop

08002cd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002cd0:	6802      	ldr	r2, [r0, #0]
 8002cd2:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <HAL_UART_MspInit+0x54>)
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d000      	beq.n	8002cda <HAL_UART_MspInit+0xa>
 8002cd8:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cda:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
{
 8002cde:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ce0:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ce2:	4811      	ldr	r0, [pc, #68]	; (8002d28 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ce8:	619a      	str	r2, [r3, #24]
 8002cea:	699b      	ldr	r3, [r3, #24]
{
 8002cec:	b087      	sub	sp, #28
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf2:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cf4:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cf6:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002cfa:	2630      	movs	r6, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cfe:	2401      	movs	r4, #1
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d00:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d02:	9204      	str	r2, [sp, #16]
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d04:	9f00      	ldr	r7, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002d06:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d0a:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0c:	f7fd ff2a 	bl	8000b64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d10:	2200      	movs	r2, #0
 8002d12:	4611      	mov	r1, r2
 8002d14:	2025      	movs	r0, #37	; 0x25
 8002d16:	f7fd fe93 	bl	8000a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d1a:	2025      	movs	r0, #37	; 0x25
 8002d1c:	f7fd fec6 	bl	8000aac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d20:	b007      	add	sp, #28
 8002d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d24:	40013800 	.word	0x40013800
 8002d28:	48000800 	.word	0x48000800

08002d2c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002d2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d2e:	f7fd fa73 	bl	8000218 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002d36:	f7fd beed 	b.w	8000b14 <HAL_SYSTICK_IRQHandler>
 8002d3a:	bf00      	nop

08002d3c <RTC_WKUP_IRQHandler>:
void RTC_WKUP_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002d3c:	4801      	ldr	r0, [pc, #4]	; (8002d44 <RTC_WKUP_IRQHandler+0x8>)
 8002d3e:	f7fe bf6b 	b.w	8001c18 <HAL_RTCEx_WakeUpTimerIRQHandler>
 8002d42:	bf00      	nop
 8002d44:	20000100 	.word	0x20000100

08002d48 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d48:	4801      	ldr	r0, [pc, #4]	; (8002d50 <TIM2_IRQHandler+0x8>)
 8002d4a:	f7ff b859 	b.w	8001e00 <HAL_TIM_IRQHandler>
 8002d4e:	bf00      	nop
 8002d50:	20000120 	.word	0x20000120

08002d54 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d54:	4801      	ldr	r0, [pc, #4]	; (8002d5c <USART1_IRQHandler+0x8>)
 8002d56:	f7ff bca9 	b.w	80026ac <HAL_UART_IRQHandler>
 8002d5a:	bf00      	nop
 8002d5c:	20000090 	.word	0x20000090

08002d60 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8002d60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002d62:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d66:	f7fd ffed 	bl	8000d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002d6a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002d72:	f7fd bfe7 	b.w	8000d44 <HAL_GPIO_EXTI_IRQHandler>
 8002d76:	bf00      	nop

08002d78 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d78:	4917      	ldr	r1, [pc, #92]	; (8002dd8 <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002d7c:	4a18      	ldr	r2, [pc, #96]	; (8002de0 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002d7e:	4819      	ldr	r0, [pc, #100]	; (8002de4 <SystemInit+0x6c>)
{
 8002d80:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d82:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 8002d86:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 8002d8a:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 8002d8e:	681c      	ldr	r4, [r3, #0]
 8002d90:	f044 0401 	orr.w	r4, r4, #1
 8002d94:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 8002d96:	685c      	ldr	r4, [r3, #4]
 8002d98:	4022      	ands	r2, r4
 8002d9a:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002da2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002da6:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dae:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002db6:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dba:	f022 020f 	bic.w	r2, r2, #15
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002dc2:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002dc4:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002dca:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 8002dcc:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002dce:	608a      	str	r2, [r1, #8]
#endif
}
 8002dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000ed00 	.word	0xe000ed00
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	f87fc00c 	.word	0xf87fc00c
 8002de4:	ff00fccc 	.word	0xff00fccc

08002de8 <Int2String.part.0>:
	*outputInt = (int16_t)(sign * returnValue);
	return 1;
}

// convert integer var to ASCII string
uint32_t Int2String(char* outputString, int32_t value, uint8_t maxL)
 8002de8:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t digits = 0;

	if (maxL == 0)
		return 0;

	if (value < 0)
 8002dea:	1e0c      	subs	r4, r1, #0
 8002dec:	db2d      	blt.n	8002e4a <Int2String.part.0+0x62>
	int numWritten = 0;
 8002dee:	2600      	movs	r6, #0
		maxL--;
		value = -value;
		numWritten = 1;
	}

	if (value < 10)
 8002df0:	2c09      	cmp	r4, #9
 8002df2:	dd07      	ble.n	8002e04 <Int2String.part.0+0x1c>
		digits = 1;
	else if (value < 100)
 8002df4:	2c63      	cmp	r4, #99	; 0x63
 8002df6:	dc1c      	bgt.n	8002e32 <Int2String.part.0+0x4a>
		digits = 2;
 8002df8:	2702      	movs	r7, #2
	else if (value < 1000000)
		digits = 6;
	else
		digits = 7;

	if (digits > maxL)
 8002dfa:	42ba      	cmp	r2, r7
 8002dfc:	d205      	bcs.n	8002e0a <Int2String.part.0+0x22>
		return 0; // error - not enough space in output string!
 8002dfe:	2000      	movs	r0, #0
		writePosition--;
		numWritten++;
	}

	return numWritten;
}
 8002e00:	bcf0      	pop	{r4, r5, r6, r7}
 8002e02:	4770      	bx	lr
		digits = 1;
 8002e04:	2701      	movs	r7, #1
	if (digits > maxL)
 8002e06:	42ba      	cmp	r2, r7
 8002e08:	d3f9      	bcc.n	8002dfe <Int2String.part.0+0x16>
		outputString[writePosition-1] = (char) ((value % 10) + 48);
 8002e0a:	4d19      	ldr	r5, [pc, #100]	; (8002e70 <Int2String.part.0+0x88>)
 8002e0c:	19c2      	adds	r2, r0, r7
 8002e0e:	fb85 3104 	smull	r3, r1, r5, r4
 8002e12:	17e3      	asrs	r3, r4, #31
 8002e14:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8002e18:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002e1c:	eba4 0141 	sub.w	r1, r4, r1, lsl #1
 8002e20:	3130      	adds	r1, #48	; 0x30
 8002e22:	f802 1d01 	strb.w	r1, [r2, #-1]!
	while (writePosition > 0)
 8002e26:	4282      	cmp	r2, r0
		value /= 10;
 8002e28:	461c      	mov	r4, r3
	while (writePosition > 0)
 8002e2a:	d1f0      	bne.n	8002e0e <Int2String.part.0+0x26>
	return numWritten;
 8002e2c:	19f0      	adds	r0, r6, r7
}
 8002e2e:	bcf0      	pop	{r4, r5, r6, r7}
 8002e30:	4770      	bx	lr
	else if (value < 1000)
 8002e32:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002e36:	db10      	blt.n	8002e5a <Int2String.part.0+0x72>
	else if (value < 10000)
 8002e38:	f242 730f 	movw	r3, #9999	; 0x270f
 8002e3c:	429c      	cmp	r4, r3
 8002e3e:	dd0e      	ble.n	8002e5e <Int2String.part.0+0x76>
	else if (value < 100000)
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <Int2String.part.0+0x8c>)
 8002e42:	429c      	cmp	r4, r3
 8002e44:	dc0d      	bgt.n	8002e62 <Int2String.part.0+0x7a>
		digits = 5;
 8002e46:	2705      	movs	r7, #5
 8002e48:	e7dd      	b.n	8002e06 <Int2String.part.0+0x1e>
		maxL--;
 8002e4a:	3a01      	subs	r2, #1
		outputString[0] = '-';
 8002e4c:	232d      	movs	r3, #45	; 0x2d
		maxL--;
 8002e4e:	b2d2      	uxtb	r2, r2
		value = -value;
 8002e50:	4264      	negs	r4, r4
		outputString[0] = '-';
 8002e52:	f800 3b01 	strb.w	r3, [r0], #1
		numWritten = 1;
 8002e56:	2601      	movs	r6, #1
 8002e58:	e7ca      	b.n	8002df0 <Int2String.part.0+0x8>
		digits = 3;
 8002e5a:	2703      	movs	r7, #3
 8002e5c:	e7d3      	b.n	8002e06 <Int2String.part.0+0x1e>
		digits = 4;
 8002e5e:	2704      	movs	r7, #4
 8002e60:	e7d1      	b.n	8002e06 <Int2String.part.0+0x1e>
	else if (value < 1000000)
 8002e62:	4f05      	ldr	r7, [pc, #20]	; (8002e78 <Int2String.part.0+0x90>)
		digits = 7;
 8002e64:	42bc      	cmp	r4, r7
 8002e66:	bfd4      	ite	le
 8002e68:	2706      	movle	r7, #6
 8002e6a:	2707      	movgt	r7, #7
 8002e6c:	e7cb      	b.n	8002e06 <Int2String.part.0+0x1e>
 8002e6e:	bf00      	nop
 8002e70:	66666667 	.word	0x66666667
 8002e74:	0001869f 	.word	0x0001869f
 8002e78:	000f423f 	.word	0x000f423f

08002e7c <UserInitialise>:
{
 8002e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uartRxFlag = false;
 8002e7e:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8002f60 <UserInitialise+0xe4>
	adcFlag = false;
 8002e82:	4d28      	ldr	r5, [pc, #160]	; (8002f24 <UserInitialise+0xa8>)
	adcchan = 0;
 8002e84:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8002f64 <UserInitialise+0xe8>
	samplectr = 0;
 8002e88:	4827      	ldr	r0, [pc, #156]	; (8002f28 <UserInitialise+0xac>)
	digit = 0;
 8002e8a:	4e28      	ldr	r6, [pc, #160]	; (8002f2c <UserInitialise+0xb0>)
	valveState = 0;
 8002e8c:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <UserInitialise+0xb4>)
	heaterState = 0;
 8002e8e:	4929      	ldr	r1, [pc, #164]	; (8002f34 <UserInitialise+0xb8>)
	scheduleState = 0;
 8002e90:	4c29      	ldr	r4, [pc, #164]	; (8002f38 <UserInitialise+0xbc>)
	tempSetpoint = 60;		// initial value
 8002e92:	4f2a      	ldr	r7, [pc, #168]	; (8002f3c <UserInitialise+0xc0>)
	uartRxFlag = false;
 8002e94:	2200      	movs	r2, #0
	valveState = 0;
 8002e96:	801a      	strh	r2, [r3, #0]
	heaterState = 0;
 8002e98:	800a      	strh	r2, [r1, #0]
	numberMap[0] = 0b00111111;
 8002e9a:	4b29      	ldr	r3, [pc, #164]	; (8002f40 <UserInitialise+0xc4>)
	scheduleState = 0;
 8002e9c:	8022      	strh	r2, [r4, #0]
	digit = 0;
 8002e9e:	7032      	strb	r2, [r6, #0]
	uartRxFlag = false;
 8002ea0:	f88c 2000 	strb.w	r2, [ip]
	adcchan = 0;
 8002ea4:	f88e 2000 	strb.w	r2, [lr]
	adcFlag = false;
 8002ea8:	702a      	strb	r2, [r5, #0]
	samplectr = 0;
 8002eaa:	7002      	strb	r2, [r0, #0]
	irms_accum = 0;
 8002eac:	4d25      	ldr	r5, [pc, #148]	; (8002f44 <UserInitialise+0xc8>)
	vrms_accum = 0;
 8002eae:	4e26      	ldr	r6, [pc, #152]	; (8002f48 <UserInitialise+0xcc>)
	pinsValue[0] = numberMap[1];
 8002eb0:	4926      	ldr	r1, [pc, #152]	; (8002f4c <UserInitialise+0xd0>)
	segements[0] = 0b0001;
 8002eb2:	4c27      	ldr	r4, [pc, #156]	; (8002f50 <UserInitialise+0xd4>)
	tempSetpoint = 60;		// initial value
 8002eb4:	223c      	movs	r2, #60	; 0x3c
	irms_accum = 0;
 8002eb6:	2000      	movs	r0, #0
	tempSetpoint = 60;		// initial value
 8002eb8:	803a      	strh	r2, [r7, #0]
	numberMap[0] = 0b00111111;
 8002eba:	223f      	movs	r2, #63	; 0x3f
	irms_accum = 0;
 8002ebc:	6028      	str	r0, [r5, #0]
	vrms_accum = 0;
 8002ebe:	6030      	str	r0, [r6, #0]
	numberMap[0] = 0b00111111;
 8002ec0:	701a      	strb	r2, [r3, #0]
	numberMap[4] = 0b01100110;
 8002ec2:	2766      	movs	r7, #102	; 0x66
	numberMap[6] = 0b01111101;
 8002ec4:	267d      	movs	r6, #125	; 0x7d
	numberMap[7] = 0b00000111;
 8002ec6:	2207      	movs	r2, #7
	numberMap[9] = 0b01100111;
 8002ec8:	2067      	movs	r0, #103	; 0x67
	segements[0] = 0b0001;
 8002eca:	2501      	movs	r5, #1
	numberMap[4] = 0b01100110;
 8002ecc:	711f      	strb	r7, [r3, #4]
	numberMap[6] = 0b01111101;
 8002ece:	719e      	strb	r6, [r3, #6]
	numberMap[1] = 0b00000110;
 8002ed0:	2706      	movs	r7, #6
	numberMap[2] = 0b01011011;
 8002ed2:	265b      	movs	r6, #91	; 0x5b
	numberMap[7] = 0b00000111;
 8002ed4:	71da      	strb	r2, [r3, #7]
	numberMap[9] = 0b01100111;
 8002ed6:	7258      	strb	r0, [r3, #9]
	numberMap[5] = 0b01101101;
 8002ed8:	226d      	movs	r2, #109	; 0x6d
	numberMap[8] = 0b01111111;
 8002eda:	207f      	movs	r0, #127	; 0x7f
	numberMap[3] = 0b01001111;
 8002edc:	f04f 0e4f 	mov.w	lr, #79	; 0x4f
 8002ee0:	f883 e003 	strb.w	lr, [r3, #3]
	numberMap[1] = 0b00000110;
 8002ee4:	705f      	strb	r7, [r3, #1]
	pinsValue[0] = numberMap[1];
 8002ee6:	700f      	strb	r7, [r1, #0]
	numberMap[2] = 0b01011011;
 8002ee8:	709e      	strb	r6, [r3, #2]
	pinsValue[3] = numberMap[2];
 8002eea:	70ce      	strb	r6, [r1, #3]
	numberMap[5] = 0b01101101;
 8002eec:	715a      	strb	r2, [r3, #5]
	pinsValue[2] = numberMap[5];
 8002eee:	708a      	strb	r2, [r1, #2]
	numberMap[8] = 0b01111111;
 8002ef0:	7218      	strb	r0, [r3, #8]
	pinsValue[1] = numberMap[8];
 8002ef2:	7048      	strb	r0, [r1, #1]
	segements[1] = 0b0010;
 8002ef4:	f04f 0e02 	mov.w	lr, #2
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 8002ef8:	462a      	mov	r2, r5
	segements[2] = 0b0100;
 8002efa:	2704      	movs	r7, #4
	segements[3] = 0b1000;
 8002efc:	2608      	movs	r6, #8
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 8002efe:	4915      	ldr	r1, [pc, #84]	; (8002f54 <UserInitialise+0xd8>)
 8002f00:	4815      	ldr	r0, [pc, #84]	; (8002f58 <UserInitialise+0xdc>)
	segements[1] = 0b0010;
 8002f02:	f884 e001 	strb.w	lr, [r4, #1]
	segements[2] = 0b0100;
 8002f06:	70a7      	strb	r7, [r4, #2]
	segements[3] = 0b1000;
 8002f08:	70e6      	strb	r6, [r4, #3]
	segements[0] = 0b0001;
 8002f0a:	7025      	strb	r5, [r4, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 8002f0c:	f7ff f8d8 	bl	80020c0 <HAL_UART_Receive_IT>
	__HAL_TIM_ENABLE(&htim2);
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <UserInitialise+0xe0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	432a      	orrs	r2, r5
 8002f18:	601a      	str	r2, [r3, #0]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	432a      	orrs	r2, r5
 8002f1e:	60da      	str	r2, [r3, #12]
 8002f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200003a4 	.word	0x200003a4
 8002f28:	200001dc 	.word	0x200001dc
 8002f2c:	20000160 	.word	0x20000160
 8002f30:	2000037a 	.word	0x2000037a
 8002f34:	2000031e 	.word	0x2000031e
 8002f38:	200003a6 	.word	0x200003a6
 8002f3c:	200002a8 	.word	0x200002a8
 8002f40:	20000168 	.word	0x20000168
 8002f44:	2000038c 	.word	0x2000038c
 8002f48:	2000037c 	.word	0x2000037c
 8002f4c:	20000354 	.word	0x20000354
 8002f50:	200001c4 	.word	0x200001c4
 8002f54:	200002b0 	.word	0x200002b0
 8002f58:	20000090 	.word	0x20000090
 8002f5c:	20000120 	.word	0x20000120
 8002f60:	20000388 	.word	0x20000388
 8002f64:	20000352 	.word	0x20000352

08002f68 <StringTime2Int>:
{
 8002f68:	b470      	push	{r4, r5, r6}
	timeL += 1;
 8002f6a:	4c14      	ldr	r4, [pc, #80]	; (8002fbc <StringTime2Int+0x54>)
 8002f6c:	7823      	ldrb	r3, [r4, #0]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	7023      	strb	r3, [r4, #0]
	if (*inputTimeString == ',')
 8002f74:	7802      	ldrb	r2, [r0, #0]
 8002f76:	2a2c      	cmp	r2, #44	; 0x2c
 8002f78:	d01a      	beq.n	8002fb0 <StringTime2Int+0x48>
	while ((*inputTimeString >= '0') && (*inputTimeString <= '9'))
 8002f7a:	3a30      	subs	r2, #48	; 0x30
 8002f7c:	b2d3      	uxtb	r3, r2
 8002f7e:	2b09      	cmp	r3, #9
 8002f80:	d904      	bls.n	8002f8c <StringTime2Int+0x24>
 8002f82:	e018      	b.n	8002fb6 <StringTime2Int+0x4e>
		returnValue += (*inputTimeString - 48);
 8002f84:	eb03 0246 	add.w	r2, r3, r6, lsl #1
		if (returnValue >= 128)
 8002f88:	2a7f      	cmp	r2, #127	; 0x7f
 8002f8a:	dc11      	bgt.n	8002fb0 <StringTime2Int+0x48>
		timeL++;
 8002f8c:	7823      	ldrb	r3, [r4, #0]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	7023      	strb	r3, [r4, #0]
	while ((*inputTimeString >= '0') && (*inputTimeString <= '9'))
 8002f94:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8002f98:	3b30      	subs	r3, #48	; 0x30
 8002f9a:	b2dd      	uxtb	r5, r3
 8002f9c:	2d09      	cmp	r5, #9
		returnValue *= 10;
 8002f9e:	eb02 0682 	add.w	r6, r2, r2, lsl #2
	while ((*inputTimeString >= '0') && (*inputTimeString <= '9'))
 8002fa2:	d9ef      	bls.n	8002f84 <StringTime2Int+0x1c>
 8002fa4:	b2d2      	uxtb	r2, r2
	*outputTimeInt = (int8_t)(returnValue);
 8002fa6:	700a      	strb	r2, [r1, #0]
	return timeL;
 8002fa8:	7820      	ldrb	r0, [r4, #0]
}
 8002faa:	bc70      	pop	{r4, r5, r6}
	return timeL;
 8002fac:	b2c0      	uxtb	r0, r0
}
 8002fae:	4770      	bx	lr
		return 0;
 8002fb0:	2000      	movs	r0, #0
}
 8002fb2:	bc70      	pop	{r4, r5, r6}
 8002fb4:	4770      	bx	lr
	while ((*inputTimeString >= '0') && (*inputTimeString <= '9'))
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	e7f5      	b.n	8002fa6 <StringTime2Int+0x3e>
 8002fba:	bf00      	nop
 8002fbc:	20000161 	.word	0x20000161

08002fc0 <String2Int>:
	if (*inputString == '\0')
 8002fc0:	7802      	ldrb	r2, [r0, #0]
 8002fc2:	2a00      	cmp	r2, #0
 8002fc4:	d034      	beq.n	8003030 <String2Int+0x70>
{
 8002fc6:	b430      	push	{r4, r5}
	if (*inputString == '-')
 8002fc8:	2a2d      	cmp	r2, #45	; 0x2d
 8002fca:	bf08      	it	eq
 8002fcc:	7842      	ldrbeq	r2, [r0, #1]
	while ((*inputString >= '0') && (*inputString <= '9'))
 8002fce:	f1a2 0230 	sub.w	r2, r2, #48	; 0x30
 8002fd2:	b2d3      	uxtb	r3, r2
		sign = -1;
 8002fd4:	bf06      	itte	eq
 8002fd6:	f04f 35ff 	moveq.w	r5, #4294967295
		inputString++;
 8002fda:	3001      	addeq	r0, #1
	int sign = 1;
 8002fdc:	2501      	movne	r5, #1
	while ((*inputString >= '0') && (*inputString <= '9'))
 8002fde:	2b09      	cmp	r3, #9
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	d908      	bls.n	8002ff8 <String2Int+0x38>
 8002fe6:	e01f      	b.n	8003028 <String2Int+0x68>
		if (((sign == 1) && (returnValue >= 32768)) ||
 8002fe8:	1c6a      	adds	r2, r5, #1
 8002fea:	d011      	beq.n	8003010 <String2Int+0x50>
	while ((*inputString >= '0') && (*inputString <= '9'))
 8002fec:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8002ff0:	3a30      	subs	r2, #48	; 0x30
 8002ff2:	b2d4      	uxtb	r4, r2
 8002ff4:	2c09      	cmp	r4, #9
 8002ff6:	d814      	bhi.n	8003022 <String2Int+0x62>
		returnValue *= 10;
 8002ff8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		if (((sign == 1) && (returnValue >= 32768)) ||
 8002ffc:	2d01      	cmp	r5, #1
		returnValue += (*inputString - 48);
 8002ffe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
		if (((sign == 1) && (returnValue >= 32768)) ||
 8003002:	d1f1      	bne.n	8002fe8 <String2Int+0x28>
 8003004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003008:	dbf0      	blt.n	8002fec <String2Int+0x2c>
		return 0;
 800300a:	2000      	movs	r0, #0
}
 800300c:	bc30      	pop	{r4, r5}
 800300e:	4770      	bx	lr
				((sign == -1) && (returnValue >= 32769)))
 8003010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003014:	dcf9      	bgt.n	800300a <String2Int+0x4a>
	while ((*inputString >= '0') && (*inputString <= '9'))
 8003016:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800301a:	3a30      	subs	r2, #48	; 0x30
 800301c:	b2d4      	uxtb	r4, r2
 800301e:	2c09      	cmp	r4, #9
 8003020:	d9ea      	bls.n	8002ff8 <String2Int+0x38>
 8003022:	fb13 f305 	smulbb	r3, r3, r5
 8003026:	b21b      	sxth	r3, r3
	return 1;
 8003028:	2001      	movs	r0, #1
	*outputInt = (int16_t)(sign * returnValue);
 800302a:	800b      	strh	r3, [r1, #0]
}
 800302c:	bc30      	pop	{r4, r5}
 800302e:	4770      	bx	lr
		return 0;
 8003030:	4610      	mov	r0, r2
 8003032:	4770      	bx	lr

08003034 <DecodeCmd>:
{
 8003034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (cmdBuf[1])
 8003038:	4cc5      	ldr	r4, [pc, #788]	; (8003350 <DecodeCmd+0x31c>)
 800303a:	7863      	ldrb	r3, [r4, #1]
 800303c:	3b41      	subs	r3, #65	; 0x41
{
 800303e:	b083      	sub	sp, #12
	switch (cmdBuf[1])
 8003040:	2b0b      	cmp	r3, #11
 8003042:	f200 8090 	bhi.w	8003166 <DecodeCmd+0x132>
 8003046:	e8df f013 	tbh	[pc, r3, lsl #1]
 800304a:	0250      	.short	0x0250
 800304c:	002a000c 	.word	0x002a000c
 8003050:	00430033 	.word	0x00430033
 8003054:	0091004c 	.word	0x0091004c
 8003058:	00ab0257 	.word	0x00ab0257
 800305c:	01c1010f 	.word	0x01c1010f
 8003060:	000c      	.short	0x000c
		String2Int(cmdBuf+3, &valveState);
 8003062:	4cbc      	ldr	r4, [pc, #752]	; (8003354 <DecodeCmd+0x320>)
 8003064:	48bc      	ldr	r0, [pc, #752]	; (8003358 <DecodeCmd+0x324>)
 8003066:	4621      	mov	r1, r4
 8003068:	f7ff ffaa 	bl	8002fc0 <String2Int>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,valveState);
 800306c:	7822      	ldrb	r2, [r4, #0]
 800306e:	48bb      	ldr	r0, [pc, #748]	; (800335c <DecodeCmd+0x328>)
		txBuf[0] = '$';	txBuf[1] = 'B';
 8003070:	4cbb      	ldr	r4, [pc, #748]	; (8003360 <DecodeCmd+0x32c>)
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,valveState);
 8003072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003076:	f7fd fe5f 	bl	8000d38 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 800307a:	48ba      	ldr	r0, [pc, #744]	; (8003364 <DecodeCmd+0x330>)
		txBuf[0] = '$';	txBuf[1] = 'B';
 800307c:	2224      	movs	r2, #36	; 0x24
 800307e:	2742      	movs	r7, #66	; 0x42
 8003080:	7022      	strb	r2, [r4, #0]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8003082:	260d      	movs	r6, #13
 8003084:	250a      	movs	r5, #10
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8003086:	4621      	mov	r1, r4
 8003088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800308c:	2204      	movs	r2, #4
		txBuf[0] = '$';	txBuf[1] = 'B';
 800308e:	7067      	strb	r7, [r4, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8003090:	70a6      	strb	r6, [r4, #2]
 8003092:	70e5      	strb	r5, [r4, #3]
}
 8003094:	b003      	add	sp, #12
 8003096:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 800309a:	f7ff b9cd 	b.w	8002438 <HAL_UART_Transmit>
		String2Int(cmdBuf+3, &scheduleState);//----------------------------------------------------------default values OFF
 800309e:	49b2      	ldr	r1, [pc, #712]	; (8003368 <DecodeCmd+0x334>)
 80030a0:	48ad      	ldr	r0, [pc, #692]	; (8003358 <DecodeCmd+0x324>)
		txBuf[0] = '$';	txBuf[1] = 'C';
 80030a2:	4caf      	ldr	r4, [pc, #700]	; (8003360 <DecodeCmd+0x32c>)
		String2Int(cmdBuf+3, &scheduleState);//----------------------------------------------------------default values OFF
 80030a4:	f7ff ff8c 	bl	8002fc0 <String2Int>
		txBuf[0] = '$';	txBuf[1] = 'C';
 80030a8:	2743      	movs	r7, #67	; 0x43
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 80030aa:	48ae      	ldr	r0, [pc, #696]	; (8003364 <DecodeCmd+0x330>)
		txBuf[0] = '$';	txBuf[1] = 'C';
 80030ac:	2224      	movs	r2, #36	; 0x24
 80030ae:	e7e7      	b.n	8003080 <DecodeCmd+0x4c>
		String2Int(cmdBuf+3, &heaterState);
 80030b0:	4cae      	ldr	r4, [pc, #696]	; (800336c <DecodeCmd+0x338>)
 80030b2:	48a9      	ldr	r0, [pc, #676]	; (8003358 <DecodeCmd+0x324>)
 80030b4:	4621      	mov	r1, r4
 80030b6:	f7ff ff83 	bl	8002fc0 <String2Int>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12,heaterState);
 80030ba:	7822      	ldrb	r2, [r4, #0]
 80030bc:	48a7      	ldr	r0, [pc, #668]	; (800335c <DecodeCmd+0x328>)
		txBuf[0] = '$';	txBuf[1] = 'D';
 80030be:	4ca8      	ldr	r4, [pc, #672]	; (8003360 <DecodeCmd+0x32c>)
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12,heaterState);
 80030c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030c4:	f7fd fe38 	bl	8000d38 <HAL_GPIO_WritePin>
		txBuf[0] = '$';	txBuf[1] = 'D';
 80030c8:	2744      	movs	r7, #68	; 0x44
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 80030ca:	48a6      	ldr	r0, [pc, #664]	; (8003364 <DecodeCmd+0x330>)
		txBuf[0] = '$';	txBuf[1] = 'D';
 80030cc:	2224      	movs	r2, #36	; 0x24
 80030ce:	e7d7      	b.n	8003080 <DecodeCmd+0x4c>
		String2Int(cmdBuf+3, &valveState);
 80030d0:	49a0      	ldr	r1, [pc, #640]	; (8003354 <DecodeCmd+0x320>)
 80030d2:	48a1      	ldr	r0, [pc, #644]	; (8003358 <DecodeCmd+0x324>)
		txBuf[0] = '$';	txBuf[1] = 'E';
 80030d4:	4ca2      	ldr	r4, [pc, #648]	; (8003360 <DecodeCmd+0x32c>)
		String2Int(cmdBuf+3, &valveState);
 80030d6:	f7ff ff73 	bl	8002fc0 <String2Int>
		txBuf[0] = '$';	txBuf[1] = 'E';
 80030da:	2745      	movs	r7, #69	; 0x45
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 80030dc:	48a1      	ldr	r0, [pc, #644]	; (8003364 <DecodeCmd+0x330>)
		txBuf[0] = '$';	txBuf[1] = 'E';
 80030de:	2224      	movs	r2, #36	; 0x24
 80030e0:	e7ce      	b.n	8003080 <DecodeCmd+0x4c>
		String2Int(cmdBuf+3, &tempSetpoint);
 80030e2:	4ea3      	ldr	r6, [pc, #652]	; (8003370 <DecodeCmd+0x33c>)
		txBuf[0] = '$'; txBuf[1] = 'F';	txBuf[2] = '\r'; txBuf[3] = '\n';
 80030e4:	4d9e      	ldr	r5, [pc, #632]	; (8003360 <DecodeCmd+0x32c>)
		String2Int(cmdBuf+3, &tempSetpoint);
 80030e6:	489c      	ldr	r0, [pc, #624]	; (8003358 <DecodeCmd+0x324>)
 80030e8:	4ca2      	ldr	r4, [pc, #648]	; (8003374 <DecodeCmd+0x340>)
 80030ea:	4631      	mov	r1, r6
 80030ec:	f7ff ff68 	bl	8002fc0 <String2Int>
		txBuf[0] = '$'; txBuf[1] = 'F';	txBuf[2] = '\r'; txBuf[3] = '\n';
 80030f0:	2124      	movs	r1, #36	; 0x24
 80030f2:	2346      	movs	r3, #70	; 0x46
 80030f4:	220d      	movs	r2, #13
 80030f6:	7029      	strb	r1, [r5, #0]
 80030f8:	706b      	strb	r3, [r5, #1]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 80030fa:	4629      	mov	r1, r5
 80030fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		txBuf[0] = '$'; txBuf[1] = 'F';	txBuf[2] = '\r'; txBuf[3] = '\n';
 8003100:	70aa      	strb	r2, [r5, #2]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8003102:	4898      	ldr	r0, [pc, #608]	; (8003364 <DecodeCmd+0x330>)
 8003104:	2204      	movs	r2, #4
		txBuf[0] = '$'; txBuf[1] = 'F';	txBuf[2] = '\r'; txBuf[3] = '\n';
 8003106:	270a      	movs	r7, #10
 8003108:	70ef      	strb	r7, [r5, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 800310a:	f7ff f995 	bl	8002438 <HAL_UART_Transmit>
 800310e:	f9b6 1000 	ldrsh.w	r1, [r6]
 8003112:	4620      	mov	r0, r4
 8003114:	2204      	movs	r2, #4
 8003116:	f7ff fe67 	bl	8002de8 <Int2String.part.0>
		while (i < charsL)
 800311a:	f8df c298 	ldr.w	ip, [pc, #664]	; 80033b4 <DecodeCmd+0x380>
 800311e:	f8dc 6000 	ldr.w	r6, [ip]
		charsL = Int2String(tempF, tempSetpoint, 4);
 8003122:	b2c0      	uxtb	r0, r0
		while (i < charsL)
 8003124:	4286      	cmp	r6, r0
 8003126:	da19      	bge.n	800315c <DecodeCmd+0x128>
 8003128:	4d93      	ldr	r5, [pc, #588]	; (8003378 <DecodeCmd+0x344>)
					pinsValue[i] = numberMap[j];
 800312a:	4f94      	ldr	r7, [pc, #592]	; (800337c <DecodeCmd+0x348>)
 800312c:	4435      	add	r5, r6
 800312e:	eb00 0e04 	add.w	lr, r0, r4
 8003132:	4426      	add	r6, r4
			for (j=0; j <10; j++)
 8003134:	2200      	movs	r2, #0
 8003136:	f816 4b01 	ldrb.w	r4, [r6], #1
 800313a:	4611      	mov	r1, r2
				if (tempF[i] == (j+0x30))
 800313c:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8003140:	42a3      	cmp	r3, r4
 8003142:	f102 0201 	add.w	r2, r2, #1
 8003146:	f000 824d 	beq.w	80035e4 <DecodeCmd+0x5b0>
			for (j=0; j <10; j++)
 800314a:	2a0a      	cmp	r2, #10
 800314c:	4611      	mov	r1, r2
 800314e:	d1f5      	bne.n	800313c <DecodeCmd+0x108>
		while (i < charsL)
 8003150:	45b6      	cmp	lr, r6
 8003152:	f105 0501 	add.w	r5, r5, #1
 8003156:	d1ed      	bne.n	8003134 <DecodeCmd+0x100>
 8003158:	4b89      	ldr	r3, [pc, #548]	; (8003380 <DecodeCmd+0x34c>)
 800315a:	6019      	str	r1, [r3, #0]
		g_length = charsL;
 800315c:	4a89      	ldr	r2, [pc, #548]	; (8003384 <DecodeCmd+0x350>)
		i = 0;
 800315e:	2300      	movs	r3, #0
		g_length = charsL;
 8003160:	7010      	strb	r0, [r2, #0]
		i = 0;
 8003162:	f8cc 3000 	str.w	r3, [ip]
}
 8003166:	b003      	add	sp, #12
 8003168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		txBuf[0] = '$';	txBuf[1] = 'G';	txBuf[2] = ',';
 800316c:	4c7c      	ldr	r4, [pc, #496]	; (8003360 <DecodeCmd+0x32c>)
		charsL = Int2String(txBuf+3, tempSetpoint, 4);
 800316e:	4980      	ldr	r1, [pc, #512]	; (8003370 <DecodeCmd+0x33c>)
		txBuf[0] = '$';	txBuf[1] = 'G';	txBuf[2] = ',';
 8003170:	2224      	movs	r2, #36	; 0x24
 8003172:	232c      	movs	r3, #44	; 0x2c
 8003174:	7022      	strb	r2, [r4, #0]
 8003176:	2547      	movs	r5, #71	; 0x47
 8003178:	1ce0      	adds	r0, r4, #3
 800317a:	f9b1 1000 	ldrsh.w	r1, [r1]
 800317e:	7065      	strb	r5, [r4, #1]
 8003180:	2204      	movs	r2, #4
 8003182:	70a3      	strb	r3, [r4, #2]
 8003184:	f7ff fe30 	bl	8002de8 <Int2String.part.0>
		txBuf[3 + charsL] = '\r'; txBuf[4 + charsL] = '\n';
 8003188:	b2c2      	uxtb	r2, r0
 800318a:	18a5      	adds	r5, r4, r2
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL+5, 1000);
 800318c:	4621      	mov	r1, r4
		txBuf[3 + charsL] = '\r'; txBuf[4 + charsL] = '\n';
 800318e:	260d      	movs	r6, #13
 8003190:	240a      	movs	r4, #10
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL+5, 1000);
 8003192:	3205      	adds	r2, #5
 8003194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003198:	4872      	ldr	r0, [pc, #456]	; (8003364 <DecodeCmd+0x330>)
		txBuf[3 + charsL] = '\r'; txBuf[4 + charsL] = '\n';
 800319a:	70ee      	strb	r6, [r5, #3]
 800319c:	712c      	strb	r4, [r5, #4]
 800319e:	e779      	b.n	8003094 <DecodeCmd+0x60>
		getDate = getDateLive;
 80031a0:	4b79      	ldr	r3, [pc, #484]	; (8003388 <DecodeCmd+0x354>)
 80031a2:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80033b8 <DecodeCmd+0x384>
		getTime = getTimeLive;
 80031a6:	4e79      	ldr	r6, [pc, #484]	; (800338c <DecodeCmd+0x358>)
		getDate = getDateLive;
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f8c8 3000 	str.w	r3, [r8]
		getTime = getTimeLive;
 80031ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80031b0:	4f77      	ldr	r7, [pc, #476]	; (8003390 <DecodeCmd+0x35c>)
		txBuf[0] = '$';	txBuf[1] = 'I';
 80031b2:	4c6b      	ldr	r4, [pc, #428]	; (8003360 <DecodeCmd+0x32c>)
		getTime = getTimeLive;
 80031b4:	463d      	mov	r5, r7
 80031b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b8:	6833      	ldr	r3, [r6, #0]
 80031ba:	602b      	str	r3, [r5, #0]
		txBuf[0] = '$';	txBuf[1] = 'I';
 80031bc:	2624      	movs	r6, #36	; 0x24
 80031be:	2249      	movs	r2, #73	; 0x49
		txBuf[4] = '0';
 80031c0:	2330      	movs	r3, #48	; 0x30
 80031c2:	f898 1003 	ldrb.w	r1, [r8, #3]
		txBuf[0] = '$';	txBuf[1] = 'I';
 80031c6:	7026      	strb	r6, [r4, #0]
		txBuf[3] = '2';
 80031c8:	2532      	movs	r5, #50	; 0x32
		txBuf[2] = ',';
 80031ca:	262c      	movs	r6, #44	; 0x2c
		txBuf[0] = '$';	txBuf[1] = 'I';
 80031cc:	7062      	strb	r2, [r4, #1]
 80031ce:	1d60      	adds	r0, r4, #5
 80031d0:	2202      	movs	r2, #2
		txBuf[3] = '2';
 80031d2:	70e5      	strb	r5, [r4, #3]
		txBuf[4] = '0';
 80031d4:	7123      	strb	r3, [r4, #4]
		txBuf[2] = ',';
 80031d6:	70a6      	strb	r6, [r4, #2]
 80031d8:	f7ff fe06 	bl	8002de8 <Int2String.part.0>
		charsL += Int2String(txBuf+charsL, (uint32_t) getDate.Year, 2);
 80031dc:	b2c0      	uxtb	r0, r0
 80031de:	1d43      	adds	r3, r0, #5
		txBuf[charsL] = ','; charsL++;
 80031e0:	3006      	adds	r0, #6
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	b2c5      	uxtb	r5, r0
 80031e6:	1960      	adds	r0, r4, r5
 80031e8:	f898 1001 	ldrb.w	r1, [r8, #1]
 80031ec:	54e6      	strb	r6, [r4, r3]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f7ff fdfa 	bl	8002de8 <Int2String.part.0>
		charsL += Int2String(txBuf+charsL, (uint32_t) getDate.Month, 2);
 80031f4:	182b      	adds	r3, r5, r0
 80031f6:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 80031f8:	1c5d      	adds	r5, r3, #1
 80031fa:	b2ed      	uxtb	r5, r5
 80031fc:	f898 1002 	ldrb.w	r1, [r8, #2]
 8003200:	54e6      	strb	r6, [r4, r3]
 8003202:	1960      	adds	r0, r4, r5
 8003204:	2202      	movs	r2, #2
 8003206:	f7ff fdef 	bl	8002de8 <Int2String.part.0>
		charsL += Int2String(txBuf+charsL, (uint32_t) getDate.Date, 2);
 800320a:	182b      	adds	r3, r5, r0
 800320c:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 800320e:	1c5d      	adds	r5, r3, #1
 8003210:	b2ed      	uxtb	r5, r5
 8003212:	7839      	ldrb	r1, [r7, #0]
 8003214:	54e6      	strb	r6, [r4, r3]
 8003216:	1960      	adds	r0, r4, r5
 8003218:	2202      	movs	r2, #2
 800321a:	f7ff fde5 	bl	8002de8 <Int2String.part.0>
		charsL += Int2String(txBuf+charsL, (uint32_t) getTime.Hours, 2);
 800321e:	182b      	adds	r3, r5, r0
 8003220:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8003222:	1c5d      	adds	r5, r3, #1
 8003224:	b2ed      	uxtb	r5, r5
 8003226:	7879      	ldrb	r1, [r7, #1]
 8003228:	54e6      	strb	r6, [r4, r3]
 800322a:	1960      	adds	r0, r4, r5
 800322c:	2202      	movs	r2, #2
 800322e:	f7ff fddb 	bl	8002de8 <Int2String.part.0>
		charsL += Int2String(txBuf+charsL, (uint32_t) getTime.Minutes, 2);
 8003232:	182b      	adds	r3, r5, r0
 8003234:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8003236:	1c5d      	adds	r5, r3, #1
 8003238:	b2ed      	uxtb	r5, r5
 800323a:	78b9      	ldrb	r1, [r7, #2]
 800323c:	54e6      	strb	r6, [r4, r3]
 800323e:	1960      	adds	r0, r4, r5
 8003240:	2202      	movs	r2, #2
 8003242:	f7ff fdd1 	bl	8002de8 <Int2String.part.0>
		charsL += Int2String(txBuf+charsL, (uint32_t) getTime.Seconds, 2);
 8003246:	4405      	add	r5, r0
 8003248:	b2ed      	uxtb	r5, r5
		txBuf[charsL] = '\r'; charsL++; txBuf[charsL] = '\n'; charsL++;
 800324a:	1c6e      	adds	r6, r5, #1
 800324c:	b2f6      	uxtb	r6, r6
 800324e:	1caa      	adds	r2, r5, #2
 8003250:	f04f 0e0d 	mov.w	lr, #13
 8003254:	270a      	movs	r7, #10
 8003256:	f804 e005 	strb.w	lr, [r4, r5]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL, 1000);
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	4621      	mov	r1, r4
 800325e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003262:	4840      	ldr	r0, [pc, #256]	; (8003364 <DecodeCmd+0x330>)
		txBuf[charsL] = '\r'; charsL++; txBuf[charsL] = '\n'; charsL++;
 8003264:	55a7      	strb	r7, [r4, r6]
 8003266:	e715      	b.n	8003094 <DecodeCmd+0x60>
		String2Int(cmdBuf+3, &heatingWindow);
 8003268:	4e4a      	ldr	r6, [pc, #296]	; (8003394 <DecodeCmd+0x360>)
		timeL = StringTime2Int(cmdBuf+5, &HH_on);
 800326a:	f8df b150 	ldr.w	fp, [pc, #336]	; 80033bc <DecodeCmd+0x388>
		timeL = 0;
 800326e:	4d4a      	ldr	r5, [pc, #296]	; (8003398 <DecodeCmd+0x364>)
		String2Int(cmdBuf+3, &heatingWindow);
 8003270:	4839      	ldr	r0, [pc, #228]	; (8003358 <DecodeCmd+0x324>)
		timeL = StringTime2Int(cmdBuf+5+timeL, &mm_on);
 8003272:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80033c0 <DecodeCmd+0x38c>
		timeL = StringTime2Int(cmdBuf+5+timeL, &ss_on);
 8003276:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80033c4 <DecodeCmd+0x390>
		timeL = StringTime2Int(cmdBuf+5+timeL, &HH_off);
 800327a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 80033c8 <DecodeCmd+0x394>
		timeL = StringTime2Int(cmdBuf+5+timeL, &mm_off);
 800327e:	4f47      	ldr	r7, [pc, #284]	; (800339c <DecodeCmd+0x368>)
		String2Int(cmdBuf+3, &heatingWindow);
 8003280:	4631      	mov	r1, r6
 8003282:	f7ff fe9d 	bl	8002fc0 <String2Int>
		timeL = 0;
 8003286:	2200      	movs	r2, #0
		timeL = StringTime2Int(cmdBuf+5, &HH_on);
 8003288:	4659      	mov	r1, fp
 800328a:	4845      	ldr	r0, [pc, #276]	; (80033a0 <DecodeCmd+0x36c>)
		timeL = 0;
 800328c:	702a      	strb	r2, [r5, #0]
		timeL = StringTime2Int(cmdBuf+5, &HH_on);
 800328e:	f7ff fe6b 	bl	8002f68 <StringTime2Int>
 8003292:	7028      	strb	r0, [r5, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &mm_on);
 8003294:	7828      	ldrb	r0, [r5, #0]
 8003296:	3005      	adds	r0, #5
 8003298:	4420      	add	r0, r4
 800329a:	4651      	mov	r1, sl
 800329c:	f7ff fe64 	bl	8002f68 <StringTime2Int>
 80032a0:	7028      	strb	r0, [r5, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &ss_on);
 80032a2:	7828      	ldrb	r0, [r5, #0]
 80032a4:	3005      	adds	r0, #5
 80032a6:	4420      	add	r0, r4
 80032a8:	4649      	mov	r1, r9
 80032aa:	f7ff fe5d 	bl	8002f68 <StringTime2Int>
 80032ae:	7028      	strb	r0, [r5, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &HH_off);
 80032b0:	7828      	ldrb	r0, [r5, #0]
 80032b2:	3005      	adds	r0, #5
 80032b4:	4420      	add	r0, r4
 80032b6:	4641      	mov	r1, r8
 80032b8:	f7ff fe56 	bl	8002f68 <StringTime2Int>
 80032bc:	7028      	strb	r0, [r5, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &mm_off);
 80032be:	7828      	ldrb	r0, [r5, #0]
 80032c0:	3005      	adds	r0, #5
 80032c2:	4639      	mov	r1, r7
 80032c4:	4420      	add	r0, r4
 80032c6:	f7ff fe4f 	bl	8002f68 <StringTime2Int>
 80032ca:	7028      	strb	r0, [r5, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &ss_off);
 80032cc:	7828      	ldrb	r0, [r5, #0]
 80032ce:	4935      	ldr	r1, [pc, #212]	; (80033a4 <DecodeCmd+0x370>)
 80032d0:	3005      	adds	r0, #5
 80032d2:	4420      	add	r0, r4
 80032d4:	f7ff fe48 	bl	8002f68 <StringTime2Int>
		onTime[heatingWindow-1].Hours = HH_on;
 80032d8:	f9b6 2000 	ldrsh.w	r2, [r6]
 80032dc:	4b32      	ldr	r3, [pc, #200]	; (80033a8 <DecodeCmd+0x374>)
		timeL = StringTime2Int(cmdBuf+5+timeL, &ss_off);
 80032de:	7028      	strb	r0, [r5, #0]
		onTime[heatingWindow-1].Hours = HH_on;
 80032e0:	3a01      	subs	r2, #1
 80032e2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80032e6:	0092      	lsls	r2, r2, #2
 80032e8:	189d      	adds	r5, r3, r2
 80032ea:	f89b 1000 	ldrb.w	r1, [fp]
		onTime[heatingWindow-1].Minutes = mm_on;
 80032ee:	f89a e000 	ldrb.w	lr, [sl]
		onTime[heatingWindow-1].Seconds = ss_on;
 80032f2:	f899 4000 	ldrb.w	r4, [r9]
		onTime[heatingWindow-1].Hours = HH_on;
 80032f6:	5499      	strb	r1, [r3, r2]
		onTime[heatingWindow-1].Minutes = mm_on;
 80032f8:	f885 e001 	strb.w	lr, [r5, #1]
		HAL_RTC_SetTime(&hrtc, &onTime[heatingWindow-1], RTC_FORMAT_BCD);
 80032fc:	4629      	mov	r1, r5
		onTime[heatingWindow-1].Seconds = ss_on;
 80032fe:	70ac      	strb	r4, [r5, #2]
		HAL_RTC_SetTime(&hrtc, &onTime[heatingWindow-1], RTC_FORMAT_BCD);
 8003300:	2201      	movs	r2, #1
 8003302:	482a      	ldr	r0, [pc, #168]	; (80033ac <DecodeCmd+0x378>)
		offTime[heatingWindow-1].Hours = HH_off;
 8003304:	4d2a      	ldr	r5, [pc, #168]	; (80033b0 <DecodeCmd+0x37c>)
		HAL_RTC_SetTime(&hrtc, &onTime[heatingWindow-1], RTC_FORMAT_BCD);
 8003306:	f7fe fadd 	bl	80018c4 <HAL_RTC_SetTime>
		offTime[heatingWindow-1].Hours = HH_off;
 800330a:	f9b6 3000 	ldrsh.w	r3, [r6]
		offTime[heatingWindow-1].Seconds = ss_off;
 800330e:	4a25      	ldr	r2, [pc, #148]	; (80033a4 <DecodeCmd+0x370>)
		offTime[heatingWindow-1].Hours = HH_off;
 8003310:	f898 e000 	ldrb.w	lr, [r8]
		offTime[heatingWindow-1].Seconds = ss_off;
 8003314:	7816      	ldrb	r6, [r2, #0]
		offTime[heatingWindow-1].Minutes = mm_off;
 8003316:	783f      	ldrb	r7, [r7, #0]
		HAL_RTC_SetTime(&hrtc, &offTime[heatingWindow-1], RTC_FORMAT_BCD);
 8003318:	4824      	ldr	r0, [pc, #144]	; (80033ac <DecodeCmd+0x378>)
		offTime[heatingWindow-1].Hours = HH_off;
 800331a:	3b01      	subs	r3, #1
 800331c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	18ec      	adds	r4, r5, r3
 8003324:	f805 e003 	strb.w	lr, [r5, r3]
		HAL_RTC_SetTime(&hrtc, &offTime[heatingWindow-1], RTC_FORMAT_BCD);
 8003328:	4621      	mov	r1, r4
		offTime[heatingWindow-1].Minutes = mm_off;
 800332a:	7067      	strb	r7, [r4, #1]
		offTime[heatingWindow-1].Seconds = ss_off;
 800332c:	70a6      	strb	r6, [r4, #2]
		HAL_RTC_SetTime(&hrtc, &offTime[heatingWindow-1], RTC_FORMAT_BCD);
 800332e:	2201      	movs	r2, #1
		txBuf[0] = '$';	txBuf[1] = 'J';
 8003330:	4c0b      	ldr	r4, [pc, #44]	; (8003360 <DecodeCmd+0x32c>)
		HAL_RTC_SetTime(&hrtc, &offTime[heatingWindow-1], RTC_FORMAT_BCD);
 8003332:	f7fe fac7 	bl	80018c4 <HAL_RTC_SetTime>
		txBuf[0] = '$';	txBuf[1] = 'J';
 8003336:	f04f 0e24 	mov.w	lr, #36	; 0x24
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 800333a:	480a      	ldr	r0, [pc, #40]	; (8003364 <DecodeCmd+0x330>)
		txBuf[0] = '$';	txBuf[1] = 'J';
 800333c:	f884 e000 	strb.w	lr, [r4]
 8003340:	274a      	movs	r7, #74	; 0x4a
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8003342:	260d      	movs	r6, #13
 8003344:	250a      	movs	r5, #10
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8003346:	4621      	mov	r1, r4
 8003348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800334c:	2204      	movs	r2, #4
 800334e:	e69e      	b.n	800308e <DecodeCmd+0x5a>
 8003350:	20000320 	.word	0x20000320
 8003354:	2000037a 	.word	0x2000037a
 8003358:	20000323 	.word	0x20000323
 800335c:	48000800 	.word	0x48000800
 8003360:	20000220 	.word	0x20000220
 8003364:	20000090 	.word	0x20000090
 8003368:	200003a6 	.word	0x200003a6
 800336c:	2000031e 	.word	0x2000031e
 8003370:	200002a8 	.word	0x200002a8
 8003374:	20000374 	.word	0x20000374
 8003378:	20000354 	.word	0x20000354
 800337c:	20000168 	.word	0x20000168
 8003380:	20000030 	.word	0x20000030
 8003384:	20000024 	.word	0x20000024
 8003388:	200003a8 	.word	0x200003a8
 800338c:	200001c8 	.word	0x200001c8
 8003390:	2000035c 	.word	0x2000035c
 8003394:	20000394 	.word	0x20000394
 8003398:	20000161 	.word	0x20000161
 800339c:	20000379 	.word	0x20000379
 80033a0:	20000325 	.word	0x20000325
 80033a4:	200002b1 	.word	0x200002b1
 80033a8:	200001e4 	.word	0x200001e4
 80033ac:	20000100 	.word	0x20000100
 80033b0:	20000174 	.word	0x20000174
 80033b4:	20000028 	.word	0x20000028
 80033b8:	200001bc 	.word	0x200001bc
 80033bc:	200001c0 	.word	0x200001c0
 80033c0:	200002b2 	.word	0x200002b2
 80033c4:	200003a0 	.word	0x200003a0
 80033c8:	20000359 	.word	0x20000359
		txBuf[0] = '$'; txBuf[1] = 'K'; txBuf[2] = ',';
 80033cc:	4ca2      	ldr	r4, [pc, #648]	; (8003658 <DecodeCmd+0x624>)
		charsL += Int2String(txBuf+charsL, irms, 10);
 80033ce:	4ba3      	ldr	r3, [pc, #652]	; (800365c <DecodeCmd+0x628>)
	scale = (temp-500)/10;
 80033d0:	4fa3      	ldr	r7, [pc, #652]	; (8003660 <DecodeCmd+0x62c>)
 80033d2:	6819      	ldr	r1, [r3, #0]
		txBuf[0] = '$'; txBuf[1] = 'K'; txBuf[2] = ',';
 80033d4:	262c      	movs	r6, #44	; 0x2c
 80033d6:	234b      	movs	r3, #75	; 0x4b
 80033d8:	2524      	movs	r5, #36	; 0x24
 80033da:	220a      	movs	r2, #10
 80033dc:	1ce0      	adds	r0, r4, #3
 80033de:	7025      	strb	r5, [r4, #0]
 80033e0:	7063      	strb	r3, [r4, #1]
 80033e2:	70a6      	strb	r6, [r4, #2]
 80033e4:	f7ff fd00 	bl	8002de8 <Int2String.part.0>
		charsL += Int2String(txBuf+charsL, irms, 10);
 80033e8:	b2c0      	uxtb	r0, r0
 80033ea:	1cc3      	adds	r3, r0, #3
		charsL += Int2String(txBuf+charsL, vrms, 10);
 80033ec:	4a9d      	ldr	r2, [pc, #628]	; (8003664 <DecodeCmd+0x630>)
		txBuf[charsL] = ','; charsL++;
 80033ee:	3004      	adds	r0, #4
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	b2c5      	uxtb	r5, r0
 80033f4:	6811      	ldr	r1, [r2, #0]
 80033f6:	54e6      	strb	r6, [r4, r3]
 80033f8:	1960      	adds	r0, r4, r5
 80033fa:	220a      	movs	r2, #10
 80033fc:	f7ff fcf4 	bl	8002de8 <Int2String.part.0>
		charsL += Int2String(txBuf+charsL, TempConv(ambientT), 10);    // temp ambient
 8003400:	4b99      	ldr	r3, [pc, #612]	; (8003668 <DecodeCmd+0x634>)
	temp = ((100*tempVal)>>7)+((100*tempVal)>>12);
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003408:	fb08 f303 	mul.w	r3, r8, r3
		charsL += Int2String(txBuf+charsL, vrms, 10);
 800340c:	4405      	add	r5, r0
	temp = ((100*tempVal)>>7)+((100*tempVal)>>12);
 800340e:	0b19      	lsrs	r1, r3, #12
		charsL += Int2String(txBuf+charsL, vrms, 10);
 8003410:	b2ed      	uxtb	r5, r5
	temp = ((100*tempVal)>>7)+((100*tempVal)>>12);
 8003412:	eb01 11d3 	add.w	r1, r1, r3, lsr #7
	scale = (temp-500)/10;
 8003416:	f5a1 71fa 	sub.w	r1, r1, #500	; 0x1f4
		txBuf[charsL] = ','; charsL++;
 800341a:	1c6b      	adds	r3, r5, #1
 800341c:	fa5f f983 	uxtb.w	r9, r3
	scale = (temp-500)/10;
 8003420:	fba7 3101 	umull	r3, r1, r7, r1
 8003424:	08c9      	lsrs	r1, r1, #3
 8003426:	220a      	movs	r2, #10
 8003428:	eb04 0009 	add.w	r0, r4, r9
		txBuf[charsL] = ','; charsL++;
 800342c:	5566      	strb	r6, [r4, r5]
 800342e:	f7ff fcdb 	bl	8002de8 <Int2String.part.0>
		charsL += Int2String(txBuf+charsL, TempConv(waterT), 10);    // temp water
 8003432:	4b8e      	ldr	r3, [pc, #568]	; (800366c <DecodeCmd+0x638>)
	temp = ((100*tempVal)>>7)+((100*tempVal)>>12);
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	fb08 f202 	mul.w	r2, r8, r2
 800343a:	0b11      	lsrs	r1, r2, #12
		charsL += Int2String(txBuf+charsL, TempConv(ambientT), 10);    // temp ambient
 800343c:	eb09 0300 	add.w	r3, r9, r0
 8003440:	b2db      	uxtb	r3, r3
	temp = ((100*tempVal)>>7)+((100*tempVal)>>12);
 8003442:	eb01 11d2 	add.w	r1, r1, r2, lsr #7
		txBuf[charsL] = ','; charsL++;
 8003446:	1c5d      	adds	r5, r3, #1
	scale = (temp-500)/10;
 8003448:	f5a1 71fa 	sub.w	r1, r1, #500	; 0x1f4
		txBuf[charsL] = ','; charsL++;
 800344c:	b2ed      	uxtb	r5, r5
	scale = (temp-500)/10;
 800344e:	fba7 2101 	umull	r2, r1, r7, r1
 8003452:	08c9      	lsrs	r1, r1, #3
 8003454:	1960      	adds	r0, r4, r5
 8003456:	220a      	movs	r2, #10
		txBuf[charsL] = ','; charsL++;
 8003458:	54e6      	strb	r6, [r4, r3]
 800345a:	f7ff fcc5 	bl	8002de8 <Int2String.part.0>
		charsL += Int2String(txBuf+charsL, TempConv(waterT), 10);    // temp water
 800345e:	182b      	adds	r3, r5, r0
 8003460:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8003462:	1c5d      	adds	r5, r3, #1
		charsL += Int2String(txBuf+charsL, totalFlow, 10);    // flow totalFlow
 8003464:	4a82      	ldr	r2, [pc, #520]	; (8003670 <DecodeCmd+0x63c>)
		txBuf[charsL] = ','; charsL++;
 8003466:	54e6      	strb	r6, [r4, r3]
 8003468:	b2ed      	uxtb	r5, r5
 800346a:	6811      	ldr	r1, [r2, #0]
 800346c:	1960      	adds	r0, r4, r5
 800346e:	220a      	movs	r2, #10
 8003470:	f7ff fcba 	bl	8002de8 <Int2String.part.0>
		if (heaterState == 0U)
 8003474:	4a7f      	ldr	r2, [pc, #508]	; (8003674 <DecodeCmd+0x640>)
		charsL += Int2String(txBuf+charsL, totalFlow, 10);    // flow totalFlow
 8003476:	182b      	adds	r3, r5, r0
 8003478:	b2db      	uxtb	r3, r3
		if (heaterState == 0U)
 800347a:	f9b2 2000 	ldrsh.w	r2, [r2]
		txBuf[charsL] = ','; charsL++;
 800347e:	54e6      	strb	r6, [r4, r3]
 8003480:	1c58      	adds	r0, r3, #1
 8003482:	b2c0      	uxtb	r0, r0
		if (heaterState == 0U)
 8003484:	2a00      	cmp	r2, #0
 8003486:	f000 80b7 	beq.w	80035f8 <DecodeCmd+0x5c4>
		else if(heaterState==1U)
 800348a:	2a01      	cmp	r2, #1
 800348c:	f000 80d7 	beq.w	800363e <DecodeCmd+0x60a>
		if(valveState==0U)
 8003490:	4b79      	ldr	r3, [pc, #484]	; (8003678 <DecodeCmd+0x644>)
 8003492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003496:	2b00      	cmp	r3, #0
 8003498:	f040 80bd 	bne.w	8003616 <DecodeCmd+0x5e2>
			txBuf[charsL] = 'C'; charsL++;
 800349c:	1c47      	adds	r7, r0, #1
			txBuf[charsL] = 'L'; charsL++;
 800349e:	1c86      	adds	r6, r0, #2
 80034a0:	b2ff      	uxtb	r7, r7
			txBuf[charsL] = 'O'; charsL++;
 80034a2:	1cc5      	adds	r5, r0, #3
			txBuf[charsL] = 'S'; charsL++;
 80034a4:	1d01      	adds	r1, r0, #4
			txBuf[charsL] = 'E'; charsL++;
 80034a6:	1d42      	adds	r2, r0, #5
			txBuf[charsL] = 'O'; charsL++;
 80034a8:	b2f6      	uxtb	r6, r6
			txBuf[charsL] = 'C'; charsL++;
 80034aa:	2343      	movs	r3, #67	; 0x43
			txBuf[charsL] = 'L'; charsL++;
 80034ac:	f04f 0e4c 	mov.w	lr, #76	; 0x4c
			txBuf[charsL] = 'C'; charsL++;
 80034b0:	5423      	strb	r3, [r4, r0]
			txBuf[charsL] = 'S'; charsL++;
 80034b2:	b2ed      	uxtb	r5, r5
			txBuf[charsL] = 'L'; charsL++;
 80034b4:	f804 e007 	strb.w	lr, [r4, r7]
			txBuf[charsL] = 'E'; charsL++;
 80034b8:	b2c9      	uxtb	r1, r1
			txBuf[charsL] = 'O'; charsL++;
 80034ba:	274f      	movs	r7, #79	; 0x4f
			txBuf[charsL] = 'D'; charsL++;
 80034bc:	b2d2      	uxtb	r2, r2
			txBuf[charsL] = 'O'; charsL++;
 80034be:	55a7      	strb	r7, [r4, r6]
			txBuf[charsL] = 'D'; charsL++;
 80034c0:	1d83      	adds	r3, r0, #6
			txBuf[charsL] = 'E'; charsL++;
 80034c2:	2745      	movs	r7, #69	; 0x45
			txBuf[charsL] = 'S'; charsL++;
 80034c4:	2053      	movs	r0, #83	; 0x53
			txBuf[charsL] = 'D'; charsL++;
 80034c6:	2644      	movs	r6, #68	; 0x44
			txBuf[charsL] = 'S'; charsL++;
 80034c8:	5560      	strb	r0, [r4, r5]
			txBuf[charsL] = 'E'; charsL++;
 80034ca:	5467      	strb	r7, [r4, r1]
			txBuf[charsL] = 'D'; charsL++;
 80034cc:	54a6      	strb	r6, [r4, r2]
 80034ce:	b2d8      	uxtb	r0, r3
		txBuf[charsL] = '\r'; charsL++; txBuf[charsL] = '\n'; charsL++;
 80034d0:	1c45      	adds	r5, r0, #1
 80034d2:	b2ed      	uxtb	r5, r5
 80034d4:	1c82      	adds	r2, r0, #2
 80034d6:	270d      	movs	r7, #13
 80034d8:	260a      	movs	r6, #10
 80034da:	5427      	strb	r7, [r4, r0]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL, 1000);
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034e2:	495d      	ldr	r1, [pc, #372]	; (8003658 <DecodeCmd+0x624>)
 80034e4:	4865      	ldr	r0, [pc, #404]	; (800367c <DecodeCmd+0x648>)
		txBuf[charsL] = '\r'; charsL++; txBuf[charsL] = '\n'; charsL++;
 80034e6:	5566      	strb	r6, [r4, r5]
 80034e8:	e5d4      	b.n	8003094 <DecodeCmd+0x60>
		HAL_UART_Transmit(&huart1, (uint8_t*)txStudentNo, 13, 1000);
 80034ea:	4b65      	ldr	r3, [pc, #404]	; (8003680 <DecodeCmd+0x64c>)
 80034ec:	4863      	ldr	r0, [pc, #396]	; (800367c <DecodeCmd+0x648>)
 80034ee:	6819      	ldr	r1, [r3, #0]
 80034f0:	220d      	movs	r2, #13
 80034f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034f6:	e5cd      	b.n	8003094 <DecodeCmd+0x60>
		timeL = StringTime2Int(cmdBuf+5, &YYYY_set);
 80034f8:	4b62      	ldr	r3, [pc, #392]	; (8003684 <DecodeCmd+0x650>)
		timeL = 0;
 80034fa:	4d63      	ldr	r5, [pc, #396]	; (8003688 <DecodeCmd+0x654>)
		timeL = StringTime2Int(cmdBuf+5, &YYYY_set);
 80034fc:	4863      	ldr	r0, [pc, #396]	; (800368c <DecodeCmd+0x658>)
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	4619      	mov	r1, r3
		timeL = 0;
 8003502:	2200      	movs	r2, #0
 8003504:	702a      	strb	r2, [r5, #0]
		timeL = StringTime2Int(cmdBuf+5, &YYYY_set);
 8003506:	f7ff fd2f 	bl	8002f68 <StringTime2Int>
 800350a:	7028      	strb	r0, [r5, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &MM_set);
 800350c:	7828      	ldrb	r0, [r5, #0]
 800350e:	f8df b194 	ldr.w	fp, [pc, #404]	; 80036a4 <DecodeCmd+0x670>
		timeL = StringTime2Int(cmdBuf+5+timeL, &DD_set);
 8003512:	f8df a194 	ldr.w	sl, [pc, #404]	; 80036a8 <DecodeCmd+0x674>
		timeL = StringTime2Int(cmdBuf+5+timeL, &HH_set);
 8003516:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80036ac <DecodeCmd+0x678>
		timeL = StringTime2Int(cmdBuf+5+timeL, &mm_set);
 800351a:	f8df 8194 	ldr.w	r8, [pc, #404]	; 80036b0 <DecodeCmd+0x67c>
		timeL = StringTime2Int(cmdBuf+5+timeL, &ss_set);
 800351e:	4f5c      	ldr	r7, [pc, #368]	; (8003690 <DecodeCmd+0x65c>)
		__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8003520:	4e5c      	ldr	r6, [pc, #368]	; (8003694 <DecodeCmd+0x660>)
		timeL = StringTime2Int(cmdBuf+5+timeL, &MM_set);
 8003522:	3005      	adds	r0, #5
 8003524:	4420      	add	r0, r4
 8003526:	4659      	mov	r1, fp
 8003528:	f7ff fd1e 	bl	8002f68 <StringTime2Int>
 800352c:	7028      	strb	r0, [r5, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &DD_set);
 800352e:	7828      	ldrb	r0, [r5, #0]
 8003530:	3005      	adds	r0, #5
 8003532:	4420      	add	r0, r4
 8003534:	4651      	mov	r1, sl
 8003536:	f7ff fd17 	bl	8002f68 <StringTime2Int>
 800353a:	7028      	strb	r0, [r5, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &HH_set);
 800353c:	7828      	ldrb	r0, [r5, #0]
 800353e:	3005      	adds	r0, #5
 8003540:	4649      	mov	r1, r9
 8003542:	4420      	add	r0, r4
 8003544:	f7ff fd10 	bl	8002f68 <StringTime2Int>
 8003548:	7028      	strb	r0, [r5, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &mm_set);
 800354a:	7828      	ldrb	r0, [r5, #0]
 800354c:	3005      	adds	r0, #5
 800354e:	4420      	add	r0, r4
 8003550:	4641      	mov	r1, r8
 8003552:	f7ff fd09 	bl	8002f68 <StringTime2Int>
 8003556:	7028      	strb	r0, [r5, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &ss_set);
 8003558:	7828      	ldrb	r0, [r5, #0]
 800355a:	3005      	adds	r0, #5
 800355c:	4639      	mov	r1, r7
 800355e:	4420      	add	r0, r4
 8003560:	f7ff fd02 	bl	8002f68 <StringTime2Int>
		setDate.Year = YYYY_set;
 8003564:	9b01      	ldr	r3, [sp, #4]
 8003566:	4c4c      	ldr	r4, [pc, #304]	; (8003698 <DecodeCmd+0x664>)
		timeL = StringTime2Int(cmdBuf+5+timeL, &ss_set);
 8003568:	7028      	strb	r0, [r5, #0]
		__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 800356a:	6832      	ldr	r2, [r6, #0]
		setDate.Year = YYYY_set;
 800356c:	7818      	ldrb	r0, [r3, #0]
 800356e:	70e0      	strb	r0, [r4, #3]
		__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8003570:	20ca      	movs	r0, #202	; 0xca
		setTime.Hours = HH_set;
 8003572:	4d4a      	ldr	r5, [pc, #296]	; (800369c <DecodeCmd+0x668>)
		__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8003574:	6250      	str	r0, [r2, #36]	; 0x24
 8003576:	2053      	movs	r0, #83	; 0x53
		setDate.Date = DD_set;
 8003578:	f89a e000 	ldrb.w	lr, [sl]
		setDate.Month = MM_set;
 800357c:	f89b c000 	ldrb.w	ip, [fp]
		setTime.Seconds = ss_set;
 8003580:	783b      	ldrb	r3, [r7, #0]
		setTime.Minutes = mm_set;
 8003582:	f898 1000 	ldrb.w	r1, [r8]
		__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8003586:	6250      	str	r0, [r2, #36]	; 0x24
		setTime.Hours = HH_set;
 8003588:	f899 9000 	ldrb.w	r9, [r9]
		setDate.Date = DD_set;
 800358c:	f884 e002 	strb.w	lr, [r4, #2]
		halStatus = RTC_EnterInitMode(&hrtc); // Enter init mode
 8003590:	4630      	mov	r0, r6
		setDate.Month = MM_set;
 8003592:	f884 c001 	strb.w	ip, [r4, #1]
		setTime.Minutes = mm_set;
 8003596:	7069      	strb	r1, [r5, #1]
		setTime.Seconds = ss_set;
 8003598:	70ab      	strb	r3, [r5, #2]
		setTime.Hours = HH_set;
 800359a:	f885 9000 	strb.w	r9, [r5]
		halStatus = RTC_EnterInitMode(&hrtc); // Enter init mode
 800359e:	f7fe f91f 	bl	80017e0 <RTC_EnterInitMode>
 80035a2:	4f3f      	ldr	r7, [pc, #252]	; (80036a0 <DecodeCmd+0x66c>)
 80035a4:	4603      	mov	r3, r0
		halStatus = HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BCD);
 80035a6:	4629      	mov	r1, r5
 80035a8:	4630      	mov	r0, r6
 80035aa:	2201      	movs	r2, #1
		halStatus = RTC_EnterInitMode(&hrtc); // Enter init mode
 80035ac:	703b      	strb	r3, [r7, #0]
		halStatus = HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BCD);
 80035ae:	f7fe f989 	bl	80018c4 <HAL_RTC_SetTime>
		halStatus = HAL_RTC_SetDate(&hrtc, &setDate, RTC_FORMAT_BCD);
 80035b2:	4621      	mov	r1, r4
		halStatus = HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BCD);
 80035b4:	4603      	mov	r3, r0
		halStatus = HAL_RTC_SetDate(&hrtc, &setDate, RTC_FORMAT_BCD);
 80035b6:	2201      	movs	r2, #1
 80035b8:	4630      	mov	r0, r6
		halStatus = HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BCD);
 80035ba:	703b      	strb	r3, [r7, #0]
		halStatus = HAL_RTC_SetDate(&hrtc, &setDate, RTC_FORMAT_BCD);
 80035bc:	f7fe fa22 	bl	8001a04 <HAL_RTC_SetDate>
		txBuf[0] = '$';	txBuf[1] = 'H';
 80035c0:	4c25      	ldr	r4, [pc, #148]	; (8003658 <DecodeCmd+0x624>)
		__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80035c2:	6833      	ldr	r3, [r6, #0]
		halStatus = HAL_RTC_SetDate(&hrtc, &setDate, RTC_FORMAT_BCD);
 80035c4:	7038      	strb	r0, [r7, #0]
		__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80035c6:	22ff      	movs	r2, #255	; 0xff
		txBuf[0] = '$';	txBuf[1] = 'H';
 80035c8:	f04f 0e24 	mov.w	lr, #36	; 0x24
		__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24
		txBuf[0] = '$';	txBuf[1] = 'H';
 80035ce:	2748      	movs	r7, #72	; 0x48
		txBuf[2] = '\r'; txBuf[3] = '\n';
 80035d0:	260d      	movs	r6, #13
 80035d2:	250a      	movs	r5, #10
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 80035d4:	4621      	mov	r1, r4
 80035d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035da:	2204      	movs	r2, #4
 80035dc:	4827      	ldr	r0, [pc, #156]	; (800367c <DecodeCmd+0x648>)
		txBuf[0] = '$';	txBuf[1] = 'H';
 80035de:	f884 e000 	strb.w	lr, [r4]
 80035e2:	e554      	b.n	800308e <DecodeCmd+0x5a>
					pinsValue[i] = numberMap[j];
 80035e4:	5c7b      	ldrb	r3, [r7, r1]
 80035e6:	702b      	strb	r3, [r5, #0]
		while (i < charsL)
 80035e8:	45b6      	cmp	lr, r6
					pinsValue[i] = numberMap[j];
 80035ea:	f04f 010b 	mov.w	r1, #11
 80035ee:	f105 0501 	add.w	r5, r5, #1
		while (i < charsL)
 80035f2:	f47f ad9f 	bne.w	8003134 <DecodeCmd+0x100>
 80035f6:	e5af      	b.n	8003158 <DecodeCmd+0x124>
			txBuf[charsL] = 'O'; charsL++;
 80035f8:	1c9d      	adds	r5, r3, #2
			txBuf[charsL] = 'F'; charsL++;
 80035fa:	1cd9      	adds	r1, r3, #3
			txBuf[charsL] = 'F'; charsL++;
 80035fc:	1d1a      	adds	r2, r3, #4
			txBuf[charsL] = 'O'; charsL++;
 80035fe:	274f      	movs	r7, #79	; 0x4f
			txBuf[charsL] = 'F'; charsL++;
 8003600:	b2ed      	uxtb	r5, r5
			txBuf[charsL] = 'F'; charsL++;
 8003602:	b2c9      	uxtb	r1, r1
			txBuf[charsL] = ','; charsL++;
 8003604:	b2d2      	uxtb	r2, r2
			txBuf[charsL] = 'O'; charsL++;
 8003606:	5427      	strb	r7, [r4, r0]
			txBuf[charsL] = ','; charsL++;
 8003608:	3305      	adds	r3, #5
			txBuf[charsL] = 'F'; charsL++;
 800360a:	2746      	movs	r7, #70	; 0x46
 800360c:	5567      	strb	r7, [r4, r5]
			txBuf[charsL] = ','; charsL++;
 800360e:	b2d8      	uxtb	r0, r3
			txBuf[charsL] = 'F'; charsL++;
 8003610:	5467      	strb	r7, [r4, r1]
			txBuf[charsL] = ','; charsL++;
 8003612:	54a6      	strb	r6, [r4, r2]
 8003614:	e73c      	b.n	8003490 <DecodeCmd+0x45c>
		else if(valveState==1U)
 8003616:	2b01      	cmp	r3, #1
 8003618:	f47f af5a 	bne.w	80034d0 <DecodeCmd+0x49c>
			txBuf[charsL] = 'O'; charsL++;
 800361c:	1c43      	adds	r3, r0, #1
			txBuf[charsL] = 'P'; charsL++;
 800361e:	1c81      	adds	r1, r0, #2
			txBuf[charsL] = 'E'; charsL++;
 8003620:	1cc2      	adds	r2, r0, #3
			txBuf[charsL] = 'P'; charsL++;
 8003622:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'O'; charsL++;
 8003624:	254f      	movs	r5, #79	; 0x4f
			txBuf[charsL] = 'E'; charsL++;
 8003626:	b2c9      	uxtb	r1, r1
			txBuf[charsL] = 'N'; charsL++;
 8003628:	b2d2      	uxtb	r2, r2
			txBuf[charsL] = 'P'; charsL++;
 800362a:	2750      	movs	r7, #80	; 0x50
			txBuf[charsL] = 'O'; charsL++;
 800362c:	5425      	strb	r5, [r4, r0]
			txBuf[charsL] = 'E'; charsL++;
 800362e:	2645      	movs	r6, #69	; 0x45
			txBuf[charsL] = 'P'; charsL++;
 8003630:	54e7      	strb	r7, [r4, r3]
			txBuf[charsL] = 'N'; charsL++;
 8003632:	254e      	movs	r5, #78	; 0x4e
 8003634:	1d03      	adds	r3, r0, #4
			txBuf[charsL] = 'E'; charsL++;
 8003636:	5466      	strb	r6, [r4, r1]
			txBuf[charsL] = 'N'; charsL++;
 8003638:	b2d8      	uxtb	r0, r3
 800363a:	54a5      	strb	r5, [r4, r2]
 800363c:	e748      	b.n	80034d0 <DecodeCmd+0x49c>
			txBuf[charsL] = 'O'; charsL++;
 800363e:	1c99      	adds	r1, r3, #2
			txBuf[charsL] = 'N'; charsL++;
 8003640:	1cda      	adds	r2, r3, #3
 8003642:	b2c9      	uxtb	r1, r1
			txBuf[charsL] = ','; charsL++;
 8003644:	b2d2      	uxtb	r2, r2
			txBuf[charsL] = 'O'; charsL++;
 8003646:	274f      	movs	r7, #79	; 0x4f
			txBuf[charsL] = 'N'; charsL++;
 8003648:	254e      	movs	r5, #78	; 0x4e
			txBuf[charsL] = ','; charsL++;
 800364a:	3304      	adds	r3, #4
			txBuf[charsL] = 'O'; charsL++;
 800364c:	5427      	strb	r7, [r4, r0]
			txBuf[charsL] = 'N'; charsL++;
 800364e:	5465      	strb	r5, [r4, r1]
			txBuf[charsL] = ','; charsL++;
 8003650:	b2d8      	uxtb	r0, r3
 8003652:	54a6      	strb	r6, [r4, r2]
 8003654:	e71c      	b.n	8003490 <DecodeCmd+0x45c>
 8003656:	bf00      	nop
 8003658:	20000220 	.word	0x20000220
 800365c:	20000318 	.word	0x20000318
 8003660:	cccccccd 	.word	0xcccccccd
 8003664:	20000390 	.word	0x20000390
 8003668:	20000164 	.word	0x20000164
 800366c:	2000039c 	.word	0x2000039c
 8003670:	20000398 	.word	0x20000398
 8003674:	2000031e 	.word	0x2000031e
 8003678:	2000037a 	.word	0x2000037a
 800367c:	20000090 	.word	0x20000090
 8003680:	20000004 	.word	0x20000004
 8003684:	20000358 	.word	0x20000358
 8003688:	20000161 	.word	0x20000161
 800368c:	20000325 	.word	0x20000325
 8003690:	200001b8 	.word	0x200001b8
 8003694:	20000100 	.word	0x20000100
 8003698:	200002ac 	.word	0x200002ac
 800369c:	200002b4 	.word	0x200002b4
 80036a0:	200001ba 	.word	0x200001ba
 80036a4:	200001b1 	.word	0x200001b1
 80036a8:	200002aa 	.word	0x200002aa
 80036ac:	200001c1 	.word	0x200001c1
 80036b0:	20000370 	.word	0x20000370

080036b4 <writeToPins>:
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET); //f
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET); //g
}

void writeToPins(uint8_t segments[], uint8_t pins[], int segmentsL)
{
 80036b4:	b570      	push	{r4, r5, r6, lr}

	if(in == segmentsL)
 80036b6:	4d73      	ldr	r5, [pc, #460]	; (8003884 <writeToPins+0x1d0>)
 80036b8:	782b      	ldrb	r3, [r5, #0]
 80036ba:	4293      	cmp	r3, r2
{
 80036bc:	460c      	mov	r4, r1
	if(in == segmentsL)
 80036be:	f000 80db 	beq.w	8003878 <writeToPins+0x1c4>
	{
		in = 0;
	}
	else
	{
		in++;
 80036c2:	3301      	adds	r3, #1
 80036c4:	b2da      	uxtb	r2, r3
	}

	switch(in)
 80036c6:	1e53      	subs	r3, r2, #1
		in++;
 80036c8:	702a      	strb	r2, [r5, #0]
	switch(in)
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d82a      	bhi.n	8003724 <writeToPins+0x70>
 80036ce:	e8df f003 	tbb	[pc, r3]
 80036d2:	97b5      	.short	0x97b5
 80036d4:	0279      	.short	0x0279
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segements[2] >> 3) & 0b00000001)); //4
	}
	break;
	case 4:
	{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segements[3] >> 0) & 0b00000001)); //1
 80036d6:	4e6c      	ldr	r6, [pc, #432]	; (8003888 <writeToPins+0x1d4>)
 80036d8:	486c      	ldr	r0, [pc, #432]	; (800388c <writeToPins+0x1d8>)
 80036da:	78f2      	ldrb	r2, [r6, #3]
 80036dc:	43d2      	mvns	r2, r2
 80036de:	f002 0201 	and.w	r2, r2, #1
 80036e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036e6:	f7fd fb27 	bl	8000d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segements[3] >> 1) & 0b00000001)); //2
 80036ea:	78f2      	ldrb	r2, [r6, #3]
 80036ec:	4867      	ldr	r0, [pc, #412]	; (800388c <writeToPins+0x1d8>)
 80036ee:	ea6f 0252 	mvn.w	r2, r2, lsr #1
 80036f2:	f002 0201 	and.w	r2, r2, #1
 80036f6:	2110      	movs	r1, #16
 80036f8:	f7fd fb1e 	bl	8000d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segements[3] >> 2) & 0b00000001)); //3
 80036fc:	78f2      	ldrb	r2, [r6, #3]
 80036fe:	4863      	ldr	r0, [pc, #396]	; (800388c <writeToPins+0x1d8>)
 8003700:	ea6f 0292 	mvn.w	r2, r2, lsr #2
 8003704:	f002 0201 	and.w	r2, r2, #1
 8003708:	2120      	movs	r1, #32
 800370a:	f7fd fb15 	bl	8000d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segements[3] >> 3) & 0b00000001)); //4
 800370e:	78f2      	ldrb	r2, [r6, #3]
 8003710:	485e      	ldr	r0, [pc, #376]	; (800388c <writeToPins+0x1d8>)
 8003712:	ea6f 02d2 	mvn.w	r2, r2, lsr #3
 8003716:	f002 0201 	and.w	r2, r2, #1
 800371a:	2108      	movs	r1, #8
 800371c:	f7fd fb0c 	bl	8000d38 <HAL_GPIO_WritePin>
 8003720:	782b      	ldrb	r3, [r5, #0]
 8003722:	3b01      	subs	r3, #1
 8003724:	461a      	mov	r2, r3
	}
	break;
	}

	i = (int)(in - 1);
 8003726:	4d5a      	ldr	r5, [pc, #360]	; (8003890 <writeToPins+0x1dc>)
 8003728:	602b      	str	r3, [r5, #0]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, (~(pins[i] >> 0) & 0b00000001)); //a
 800372a:	5ca2      	ldrb	r2, [r4, r2]
 800372c:	43d2      	mvns	r2, r2
 800372e:	f002 0201 	and.w	r2, r2, #1
 8003732:	2120      	movs	r1, #32
 8003734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003738:	f7fd fafe 	bl	8000d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6, (~(pins[i] >> 1) & 0b00000001)); //b
 800373c:	682b      	ldr	r3, [r5, #0]
 800373e:	5ce2      	ldrb	r2, [r4, r3]
 8003740:	ea6f 0252 	mvn.w	r2, r2, lsr #1
 8003744:	f002 0201 	and.w	r2, r2, #1
 8003748:	2140      	movs	r1, #64	; 0x40
 800374a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800374e:	f7fd faf3 	bl	8000d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, (~(pins[i] >> 2) & 0b00000001)); //c
 8003752:	682b      	ldr	r3, [r5, #0]
 8003754:	5ce2      	ldrb	r2, [r4, r3]
 8003756:	ea6f 0292 	mvn.w	r2, r2, lsr #2
 800375a:	f002 0201 	and.w	r2, r2, #1
 800375e:	2180      	movs	r1, #128	; 0x80
 8003760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003764:	f7fd fae8 	bl	8000d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6, (~(pins[i] >> 3) & 0b00000001)); //d
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	4848      	ldr	r0, [pc, #288]	; (800388c <writeToPins+0x1d8>)
 800376c:	5ce2      	ldrb	r2, [r4, r3]
 800376e:	ea6f 02d2 	mvn.w	r2, r2, lsr #3
 8003772:	f002 0201 	and.w	r2, r2, #1
 8003776:	2140      	movs	r1, #64	; 0x40
 8003778:	f7fd fade 	bl	8000d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7, (~(pins[i] >> 4) & 0b00000001)); //e
 800377c:	682b      	ldr	r3, [r5, #0]
 800377e:	4845      	ldr	r0, [pc, #276]	; (8003894 <writeToPins+0x1e0>)
 8003780:	5ce2      	ldrb	r2, [r4, r3]
 8003782:	ea6f 1212 	mvn.w	r2, r2, lsr #4
 8003786:	f002 0201 	and.w	r2, r2, #1
 800378a:	2180      	movs	r1, #128	; 0x80
 800378c:	f7fd fad4 	bl	8000d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, (~(pins[i] >> 5) & 0b00000001)); //f
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	5ce2      	ldrb	r2, [r4, r3]
 8003794:	ea6f 1252 	mvn.w	r2, r2, lsr #5
 8003798:	f002 0201 	and.w	r2, r2, #1
 800379c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a4:	f7fd fac8 	bl	8000d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, (~(pins[i] >> 6) & 0b00000001)); //g
 80037a8:	682b      	ldr	r3, [r5, #0]
 80037aa:	5ce2      	ldrb	r2, [r4, r3]
 80037ac:	ea6f 1292 	mvn.w	r2, r2, lsr #6
 80037b0:	f002 0201 	and.w	r2, r2, #1
 80037b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

}
 80037bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, (~(pins[i] >> 6) & 0b00000001)); //g
 80037c0:	f7fd baba 	b.w	8000d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segements[2] >> 0) & 0b00000001)); //1
 80037c4:	4e30      	ldr	r6, [pc, #192]	; (8003888 <writeToPins+0x1d4>)
 80037c6:	4831      	ldr	r0, [pc, #196]	; (800388c <writeToPins+0x1d8>)
 80037c8:	78b2      	ldrb	r2, [r6, #2]
 80037ca:	43d2      	mvns	r2, r2
 80037cc:	f002 0201 	and.w	r2, r2, #1
 80037d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037d4:	f7fd fab0 	bl	8000d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segements[2] >> 1) & 0b00000001)); //2
 80037d8:	78b2      	ldrb	r2, [r6, #2]
 80037da:	482c      	ldr	r0, [pc, #176]	; (800388c <writeToPins+0x1d8>)
 80037dc:	ea6f 0252 	mvn.w	r2, r2, lsr #1
 80037e0:	f002 0201 	and.w	r2, r2, #1
 80037e4:	2110      	movs	r1, #16
 80037e6:	f7fd faa7 	bl	8000d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segements[2] >> 2) & 0b00000001)); //3
 80037ea:	78b2      	ldrb	r2, [r6, #2]
 80037ec:	4827      	ldr	r0, [pc, #156]	; (800388c <writeToPins+0x1d8>)
 80037ee:	ea6f 0292 	mvn.w	r2, r2, lsr #2
 80037f2:	f002 0201 	and.w	r2, r2, #1
 80037f6:	2120      	movs	r1, #32
 80037f8:	f7fd fa9e 	bl	8000d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segements[2] >> 3) & 0b00000001)); //4
 80037fc:	78b2      	ldrb	r2, [r6, #2]
 80037fe:	e787      	b.n	8003710 <writeToPins+0x5c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segements[1] >> 0) & 0b00000001)); //1
 8003800:	4e21      	ldr	r6, [pc, #132]	; (8003888 <writeToPins+0x1d4>)
 8003802:	4822      	ldr	r0, [pc, #136]	; (800388c <writeToPins+0x1d8>)
 8003804:	7872      	ldrb	r2, [r6, #1]
 8003806:	43d2      	mvns	r2, r2
 8003808:	f002 0201 	and.w	r2, r2, #1
 800380c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003810:	f7fd fa92 	bl	8000d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segements[1] >> 1) & 0b00000001)); //2
 8003814:	7872      	ldrb	r2, [r6, #1]
 8003816:	481d      	ldr	r0, [pc, #116]	; (800388c <writeToPins+0x1d8>)
 8003818:	ea6f 0252 	mvn.w	r2, r2, lsr #1
 800381c:	f002 0201 	and.w	r2, r2, #1
 8003820:	2110      	movs	r1, #16
 8003822:	f7fd fa89 	bl	8000d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segements[1] >> 2) & 0b00000001)); //3
 8003826:	7872      	ldrb	r2, [r6, #1]
 8003828:	4818      	ldr	r0, [pc, #96]	; (800388c <writeToPins+0x1d8>)
 800382a:	ea6f 0292 	mvn.w	r2, r2, lsr #2
 800382e:	f002 0201 	and.w	r2, r2, #1
 8003832:	2120      	movs	r1, #32
 8003834:	f7fd fa80 	bl	8000d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segements[1] >> 3) & 0b00000001)); //4
 8003838:	7872      	ldrb	r2, [r6, #1]
 800383a:	e769      	b.n	8003710 <writeToPins+0x5c>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segements[0] >> 0) & 0b00000001)); //1
 800383c:	4e12      	ldr	r6, [pc, #72]	; (8003888 <writeToPins+0x1d4>)
 800383e:	4813      	ldr	r0, [pc, #76]	; (800388c <writeToPins+0x1d8>)
 8003840:	7832      	ldrb	r2, [r6, #0]
 8003842:	43d2      	mvns	r2, r2
 8003844:	f002 0201 	and.w	r2, r2, #1
 8003848:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800384c:	f7fd fa74 	bl	8000d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segements[0] >> 1) & 0b00000001)); //2
 8003850:	7832      	ldrb	r2, [r6, #0]
 8003852:	480e      	ldr	r0, [pc, #56]	; (800388c <writeToPins+0x1d8>)
 8003854:	ea6f 0252 	mvn.w	r2, r2, lsr #1
 8003858:	f002 0201 	and.w	r2, r2, #1
 800385c:	2110      	movs	r1, #16
 800385e:	f7fd fa6b 	bl	8000d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segements[0] >> 2) & 0b00000001)); //3
 8003862:	7832      	ldrb	r2, [r6, #0]
 8003864:	4809      	ldr	r0, [pc, #36]	; (800388c <writeToPins+0x1d8>)
 8003866:	ea6f 0292 	mvn.w	r2, r2, lsr #2
 800386a:	f002 0201 	and.w	r2, r2, #1
 800386e:	2120      	movs	r1, #32
 8003870:	f7fd fa62 	bl	8000d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segements[0] >> 3) & 0b00000001)); //4
 8003874:	7832      	ldrb	r2, [r6, #0]
 8003876:	e74b      	b.n	8003710 <writeToPins+0x5c>
		in = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	f04f 32ff 	mov.w	r2, #4294967295
 800387e:	702b      	strb	r3, [r5, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	e750      	b.n	8003726 <writeToPins+0x72>
 8003884:	2000002c 	.word	0x2000002c
 8003888:	200001c4 	.word	0x200001c4
 800388c:	48000400 	.word	0x48000400
 8003890:	20000028 	.word	0x20000028
 8003894:	48000800 	.word	0x48000800

08003898 <User>:
{
 8003898:	b570      	push	{r4, r5, r6, lr}
	if (uartRxFlag)
 800389a:	4c7a      	ldr	r4, [pc, #488]	; (8003a84 <User+0x1ec>)
 800389c:	7823      	ldrb	r3, [r4, #0]
{
 800389e:	b086      	sub	sp, #24
	if (uartRxFlag)
 80038a0:	b1ab      	cbz	r3, 80038ce <User+0x36>
		if (uartRxChar == '$')
 80038a2:	4b79      	ldr	r3, [pc, #484]	; (8003a88 <User+0x1f0>)
 80038a4:	4d79      	ldr	r5, [pc, #484]	; (8003a8c <User+0x1f4>)
 80038a6:	781a      	ldrb	r2, [r3, #0]
 80038a8:	2a24      	cmp	r2, #36	; 0x24
 80038aa:	f000 80a0 	beq.w	80039ee <User+0x156>
		if (cmdBufPos < cmdBufL)
 80038ae:	882b      	ldrh	r3, [r5, #0]
 80038b0:	2b31      	cmp	r3, #49	; 0x31
 80038b2:	f240 80c5 	bls.w	8003a40 <User+0x1a8>
 80038b6:	4976      	ldr	r1, [pc, #472]	; (8003a90 <User+0x1f8>)
		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 80038b8:	780a      	ldrb	r2, [r1, #0]
 80038ba:	2a24      	cmp	r2, #36	; 0x24
 80038bc:	f000 80ad 	beq.w	8003a1a <User+0x182>
		uartRxFlag = false;  // clear the flag - the 'receive character' event has been handled.
 80038c0:	2300      	movs	r3, #0
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 80038c2:	2201      	movs	r2, #1
 80038c4:	4970      	ldr	r1, [pc, #448]	; (8003a88 <User+0x1f0>)
 80038c6:	4873      	ldr	r0, [pc, #460]	; (8003a94 <User+0x1fc>)
		uartRxFlag = false;  // clear the flag - the 'receive character' event has been handled.
 80038c8:	7023      	strb	r3, [r4, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 80038ca:	f7fe fbf9 	bl	80020c0 <HAL_UART_Receive_IT>
	if(adcFlag == 1U)
 80038ce:	4d72      	ldr	r5, [pc, #456]	; (8003a98 <User+0x200>)
 80038d0:	782b      	ldrb	r3, [r5, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d035      	beq.n	8003942 <User+0xaa>
		if (adcchan == 0)
 80038d6:	4c71      	ldr	r4, [pc, #452]	; (8003a9c <User+0x204>)
 80038d8:	7823      	ldrb	r3, [r4, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d07d      	beq.n	80039da <User+0x142>
		else if (adcchan == 1)
 80038de:	2b01      	cmp	r3, #1
 80038e0:	f000 80b7 	beq.w	8003a52 <User+0x1ba>
		else if (adcchan == 2)
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	f000 80be 	beq.w	8003a66 <User+0x1ce>
		else if (adcchan == 3)
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	f000 80c2 	beq.w	8003a74 <User+0x1dc>
		adcchan++;
 80038f0:	3301      	adds	r3, #1
 80038f2:	b2db      	uxtb	r3, r3
		if (adcchan >= 4)
 80038f4:	2b03      	cmp	r3, #3
		adcchan++;
 80038f6:	7023      	strb	r3, [r4, #0]
		if (adcchan >= 4)
 80038f8:	d909      	bls.n	800390e <User+0x76>
			samplectr++;
 80038fa:	4a69      	ldr	r2, [pc, #420]	; (8003aa0 <User+0x208>)
 80038fc:	7813      	ldrb	r3, [r2, #0]
 80038fe:	3301      	adds	r3, #1
 8003900:	b2db      	uxtb	r3, r3
			adcchan = 0;
 8003902:	2100      	movs	r1, #0
			if (samplectr >= RMS_WINDOW)
 8003904:	2b27      	cmp	r3, #39	; 0x27
			adcchan = 0;
 8003906:	7021      	strb	r1, [r4, #0]
			if (samplectr >= RMS_WINDOW)
 8003908:	d97b      	bls.n	8003a02 <User+0x16a>
				samplectr = 0;
 800390a:	7011      	strb	r1, [r2, #0]
 800390c:	e008      	b.n	8003920 <User+0x88>
		switch (adcchan)
 800390e:	2b02      	cmp	r3, #2
 8003910:	f000 8093 	beq.w	8003a3a <User+0x1a2>
 8003914:	2b03      	cmp	r3, #3
 8003916:	f000 8099 	beq.w	8003a4c <User+0x1b4>
 800391a:	2b01      	cmp	r3, #1
 800391c:	f000 8093 	beq.w	8003a46 <User+0x1ae>
		case 0: chdef.Channel = ADC_CHANNEL_12; break;  //V				//PB1
 8003920:	230c      	movs	r3, #12
 8003922:	9300      	str	r3, [sp, #0]
		chdef.SingleDiff = ADC_SINGLE_ENDED;
 8003924:	2400      	movs	r4, #0
		chdef.Rank = 1;
 8003926:	2301      	movs	r3, #1
		HAL_ADC_ConfigChannel(&hadc1, &chdef);
 8003928:	4669      	mov	r1, sp
 800392a:	485e      	ldr	r0, [pc, #376]	; (8003aa4 <User+0x20c>)
		chdef.Rank = 1;
 800392c:	9301      	str	r3, [sp, #4]
		chdef.SingleDiff = ADC_SINGLE_ENDED;
 800392e:	9403      	str	r4, [sp, #12]
		chdef.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003930:	9402      	str	r4, [sp, #8]
		chdef.OffsetNumber = ADC_OFFSET_NONE;
 8003932:	9404      	str	r4, [sp, #16]
		chdef.Offset = 0;
 8003934:	9405      	str	r4, [sp, #20]
		HAL_ADC_ConfigChannel(&hadc1, &chdef);
 8003936:	f7fc fe69 	bl	800060c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 800393a:	485a      	ldr	r0, [pc, #360]	; (8003aa4 <User+0x20c>)
 800393c:	f7fc fdf8 	bl	8000530 <HAL_ADC_Start>
		adcFlag = 0;
 8003940:	702c      	strb	r4, [r5, #0]
	if (flowHighFlag == 1)
 8003942:	4b59      	ldr	r3, [pc, #356]	; (8003aa8 <User+0x210>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	b17b      	cbz	r3, 8003968 <User+0xd0>
		if (firstHighFlag == 1)
 8003948:	4958      	ldr	r1, [pc, #352]	; (8003aac <User+0x214>)
 800394a:	780b      	ldrb	r3, [r1, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d13b      	bne.n	80039c8 <User+0x130>
 8003950:	4a57      	ldr	r2, [pc, #348]	; (8003ab0 <User+0x218>)
		if (ms5Flag == 1)
 8003952:	7813      	ldrb	r3, [r2, #0]
 8003954:	b143      	cbz	r3, 8003968 <User+0xd0>
			flowPulse++;
 8003956:	4957      	ldr	r1, [pc, #348]	; (8003ab4 <User+0x21c>)
 8003958:	780b      	ldrb	r3, [r1, #0]
 800395a:	3301      	adds	r3, #1
 800395c:	b2db      	uxtb	r3, r3
			ms5Flag = 0;
 800395e:	2000      	movs	r0, #0
			if (flowPulse == 1)
 8003960:	2b01      	cmp	r3, #1
			flowPulse++;
 8003962:	700b      	strb	r3, [r1, #0]
			ms5Flag = 0;
 8003964:	7010      	strb	r0, [r2, #0]
			if (flowPulse == 1)
 8003966:	d04e      	beq.n	8003a06 <User+0x16e>
	uint32_t tick = HAL_GetTick();
 8003968:	f7fc fc5e 	bl	8000228 <HAL_GetTick>
	if (tick != lasttick)
 800396c:	4b52      	ldr	r3, [pc, #328]	; (8003ab8 <User+0x220>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4290      	cmp	r0, r2
 8003972:	d00e      	beq.n	8003992 <User+0xfa>
		ms5Counter++;
 8003974:	4a51      	ldr	r2, [pc, #324]	; (8003abc <User+0x224>)
		lasttick = tick;
 8003976:	6018      	str	r0, [r3, #0]
		ms5Counter++;
 8003978:	7813      	ldrb	r3, [r2, #0]
 800397a:	3301      	adds	r3, #1
 800397c:	b2db      	uxtb	r3, r3
 800397e:	7013      	strb	r3, [r2, #0]
		if (ms5Counter >= 5)
 8003980:	7813      	ldrb	r3, [r2, #0]
 8003982:	2b04      	cmp	r3, #4
 8003984:	d81a      	bhi.n	80039bc <User+0x124>
		writeToPins(segements, pinsValue, g_length);
 8003986:	4b4e      	ldr	r3, [pc, #312]	; (8003ac0 <User+0x228>)
 8003988:	494e      	ldr	r1, [pc, #312]	; (8003ac4 <User+0x22c>)
 800398a:	781a      	ldrb	r2, [r3, #0]
 800398c:	484e      	ldr	r0, [pc, #312]	; (8003ac8 <User+0x230>)
 800398e:	f7ff fe91 	bl	80036b4 <writeToPins>
	if (rtcSecFlag == 1) //------------1 second period
 8003992:	4b4e      	ldr	r3, [pc, #312]	; (8003acc <User+0x234>)
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	b17a      	cbz	r2, 80039b8 <User+0x120>
		halStatus = HAL_RTC_GetTime(&hrtc, &getTimeLive, RTC_FORMAT_BCD);
 8003998:	2201      	movs	r2, #1
 800399a:	494d      	ldr	r1, [pc, #308]	; (8003ad0 <User+0x238>)
 800399c:	484d      	ldr	r0, [pc, #308]	; (8003ad4 <User+0x23c>)
 800399e:	4c4e      	ldr	r4, [pc, #312]	; (8003ad8 <User+0x240>)
		rtcSecFlag = 0;
 80039a0:	2500      	movs	r5, #0
 80039a2:	701d      	strb	r5, [r3, #0]
		halStatus = HAL_RTC_GetTime(&hrtc, &getTimeLive, RTC_FORMAT_BCD);
 80039a4:	f7fd fe9c 	bl	80016e0 <HAL_RTC_GetTime>
		halStatus = HAL_RTC_GetDate(&hrtc, &getDateLive, RTC_FORMAT_BCD);
 80039a8:	2201      	movs	r2, #1
		halStatus = HAL_RTC_GetTime(&hrtc, &getTimeLive, RTC_FORMAT_BCD);
 80039aa:	4603      	mov	r3, r0
		halStatus = HAL_RTC_GetDate(&hrtc, &getDateLive, RTC_FORMAT_BCD);
 80039ac:	494b      	ldr	r1, [pc, #300]	; (8003adc <User+0x244>)
 80039ae:	4849      	ldr	r0, [pc, #292]	; (8003ad4 <User+0x23c>)
		halStatus = HAL_RTC_GetTime(&hrtc, &getTimeLive, RTC_FORMAT_BCD);
 80039b0:	7023      	strb	r3, [r4, #0]
		halStatus = HAL_RTC_GetDate(&hrtc, &getDateLive, RTC_FORMAT_BCD);
 80039b2:	f7fd fecb 	bl	800174c <HAL_RTC_GetDate>
 80039b6:	7020      	strb	r0, [r4, #0]
}
 80039b8:	b006      	add	sp, #24
 80039ba:	bd70      	pop	{r4, r5, r6, pc}
			ms5Flag = 1;
 80039bc:	4b3c      	ldr	r3, [pc, #240]	; (8003ab0 <User+0x218>)
			ms5Counter = 0;
 80039be:	2000      	movs	r0, #0
			ms5Flag = 1;
 80039c0:	2101      	movs	r1, #1
			ms5Counter = 0;
 80039c2:	7010      	strb	r0, [r2, #0]
			ms5Flag = 1;
 80039c4:	7019      	strb	r1, [r3, #0]
 80039c6:	e7de      	b.n	8003986 <User+0xee>
			ms5Counter = 0;
 80039c8:	483c      	ldr	r0, [pc, #240]	; (8003abc <User+0x224>)
			flowPulse = 0;
 80039ca:	4c3a      	ldr	r4, [pc, #232]	; (8003ab4 <User+0x21c>)
			ms5Flag = 0;
 80039cc:	4a38      	ldr	r2, [pc, #224]	; (8003ab0 <User+0x218>)
			firstHighFlag = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	700b      	strb	r3, [r1, #0]
			flowPulse = 0;
 80039d2:	7023      	strb	r3, [r4, #0]
			ms5Counter = 0;
 80039d4:	7003      	strb	r3, [r0, #0]
			ms5Flag = 0;
 80039d6:	7013      	strb	r3, [r2, #0]
 80039d8:	e7bb      	b.n	8003952 <User+0xba>
			vsample[samplectr] = HAL_ADC_GetValue(&hadc1);
 80039da:	4b31      	ldr	r3, [pc, #196]	; (8003aa0 <User+0x208>)
 80039dc:	4831      	ldr	r0, [pc, #196]	; (8003aa4 <User+0x20c>)
 80039de:	781e      	ldrb	r6, [r3, #0]
 80039e0:	f7fc fe10 	bl	8000604 <HAL_ADC_GetValue>
 80039e4:	4a3e      	ldr	r2, [pc, #248]	; (8003ae0 <User+0x248>)
 80039e6:	7823      	ldrb	r3, [r4, #0]
 80039e8:	f822 0016 	strh.w	r0, [r2, r6, lsl #1]
 80039ec:	e780      	b.n	80038f0 <User+0x58>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2001      	movs	r0, #1
			cmdBuf[cmdBufPos++] = uartRxChar;
 80039f2:	4927      	ldr	r1, [pc, #156]	; (8003a90 <User+0x1f8>)
 80039f4:	8028      	strh	r0, [r5, #0]
		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 80039f6:	2803      	cmp	r0, #3
			cmdBuf[cmdBufPos++] = uartRxChar;
 80039f8:	54ca      	strb	r2, [r1, r3]
		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 80039fa:	f67f af61 	bls.w	80038c0 <User+0x28>
 80039fe:	4603      	mov	r3, r0
 8003a00:	e75a      	b.n	80038b8 <User+0x20>
			samplectr++;
 8003a02:	7013      	strb	r3, [r2, #0]
 8003a04:	e78c      	b.n	8003920 <User+0x88>
				flowCounter++;
 8003a06:	4937      	ldr	r1, [pc, #220]	; (8003ae4 <User+0x24c>)
				totalFlow = 100*flowCounter;
 8003a08:	4837      	ldr	r0, [pc, #220]	; (8003ae8 <User+0x250>)
				flowCounter++;
 8003a0a:	680b      	ldr	r3, [r1, #0]
				totalFlow = 100*flowCounter;
 8003a0c:	2264      	movs	r2, #100	; 0x64
				flowCounter++;
 8003a0e:	3301      	adds	r3, #1
				totalFlow = 100*flowCounter;
 8003a10:	fb02 f203 	mul.w	r2, r2, r3
				flowCounter++;
 8003a14:	600b      	str	r3, [r1, #0]
				totalFlow = 100*flowCounter;
 8003a16:	6002      	str	r2, [r0, #0]
 8003a18:	e7a6      	b.n	8003968 <User+0xd0>
		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 8003a1a:	440b      	add	r3, r1
 8003a1c:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8003a20:	2a0d      	cmp	r2, #13
 8003a22:	f47f af4d 	bne.w	80038c0 <User+0x28>
 8003a26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8003a2a:	2b0a      	cmp	r3, #10
 8003a2c:	f47f af48 	bne.w	80038c0 <User+0x28>
			DecodeCmd();
 8003a30:	f7ff fb00 	bl	8003034 <DecodeCmd>
			cmdBufPos = 0;	// clear buffer
 8003a34:	2300      	movs	r3, #0
 8003a36:	802b      	strh	r3, [r5, #0]
 8003a38:	e742      	b.n	80038c0 <User+0x28>
		case 2: chdef.Channel = ADC_CHANNEL_8; break; //temp ambient	//PC2
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	e771      	b.n	8003924 <User+0x8c>
 8003a40:	1c58      	adds	r0, r3, #1
 8003a42:	b280      	uxth	r0, r0
 8003a44:	e7d5      	b.n	80039f2 <User+0x15a>
		case 1: chdef.Channel = ADC_CHANNEL_13; break;  //I				//PB13
 8003a46:	230d      	movs	r3, #13
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	e76b      	b.n	8003924 <User+0x8c>
		case 3: chdef.Channel = ADC_CHANNEL_9; break; //temp water		//PC3
 8003a4c:	2309      	movs	r3, #9
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	e768      	b.n	8003924 <User+0x8c>
			isample[samplectr] = HAL_ADC_GetValue(&hadc1);
 8003a52:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <User+0x208>)
 8003a54:	4813      	ldr	r0, [pc, #76]	; (8003aa4 <User+0x20c>)
 8003a56:	781e      	ldrb	r6, [r3, #0]
 8003a58:	f7fc fdd4 	bl	8000604 <HAL_ADC_GetValue>
 8003a5c:	4a23      	ldr	r2, [pc, #140]	; (8003aec <User+0x254>)
 8003a5e:	7823      	ldrb	r3, [r4, #0]
 8003a60:	f822 0016 	strh.w	r0, [r2, r6, lsl #1]
 8003a64:	e744      	b.n	80038f0 <User+0x58>
			ambientT = HAL_ADC_GetValue(&hadc1);
 8003a66:	480f      	ldr	r0, [pc, #60]	; (8003aa4 <User+0x20c>)
 8003a68:	f7fc fdcc 	bl	8000604 <HAL_ADC_GetValue>
 8003a6c:	4a20      	ldr	r2, [pc, #128]	; (8003af0 <User+0x258>)
 8003a6e:	7823      	ldrb	r3, [r4, #0]
 8003a70:	6010      	str	r0, [r2, #0]
 8003a72:	e73d      	b.n	80038f0 <User+0x58>
			waterT = HAL_ADC_GetValue(&hadc1);
 8003a74:	480b      	ldr	r0, [pc, #44]	; (8003aa4 <User+0x20c>)
 8003a76:	f7fc fdc5 	bl	8000604 <HAL_ADC_GetValue>
 8003a7a:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <User+0x25c>)
 8003a7c:	7823      	ldrb	r3, [r4, #0]
 8003a7e:	6010      	str	r0, [r2, #0]
 8003a80:	e736      	b.n	80038f0 <User+0x58>
 8003a82:	bf00      	nop
 8003a84:	20000388 	.word	0x20000388
 8003a88:	200002b0 	.word	0x200002b0
 8003a8c:	200003a2 	.word	0x200003a2
 8003a90:	20000320 	.word	0x20000320
 8003a94:	20000090 	.word	0x20000090
 8003a98:	200003a4 	.word	0x200003a4
 8003a9c:	20000352 	.word	0x20000352
 8003aa0:	200001dc 	.word	0x200001dc
 8003aa4:	2000003c 	.word	0x2000003c
 8003aa8:	20000380 	.word	0x20000380
 8003aac:	200001c2 	.word	0x200001c2
 8003ab0:	200001b9 	.word	0x200001b9
 8003ab4:	20000377 	.word	0x20000377
 8003ab8:	200001e0 	.word	0x200001e0
 8003abc:	20000353 	.word	0x20000353
 8003ac0:	20000024 	.word	0x20000024
 8003ac4:	20000354 	.word	0x20000354
 8003ac8:	200001c4 	.word	0x200001c4
 8003acc:	20000038 	.word	0x20000038
 8003ad0:	200001c8 	.word	0x200001c8
 8003ad4:	20000100 	.word	0x20000100
 8003ad8:	200001ba 	.word	0x200001ba
 8003adc:	200003a8 	.word	0x200003a8
 8003ae0:	20000254 	.word	0x20000254
 8003ae4:	20000384 	.word	0x20000384
 8003ae8:	20000398 	.word	0x20000398
 8003aec:	200002c8 	.word	0x200002c8
 8003af0:	20000164 	.word	0x20000164
 8003af4:	2000039c 	.word	0x2000039c

08003af8 <HAL_UART_RxCpltCallback>:
// This function will execute whenever a character is received from the UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
	// the interrupt handler will automatically put the received character in the uartRXChar variable (no need to write any code for that).
	// so all we do it set flag to indicate character was received, and then process the received character further in the main loop
	uartRxFlag = true;
 8003af8:	4b01      	ldr	r3, [pc, #4]	; (8003b00 <HAL_UART_RxCpltCallback+0x8>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	4770      	bx	lr
 8003b00:	20000388 	.word	0x20000388

08003b04 <HAL_TIM_PeriodElapsedCallback>:
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //every 250 ns
{
	if (htim == &htim2)
 8003b04:	4b03      	ldr	r3, [pc, #12]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003b06:	4283      	cmp	r3, r0
 8003b08:	d000      	beq.n	8003b0c <HAL_TIM_PeriodElapsedCallback+0x8>
 8003b0a:	4770      	bx	lr
		adcFlag = true;
 8003b0c:	4b02      	ldr	r3, [pc, #8]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	701a      	strb	r2, [r3, #0]
 8003b12:	4770      	bx	lr
 8003b14:	20000120 	.word	0x20000120
 8003b18:	200003a4 	.word	0x200003a4

08003b1c <HAL_GPIO_EXTI_Callback>:

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	flowHighFlag = 1;
 8003b1c:	4902      	ldr	r1, [pc, #8]	; (8003b28 <HAL_GPIO_EXTI_Callback+0xc>)
	firstHighFlag = 1;
 8003b1e:	4a03      	ldr	r2, [pc, #12]	; (8003b2c <HAL_GPIO_EXTI_Callback+0x10>)
	flowHighFlag = 1;
 8003b20:	2301      	movs	r3, #1
 8003b22:	700b      	strb	r3, [r1, #0]
	firstHighFlag = 1;
 8003b24:	7013      	strb	r3, [r2, #0]
 8003b26:	4770      	bx	lr
 8003b28:	20000380 	.word	0x20000380
 8003b2c:	200001c2 	.word	0x200001c2

08003b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003b34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003b36:	e003      	b.n	8003b40 <LoopCopyDataInit>

08003b38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003b3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003b3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003b3e:	3104      	adds	r1, #4

08003b40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003b40:	480b      	ldr	r0, [pc, #44]	; (8003b70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003b42:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003b44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003b46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003b48:	d3f6      	bcc.n	8003b38 <CopyDataInit>
	ldr	r2, =_sbss
 8003b4a:	4a0b      	ldr	r2, [pc, #44]	; (8003b78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003b4c:	e002      	b.n	8003b54 <LoopFillZerobss>

08003b4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003b4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003b50:	f842 3b04 	str.w	r3, [r2], #4

08003b54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b54:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <LoopForever+0x16>)
	cmp	r2, r3
 8003b56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003b58:	d3f9      	bcc.n	8003b4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b5a:	f7ff f90d 	bl	8002d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b5e:	f000 f811 	bl	8003b84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b62:	f7fe fe9f 	bl	80028a4 <main>

08003b66 <LoopForever>:

LoopForever:
    b LoopForever
 8003b66:	e7fe      	b.n	8003b66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b68:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003b6c:	08003c38 	.word	0x08003c38
	ldr	r0, =_sdata
 8003b70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b74:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8003b78:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8003b7c:	200003b0 	.word	0x200003b0

08003b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b80:	e7fe      	b.n	8003b80 <ADC1_2_IRQHandler>
	...

08003b84 <__libc_init_array>:
 8003b84:	b570      	push	{r4, r5, r6, lr}
 8003b86:	4e0d      	ldr	r6, [pc, #52]	; (8003bbc <__libc_init_array+0x38>)
 8003b88:	4c0d      	ldr	r4, [pc, #52]	; (8003bc0 <__libc_init_array+0x3c>)
 8003b8a:	1ba4      	subs	r4, r4, r6
 8003b8c:	10a4      	asrs	r4, r4, #2
 8003b8e:	2500      	movs	r5, #0
 8003b90:	42a5      	cmp	r5, r4
 8003b92:	d109      	bne.n	8003ba8 <__libc_init_array+0x24>
 8003b94:	4e0b      	ldr	r6, [pc, #44]	; (8003bc4 <__libc_init_array+0x40>)
 8003b96:	4c0c      	ldr	r4, [pc, #48]	; (8003bc8 <__libc_init_array+0x44>)
 8003b98:	f000 f818 	bl	8003bcc <_init>
 8003b9c:	1ba4      	subs	r4, r4, r6
 8003b9e:	10a4      	asrs	r4, r4, #2
 8003ba0:	2500      	movs	r5, #0
 8003ba2:	42a5      	cmp	r5, r4
 8003ba4:	d105      	bne.n	8003bb2 <__libc_init_array+0x2e>
 8003ba6:	bd70      	pop	{r4, r5, r6, pc}
 8003ba8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bac:	4798      	blx	r3
 8003bae:	3501      	adds	r5, #1
 8003bb0:	e7ee      	b.n	8003b90 <__libc_init_array+0xc>
 8003bb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bb6:	4798      	blx	r3
 8003bb8:	3501      	adds	r5, #1
 8003bba:	e7f2      	b.n	8003ba2 <__libc_init_array+0x1e>
 8003bbc:	08003c30 	.word	0x08003c30
 8003bc0:	08003c30 	.word	0x08003c30
 8003bc4:	08003c30 	.word	0x08003c30
 8003bc8:	08003c34 	.word	0x08003c34

08003bcc <_init>:
 8003bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bce:	bf00      	nop
 8003bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd2:	bc08      	pop	{r3}
 8003bd4:	469e      	mov	lr, r3
 8003bd6:	4770      	bx	lr

08003bd8 <_fini>:
 8003bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bda:	bf00      	nop
 8003bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bde:	bc08      	pop	{r3}
 8003be0:	469e      	mov	lr, r3
 8003be2:	4770      	bx	lr
