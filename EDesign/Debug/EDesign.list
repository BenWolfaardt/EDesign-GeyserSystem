
E:\EDesign\V2.0\EDesign\Debug\EDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001ddc  08001ddc  00011ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001e34  08001e34  00011e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001e38  08001e38  00011e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08001e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  7 .bss          00000100  20000008  20000008  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000108  20000108  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fa80  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000020b5  00000000  00000000  0002fab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003ae9  00000000  00000000  00031b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000668  00000000  00000000  00035658  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000628  00000000  00000000  00035cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001c56c  00000000  00000000  000362e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00006f54  00000000  00000000  00052854  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0009b2b1  00000000  00000000  000597a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000f4a59  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000f24  00000000  00000000  000f4ad8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001dc4 	.word	0x08001dc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08001dc4 	.word	0x08001dc4

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <HAL_InitTick+0x24>)
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <HAL_InitTick+0x28>)
 80001d2:	fba3 3000 	umull	r3, r0, r3, r0
 80001d6:	0980      	lsrs	r0, r0, #6
 80001d8:	f000 f87c 	bl	80002d4 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f838 	bl	8000258 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000
 80001f0:	10624dd3 	.word	0x10624dd3

080001f4 <HAL_Init>:
{
 80001f4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f6:	4a07      	ldr	r2, [pc, #28]	; (8000214 <HAL_Init+0x20>)
 80001f8:	6813      	ldr	r3, [r2, #0]
 80001fa:	f043 0310 	orr.w	r3, r3, #16
 80001fe:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000200:	2003      	movs	r0, #3
 8000202:	f000 f817 	bl	8000234 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000206:	2000      	movs	r0, #0
 8000208:	f7ff ffde 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 800020c:	f001 fbb0 	bl	8001970 <HAL_MspInit>
}
 8000210:	2000      	movs	r0, #0
 8000212:	bd08      	pop	{r3, pc}
 8000214:	40022000 	.word	0x40022000

08000218 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000218:	4a02      	ldr	r2, [pc, #8]	; (8000224 <HAL_IncTick+0xc>)
 800021a:	6813      	ldr	r3, [r2, #0]
 800021c:	3301      	adds	r3, #1
 800021e:	6013      	str	r3, [r2, #0]
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	20000024 	.word	0x20000024

08000228 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000228:	4b01      	ldr	r3, [pc, #4]	; (8000230 <HAL_GetTick+0x8>)
 800022a:	6818      	ldr	r0, [r3, #0]
}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000024 	.word	0x20000024

08000234 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000234:	4a07      	ldr	r2, [pc, #28]	; (8000254 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000236:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000238:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800023c:	041b      	lsls	r3, r3, #16
 800023e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000240:	0200      	lsls	r0, r0, #8
 8000242:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000246:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000248:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800024c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000250:	60d0      	str	r0, [r2, #12]
 8000252:	4770      	bx	lr
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000258:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <HAL_NVIC_SetPriority+0x5c>)
 800025c:	68db      	ldr	r3, [r3, #12]
 800025e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000262:	f1c3 0407 	rsb	r4, r3, #7
 8000266:	2c04      	cmp	r4, #4
 8000268:	bf28      	it	cs
 800026a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026c:	1d1d      	adds	r5, r3, #4
 800026e:	2d06      	cmp	r5, #6
 8000270:	d917      	bls.n	80002a2 <HAL_NVIC_SetPriority+0x4a>
 8000272:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000274:	2501      	movs	r5, #1
 8000276:	fa05 f404 	lsl.w	r4, r5, r4
 800027a:	3c01      	subs	r4, #1
 800027c:	4021      	ands	r1, r4
 800027e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000280:	fa05 f303 	lsl.w	r3, r5, r3
 8000284:	3b01      	subs	r3, #1
 8000286:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000288:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 800028a:	2800      	cmp	r0, #0
 800028c:	db0b      	blt.n	80002a6 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	0109      	lsls	r1, r1, #4
 8000290:	b2c9      	uxtb	r1, r1
 8000292:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000296:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800029a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800029e:	bc30      	pop	{r4, r5}
 80002a0:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a2:	2300      	movs	r3, #0
 80002a4:	e7e6      	b.n	8000274 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a6:	f000 000f 	and.w	r0, r0, #15
 80002aa:	0109      	lsls	r1, r1, #4
 80002ac:	b2c9      	uxtb	r1, r1
 80002ae:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <HAL_NVIC_SetPriority+0x60>)
 80002b0:	5419      	strb	r1, [r3, r0]
 80002b2:	e7f4      	b.n	800029e <HAL_NVIC_SetPriority+0x46>
 80002b4:	e000ed00 	.word	0xe000ed00
 80002b8:	e000ed14 	.word	0xe000ed14

080002bc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002bc:	0942      	lsrs	r2, r0, #5
 80002be:	f000 001f 	and.w	r0, r0, #31
 80002c2:	2301      	movs	r3, #1
 80002c4:	fa03 f000 	lsl.w	r0, r3, r0
 80002c8:	4b01      	ldr	r3, [pc, #4]	; (80002d0 <HAL_NVIC_EnableIRQ+0x14>)
 80002ca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ce:	4770      	bx	lr
 80002d0:	e000e100 	.word	0xe000e100

080002d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002d4:	3801      	subs	r0, #1
 80002d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002da:	d20a      	bcs.n	80002f2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <HAL_SYSTICK_Config+0x24>)
 80002de:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	21f0      	movs	r1, #240	; 0xf0
 80002e2:	4a06      	ldr	r2, [pc, #24]	; (80002fc <HAL_SYSTICK_Config+0x28>)
 80002e4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e8:	2000      	movs	r0, #0
 80002ea:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ec:	2207      	movs	r2, #7
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002f2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e010 	.word	0xe000e010
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000300:	2804      	cmp	r0, #4
 8000302:	d005      	beq.n	8000310 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000304:	4a05      	ldr	r2, [pc, #20]	; (800031c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000306:	6813      	ldr	r3, [r2, #0]
 8000308:	f023 0304 	bic.w	r3, r3, #4
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000310:	4a02      	ldr	r2, [pc, #8]	; (800031c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000312:	6813      	ldr	r3, [r2, #0]
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	6013      	str	r3, [r2, #0]
 800031a:	4770      	bx	lr
 800031c:	e000e010 	.word	0xe000e010

08000320 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000320:	4770      	bx	lr

08000322 <HAL_SYSTICK_IRQHandler>:
{
 8000322:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000324:	f7ff fffc 	bl	8000320 <HAL_SYSTICK_Callback>
 8000328:	bd08      	pop	{r3, pc}

0800032a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800032a:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800032c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000330:	2b02      	cmp	r3, #2
 8000332:	d003      	beq.n	800033c <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000334:	2304      	movs	r3, #4
 8000336:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000338:	2001      	movs	r0, #1
 800033a:	bd08      	pop	{r3, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800033c:	6802      	ldr	r2, [r0, #0]
 800033e:	6813      	ldr	r3, [r2, #0]
 8000340:	f023 030e 	bic.w	r3, r3, #14
 8000344:	6013      	str	r3, [r2, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000346:	6802      	ldr	r2, [r0, #0]
 8000348:	6813      	ldr	r3, [r2, #0]
 800034a:	f023 0301 	bic.w	r3, r3, #1
 800034e:	6013      	str	r3, [r2, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000350:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000352:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000354:	2201      	movs	r2, #1
 8000356:	fa02 f303 	lsl.w	r3, r2, r3
 800035a:	604b      	str	r3, [r1, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800035c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000360:	2300      	movs	r3, #0
 8000362:	f880 3020 	strb.w	r3, [r0, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000366:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000368:	b113      	cbz	r3, 8000370 <HAL_DMA_Abort_IT+0x46>
    {
      hdma->XferAbortCallback(hdma);
 800036a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800036c:	2000      	movs	r0, #0
 800036e:	bd08      	pop	{r3, pc}
 8000370:	2000      	movs	r0, #0
    } 
  }
  return status;
}
 8000372:	bd08      	pop	{r3, pc}

08000374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000376:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8000378:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800037a:	e088      	b.n	800048e <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800037c:	08de      	lsrs	r6, r3, #3
 800037e:	3608      	adds	r6, #8
 8000380:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000384:	f003 0e07 	and.w	lr, r3, #7
 8000388:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800038c:	270f      	movs	r7, #15
 800038e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000392:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000396:	690f      	ldr	r7, [r1, #16]
 8000398:	fa07 f70e 	lsl.w	r7, r7, lr
 800039c:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 800039e:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 80003a2:	e083      	b.n	80004ac <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80003a4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003a6:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003a8:	68cf      	ldr	r7, [r1, #12]
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80003b0:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80003b2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003b4:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003b8:	684e      	ldr	r6, [r1, #4]
 80003ba:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80003be:	409e      	lsls	r6, r3
 80003c0:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80003c2:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80003c4:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003c6:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003c8:	688d      	ldr	r5, [r1, #8]
 80003ca:	fa05 f50e 	lsl.w	r5, r5, lr
 80003ce:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80003d0:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003d2:	684c      	ldr	r4, [r1, #4]
 80003d4:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80003d8:	d058      	beq.n	800048c <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003da:	4c47      	ldr	r4, [pc, #284]	; (80004f8 <HAL_GPIO_Init+0x184>)
 80003dc:	69a5      	ldr	r5, [r4, #24]
 80003de:	f045 0501 	orr.w	r5, r5, #1
 80003e2:	61a5      	str	r5, [r4, #24]
 80003e4:	69a4      	ldr	r4, [r4, #24]
 80003e6:	f004 0401 	and.w	r4, r4, #1
 80003ea:	9401      	str	r4, [sp, #4]
 80003ec:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 80003ee:	089d      	lsrs	r5, r3, #2
 80003f0:	1cae      	adds	r6, r5, #2
 80003f2:	4c42      	ldr	r4, [pc, #264]	; (80004fc <HAL_GPIO_Init+0x188>)
 80003f4:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80003f8:	f003 0603 	and.w	r6, r3, #3
 80003fc:	00b6      	lsls	r6, r6, #2
 80003fe:	270f      	movs	r7, #15
 8000400:	40b7      	lsls	r7, r6
 8000402:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000406:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800040a:	d06c      	beq.n	80004e6 <HAL_GPIO_Init+0x172>
 800040c:	4f3c      	ldr	r7, [pc, #240]	; (8000500 <HAL_GPIO_Init+0x18c>)
 800040e:	42b8      	cmp	r0, r7
 8000410:	d06b      	beq.n	80004ea <HAL_GPIO_Init+0x176>
 8000412:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000416:	42b8      	cmp	r0, r7
 8000418:	d069      	beq.n	80004ee <HAL_GPIO_Init+0x17a>
 800041a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800041e:	42b8      	cmp	r0, r7
 8000420:	d05f      	beq.n	80004e2 <HAL_GPIO_Init+0x16e>
 8000422:	2705      	movs	r7, #5
 8000424:	fa07 f606 	lsl.w	r6, r7, r6
 8000428:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 800042a:	3502      	adds	r5, #2
 800042c:	4e33      	ldr	r6, [pc, #204]	; (80004fc <HAL_GPIO_Init+0x188>)
 800042e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000432:	4c34      	ldr	r4, [pc, #208]	; (8000504 <HAL_GPIO_Init+0x190>)
 8000434:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000436:	43d4      	mvns	r4, r2
 8000438:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800043c:	684f      	ldr	r7, [r1, #4]
 800043e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000442:	d001      	beq.n	8000448 <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8000444:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8000448:	4d2e      	ldr	r5, [pc, #184]	; (8000504 <HAL_GPIO_Init+0x190>)
 800044a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 800044c:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 800044e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000452:	684f      	ldr	r7, [r1, #4]
 8000454:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000458:	d001      	beq.n	800045e <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 800045a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 800045e:	4d29      	ldr	r5, [pc, #164]	; (8000504 <HAL_GPIO_Init+0x190>)
 8000460:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000462:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8000464:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000468:	684f      	ldr	r7, [r1, #4]
 800046a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800046e:	d001      	beq.n	8000474 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 8000470:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8000474:	4d23      	ldr	r5, [pc, #140]	; (8000504 <HAL_GPIO_Init+0x190>)
 8000476:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8000478:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 800047a:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800047c:	684e      	ldr	r6, [r1, #4]
 800047e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000482:	d001      	beq.n	8000488 <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 8000484:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8000488:	4a1e      	ldr	r2, [pc, #120]	; (8000504 <HAL_GPIO_Init+0x190>)
 800048a:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 800048c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 800048e:	680a      	ldr	r2, [r1, #0]
 8000490:	fa32 f403 	lsrs.w	r4, r2, r3
 8000494:	d02d      	beq.n	80004f2 <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000496:	2501      	movs	r5, #1
 8000498:	409d      	lsls	r5, r3
    if(iocurrent)
 800049a:	402a      	ands	r2, r5
 800049c:	d0f6      	beq.n	800048c <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800049e:	684c      	ldr	r4, [r1, #4]
 80004a0:	2c02      	cmp	r4, #2
 80004a2:	f43f af6b 	beq.w	800037c <HAL_GPIO_Init+0x8>
 80004a6:	2c12      	cmp	r4, #18
 80004a8:	f43f af68 	beq.w	800037c <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 80004ac:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004ae:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80004b2:	2403      	movs	r4, #3
 80004b4:	fa04 f40e 	lsl.w	r4, r4, lr
 80004b8:	43e4      	mvns	r4, r4
 80004ba:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004bc:	684f      	ldr	r7, [r1, #4]
 80004be:	f007 0703 	and.w	r7, r7, #3
 80004c2:	fa07 f70e 	lsl.w	r7, r7, lr
 80004c6:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80004c8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004ca:	684e      	ldr	r6, [r1, #4]
 80004cc:	1e77      	subs	r7, r6, #1
 80004ce:	2f01      	cmp	r7, #1
 80004d0:	f67f af68 	bls.w	80003a4 <HAL_GPIO_Init+0x30>
 80004d4:	2e11      	cmp	r6, #17
 80004d6:	f43f af65 	beq.w	80003a4 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004da:	2e12      	cmp	r6, #18
 80004dc:	f47f af72 	bne.w	80003c4 <HAL_GPIO_Init+0x50>
 80004e0:	e760      	b.n	80003a4 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004e2:	2703      	movs	r7, #3
 80004e4:	e79e      	b.n	8000424 <HAL_GPIO_Init+0xb0>
 80004e6:	2700      	movs	r7, #0
 80004e8:	e79c      	b.n	8000424 <HAL_GPIO_Init+0xb0>
 80004ea:	2701      	movs	r7, #1
 80004ec:	e79a      	b.n	8000424 <HAL_GPIO_Init+0xb0>
 80004ee:	2702      	movs	r7, #2
 80004f0:	e798      	b.n	8000424 <HAL_GPIO_Init+0xb0>
  }
}
 80004f2:	b003      	add	sp, #12
 80004f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010000 	.word	0x40010000
 8000500:	48000400 	.word	0x48000400
 8000504:	40010400 	.word	0x40010400

08000508 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000508:	b90a      	cbnz	r2, 800050e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800050a:	6281      	str	r1, [r0, #40]	; 0x28
 800050c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800050e:	6181      	str	r1, [r0, #24]
 8000510:	4770      	bx	lr
	...

08000514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800051a:	6803      	ldr	r3, [r0, #0]
 800051c:	f013 0f01 	tst.w	r3, #1
 8000520:	d063      	beq.n	80005ea <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000522:	4bb5      	ldr	r3, [pc, #724]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	f003 030c 	and.w	r3, r3, #12
 800052a:	2b04      	cmp	r3, #4
 800052c:	d046      	beq.n	80005bc <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800052e:	4bb2      	ldr	r3, [pc, #712]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	f003 030c 	and.w	r3, r3, #12
 8000536:	2b08      	cmp	r3, #8
 8000538:	d03b      	beq.n	80005b2 <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800053a:	6863      	ldr	r3, [r4, #4]
 800053c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000540:	f000 808e 	beq.w	8000660 <HAL_RCC_OscConfig+0x14c>
 8000544:	2b00      	cmp	r3, #0
 8000546:	f040 8091 	bne.w	800066c <HAL_RCC_OscConfig+0x158>
 800054a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800054e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000560:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000562:	4aa5      	ldr	r2, [pc, #660]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 8000564:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000566:	f023 030f 	bic.w	r3, r3, #15
 800056a:	68a1      	ldr	r1, [r4, #8]
 800056c:	430b      	orrs	r3, r1
 800056e:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000570:	6863      	ldr	r3, [r4, #4]
 8000572:	2b00      	cmp	r3, #0
 8000574:	f000 8094 	beq.w	80006a0 <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000578:	f7ff fe56 	bl	8000228 <HAL_GetTick>
 800057c:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800057e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000582:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000586:	4b9c      	ldr	r3, [pc, #624]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 8000588:	6819      	ldr	r1, [r3, #0]
 800058a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800058e:	fa93 f3a3 	rbit	r3, r3
 8000592:	fab3 f383 	clz	r3, r3
 8000596:	f003 031f 	and.w	r3, r3, #31
 800059a:	2201      	movs	r2, #1
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	4219      	tst	r1, r3
 80005a2:	d122      	bne.n	80005ea <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005a4:	f7ff fe40 	bl	8000228 <HAL_GetTick>
 80005a8:	1b40      	subs	r0, r0, r5
 80005aa:	2864      	cmp	r0, #100	; 0x64
 80005ac:	d9e7      	bls.n	800057e <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 80005ae:	2003      	movs	r0, #3
 80005b0:	e2ab      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005b2:	4b91      	ldr	r3, [pc, #580]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80005ba:	d0be      	beq.n	800053a <HAL_RCC_OscConfig+0x26>
 80005bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005c0:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005c4:	4b8c      	ldr	r3, [pc, #560]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 80005c6:	6819      	ldr	r1, [r3, #0]
 80005c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005cc:	fa93 f3a3 	rbit	r3, r3
 80005d0:	fab3 f383 	clz	r3, r3
 80005d4:	f003 031f 	and.w	r3, r3, #31
 80005d8:	2201      	movs	r2, #1
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	4219      	tst	r1, r3
 80005e0:	d003      	beq.n	80005ea <HAL_RCC_OscConfig+0xd6>
 80005e2:	6863      	ldr	r3, [r4, #4]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f000 8289 	beq.w	8000afc <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005ea:	6823      	ldr	r3, [r4, #0]
 80005ec:	f013 0f02 	tst.w	r3, #2
 80005f0:	f000 809c 	beq.w	800072c <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005f4:	4b80      	ldr	r3, [pc, #512]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	f013 0f0c 	tst.w	r3, #12
 80005fc:	d072      	beq.n	80006e4 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80005fe:	4b7e      	ldr	r3, [pc, #504]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	f003 030c 	and.w	r3, r3, #12
 8000606:	2b08      	cmp	r3, #8
 8000608:	d067      	beq.n	80006da <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800060a:	6923      	ldr	r3, [r4, #16]
 800060c:	2b00      	cmp	r3, #0
 800060e:	f000 80cb 	beq.w	80007a8 <HAL_RCC_OscConfig+0x294>
 8000612:	2201      	movs	r2, #1
 8000614:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000618:	fab3 f383 	clz	r3, r3
 800061c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000620:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000628:	f7ff fdfe 	bl	8000228 <HAL_GetTick>
 800062c:	4605      	mov	r5, r0
 800062e:	2302      	movs	r3, #2
 8000630:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000634:	4b70      	ldr	r3, [pc, #448]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 8000636:	6819      	ldr	r1, [r3, #0]
 8000638:	2302      	movs	r3, #2
 800063a:	fa93 f3a3 	rbit	r3, r3
 800063e:	fab3 f383 	clz	r3, r3
 8000642:	f003 031f 	and.w	r3, r3, #31
 8000646:	2201      	movs	r2, #1
 8000648:	fa02 f303 	lsl.w	r3, r2, r3
 800064c:	4219      	tst	r1, r3
 800064e:	f040 809c 	bne.w	800078a <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000652:	f7ff fde9 	bl	8000228 <HAL_GetTick>
 8000656:	1b40      	subs	r0, r0, r5
 8000658:	2802      	cmp	r0, #2
 800065a:	d9e8      	bls.n	800062e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800065c:	2003      	movs	r0, #3
 800065e:	e254      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000660:	4a65      	ldr	r2, [pc, #404]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 8000662:	6813      	ldr	r3, [r2, #0]
 8000664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000668:	6013      	str	r3, [r2, #0]
 800066a:	e77a      	b.n	8000562 <HAL_RCC_OscConfig+0x4e>
 800066c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000670:	d009      	beq.n	8000686 <HAL_RCC_OscConfig+0x172>
 8000672:	4b61      	ldr	r3, [pc, #388]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	e76d      	b.n	8000562 <HAL_RCC_OscConfig+0x4e>
 8000686:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800068a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	e760      	b.n	8000562 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 80006a0:	f7ff fdc2 	bl	8000228 <HAL_GetTick>
 80006a4:	4605      	mov	r5, r0
 80006a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006aa:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006ae:	4b52      	ldr	r3, [pc, #328]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 80006b0:	6819      	ldr	r1, [r3, #0]
 80006b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006b6:	fa93 f3a3 	rbit	r3, r3
 80006ba:	fab3 f383 	clz	r3, r3
 80006be:	f003 031f 	and.w	r3, r3, #31
 80006c2:	2201      	movs	r2, #1
 80006c4:	fa02 f303 	lsl.w	r3, r2, r3
 80006c8:	4219      	tst	r1, r3
 80006ca:	d08e      	beq.n	80005ea <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006cc:	f7ff fdac 	bl	8000228 <HAL_GetTick>
 80006d0:	1b40      	subs	r0, r0, r5
 80006d2:	2864      	cmp	r0, #100	; 0x64
 80006d4:	d9e7      	bls.n	80006a6 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 80006d6:	2003      	movs	r0, #3
 80006d8:	e217      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006da:	4b47      	ldr	r3, [pc, #284]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80006e2:	d192      	bne.n	800060a <HAL_RCC_OscConfig+0xf6>
 80006e4:	2302      	movs	r3, #2
 80006e6:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006ea:	4b43      	ldr	r3, [pc, #268]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 80006ec:	6819      	ldr	r1, [r3, #0]
 80006ee:	2302      	movs	r3, #2
 80006f0:	fa93 f3a3 	rbit	r3, r3
 80006f4:	fab3 f383 	clz	r3, r3
 80006f8:	f003 031f 	and.w	r3, r3, #31
 80006fc:	2201      	movs	r2, #1
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	4219      	tst	r1, r3
 8000704:	d004      	beq.n	8000710 <HAL_RCC_OscConfig+0x1fc>
 8000706:	6923      	ldr	r3, [r4, #16]
 8000708:	4293      	cmp	r3, r2
 800070a:	d001      	beq.n	8000710 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 800070c:	2001      	movs	r0, #1
 800070e:	e1fc      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000710:	4839      	ldr	r0, [pc, #228]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 8000712:	6803      	ldr	r3, [r0, #0]
 8000714:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000718:	6961      	ldr	r1, [r4, #20]
 800071a:	22f8      	movs	r2, #248	; 0xf8
 800071c:	fa92 f2a2 	rbit	r2, r2
 8000720:	fab2 f282 	clz	r2, r2
 8000724:	fa01 f202 	lsl.w	r2, r1, r2
 8000728:	4313      	orrs	r3, r2
 800072a:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800072c:	6823      	ldr	r3, [r4, #0]
 800072e:	f013 0f08 	tst.w	r3, #8
 8000732:	f000 808d 	beq.w	8000850 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000736:	69a3      	ldr	r3, [r4, #24]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d061      	beq.n	8000800 <HAL_RCC_OscConfig+0x2ec>
 800073c:	2101      	movs	r1, #1
 800073e:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000742:	fab2 f282 	clz	r2, r2
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <HAL_RCC_OscConfig+0x2e8>)
 8000748:	4413      	add	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800074e:	f7ff fd6b 	bl	8000228 <HAL_GetTick>
 8000752:	4605      	mov	r5, r0
 8000754:	2302      	movs	r3, #2
 8000756:	fa93 f2a3 	rbit	r2, r3
 800075a:	fa93 f2a3 	rbit	r2, r3
 800075e:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000762:	4a25      	ldr	r2, [pc, #148]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 8000764:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000766:	fa93 f3a3 	rbit	r3, r3
 800076a:	fab3 f383 	clz	r3, r3
 800076e:	f003 031f 	and.w	r3, r3, #31
 8000772:	2201      	movs	r2, #1
 8000774:	fa02 f303 	lsl.w	r3, r2, r3
 8000778:	4219      	tst	r1, r3
 800077a:	d169      	bne.n	8000850 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800077c:	f7ff fd54 	bl	8000228 <HAL_GetTick>
 8000780:	1b40      	subs	r0, r0, r5
 8000782:	2802      	cmp	r0, #2
 8000784:	d9e6      	bls.n	8000754 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000786:	2003      	movs	r0, #3
 8000788:	e1bf      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800078a:	481b      	ldr	r0, [pc, #108]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 800078c:	6803      	ldr	r3, [r0, #0]
 800078e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000792:	6961      	ldr	r1, [r4, #20]
 8000794:	22f8      	movs	r2, #248	; 0xf8
 8000796:	fa92 f2a2 	rbit	r2, r2
 800079a:	fab2 f282 	clz	r2, r2
 800079e:	fa01 f202 	lsl.w	r2, r1, r2
 80007a2:	4313      	orrs	r3, r2
 80007a4:	6003      	str	r3, [r0, #0]
 80007a6:	e7c1      	b.n	800072c <HAL_RCC_OscConfig+0x218>
 80007a8:	2301      	movs	r3, #1
 80007aa:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80007ae:	fab3 f383 	clz	r3, r3
 80007b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80007b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007c0:	f7ff fd32 	bl	8000228 <HAL_GetTick>
 80007c4:	4605      	mov	r5, r0
 80007c6:	2302      	movs	r3, #2
 80007c8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_RCC_OscConfig+0x2e4>)
 80007ce:	6819      	ldr	r1, [r3, #0]
 80007d0:	2302      	movs	r3, #2
 80007d2:	fa93 f3a3 	rbit	r3, r3
 80007d6:	fab3 f383 	clz	r3, r3
 80007da:	f003 031f 	and.w	r3, r3, #31
 80007de:	2201      	movs	r2, #1
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	4219      	tst	r1, r3
 80007e6:	d0a1      	beq.n	800072c <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007e8:	f7ff fd1e 	bl	8000228 <HAL_GetTick>
 80007ec:	1b40      	subs	r0, r0, r5
 80007ee:	2802      	cmp	r0, #2
 80007f0:	d9e9      	bls.n	80007c6 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 80007f2:	2003      	movs	r0, #3
 80007f4:	e189      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000
 80007fc:	10908120 	.word	0x10908120
 8000800:	2201      	movs	r2, #1
 8000802:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000806:	fab2 f282 	clz	r2, r2
 800080a:	4bc1      	ldr	r3, [pc, #772]	; (8000b10 <HAL_RCC_OscConfig+0x5fc>)
 800080c:	4413      	add	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000814:	f7ff fd08 	bl	8000228 <HAL_GetTick>
 8000818:	4605      	mov	r5, r0
 800081a:	2302      	movs	r3, #2
 800081c:	fa93 f2a3 	rbit	r2, r3
 8000820:	fa93 f2a3 	rbit	r2, r3
 8000824:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000828:	4aba      	ldr	r2, [pc, #744]	; (8000b14 <HAL_RCC_OscConfig+0x600>)
 800082a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800082c:	fa93 f3a3 	rbit	r3, r3
 8000830:	fab3 f383 	clz	r3, r3
 8000834:	f003 031f 	and.w	r3, r3, #31
 8000838:	2201      	movs	r2, #1
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	4219      	tst	r1, r3
 8000840:	d006      	beq.n	8000850 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000842:	f7ff fcf1 	bl	8000228 <HAL_GetTick>
 8000846:	1b40      	subs	r0, r0, r5
 8000848:	2802      	cmp	r0, #2
 800084a:	d9e6      	bls.n	800081a <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 800084c:	2003      	movs	r0, #3
 800084e:	e15c      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000850:	6823      	ldr	r3, [r4, #0]
 8000852:	f013 0f04 	tst.w	r3, #4
 8000856:	f000 80b3 	beq.w	80009c0 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800085a:	4bae      	ldr	r3, [pc, #696]	; (8000b14 <HAL_RCC_OscConfig+0x600>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000862:	d126      	bne.n	80008b2 <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000864:	4bab      	ldr	r3, [pc, #684]	; (8000b14 <HAL_RCC_OscConfig+0x600>)
 8000866:	69da      	ldr	r2, [r3, #28]
 8000868:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800086c:	61da      	str	r2, [r3, #28]
 800086e:	69db      	ldr	r3, [r3, #28]
 8000870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000878:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800087a:	4ba7      	ldr	r3, [pc, #668]	; (8000b18 <HAL_RCC_OscConfig+0x604>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000882:	d018      	beq.n	80008b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000884:	68e3      	ldr	r3, [r4, #12]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d029      	beq.n	80008de <HAL_RCC_OscConfig+0x3ca>
 800088a:	bb73      	cbnz	r3, 80008ea <HAL_RCC_OscConfig+0x3d6>
 800088c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000890:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000894:	6a1a      	ldr	r2, [r3, #32]
 8000896:	f022 0201 	bic.w	r2, r2, #1
 800089a:	621a      	str	r2, [r3, #32]
 800089c:	6a1a      	ldr	r2, [r3, #32]
 800089e:	f022 0204 	bic.w	r2, r2, #4
 80008a2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80008a4:	68e3      	ldr	r3, [r4, #12]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d05d      	beq.n	8000966 <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008aa:	f7ff fcbd 	bl	8000228 <HAL_GetTick>
 80008ae:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008b0:	e047      	b.n	8000942 <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 80008b2:	2500      	movs	r5, #0
 80008b4:	e7e1      	b.n	800087a <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008b6:	4a98      	ldr	r2, [pc, #608]	; (8000b18 <HAL_RCC_OscConfig+0x604>)
 80008b8:	6813      	ldr	r3, [r2, #0]
 80008ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008be:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80008c0:	f7ff fcb2 	bl	8000228 <HAL_GetTick>
 80008c4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008c6:	4b94      	ldr	r3, [pc, #592]	; (8000b18 <HAL_RCC_OscConfig+0x604>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f413 7f80 	tst.w	r3, #256	; 0x100
 80008ce:	d1d9      	bne.n	8000884 <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008d0:	f7ff fcaa 	bl	8000228 <HAL_GetTick>
 80008d4:	1b80      	subs	r0, r0, r6
 80008d6:	2864      	cmp	r0, #100	; 0x64
 80008d8:	d9f5      	bls.n	80008c6 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 80008da:	2003      	movs	r0, #3
 80008dc:	e115      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008de:	4a8d      	ldr	r2, [pc, #564]	; (8000b14 <HAL_RCC_OscConfig+0x600>)
 80008e0:	6a13      	ldr	r3, [r2, #32]
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6213      	str	r3, [r2, #32]
 80008e8:	e7dc      	b.n	80008a4 <HAL_RCC_OscConfig+0x390>
 80008ea:	2b05      	cmp	r3, #5
 80008ec:	d009      	beq.n	8000902 <HAL_RCC_OscConfig+0x3ee>
 80008ee:	4b89      	ldr	r3, [pc, #548]	; (8000b14 <HAL_RCC_OscConfig+0x600>)
 80008f0:	6a1a      	ldr	r2, [r3, #32]
 80008f2:	f022 0201 	bic.w	r2, r2, #1
 80008f6:	621a      	str	r2, [r3, #32]
 80008f8:	6a1a      	ldr	r2, [r3, #32]
 80008fa:	f022 0204 	bic.w	r2, r2, #4
 80008fe:	621a      	str	r2, [r3, #32]
 8000900:	e7d0      	b.n	80008a4 <HAL_RCC_OscConfig+0x390>
 8000902:	4b84      	ldr	r3, [pc, #528]	; (8000b14 <HAL_RCC_OscConfig+0x600>)
 8000904:	6a1a      	ldr	r2, [r3, #32]
 8000906:	f042 0204 	orr.w	r2, r2, #4
 800090a:	621a      	str	r2, [r3, #32]
 800090c:	6a1a      	ldr	r2, [r3, #32]
 800090e:	f042 0201 	orr.w	r2, r2, #1
 8000912:	621a      	str	r2, [r3, #32]
 8000914:	e7c6      	b.n	80008a4 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000916:	4b7f      	ldr	r3, [pc, #508]	; (8000b14 <HAL_RCC_OscConfig+0x600>)
 8000918:	6a19      	ldr	r1, [r3, #32]
 800091a:	2302      	movs	r3, #2
 800091c:	fa93 f3a3 	rbit	r3, r3
 8000920:	fab3 f383 	clz	r3, r3
 8000924:	f003 031f 	and.w	r3, r3, #31
 8000928:	2201      	movs	r2, #1
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	4219      	tst	r1, r3
 8000930:	d145      	bne.n	80009be <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000932:	f7ff fc79 	bl	8000228 <HAL_GetTick>
 8000936:	1b80      	subs	r0, r0, r6
 8000938:	f241 3388 	movw	r3, #5000	; 0x1388
 800093c:	4298      	cmp	r0, r3
 800093e:	f200 80df 	bhi.w	8000b00 <HAL_RCC_OscConfig+0x5ec>
 8000942:	2302      	movs	r3, #2
 8000944:	fa93 f2a3 	rbit	r2, r3
 8000948:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800094c:	fab3 f383 	clz	r3, r3
 8000950:	095b      	lsrs	r3, r3, #5
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	2b02      	cmp	r3, #2
 8000958:	d0dd      	beq.n	8000916 <HAL_RCC_OscConfig+0x402>
 800095a:	2302      	movs	r3, #2
 800095c:	fa93 f3a3 	rbit	r3, r3
 8000960:	4b6c      	ldr	r3, [pc, #432]	; (8000b14 <HAL_RCC_OscConfig+0x600>)
 8000962:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000964:	e7d9      	b.n	800091a <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000966:	f7ff fc5f 	bl	8000228 <HAL_GetTick>
 800096a:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800096c:	e015      	b.n	800099a <HAL_RCC_OscConfig+0x486>
 800096e:	4b69      	ldr	r3, [pc, #420]	; (8000b14 <HAL_RCC_OscConfig+0x600>)
 8000970:	6a19      	ldr	r1, [r3, #32]
 8000972:	2302      	movs	r3, #2
 8000974:	fa93 f3a3 	rbit	r3, r3
 8000978:	fab3 f383 	clz	r3, r3
 800097c:	f003 031f 	and.w	r3, r3, #31
 8000980:	2201      	movs	r2, #1
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	4219      	tst	r1, r3
 8000988:	d019      	beq.n	80009be <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800098a:	f7ff fc4d 	bl	8000228 <HAL_GetTick>
 800098e:	1b80      	subs	r0, r0, r6
 8000990:	f241 3388 	movw	r3, #5000	; 0x1388
 8000994:	4298      	cmp	r0, r3
 8000996:	f200 80b5 	bhi.w	8000b04 <HAL_RCC_OscConfig+0x5f0>
 800099a:	2302      	movs	r3, #2
 800099c:	fa93 f2a3 	rbit	r2, r3
 80009a0:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009a4:	fab3 f383 	clz	r3, r3
 80009a8:	095b      	lsrs	r3, r3, #5
 80009aa:	f043 0302 	orr.w	r3, r3, #2
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d0dd      	beq.n	800096e <HAL_RCC_OscConfig+0x45a>
 80009b2:	2302      	movs	r3, #2
 80009b4:	fa93 f3a3 	rbit	r3, r3
 80009b8:	4b56      	ldr	r3, [pc, #344]	; (8000b14 <HAL_RCC_OscConfig+0x600>)
 80009ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80009bc:	e7d9      	b.n	8000972 <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80009be:	bbb5      	cbnz	r5, 8000a2e <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009c0:	69e3      	ldr	r3, [r4, #28]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f000 80a0 	beq.w	8000b08 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009c8:	4a52      	ldr	r2, [pc, #328]	; (8000b14 <HAL_RCC_OscConfig+0x600>)
 80009ca:	6852      	ldr	r2, [r2, #4]
 80009cc:	f002 020c 	and.w	r2, r2, #12
 80009d0:	2a08      	cmp	r2, #8
 80009d2:	f000 80a3 	beq.w	8000b1c <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d02f      	beq.n	8000a3a <HAL_RCC_OscConfig+0x526>
 80009da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009de:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80009e2:	fab3 f383 	clz	r3, r3
 80009e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009f4:	f7ff fc18 	bl	8000228 <HAL_GetTick>
 80009f8:	4604      	mov	r4, r0
 80009fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009fe:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a02:	4b44      	ldr	r3, [pc, #272]	; (8000b14 <HAL_RCC_OscConfig+0x600>)
 8000a04:	6819      	ldr	r1, [r3, #0]
 8000a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a0a:	fa93 f3a3 	rbit	r3, r3
 8000a0e:	fab3 f383 	clz	r3, r3
 8000a12:	f003 031f 	and.w	r3, r3, #31
 8000a16:	2201      	movs	r2, #1
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	4219      	tst	r1, r3
 8000a1e:	d06b      	beq.n	8000af8 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a20:	f7ff fc02 	bl	8000228 <HAL_GetTick>
 8000a24:	1b00      	subs	r0, r0, r4
 8000a26:	2802      	cmp	r0, #2
 8000a28:	d9e7      	bls.n	80009fa <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	e06d      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a2e:	4a39      	ldr	r2, [pc, #228]	; (8000b14 <HAL_RCC_OscConfig+0x600>)
 8000a30:	69d3      	ldr	r3, [r2, #28]
 8000a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a36:	61d3      	str	r3, [r2, #28]
 8000a38:	e7c2      	b.n	80009c0 <HAL_RCC_OscConfig+0x4ac>
 8000a3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a3e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a42:	fab3 f383 	clz	r3, r3
 8000a46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a54:	f7ff fbe8 	bl	8000228 <HAL_GetTick>
 8000a58:	4605      	mov	r5, r0
 8000a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a5e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a62:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <HAL_RCC_OscConfig+0x600>)
 8000a64:	6819      	ldr	r1, [r3, #0]
 8000a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a6a:	fa93 f3a3 	rbit	r3, r3
 8000a6e:	fab3 f383 	clz	r3, r3
 8000a72:	f003 031f 	and.w	r3, r3, #31
 8000a76:	2201      	movs	r2, #1
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	4219      	tst	r1, r3
 8000a7e:	d006      	beq.n	8000a8e <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a80:	f7ff fbd2 	bl	8000228 <HAL_GetTick>
 8000a84:	1b40      	subs	r0, r0, r5
 8000a86:	2802      	cmp	r0, #2
 8000a88:	d9e7      	bls.n	8000a5a <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 8000a8a:	2003      	movs	r0, #3
 8000a8c:	e03d      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a8e:	4921      	ldr	r1, [pc, #132]	; (8000b14 <HAL_RCC_OscConfig+0x600>)
 8000a90:	684b      	ldr	r3, [r1, #4]
 8000a92:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000a96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a98:	6a20      	ldr	r0, [r4, #32]
 8000a9a:	4302      	orrs	r2, r0
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	604b      	str	r3, [r1, #4]
 8000aa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000aa8:	fab3 f383 	clz	r3, r3
 8000aac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ab0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000aba:	f7ff fbb5 	bl	8000228 <HAL_GetTick>
 8000abe:	4604      	mov	r4, r0
 8000ac0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ac4:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_RCC_OscConfig+0x600>)
 8000aca:	6819      	ldr	r1, [r3, #0]
 8000acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ad0:	fa93 f3a3 	rbit	r3, r3
 8000ad4:	fab3 f383 	clz	r3, r3
 8000ad8:	f003 031f 	and.w	r3, r3, #31
 8000adc:	2201      	movs	r2, #1
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	4219      	tst	r1, r3
 8000ae4:	d106      	bne.n	8000af4 <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ae6:	f7ff fb9f 	bl	8000228 <HAL_GetTick>
 8000aea:	1b00      	subs	r0, r0, r4
 8000aec:	2802      	cmp	r0, #2
 8000aee:	d9e7      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 8000af0:	2003      	movs	r0, #3
 8000af2:	e00a      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000af4:	2000      	movs	r0, #0
 8000af6:	e008      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>
 8000af8:	2000      	movs	r0, #0
 8000afa:	e006      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 8000afc:	2001      	movs	r0, #1
 8000afe:	e004      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8000b00:	2003      	movs	r0, #3
 8000b02:	e002      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8000b04:	2003      	movs	r0, #3
 8000b06:	e000      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 8000b08:	2000      	movs	r0, #0
}
 8000b0a:	b002      	add	sp, #8
 8000b0c:	bd70      	pop	{r4, r5, r6, pc}
 8000b0e:	bf00      	nop
 8000b10:	10908120 	.word	0x10908120
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40007000 	.word	0x40007000
      return HAL_ERROR;
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	e7f4      	b.n	8000b0a <HAL_RCC_OscConfig+0x5f6>

08000b20 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_RCC_GetSysClockFreq+0x5c>)
 8000b22:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000b24:	f003 020c 	and.w	r2, r3, #12
 8000b28:	2a08      	cmp	r2, #8
 8000b2a:	d124      	bne.n	8000b76 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b2c:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8000b30:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000b34:	fa92 f2a2 	rbit	r2, r2
 8000b38:	fab2 f282 	clz	r2, r2
 8000b3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b40:	490f      	ldr	r1, [pc, #60]	; (8000b80 <HAL_RCC_GetSysClockFreq+0x60>)
 8000b42:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <HAL_RCC_GetSysClockFreq+0x5c>)
 8000b46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b48:	f002 020f 	and.w	r2, r2, #15
 8000b4c:	210f      	movs	r1, #15
 8000b4e:	fa91 f1a1 	rbit	r1, r1
 8000b52:	fab1 f181 	clz	r1, r1
 8000b56:	40ca      	lsrs	r2, r1
 8000b58:	490a      	ldr	r1, [pc, #40]	; (8000b84 <HAL_RCC_GetSysClockFreq+0x64>)
 8000b5a:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000b5c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000b60:	d103      	bne.n	8000b6a <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_RCC_GetSysClockFreq+0x68>)
 8000b64:	fb03 f000 	mul.w	r0, r3, r0
 8000b68:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b70:	fb03 f000 	mul.w	r0, r3, r0
 8000b74:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	08001ddc 	.word	0x08001ddc
 8000b84:	08001dec 	.word	0x08001dec
 8000b88:	003d0900 	.word	0x003d0900
 8000b8c:	007a1200 	.word	0x007a1200

08000b90 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b90:	4b70      	ldr	r3, [pc, #448]	; (8000d54 <HAL_RCC_ClockConfig+0x1c4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f003 0307 	and.w	r3, r3, #7
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	d20c      	bcs.n	8000bb6 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b9c:	4a6d      	ldr	r2, [pc, #436]	; (8000d54 <HAL_RCC_ClockConfig+0x1c4>)
 8000b9e:	6813      	ldr	r3, [r2, #0]
 8000ba0:	f023 0307 	bic.w	r3, r3, #7
 8000ba4:	430b      	orrs	r3, r1
 8000ba6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ba8:	6813      	ldr	r3, [r2, #0]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	4299      	cmp	r1, r3
 8000bb0:	d001      	beq.n	8000bb6 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4770      	bx	lr
{
 8000bb6:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bb8:	6803      	ldr	r3, [r0, #0]
 8000bba:	f013 0f02 	tst.w	r3, #2
 8000bbe:	d006      	beq.n	8000bce <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bc0:	4a65      	ldr	r2, [pc, #404]	; (8000d58 <HAL_RCC_ClockConfig+0x1c8>)
 8000bc2:	6853      	ldr	r3, [r2, #4]
 8000bc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bc8:	6884      	ldr	r4, [r0, #8]
 8000bca:	4323      	orrs	r3, r4
 8000bcc:	6053      	str	r3, [r2, #4]
 8000bce:	460d      	mov	r5, r1
 8000bd0:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bd2:	6803      	ldr	r3, [r0, #0]
 8000bd4:	f013 0f01 	tst.w	r3, #1
 8000bd8:	d07a      	beq.n	8000cd0 <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bda:	6843      	ldr	r3, [r0, #4]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d02f      	beq.n	8000c40 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d042      	beq.n	8000c6a <HAL_RCC_ClockConfig+0xda>
 8000be4:	2202      	movs	r2, #2
 8000be6:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bea:	4a5b      	ldr	r2, [pc, #364]	; (8000d58 <HAL_RCC_ClockConfig+0x1c8>)
 8000bec:	6810      	ldr	r0, [r2, #0]
 8000bee:	2202      	movs	r2, #2
 8000bf0:	fa92 f2a2 	rbit	r2, r2
 8000bf4:	fab2 f282 	clz	r2, r2
 8000bf8:	f002 021f 	and.w	r2, r2, #31
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000c02:	4210      	tst	r0, r2
 8000c04:	f000 80a4 	beq.w	8000d50 <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c08:	4953      	ldr	r1, [pc, #332]	; (8000d58 <HAL_RCC_ClockConfig+0x1c8>)
 8000c0a:	684a      	ldr	r2, [r1, #4]
 8000c0c:	f022 0203 	bic.w	r2, r2, #3
 8000c10:	4313      	orrs	r3, r2
 8000c12:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000c14:	f7ff fb08 	bl	8000228 <HAL_GetTick>
 8000c18:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c1a:	6863      	ldr	r3, [r4, #4]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d039      	beq.n	8000c94 <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d046      	beq.n	8000cb2 <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c24:	4b4c      	ldr	r3, [pc, #304]	; (8000d58 <HAL_RCC_ClockConfig+0x1c8>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f013 0f0c 	tst.w	r3, #12
 8000c2c:	d050      	beq.n	8000cd0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c2e:	f7ff fafb 	bl	8000228 <HAL_GetTick>
 8000c32:	1b80      	subs	r0, r0, r6
 8000c34:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c38:	4298      	cmp	r0, r3
 8000c3a:	d9f3      	bls.n	8000c24 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	bd70      	pop	{r4, r5, r6, pc}
 8000c40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c44:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c48:	4a43      	ldr	r2, [pc, #268]	; (8000d58 <HAL_RCC_ClockConfig+0x1c8>)
 8000c4a:	6810      	ldr	r0, [r2, #0]
 8000c4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c50:	fa92 f2a2 	rbit	r2, r2
 8000c54:	fab2 f282 	clz	r2, r2
 8000c58:	f002 021f 	and.w	r2, r2, #31
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c62:	4210      	tst	r0, r2
 8000c64:	d1d0      	bne.n	8000c08 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8000c66:	2001      	movs	r0, #1
 8000c68:	bd70      	pop	{r4, r5, r6, pc}
 8000c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c6e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c72:	4a39      	ldr	r2, [pc, #228]	; (8000d58 <HAL_RCC_ClockConfig+0x1c8>)
 8000c74:	6810      	ldr	r0, [r2, #0]
 8000c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c7a:	fa92 f2a2 	rbit	r2, r2
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	f002 021f 	and.w	r2, r2, #31
 8000c86:	2101      	movs	r1, #1
 8000c88:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8c:	4210      	tst	r0, r2
 8000c8e:	d1bb      	bne.n	8000c08 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8000c90:	2001      	movs	r0, #1
 8000c92:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c94:	4b30      	ldr	r3, [pc, #192]	; (8000d58 <HAL_RCC_ClockConfig+0x1c8>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 030c 	and.w	r3, r3, #12
 8000c9c:	2b04      	cmp	r3, #4
 8000c9e:	d017      	beq.n	8000cd0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ca0:	f7ff fac2 	bl	8000228 <HAL_GetTick>
 8000ca4:	1b80      	subs	r0, r0, r6
 8000ca6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000caa:	4298      	cmp	r0, r3
 8000cac:	d9f2      	bls.n	8000c94 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 8000cae:	2003      	movs	r0, #3
 8000cb0:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cb2:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <HAL_RCC_ClockConfig+0x1c8>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	2b08      	cmp	r3, #8
 8000cbc:	d008      	beq.n	8000cd0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cbe:	f7ff fab3 	bl	8000228 <HAL_GetTick>
 8000cc2:	1b80      	subs	r0, r0, r6
 8000cc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cc8:	4298      	cmp	r0, r3
 8000cca:	d9f2      	bls.n	8000cb2 <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 8000ccc:	2003      	movs	r0, #3
 8000cce:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cd0:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f003 0307 	and.w	r3, r3, #7
 8000cd8:	429d      	cmp	r5, r3
 8000cda:	d20c      	bcs.n	8000cf6 <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cdc:	4a1d      	ldr	r2, [pc, #116]	; (8000d54 <HAL_RCC_ClockConfig+0x1c4>)
 8000cde:	6813      	ldr	r3, [r2, #0]
 8000ce0:	f023 0307 	bic.w	r3, r3, #7
 8000ce4:	432b      	orrs	r3, r5
 8000ce6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ce8:	6813      	ldr	r3, [r2, #0]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	429d      	cmp	r5, r3
 8000cf0:	d001      	beq.n	8000cf6 <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 8000cf2:	2001      	movs	r0, #1
}
 8000cf4:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	f013 0f04 	tst.w	r3, #4
 8000cfc:	d006      	beq.n	8000d0c <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cfe:	4a16      	ldr	r2, [pc, #88]	; (8000d58 <HAL_RCC_ClockConfig+0x1c8>)
 8000d00:	6853      	ldr	r3, [r2, #4]
 8000d02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d06:	68e1      	ldr	r1, [r4, #12]
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d0c:	6823      	ldr	r3, [r4, #0]
 8000d0e:	f013 0f08 	tst.w	r3, #8
 8000d12:	d007      	beq.n	8000d24 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d14:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <HAL_RCC_ClockConfig+0x1c8>)
 8000d16:	6853      	ldr	r3, [r2, #4]
 8000d18:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d1c:	6921      	ldr	r1, [r4, #16]
 8000d1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d22:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d24:	f7ff fefc 	bl	8000b20 <HAL_RCC_GetSysClockFreq>
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_RCC_ClockConfig+0x1c8>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d30:	22f0      	movs	r2, #240	; 0xf0
 8000d32:	fa92 f2a2 	rbit	r2, r2
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	40d3      	lsrs	r3, r2
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_RCC_ClockConfig+0x1cc>)
 8000d3e:	5cd3      	ldrb	r3, [r2, r3]
 8000d40:	40d8      	lsrs	r0, r3
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <HAL_RCC_ClockConfig+0x1d0>)
 8000d44:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f7ff fa3e 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000d50:	2001      	movs	r0, #1
 8000d52:	bd70      	pop	{r4, r5, r6, pc}
 8000d54:	40022000 	.word	0x40022000
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	08001e0c 	.word	0x08001e0c
 8000d60:	20000000 	.word	0x20000000

08000d64 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d64:	4b01      	ldr	r3, [pc, #4]	; (8000d6c <HAL_RCC_GetHCLKFreq+0x8>)
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000000 	.word	0x20000000

08000d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d70:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000d72:	f7ff fff7 	bl	8000d64 <HAL_RCC_GetHCLKFreq>
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d82:	fa92 f2a2 	rbit	r2, r2
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	40d3      	lsrs	r3, r2
 8000d8c:	4a02      	ldr	r2, [pc, #8]	; (8000d98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
}    
 8000d90:	40d8      	lsrs	r0, r3
 8000d92:	bd08      	pop	{r3, pc}
 8000d94:	40021000 	.word	0x40021000
 8000d98:	08001e1c 	.word	0x08001e1c

08000d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000d9c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000d9e:	f7ff ffe1 	bl	8000d64 <HAL_RCC_GetHCLKFreq>
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000daa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000dae:	fa92 f2a2 	rbit	r2, r2
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	40d3      	lsrs	r3, r2
 8000db8:	4a02      	ldr	r2, [pc, #8]	; (8000dc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000dba:	5cd3      	ldrb	r3, [r2, r3]
} 
 8000dbc:	40d8      	lsrs	r0, r3
 8000dbe:	bd08      	pop	{r3, pc}
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	08001e1c 	.word	0x08001e1c

08000dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000dce:	6803      	ldr	r3, [r0, #0]
 8000dd0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000dd4:	d044      	beq.n	8000e60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dd6:	4b64      	ldr	r3, [pc, #400]	; (8000f68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000dde:	d179      	bne.n	8000ed4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000de0:	4b61      	ldr	r3, [pc, #388]	; (8000f68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000de2:	69da      	ldr	r2, [r3, #28]
 8000de4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000de8:	61da      	str	r2, [r3, #28]
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000df4:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df6:	4b5d      	ldr	r3, [pc, #372]	; (8000f6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000dfe:	d06b      	beq.n	8000ed8 <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000e00:	4b59      	ldr	r3, [pc, #356]	; (8000f68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000e02:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e04:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000e08:	d021      	beq.n	8000e4e <HAL_RCCEx_PeriphCLKConfig+0x86>
 8000e0a:	6862      	ldr	r2, [r4, #4]
 8000e0c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d01c      	beq.n	8000e4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e14:	4854      	ldr	r0, [pc, #336]	; (8000f68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000e16:	6a01      	ldr	r1, [r0, #32]
 8000e18:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8000e1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e20:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e24:	fab2 f282 	clz	r2, r2
 8000e28:	4f51      	ldr	r7, [pc, #324]	; (8000f70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000e2a:	443a      	add	r2, r7
 8000e2c:	0092      	lsls	r2, r2, #2
 8000e2e:	f04f 0e01 	mov.w	lr, #1
 8000e32:	f8c2 e000 	str.w	lr, [r2]
 8000e36:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e3a:	fab3 f383 	clz	r3, r3
 8000e3e:	443b      	add	r3, r7
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000e46:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e48:	f011 0f01 	tst.w	r1, #1
 8000e4c:	d158      	bne.n	8000f00 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000e4e:	4a46      	ldr	r2, [pc, #280]	; (8000f68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000e50:	6a13      	ldr	r3, [r2, #32]
 8000e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e56:	6861      	ldr	r1, [r4, #4]
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e5c:	2d00      	cmp	r5, #0
 8000e5e:	d17a      	bne.n	8000f56 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	f013 0f01 	tst.w	r3, #1
 8000e66:	d006      	beq.n	8000e76 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000e68:	4a3f      	ldr	r2, [pc, #252]	; (8000f68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000e6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e6c:	f023 0303 	bic.w	r3, r3, #3
 8000e70:	68a1      	ldr	r1, [r4, #8]
 8000e72:	430b      	orrs	r3, r1
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000e76:	6823      	ldr	r3, [r4, #0]
 8000e78:	f013 0f20 	tst.w	r3, #32
 8000e7c:	d006      	beq.n	8000e8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000e7e:	4a3a      	ldr	r2, [pc, #232]	; (8000f68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000e80:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e82:	f023 0310 	bic.w	r3, r3, #16
 8000e86:	68e1      	ldr	r1, [r4, #12]
 8000e88:	430b      	orrs	r3, r1
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000e8c:	6823      	ldr	r3, [r4, #0]
 8000e8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000e92:	d006      	beq.n	8000ea2 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000e94:	4a34      	ldr	r2, [pc, #208]	; (8000f68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000e96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000e98:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000e9c:	6921      	ldr	r1, [r4, #16]
 8000e9e:	430b      	orrs	r3, r1
 8000ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000ea8:	d006      	beq.n	8000eb8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000eaa:	4a2f      	ldr	r2, [pc, #188]	; (8000f68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000eac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000eae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000eb2:	6961      	ldr	r1, [r4, #20]
 8000eb4:	430b      	orrs	r3, r1
 8000eb6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000ebe:	d051      	beq.n	8000f64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8000ec0:	4a29      	ldr	r2, [pc, #164]	; (8000f68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000ec2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ec8:	69a1      	ldr	r1, [r4, #24]
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000ece:	2000      	movs	r0, #0
}
 8000ed0:	b003      	add	sp, #12
 8000ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8000ed4:	2500      	movs	r5, #0
 8000ed6:	e78e      	b.n	8000df6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ed8:	4a24      	ldr	r2, [pc, #144]	; (8000f6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8000eda:	6813      	ldr	r3, [r2, #0]
 8000edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000ee2:	f7ff f9a1 	bl	8000228 <HAL_GetTick>
 8000ee6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee8:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ef0:	d186      	bne.n	8000e00 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ef2:	f7ff f999 	bl	8000228 <HAL_GetTick>
 8000ef6:	1b80      	subs	r0, r0, r6
 8000ef8:	2864      	cmp	r0, #100	; 0x64
 8000efa:	d9f5      	bls.n	8000ee8 <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8000efc:	2003      	movs	r0, #3
 8000efe:	e7e7      	b.n	8000ed0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8000f00:	f7ff f992 	bl	8000228 <HAL_GetTick>
 8000f04:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f06:	e014      	b.n	8000f32 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000f0a:	6a19      	ldr	r1, [r3, #32]
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	fa93 f3a3 	rbit	r3, r3
 8000f12:	fab3 f383 	clz	r3, r3
 8000f16:	f003 031f 	and.w	r3, r3, #31
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	4219      	tst	r1, r3
 8000f22:	d194      	bne.n	8000e4e <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f24:	f7ff f980 	bl	8000228 <HAL_GetTick>
 8000f28:	1b80      	subs	r0, r0, r6
 8000f2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f2e:	4298      	cmp	r0, r3
 8000f30:	d816      	bhi.n	8000f60 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8000f32:	2302      	movs	r3, #2
 8000f34:	fa93 f2a3 	rbit	r2, r3
 8000f38:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3c:	fab3 f383 	clz	r3, r3
 8000f40:	095b      	lsrs	r3, r3, #5
 8000f42:	f043 0302 	orr.w	r3, r3, #2
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d0de      	beq.n	8000f08 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	fa93 f3a3 	rbit	r3, r3
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000f52:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000f54:	e7da      	b.n	8000f0c <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f56:	69d3      	ldr	r3, [r2, #28]
 8000f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	e77f      	b.n	8000e60 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8000f60:	2003      	movs	r0, #3
 8000f62:	e7b5      	b.n	8000ed0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 8000f64:	2000      	movs	r0, #0
 8000f66:	e7b3      	b.n	8000ed0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40007000 	.word	0x40007000
 8000f70:	10908100 	.word	0x10908100

08000f74 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000f74:	6802      	ldr	r2, [r0, #0]
 8000f76:	6813      	ldr	r3, [r2, #0]
 8000f78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8000f7c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f7e:	6802      	ldr	r2, [r0, #0]
 8000f80:	6893      	ldr	r3, [r2, #8]
 8000f82:	f023 0301 	bic.w	r3, r3, #1
 8000f86:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000f88:	2320      	movs	r3, #32
 8000f8a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8000f8e:	4770      	bx	lr

08000f90 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8000f90:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b20      	cmp	r3, #32
 8000f98:	d001      	beq.n	8000f9e <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8000f9e:	2900      	cmp	r1, #0
 8000fa0:	d047      	beq.n	8001032 <HAL_UART_Receive_IT+0xa2>
 8000fa2:	2a00      	cmp	r2, #0
 8000fa4:	d047      	beq.n	8001036 <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 8000fa6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d045      	beq.n	800103a <HAL_UART_Receive_IT+0xaa>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 8000fb4:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8000fb6:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8000fba:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8000fbe:	6883      	ldr	r3, [r0, #8]
 8000fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fc4:	d006      	beq.n	8000fd4 <HAL_UART_Receive_IT+0x44>
 8000fc6:	b9a3      	cbnz	r3, 8000ff2 <HAL_UART_Receive_IT+0x62>
 8000fc8:	6903      	ldr	r3, [r0, #16]
 8000fca:	b973      	cbnz	r3, 8000fea <HAL_UART_Receive_IT+0x5a>
 8000fcc:	23ff      	movs	r3, #255	; 0xff
 8000fce:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8000fd2:	e011      	b.n	8000ff8 <HAL_UART_Receive_IT+0x68>
 8000fd4:	6903      	ldr	r3, [r0, #16]
 8000fd6:	b923      	cbnz	r3, 8000fe2 <HAL_UART_Receive_IT+0x52>
 8000fd8:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000fdc:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8000fe0:	e00a      	b.n	8000ff8 <HAL_UART_Receive_IT+0x68>
 8000fe2:	23ff      	movs	r3, #255	; 0xff
 8000fe4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8000fe8:	e006      	b.n	8000ff8 <HAL_UART_Receive_IT+0x68>
 8000fea:	237f      	movs	r3, #127	; 0x7f
 8000fec:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8000ff0:	e002      	b.n	8000ff8 <HAL_UART_Receive_IT+0x68>
 8000ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ff6:	d012      	beq.n	800101e <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000ffc:	2222      	movs	r2, #34	; 0x22
 8000ffe:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8001002:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001006:	6801      	ldr	r1, [r0, #0]
 8001008:	688a      	ldr	r2, [r1, #8]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001010:	6801      	ldr	r1, [r0, #0]
 8001012:	680a      	ldr	r2, [r1, #0]
 8001014:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8001018:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 800101a:	4618      	mov	r0, r3
 800101c:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800101e:	6903      	ldr	r3, [r0, #16]
 8001020:	b91b      	cbnz	r3, 800102a <HAL_UART_Receive_IT+0x9a>
 8001022:	237f      	movs	r3, #127	; 0x7f
 8001024:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001028:	e7e6      	b.n	8000ff8 <HAL_UART_Receive_IT+0x68>
 800102a:	233f      	movs	r3, #63	; 0x3f
 800102c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001030:	e7e2      	b.n	8000ff8 <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 8001032:	2001      	movs	r0, #1
 8001034:	4770      	bx	lr
 8001036:	2001      	movs	r0, #1
 8001038:	4770      	bx	lr
    __HAL_LOCK(huart);
 800103a:	2002      	movs	r0, #2
}
 800103c:	4770      	bx	lr

0800103e <HAL_UART_TxCpltCallback>:
{
 800103e:	4770      	bx	lr

08001040 <HAL_UART_ErrorCallback>:
{
 8001040:	4770      	bx	lr

08001042 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001042:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001044:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001046:	2300      	movs	r3, #0
 8001048:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800104c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8001050:	f7ff fff6 	bl	8001040 <HAL_UART_ErrorCallback>
 8001054:	bd08      	pop	{r3, pc}
	...

08001058 <UART_SetConfig>:
{
 8001058:	b538      	push	{r3, r4, r5, lr}
 800105a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800105c:	6883      	ldr	r3, [r0, #8]
 800105e:	6902      	ldr	r2, [r0, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	6942      	ldr	r2, [r0, #20]
 8001064:	4313      	orrs	r3, r2
 8001066:	69c2      	ldr	r2, [r0, #28]
 8001068:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800106a:	6801      	ldr	r1, [r0, #0]
 800106c:	6808      	ldr	r0, [r1, #0]
 800106e:	4a64      	ldr	r2, [pc, #400]	; (8001200 <UART_SetConfig+0x1a8>)
 8001070:	4002      	ands	r2, r0
 8001072:	4313      	orrs	r3, r2
 8001074:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001076:	6822      	ldr	r2, [r4, #0]
 8001078:	6853      	ldr	r3, [r2, #4]
 800107a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800107e:	68e1      	ldr	r1, [r4, #12]
 8001080:	430b      	orrs	r3, r1
 8001082:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001084:	69a3      	ldr	r3, [r4, #24]
 8001086:	6a22      	ldr	r2, [r4, #32]
 8001088:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800108a:	6821      	ldr	r1, [r4, #0]
 800108c:	688a      	ldr	r2, [r1, #8]
 800108e:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8001092:	4313      	orrs	r3, r2
 8001094:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001096:	6825      	ldr	r5, [r4, #0]
 8001098:	4b5a      	ldr	r3, [pc, #360]	; (8001204 <UART_SetConfig+0x1ac>)
 800109a:	429d      	cmp	r5, r3
 800109c:	d015      	beq.n	80010ca <UART_SetConfig+0x72>
 800109e:	4b5a      	ldr	r3, [pc, #360]	; (8001208 <UART_SetConfig+0x1b0>)
 80010a0:	429d      	cmp	r5, r3
 80010a2:	d029      	beq.n	80010f8 <UART_SetConfig+0xa0>
 80010a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010a8:	429d      	cmp	r5, r3
 80010aa:	d021      	beq.n	80010f0 <UART_SetConfig+0x98>
 80010ac:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010ae:	69e2      	ldr	r2, [r4, #28]
 80010b0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80010b4:	d022      	beq.n	80010fc <UART_SetConfig+0xa4>
    switch (clocksource)
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	f200 809f 	bhi.w	80011fa <UART_SetConfig+0x1a2>
 80010bc:	e8df f003 	tbb	[pc, r3]
 80010c0:	9d7c7166 	.word	0x9d7c7166
 80010c4:	9d9d9d88 	.word	0x9d9d9d88
 80010c8:	93          	.byte	0x93
 80010c9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010ca:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d809      	bhi.n	80010ec <UART_SetConfig+0x94>
 80010d8:	e8df f003 	tbb	[pc, r3]
 80010dc:	0c060402 	.word	0x0c060402
 80010e0:	2300      	movs	r3, #0
 80010e2:	e7e4      	b.n	80010ae <UART_SetConfig+0x56>
 80010e4:	2304      	movs	r3, #4
 80010e6:	e7e2      	b.n	80010ae <UART_SetConfig+0x56>
 80010e8:	2308      	movs	r3, #8
 80010ea:	e7e0      	b.n	80010ae <UART_SetConfig+0x56>
 80010ec:	2310      	movs	r3, #16
 80010ee:	e7de      	b.n	80010ae <UART_SetConfig+0x56>
 80010f0:	2300      	movs	r3, #0
 80010f2:	e7dc      	b.n	80010ae <UART_SetConfig+0x56>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e7da      	b.n	80010ae <UART_SetConfig+0x56>
 80010f8:	2300      	movs	r3, #0
 80010fa:	e7d8      	b.n	80010ae <UART_SetConfig+0x56>
    switch (clocksource)
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d842      	bhi.n	8001186 <UART_SetConfig+0x12e>
 8001100:	e8df f003 	tbb	[pc, r3]
 8001104:	41221705 	.word	0x41221705
 8001108:	4141412d 	.word	0x4141412d
 800110c:	38          	.byte	0x38
 800110d:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800110e:	f7ff fe2f 	bl	8000d70 <HAL_RCC_GetPCLK1Freq>
 8001112:	6862      	ldr	r2, [r4, #4]
 8001114:	0853      	lsrs	r3, r2, #1
 8001116:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800111a:	fbb3 f3f2 	udiv	r3, r3, r2
 800111e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001120:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001122:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001126:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800112a:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 800112c:	6822      	ldr	r2, [r4, #0]
 800112e:	60d3      	str	r3, [r2, #12]
 8001130:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001132:	f7ff fe33 	bl	8000d9c <HAL_RCC_GetPCLK2Freq>
 8001136:	6862      	ldr	r2, [r4, #4]
 8001138:	0853      	lsrs	r3, r2, #1
 800113a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800113e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001142:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001144:	2000      	movs	r0, #0
        break;
 8001146:	e7ec      	b.n	8001122 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001148:	6862      	ldr	r2, [r4, #4]
 800114a:	0853      	lsrs	r3, r2, #1
 800114c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001150:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001154:	fbb3 f3f2 	udiv	r3, r3, r2
 8001158:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800115a:	2000      	movs	r0, #0
        break;
 800115c:	e7e1      	b.n	8001122 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800115e:	f7ff fcdf 	bl	8000b20 <HAL_RCC_GetSysClockFreq>
 8001162:	6862      	ldr	r2, [r4, #4]
 8001164:	0853      	lsrs	r3, r2, #1
 8001166:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800116a:	fbb3 f3f2 	udiv	r3, r3, r2
 800116e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001170:	2000      	movs	r0, #0
        break;
 8001172:	e7d6      	b.n	8001122 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001174:	6862      	ldr	r2, [r4, #4]
 8001176:	0853      	lsrs	r3, r2, #1
 8001178:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800117c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001180:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001182:	2000      	movs	r0, #0
        break;
 8001184:	e7cd      	b.n	8001122 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8001186:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001188:	2300      	movs	r3, #0
 800118a:	e7ca      	b.n	8001122 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800118c:	f7ff fdf0 	bl	8000d70 <HAL_RCC_GetPCLK1Freq>
 8001190:	6863      	ldr	r3, [r4, #4]
 8001192:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001196:	fbb0 f0f3 	udiv	r0, r0, r3
 800119a:	b280      	uxth	r0, r0
 800119c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800119e:	2000      	movs	r0, #0
        break;
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80011a2:	f7ff fdfb 	bl	8000d9c <HAL_RCC_GetPCLK2Freq>
 80011a6:	6863      	ldr	r3, [r4, #4]
 80011a8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80011ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80011b0:	b280      	uxth	r0, r0
 80011b2:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80011b4:	2000      	movs	r0, #0
        break;
 80011b6:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80011b8:	6862      	ldr	r2, [r4, #4]
 80011ba:	0853      	lsrs	r3, r2, #1
 80011bc:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80011c0:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80011c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80011cc:	2000      	movs	r0, #0
        break;
 80011ce:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80011d0:	f7ff fca6 	bl	8000b20 <HAL_RCC_GetSysClockFreq>
 80011d4:	6863      	ldr	r3, [r4, #4]
 80011d6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80011da:	fbb0 f0f3 	udiv	r0, r0, r3
 80011de:	b280      	uxth	r0, r0
 80011e0:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80011e2:	2000      	movs	r0, #0
        break;
 80011e4:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80011e6:	6862      	ldr	r2, [r4, #4]
 80011e8:	0853      	lsrs	r3, r2, #1
 80011ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80011ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80011f6:	2000      	movs	r0, #0
        break;
 80011f8:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
}
 80011fc:	bd38      	pop	{r3, r4, r5, pc}
 80011fe:	bf00      	nop
 8001200:	efff69f3 	.word	0xefff69f3
 8001204:	40013800 	.word	0x40013800
 8001208:	40004400 	.word	0x40004400

0800120c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800120c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800120e:	f013 0f01 	tst.w	r3, #1
 8001212:	d006      	beq.n	8001222 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001214:	6802      	ldr	r2, [r0, #0]
 8001216:	6853      	ldr	r3, [r2, #4]
 8001218:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800121c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800121e:	430b      	orrs	r3, r1
 8001220:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001222:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001224:	f013 0f02 	tst.w	r3, #2
 8001228:	d006      	beq.n	8001238 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800122a:	6802      	ldr	r2, [r0, #0]
 800122c:	6853      	ldr	r3, [r2, #4]
 800122e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001232:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001234:	430b      	orrs	r3, r1
 8001236:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001238:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800123a:	f013 0f04 	tst.w	r3, #4
 800123e:	d006      	beq.n	800124e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001240:	6802      	ldr	r2, [r0, #0]
 8001242:	6853      	ldr	r3, [r2, #4]
 8001244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001248:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800124a:	430b      	orrs	r3, r1
 800124c:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800124e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001250:	f013 0f08 	tst.w	r3, #8
 8001254:	d006      	beq.n	8001264 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001256:	6802      	ldr	r2, [r0, #0]
 8001258:	6853      	ldr	r3, [r2, #4]
 800125a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800125e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001260:	430b      	orrs	r3, r1
 8001262:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001264:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001266:	f013 0f10 	tst.w	r3, #16
 800126a:	d006      	beq.n	800127a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800126c:	6802      	ldr	r2, [r0, #0]
 800126e:	6893      	ldr	r3, [r2, #8]
 8001270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001274:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001276:	430b      	orrs	r3, r1
 8001278:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800127a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800127c:	f013 0f20 	tst.w	r3, #32
 8001280:	d006      	beq.n	8001290 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001282:	6802      	ldr	r2, [r0, #0]
 8001284:	6893      	ldr	r3, [r2, #8]
 8001286:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800128a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800128c:	430b      	orrs	r3, r1
 800128e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001290:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001292:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001296:	d00a      	beq.n	80012ae <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001298:	6802      	ldr	r2, [r0, #0]
 800129a:	6853      	ldr	r3, [r2, #4]
 800129c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012a0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80012a2:	430b      	orrs	r3, r1
 80012a4:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80012a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80012ac:	d00b      	beq.n	80012c6 <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80012ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80012b4:	d006      	beq.n	80012c4 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80012b6:	6802      	ldr	r2, [r0, #0]
 80012b8:	6853      	ldr	r3, [r2, #4]
 80012ba:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80012be:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80012c0:	430b      	orrs	r3, r1
 80012c2:	6053      	str	r3, [r2, #4]
 80012c4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80012c6:	6802      	ldr	r2, [r0, #0]
 80012c8:	6853      	ldr	r3, [r2, #4]
 80012ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80012ce:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80012d0:	430b      	orrs	r3, r1
 80012d2:	6053      	str	r3, [r2, #4]
 80012d4:	e7eb      	b.n	80012ae <UART_AdvFeatureConfig+0xa2>

080012d6 <UART_WaitOnFlagUntilTimeout>:
{
 80012d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012da:	4605      	mov	r5, r0
 80012dc:	460f      	mov	r7, r1
 80012de:	4616      	mov	r6, r2
 80012e0:	4698      	mov	r8, r3
 80012e2:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80012e4:	682b      	ldr	r3, [r5, #0]
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	ea37 0303 	bics.w	r3, r7, r3
 80012ec:	bf0c      	ite	eq
 80012ee:	2301      	moveq	r3, #1
 80012f0:	2300      	movne	r3, #0
 80012f2:	42b3      	cmp	r3, r6
 80012f4:	d11e      	bne.n	8001334 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80012f6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80012fa:	d0f3      	beq.n	80012e4 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80012fc:	b12c      	cbz	r4, 800130a <UART_WaitOnFlagUntilTimeout+0x34>
 80012fe:	f7fe ff93 	bl	8000228 <HAL_GetTick>
 8001302:	eba0 0008 	sub.w	r0, r0, r8
 8001306:	4284      	cmp	r4, r0
 8001308:	d2ec      	bcs.n	80012e4 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800130a:	682a      	ldr	r2, [r5, #0]
 800130c:	6813      	ldr	r3, [r2, #0]
 800130e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001312:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001314:	682a      	ldr	r2, [r5, #0]
 8001316:	6893      	ldr	r3, [r2, #8]
 8001318:	f023 0301 	bic.w	r3, r3, #1
 800131c:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800131e:	2320      	movs	r3, #32
 8001320:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001324:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001328:	2300      	movs	r3, #0
 800132a:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 800132e:	2003      	movs	r0, #3
 8001330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8001334:	2000      	movs	r0, #0
}
 8001336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800133a <HAL_UART_Transmit>:
{
 800133a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001342:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b20      	cmp	r3, #32
 800134a:	d004      	beq.n	8001356 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 800134c:	2302      	movs	r3, #2
}
 800134e:	4618      	mov	r0, r3
 8001350:	b002      	add	sp, #8
 8001352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001356:	4604      	mov	r4, r0
 8001358:	460d      	mov	r5, r1
 800135a:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 800135c:	2900      	cmp	r1, #0
 800135e:	d04e      	beq.n	80013fe <HAL_UART_Transmit+0xc4>
 8001360:	2a00      	cmp	r2, #0
 8001362:	d04e      	beq.n	8001402 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8001364:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <HAL_UART_Transmit+0x36>
 800136c:	2302      	movs	r3, #2
 800136e:	e7ee      	b.n	800134e <HAL_UART_Transmit+0x14>
 8001370:	2301      	movs	r3, #1
 8001372:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001376:	2300      	movs	r3, #0
 8001378:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800137a:	2321      	movs	r3, #33	; 0x21
 800137c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8001380:	f7fe ff52 	bl	8000228 <HAL_GetTick>
 8001384:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001386:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800138a:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800138e:	e003      	b.n	8001398 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	782a      	ldrb	r2, [r5, #0]
 8001394:	851a      	strh	r2, [r3, #40]	; 0x28
 8001396:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 8001398:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800139c:	b29b      	uxth	r3, r3
 800139e:	b1e3      	cbz	r3, 80013da <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 80013a0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	3b01      	subs	r3, #1
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013ae:	9600      	str	r6, [sp, #0]
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	4620      	mov	r0, r4
 80013b8:	f7ff ff8d 	bl	80012d6 <UART_WaitOnFlagUntilTimeout>
 80013bc:	bb18      	cbnz	r0, 8001406 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013be:	68a3      	ldr	r3, [r4, #8]
 80013c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013c4:	d1e4      	bne.n	8001390 <HAL_UART_Transmit+0x56>
 80013c6:	6923      	ldr	r3, [r4, #16]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1e1      	bne.n	8001390 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80013cc:	6822      	ldr	r2, [r4, #0]
 80013ce:	f835 3b02 	ldrh.w	r3, [r5], #2
 80013d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013d6:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 80013d8:	e7de      	b.n	8001398 <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80013da:	9600      	str	r6, [sp, #0]
 80013dc:	463b      	mov	r3, r7
 80013de:	2200      	movs	r2, #0
 80013e0:	2140      	movs	r1, #64	; 0x40
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff ff77 	bl	80012d6 <UART_WaitOnFlagUntilTimeout>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b108      	cbz	r0, 80013f0 <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e7ae      	b.n	800134e <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 80013f0:	2220      	movs	r2, #32
 80013f2:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    return HAL_OK;
 80013fc:	e7a7      	b.n	800134e <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e7a5      	b.n	800134e <HAL_UART_Transmit+0x14>
 8001402:	2301      	movs	r3, #1
 8001404:	e7a3      	b.n	800134e <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e7a1      	b.n	800134e <HAL_UART_Transmit+0x14>

0800140a <UART_CheckIdleState>:
{
 800140a:	b530      	push	{r4, r5, lr}
 800140c:	b083      	sub	sp, #12
 800140e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001410:	2300      	movs	r3, #0
 8001412:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001414:	f7fe ff08 	bl	8000228 <HAL_GetTick>
 8001418:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f013 0f08 	tst.w	r3, #8
 8001422:	d10e      	bne.n	8001442 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001424:	6823      	ldr	r3, [r4, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f013 0f04 	tst.w	r3, #4
 800142c:	d117      	bne.n	800145e <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 800142e:	2320      	movs	r3, #32
 8001430:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8001434:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8001438:	2000      	movs	r0, #0
 800143a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 800143e:	b003      	add	sp, #12
 8001440:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001442:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	4603      	mov	r3, r0
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001450:	4620      	mov	r0, r4
 8001452:	f7ff ff40 	bl	80012d6 <UART_WaitOnFlagUntilTimeout>
 8001456:	2800      	cmp	r0, #0
 8001458:	d0e4      	beq.n	8001424 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800145a:	2003      	movs	r0, #3
 800145c:	e7ef      	b.n	800143e <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800145e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	462b      	mov	r3, r5
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800146c:	4620      	mov	r0, r4
 800146e:	f7ff ff32 	bl	80012d6 <UART_WaitOnFlagUntilTimeout>
 8001472:	2800      	cmp	r0, #0
 8001474:	d0db      	beq.n	800142e <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8001476:	2003      	movs	r0, #3
 8001478:	e7e1      	b.n	800143e <UART_CheckIdleState+0x34>

0800147a <HAL_UART_Init>:
  if(huart == NULL)
 800147a:	b378      	cbz	r0, 80014dc <HAL_UART_Init+0x62>
{
 800147c:	b510      	push	{r4, lr}
 800147e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8001480:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001484:	b30b      	cbz	r3, 80014ca <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001486:	2324      	movs	r3, #36	; 0x24
 8001488:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800148c:	6822      	ldr	r2, [r4, #0]
 800148e:	6813      	ldr	r3, [r2, #0]
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001496:	4620      	mov	r0, r4
 8001498:	f7ff fdde 	bl	8001058 <UART_SetConfig>
 800149c:	2801      	cmp	r0, #1
 800149e:	d01f      	beq.n	80014e0 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80014a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014a2:	b9bb      	cbnz	r3, 80014d4 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014a4:	6822      	ldr	r2, [r4, #0]
 80014a6:	6853      	ldr	r3, [r2, #4]
 80014a8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80014ac:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014ae:	6822      	ldr	r2, [r4, #0]
 80014b0:	6893      	ldr	r3, [r2, #8]
 80014b2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80014b6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80014b8:	6822      	ldr	r2, [r4, #0]
 80014ba:	6813      	ldr	r3, [r2, #0]
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80014c2:	4620      	mov	r0, r4
 80014c4:	f7ff ffa1 	bl	800140a <UART_CheckIdleState>
 80014c8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80014ca:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80014ce:	f000 fa8d 	bl	80019ec <HAL_UART_MspInit>
 80014d2:	e7d8      	b.n	8001486 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7ff fe99 	bl	800120c <UART_AdvFeatureConfig>
 80014da:	e7e3      	b.n	80014a4 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80014dc:	2001      	movs	r0, #1
 80014de:	4770      	bx	lr
}
 80014e0:	bd10      	pop	{r4, pc}

080014e2 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80014e2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b21      	cmp	r3, #33	; 0x21
 80014ea:	d001      	beq.n	80014f0 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80014ec:	2002      	movs	r0, #2
  }
}
 80014ee:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 80014f0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b193      	cbz	r3, 800151e <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014f8:	6883      	ldr	r3, [r0, #8]
 80014fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014fe:	d01a      	beq.n	8001536 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8001500:	6802      	ldr	r2, [r0, #0]
 8001502:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001504:	1c59      	adds	r1, r3, #1
 8001506:	64c1      	str	r1, [r0, #76]	; 0x4c
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800150c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001510:	b29b      	uxth	r3, r3
 8001512:	3b01      	subs	r3, #1
 8001514:	b29b      	uxth	r3, r3
 8001516:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 800151a:	2000      	movs	r0, #0
 800151c:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800151e:	6802      	ldr	r2, [r0, #0]
 8001520:	6813      	ldr	r3, [r2, #0]
 8001522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001526:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001528:	6802      	ldr	r2, [r0, #0]
 800152a:	6813      	ldr	r3, [r2, #0]
 800152c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001530:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8001532:	2000      	movs	r0, #0
 8001534:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001536:	6903      	ldr	r3, [r0, #16]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1e1      	bne.n	8001500 <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 800153c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800153e:	6802      	ldr	r2, [r0, #0]
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001546:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8001548:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800154a:	3302      	adds	r3, #2
 800154c:	64c3      	str	r3, [r0, #76]	; 0x4c
 800154e:	e7dd      	b.n	800150c <UART_Transmit_IT+0x2a>

08001550 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001550:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001552:	6801      	ldr	r1, [r0, #0]
 8001554:	680b      	ldr	r3, [r1, #0]
 8001556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800155a:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800155c:	2320      	movs	r3, #32
 800155e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8001562:	f7ff fd6c 	bl	800103e <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8001566:	2000      	movs	r0, #0
 8001568:	bd08      	pop	{r3, pc}

0800156a <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 800156a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800156e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b22      	cmp	r3, #34	; 0x22
 8001576:	d006      	beq.n	8001586 <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001578:	6802      	ldr	r2, [r0, #0]
 800157a:	6993      	ldr	r3, [r2, #24]
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8001582:	2002      	movs	r0, #2
 8001584:	4770      	bx	lr
{
 8001586:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001588:	6803      	ldr	r3, [r0, #0]
 800158a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800158c:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800158e:	6881      	ldr	r1, [r0, #8]
 8001590:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001594:	d00f      	beq.n	80015b6 <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001596:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8001598:	1c4c      	adds	r4, r1, #1
 800159a:	6544      	str	r4, [r0, #84]	; 0x54
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	401a      	ands	r2, r3
 80015a0:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 80015a2:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	3b01      	subs	r3, #1
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80015b0:	b15b      	cbz	r3, 80015ca <UART_Receive_IT+0x60>
    return HAL_OK;
 80015b2:	2000      	movs	r0, #0
  }
}
 80015b4:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015b6:	6901      	ldr	r1, [r0, #16]
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d1ec      	bne.n	8001596 <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80015bc:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 80015be:	401a      	ands	r2, r3
 80015c0:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 80015c2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80015c4:	3302      	adds	r3, #2
 80015c6:	6543      	str	r3, [r0, #84]	; 0x54
 80015c8:	e7eb      	b.n	80015a2 <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015ca:	6802      	ldr	r2, [r0, #0]
 80015cc:	6813      	ldr	r3, [r2, #0]
 80015ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80015d2:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015d4:	6802      	ldr	r2, [r0, #0]
 80015d6:	6893      	ldr	r3, [r2, #8]
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80015de:	2320      	movs	r3, #32
 80015e0:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80015e4:	f000 fa8a 	bl	8001afc <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80015e8:	2000      	movs	r0, #0
 80015ea:	bd10      	pop	{r4, pc}

080015ec <HAL_UART_IRQHandler>:
{
 80015ec:	b538      	push	{r3, r4, r5, lr}
 80015ee:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80015f0:	6802      	ldr	r2, [r0, #0]
 80015f2:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80015f4:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 80015f6:	f013 050f 	ands.w	r5, r3, #15
 80015fa:	d105      	bne.n	8001608 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015fc:	f013 0f20 	tst.w	r3, #32
 8001600:	d002      	beq.n	8001608 <HAL_UART_IRQHandler+0x1c>
 8001602:	f011 0f20 	tst.w	r1, #32
 8001606:	d160      	bne.n	80016ca <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 8001608:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 800160a:	2d00      	cmp	r5, #0
 800160c:	d072      	beq.n	80016f4 <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800160e:	f010 0501 	ands.w	r5, r0, #1
 8001612:	d102      	bne.n	800161a <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001614:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001618:	d06c      	beq.n	80016f4 <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800161a:	f013 0f01 	tst.w	r3, #1
 800161e:	d007      	beq.n	8001630 <HAL_UART_IRQHandler+0x44>
 8001620:	f411 7f80 	tst.w	r1, #256	; 0x100
 8001624:	d004      	beq.n	8001630 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8001626:	2001      	movs	r0, #1
 8001628:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800162a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800162c:	4302      	orrs	r2, r0
 800162e:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001630:	f013 0f02 	tst.w	r3, #2
 8001634:	d007      	beq.n	8001646 <HAL_UART_IRQHandler+0x5a>
 8001636:	b135      	cbz	r5, 8001646 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001638:	6822      	ldr	r2, [r4, #0]
 800163a:	2002      	movs	r0, #2
 800163c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800163e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001640:	f042 0204 	orr.w	r2, r2, #4
 8001644:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001646:	f013 0f04 	tst.w	r3, #4
 800164a:	d007      	beq.n	800165c <HAL_UART_IRQHandler+0x70>
 800164c:	b135      	cbz	r5, 800165c <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800164e:	6822      	ldr	r2, [r4, #0]
 8001650:	2004      	movs	r0, #4
 8001652:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001654:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001656:	f042 0202 	orr.w	r2, r2, #2
 800165a:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800165c:	f013 0f08 	tst.w	r3, #8
 8001660:	d009      	beq.n	8001676 <HAL_UART_IRQHandler+0x8a>
 8001662:	f011 0f20 	tst.w	r1, #32
 8001666:	d100      	bne.n	800166a <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001668:	b12d      	cbz	r5, 8001676 <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800166a:	6822      	ldr	r2, [r4, #0]
 800166c:	2008      	movs	r0, #8
 800166e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001670:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001672:	4302      	orrs	r2, r0
 8001674:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001676:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001678:	2a00      	cmp	r2, #0
 800167a:	d04d      	beq.n	8001718 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800167c:	f013 0f20 	tst.w	r3, #32
 8001680:	d002      	beq.n	8001688 <HAL_UART_IRQHandler+0x9c>
 8001682:	f011 0f20 	tst.w	r1, #32
 8001686:	d123      	bne.n	80016d0 <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001688:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800168a:	f013 0f08 	tst.w	r3, #8
 800168e:	d104      	bne.n	800169a <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001694:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001698:	d026      	beq.n	80016e8 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 800169a:	4620      	mov	r0, r4
 800169c:	f7ff fc6a 	bl	8000f74 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80016a8:	d01a      	beq.n	80016e0 <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016b0:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80016b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016b4:	b183      	cbz	r3, 80016d8 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80016b6:	4a23      	ldr	r2, [pc, #140]	; (8001744 <HAL_UART_IRQHandler+0x158>)
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80016ba:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80016bc:	f7fe fe35 	bl	800032a <HAL_DMA_Abort_IT>
 80016c0:	b350      	cbz	r0, 8001718 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80016c2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80016c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80016c6:	4798      	blx	r3
 80016c8:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 80016ca:	f7ff ff4e 	bl	800156a <UART_Receive_IT>
      return;
 80016ce:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 80016d0:	4620      	mov	r0, r4
 80016d2:	f7ff ff4a 	bl	800156a <UART_Receive_IT>
 80016d6:	e7d7      	b.n	8001688 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 80016d8:	4620      	mov	r0, r4
 80016da:	f7ff fcb1 	bl	8001040 <HAL_UART_ErrorCallback>
 80016de:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7ff fcad 	bl	8001040 <HAL_UART_ErrorCallback>
 80016e6:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 80016e8:	4620      	mov	r0, r4
 80016ea:	f7ff fca9 	bl	8001040 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	66e3      	str	r3, [r4, #108]	; 0x6c
 80016f2:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80016f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80016f8:	d002      	beq.n	8001700 <HAL_UART_IRQHandler+0x114>
 80016fa:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80016fe:	d10c      	bne.n	800171a <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001700:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001704:	d002      	beq.n	800170c <HAL_UART_IRQHandler+0x120>
 8001706:	f011 0f80 	tst.w	r1, #128	; 0x80
 800170a:	d112      	bne.n	8001732 <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800170c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001710:	d002      	beq.n	8001718 <HAL_UART_IRQHandler+0x12c>
 8001712:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001716:	d110      	bne.n	800173a <HAL_UART_IRQHandler+0x14e>
 8001718:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 800171a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800171e:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8001720:	2320      	movs	r3, #32
 8001722:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8001726:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 800172a:	4620      	mov	r0, r4
 800172c:	f000 f80c 	bl	8001748 <HAL_UARTEx_WakeupCallback>
    return;
 8001730:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 8001732:	4620      	mov	r0, r4
 8001734:	f7ff fed5 	bl	80014e2 <UART_Transmit_IT>
    return;
 8001738:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff ff08 	bl	8001550 <UART_EndTransmit_IT>
    return;
 8001740:	e7ea      	b.n	8001718 <HAL_UART_IRQHandler+0x12c>
 8001742:	bf00      	nop
 8001744:	08001043 	.word	0x08001043

08001748 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8001748:	4770      	bx	lr
	...

0800174c <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
static void MX_GPIO_Init(void)
{
 800174c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001750:	4b45      	ldr	r3, [pc, #276]	; (8001868 <MX_GPIO_Init+0x11c>)
 8001752:	695a      	ldr	r2, [r3, #20]
 8001754:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001758:	615a      	str	r2, [r3, #20]
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001760:	9201      	str	r2, [sp, #4]
 8001762:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800176a:	615a      	str	r2, [r3, #20]
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001772:	9202      	str	r2, [sp, #8]
 8001774:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800177c:	615a      	str	r2, [r3, #20]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001784:	9203      	str	r2, [sp, #12]
 8001786:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001796:	9304      	str	r3, [sp, #16]
 8001798:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80017a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a4:	f7fe feb0 	bl	8000508 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80017a8:	4e30      	ldr	r6, [pc, #192]	; (800186c <MX_GPIO_Init+0x120>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80017b0:	4630      	mov	r0, r6
 80017b2:	f7fe fea9 	bl	8000508 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80017b6:	4d2e      	ldr	r5, [pc, #184]	; (8001870 <MX_GPIO_Init+0x124>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	4628      	mov	r0, r5
 80017be:	f7fe fea3 	bl	8000508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017c8:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <MX_GPIO_Init+0x128>)
 80017ca:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2400      	movs	r4, #0
 80017ce:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017d0:	a905      	add	r1, sp, #20
 80017d2:	4628      	mov	r0, r5
 80017d4:	f7fe fdce 	bl	8000374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017d8:	2703      	movs	r7, #3
 80017da:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017dc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e0:	a905      	add	r1, sp, #20
 80017e2:	4628      	mov	r0, r5
 80017e4:	f7fe fdc6 	bl	8000374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80017e8:	2313      	movs	r3, #19
 80017ea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	a905      	add	r1, sp, #20
 80017f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f6:	f7fe fdbd 	bl	8000374 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017fa:	230c      	movs	r3, #12
 80017fc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001804:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001806:	2307      	movs	r3, #7
 8001808:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	a905      	add	r1, sp, #20
 800180c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001810:	f7fe fdb0 	bl	8000374 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8001814:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001818:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181a:	2701      	movs	r7, #1
 800181c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	a905      	add	r1, sp, #20
 8001824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001828:	f7fe fda4 	bl	8000374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800182c:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8001830:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	a905      	add	r1, sp, #20
 800183a:	4630      	mov	r0, r6
 800183c:	f7fe fd9a 	bl	8000374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184a:	a905      	add	r1, sp, #20
 800184c:	4628      	mov	r0, r5
 800184e:	f7fe fd91 	bl	8000374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001852:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001856:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001858:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185c:	a905      	add	r1, sp, #20
 800185e:	4630      	mov	r0, r6
 8001860:	f7fe fd88 	bl	8000374 <HAL_GPIO_Init>

}
 8001864:	b00b      	add	sp, #44	; 0x2c
 8001866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001868:	40021000 	.word	0x40021000
 800186c:	48000400 	.word	0x48000400
 8001870:	48000800 	.word	0x48000800
 8001874:	10210000 	.word	0x10210000

08001878 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001878:	e7fe      	b.n	8001878 <_Error_Handler>
	...

0800187c <MX_USART1_UART_Init>:
{
 800187c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800187e:	480c      	ldr	r0, [pc, #48]	; (80018b0 <MX_USART1_UART_Init+0x34>)
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_USART1_UART_Init+0x38>)
 8001882:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001884:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001888:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800188a:	2300      	movs	r3, #0
 800188c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800188e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001890:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001892:	220c      	movs	r2, #12
 8001894:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001896:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800189c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800189e:	f7ff fdec 	bl	800147a <HAL_UART_Init>
 80018a2:	b900      	cbnz	r0, 80018a6 <MX_USART1_UART_Init+0x2a>
 80018a4:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80018a6:	21ba      	movs	r1, #186	; 0xba
 80018a8:	4803      	ldr	r0, [pc, #12]	; (80018b8 <MX_USART1_UART_Init+0x3c>)
 80018aa:	f7ff ffe5 	bl	8001878 <_Error_Handler>
 80018ae:	bf00      	nop
 80018b0:	20000028 	.word	0x20000028
 80018b4:	40013800 	.word	0x40013800
 80018b8:	08001dfc 	.word	0x08001dfc

080018bc <SystemClock_Config>:
{
 80018bc:	b500      	push	{lr}
 80018be:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018c0:	2302      	movs	r3, #2
 80018c2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c4:	2201      	movs	r2, #1
 80018c6:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80018c8:	2210      	movs	r2, #16
 80018ca:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018cc:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ce:	2300      	movs	r3, #0
 80018d0:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80018d2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80018d6:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d8:	a80c      	add	r0, sp, #48	; 0x30
 80018da:	f7fe fe1b 	bl	8000514 <HAL_RCC_OscConfig>
 80018de:	bb48      	cbnz	r0, 8001934 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e0:	230f      	movs	r3, #15
 80018e2:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e4:	2102      	movs	r1, #2
 80018e6:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018f0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018f4:	a807      	add	r0, sp, #28
 80018f6:	f7ff f94b 	bl	8000b90 <HAL_RCC_ClockConfig>
 80018fa:	b9f8      	cbnz	r0, 800193c <SystemClock_Config+0x80>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018fc:	2301      	movs	r3, #1
 80018fe:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001900:	2300      	movs	r3, #0
 8001902:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001904:	4668      	mov	r0, sp
 8001906:	f7ff fa5f 	bl	8000dc8 <HAL_RCCEx_PeriphCLKConfig>
 800190a:	b9d8      	cbnz	r0, 8001944 <SystemClock_Config+0x88>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800190c:	f7ff fa2a 	bl	8000d64 <HAL_RCC_GetHCLKFreq>
 8001910:	4b0e      	ldr	r3, [pc, #56]	; (800194c <SystemClock_Config+0x90>)
 8001912:	fba3 3000 	umull	r3, r0, r3, r0
 8001916:	0980      	lsrs	r0, r0, #6
 8001918:	f7fe fcdc 	bl	80002d4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800191c:	2004      	movs	r0, #4
 800191e:	f7fe fcef 	bl	8000300 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	4611      	mov	r1, r2
 8001926:	f04f 30ff 	mov.w	r0, #4294967295
 800192a:	f7fe fc95 	bl	8000258 <HAL_NVIC_SetPriority>
}
 800192e:	b017      	add	sp, #92	; 0x5c
 8001930:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8001934:	2186      	movs	r1, #134	; 0x86
 8001936:	4806      	ldr	r0, [pc, #24]	; (8001950 <SystemClock_Config+0x94>)
 8001938:	f7ff ff9e 	bl	8001878 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800193c:	2194      	movs	r1, #148	; 0x94
 800193e:	4804      	ldr	r0, [pc, #16]	; (8001950 <SystemClock_Config+0x94>)
 8001940:	f7ff ff9a 	bl	8001878 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8001944:	219b      	movs	r1, #155	; 0x9b
 8001946:	4802      	ldr	r0, [pc, #8]	; (8001950 <SystemClock_Config+0x94>)
 8001948:	f7ff ff96 	bl	8001878 <_Error_Handler>
 800194c:	10624dd3 	.word	0x10624dd3
 8001950:	08001dfc 	.word	0x08001dfc

08001954 <main>:
{
 8001954:	b508      	push	{r3, lr}
  HAL_Init();
 8001956:	f7fe fc4d 	bl	80001f4 <HAL_Init>
  SystemClock_Config();
 800195a:	f7ff ffaf 	bl	80018bc <SystemClock_Config>
  MX_GPIO_Init();
 800195e:	f7ff fef5 	bl	800174c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001962:	f7ff ff8b 	bl	800187c <MX_USART1_UART_Init>
  UserInitialise();
 8001966:	f000 f8b3 	bl	8001ad0 <UserInitialise>
	  User();
 800196a:	f000 f99d 	bl	8001ca8 <User>
 800196e:	e7fc      	b.n	800196a <main+0x16>

08001970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001970:	b500      	push	{lr}
 8001972:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <HAL_MspInit+0x78>)
 8001976:	699a      	ldr	r2, [r3, #24]
 8001978:	f042 0201 	orr.w	r2, r2, #1
 800197c:	619a      	str	r2, [r3, #24]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001988:	2007      	movs	r0, #7
 800198a:	f7fe fc53 	bl	8000234 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	4611      	mov	r1, r2
 8001992:	f06f 000b 	mvn.w	r0, #11
 8001996:	f7fe fc5f 	bl	8000258 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	4611      	mov	r1, r2
 800199e:	f06f 000a 	mvn.w	r0, #10
 80019a2:	f7fe fc59 	bl	8000258 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	4611      	mov	r1, r2
 80019aa:	f06f 0009 	mvn.w	r0, #9
 80019ae:	f7fe fc53 	bl	8000258 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	4611      	mov	r1, r2
 80019b6:	f06f 0004 	mvn.w	r0, #4
 80019ba:	f7fe fc4d 	bl	8000258 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	4611      	mov	r1, r2
 80019c2:	f06f 0003 	mvn.w	r0, #3
 80019c6:	f7fe fc47 	bl	8000258 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	4611      	mov	r1, r2
 80019ce:	f06f 0001 	mvn.w	r0, #1
 80019d2:	f7fe fc41 	bl	8000258 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	4611      	mov	r1, r2
 80019da:	f04f 30ff 	mov.w	r0, #4294967295
 80019de:	f7fe fc3b 	bl	8000258 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	b003      	add	sp, #12
 80019e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80019e8:	40021000 	.word	0x40021000

080019ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80019ec:	6802      	ldr	r2, [r0, #0]
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_UART_MspInit+0x58>)
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d000      	beq.n	80019f6 <HAL_UART_MspInit+0xa>
 80019f4:	4770      	bx	lr
{
 80019f6:	b500      	push	{lr}
 80019f8:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019fa:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80019fe:	699a      	ldr	r2, [r3, #24]
 8001a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a04:	619a      	str	r2, [r3, #24]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a10:	2330      	movs	r3, #48	; 0x30
 8001a12:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a20:	2307      	movs	r3, #7
 8001a22:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a24:	a901      	add	r1, sp, #4
 8001a26:	4808      	ldr	r0, [pc, #32]	; (8001a48 <HAL_UART_MspInit+0x5c>)
 8001a28:	f7fe fca4 	bl	8000374 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4611      	mov	r1, r2
 8001a30:	2025      	movs	r0, #37	; 0x25
 8001a32:	f7fe fc11 	bl	8000258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a36:	2025      	movs	r0, #37	; 0x25
 8001a38:	f7fe fc40 	bl	80002bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a3c:	b007      	add	sp, #28
 8001a3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a42:	bf00      	nop
 8001a44:	40013800 	.word	0x40013800
 8001a48:	48000800 	.word	0x48000800

08001a4c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001a4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4e:	f7fe fbe3 	bl	8000218 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001a52:	f7fe fc66 	bl	8000322 <HAL_SYSTICK_IRQHandler>
 8001a56:	bd08      	pop	{r3, pc}

08001a58 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 8001a58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a5a:	4802      	ldr	r0, [pc, #8]	; (8001a64 <USART1_IRQHandler+0xc>)
 8001a5c:	f7ff fdc6 	bl	80015ec <HAL_UART_IRQHandler>
 8001a60:	bd08      	pop	{r3, pc}
 8001a62:	bf00      	nop
 8001a64:	20000028 	.word	0x20000028

08001a68 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a68:	4915      	ldr	r1, [pc, #84]	; (8001ac0 <SystemInit+0x58>)
 8001a6a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <SystemInit+0x5c>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001a80:	6858      	ldr	r0, [r3, #4]
 8001a82:	4a11      	ldr	r2, [pc, #68]	; (8001ac8 <SystemInit+0x60>)
 8001a84:	4002      	ands	r2, r0
 8001a86:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001a8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a92:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a9a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001aa2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa6:	f022 020f 	bic.w	r2, r2, #15
 8001aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001aac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001aae:	4a07      	ldr	r2, [pc, #28]	; (8001acc <SystemInit+0x64>)
 8001ab0:	4002      	ands	r2, r0
 8001ab2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ab8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001abc:	608b      	str	r3, [r1, #8]
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	f87fc00c 	.word	0xf87fc00c
 8001acc:	ff00fccc 	.word	0xff00fccc

08001ad0 <UserInitialise>:
int16_t tempSetpoint;		// the current temperature set point

uint16_t cmdBufPos;  		// this is the position in the cmdB where we are currently writing to

void UserInitialise(void)
{
 8001ad0:	b508      	push	{r3, lr}
	uartRxFlag = false;
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <UserInitialise+0x1c>)
 8001ad6:	701a      	strb	r2, [r3, #0]
	tempSetpoint = 60;		// initial value
 8001ad8:	223c      	movs	r2, #60	; 0x3c
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <UserInitialise+0x20>)
 8001adc:	801a      	strh	r2, [r3, #0]

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4904      	ldr	r1, [pc, #16]	; (8001af4 <UserInitialise+0x24>)
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <UserInitialise+0x28>)
 8001ae4:	f7ff fa54 	bl	8000f90 <HAL_UART_Receive_IT>
 8001ae8:	bd08      	pop	{r3, pc}
 8001aea:	bf00      	nop
 8001aec:	20000102 	.word	0x20000102
 8001af0:	200000ca 	.word	0x200000ca
 8001af4:	200000cc 	.word	0x200000cc
 8001af8:	20000028 	.word	0x20000028

08001afc <HAL_UART_RxCpltCallback>:
// This function will execute whenever a character is received from the UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
	// the interrupt handler will automatically put the received character in the uartRXChar variable (no need to write any code for that).
	// so all we do it set flag to indicate character was received, and then process the received character further in the main loop
	uartRxFlag = true;
 8001afc:	2201      	movs	r2, #1
 8001afe:	4b01      	ldr	r3, [pc, #4]	; (8001b04 <HAL_UART_RxCpltCallback+0x8>)
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	4770      	bx	lr
 8001b04:	20000102 	.word	0x20000102

08001b08 <String2Int>:
uint8_t String2Int(char* inputString, int16_t* outputInt)
{
    int returnValue = 0;
    int sign = 1;

    if (*inputString == '\0')
 8001b08:	7803      	ldrb	r3, [r0, #0]
 8001b0a:	b353      	cbz	r3, 8001b62 <String2Int+0x5a>
{
 8001b0c:	b430      	push	{r4, r5}
        return 0;

    if (*inputString == '-')
 8001b0e:	2b2d      	cmp	r3, #45	; 0x2d
 8001b10:	d002      	beq.n	8001b18 <String2Int+0x10>
    int sign = 1;
 8001b12:	2501      	movs	r5, #1
 8001b14:	2300      	movs	r3, #0
 8001b16:	e009      	b.n	8001b2c <String2Int+0x24>
    {
        sign = -1;
        inputString++;
 8001b18:	3001      	adds	r0, #1
        sign = -1;
 8001b1a:	f04f 35ff 	mov.w	r5, #4294967295
 8001b1e:	e7f9      	b.n	8001b14 <String2Int+0xc>
    while ((*inputString >= '0') && (*inputString <= '9'))
    {
    	returnValue *= 10;
    	returnValue += (*inputString - 48);

        if (((sign == 1) && (returnValue >= 32768)) ||
 8001b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b24:	db0f      	blt.n	8001b46 <String2Int+0x3e>
            ((sign == -1) && (returnValue >= 32769)))
            return 0;
 8001b26:	2000      	movs	r0, #0
 8001b28:	e019      	b.n	8001b5e <String2Int+0x56>

        inputString++;
 8001b2a:	3001      	adds	r0, #1
    while ((*inputString >= '0') && (*inputString <= '9'))
 8001b2c:	7802      	ldrb	r2, [r0, #0]
 8001b2e:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8001b32:	b2e4      	uxtb	r4, r4
 8001b34:	2c09      	cmp	r4, #9
 8001b36:	d80e      	bhi.n	8001b56 <String2Int+0x4e>
    	returnValue *= 10;
 8001b38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b3c:	005c      	lsls	r4, r3, #1
    	returnValue += (*inputString - 48);
 8001b3e:	3a30      	subs	r2, #48	; 0x30
 8001b40:	18a3      	adds	r3, r4, r2
        if (((sign == 1) && (returnValue >= 32768)) ||
 8001b42:	2d01      	cmp	r5, #1
 8001b44:	d0ec      	beq.n	8001b20 <String2Int+0x18>
 8001b46:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001b4a:	d1ee      	bne.n	8001b2a <String2Int+0x22>
            ((sign == -1) && (returnValue >= 32769)))
 8001b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b50:	ddeb      	ble.n	8001b2a <String2Int+0x22>
            return 0;
 8001b52:	2000      	movs	r0, #0
 8001b54:	e003      	b.n	8001b5e <String2Int+0x56>
    }
    *outputInt = (int16_t)(sign * returnValue);
 8001b56:	fb15 f303 	smulbb	r3, r5, r3
 8001b5a:	800b      	strh	r3, [r1, #0]
    return 1;
 8001b5c:	2001      	movs	r0, #1
}
 8001b5e:	bc30      	pop	{r4, r5}
 8001b60:	4770      	bx	lr
        return 0;
 8001b62:	2000      	movs	r0, #0
 8001b64:	4770      	bx	lr
	...

08001b68 <Int2String>:

// convert integer var to ASCII string
uint8_t Int2String(char* outputString, int16_t value, uint8_t maxL)
{
 8001b68:	b470      	push	{r4, r5, r6}
	int numWritten = 0;
	int writePosition = 0;
	uint8_t digits = 0;

	if (maxL == 0)
 8001b6a:	4615      	mov	r5, r2
 8001b6c:	b3b2      	cbz	r2, 8001bdc <Int2String+0x74>
		return 0;

	if (value < 0)
 8001b6e:	2900      	cmp	r1, #0
 8001b70:	db0d      	blt.n	8001b8e <Int2String+0x26>
	int numWritten = 0;
 8001b72:	2200      	movs	r2, #0
		maxL--;
		value = -value;
		numWritten = 1;
	}

	if (value < 10)
 8001b74:	2909      	cmp	r1, #9
 8001b76:	dd13      	ble.n	8001ba0 <Int2String+0x38>
		digits = 1;
	else if (value < 100)
 8001b78:	2963      	cmp	r1, #99	; 0x63
 8001b7a:	dd16      	ble.n	8001baa <Int2String+0x42>
		digits = 2;
	else if (value < 1000)
 8001b7c:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8001b80:	db15      	blt.n	8001bae <Int2String+0x46>
		digits = 3;
	else if (value < 10000)
 8001b82:	f242 730f 	movw	r3, #9999	; 0x270f
 8001b86:	4299      	cmp	r1, r3
 8001b88:	dc13      	bgt.n	8001bb2 <Int2String+0x4a>
		digits = 4;
 8001b8a:	2404      	movs	r4, #4
 8001b8c:	e009      	b.n	8001ba2 <Int2String+0x3a>
		outputString[0] = '-';
 8001b8e:	232d      	movs	r3, #45	; 0x2d
 8001b90:	f800 3b01 	strb.w	r3, [r0], #1
		maxL--;
 8001b94:	1e55      	subs	r5, r2, #1
 8001b96:	b2ed      	uxtb	r5, r5
		value = -value;
 8001b98:	424b      	negs	r3, r1
 8001b9a:	b219      	sxth	r1, r3
		numWritten = 1;
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	e7e9      	b.n	8001b74 <Int2String+0xc>
		digits = 1;
 8001ba0:	2401      	movs	r4, #1
	else
		digits = 5;

	if (digits > maxL)
 8001ba2:	42a5      	cmp	r5, r4
 8001ba4:	d216      	bcs.n	8001bd4 <Int2String+0x6c>
		return 0; // error - not enough space in output string!
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	e019      	b.n	8001bde <Int2String+0x76>
		digits = 2;
 8001baa:	2402      	movs	r4, #2
 8001bac:	e7f9      	b.n	8001ba2 <Int2String+0x3a>
		digits = 3;
 8001bae:	2403      	movs	r4, #3
 8001bb0:	e7f7      	b.n	8001ba2 <Int2String+0x3a>
		digits = 5;
 8001bb2:	2405      	movs	r4, #5
 8001bb4:	e7f5      	b.n	8001ba2 <Int2String+0x3a>

	writePosition = digits;
	while (writePosition > 0)
	{
		outputString[writePosition-1] = (char) ((value % 10) + 48);
 8001bb6:	3c01      	subs	r4, #1
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <Int2String+0x7c>)
 8001bba:	fb83 5301 	smull	r5, r3, r3, r1
 8001bbe:	17cd      	asrs	r5, r1, #31
 8001bc0:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
 8001bc4:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8001bc8:	0073      	lsls	r3, r6, #1
 8001bca:	1acb      	subs	r3, r1, r3
 8001bcc:	3330      	adds	r3, #48	; 0x30
 8001bce:	5503      	strb	r3, [r0, r4]
		value /= 10;
 8001bd0:	b229      	sxth	r1, r5
		writePosition--;
		numWritten++;
 8001bd2:	3201      	adds	r2, #1
	while (writePosition > 0)
 8001bd4:	2c00      	cmp	r4, #0
 8001bd6:	dcee      	bgt.n	8001bb6 <Int2String+0x4e>
	}

	return numWritten;
 8001bd8:	b2d0      	uxtb	r0, r2
 8001bda:	e000      	b.n	8001bde <Int2String+0x76>
		return 0;
 8001bdc:	4610      	mov	r0, r2
}
 8001bde:	bc70      	pop	{r4, r5, r6}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	66666667 	.word	0x66666667

08001be8 <DecodeCmd>:
{
 8001be8:	b510      	push	{r4, lr}
	switch (cmdBuf[1])
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <DecodeCmd+0xa4>)
 8001bec:	785b      	ldrb	r3, [r3, #1]
 8001bee:	3b41      	subs	r3, #65	; 0x41
 8001bf0:	2b13      	cmp	r3, #19
 8001bf2:	d84a      	bhi.n	8001c8a <DecodeCmd+0xa2>
 8001bf4:	e8df f003 	tbb	[pc, r3]
 8001bf8:	4949490a 	.word	0x4949490a
 8001bfc:	49271349 	.word	0x49271349
 8001c00:	49494949 	.word	0x49494949
 8001c04:	49494949 	.word	0x49494949
 8001c08:	44494949 	.word	0x44494949
		HAL_UART_Transmit(&huart1, (uint8_t*)txStudentNo, 13, 1000);
 8001c0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c10:	220d      	movs	r2, #13
 8001c12:	491f      	ldr	r1, [pc, #124]	; (8001c90 <DecodeCmd+0xa8>)
 8001c14:	6809      	ldr	r1, [r1, #0]
 8001c16:	481f      	ldr	r0, [pc, #124]	; (8001c94 <DecodeCmd+0xac>)
 8001c18:	f7ff fb8f 	bl	800133a <HAL_UART_Transmit>
		break;
 8001c1c:	bd10      	pop	{r4, pc}
		String2Int(cmdBuf+3, &tempSetpoint);
 8001c1e:	491e      	ldr	r1, [pc, #120]	; (8001c98 <DecodeCmd+0xb0>)
 8001c20:	481e      	ldr	r0, [pc, #120]	; (8001c9c <DecodeCmd+0xb4>)
 8001c22:	f7ff ff71 	bl	8001b08 <String2Int>
		txBuf[0] = '$';
 8001c26:	491e      	ldr	r1, [pc, #120]	; (8001ca0 <DecodeCmd+0xb8>)
 8001c28:	2324      	movs	r3, #36	; 0x24
 8001c2a:	700b      	strb	r3, [r1, #0]
		txBuf[1] = 'F';
 8001c2c:	2346      	movs	r3, #70	; 0x46
 8001c2e:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r';
 8001c30:	230d      	movs	r3, #13
 8001c32:	708b      	strb	r3, [r1, #2]
		txBuf[3] = '\n';
 8001c34:	230a      	movs	r3, #10
 8001c36:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8001c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	4815      	ldr	r0, [pc, #84]	; (8001c94 <DecodeCmd+0xac>)
 8001c40:	f7ff fb7b 	bl	800133a <HAL_UART_Transmit>
		break;
 8001c44:	bd10      	pop	{r4, pc}
		txBuf[0] = '$';
 8001c46:	4c16      	ldr	r4, [pc, #88]	; (8001ca0 <DecodeCmd+0xb8>)
 8001c48:	2324      	movs	r3, #36	; 0x24
 8001c4a:	7023      	strb	r3, [r4, #0]
		txBuf[1] = 'G';
 8001c4c:	2347      	movs	r3, #71	; 0x47
 8001c4e:	7063      	strb	r3, [r4, #1]
		txBuf[2] = ',';
 8001c50:	232c      	movs	r3, #44	; 0x2c
 8001c52:	70a3      	strb	r3, [r4, #2]
		charsL = Int2String(txBuf+3, tempSetpoint, 4);
 8001c54:	2204      	movs	r2, #4
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <DecodeCmd+0xb0>)
 8001c58:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001c5c:	1ce0      	adds	r0, r4, #3
 8001c5e:	f7ff ff83 	bl	8001b68 <Int2String>
		txBuf[3 + charsL] = '\r';
 8001c62:	1cc3      	adds	r3, r0, #3
 8001c64:	220d      	movs	r2, #13
 8001c66:	54e2      	strb	r2, [r4, r3]
		txBuf[4 + charsL] = '\n';
 8001c68:	1d03      	adds	r3, r0, #4
 8001c6a:	220a      	movs	r2, #10
 8001c6c:	54e2      	strb	r2, [r4, r3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL+5, 1000);
 8001c6e:	1d42      	adds	r2, r0, #5
 8001c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c74:	b292      	uxth	r2, r2
 8001c76:	4621      	mov	r1, r4
 8001c78:	4806      	ldr	r0, [pc, #24]	; (8001c94 <DecodeCmd+0xac>)
 8001c7a:	f7ff fb5e 	bl	800133a <HAL_UART_Transmit>
		break;
 8001c7e:	bd10      	pop	{r4, pc}
	  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET); //3
 8001c80:	2201      	movs	r2, #1
 8001c82:	2120      	movs	r1, #32
 8001c84:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <DecodeCmd+0xbc>)
 8001c86:	f7fe fc3f 	bl	8000508 <HAL_GPIO_WritePin>
 8001c8a:	bd10      	pop	{r4, pc}
 8001c8c:	200000d0 	.word	0x200000d0
 8001c90:	20000004 	.word	0x20000004
 8001c94:	20000028 	.word	0x20000028
 8001c98:	200000ca 	.word	0x200000ca
 8001c9c:	200000d3 	.word	0x200000d3
 8001ca0:	20000098 	.word	0x20000098
 8001ca4:	48000400 	.word	0x48000400

08001ca8 <User>:
{
 8001ca8:	b508      	push	{r3, lr}
	if (uartRxFlag)
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <User+0x6c>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b1e3      	cbz	r3, 8001cea <User+0x42>
		if (uartRxChar == '$')
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <User+0x70>)
 8001cb2:	781a      	ldrb	r2, [r3, #0]
 8001cb4:	2a24      	cmp	r2, #36	; 0x24
 8001cb6:	d019      	beq.n	8001cec <User+0x44>
		if (cmdBufPos < cmdBufL)
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <User+0x74>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	2b31      	cmp	r3, #49	; 0x31
 8001cbe:	d804      	bhi.n	8001cca <User+0x22>
			cmdBuf[cmdBufPos++] = uartRxChar;
 8001cc0:	1c58      	adds	r0, r3, #1
 8001cc2:	4916      	ldr	r1, [pc, #88]	; (8001d1c <User+0x74>)
 8001cc4:	8008      	strh	r0, [r1, #0]
 8001cc6:	4916      	ldr	r1, [pc, #88]	; (8001d20 <User+0x78>)
 8001cc8:	54ca      	strb	r2, [r1, r3]
		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <User+0x74>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d903      	bls.n	8001cda <User+0x32>
 8001cd2:	4a13      	ldr	r2, [pc, #76]	; (8001d20 <User+0x78>)
 8001cd4:	7812      	ldrb	r2, [r2, #0]
 8001cd6:	2a24      	cmp	r2, #36	; 0x24
 8001cd8:	d00c      	beq.n	8001cf4 <User+0x4c>
		uartRxFlag = false;  // clear the flag - the 'receive character' event has been handled.
 8001cda:	2200      	movs	r2, #0
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <User+0x6c>)
 8001cde:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	490d      	ldr	r1, [pc, #52]	; (8001d18 <User+0x70>)
 8001ce4:	480f      	ldr	r0, [pc, #60]	; (8001d24 <User+0x7c>)
 8001ce6:	f7ff f953 	bl	8000f90 <HAL_UART_Receive_IT>
 8001cea:	bd08      	pop	{r3, pc}
			cmdBufPos = 0;
 8001cec:	2100      	movs	r1, #0
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <User+0x74>)
 8001cf0:	8019      	strh	r1, [r3, #0]
 8001cf2:	e7e1      	b.n	8001cb8 <User+0x10>
		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 8001cf4:	1e9a      	subs	r2, r3, #2
 8001cf6:	490a      	ldr	r1, [pc, #40]	; (8001d20 <User+0x78>)
 8001cf8:	5c8a      	ldrb	r2, [r1, r2]
 8001cfa:	2a0d      	cmp	r2, #13
 8001cfc:	d1ed      	bne.n	8001cda <User+0x32>
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	5ccb      	ldrb	r3, [r1, r3]
 8001d02:	2b0a      	cmp	r3, #10
 8001d04:	d1e9      	bne.n	8001cda <User+0x32>
			DecodeCmd();
 8001d06:	f7ff ff6f 	bl	8001be8 <DecodeCmd>
			cmdBufPos = 0;	// clear buffer
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <User+0x74>)
 8001d0e:	801a      	strh	r2, [r3, #0]
 8001d10:	e7e3      	b.n	8001cda <User+0x32>
 8001d12:	bf00      	nop
 8001d14:	20000102 	.word	0x20000102
 8001d18:	200000cc 	.word	0x200000cc
 8001d1c:	20000104 	.word	0x20000104
 8001d20:	200000d0 	.word	0x200000d0
 8001d24:	20000028 	.word	0x20000028

08001d28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d60 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d2e:	e003      	b.n	8001d38 <LoopCopyDataInit>

08001d30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d36:	3104      	adds	r1, #4

08001d38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d38:	480b      	ldr	r0, [pc, #44]	; (8001d68 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d40:	d3f6      	bcc.n	8001d30 <CopyDataInit>
	ldr	r2, =_sbss
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d44:	e002      	b.n	8001d4c <LoopFillZerobss>

08001d46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d48:	f842 3b04 	str.w	r3, [r2], #4

08001d4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <LoopForever+0x16>)
	cmp	r2, r3
 8001d4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d50:	d3f9      	bcc.n	8001d46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d52:	f7ff fe89 	bl	8001a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d56:	f000 f811 	bl	8001d7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d5a:	f7ff fdfb 	bl	8001954 <main>

08001d5e <LoopForever>:

LoopForever:
    b LoopForever
 8001d5e:	e7fe      	b.n	8001d5e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d60:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001d64:	08001e3c 	.word	0x08001e3c
	ldr	r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d6c:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8001d70:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8001d74:	20000108 	.word	0x20000108

08001d78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC1_2_IRQHandler>
	...

08001d7c <__libc_init_array>:
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	4e0d      	ldr	r6, [pc, #52]	; (8001db4 <__libc_init_array+0x38>)
 8001d80:	4c0d      	ldr	r4, [pc, #52]	; (8001db8 <__libc_init_array+0x3c>)
 8001d82:	1ba4      	subs	r4, r4, r6
 8001d84:	10a4      	asrs	r4, r4, #2
 8001d86:	2500      	movs	r5, #0
 8001d88:	42a5      	cmp	r5, r4
 8001d8a:	d109      	bne.n	8001da0 <__libc_init_array+0x24>
 8001d8c:	4e0b      	ldr	r6, [pc, #44]	; (8001dbc <__libc_init_array+0x40>)
 8001d8e:	4c0c      	ldr	r4, [pc, #48]	; (8001dc0 <__libc_init_array+0x44>)
 8001d90:	f000 f818 	bl	8001dc4 <_init>
 8001d94:	1ba4      	subs	r4, r4, r6
 8001d96:	10a4      	asrs	r4, r4, #2
 8001d98:	2500      	movs	r5, #0
 8001d9a:	42a5      	cmp	r5, r4
 8001d9c:	d105      	bne.n	8001daa <__libc_init_array+0x2e>
 8001d9e:	bd70      	pop	{r4, r5, r6, pc}
 8001da0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001da4:	4798      	blx	r3
 8001da6:	3501      	adds	r5, #1
 8001da8:	e7ee      	b.n	8001d88 <__libc_init_array+0xc>
 8001daa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dae:	4798      	blx	r3
 8001db0:	3501      	adds	r5, #1
 8001db2:	e7f2      	b.n	8001d9a <__libc_init_array+0x1e>
 8001db4:	08001e34 	.word	0x08001e34
 8001db8:	08001e34 	.word	0x08001e34
 8001dbc:	08001e34 	.word	0x08001e34
 8001dc0:	08001e38 	.word	0x08001e38

08001dc4 <_init>:
 8001dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc6:	bf00      	nop
 8001dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dca:	bc08      	pop	{r3}
 8001dcc:	469e      	mov	lr, r3
 8001dce:	4770      	bx	lr

08001dd0 <_fini>:
 8001dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd2:	bf00      	nop
 8001dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dd6:	bc08      	pop	{r3}
 8001dd8:	469e      	mov	lr, r3
 8001dda:	4770      	bx	lr
