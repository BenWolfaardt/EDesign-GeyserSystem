
H:\EDesign\V3.2\EDesign\Debug\EDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080033cc  080033cc  000133cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080033d0  080033d0  000133d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080033d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  7 .bss          000002c4  20000008  20000008  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002cc  200002cc  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   000195dd  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000029fb  00000000  00000000  00039615  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a8c5  00000000  00000000  0003c010  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d18  00000000  00000000  000468d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000cc8  00000000  00000000  000475f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001e64e  00000000  00000000  000482b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b1e2  00000000  00000000  00066906  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000ab60f  00000000  00000000  00071ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0011d0f7  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002370  00000000  00000000  0011d174  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800335c 	.word	0x0800335c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	0800335c 	.word	0x0800335c

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <HAL_InitTick+0x24>)
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <HAL_InitTick+0x28>)
 80001d2:	fba3 3000 	umull	r3, r0, r3, r0
 80001d6:	0980      	lsrs	r0, r0, #6
 80001d8:	f000 fcf6 	bl	8000bc8 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 fcb2 	bl	8000b4c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000
 80001f0:	10624dd3 	.word	0x10624dd3

080001f4 <HAL_Init>:
{
 80001f4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f6:	4a07      	ldr	r2, [pc, #28]	; (8000214 <HAL_Init+0x20>)
 80001f8:	6813      	ldr	r3, [r2, #0]
 80001fa:	f043 0310 	orr.w	r3, r3, #16
 80001fe:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000200:	2003      	movs	r0, #3
 8000202:	f000 fc91 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000206:	2000      	movs	r0, #0
 8000208:	f7ff ffde 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 800020c:	f002 fafa 	bl	8002804 <HAL_MspInit>
}
 8000210:	2000      	movs	r0, #0
 8000212:	bd08      	pop	{r3, pc}
 8000214:	40022000 	.word	0x40022000

08000218 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000218:	4a02      	ldr	r2, [pc, #8]	; (8000224 <HAL_IncTick+0xc>)
 800021a:	6813      	ldr	r3, [r2, #0]
 800021c:	3301      	adds	r3, #1
 800021e:	6013      	str	r3, [r2, #0]
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	20000034 	.word	0x20000034

08000228 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000228:	4b01      	ldr	r3, [pc, #4]	; (8000230 <HAL_GetTick+0x8>)
 800022a:	6818      	ldr	r0, [r3, #0]
}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000034 	.word	0x20000034

08000234 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000234:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000236:	6802      	ldr	r2, [r0, #0]
 8000238:	6893      	ldr	r3, [r2, #8]
 800023a:	f003 0303 	and.w	r3, r3, #3
 800023e:	2b01      	cmp	r3, #1
 8000240:	d011      	beq.n	8000266 <ADC_Disable+0x32>
 8000242:	2300      	movs	r3, #0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d037      	beq.n	80002b8 <ADC_Disable+0x84>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000248:	6893      	ldr	r3, [r2, #8]
 800024a:	f003 030d 	and.w	r3, r3, #13
 800024e:	2b01      	cmp	r3, #1
 8000250:	d011      	beq.n	8000276 <ADC_Disable+0x42>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000252:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000254:	f043 0310 	orr.w	r3, r3, #16
 8000258:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800025a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 8000262:	2001      	movs	r0, #1
 8000264:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000266:	6813      	ldr	r3, [r2, #0]
 8000268:	f013 0f01 	tst.w	r3, #1
 800026c:	d101      	bne.n	8000272 <ADC_Disable+0x3e>
 800026e:	2300      	movs	r3, #0
 8000270:	e7e8      	b.n	8000244 <ADC_Disable+0x10>
 8000272:	2301      	movs	r3, #1
 8000274:	e7e6      	b.n	8000244 <ADC_Disable+0x10>
 8000276:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8000278:	6893      	ldr	r3, [r2, #8]
 800027a:	f043 0302 	orr.w	r3, r3, #2
 800027e:	6093      	str	r3, [r2, #8]
 8000280:	6803      	ldr	r3, [r0, #0]
 8000282:	2203      	movs	r2, #3
 8000284:	601a      	str	r2, [r3, #0]
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000286:	f7ff ffcf 	bl	8000228 <HAL_GetTick>
 800028a:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800028c:	6823      	ldr	r3, [r4, #0]
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	f013 0f01 	tst.w	r3, #1
 8000294:	d00e      	beq.n	80002b4 <ADC_Disable+0x80>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000296:	f7ff ffc7 	bl	8000228 <HAL_GetTick>
 800029a:	1b40      	subs	r0, r0, r5
 800029c:	2802      	cmp	r0, #2
 800029e:	d9f5      	bls.n	800028c <ADC_Disable+0x58>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002a2:	f043 0310 	orr.w	r3, r3, #16
 80002a6:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 80002b0:	2001      	movs	r0, #1
 80002b2:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80002b4:	2000      	movs	r0, #0
 80002b6:	bd38      	pop	{r3, r4, r5, pc}
 80002b8:	2000      	movs	r0, #0
}
 80002ba:	bd38      	pop	{r3, r4, r5, pc}

080002bc <ADC_Enable>:
{
 80002bc:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002be:	6802      	ldr	r2, [r0, #0]
 80002c0:	6893      	ldr	r3, [r2, #8]
 80002c2:	f003 0303 	and.w	r3, r3, #3
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d010      	beq.n	80002ec <ADC_Enable+0x30>
 80002ca:	2300      	movs	r3, #0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d133      	bne.n	8000338 <ADC_Enable+0x7c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80002d0:	6891      	ldr	r1, [r2, #8]
 80002d2:	4b1a      	ldr	r3, [pc, #104]	; (800033c <ADC_Enable+0x80>)
 80002d4:	4219      	tst	r1, r3
 80002d6:	d011      	beq.n	80002fc <ADC_Enable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002d8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80002da:	f043 0310 	orr.w	r3, r3, #16
 80002de:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002e0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 80002e8:	2001      	movs	r0, #1
 80002ea:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002ec:	6813      	ldr	r3, [r2, #0]
 80002ee:	f013 0f01 	tst.w	r3, #1
 80002f2:	d101      	bne.n	80002f8 <ADC_Enable+0x3c>
 80002f4:	2300      	movs	r3, #0
 80002f6:	e7e9      	b.n	80002cc <ADC_Enable+0x10>
 80002f8:	2301      	movs	r3, #1
 80002fa:	e7e7      	b.n	80002cc <ADC_Enable+0x10>
 80002fc:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80002fe:	6893      	ldr	r3, [r2, #8]
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8000306:	f7ff ff8f 	bl	8000228 <HAL_GetTick>
 800030a:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800030c:	6823      	ldr	r3, [r4, #0]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f013 0f01 	tst.w	r3, #1
 8000314:	d10e      	bne.n	8000334 <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000316:	f7ff ff87 	bl	8000228 <HAL_GetTick>
 800031a:	1b40      	subs	r0, r0, r5
 800031c:	2802      	cmp	r0, #2
 800031e:	d9f5      	bls.n	800030c <ADC_Enable+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000320:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000322:	f043 0310 	orr.w	r3, r3, #16
 8000326:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000328:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000330:	2001      	movs	r0, #1
 8000332:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8000334:	2000      	movs	r0, #0
 8000336:	bd38      	pop	{r3, r4, r5, pc}
 8000338:	2000      	movs	r0, #0
}
 800033a:	bd38      	pop	{r3, r4, r5, pc}
 800033c:	8000003f 	.word	0x8000003f

08000340 <HAL_ADC_Init>:
{
 8000340:	b530      	push	{r4, r5, lr}
 8000342:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000344:	2300      	movs	r3, #0
 8000346:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000348:	2800      	cmp	r0, #0
 800034a:	f000 80fb 	beq.w	8000544 <HAL_ADC_Init+0x204>
 800034e:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000350:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000352:	f013 0f10 	tst.w	r3, #16
 8000356:	d151      	bne.n	80003fc <HAL_ADC_Init+0xbc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000358:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800035a:	b1ab      	cbz	r3, 8000388 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800035c:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800035e:	6823      	ldr	r3, [r4, #0]
 8000360:	689a      	ldr	r2, [r3, #8]
 8000362:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000366:	d003      	beq.n	8000370 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000368:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800036a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800036e:	d046      	beq.n	80003fe <HAL_ADC_Init+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 8000370:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000372:	f023 0312 	bic.w	r3, r3, #18
 8000376:	f043 0310 	orr.w	r3, r3, #16
 800037a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800037c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800037e:	f043 0301 	orr.w	r3, r3, #1
 8000382:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000384:	2001      	movs	r0, #1
 8000386:	e03a      	b.n	80003fe <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 8000388:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 800038a:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 800038c:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 800038e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000392:	f002 fa75 	bl	8002880 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000396:	6823      	ldr	r3, [r4, #0]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800039e:	d001      	beq.n	80003a4 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003a0:	2000      	movs	r0, #0
 80003a2:	e7dc      	b.n	800035e <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 80003a4:	4620      	mov	r0, r4
 80003a6:	f7ff ff45 	bl	8000234 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003ac:	f013 0f10 	tst.w	r3, #16
 80003b0:	d1d5      	bne.n	800035e <HAL_ADC_Init+0x1e>
 80003b2:	2800      	cmp	r0, #0
 80003b4:	d1d3      	bne.n	800035e <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 80003b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80003bc:	f023 0302 	bic.w	r3, r3, #2
 80003c0:	f043 0302 	orr.w	r3, r3, #2
 80003c4:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80003c6:	6822      	ldr	r2, [r4, #0]
 80003c8:	6893      	ldr	r3, [r2, #8]
 80003ca:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80003ce:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80003d0:	6822      	ldr	r2, [r4, #0]
 80003d2:	6893      	ldr	r3, [r2, #8]
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d8:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003da:	4b5b      	ldr	r3, [pc, #364]	; (8000548 <HAL_ADC_Init+0x208>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a5b      	ldr	r2, [pc, #364]	; (800054c <HAL_ADC_Init+0x20c>)
 80003e0:	fba2 2303 	umull	r2, r3, r2, r3
 80003e4:	0c9b      	lsrs	r3, r3, #18
 80003e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80003ea:	005a      	lsls	r2, r3, #1
 80003ec:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80003ee:	9b00      	ldr	r3, [sp, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d0b4      	beq.n	800035e <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 80003f4:	9b00      	ldr	r3, [sp, #0]
 80003f6:	3b01      	subs	r3, #1
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	e7f8      	b.n	80003ee <HAL_ADC_Init+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003fc:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000400:	f013 0f10 	tst.w	r3, #16
 8000404:	f040 8095 	bne.w	8000532 <HAL_ADC_Init+0x1f2>
 8000408:	2800      	cmp	r0, #0
 800040a:	f040 8092 	bne.w	8000532 <HAL_ADC_Init+0x1f2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800040e:	6822      	ldr	r2, [r4, #0]
 8000410:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000412:	f013 0304 	ands.w	r3, r3, #4
 8000416:	f040 808c 	bne.w	8000532 <HAL_ADC_Init+0x1f2>
    ADC_STATE_CLR_SET(hadc->State,
 800041a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800041c:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8000420:	f041 0102 	orr.w	r1, r1, #2
 8000424:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000426:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800042a:	d055      	beq.n	80004d8 <HAL_ADC_Init+0x198>
 800042c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000430:	9101      	str	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000432:	6891      	ldr	r1, [r2, #8]
 8000434:	f001 0103 	and.w	r1, r1, #3
 8000438:	2901      	cmp	r1, #1
 800043a:	d050      	beq.n	80004de <HAL_ADC_Init+0x19e>
 800043c:	2200      	movs	r2, #0
 800043e:	b972      	cbnz	r2, 800045e <HAL_ADC_Init+0x11e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000440:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000442:	b12d      	cbz	r5, 8000450 <HAL_ADC_Init+0x110>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000444:	68a9      	ldr	r1, [r5, #8]
 8000446:	f001 0103 	and.w	r1, r1, #3
 800044a:	2901      	cmp	r1, #1
 800044c:	d04f      	beq.n	80004ee <HAL_ADC_Init+0x1ae>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800044e:	b932      	cbnz	r2, 800045e <HAL_ADC_Init+0x11e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000450:	493f      	ldr	r1, [pc, #252]	; (8000550 <HAL_ADC_Init+0x210>)
 8000452:	688a      	ldr	r2, [r1, #8]
 8000454:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000458:	6865      	ldr	r5, [r4, #4]
 800045a:	432a      	orrs	r2, r5
 800045c:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800045e:	69e2      	ldr	r2, [r4, #28]
 8000460:	0351      	lsls	r1, r2, #13
 8000462:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000464:	2d01      	cmp	r5, #1
 8000466:	d001      	beq.n	800046c <HAL_ADC_Init+0x12c>
 8000468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800046c:	430b      	orrs	r3, r1
 800046e:	68e1      	ldr	r1, [r4, #12]
 8000470:	430b      	orrs	r3, r1
 8000472:	68a1      	ldr	r1, [r4, #8]
 8000474:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000476:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000478:	2901      	cmp	r1, #1
 800047a:	d03e      	beq.n	80004fa <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800047c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800047e:	2a01      	cmp	r2, #1
 8000480:	d002      	beq.n	8000488 <HAL_ADC_Init+0x148>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000482:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000484:	430a      	orrs	r2, r1
 8000486:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000488:	6822      	ldr	r2, [r4, #0]
 800048a:	6891      	ldr	r1, [r2, #8]
 800048c:	f011 0f0c 	tst.w	r1, #12
 8000490:	d10b      	bne.n	80004aa <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000492:	68d1      	ldr	r1, [r2, #12]
 8000494:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000498:	f021 0102 	bic.w	r1, r1, #2
 800049c:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800049e:	69a1      	ldr	r1, [r4, #24]
 80004a0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80004a2:	0052      	lsls	r2, r2, #1
 80004a4:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 80004a8:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 80004aa:	6821      	ldr	r1, [r4, #0]
 80004ac:	68cd      	ldr	r5, [r1, #12]
 80004ae:	4a29      	ldr	r2, [pc, #164]	; (8000554 <HAL_ADC_Init+0x214>)
 80004b0:	402a      	ands	r2, r5
 80004b2:	4313      	orrs	r3, r2
 80004b4:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80004b6:	6923      	ldr	r3, [r4, #16]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d031      	beq.n	8000520 <HAL_ADC_Init+0x1e0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80004bc:	6822      	ldr	r2, [r4, #0]
 80004be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80004c0:	f023 030f 	bic.w	r3, r3, #15
 80004c4:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80004c6:	2300      	movs	r3, #0
 80004c8:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80004ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004cc:	f023 0303 	bic.w	r3, r3, #3
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6463      	str	r3, [r4, #68]	; 0x44
 80004d6:	e033      	b.n	8000540 <HAL_ADC_Init+0x200>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004d8:	491f      	ldr	r1, [pc, #124]	; (8000558 <HAL_ADC_Init+0x218>)
 80004da:	9101      	str	r1, [sp, #4]
 80004dc:	e7a9      	b.n	8000432 <HAL_ADC_Init+0xf2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004de:	6812      	ldr	r2, [r2, #0]
 80004e0:	f012 0f01 	tst.w	r2, #1
 80004e4:	d101      	bne.n	80004ea <HAL_ADC_Init+0x1aa>
 80004e6:	2200      	movs	r2, #0
 80004e8:	e7a9      	b.n	800043e <HAL_ADC_Init+0xfe>
 80004ea:	2201      	movs	r2, #1
 80004ec:	e7a7      	b.n	800043e <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80004ee:	6829      	ldr	r1, [r5, #0]
 80004f0:	f011 0f01 	tst.w	r1, #1
 80004f4:	d0ab      	beq.n	800044e <HAL_ADC_Init+0x10e>
 80004f6:	2201      	movs	r2, #1
 80004f8:	e7a9      	b.n	800044e <HAL_ADC_Init+0x10e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80004fa:	b932      	cbnz	r2, 800050a <HAL_ADC_Init+0x1ca>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80004fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004fe:	3a01      	subs	r2, #1
 8000500:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000508:	e7b8      	b.n	800047c <HAL_ADC_Init+0x13c>
        ADC_STATE_CLR_SET(hadc->State,
 800050a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800050c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8000510:	f042 0220 	orr.w	r2, r2, #32
 8000514:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000516:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000518:	f042 0201 	orr.w	r2, r2, #1
 800051c:	64a2      	str	r2, [r4, #72]	; 0x48
 800051e:	e7ad      	b.n	800047c <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000520:	6821      	ldr	r1, [r4, #0]
 8000522:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000524:	f023 030f 	bic.w	r3, r3, #15
 8000528:	6a22      	ldr	r2, [r4, #32]
 800052a:	3a01      	subs	r2, #1
 800052c:	4313      	orrs	r3, r2
 800052e:	630b      	str	r3, [r1, #48]	; 0x30
 8000530:	e7c9      	b.n	80004c6 <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 8000532:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000534:	f023 0312 	bic.w	r3, r3, #18
 8000538:	f043 0310 	orr.w	r3, r3, #16
 800053c:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 800053e:	2001      	movs	r0, #1
}
 8000540:	b017      	add	sp, #92	; 0x5c
 8000542:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000544:	2001      	movs	r0, #1
 8000546:	e7fb      	b.n	8000540 <HAL_ADC_Init+0x200>
 8000548:	20000000 	.word	0x20000000
 800054c:	431bde83 	.word	0x431bde83
 8000550:	50000300 	.word	0x50000300
 8000554:	fff0c007 	.word	0xfff0c007
 8000558:	50000100 	.word	0x50000100

0800055c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800055c:	6803      	ldr	r3, [r0, #0]
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	f013 0f04 	tst.w	r3, #4
 8000564:	d002      	beq.n	800056c <HAL_ADC_Start+0x10>
    tmp_hal_status = HAL_BUSY;
 8000566:	2302      	movs	r3, #2
}
 8000568:	4618      	mov	r0, r3
 800056a:	4770      	bx	lr
    __HAL_LOCK(hadc);
 800056c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000570:	2b01      	cmp	r3, #1
 8000572:	d101      	bne.n	8000578 <HAL_ADC_Start+0x1c>
 8000574:	2302      	movs	r3, #2
 8000576:	e7f7      	b.n	8000568 <HAL_ADC_Start+0xc>
{
 8000578:	b510      	push	{r4, lr}
 800057a:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800057c:	2301      	movs	r3, #1
 800057e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 8000582:	f7ff fe9b 	bl	80002bc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000586:	4603      	mov	r3, r0
 8000588:	2800      	cmp	r0, #0
 800058a:	d160      	bne.n	800064e <HAL_ADC_Start+0xf2>
      ADC_STATE_CLR_SET(hadc->State,
 800058c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800058e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000592:	f022 0201 	bic.w	r2, r2, #1
 8000596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800059a:	6462      	str	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800059c:	4a2e      	ldr	r2, [pc, #184]	; (8000658 <HAL_ADC_Start+0xfc>)
 800059e:	6892      	ldr	r2, [r2, #8]
 80005a0:	f012 0f1f 	tst.w	r2, #31
 80005a4:	d033      	beq.n	800060e <HAL_ADC_Start+0xb2>
 80005a6:	6821      	ldr	r1, [r4, #0]
 80005a8:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80005ac:	d02f      	beq.n	800060e <HAL_ADC_Start+0xb2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80005b4:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005b6:	4a29      	ldr	r2, [pc, #164]	; (800065c <HAL_ADC_Start+0x100>)
 80005b8:	4291      	cmp	r1, r2
 80005ba:	d038      	beq.n	800062e <HAL_ADC_Start+0xd2>
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005bc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005be:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80005c2:	d041      	beq.n	8000648 <HAL_ADC_Start+0xec>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80005c4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80005c6:	f022 0206 	bic.w	r2, r2, #6
 80005ca:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80005cc:	2200      	movs	r2, #0
 80005ce:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005d2:	6822      	ldr	r2, [r4, #0]
 80005d4:	211c      	movs	r1, #28
 80005d6:	6011      	str	r1, [r2, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80005d8:	4a1f      	ldr	r2, [pc, #124]	; (8000658 <HAL_ADC_Start+0xfc>)
 80005da:	6892      	ldr	r2, [r2, #8]
 80005dc:	f012 0f1f 	tst.w	r2, #31
 80005e0:	d00f      	beq.n	8000602 <HAL_ADC_Start+0xa6>
 80005e2:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <HAL_ADC_Start+0xfc>)
 80005e4:	6892      	ldr	r2, [r2, #8]
 80005e6:	f002 021f 	and.w	r2, r2, #31
 80005ea:	2a05      	cmp	r2, #5
 80005ec:	d009      	beq.n	8000602 <HAL_ADC_Start+0xa6>
 80005ee:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <HAL_ADC_Start+0xfc>)
 80005f0:	6892      	ldr	r2, [r2, #8]
 80005f2:	f002 021f 	and.w	r2, r2, #31
 80005f6:	2a09      	cmp	r2, #9
 80005f8:	d003      	beq.n	8000602 <HAL_ADC_Start+0xa6>
 80005fa:	6822      	ldr	r2, [r4, #0]
 80005fc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000600:	d128      	bne.n	8000654 <HAL_ADC_Start+0xf8>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000602:	6821      	ldr	r1, [r4, #0]
 8000604:	688a      	ldr	r2, [r1, #8]
 8000606:	f042 0204 	orr.w	r2, r2, #4
 800060a:	608a      	str	r2, [r1, #8]
 800060c:	e022      	b.n	8000654 <HAL_ADC_Start+0xf8>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800060e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000610:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000614:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000616:	6822      	ldr	r2, [r4, #0]
 8000618:	68d2      	ldr	r2, [r2, #12]
 800061a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800061e:	d0cd      	beq.n	80005bc <HAL_ADC_Start+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000620:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000622:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000626:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800062a:	6462      	str	r2, [r4, #68]	; 0x44
 800062c:	e7c6      	b.n	80005bc <HAL_ADC_Start+0x60>
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800062e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000632:	68d2      	ldr	r2, [r2, #12]
 8000634:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000638:	d0c0      	beq.n	80005bc <HAL_ADC_Start+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800063a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800063c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000640:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000644:	6462      	str	r2, [r4, #68]	; 0x44
 8000646:	e7b9      	b.n	80005bc <HAL_ADC_Start+0x60>
        ADC_CLEAR_ERRORCODE(hadc);
 8000648:	2200      	movs	r2, #0
 800064a:	64a2      	str	r2, [r4, #72]	; 0x48
 800064c:	e7be      	b.n	80005cc <HAL_ADC_Start+0x70>
      __HAL_UNLOCK(hadc);
 800064e:	2200      	movs	r2, #0
 8000650:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
}
 8000654:	4618      	mov	r0, r3
 8000656:	bd10      	pop	{r4, pc}
 8000658:	50000300 	.word	0x50000300
 800065c:	50000100 	.word	0x50000100

08000660 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000660:	6803      	ldr	r3, [r0, #0]
 8000662:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000664:	4770      	bx	lr
	...

08000668 <HAL_ADC_ConfigChannel>:
{
 8000668:	b470      	push	{r4, r5, r6}
 800066a:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 800066c:	2200      	movs	r2, #0
 800066e:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hadc);
 8000670:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8000674:	2a01      	cmp	r2, #1
 8000676:	f000 81ad 	beq.w	80009d4 <HAL_ADC_ConfigChannel+0x36c>
 800067a:	4603      	mov	r3, r0
 800067c:	2201      	movs	r2, #1
 800067e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000682:	6800      	ldr	r0, [r0, #0]
 8000684:	6882      	ldr	r2, [r0, #8]
 8000686:	f012 0f04 	tst.w	r2, #4
 800068a:	f040 8196 	bne.w	80009ba <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank < 5U)
 800068e:	684a      	ldr	r2, [r1, #4]
 8000690:	2a04      	cmp	r2, #4
 8000692:	d831      	bhi.n	80006f8 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 8000694:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000696:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800069a:	0055      	lsls	r5, r2, #1
 800069c:	221f      	movs	r2, #31
 800069e:	40aa      	lsls	r2, r5
 80006a0:	ea24 0202 	bic.w	r2, r4, r2
 80006a4:	680c      	ldr	r4, [r1, #0]
 80006a6:	40ac      	lsls	r4, r5
 80006a8:	4322      	orrs	r2, r4
 80006aa:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	6882      	ldr	r2, [r0, #8]
 80006b0:	f012 0f0c 	tst.w	r2, #12
 80006b4:	d168      	bne.n	8000788 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80006b6:	680a      	ldr	r2, [r1, #0]
 80006b8:	2a09      	cmp	r2, #9
 80006ba:	d94e      	bls.n	800075a <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80006bc:	6984      	ldr	r4, [r0, #24]
 80006be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80006c2:	3a1e      	subs	r2, #30
 80006c4:	2507      	movs	r5, #7
 80006c6:	4095      	lsls	r5, r2
 80006c8:	ea24 0405 	bic.w	r4, r4, r5
 80006cc:	688d      	ldr	r5, [r1, #8]
 80006ce:	fa05 f202 	lsl.w	r2, r5, r2
 80006d2:	4322      	orrs	r2, r4
 80006d4:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80006d6:	6948      	ldr	r0, [r1, #20]
 80006d8:	681c      	ldr	r4, [r3, #0]
 80006da:	68e2      	ldr	r2, [r4, #12]
 80006dc:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80006e0:	0052      	lsls	r2, r2, #1
 80006e2:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 80006e6:	6908      	ldr	r0, [r1, #16]
 80006e8:	3801      	subs	r0, #1
 80006ea:	2803      	cmp	r0, #3
 80006ec:	f200 808f 	bhi.w	800080e <HAL_ADC_ConfigChannel+0x1a6>
 80006f0:	e8df f000 	tbb	[pc, r0]
 80006f4:	82776c40 	.word	0x82776c40
    else if (sConfig->Rank < 10U)
 80006f8:	2a09      	cmp	r2, #9
 80006fa:	d80e      	bhi.n	800071a <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 80006fc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80006fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000702:	0055      	lsls	r5, r2, #1
 8000704:	3d1e      	subs	r5, #30
 8000706:	221f      	movs	r2, #31
 8000708:	40aa      	lsls	r2, r5
 800070a:	ea24 0202 	bic.w	r2, r4, r2
 800070e:	680c      	ldr	r4, [r1, #0]
 8000710:	fa04 f505 	lsl.w	r5, r4, r5
 8000714:	432a      	orrs	r2, r5
 8000716:	6342      	str	r2, [r0, #52]	; 0x34
 8000718:	e7c8      	b.n	80006ac <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 800071a:	2a0e      	cmp	r2, #14
 800071c:	d80e      	bhi.n	800073c <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800071e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8000720:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000724:	0055      	lsls	r5, r2, #1
 8000726:	3d3c      	subs	r5, #60	; 0x3c
 8000728:	221f      	movs	r2, #31
 800072a:	40aa      	lsls	r2, r5
 800072c:	ea24 0202 	bic.w	r2, r4, r2
 8000730:	680c      	ldr	r4, [r1, #0]
 8000732:	fa04 f505 	lsl.w	r5, r4, r5
 8000736:	432a      	orrs	r2, r5
 8000738:	6382      	str	r2, [r0, #56]	; 0x38
 800073a:	e7b7      	b.n	80006ac <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800073c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800073e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000742:	0055      	lsls	r5, r2, #1
 8000744:	3d5a      	subs	r5, #90	; 0x5a
 8000746:	221f      	movs	r2, #31
 8000748:	40aa      	lsls	r2, r5
 800074a:	ea24 0202 	bic.w	r2, r4, r2
 800074e:	680c      	ldr	r4, [r1, #0]
 8000750:	fa04 f505 	lsl.w	r5, r4, r5
 8000754:	432a      	orrs	r2, r5
 8000756:	63c2      	str	r2, [r0, #60]	; 0x3c
 8000758:	e7a8      	b.n	80006ac <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800075a:	6944      	ldr	r4, [r0, #20]
 800075c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000760:	2507      	movs	r5, #7
 8000762:	4095      	lsls	r5, r2
 8000764:	ea24 0405 	bic.w	r4, r4, r5
 8000768:	688d      	ldr	r5, [r1, #8]
 800076a:	fa05 f202 	lsl.w	r2, r5, r2
 800076e:	4322      	orrs	r2, r4
 8000770:	6142      	str	r2, [r0, #20]
 8000772:	e7b0      	b.n	80006d6 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000774:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8000776:	4d98      	ldr	r5, [pc, #608]	; (80009d8 <HAL_ADC_ConfigChannel+0x370>)
 8000778:	4005      	ands	r5, r0
 800077a:	6808      	ldr	r0, [r1, #0]
 800077c:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000780:	4315      	orrs	r5, r2
 8000782:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000786:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	6882      	ldr	r2, [r0, #8]
 800078c:	f002 0203 	and.w	r2, r2, #3
 8000790:	2a01      	cmp	r2, #1
 8000792:	d06f      	beq.n	8000874 <HAL_ADC_ConfigChannel+0x20c>
 8000794:	2200      	movs	r2, #0
 8000796:	2a00      	cmp	r2, #0
 8000798:	f040 811a 	bne.w	80009d0 <HAL_ADC_ConfigChannel+0x368>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800079c:	68cc      	ldr	r4, [r1, #12]
 800079e:	2c01      	cmp	r4, #1
 80007a0:	d070      	beq.n	8000884 <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80007a2:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80007a6:	680e      	ldr	r6, [r1, #0]
 80007a8:	2501      	movs	r5, #1
 80007aa:	40b5      	lsls	r5, r6
 80007ac:	ea24 0405 	bic.w	r4, r4, r5
 80007b0:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80007b4:	6809      	ldr	r1, [r1, #0]
 80007b6:	2910      	cmp	r1, #16
 80007b8:	f000 808d 	beq.w	80008d6 <HAL_ADC_ConfigChannel+0x26e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80007bc:	2911      	cmp	r1, #17
 80007be:	f000 80af 	beq.w	8000920 <HAL_ADC_ConfigChannel+0x2b8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80007c2:	2912      	cmp	r1, #18
 80007c4:	f000 80b2 	beq.w	800092c <HAL_ADC_ConfigChannel+0x2c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007c8:	2000      	movs	r0, #0
 80007ca:	e0fb      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x35c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80007cc:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80007ce:	4d82      	ldr	r5, [pc, #520]	; (80009d8 <HAL_ADC_ConfigChannel+0x370>)
 80007d0:	4005      	ands	r5, r0
 80007d2:	6808      	ldr	r0, [r1, #0]
 80007d4:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80007d8:	4315      	orrs	r5, r2
 80007da:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80007de:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 80007e0:	e7d2      	b.n	8000788 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80007e2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80007e4:	4d7c      	ldr	r5, [pc, #496]	; (80009d8 <HAL_ADC_ConfigChannel+0x370>)
 80007e6:	4005      	ands	r5, r0
 80007e8:	6808      	ldr	r0, [r1, #0]
 80007ea:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80007ee:	4315      	orrs	r5, r2
 80007f0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80007f4:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 80007f6:	e7c7      	b.n	8000788 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80007f8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80007fa:	4877      	ldr	r0, [pc, #476]	; (80009d8 <HAL_ADC_ConfigChannel+0x370>)
 80007fc:	4028      	ands	r0, r5
 80007fe:	680d      	ldr	r5, [r1, #0]
 8000800:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8000804:	4302      	orrs	r2, r0
 8000806:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800080a:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 800080c:	e7bc      	b.n	8000788 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800080e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000810:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000814:	6808      	ldr	r0, [r1, #0]
 8000816:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 800081a:	d01c      	beq.n	8000856 <HAL_ADC_ConfigChannel+0x1ee>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000820:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000824:	680c      	ldr	r4, [r1, #0]
 8000826:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800082a:	d019      	beq.n	8000860 <HAL_ADC_ConfigChannel+0x1f8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800082c:	6818      	ldr	r0, [r3, #0]
 800082e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000830:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000834:	680c      	ldr	r4, [r1, #0]
 8000836:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800083a:	d016      	beq.n	800086a <HAL_ADC_ConfigChannel+0x202>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800083c:	6818      	ldr	r0, [r3, #0]
 800083e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000840:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000844:	680c      	ldr	r4, [r1, #0]
 8000846:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800084a:	d19d      	bne.n	8000788 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800084c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800084e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000852:	66c2      	str	r2, [r0, #108]	; 0x6c
 8000854:	e798      	b.n	8000788 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000856:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000858:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800085c:	6622      	str	r2, [r4, #96]	; 0x60
 800085e:	e7dd      	b.n	800081c <HAL_ADC_ConfigChannel+0x1b4>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000860:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000862:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000866:	6642      	str	r2, [r0, #100]	; 0x64
 8000868:	e7e0      	b.n	800082c <HAL_ADC_ConfigChannel+0x1c4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800086a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800086c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000870:	6682      	str	r2, [r0, #104]	; 0x68
 8000872:	e7e3      	b.n	800083c <HAL_ADC_ConfigChannel+0x1d4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000874:	6802      	ldr	r2, [r0, #0]
 8000876:	f012 0f01 	tst.w	r2, #1
 800087a:	d101      	bne.n	8000880 <HAL_ADC_ConfigChannel+0x218>
 800087c:	2200      	movs	r2, #0
 800087e:	e78a      	b.n	8000796 <HAL_ADC_ConfigChannel+0x12e>
 8000880:	2201      	movs	r2, #1
 8000882:	e788      	b.n	8000796 <HAL_ADC_ConfigChannel+0x12e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000884:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8000888:	680e      	ldr	r6, [r1, #0]
 800088a:	2501      	movs	r5, #1
 800088c:	40b5      	lsls	r5, r6
 800088e:	432c      	orrs	r4, r5
 8000890:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000894:	6808      	ldr	r0, [r1, #0]
 8000896:	2809      	cmp	r0, #9
 8000898:	d90e      	bls.n	80008b8 <HAL_ADC_ConfigChannel+0x250>
        MODIFY_REG(hadc->Instance->SMPR2,
 800089a:	681e      	ldr	r6, [r3, #0]
 800089c:	69b4      	ldr	r4, [r6, #24]
 800089e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80008a2:	381b      	subs	r0, #27
 80008a4:	2507      	movs	r5, #7
 80008a6:	4085      	lsls	r5, r0
 80008a8:	ea24 0405 	bic.w	r4, r4, r5
 80008ac:	688d      	ldr	r5, [r1, #8]
 80008ae:	fa05 f000 	lsl.w	r0, r5, r0
 80008b2:	4320      	orrs	r0, r4
 80008b4:	61b0      	str	r0, [r6, #24]
 80008b6:	e77d      	b.n	80007b4 <HAL_ADC_ConfigChannel+0x14c>
        MODIFY_REG(hadc->Instance->SMPR1,
 80008b8:	681e      	ldr	r6, [r3, #0]
 80008ba:	6974      	ldr	r4, [r6, #20]
 80008bc:	3001      	adds	r0, #1
 80008be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80008c2:	2507      	movs	r5, #7
 80008c4:	4085      	lsls	r5, r0
 80008c6:	ea24 0405 	bic.w	r4, r4, r5
 80008ca:	688d      	ldr	r5, [r1, #8]
 80008cc:	fa05 f000 	lsl.w	r0, r5, r0
 80008d0:	4320      	orrs	r0, r4
 80008d2:	6170      	str	r0, [r6, #20]
 80008d4:	e76e      	b.n	80007b4 <HAL_ADC_ConfigChannel+0x14c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80008d6:	4841      	ldr	r0, [pc, #260]	; (80009dc <HAL_ADC_ConfigChannel+0x374>)
 80008d8:	6880      	ldr	r0, [r0, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80008da:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80008de:	f47f af6d 	bne.w	80007bc <HAL_ADC_ConfigChannel+0x154>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80008e2:	681c      	ldr	r4, [r3, #0]
 80008e4:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80008e8:	d027      	beq.n	800093a <HAL_ADC_ConfigChannel+0x2d2>
 80008ea:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80008ee:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80008f0:	68a0      	ldr	r0, [r4, #8]
 80008f2:	f000 0003 	and.w	r0, r0, #3
 80008f6:	2801      	cmp	r0, #1
 80008f8:	d022      	beq.n	8000940 <HAL_ADC_ConfigChannel+0x2d8>
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	d157      	bne.n	80009ae <HAL_ADC_ConfigChannel+0x346>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80008fe:	9d01      	ldr	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000900:	b135      	cbz	r5, 8000910 <HAL_ADC_ConfigChannel+0x2a8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000902:	68a8      	ldr	r0, [r5, #8]
 8000904:	f000 0003 	and.w	r0, r0, #3
 8000908:	2801      	cmp	r0, #1
 800090a:	d01f      	beq.n	800094c <HAL_ADC_ConfigChannel+0x2e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800090c:	2a00      	cmp	r2, #0
 800090e:	d14e      	bne.n	80009ae <HAL_ADC_ConfigChannel+0x346>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000910:	2910      	cmp	r1, #16
 8000912:	d021      	beq.n	8000958 <HAL_ADC_ConfigChannel+0x2f0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000914:	2911      	cmp	r1, #17
 8000916:	d039      	beq.n	800098c <HAL_ADC_ConfigChannel+0x324>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000918:	2912      	cmp	r1, #18
 800091a:	d041      	beq.n	80009a0 <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800091c:	2000      	movs	r0, #0
 800091e:	e051      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x35c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000920:	482e      	ldr	r0, [pc, #184]	; (80009dc <HAL_ADC_ConfigChannel+0x374>)
 8000922:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000924:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8000928:	d0db      	beq.n	80008e2 <HAL_ADC_ConfigChannel+0x27a>
 800092a:	e74a      	b.n	80007c2 <HAL_ADC_ConfigChannel+0x15a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800092c:	482b      	ldr	r0, [pc, #172]	; (80009dc <HAL_ADC_ConfigChannel+0x374>)
 800092e:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000930:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8000934:	d0d5      	beq.n	80008e2 <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000936:	2000      	movs	r0, #0
 8000938:	e044      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x35c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800093a:	4829      	ldr	r0, [pc, #164]	; (80009e0 <HAL_ADC_ConfigChannel+0x378>)
 800093c:	9001      	str	r0, [sp, #4]
 800093e:	e7d7      	b.n	80008f0 <HAL_ADC_ConfigChannel+0x288>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000940:	6820      	ldr	r0, [r4, #0]
 8000942:	f010 0f01 	tst.w	r0, #1
 8000946:	d0d8      	beq.n	80008fa <HAL_ADC_ConfigChannel+0x292>
 8000948:	2201      	movs	r2, #1
 800094a:	e7d6      	b.n	80008fa <HAL_ADC_ConfigChannel+0x292>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800094c:	6828      	ldr	r0, [r5, #0]
 800094e:	f010 0f01 	tst.w	r0, #1
 8000952:	d0db      	beq.n	800090c <HAL_ADC_ConfigChannel+0x2a4>
 8000954:	2201      	movs	r2, #1
 8000956:	e7d9      	b.n	800090c <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000958:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800095c:	d1da      	bne.n	8000914 <HAL_ADC_ConfigChannel+0x2ac>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800095e:	491f      	ldr	r1, [pc, #124]	; (80009dc <HAL_ADC_ConfigChannel+0x374>)
 8000960:	688a      	ldr	r2, [r1, #8]
 8000962:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000966:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000968:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <HAL_ADC_ConfigChannel+0x37c>)
 800096a:	6812      	ldr	r2, [r2, #0]
 800096c:	491e      	ldr	r1, [pc, #120]	; (80009e8 <HAL_ADC_ConfigChannel+0x380>)
 800096e:	fbb2 f1f1 	udiv	r1, r2, r1
 8000972:	220a      	movs	r2, #10
 8000974:	fb02 f201 	mul.w	r2, r2, r1
 8000978:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 800097a:	e002      	b.n	8000982 <HAL_ADC_ConfigChannel+0x31a>
            wait_loop_index--;
 800097c:	9a00      	ldr	r2, [sp, #0]
 800097e:	3a01      	subs	r2, #1
 8000980:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000982:	9a00      	ldr	r2, [sp, #0]
 8000984:	2a00      	cmp	r2, #0
 8000986:	d1f9      	bne.n	800097c <HAL_ADC_ConfigChannel+0x314>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000988:	2000      	movs	r0, #0
 800098a:	e01b      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x35c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800098c:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8000990:	d1c2      	bne.n	8000918 <HAL_ADC_ConfigChannel+0x2b0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000992:	4912      	ldr	r1, [pc, #72]	; (80009dc <HAL_ADC_ConfigChannel+0x374>)
 8000994:	688a      	ldr	r2, [r1, #8]
 8000996:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800099a:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800099c:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800099e:	e011      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x35c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80009a0:	490e      	ldr	r1, [pc, #56]	; (80009dc <HAL_ADC_ConfigChannel+0x374>)
 80009a2:	688a      	ldr	r2, [r1, #8]
 80009a4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80009a8:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009aa:	2000      	movs	r0, #0
 80009ac:	e00a      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x35c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009b0:	f042 0220 	orr.w	r2, r2, #32
 80009b4:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 80009b6:	2001      	movs	r0, #1
 80009b8:	e004      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x35c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009bc:	f042 0220 	orr.w	r2, r2, #32
 80009c0:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80009c2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80009ca:	b017      	add	sp, #92	; 0x5c
 80009cc:	bc70      	pop	{r4, r5, r6}
 80009ce:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009d0:	2000      	movs	r0, #0
 80009d2:	e7f7      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x35c>
  __HAL_LOCK(hadc);
 80009d4:	2002      	movs	r0, #2
 80009d6:	e7f8      	b.n	80009ca <HAL_ADC_ConfigChannel+0x362>
 80009d8:	83fff000 	.word	0x83fff000
 80009dc:	50000300 	.word	0x50000300
 80009e0:	50000100 	.word	0x50000100
 80009e4:	20000000 	.word	0x20000000
 80009e8:	000f4240 	.word	0x000f4240

080009ec <HAL_ADCEx_MultiModeConfigChannel>:
{
 80009ec:	b470      	push	{r4, r5, r6}
 80009ee:	b097      	sub	sp, #92	; 0x5c
 80009f0:	4603      	mov	r3, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80009f2:	6802      	ldr	r2, [r0, #0]
 80009f4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80009f8:	d040      	beq.n	8000a7c <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80009fa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80009fe:	9001      	str	r0, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000a00:	9801      	ldr	r0, [sp, #4]
 8000a02:	2800      	cmp	r0, #0
 8000a04:	f000 8088 	beq.w	8000b18 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
  __HAL_LOCK(hadc);
 8000a08:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
 8000a0c:	2c01      	cmp	r4, #1
 8000a0e:	f000 8085 	beq.w	8000b1c <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8000a12:	2401      	movs	r4, #1
 8000a14:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000a18:	6892      	ldr	r2, [r2, #8]
 8000a1a:	f012 0f04 	tst.w	r2, #4
 8000a1e:	d168      	bne.n	8000af2 <HAL_ADCEx_MultiModeConfigChannel+0x106>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000a20:	6882      	ldr	r2, [r0, #8]
 8000a22:	f012 0f04 	tst.w	r2, #4
 8000a26:	d164      	bne.n	8000af2 <HAL_ADCEx_MultiModeConfigChannel+0x106>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000a28:	680a      	ldr	r2, [r1, #0]
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	d037      	beq.n	8000a9e <HAL_ADCEx_MultiModeConfigChannel+0xb2>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000a2e:	4d3c      	ldr	r5, [pc, #240]	; (8000b20 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8000a30:	68aa      	ldr	r2, [r5, #8]
 8000a32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000a36:	684c      	ldr	r4, [r1, #4]
 8000a38:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8000a3a:	ea44 3446 	orr.w	r4, r4, r6, lsl #13
 8000a3e:	4322      	orrs	r2, r4
 8000a40:	60aa      	str	r2, [r5, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000a42:	681c      	ldr	r4, [r3, #0]
 8000a44:	68a2      	ldr	r2, [r4, #8]
 8000a46:	f002 0203 	and.w	r2, r2, #3
 8000a4a:	2a01      	cmp	r2, #1
 8000a4c:	d019      	beq.n	8000a82 <HAL_ADCEx_MultiModeConfigChannel+0x96>
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2a00      	cmp	r2, #0
 8000a52:	d159      	bne.n	8000b08 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000a54:	6884      	ldr	r4, [r0, #8]
 8000a56:	f004 0403 	and.w	r4, r4, #3
 8000a5a:	2c01      	cmp	r4, #1
 8000a5c:	d019      	beq.n	8000a92 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000a5e:	2a00      	cmp	r2, #0
 8000a60:	d154      	bne.n	8000b0c <HAL_ADCEx_MultiModeConfigChannel+0x120>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000a62:	4c2f      	ldr	r4, [pc, #188]	; (8000b20 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8000a64:	68a2      	ldr	r2, [r4, #8]
 8000a66:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000a6a:	f022 020f 	bic.w	r2, r2, #15
 8000a6e:	6808      	ldr	r0, [r1, #0]
 8000a70:	6889      	ldr	r1, [r1, #8]
 8000a72:	4301      	orrs	r1, r0
 8000a74:	430a      	orrs	r2, r1
 8000a76:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a78:	2000      	movs	r0, #0
 8000a7a:	e03f      	b.n	8000afc <HAL_ADCEx_MultiModeConfigChannel+0x110>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a7c:	4829      	ldr	r0, [pc, #164]	; (8000b24 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8000a7e:	9001      	str	r0, [sp, #4]
 8000a80:	e7be      	b.n	8000a00 <HAL_ADCEx_MultiModeConfigChannel+0x14>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000a82:	6822      	ldr	r2, [r4, #0]
 8000a84:	f012 0f01 	tst.w	r2, #1
 8000a88:	d101      	bne.n	8000a8e <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	e7e0      	b.n	8000a50 <HAL_ADCEx_MultiModeConfigChannel+0x64>
 8000a8e:	2201      	movs	r2, #1
 8000a90:	e7de      	b.n	8000a50 <HAL_ADCEx_MultiModeConfigChannel+0x64>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000a92:	6800      	ldr	r0, [r0, #0]
 8000a94:	f010 0f01 	tst.w	r0, #1
 8000a98:	d0e1      	beq.n	8000a5e <HAL_ADCEx_MultiModeConfigChannel+0x72>
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	e7df      	b.n	8000a5e <HAL_ADCEx_MultiModeConfigChannel+0x72>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000a9e:	4920      	ldr	r1, [pc, #128]	; (8000b20 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8000aa0:	688a      	ldr	r2, [r1, #8]
 8000aa2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000aa6:	608a      	str	r2, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000aa8:	6819      	ldr	r1, [r3, #0]
 8000aaa:	688a      	ldr	r2, [r1, #8]
 8000aac:	f002 0203 	and.w	r2, r2, #3
 8000ab0:	2a01      	cmp	r2, #1
 8000ab2:	d010      	beq.n	8000ad6 <HAL_ADCEx_MultiModeConfigChannel+0xea>
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	bb5a      	cbnz	r2, 8000b10 <HAL_ADCEx_MultiModeConfigChannel+0x124>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000ab8:	6881      	ldr	r1, [r0, #8]
 8000aba:	f001 0103 	and.w	r1, r1, #3
 8000abe:	2901      	cmp	r1, #1
 8000ac0:	d011      	beq.n	8000ae6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000ac2:	bb3a      	cbnz	r2, 8000b14 <HAL_ADCEx_MultiModeConfigChannel+0x128>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000ac4:	4916      	ldr	r1, [pc, #88]	; (8000b20 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8000ac6:	688a      	ldr	r2, [r1, #8]
 8000ac8:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000acc:	f022 020f 	bic.w	r2, r2, #15
 8000ad0:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	e012      	b.n	8000afc <HAL_ADCEx_MultiModeConfigChannel+0x110>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000ad6:	680a      	ldr	r2, [r1, #0]
 8000ad8:	f012 0f01 	tst.w	r2, #1
 8000adc:	d101      	bne.n	8000ae2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8000ade:	2200      	movs	r2, #0
 8000ae0:	e7e9      	b.n	8000ab6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	e7e7      	b.n	8000ab6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000ae6:	6801      	ldr	r1, [r0, #0]
 8000ae8:	f011 0f01 	tst.w	r1, #1
 8000aec:	d0e9      	beq.n	8000ac2 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
 8000aee:	2201      	movs	r2, #1
 8000af0:	e7e7      	b.n	8000ac2 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000af4:	f042 0220 	orr.w	r2, r2, #32
 8000af8:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000afa:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 8000b02:	b017      	add	sp, #92	; 0x5c
 8000b04:	bc70      	pop	{r4, r5, r6}
 8000b06:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b08:	2000      	movs	r0, #0
 8000b0a:	e7f7      	b.n	8000afc <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	e7f5      	b.n	8000afc <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8000b10:	2000      	movs	r0, #0
 8000b12:	e7f3      	b.n	8000afc <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8000b14:	2000      	movs	r0, #0
 8000b16:	e7f1      	b.n	8000afc <HAL_ADCEx_MultiModeConfigChannel+0x110>
    return HAL_ERROR;
 8000b18:	2001      	movs	r0, #1
 8000b1a:	e7f2      	b.n	8000b02 <HAL_ADCEx_MultiModeConfigChannel+0x116>
  __HAL_LOCK(hadc);
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	e7f0      	b.n	8000b02 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8000b20:	50000300 	.word	0x50000300
 8000b24:	50000100 	.word	0x50000100

08000b28 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b2a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b30:	041b      	lsls	r3, r3, #16
 8000b32:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b34:	0200      	lsls	r0, r0, #8
 8000b36:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000b3c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000b40:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000b44:	60d0      	str	r0, [r2, #12]
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <HAL_NVIC_SetPriority+0x5c>)
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b56:	f1c3 0407 	rsb	r4, r3, #7
 8000b5a:	2c04      	cmp	r4, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b60:	1d1d      	adds	r5, r3, #4
 8000b62:	2d06      	cmp	r5, #6
 8000b64:	d917      	bls.n	8000b96 <HAL_NVIC_SetPriority+0x4a>
 8000b66:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	2501      	movs	r5, #1
 8000b6a:	fa05 f404 	lsl.w	r4, r5, r4
 8000b6e:	3c01      	subs	r4, #1
 8000b70:	4021      	ands	r1, r4
 8000b72:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b74:	fa05 f303 	lsl.w	r3, r5, r3
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	db0b      	blt.n	8000b9a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b82:	0109      	lsls	r1, r1, #4
 8000b84:	b2c9      	uxtb	r1, r1
 8000b86:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b8a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000b8e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b92:	bc30      	pop	{r4, r5}
 8000b94:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	2300      	movs	r3, #0
 8000b98:	e7e6      	b.n	8000b68 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	f000 000f 	and.w	r0, r0, #15
 8000b9e:	0109      	lsls	r1, r1, #4
 8000ba0:	b2c9      	uxtb	r1, r1
 8000ba2:	4b02      	ldr	r3, [pc, #8]	; (8000bac <HAL_NVIC_SetPriority+0x60>)
 8000ba4:	5419      	strb	r1, [r3, r0]
 8000ba6:	e7f4      	b.n	8000b92 <HAL_NVIC_SetPriority+0x46>
 8000ba8:	e000ed00 	.word	0xe000ed00
 8000bac:	e000ed14 	.word	0xe000ed14

08000bb0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bb0:	0942      	lsrs	r2, r0, #5
 8000bb2:	f000 001f 	and.w	r0, r0, #31
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	fa03 f000 	lsl.w	r0, r3, r0
 8000bbc:	4b01      	ldr	r3, [pc, #4]	; (8000bc4 <HAL_NVIC_EnableIRQ+0x14>)
 8000bbe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	3801      	subs	r0, #1
 8000bca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bce:	d20a      	bcs.n	8000be6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_SYSTICK_Config+0x24>)
 8000bd2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	21f0      	movs	r1, #240	; 0xf0
 8000bd6:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <HAL_SYSTICK_Config+0x28>)
 8000bd8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bdc:	2000      	movs	r0, #0
 8000bde:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000be6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000bf4:	2804      	cmp	r0, #4
 8000bf6:	d005      	beq.n	8000c04 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000bf8:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000bfa:	6813      	ldr	r3, [r2, #0]
 8000bfc:	f023 0304 	bic.w	r3, r3, #4
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c04:	4a02      	ldr	r2, [pc, #8]	; (8000c10 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000c06:	6813      	ldr	r3, [r2, #0]
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	4770      	bx	lr
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c14:	4770      	bx	lr

08000c16 <HAL_SYSTICK_IRQHandler>:
{
 8000c16:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000c18:	f7ff fffc 	bl	8000c14 <HAL_SYSTICK_Callback>
 8000c1c:	bd08      	pop	{r3, pc}

08000c1e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c1e:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c20:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d003      	beq.n	8000c30 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	bd08      	pop	{r3, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c30:	6802      	ldr	r2, [r0, #0]
 8000c32:	6813      	ldr	r3, [r2, #0]
 8000c34:	f023 030e 	bic.w	r3, r3, #14
 8000c38:	6013      	str	r3, [r2, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c3a:	6802      	ldr	r2, [r0, #0]
 8000c3c:	6813      	ldr	r3, [r2, #0]
 8000c3e:	f023 0301 	bic.w	r3, r3, #1
 8000c42:	6013      	str	r3, [r2, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c44:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000c46:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c48:	2201      	movs	r2, #1
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	604b      	str	r3, [r1, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c50:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c54:	2300      	movs	r3, #0
 8000c56:	f880 3020 	strb.w	r3, [r0, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000c5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000c5c:	b113      	cbz	r3, 8000c64 <HAL_DMA_Abort_IT+0x46>
    {
      hdma->XferAbortCallback(hdma);
 8000c5e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000c60:	2000      	movs	r0, #0
 8000c62:	bd08      	pop	{r3, pc}
 8000c64:	2000      	movs	r0, #0
    } 
  }
  return status;
}
 8000c66:	bd08      	pop	{r3, pc}

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8000c6c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c6e:	e088      	b.n	8000d82 <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c70:	08de      	lsrs	r6, r3, #3
 8000c72:	3608      	adds	r6, #8
 8000c74:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c78:	f003 0e07 	and.w	lr, r3, #7
 8000c7c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000c80:	270f      	movs	r7, #15
 8000c82:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c86:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c8a:	690f      	ldr	r7, [r1, #16]
 8000c8c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c90:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8000c92:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8000c96:	e083      	b.n	8000da0 <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c98:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c9a:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c9c:	68cf      	ldr	r7, [r1, #12]
 8000c9e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ca2:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000ca4:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca8:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cac:	684e      	ldr	r6, [r1, #4]
 8000cae:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000cb2:	409e      	lsls	r6, r3
 8000cb4:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000cb6:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cb8:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cba:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cbc:	688d      	ldr	r5, [r1, #8]
 8000cbe:	fa05 f50e 	lsl.w	r5, r5, lr
 8000cc2:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000cc4:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc6:	684c      	ldr	r4, [r1, #4]
 8000cc8:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000ccc:	d058      	beq.n	8000d80 <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4c47      	ldr	r4, [pc, #284]	; (8000dec <HAL_GPIO_Init+0x184>)
 8000cd0:	69a5      	ldr	r5, [r4, #24]
 8000cd2:	f045 0501 	orr.w	r5, r5, #1
 8000cd6:	61a5      	str	r5, [r4, #24]
 8000cd8:	69a4      	ldr	r4, [r4, #24]
 8000cda:	f004 0401 	and.w	r4, r4, #1
 8000cde:	9401      	str	r4, [sp, #4]
 8000ce0:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ce2:	089d      	lsrs	r5, r3, #2
 8000ce4:	1cae      	adds	r6, r5, #2
 8000ce6:	4c42      	ldr	r4, [pc, #264]	; (8000df0 <HAL_GPIO_Init+0x188>)
 8000ce8:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000cec:	f003 0603 	and.w	r6, r3, #3
 8000cf0:	00b6      	lsls	r6, r6, #2
 8000cf2:	270f      	movs	r7, #15
 8000cf4:	40b7      	lsls	r7, r6
 8000cf6:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cfa:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000cfe:	d06c      	beq.n	8000dda <HAL_GPIO_Init+0x172>
 8000d00:	4f3c      	ldr	r7, [pc, #240]	; (8000df4 <HAL_GPIO_Init+0x18c>)
 8000d02:	42b8      	cmp	r0, r7
 8000d04:	d06b      	beq.n	8000dde <HAL_GPIO_Init+0x176>
 8000d06:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000d0a:	42b8      	cmp	r0, r7
 8000d0c:	d069      	beq.n	8000de2 <HAL_GPIO_Init+0x17a>
 8000d0e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000d12:	42b8      	cmp	r0, r7
 8000d14:	d05f      	beq.n	8000dd6 <HAL_GPIO_Init+0x16e>
 8000d16:	2705      	movs	r7, #5
 8000d18:	fa07 f606 	lsl.w	r6, r7, r6
 8000d1c:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d1e:	3502      	adds	r5, #2
 8000d20:	4e33      	ldr	r6, [pc, #204]	; (8000df0 <HAL_GPIO_Init+0x188>)
 8000d22:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d26:	4c34      	ldr	r4, [pc, #208]	; (8000df8 <HAL_GPIO_Init+0x190>)
 8000d28:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d2a:	43d4      	mvns	r4, r2
 8000d2c:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d30:	684f      	ldr	r7, [r1, #4]
 8000d32:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000d36:	d001      	beq.n	8000d3c <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8000d38:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8000d3c:	4d2e      	ldr	r5, [pc, #184]	; (8000df8 <HAL_GPIO_Init+0x190>)
 8000d3e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8000d40:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d42:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d46:	684f      	ldr	r7, [r1, #4]
 8000d48:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000d4c:	d001      	beq.n	8000d52 <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 8000d4e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8000d52:	4d29      	ldr	r5, [pc, #164]	; (8000df8 <HAL_GPIO_Init+0x190>)
 8000d54:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d56:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d58:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d5c:	684f      	ldr	r7, [r1, #4]
 8000d5e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000d62:	d001      	beq.n	8000d68 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 8000d64:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8000d68:	4d23      	ldr	r5, [pc, #140]	; (8000df8 <HAL_GPIO_Init+0x190>)
 8000d6a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8000d6c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d6e:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d70:	684e      	ldr	r6, [r1, #4]
 8000d72:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000d76:	d001      	beq.n	8000d7c <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 8000d78:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <HAL_GPIO_Init+0x190>)
 8000d7e:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8000d80:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d82:	680a      	ldr	r2, [r1, #0]
 8000d84:	fa32 f403 	lsrs.w	r4, r2, r3
 8000d88:	d02d      	beq.n	8000de6 <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d8a:	2501      	movs	r5, #1
 8000d8c:	409d      	lsls	r5, r3
    if(iocurrent)
 8000d8e:	402a      	ands	r2, r5
 8000d90:	d0f6      	beq.n	8000d80 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d92:	684c      	ldr	r4, [r1, #4]
 8000d94:	2c02      	cmp	r4, #2
 8000d96:	f43f af6b 	beq.w	8000c70 <HAL_GPIO_Init+0x8>
 8000d9a:	2c12      	cmp	r4, #18
 8000d9c:	f43f af68 	beq.w	8000c70 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000da0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000da6:	2403      	movs	r4, #3
 8000da8:	fa04 f40e 	lsl.w	r4, r4, lr
 8000dac:	43e4      	mvns	r4, r4
 8000dae:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db0:	684f      	ldr	r7, [r1, #4]
 8000db2:	f007 0703 	and.w	r7, r7, #3
 8000db6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dba:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000dbc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dbe:	684e      	ldr	r6, [r1, #4]
 8000dc0:	1e77      	subs	r7, r6, #1
 8000dc2:	2f01      	cmp	r7, #1
 8000dc4:	f67f af68 	bls.w	8000c98 <HAL_GPIO_Init+0x30>
 8000dc8:	2e11      	cmp	r6, #17
 8000dca:	f43f af65 	beq.w	8000c98 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dce:	2e12      	cmp	r6, #18
 8000dd0:	f47f af72 	bne.w	8000cb8 <HAL_GPIO_Init+0x50>
 8000dd4:	e760      	b.n	8000c98 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dd6:	2703      	movs	r7, #3
 8000dd8:	e79e      	b.n	8000d18 <HAL_GPIO_Init+0xb0>
 8000dda:	2700      	movs	r7, #0
 8000ddc:	e79c      	b.n	8000d18 <HAL_GPIO_Init+0xb0>
 8000dde:	2701      	movs	r7, #1
 8000de0:	e79a      	b.n	8000d18 <HAL_GPIO_Init+0xb0>
 8000de2:	2702      	movs	r7, #2
 8000de4:	e798      	b.n	8000d18 <HAL_GPIO_Init+0xb0>
  }
}
 8000de6:	b003      	add	sp, #12
 8000de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40010000 	.word	0x40010000
 8000df4:	48000400 	.word	0x48000400
 8000df8:	40010400 	.word	0x40010400

08000dfc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dfc:	6903      	ldr	r3, [r0, #16]
 8000dfe:	4219      	tst	r1, r3
 8000e00:	d101      	bne.n	8000e06 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e02:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000e04:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000e06:	2001      	movs	r0, #1
 8000e08:	4770      	bx	lr

08000e0a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e0a:	b90a      	cbnz	r2, 8000e10 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e0c:	6281      	str	r1, [r0, #40]	; 0x28
 8000e0e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e10:	6181      	str	r1, [r0, #24]
 8000e12:	4770      	bx	lr

08000e14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e14:	4770      	bx	lr
	...

08000e18 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000e18:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	4203      	tst	r3, r0
 8000e20:	d100      	bne.n	8000e24 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8000e22:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e24:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000e26:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e28:	f7ff fff4 	bl	8000e14 <HAL_GPIO_EXTI_Callback>
}
 8000e2c:	e7f9      	b.n	8000e22 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000e2e:	bf00      	nop
 8000e30:	40010400 	.word	0x40010400

08000e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e3a:	6803      	ldr	r3, [r0, #0]
 8000e3c:	f013 0f01 	tst.w	r3, #1
 8000e40:	d063      	beq.n	8000f0a <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e42:	4bb5      	ldr	r3, [pc, #724]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	d046      	beq.n	8000edc <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e4e:	4bb2      	ldr	r3, [pc, #712]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	d03b      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e5a:	6863      	ldr	r3, [r4, #4]
 8000e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e60:	f000 808e 	beq.w	8000f80 <HAL_RCC_OscConfig+0x14c>
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f040 8091 	bne.w	8000f8c <HAL_RCC_OscConfig+0x158>
 8000e6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e6e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e80:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e82:	4aa5      	ldr	r2, [pc, #660]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000e84:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000e86:	f023 030f 	bic.w	r3, r3, #15
 8000e8a:	68a1      	ldr	r1, [r4, #8]
 8000e8c:	430b      	orrs	r3, r1
 8000e8e:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e90:	6863      	ldr	r3, [r4, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 8094 	beq.w	8000fc0 <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e98:	f7ff f9c6 	bl	8000228 <HAL_GetTick>
 8000e9c:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea2:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea6:	4b9c      	ldr	r3, [pc, #624]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000ea8:	6819      	ldr	r1, [r3, #0]
 8000eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eae:	fa93 f3a3 	rbit	r3, r3
 8000eb2:	fab3 f383 	clz	r3, r3
 8000eb6:	f003 031f 	and.w	r3, r3, #31
 8000eba:	2201      	movs	r2, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	4219      	tst	r1, r3
 8000ec2:	d122      	bne.n	8000f0a <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ec4:	f7ff f9b0 	bl	8000228 <HAL_GetTick>
 8000ec8:	1b40      	subs	r0, r0, r5
 8000eca:	2864      	cmp	r0, #100	; 0x64
 8000ecc:	d9e7      	bls.n	8000e9e <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 8000ece:	2003      	movs	r0, #3
 8000ed0:	e2ab      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ed2:	4b91      	ldr	r3, [pc, #580]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000eda:	d0be      	beq.n	8000e5a <HAL_RCC_OscConfig+0x26>
 8000edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee0:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee4:	4b8c      	ldr	r3, [pc, #560]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000ee6:	6819      	ldr	r1, [r3, #0]
 8000ee8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eec:	fa93 f3a3 	rbit	r3, r3
 8000ef0:	fab3 f383 	clz	r3, r3
 8000ef4:	f003 031f 	and.w	r3, r3, #31
 8000ef8:	2201      	movs	r2, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	4219      	tst	r1, r3
 8000f00:	d003      	beq.n	8000f0a <HAL_RCC_OscConfig+0xd6>
 8000f02:	6863      	ldr	r3, [r4, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 8289 	beq.w	800141c <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	f013 0f02 	tst.w	r3, #2
 8000f10:	f000 809c 	beq.w	800104c <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f14:	4b80      	ldr	r3, [pc, #512]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f013 0f0c 	tst.w	r3, #12
 8000f1c:	d072      	beq.n	8001004 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f1e:	4b7e      	ldr	r3, [pc, #504]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	2b08      	cmp	r3, #8
 8000f28:	d067      	beq.n	8000ffa <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f2a:	6923      	ldr	r3, [r4, #16]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 80cb 	beq.w	80010c8 <HAL_RCC_OscConfig+0x294>
 8000f32:	2201      	movs	r2, #1
 8000f34:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f38:	fab3 f383 	clz	r3, r3
 8000f3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f48:	f7ff f96e 	bl	8000228 <HAL_GetTick>
 8000f4c:	4605      	mov	r5, r0
 8000f4e:	2302      	movs	r3, #2
 8000f50:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f54:	4b70      	ldr	r3, [pc, #448]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f56:	6819      	ldr	r1, [r3, #0]
 8000f58:	2302      	movs	r3, #2
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	fab3 f383 	clz	r3, r3
 8000f62:	f003 031f 	and.w	r3, r3, #31
 8000f66:	2201      	movs	r2, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	4219      	tst	r1, r3
 8000f6e:	f040 809c 	bne.w	80010aa <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f72:	f7ff f959 	bl	8000228 <HAL_GetTick>
 8000f76:	1b40      	subs	r0, r0, r5
 8000f78:	2802      	cmp	r0, #2
 8000f7a:	d9e8      	bls.n	8000f4e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	e254      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f80:	4a65      	ldr	r2, [pc, #404]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f82:	6813      	ldr	r3, [r2, #0]
 8000f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e77a      	b.n	8000e82 <HAL_RCC_OscConfig+0x4e>
 8000f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f90:	d009      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x172>
 8000f92:	4b61      	ldr	r3, [pc, #388]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	e76d      	b.n	8000e82 <HAL_RCC_OscConfig+0x4e>
 8000fa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000faa:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	e760      	b.n	8000e82 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8000fc0:	f7ff f932 	bl	8000228 <HAL_GetTick>
 8000fc4:	4605      	mov	r5, r0
 8000fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fca:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fce:	4b52      	ldr	r3, [pc, #328]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000fd0:	6819      	ldr	r1, [r3, #0]
 8000fd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	fab3 f383 	clz	r3, r3
 8000fde:	f003 031f 	and.w	r3, r3, #31
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	4219      	tst	r1, r3
 8000fea:	d08e      	beq.n	8000f0a <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fec:	f7ff f91c 	bl	8000228 <HAL_GetTick>
 8000ff0:	1b40      	subs	r0, r0, r5
 8000ff2:	2864      	cmp	r0, #100	; 0x64
 8000ff4:	d9e7      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8000ff6:	2003      	movs	r0, #3
 8000ff8:	e217      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ffa:	4b47      	ldr	r3, [pc, #284]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001002:	d192      	bne.n	8000f2a <HAL_RCC_OscConfig+0xf6>
 8001004:	2302      	movs	r3, #2
 8001006:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100a:	4b43      	ldr	r3, [pc, #268]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 800100c:	6819      	ldr	r1, [r3, #0]
 800100e:	2302      	movs	r3, #2
 8001010:	fa93 f3a3 	rbit	r3, r3
 8001014:	fab3 f383 	clz	r3, r3
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	2201      	movs	r2, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	4219      	tst	r1, r3
 8001024:	d004      	beq.n	8001030 <HAL_RCC_OscConfig+0x1fc>
 8001026:	6923      	ldr	r3, [r4, #16]
 8001028:	4293      	cmp	r3, r2
 800102a:	d001      	beq.n	8001030 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 800102c:	2001      	movs	r0, #1
 800102e:	e1fc      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001030:	4839      	ldr	r0, [pc, #228]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8001032:	6803      	ldr	r3, [r0, #0]
 8001034:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001038:	6961      	ldr	r1, [r4, #20]
 800103a:	22f8      	movs	r2, #248	; 0xf8
 800103c:	fa92 f2a2 	rbit	r2, r2
 8001040:	fab2 f282 	clz	r2, r2
 8001044:	fa01 f202 	lsl.w	r2, r1, r2
 8001048:	4313      	orrs	r3, r2
 800104a:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	f013 0f08 	tst.w	r3, #8
 8001052:	f000 808d 	beq.w	8001170 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001056:	69a3      	ldr	r3, [r4, #24]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d061      	beq.n	8001120 <HAL_RCC_OscConfig+0x2ec>
 800105c:	2101      	movs	r1, #1
 800105e:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001062:	fab2 f282 	clz	r2, r2
 8001066:	4b2d      	ldr	r3, [pc, #180]	; (800111c <HAL_RCC_OscConfig+0x2e8>)
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106e:	f7ff f8db 	bl	8000228 <HAL_GetTick>
 8001072:	4605      	mov	r5, r0
 8001074:	2302      	movs	r3, #2
 8001076:	fa93 f2a3 	rbit	r2, r3
 800107a:	fa93 f2a3 	rbit	r2, r3
 800107e:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001082:	4a25      	ldr	r2, [pc, #148]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 8001084:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001086:	fa93 f3a3 	rbit	r3, r3
 800108a:	fab3 f383 	clz	r3, r3
 800108e:	f003 031f 	and.w	r3, r3, #31
 8001092:	2201      	movs	r2, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	4219      	tst	r1, r3
 800109a:	d169      	bne.n	8001170 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800109c:	f7ff f8c4 	bl	8000228 <HAL_GetTick>
 80010a0:	1b40      	subs	r0, r0, r5
 80010a2:	2802      	cmp	r0, #2
 80010a4:	d9e6      	bls.n	8001074 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80010a6:	2003      	movs	r0, #3
 80010a8:	e1bf      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010aa:	481b      	ldr	r0, [pc, #108]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 80010ac:	6803      	ldr	r3, [r0, #0]
 80010ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010b2:	6961      	ldr	r1, [r4, #20]
 80010b4:	22f8      	movs	r2, #248	; 0xf8
 80010b6:	fa92 f2a2 	rbit	r2, r2
 80010ba:	fab2 f282 	clz	r2, r2
 80010be:	fa01 f202 	lsl.w	r2, r1, r2
 80010c2:	4313      	orrs	r3, r2
 80010c4:	6003      	str	r3, [r0, #0]
 80010c6:	e7c1      	b.n	800104c <HAL_RCC_OscConfig+0x218>
 80010c8:	2301      	movs	r3, #1
 80010ca:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80010ce:	fab3 f383 	clz	r3, r3
 80010d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010e0:	f7ff f8a2 	bl	8000228 <HAL_GetTick>
 80010e4:	4605      	mov	r5, r0
 80010e6:	2302      	movs	r3, #2
 80010e8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_RCC_OscConfig+0x2e4>)
 80010ee:	6819      	ldr	r1, [r3, #0]
 80010f0:	2302      	movs	r3, #2
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	f003 031f 	and.w	r3, r3, #31
 80010fe:	2201      	movs	r2, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	4219      	tst	r1, r3
 8001106:	d0a1      	beq.n	800104c <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001108:	f7ff f88e 	bl	8000228 <HAL_GetTick>
 800110c:	1b40      	subs	r0, r0, r5
 800110e:	2802      	cmp	r0, #2
 8001110:	d9e9      	bls.n	80010e6 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8001112:	2003      	movs	r0, #3
 8001114:	e189      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	10908120 	.word	0x10908120
 8001120:	2201      	movs	r2, #1
 8001122:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001126:	fab2 f282 	clz	r2, r2
 800112a:	4bc1      	ldr	r3, [pc, #772]	; (8001430 <HAL_RCC_OscConfig+0x5fc>)
 800112c:	4413      	add	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001134:	f7ff f878 	bl	8000228 <HAL_GetTick>
 8001138:	4605      	mov	r5, r0
 800113a:	2302      	movs	r3, #2
 800113c:	fa93 f2a3 	rbit	r2, r3
 8001140:	fa93 f2a3 	rbit	r2, r3
 8001144:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001148:	4aba      	ldr	r2, [pc, #744]	; (8001434 <HAL_RCC_OscConfig+0x600>)
 800114a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800114c:	fa93 f3a3 	rbit	r3, r3
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	f003 031f 	and.w	r3, r3, #31
 8001158:	2201      	movs	r2, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	4219      	tst	r1, r3
 8001160:	d006      	beq.n	8001170 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001162:	f7ff f861 	bl	8000228 <HAL_GetTick>
 8001166:	1b40      	subs	r0, r0, r5
 8001168:	2802      	cmp	r0, #2
 800116a:	d9e6      	bls.n	800113a <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 800116c:	2003      	movs	r0, #3
 800116e:	e15c      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	f013 0f04 	tst.w	r3, #4
 8001176:	f000 80b3 	beq.w	80012e0 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800117a:	4bae      	ldr	r3, [pc, #696]	; (8001434 <HAL_RCC_OscConfig+0x600>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001182:	d126      	bne.n	80011d2 <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001184:	4bab      	ldr	r3, [pc, #684]	; (8001434 <HAL_RCC_OscConfig+0x600>)
 8001186:	69da      	ldr	r2, [r3, #28]
 8001188:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800118c:	61da      	str	r2, [r3, #28]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001198:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119a:	4ba7      	ldr	r3, [pc, #668]	; (8001438 <HAL_RCC_OscConfig+0x604>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f413 7f80 	tst.w	r3, #256	; 0x100
 80011a2:	d018      	beq.n	80011d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a4:	68e3      	ldr	r3, [r4, #12]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d029      	beq.n	80011fe <HAL_RCC_OscConfig+0x3ca>
 80011aa:	bb73      	cbnz	r3, 800120a <HAL_RCC_OscConfig+0x3d6>
 80011ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011b0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80011b4:	6a1a      	ldr	r2, [r3, #32]
 80011b6:	f022 0201 	bic.w	r2, r2, #1
 80011ba:	621a      	str	r2, [r3, #32]
 80011bc:	6a1a      	ldr	r2, [r3, #32]
 80011be:	f022 0204 	bic.w	r2, r2, #4
 80011c2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011c4:	68e3      	ldr	r3, [r4, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d05d      	beq.n	8001286 <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ca:	f7ff f82d 	bl	8000228 <HAL_GetTick>
 80011ce:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d0:	e047      	b.n	8001262 <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 80011d2:	2500      	movs	r5, #0
 80011d4:	e7e1      	b.n	800119a <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011d6:	4a98      	ldr	r2, [pc, #608]	; (8001438 <HAL_RCC_OscConfig+0x604>)
 80011d8:	6813      	ldr	r3, [r2, #0]
 80011da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011de:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80011e0:	f7ff f822 	bl	8000228 <HAL_GetTick>
 80011e4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e6:	4b94      	ldr	r3, [pc, #592]	; (8001438 <HAL_RCC_OscConfig+0x604>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 80011ee:	d1d9      	bne.n	80011a4 <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f0:	f7ff f81a 	bl	8000228 <HAL_GetTick>
 80011f4:	1b80      	subs	r0, r0, r6
 80011f6:	2864      	cmp	r0, #100	; 0x64
 80011f8:	d9f5      	bls.n	80011e6 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 80011fa:	2003      	movs	r0, #3
 80011fc:	e115      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011fe:	4a8d      	ldr	r2, [pc, #564]	; (8001434 <HAL_RCC_OscConfig+0x600>)
 8001200:	6a13      	ldr	r3, [r2, #32]
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6213      	str	r3, [r2, #32]
 8001208:	e7dc      	b.n	80011c4 <HAL_RCC_OscConfig+0x390>
 800120a:	2b05      	cmp	r3, #5
 800120c:	d009      	beq.n	8001222 <HAL_RCC_OscConfig+0x3ee>
 800120e:	4b89      	ldr	r3, [pc, #548]	; (8001434 <HAL_RCC_OscConfig+0x600>)
 8001210:	6a1a      	ldr	r2, [r3, #32]
 8001212:	f022 0201 	bic.w	r2, r2, #1
 8001216:	621a      	str	r2, [r3, #32]
 8001218:	6a1a      	ldr	r2, [r3, #32]
 800121a:	f022 0204 	bic.w	r2, r2, #4
 800121e:	621a      	str	r2, [r3, #32]
 8001220:	e7d0      	b.n	80011c4 <HAL_RCC_OscConfig+0x390>
 8001222:	4b84      	ldr	r3, [pc, #528]	; (8001434 <HAL_RCC_OscConfig+0x600>)
 8001224:	6a1a      	ldr	r2, [r3, #32]
 8001226:	f042 0204 	orr.w	r2, r2, #4
 800122a:	621a      	str	r2, [r3, #32]
 800122c:	6a1a      	ldr	r2, [r3, #32]
 800122e:	f042 0201 	orr.w	r2, r2, #1
 8001232:	621a      	str	r2, [r3, #32]
 8001234:	e7c6      	b.n	80011c4 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001236:	4b7f      	ldr	r3, [pc, #508]	; (8001434 <HAL_RCC_OscConfig+0x600>)
 8001238:	6a19      	ldr	r1, [r3, #32]
 800123a:	2302      	movs	r3, #2
 800123c:	fa93 f3a3 	rbit	r3, r3
 8001240:	fab3 f383 	clz	r3, r3
 8001244:	f003 031f 	and.w	r3, r3, #31
 8001248:	2201      	movs	r2, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	4219      	tst	r1, r3
 8001250:	d145      	bne.n	80012de <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001252:	f7fe ffe9 	bl	8000228 <HAL_GetTick>
 8001256:	1b80      	subs	r0, r0, r6
 8001258:	f241 3388 	movw	r3, #5000	; 0x1388
 800125c:	4298      	cmp	r0, r3
 800125e:	f200 80df 	bhi.w	8001420 <HAL_RCC_OscConfig+0x5ec>
 8001262:	2302      	movs	r3, #2
 8001264:	fa93 f2a3 	rbit	r2, r3
 8001268:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800126c:	fab3 f383 	clz	r3, r3
 8001270:	095b      	lsrs	r3, r3, #5
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	2b02      	cmp	r3, #2
 8001278:	d0dd      	beq.n	8001236 <HAL_RCC_OscConfig+0x402>
 800127a:	2302      	movs	r3, #2
 800127c:	fa93 f3a3 	rbit	r3, r3
 8001280:	4b6c      	ldr	r3, [pc, #432]	; (8001434 <HAL_RCC_OscConfig+0x600>)
 8001282:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001284:	e7d9      	b.n	800123a <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001286:	f7fe ffcf 	bl	8000228 <HAL_GetTick>
 800128a:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128c:	e015      	b.n	80012ba <HAL_RCC_OscConfig+0x486>
 800128e:	4b69      	ldr	r3, [pc, #420]	; (8001434 <HAL_RCC_OscConfig+0x600>)
 8001290:	6a19      	ldr	r1, [r3, #32]
 8001292:	2302      	movs	r3, #2
 8001294:	fa93 f3a3 	rbit	r3, r3
 8001298:	fab3 f383 	clz	r3, r3
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	2201      	movs	r2, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	4219      	tst	r1, r3
 80012a8:	d019      	beq.n	80012de <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012aa:	f7fe ffbd 	bl	8000228 <HAL_GetTick>
 80012ae:	1b80      	subs	r0, r0, r6
 80012b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80012b4:	4298      	cmp	r0, r3
 80012b6:	f200 80b5 	bhi.w	8001424 <HAL_RCC_OscConfig+0x5f0>
 80012ba:	2302      	movs	r3, #2
 80012bc:	fa93 f2a3 	rbit	r2, r3
 80012c0:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c4:	fab3 f383 	clz	r3, r3
 80012c8:	095b      	lsrs	r3, r3, #5
 80012ca:	f043 0302 	orr.w	r3, r3, #2
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d0dd      	beq.n	800128e <HAL_RCC_OscConfig+0x45a>
 80012d2:	2302      	movs	r3, #2
 80012d4:	fa93 f3a3 	rbit	r3, r3
 80012d8:	4b56      	ldr	r3, [pc, #344]	; (8001434 <HAL_RCC_OscConfig+0x600>)
 80012da:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80012dc:	e7d9      	b.n	8001292 <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012de:	bbb5      	cbnz	r5, 800134e <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012e0:	69e3      	ldr	r3, [r4, #28]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 80a0 	beq.w	8001428 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e8:	4a52      	ldr	r2, [pc, #328]	; (8001434 <HAL_RCC_OscConfig+0x600>)
 80012ea:	6852      	ldr	r2, [r2, #4]
 80012ec:	f002 020c 	and.w	r2, r2, #12
 80012f0:	2a08      	cmp	r2, #8
 80012f2:	f000 80a3 	beq.w	800143c <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d02f      	beq.n	800135a <HAL_RCC_OscConfig+0x526>
 80012fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012fe:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800130a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7fe ff88 	bl	8000228 <HAL_GetTick>
 8001318:	4604      	mov	r4, r0
 800131a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800131e:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	4b44      	ldr	r3, [pc, #272]	; (8001434 <HAL_RCC_OscConfig+0x600>)
 8001324:	6819      	ldr	r1, [r3, #0]
 8001326:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	fab3 f383 	clz	r3, r3
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	2201      	movs	r2, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	4219      	tst	r1, r3
 800133e:	d06b      	beq.n	8001418 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001340:	f7fe ff72 	bl	8000228 <HAL_GetTick>
 8001344:	1b00      	subs	r0, r0, r4
 8001346:	2802      	cmp	r0, #2
 8001348:	d9e7      	bls.n	800131a <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 800134a:	2003      	movs	r0, #3
 800134c:	e06d      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800134e:	4a39      	ldr	r2, [pc, #228]	; (8001434 <HAL_RCC_OscConfig+0x600>)
 8001350:	69d3      	ldr	r3, [r2, #28]
 8001352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001356:	61d3      	str	r3, [r2, #28]
 8001358:	e7c2      	b.n	80012e0 <HAL_RCC_OscConfig+0x4ac>
 800135a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800135e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001362:	fab3 f383 	clz	r3, r3
 8001366:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800136a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001374:	f7fe ff58 	bl	8000228 <HAL_GetTick>
 8001378:	4605      	mov	r5, r0
 800137a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800137e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001382:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <HAL_RCC_OscConfig+0x600>)
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800138a:	fa93 f3a3 	rbit	r3, r3
 800138e:	fab3 f383 	clz	r3, r3
 8001392:	f003 031f 	and.w	r3, r3, #31
 8001396:	2201      	movs	r2, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	4219      	tst	r1, r3
 800139e:	d006      	beq.n	80013ae <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a0:	f7fe ff42 	bl	8000228 <HAL_GetTick>
 80013a4:	1b40      	subs	r0, r0, r5
 80013a6:	2802      	cmp	r0, #2
 80013a8:	d9e7      	bls.n	800137a <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 80013aa:	2003      	movs	r0, #3
 80013ac:	e03d      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ae:	4921      	ldr	r1, [pc, #132]	; (8001434 <HAL_RCC_OscConfig+0x600>)
 80013b0:	684b      	ldr	r3, [r1, #4]
 80013b2:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80013b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013b8:	6a20      	ldr	r0, [r4, #32]
 80013ba:	4302      	orrs	r2, r0
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
 80013c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013c4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80013c8:	fab3 f383 	clz	r3, r3
 80013cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013da:	f7fe ff25 	bl	8000228 <HAL_GetTick>
 80013de:	4604      	mov	r4, r0
 80013e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013e4:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_RCC_OscConfig+0x600>)
 80013ea:	6819      	ldr	r1, [r3, #0]
 80013ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013f0:	fa93 f3a3 	rbit	r3, r3
 80013f4:	fab3 f383 	clz	r3, r3
 80013f8:	f003 031f 	and.w	r3, r3, #31
 80013fc:	2201      	movs	r2, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	4219      	tst	r1, r3
 8001404:	d106      	bne.n	8001414 <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001406:	f7fe ff0f 	bl	8000228 <HAL_GetTick>
 800140a:	1b00      	subs	r0, r0, r4
 800140c:	2802      	cmp	r0, #2
 800140e:	d9e7      	bls.n	80013e0 <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 8001410:	2003      	movs	r0, #3
 8001412:	e00a      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001414:	2000      	movs	r0, #0
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>
 8001418:	2000      	movs	r0, #0
 800141a:	e006      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 800141c:	2001      	movs	r0, #1
 800141e:	e004      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8001420:	2003      	movs	r0, #3
 8001422:	e002      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8001424:	2003      	movs	r0, #3
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 8001428:	2000      	movs	r0, #0
}
 800142a:	b002      	add	sp, #8
 800142c:	bd70      	pop	{r4, r5, r6, pc}
 800142e:	bf00      	nop
 8001430:	10908120 	.word	0x10908120
 8001434:	40021000 	.word	0x40021000
 8001438:	40007000 	.word	0x40007000
      return HAL_ERROR;
 800143c:	2001      	movs	r0, #1
 800143e:	e7f4      	b.n	800142a <HAL_RCC_OscConfig+0x5f6>

08001440 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001442:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001444:	f003 020c 	and.w	r2, r3, #12
 8001448:	2a08      	cmp	r2, #8
 800144a:	d124      	bne.n	8001496 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800144c:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8001450:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001454:	fa92 f2a2 	rbit	r2, r2
 8001458:	fab2 f282 	clz	r2, r2
 800145c:	fa21 f202 	lsr.w	r2, r1, r2
 8001460:	490f      	ldr	r1, [pc, #60]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x60>)
 8001462:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001466:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001468:	f002 020f 	and.w	r2, r2, #15
 800146c:	210f      	movs	r1, #15
 800146e:	fa91 f1a1 	rbit	r1, r1
 8001472:	fab1 f181 	clz	r1, r1
 8001476:	40ca      	lsrs	r2, r1
 8001478:	490a      	ldr	r1, [pc, #40]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x64>)
 800147a:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800147c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001480:	d103      	bne.n	800148a <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_RCC_GetSysClockFreq+0x68>)
 8001484:	fb03 f000 	mul.w	r0, r3, r0
 8001488:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_RCC_GetSysClockFreq+0x6c>)
 800148c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001490:	fb03 f000 	mul.w	r0, r3, r0
 8001494:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	08003374 	.word	0x08003374
 80014a4:	08003384 	.word	0x08003384
 80014a8:	003d0900 	.word	0x003d0900
 80014ac:	007a1200 	.word	0x007a1200

080014b0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014b0:	4b70      	ldr	r3, [pc, #448]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	428b      	cmp	r3, r1
 80014ba:	d20c      	bcs.n	80014d6 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014bc:	4a6d      	ldr	r2, [pc, #436]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	6813      	ldr	r3, [r2, #0]
 80014c0:	f023 0307 	bic.w	r3, r3, #7
 80014c4:	430b      	orrs	r3, r1
 80014c6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014c8:	6813      	ldr	r3, [r2, #0]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	4299      	cmp	r1, r3
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 80014d2:	2001      	movs	r0, #1
 80014d4:	4770      	bx	lr
{
 80014d6:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d8:	6803      	ldr	r3, [r0, #0]
 80014da:	f013 0f02 	tst.w	r3, #2
 80014de:	d006      	beq.n	80014ee <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e0:	4a65      	ldr	r2, [pc, #404]	; (8001678 <HAL_RCC_ClockConfig+0x1c8>)
 80014e2:	6853      	ldr	r3, [r2, #4]
 80014e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014e8:	6884      	ldr	r4, [r0, #8]
 80014ea:	4323      	orrs	r3, r4
 80014ec:	6053      	str	r3, [r2, #4]
 80014ee:	460d      	mov	r5, r1
 80014f0:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f2:	6803      	ldr	r3, [r0, #0]
 80014f4:	f013 0f01 	tst.w	r3, #1
 80014f8:	d07a      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014fa:	6843      	ldr	r3, [r0, #4]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d02f      	beq.n	8001560 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001500:	2b02      	cmp	r3, #2
 8001502:	d042      	beq.n	800158a <HAL_RCC_ClockConfig+0xda>
 8001504:	2202      	movs	r2, #2
 8001506:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150a:	4a5b      	ldr	r2, [pc, #364]	; (8001678 <HAL_RCC_ClockConfig+0x1c8>)
 800150c:	6810      	ldr	r0, [r2, #0]
 800150e:	2202      	movs	r2, #2
 8001510:	fa92 f2a2 	rbit	r2, r2
 8001514:	fab2 f282 	clz	r2, r2
 8001518:	f002 021f 	and.w	r2, r2, #31
 800151c:	2101      	movs	r1, #1
 800151e:	fa01 f202 	lsl.w	r2, r1, r2
 8001522:	4210      	tst	r0, r2
 8001524:	f000 80a4 	beq.w	8001670 <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001528:	4953      	ldr	r1, [pc, #332]	; (8001678 <HAL_RCC_ClockConfig+0x1c8>)
 800152a:	684a      	ldr	r2, [r1, #4]
 800152c:	f022 0203 	bic.w	r2, r2, #3
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001534:	f7fe fe78 	bl	8000228 <HAL_GetTick>
 8001538:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153a:	6863      	ldr	r3, [r4, #4]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d039      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001540:	2b02      	cmp	r3, #2
 8001542:	d046      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001544:	4b4c      	ldr	r3, [pc, #304]	; (8001678 <HAL_RCC_ClockConfig+0x1c8>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f013 0f0c 	tst.w	r3, #12
 800154c:	d050      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154e:	f7fe fe6b 	bl	8000228 <HAL_GetTick>
 8001552:	1b80      	subs	r0, r0, r6
 8001554:	f241 3388 	movw	r3, #5000	; 0x1388
 8001558:	4298      	cmp	r0, r3
 800155a:	d9f3      	bls.n	8001544 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 800155c:	2003      	movs	r0, #3
 800155e:	bd70      	pop	{r4, r5, r6, pc}
 8001560:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001564:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001568:	4a43      	ldr	r2, [pc, #268]	; (8001678 <HAL_RCC_ClockConfig+0x1c8>)
 800156a:	6810      	ldr	r0, [r2, #0]
 800156c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001570:	fa92 f2a2 	rbit	r2, r2
 8001574:	fab2 f282 	clz	r2, r2
 8001578:	f002 021f 	and.w	r2, r2, #31
 800157c:	2101      	movs	r1, #1
 800157e:	fa01 f202 	lsl.w	r2, r1, r2
 8001582:	4210      	tst	r0, r2
 8001584:	d1d0      	bne.n	8001528 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8001586:	2001      	movs	r0, #1
 8001588:	bd70      	pop	{r4, r5, r6, pc}
 800158a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800158e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001592:	4a39      	ldr	r2, [pc, #228]	; (8001678 <HAL_RCC_ClockConfig+0x1c8>)
 8001594:	6810      	ldr	r0, [r2, #0]
 8001596:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800159a:	fa92 f2a2 	rbit	r2, r2
 800159e:	fab2 f282 	clz	r2, r2
 80015a2:	f002 021f 	and.w	r2, r2, #31
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ac:	4210      	tst	r0, r2
 80015ae:	d1bb      	bne.n	8001528 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 80015b0:	2001      	movs	r0, #1
 80015b2:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b4:	4b30      	ldr	r3, [pc, #192]	; (8001678 <HAL_RCC_ClockConfig+0x1c8>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d017      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c0:	f7fe fe32 	bl	8000228 <HAL_GetTick>
 80015c4:	1b80      	subs	r0, r0, r6
 80015c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80015ca:	4298      	cmp	r0, r3
 80015cc:	d9f2      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 80015ce:	2003      	movs	r0, #3
 80015d0:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d2:	4b29      	ldr	r3, [pc, #164]	; (8001678 <HAL_RCC_ClockConfig+0x1c8>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d008      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015de:	f7fe fe23 	bl	8000228 <HAL_GetTick>
 80015e2:	1b80      	subs	r0, r0, r6
 80015e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80015e8:	4298      	cmp	r0, r3
 80015ea:	d9f2      	bls.n	80015d2 <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 80015ec:	2003      	movs	r0, #3
 80015ee:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80015f0:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	429d      	cmp	r5, r3
 80015fa:	d20c      	bcs.n	8001616 <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fc:	4a1d      	ldr	r2, [pc, #116]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	6813      	ldr	r3, [r2, #0]
 8001600:	f023 0307 	bic.w	r3, r3, #7
 8001604:	432b      	orrs	r3, r5
 8001606:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001608:	6813      	ldr	r3, [r2, #0]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	429d      	cmp	r5, r3
 8001610:	d001      	beq.n	8001616 <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 8001612:	2001      	movs	r0, #1
}
 8001614:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	f013 0f04 	tst.w	r3, #4
 800161c:	d006      	beq.n	800162c <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800161e:	4a16      	ldr	r2, [pc, #88]	; (8001678 <HAL_RCC_ClockConfig+0x1c8>)
 8001620:	6853      	ldr	r3, [r2, #4]
 8001622:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001626:	68e1      	ldr	r1, [r4, #12]
 8001628:	430b      	orrs	r3, r1
 800162a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	f013 0f08 	tst.w	r3, #8
 8001632:	d007      	beq.n	8001644 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001634:	4a10      	ldr	r2, [pc, #64]	; (8001678 <HAL_RCC_ClockConfig+0x1c8>)
 8001636:	6853      	ldr	r3, [r2, #4]
 8001638:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800163c:	6921      	ldr	r1, [r4, #16]
 800163e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001642:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001644:	f7ff fefc 	bl	8001440 <HAL_RCC_GetSysClockFreq>
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_RCC_ClockConfig+0x1c8>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001650:	22f0      	movs	r2, #240	; 0xf0
 8001652:	fa92 f2a2 	rbit	r2, r2
 8001656:	fab2 f282 	clz	r2, r2
 800165a:	40d3      	lsrs	r3, r2
 800165c:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_RCC_ClockConfig+0x1cc>)
 800165e:	5cd3      	ldrb	r3, [r2, r3]
 8001660:	40d8      	lsrs	r0, r3
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <HAL_RCC_ClockConfig+0x1d0>)
 8001664:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001666:	2000      	movs	r0, #0
 8001668:	f7fe fdae 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 800166c:	2000      	movs	r0, #0
 800166e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001670:	2001      	movs	r0, #1
 8001672:	bd70      	pop	{r4, r5, r6, pc}
 8001674:	40022000 	.word	0x40022000
 8001678:	40021000 	.word	0x40021000
 800167c:	080033a4 	.word	0x080033a4
 8001680:	20000000 	.word	0x20000000

08001684 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001684:	4b01      	ldr	r3, [pc, #4]	; (800168c <HAL_RCC_GetHCLKFreq+0x8>)
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000000 	.word	0x20000000

08001690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001690:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001692:	f7ff fff7 	bl	8001684 <HAL_RCC_GetHCLKFreq>
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800169e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016a2:	fa92 f2a2 	rbit	r2, r2
 80016a6:	fab2 f282 	clz	r2, r2
 80016aa:	40d3      	lsrs	r3, r2
 80016ac:	4a02      	ldr	r2, [pc, #8]	; (80016b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
}    
 80016b0:	40d8      	lsrs	r0, r3
 80016b2:	bd08      	pop	{r3, pc}
 80016b4:	40021000 	.word	0x40021000
 80016b8:	080033b4 	.word	0x080033b4

080016bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016bc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80016be:	f7ff ffe1 	bl	8001684 <HAL_RCC_GetHCLKFreq>
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80016ca:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80016ce:	fa92 f2a2 	rbit	r2, r2
 80016d2:	fab2 f282 	clz	r2, r2
 80016d6:	40d3      	lsrs	r3, r2
 80016d8:	4a02      	ldr	r2, [pc, #8]	; (80016e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80016da:	5cd3      	ldrb	r3, [r2, r3]
} 
 80016dc:	40d8      	lsrs	r0, r3
 80016de:	bd08      	pop	{r3, pc}
 80016e0:	40021000 	.word	0x40021000
 80016e4:	080033b4 	.word	0x080033b4

080016e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	b083      	sub	sp, #12
 80016ec:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80016ee:	6803      	ldr	r3, [r0, #0]
 80016f0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80016f4:	d044      	beq.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f6:	4b64      	ldr	r3, [pc, #400]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80016fe:	d179      	bne.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001700:	4b61      	ldr	r3, [pc, #388]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001702:	69da      	ldr	r2, [r3, #28]
 8001704:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001708:	61da      	str	r2, [r3, #28]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001714:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001716:	4b5d      	ldr	r3, [pc, #372]	; (800188c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800171e:	d06b      	beq.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001720:	4b59      	ldr	r3, [pc, #356]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001724:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001728:	d021      	beq.n	800176e <HAL_RCCEx_PeriphCLKConfig+0x86>
 800172a:	6862      	ldr	r2, [r4, #4]
 800172c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001730:	4293      	cmp	r3, r2
 8001732:	d01c      	beq.n	800176e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001734:	4854      	ldr	r0, [pc, #336]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001736:	6a01      	ldr	r1, [r0, #32]
 8001738:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 800173c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001740:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001744:	fab2 f282 	clz	r2, r2
 8001748:	4f51      	ldr	r7, [pc, #324]	; (8001890 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800174a:	443a      	add	r2, r7
 800174c:	0092      	lsls	r2, r2, #2
 800174e:	f04f 0e01 	mov.w	lr, #1
 8001752:	f8c2 e000 	str.w	lr, [r2]
 8001756:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800175a:	fab3 f383 	clz	r3, r3
 800175e:	443b      	add	r3, r7
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001766:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001768:	f011 0f01 	tst.w	r1, #1
 800176c:	d158      	bne.n	8001820 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800176e:	4a46      	ldr	r2, [pc, #280]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001770:	6a13      	ldr	r3, [r2, #32]
 8001772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001776:	6861      	ldr	r1, [r4, #4]
 8001778:	430b      	orrs	r3, r1
 800177a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800177c:	2d00      	cmp	r5, #0
 800177e:	d17a      	bne.n	8001876 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	f013 0f01 	tst.w	r3, #1
 8001786:	d006      	beq.n	8001796 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001788:	4a3f      	ldr	r2, [pc, #252]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800178a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800178c:	f023 0303 	bic.w	r3, r3, #3
 8001790:	68a1      	ldr	r1, [r4, #8]
 8001792:	430b      	orrs	r3, r1
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	f013 0f20 	tst.w	r3, #32
 800179c:	d006      	beq.n	80017ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800179e:	4a3a      	ldr	r2, [pc, #232]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80017a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80017a2:	f023 0310 	bic.w	r3, r3, #16
 80017a6:	68e1      	ldr	r1, [r4, #12]
 80017a8:	430b      	orrs	r3, r1
 80017aa:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80017ac:	6823      	ldr	r3, [r4, #0]
 80017ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017b2:	d006      	beq.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80017b4:	4a34      	ldr	r2, [pc, #208]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80017b6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80017b8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80017bc:	6921      	ldr	r1, [r4, #16]
 80017be:	430b      	orrs	r3, r1
 80017c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80017c2:	6823      	ldr	r3, [r4, #0]
 80017c4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80017c8:	d006      	beq.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80017ca:	4a2f      	ldr	r2, [pc, #188]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80017cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80017ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017d2:	6961      	ldr	r1, [r4, #20]
 80017d4:	430b      	orrs	r3, r1
 80017d6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80017d8:	6823      	ldr	r3, [r4, #0]
 80017da:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80017de:	d051      	beq.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80017e0:	4a29      	ldr	r2, [pc, #164]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80017e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80017e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017e8:	69a1      	ldr	r1, [r4, #24]
 80017ea:	430b      	orrs	r3, r1
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80017ee:	2000      	movs	r0, #0
}
 80017f0:	b003      	add	sp, #12
 80017f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 80017f4:	2500      	movs	r5, #0
 80017f6:	e78e      	b.n	8001716 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f8:	4a24      	ldr	r2, [pc, #144]	; (800188c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80017fa:	6813      	ldr	r3, [r2, #0]
 80017fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001800:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001802:	f7fe fd11 	bl	8000228 <HAL_GetTick>
 8001806:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	4b20      	ldr	r3, [pc, #128]	; (800188c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001810:	d186      	bne.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001812:	f7fe fd09 	bl	8000228 <HAL_GetTick>
 8001816:	1b80      	subs	r0, r0, r6
 8001818:	2864      	cmp	r0, #100	; 0x64
 800181a:	d9f5      	bls.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 800181c:	2003      	movs	r0, #3
 800181e:	e7e7      	b.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8001820:	f7fe fd02 	bl	8000228 <HAL_GetTick>
 8001824:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001826:	e014      	b.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800182a:	6a19      	ldr	r1, [r3, #32]
 800182c:	2302      	movs	r3, #2
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	2201      	movs	r2, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	4219      	tst	r1, r3
 8001842:	d194      	bne.n	800176e <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001844:	f7fe fcf0 	bl	8000228 <HAL_GetTick>
 8001848:	1b80      	subs	r0, r0, r6
 800184a:	f241 3388 	movw	r3, #5000	; 0x1388
 800184e:	4298      	cmp	r0, r3
 8001850:	d816      	bhi.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001852:	2302      	movs	r3, #2
 8001854:	fa93 f2a3 	rbit	r2, r3
 8001858:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185c:	fab3 f383 	clz	r3, r3
 8001860:	095b      	lsrs	r3, r3, #5
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	2b02      	cmp	r3, #2
 8001868:	d0de      	beq.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800186a:	2302      	movs	r3, #2
 800186c:	fa93 f3a3 	rbit	r3, r3
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001872:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001874:	e7da      	b.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001876:	69d3      	ldr	r3, [r2, #28]
 8001878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800187c:	61d3      	str	r3, [r2, #28]
 800187e:	e77f      	b.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8001880:	2003      	movs	r0, #3
 8001882:	e7b5      	b.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 8001884:	2000      	movs	r0, #0
 8001886:	e7b3      	b.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8001888:	40021000 	.word	0x40021000
 800188c:	40007000 	.word	0x40007000
 8001890:	10908100 	.word	0x10908100

08001894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001894:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001896:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001898:	6a04      	ldr	r4, [r0, #32]
 800189a:	f024 0401 	bic.w	r4, r4, #1
 800189e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80018a0:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018a2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80018a6:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80018aa:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80018ae:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80018b0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80018b2:	6203      	str	r3, [r0, #32]
}
 80018b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80018ba:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018bc:	6a03      	ldr	r3, [r0, #32]
 80018be:	f023 0310 	bic.w	r3, r3, #16
 80018c2:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018c4:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80018c6:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80018c8:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80018cc:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80018d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80018d4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80018d8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80018da:	6203      	str	r3, [r0, #32]
}
 80018dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80018e2:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80018e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80018e8:	f041 0107 	orr.w	r1, r1, #7
 80018ec:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80018ee:	6083      	str	r3, [r0, #8]
 80018f0:	4770      	bx	lr

080018f2 <HAL_TIM_OC_DelayElapsedCallback>:
{
 80018f2:	4770      	bx	lr

080018f4 <HAL_TIM_IC_CaptureCallback>:
{
 80018f4:	4770      	bx	lr

080018f6 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 80018f6:	4770      	bx	lr

080018f8 <HAL_TIM_TriggerCallback>:
{
 80018f8:	4770      	bx	lr

080018fa <HAL_TIM_IRQHandler>:
{
 80018fa:	b510      	push	{r4, lr}
 80018fc:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018fe:	6803      	ldr	r3, [r0, #0]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	f012 0f02 	tst.w	r2, #2
 8001906:	d011      	beq.n	800192c <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	f012 0f02 	tst.w	r2, #2
 800190e:	d00d      	beq.n	800192c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001910:	f06f 0202 	mvn.w	r2, #2
 8001914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001916:	2301      	movs	r3, #1
 8001918:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800191a:	6803      	ldr	r3, [r0, #0]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f013 0f03 	tst.w	r3, #3
 8001922:	d079      	beq.n	8001a18 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001924:	f7ff ffe6 	bl	80018f4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001928:	2300      	movs	r3, #0
 800192a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	f012 0f04 	tst.w	r2, #4
 8001934:	d012      	beq.n	800195c <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	f012 0f04 	tst.w	r2, #4
 800193c:	d00e      	beq.n	800195c <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800193e:	f06f 0204 	mvn.w	r2, #4
 8001942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001944:	2302      	movs	r3, #2
 8001946:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001950:	d068      	beq.n	8001a24 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001952:	4620      	mov	r0, r4
 8001954:	f7ff ffce 	bl	80018f4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001958:	2300      	movs	r3, #0
 800195a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	f012 0f08 	tst.w	r2, #8
 8001964:	d012      	beq.n	800198c <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	f012 0f08 	tst.w	r2, #8
 800196c:	d00e      	beq.n	800198c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800196e:	f06f 0208 	mvn.w	r2, #8
 8001972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001974:	2304      	movs	r3, #4
 8001976:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	f013 0f03 	tst.w	r3, #3
 8001980:	d057      	beq.n	8001a32 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8001982:	4620      	mov	r0, r4
 8001984:	f7ff ffb6 	bl	80018f4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001988:	2300      	movs	r3, #0
 800198a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	f012 0f10 	tst.w	r2, #16
 8001994:	d012      	beq.n	80019bc <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	f012 0f10 	tst.w	r2, #16
 800199c:	d00e      	beq.n	80019bc <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800199e:	f06f 0210 	mvn.w	r2, #16
 80019a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019a4:	2308      	movs	r3, #8
 80019a6:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	f413 7f40 	tst.w	r3, #768	; 0x300
 80019b0:	d046      	beq.n	8001a40 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff ff9e 	bl	80018f4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019b8:	2300      	movs	r3, #0
 80019ba:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	f012 0f01 	tst.w	r2, #1
 80019c4:	d003      	beq.n	80019ce <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	f012 0f01 	tst.w	r2, #1
 80019cc:	d13f      	bne.n	8001a4e <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	691a      	ldr	r2, [r3, #16]
 80019d2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80019d6:	d003      	beq.n	80019e0 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	f012 0f80 	tst.w	r2, #128	; 0x80
 80019de:	d13d      	bne.n	8001a5c <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80019e8:	d003      	beq.n	80019f2 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	f012 0f80 	tst.w	r2, #128	; 0x80
 80019f0:	d13b      	bne.n	8001a6a <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80019fa:	d003      	beq.n	8001a04 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a02:	d139      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	f012 0f20 	tst.w	r2, #32
 8001a0c:	d003      	beq.n	8001a16 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	f012 0f20 	tst.w	r2, #32
 8001a14:	d137      	bne.n	8001a86 <HAL_TIM_IRQHandler+0x18c>
 8001a16:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a18:	f7ff ff6b 	bl	80018f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f7ff ff6a 	bl	80018f6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001a22:	e781      	b.n	8001928 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff ff64 	bl	80018f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f7ff ff63 	bl	80018f6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001a30:	e792      	b.n	8001958 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a32:	4620      	mov	r0, r4
 8001a34:	f7ff ff5d 	bl	80018f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f7ff ff5c 	bl	80018f6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001a3e:	e7a3      	b.n	8001988 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a40:	4620      	mov	r0, r4
 8001a42:	f7ff ff56 	bl	80018f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a46:	4620      	mov	r0, r4
 8001a48:	f7ff ff55 	bl	80018f6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001a4c:	e7b4      	b.n	80019b8 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001a4e:	f06f 0201 	mvn.w	r2, #1
 8001a52:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a54:	4620      	mov	r0, r4
 8001a56:	f001 fc19 	bl	800328c <HAL_TIM_PeriodElapsedCallback>
 8001a5a:	e7b8      	b.n	80019ce <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001a5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a60:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001a62:	4620      	mov	r0, r4
 8001a64:	f000 f93b 	bl	8001cde <HAL_TIMEx_BreakCallback>
 8001a68:	e7ba      	b.n	80019e0 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001a6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001a6e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001a70:	4620      	mov	r0, r4
 8001a72:	f000 f935 	bl	8001ce0 <HAL_TIMEx_Break2Callback>
 8001a76:	e7bc      	b.n	80019f2 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001a78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a7c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f7ff ff3a 	bl	80018f8 <HAL_TIM_TriggerCallback>
 8001a84:	e7be      	b.n	8001a04 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001a86:	f06f 0220 	mvn.w	r2, #32
 8001a8a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f000 f925 	bl	8001cdc <HAL_TIMEx_CommutationCallback>
}
 8001a92:	e7c0      	b.n	8001a16 <HAL_TIM_IRQHandler+0x11c>

08001a94 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001a94:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a96:	4a23      	ldr	r2, [pc, #140]	; (8001b24 <TIM_Base_SetConfig+0x90>)
 8001a98:	4290      	cmp	r0, r2
 8001a9a:	d03d      	beq.n	8001b18 <TIM_Base_SetConfig+0x84>
 8001a9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001aa0:	d03a      	beq.n	8001b18 <TIM_Base_SetConfig+0x84>
 8001aa2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001aa6:	4290      	cmp	r0, r2
 8001aa8:	d036      	beq.n	8001b18 <TIM_Base_SetConfig+0x84>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001aaa:	4a1e      	ldr	r2, [pc, #120]	; (8001b24 <TIM_Base_SetConfig+0x90>)
 8001aac:	4290      	cmp	r0, r2
 8001aae:	d012      	beq.n	8001ad6 <TIM_Base_SetConfig+0x42>
 8001ab0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ab4:	d00f      	beq.n	8001ad6 <TIM_Base_SetConfig+0x42>
 8001ab6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001aba:	4290      	cmp	r0, r2
 8001abc:	d00b      	beq.n	8001ad6 <TIM_Base_SetConfig+0x42>
 8001abe:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8001ac2:	4290      	cmp	r0, r2
 8001ac4:	d007      	beq.n	8001ad6 <TIM_Base_SetConfig+0x42>
 8001ac6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001aca:	4290      	cmp	r0, r2
 8001acc:	d003      	beq.n	8001ad6 <TIM_Base_SetConfig+0x42>
 8001ace:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ad2:	4290      	cmp	r0, r2
 8001ad4:	d103      	bne.n	8001ade <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ada:	68ca      	ldr	r2, [r1, #12]
 8001adc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ae2:	694a      	ldr	r2, [r1, #20]
 8001ae4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001ae6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ae8:	688b      	ldr	r3, [r1, #8]
 8001aea:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001aec:	680b      	ldr	r3, [r1, #0]
 8001aee:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <TIM_Base_SetConfig+0x90>)
 8001af2:	4298      	cmp	r0, r3
 8001af4:	d00b      	beq.n	8001b0e <TIM_Base_SetConfig+0x7a>
 8001af6:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001afa:	4298      	cmp	r0, r3
 8001afc:	d007      	beq.n	8001b0e <TIM_Base_SetConfig+0x7a>
 8001afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b02:	4298      	cmp	r0, r3
 8001b04:	d003      	beq.n	8001b0e <TIM_Base_SetConfig+0x7a>
 8001b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b0a:	4298      	cmp	r0, r3
 8001b0c:	d101      	bne.n	8001b12 <TIM_Base_SetConfig+0x7e>
    TIMx->RCR = Structure->RepetitionCounter;
 8001b0e:	690b      	ldr	r3, [r1, #16]
 8001b10:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001b12:	2301      	movs	r3, #1
 8001b14:	6143      	str	r3, [r0, #20]
 8001b16:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001b1c:	684a      	ldr	r2, [r1, #4]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	e7c3      	b.n	8001aaa <TIM_Base_SetConfig+0x16>
 8001b22:	bf00      	nop
 8001b24:	40012c00 	.word	0x40012c00

08001b28 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8001b28:	b1a8      	cbz	r0, 8001b56 <HAL_TIM_Base_Init+0x2e>
{ 
 8001b2a:	b510      	push	{r4, lr}
 8001b2c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8001b2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b32:	b15b      	cbz	r3, 8001b4c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8001b34:	2302      	movs	r3, #2
 8001b36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001b3a:	1d21      	adds	r1, r4, #4
 8001b3c:	6820      	ldr	r0, [r4, #0]
 8001b3e:	f7ff ffa9 	bl	8001a94 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001b42:	2301      	movs	r3, #1
 8001b44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001b48:	2000      	movs	r0, #0
 8001b4a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001b4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001b50:	f000 fec4 	bl	80028dc <HAL_TIM_Base_MspInit>
 8001b54:	e7ee      	b.n	8001b34 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001b56:	2001      	movs	r0, #1
 8001b58:	4770      	bx	lr

08001b5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b5a:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001b5c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b5e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b62:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001b66:	4319      	orrs	r1, r3
 8001b68:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b6a:	6084      	str	r4, [r0, #8]
} 
 8001b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001b74:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	f000 8082 	beq.w	8001c82 <HAL_TIM_ConfigClockSource+0x10e>
{
 8001b7e:	b510      	push	{r4, lr}
 8001b80:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001b82:	2301      	movs	r3, #1
 8001b84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001b8e:	6802      	ldr	r2, [r0, #0]
 8001b90:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b92:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <HAL_TIM_ConfigClockSource+0x114>)
 8001b94:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8001b96:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001b98:	680b      	ldr	r3, [r1, #0]
 8001b9a:	2b40      	cmp	r3, #64	; 0x40
 8001b9c:	d05d      	beq.n	8001c5a <HAL_TIM_ConfigClockSource+0xe6>
 8001b9e:	d910      	bls.n	8001bc2 <HAL_TIM_ConfigClockSource+0x4e>
 8001ba0:	2b70      	cmp	r3, #112	; 0x70
 8001ba2:	d040      	beq.n	8001c26 <HAL_TIM_ConfigClockSource+0xb2>
 8001ba4:	d81f      	bhi.n	8001be6 <HAL_TIM_ConfigClockSource+0x72>
 8001ba6:	2b50      	cmp	r3, #80	; 0x50
 8001ba8:	d04d      	beq.n	8001c46 <HAL_TIM_ConfigClockSource+0xd2>
 8001baa:	2b60      	cmp	r3, #96	; 0x60
 8001bac:	d134      	bne.n	8001c18 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001bae:	68ca      	ldr	r2, [r1, #12]
 8001bb0:	6849      	ldr	r1, [r1, #4]
 8001bb2:	6820      	ldr	r0, [r4, #0]
 8001bb4:	f7ff fe81 	bl	80018ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001bb8:	2160      	movs	r1, #96	; 0x60
 8001bba:	6820      	ldr	r0, [r4, #0]
 8001bbc:	f7ff fe91 	bl	80018e2 <TIM_ITRx_SetConfig>
    break;
 8001bc0:	e02a      	b.n	8001c18 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d053      	beq.n	8001c6e <HAL_TIM_ConfigClockSource+0xfa>
 8001bc6:	d908      	bls.n	8001bda <HAL_TIM_ConfigClockSource+0x66>
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d055      	beq.n	8001c78 <HAL_TIM_ConfigClockSource+0x104>
 8001bcc:	2b30      	cmp	r3, #48	; 0x30
 8001bce:	d123      	bne.n	8001c18 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001bd0:	2130      	movs	r1, #48	; 0x30
 8001bd2:	6820      	ldr	r0, [r4, #0]
 8001bd4:	f7ff fe85 	bl	80018e2 <TIM_ITRx_SetConfig>
    break;
 8001bd8:	e01e      	b.n	8001c18 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8001bda:	b9eb      	cbnz	r3, 8001c18 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001bdc:	2100      	movs	r1, #0
 8001bde:	6820      	ldr	r0, [r4, #0]
 8001be0:	f7ff fe7f 	bl	80018e2 <TIM_ITRx_SetConfig>
    break;
 8001be4:	e018      	b.n	8001c18 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8001be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bea:	d00e      	beq.n	8001c0a <HAL_TIM_ConfigClockSource+0x96>
 8001bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bf0:	d112      	bne.n	8001c18 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance, 
 8001bf2:	68cb      	ldr	r3, [r1, #12]
 8001bf4:	684a      	ldr	r2, [r1, #4]
 8001bf6:	6889      	ldr	r1, [r1, #8]
 8001bf8:	6820      	ldr	r0, [r4, #0]
 8001bfa:	f7ff ffae 	bl	8001b5a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bfe:	6822      	ldr	r2, [r4, #0]
 8001c00:	6893      	ldr	r3, [r2, #8]
 8001c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c06:	6093      	str	r3, [r2, #8]
    break;
 8001c08:	e006      	b.n	8001c18 <HAL_TIM_ConfigClockSource+0xa4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001c0a:	6822      	ldr	r2, [r4, #0]
 8001c0c:	6893      	ldr	r3, [r2, #8]
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c12:	f023 0307 	bic.w	r3, r3, #7
 8001c16:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8001c24:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 8001c26:	68cb      	ldr	r3, [r1, #12]
 8001c28:	684a      	ldr	r2, [r1, #4]
 8001c2a:	6889      	ldr	r1, [r1, #8]
 8001c2c:	6820      	ldr	r0, [r4, #0]
 8001c2e:	f7ff ff94 	bl	8001b5a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c32:	6822      	ldr	r2, [r4, #0]
 8001c34:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001c42:	6093      	str	r3, [r2, #8]
    break;
 8001c44:	e7e8      	b.n	8001c18 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001c46:	68ca      	ldr	r2, [r1, #12]
 8001c48:	6849      	ldr	r1, [r1, #4]
 8001c4a:	6820      	ldr	r0, [r4, #0]
 8001c4c:	f7ff fe22 	bl	8001894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c50:	2150      	movs	r1, #80	; 0x50
 8001c52:	6820      	ldr	r0, [r4, #0]
 8001c54:	f7ff fe45 	bl	80018e2 <TIM_ITRx_SetConfig>
    break;
 8001c58:	e7de      	b.n	8001c18 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001c5a:	68ca      	ldr	r2, [r1, #12]
 8001c5c:	6849      	ldr	r1, [r1, #4]
 8001c5e:	6820      	ldr	r0, [r4, #0]
 8001c60:	f7ff fe18 	bl	8001894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	6820      	ldr	r0, [r4, #0]
 8001c68:	f7ff fe3b 	bl	80018e2 <TIM_ITRx_SetConfig>
    break;
 8001c6c:	e7d4      	b.n	8001c18 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001c6e:	2110      	movs	r1, #16
 8001c70:	6820      	ldr	r0, [r4, #0]
 8001c72:	f7ff fe36 	bl	80018e2 <TIM_ITRx_SetConfig>
    break;
 8001c76:	e7cf      	b.n	8001c18 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001c78:	2120      	movs	r1, #32
 8001c7a:	6820      	ldr	r0, [r4, #0]
 8001c7c:	f7ff fe31 	bl	80018e2 <TIM_ITRx_SetConfig>
    break;
 8001c80:	e7ca      	b.n	8001c18 <HAL_TIM_ConfigClockSource+0xa4>
  __HAL_LOCK(htim);
 8001c82:	2002      	movs	r0, #2
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	fffe0088 	.word	0xfffe0088

08001c8c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001c8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d01f      	beq.n	8001cd4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
{
 8001c94:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8001c96:	2301      	movs	r3, #1
 8001c98:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c9c:	6804      	ldr	r4, [r0, #0]
 8001c9e:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ca0:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001ca2:	4d0d      	ldr	r5, [pc, #52]	; (8001cd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 8001ca4:	42ac      	cmp	r4, r5
 8001ca6:	d010      	beq.n	8001cca <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001cac:	680d      	ldr	r5, [r1, #0]
 8001cae:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001cb4:	6889      	ldr	r1, [r1, #8]
 8001cb6:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001cb8:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001cba:	6803      	ldr	r3, [r0, #0]
 8001cbc:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8001cc4:	4618      	mov	r0, r3
} 
 8001cc6:	bc30      	pop	{r4, r5}
 8001cc8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001cca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001cce:	684d      	ldr	r5, [r1, #4]
 8001cd0:	432b      	orrs	r3, r5
 8001cd2:	e7e9      	b.n	8001ca8 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
  __HAL_LOCK(htim);
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	4770      	bx	lr
 8001cd8:	40012c00 	.word	0x40012c00

08001cdc <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001cdc:	4770      	bx	lr

08001cde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cde:	4770      	bx	lr

08001ce0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001ce0:	4770      	bx	lr

08001ce2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ce2:	6802      	ldr	r2, [r0, #0]
 8001ce4:	6813      	ldr	r3, [r2, #0]
 8001ce6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001cea:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cec:	6802      	ldr	r2, [r0, #0]
 8001cee:	6893      	ldr	r3, [r2, #8]
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001cf6:	2320      	movs	r3, #32
 8001cf8:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8001cfc:	4770      	bx	lr

08001cfe <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8001cfe:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	d001      	beq.n	8001d0c <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8001d08:	2002      	movs	r0, #2
 8001d0a:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8001d0c:	2900      	cmp	r1, #0
 8001d0e:	d047      	beq.n	8001da0 <HAL_UART_Receive_IT+0xa2>
 8001d10:	2a00      	cmp	r2, #0
 8001d12:	d047      	beq.n	8001da4 <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 8001d14:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d045      	beq.n	8001da8 <HAL_UART_Receive_IT+0xaa>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 8001d22:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8001d24:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8001d28:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001d2c:	6883      	ldr	r3, [r0, #8]
 8001d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d32:	d006      	beq.n	8001d42 <HAL_UART_Receive_IT+0x44>
 8001d34:	b9a3      	cbnz	r3, 8001d60 <HAL_UART_Receive_IT+0x62>
 8001d36:	6903      	ldr	r3, [r0, #16]
 8001d38:	b973      	cbnz	r3, 8001d58 <HAL_UART_Receive_IT+0x5a>
 8001d3a:	23ff      	movs	r3, #255	; 0xff
 8001d3c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d40:	e011      	b.n	8001d66 <HAL_UART_Receive_IT+0x68>
 8001d42:	6903      	ldr	r3, [r0, #16]
 8001d44:	b923      	cbnz	r3, 8001d50 <HAL_UART_Receive_IT+0x52>
 8001d46:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001d4a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d4e:	e00a      	b.n	8001d66 <HAL_UART_Receive_IT+0x68>
 8001d50:	23ff      	movs	r3, #255	; 0xff
 8001d52:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d56:	e006      	b.n	8001d66 <HAL_UART_Receive_IT+0x68>
 8001d58:	237f      	movs	r3, #127	; 0x7f
 8001d5a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d5e:	e002      	b.n	8001d66 <HAL_UART_Receive_IT+0x68>
 8001d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d64:	d012      	beq.n	8001d8c <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d6a:	2222      	movs	r2, #34	; 0x22
 8001d6c:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8001d70:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d74:	6801      	ldr	r1, [r0, #0]
 8001d76:	688a      	ldr	r2, [r1, #8]
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001d7e:	6801      	ldr	r1, [r0, #0]
 8001d80:	680a      	ldr	r2, [r1, #0]
 8001d82:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8001d86:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8001d88:	4618      	mov	r0, r3
 8001d8a:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8001d8c:	6903      	ldr	r3, [r0, #16]
 8001d8e:	b91b      	cbnz	r3, 8001d98 <HAL_UART_Receive_IT+0x9a>
 8001d90:	237f      	movs	r3, #127	; 0x7f
 8001d92:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d96:	e7e6      	b.n	8001d66 <HAL_UART_Receive_IT+0x68>
 8001d98:	233f      	movs	r3, #63	; 0x3f
 8001d9a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001d9e:	e7e2      	b.n	8001d66 <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 8001da0:	2001      	movs	r0, #1
 8001da2:	4770      	bx	lr
 8001da4:	2001      	movs	r0, #1
 8001da6:	4770      	bx	lr
    __HAL_LOCK(huart);
 8001da8:	2002      	movs	r0, #2
}
 8001daa:	4770      	bx	lr

08001dac <HAL_UART_TxCpltCallback>:
{
 8001dac:	4770      	bx	lr

08001dae <HAL_UART_ErrorCallback>:
{
 8001dae:	4770      	bx	lr

08001db0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001db0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001db2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001dba:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8001dbe:	f7ff fff6 	bl	8001dae <HAL_UART_ErrorCallback>
 8001dc2:	bd08      	pop	{r3, pc}

08001dc4 <UART_SetConfig>:
{
 8001dc4:	b538      	push	{r3, r4, r5, lr}
 8001dc6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001dc8:	6883      	ldr	r3, [r0, #8]
 8001dca:	6902      	ldr	r2, [r0, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	6942      	ldr	r2, [r0, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	69c2      	ldr	r2, [r0, #28]
 8001dd4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001dd6:	6801      	ldr	r1, [r0, #0]
 8001dd8:	6808      	ldr	r0, [r1, #0]
 8001dda:	4a64      	ldr	r2, [pc, #400]	; (8001f6c <UART_SetConfig+0x1a8>)
 8001ddc:	4002      	ands	r2, r0
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001de2:	6822      	ldr	r2, [r4, #0]
 8001de4:	6853      	ldr	r3, [r2, #4]
 8001de6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dea:	68e1      	ldr	r1, [r4, #12]
 8001dec:	430b      	orrs	r3, r1
 8001dee:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001df0:	69a3      	ldr	r3, [r4, #24]
 8001df2:	6a22      	ldr	r2, [r4, #32]
 8001df4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001df6:	6821      	ldr	r1, [r4, #0]
 8001df8:	688a      	ldr	r2, [r1, #8]
 8001dfa:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e02:	6825      	ldr	r5, [r4, #0]
 8001e04:	4b5a      	ldr	r3, [pc, #360]	; (8001f70 <UART_SetConfig+0x1ac>)
 8001e06:	429d      	cmp	r5, r3
 8001e08:	d015      	beq.n	8001e36 <UART_SetConfig+0x72>
 8001e0a:	4b5a      	ldr	r3, [pc, #360]	; (8001f74 <UART_SetConfig+0x1b0>)
 8001e0c:	429d      	cmp	r5, r3
 8001e0e:	d029      	beq.n	8001e64 <UART_SetConfig+0xa0>
 8001e10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e14:	429d      	cmp	r5, r3
 8001e16:	d021      	beq.n	8001e5c <UART_SetConfig+0x98>
 8001e18:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e1a:	69e2      	ldr	r2, [r4, #28]
 8001e1c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e20:	d022      	beq.n	8001e68 <UART_SetConfig+0xa4>
    switch (clocksource)
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	f200 809f 	bhi.w	8001f66 <UART_SetConfig+0x1a2>
 8001e28:	e8df f003 	tbb	[pc, r3]
 8001e2c:	9d7c7166 	.word	0x9d7c7166
 8001e30:	9d9d9d88 	.word	0x9d9d9d88
 8001e34:	93          	.byte	0x93
 8001e35:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e36:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d809      	bhi.n	8001e58 <UART_SetConfig+0x94>
 8001e44:	e8df f003 	tbb	[pc, r3]
 8001e48:	0c060402 	.word	0x0c060402
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e7e4      	b.n	8001e1a <UART_SetConfig+0x56>
 8001e50:	2304      	movs	r3, #4
 8001e52:	e7e2      	b.n	8001e1a <UART_SetConfig+0x56>
 8001e54:	2308      	movs	r3, #8
 8001e56:	e7e0      	b.n	8001e1a <UART_SetConfig+0x56>
 8001e58:	2310      	movs	r3, #16
 8001e5a:	e7de      	b.n	8001e1a <UART_SetConfig+0x56>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	e7dc      	b.n	8001e1a <UART_SetConfig+0x56>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e7da      	b.n	8001e1a <UART_SetConfig+0x56>
 8001e64:	2300      	movs	r3, #0
 8001e66:	e7d8      	b.n	8001e1a <UART_SetConfig+0x56>
    switch (clocksource)
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d842      	bhi.n	8001ef2 <UART_SetConfig+0x12e>
 8001e6c:	e8df f003 	tbb	[pc, r3]
 8001e70:	41221705 	.word	0x41221705
 8001e74:	4141412d 	.word	0x4141412d
 8001e78:	38          	.byte	0x38
 8001e79:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e7a:	f7ff fc09 	bl	8001690 <HAL_RCC_GetPCLK1Freq>
 8001e7e:	6862      	ldr	r2, [r4, #4]
 8001e80:	0853      	lsrs	r3, r2, #1
 8001e82:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001e86:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e8a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e8c:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001e8e:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e92:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001e96:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8001e98:	6822      	ldr	r2, [r4, #0]
 8001e9a:	60d3      	str	r3, [r2, #12]
 8001e9c:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001e9e:	f7ff fc0d 	bl	80016bc <HAL_RCC_GetPCLK2Freq>
 8001ea2:	6862      	ldr	r2, [r4, #4]
 8001ea4:	0853      	lsrs	r3, r2, #1
 8001ea6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001eaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8001eae:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001eb0:	2000      	movs	r0, #0
        break;
 8001eb2:	e7ec      	b.n	8001e8e <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001eb4:	6862      	ldr	r2, [r4, #4]
 8001eb6:	0853      	lsrs	r3, r2, #1
 8001eb8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001ebc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ec4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ec6:	2000      	movs	r0, #0
        break;
 8001ec8:	e7e1      	b.n	8001e8e <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001eca:	f7ff fab9 	bl	8001440 <HAL_RCC_GetSysClockFreq>
 8001ece:	6862      	ldr	r2, [r4, #4]
 8001ed0:	0853      	lsrs	r3, r2, #1
 8001ed2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001ed6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001eda:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001edc:	2000      	movs	r0, #0
        break;
 8001ede:	e7d6      	b.n	8001e8e <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ee0:	6862      	ldr	r2, [r4, #4]
 8001ee2:	0853      	lsrs	r3, r2, #1
 8001ee4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001eec:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001eee:	2000      	movs	r0, #0
        break;
 8001ef0:	e7cd      	b.n	8001e8e <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8001ef2:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e7ca      	b.n	8001e8e <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ef8:	f7ff fbca 	bl	8001690 <HAL_RCC_GetPCLK1Freq>
 8001efc:	6863      	ldr	r3, [r4, #4]
 8001efe:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001f02:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f06:	b280      	uxth	r0, r0
 8001f08:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f0a:	2000      	movs	r0, #0
        break;
 8001f0c:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f0e:	f7ff fbd5 	bl	80016bc <HAL_RCC_GetPCLK2Freq>
 8001f12:	6863      	ldr	r3, [r4, #4]
 8001f14:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001f18:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f1c:	b280      	uxth	r0, r0
 8001f1e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f20:	2000      	movs	r0, #0
        break;
 8001f22:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001f24:	6862      	ldr	r2, [r4, #4]
 8001f26:	0853      	lsrs	r3, r2, #1
 8001f28:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001f2c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001f30:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f38:	2000      	movs	r0, #0
        break;
 8001f3a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f3c:	f7ff fa80 	bl	8001440 <HAL_RCC_GetSysClockFreq>
 8001f40:	6863      	ldr	r3, [r4, #4]
 8001f42:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001f46:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f4a:	b280      	uxth	r0, r0
 8001f4c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f4e:	2000      	movs	r0, #0
        break;
 8001f50:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f52:	6862      	ldr	r2, [r4, #4]
 8001f54:	0853      	lsrs	r3, r2, #1
 8001f56:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f62:	2000      	movs	r0, #0
        break;
 8001f64:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 8001f66:	2001      	movs	r0, #1
}
 8001f68:	bd38      	pop	{r3, r4, r5, pc}
 8001f6a:	bf00      	nop
 8001f6c:	efff69f3 	.word	0xefff69f3
 8001f70:	40013800 	.word	0x40013800
 8001f74:	40004400 	.word	0x40004400

08001f78 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f7a:	f013 0f01 	tst.w	r3, #1
 8001f7e:	d006      	beq.n	8001f8e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f80:	6802      	ldr	r2, [r0, #0]
 8001f82:	6853      	ldr	r3, [r2, #4]
 8001f84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001f88:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001f8a:	430b      	orrs	r3, r1
 8001f8c:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f90:	f013 0f02 	tst.w	r3, #2
 8001f94:	d006      	beq.n	8001fa4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f96:	6802      	ldr	r2, [r0, #0]
 8001f98:	6853      	ldr	r3, [r2, #4]
 8001f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001fa4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fa6:	f013 0f04 	tst.w	r3, #4
 8001faa:	d006      	beq.n	8001fba <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001fac:	6802      	ldr	r2, [r0, #0]
 8001fae:	6853      	ldr	r3, [r2, #4]
 8001fb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001fb6:	430b      	orrs	r3, r1
 8001fb8:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001fba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fbc:	f013 0f08 	tst.w	r3, #8
 8001fc0:	d006      	beq.n	8001fd0 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001fc2:	6802      	ldr	r2, [r0, #0]
 8001fc4:	6853      	ldr	r3, [r2, #4]
 8001fc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001fca:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001fd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fd2:	f013 0f10 	tst.w	r3, #16
 8001fd6:	d006      	beq.n	8001fe6 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001fd8:	6802      	ldr	r2, [r0, #0]
 8001fda:	6893      	ldr	r3, [r2, #8]
 8001fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fe0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001fe2:	430b      	orrs	r3, r1
 8001fe4:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001fe6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fe8:	f013 0f20 	tst.w	r3, #32
 8001fec:	d006      	beq.n	8001ffc <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fee:	6802      	ldr	r2, [r0, #0]
 8001ff0:	6893      	ldr	r3, [r2, #8]
 8001ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ff6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ffc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ffe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002002:	d00a      	beq.n	800201a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002004:	6802      	ldr	r2, [r0, #0]
 8002006:	6853      	ldr	r3, [r2, #4]
 8002008:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800200c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800200e:	430b      	orrs	r3, r1
 8002010:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002012:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002018:	d00b      	beq.n	8002032 <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800201a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800201c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002020:	d006      	beq.n	8002030 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002022:	6802      	ldr	r2, [r0, #0]
 8002024:	6853      	ldr	r3, [r2, #4]
 8002026:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800202a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800202c:	430b      	orrs	r3, r1
 800202e:	6053      	str	r3, [r2, #4]
 8002030:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002032:	6802      	ldr	r2, [r0, #0]
 8002034:	6853      	ldr	r3, [r2, #4]
 8002036:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800203a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800203c:	430b      	orrs	r3, r1
 800203e:	6053      	str	r3, [r2, #4]
 8002040:	e7eb      	b.n	800201a <UART_AdvFeatureConfig+0xa2>

08002042 <UART_WaitOnFlagUntilTimeout>:
{
 8002042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002046:	4605      	mov	r5, r0
 8002048:	460f      	mov	r7, r1
 800204a:	4616      	mov	r6, r2
 800204c:	4698      	mov	r8, r3
 800204e:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002050:	682b      	ldr	r3, [r5, #0]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	ea37 0303 	bics.w	r3, r7, r3
 8002058:	bf0c      	ite	eq
 800205a:	2301      	moveq	r3, #1
 800205c:	2300      	movne	r3, #0
 800205e:	42b3      	cmp	r3, r6
 8002060:	d11e      	bne.n	80020a0 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8002062:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002066:	d0f3      	beq.n	8002050 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002068:	b12c      	cbz	r4, 8002076 <UART_WaitOnFlagUntilTimeout+0x34>
 800206a:	f7fe f8dd 	bl	8000228 <HAL_GetTick>
 800206e:	eba0 0008 	sub.w	r0, r0, r8
 8002072:	4284      	cmp	r4, r0
 8002074:	d2ec      	bcs.n	8002050 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002076:	682a      	ldr	r2, [r5, #0]
 8002078:	6813      	ldr	r3, [r2, #0]
 800207a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800207e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002080:	682a      	ldr	r2, [r5, #0]
 8002082:	6893      	ldr	r3, [r2, #8]
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800208a:	2320      	movs	r3, #32
 800208c:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002090:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002094:	2300      	movs	r3, #0
 8002096:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 800209a:	2003      	movs	r0, #3
 800209c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80020a0:	2000      	movs	r0, #0
}
 80020a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080020a6 <HAL_UART_Transmit>:
{
 80020a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80020ae:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d004      	beq.n	80020c2 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 80020b8:	2302      	movs	r3, #2
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	b002      	add	sp, #8
 80020be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020c2:	4604      	mov	r4, r0
 80020c4:	460d      	mov	r5, r1
 80020c6:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 80020c8:	2900      	cmp	r1, #0
 80020ca:	d04e      	beq.n	800216a <HAL_UART_Transmit+0xc4>
 80020cc:	2a00      	cmp	r2, #0
 80020ce:	d04e      	beq.n	800216e <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 80020d0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_UART_Transmit+0x36>
 80020d8:	2302      	movs	r3, #2
 80020da:	e7ee      	b.n	80020ba <HAL_UART_Transmit+0x14>
 80020dc:	2301      	movs	r3, #1
 80020de:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020e6:	2321      	movs	r3, #33	; 0x21
 80020e8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80020ec:	f7fe f89c 	bl	8000228 <HAL_GetTick>
 80020f0:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80020f2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80020f6:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80020fa:	e003      	b.n	8002104 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	782a      	ldrb	r2, [r5, #0]
 8002100:	851a      	strh	r2, [r3, #40]	; 0x28
 8002102:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 8002104:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002108:	b29b      	uxth	r3, r3
 800210a:	b1e3      	cbz	r3, 8002146 <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 800210c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002110:	b29b      	uxth	r3, r3
 8002112:	3b01      	subs	r3, #1
 8002114:	b29b      	uxth	r3, r3
 8002116:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800211a:	9600      	str	r6, [sp, #0]
 800211c:	463b      	mov	r3, r7
 800211e:	2200      	movs	r2, #0
 8002120:	2180      	movs	r1, #128	; 0x80
 8002122:	4620      	mov	r0, r4
 8002124:	f7ff ff8d 	bl	8002042 <UART_WaitOnFlagUntilTimeout>
 8002128:	bb18      	cbnz	r0, 8002172 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800212a:	68a3      	ldr	r3, [r4, #8]
 800212c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002130:	d1e4      	bne.n	80020fc <HAL_UART_Transmit+0x56>
 8002132:	6923      	ldr	r3, [r4, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e1      	bne.n	80020fc <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002138:	6822      	ldr	r2, [r4, #0]
 800213a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800213e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002142:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8002144:	e7de      	b.n	8002104 <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002146:	9600      	str	r6, [sp, #0]
 8002148:	463b      	mov	r3, r7
 800214a:	2200      	movs	r2, #0
 800214c:	2140      	movs	r1, #64	; 0x40
 800214e:	4620      	mov	r0, r4
 8002150:	f7ff ff77 	bl	8002042 <UART_WaitOnFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	b108      	cbz	r0, 800215c <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e7ae      	b.n	80020ba <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 800215c:	2220      	movs	r2, #32
 800215e:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002162:	2200      	movs	r2, #0
 8002164:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    return HAL_OK;
 8002168:	e7a7      	b.n	80020ba <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e7a5      	b.n	80020ba <HAL_UART_Transmit+0x14>
 800216e:	2301      	movs	r3, #1
 8002170:	e7a3      	b.n	80020ba <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e7a1      	b.n	80020ba <HAL_UART_Transmit+0x14>

08002176 <UART_CheckIdleState>:
{
 8002176:	b530      	push	{r4, r5, lr}
 8002178:	b083      	sub	sp, #12
 800217a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217c:	2300      	movs	r3, #0
 800217e:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002180:	f7fe f852 	bl	8000228 <HAL_GetTick>
 8002184:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f013 0f08 	tst.w	r3, #8
 800218e:	d10e      	bne.n	80021ae <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f013 0f04 	tst.w	r3, #4
 8002198:	d117      	bne.n	80021ca <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 800219a:	2320      	movs	r3, #32
 800219c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80021a0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 80021a4:	2000      	movs	r0, #0
 80021a6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 80021aa:	b003      	add	sp, #12
 80021ac:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	4603      	mov	r3, r0
 80021b6:	2200      	movs	r2, #0
 80021b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80021bc:	4620      	mov	r0, r4
 80021be:	f7ff ff40 	bl	8002042 <UART_WaitOnFlagUntilTimeout>
 80021c2:	2800      	cmp	r0, #0
 80021c4:	d0e4      	beq.n	8002190 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80021c6:	2003      	movs	r0, #3
 80021c8:	e7ef      	b.n	80021aa <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	462b      	mov	r3, r5
 80021d2:	2200      	movs	r2, #0
 80021d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80021d8:	4620      	mov	r0, r4
 80021da:	f7ff ff32 	bl	8002042 <UART_WaitOnFlagUntilTimeout>
 80021de:	2800      	cmp	r0, #0
 80021e0:	d0db      	beq.n	800219a <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 80021e2:	2003      	movs	r0, #3
 80021e4:	e7e1      	b.n	80021aa <UART_CheckIdleState+0x34>

080021e6 <HAL_UART_Init>:
  if(huart == NULL)
 80021e6:	b378      	cbz	r0, 8002248 <HAL_UART_Init+0x62>
{
 80021e8:	b510      	push	{r4, lr}
 80021ea:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80021ec:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80021f0:	b30b      	cbz	r3, 8002236 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80021f2:	2324      	movs	r3, #36	; 0x24
 80021f4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80021f8:	6822      	ldr	r2, [r4, #0]
 80021fa:	6813      	ldr	r3, [r2, #0]
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002202:	4620      	mov	r0, r4
 8002204:	f7ff fdde 	bl	8001dc4 <UART_SetConfig>
 8002208:	2801      	cmp	r0, #1
 800220a:	d01f      	beq.n	800224c <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800220c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800220e:	b9bb      	cbnz	r3, 8002240 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002210:	6822      	ldr	r2, [r4, #0]
 8002212:	6853      	ldr	r3, [r2, #4]
 8002214:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002218:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800221a:	6822      	ldr	r2, [r4, #0]
 800221c:	6893      	ldr	r3, [r2, #8]
 800221e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002222:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002224:	6822      	ldr	r2, [r4, #0]
 8002226:	6813      	ldr	r3, [r2, #0]
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800222e:	4620      	mov	r0, r4
 8002230:	f7ff ffa1 	bl	8002176 <UART_CheckIdleState>
 8002234:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002236:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800223a:	f000 fb6d 	bl	8002918 <HAL_UART_MspInit>
 800223e:	e7d8      	b.n	80021f2 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002240:	4620      	mov	r0, r4
 8002242:	f7ff fe99 	bl	8001f78 <UART_AdvFeatureConfig>
 8002246:	e7e3      	b.n	8002210 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002248:	2001      	movs	r0, #1
 800224a:	4770      	bx	lr
}
 800224c:	bd10      	pop	{r4, pc}

0800224e <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800224e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b21      	cmp	r3, #33	; 0x21
 8002256:	d001      	beq.n	800225c <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002258:	2002      	movs	r0, #2
  }
}
 800225a:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 800225c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002260:	b29b      	uxth	r3, r3
 8002262:	b193      	cbz	r3, 800228a <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002264:	6883      	ldr	r3, [r0, #8]
 8002266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800226a:	d01a      	beq.n	80022a2 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800226c:	6802      	ldr	r2, [r0, #0]
 800226e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002270:	1c59      	adds	r1, r3, #1
 8002272:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002278:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29b      	uxth	r3, r3
 8002282:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8002286:	2000      	movs	r0, #0
 8002288:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800228a:	6802      	ldr	r2, [r0, #0]
 800228c:	6813      	ldr	r3, [r2, #0]
 800228e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002292:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002294:	6802      	ldr	r2, [r0, #0]
 8002296:	6813      	ldr	r3, [r2, #0]
 8002298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800229c:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 800229e:	2000      	movs	r0, #0
 80022a0:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022a2:	6903      	ldr	r3, [r0, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1e1      	bne.n	800226c <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80022a8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80022aa:	6802      	ldr	r2, [r0, #0]
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b2:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80022b4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80022b6:	3302      	adds	r3, #2
 80022b8:	64c3      	str	r3, [r0, #76]	; 0x4c
 80022ba:	e7dd      	b.n	8002278 <UART_Transmit_IT+0x2a>

080022bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80022bc:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80022be:	6801      	ldr	r1, [r0, #0]
 80022c0:	680b      	ldr	r3, [r1, #0]
 80022c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022c6:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022c8:	2320      	movs	r3, #32
 80022ca:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 80022ce:	f7ff fd6d 	bl	8001dac <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80022d2:	2000      	movs	r0, #0
 80022d4:	bd08      	pop	{r3, pc}

080022d6 <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 80022d6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80022da:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b22      	cmp	r3, #34	; 0x22
 80022e2:	d006      	beq.n	80022f2 <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80022e4:	6802      	ldr	r2, [r0, #0]
 80022e6:	6993      	ldr	r3, [r2, #24]
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 80022ee:	2002      	movs	r0, #2
 80022f0:	4770      	bx	lr
{
 80022f2:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80022f4:	6803      	ldr	r3, [r0, #0]
 80022f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80022f8:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022fa:	6881      	ldr	r1, [r0, #8]
 80022fc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002300:	d00f      	beq.n	8002322 <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002302:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8002304:	1c4c      	adds	r4, r1, #1
 8002306:	6544      	str	r4, [r0, #84]	; 0x54
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	401a      	ands	r2, r3
 800230c:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 800230e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29b      	uxth	r3, r3
 8002318:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800231c:	b15b      	cbz	r3, 8002336 <UART_Receive_IT+0x60>
    return HAL_OK;
 800231e:	2000      	movs	r0, #0
  }
}
 8002320:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002322:	6901      	ldr	r1, [r0, #16]
 8002324:	2900      	cmp	r1, #0
 8002326:	d1ec      	bne.n	8002302 <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002328:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 800232a:	401a      	ands	r2, r3
 800232c:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 800232e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002330:	3302      	adds	r3, #2
 8002332:	6543      	str	r3, [r0, #84]	; 0x54
 8002334:	e7eb      	b.n	800230e <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002336:	6802      	ldr	r2, [r0, #0]
 8002338:	6813      	ldr	r3, [r2, #0]
 800233a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800233e:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002340:	6802      	ldr	r2, [r0, #0]
 8002342:	6893      	ldr	r3, [r2, #8]
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800234a:	2320      	movs	r3, #32
 800234c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8002350:	f000 ff96 	bl	8003280 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002354:	2000      	movs	r0, #0
 8002356:	bd10      	pop	{r4, pc}

08002358 <HAL_UART_IRQHandler>:
{
 8002358:	b538      	push	{r3, r4, r5, lr}
 800235a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800235c:	6802      	ldr	r2, [r0, #0]
 800235e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002360:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 8002362:	f013 050f 	ands.w	r5, r3, #15
 8002366:	d105      	bne.n	8002374 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002368:	f013 0f20 	tst.w	r3, #32
 800236c:	d002      	beq.n	8002374 <HAL_UART_IRQHandler+0x1c>
 800236e:	f011 0f20 	tst.w	r1, #32
 8002372:	d160      	bne.n	8002436 <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 8002374:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8002376:	2d00      	cmp	r5, #0
 8002378:	d072      	beq.n	8002460 <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800237a:	f010 0501 	ands.w	r5, r0, #1
 800237e:	d102      	bne.n	8002386 <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002380:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002384:	d06c      	beq.n	8002460 <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002386:	f013 0f01 	tst.w	r3, #1
 800238a:	d007      	beq.n	800239c <HAL_UART_IRQHandler+0x44>
 800238c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002390:	d004      	beq.n	800239c <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002392:	2001      	movs	r0, #1
 8002394:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002396:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002398:	4302      	orrs	r2, r0
 800239a:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800239c:	f013 0f02 	tst.w	r3, #2
 80023a0:	d007      	beq.n	80023b2 <HAL_UART_IRQHandler+0x5a>
 80023a2:	b135      	cbz	r5, 80023b2 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80023a4:	6822      	ldr	r2, [r4, #0]
 80023a6:	2002      	movs	r0, #2
 80023a8:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023aa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80023ac:	f042 0204 	orr.w	r2, r2, #4
 80023b0:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023b2:	f013 0f04 	tst.w	r3, #4
 80023b6:	d007      	beq.n	80023c8 <HAL_UART_IRQHandler+0x70>
 80023b8:	b135      	cbz	r5, 80023c8 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80023ba:	6822      	ldr	r2, [r4, #0]
 80023bc:	2004      	movs	r0, #4
 80023be:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023c0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80023c2:	f042 0202 	orr.w	r2, r2, #2
 80023c6:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80023c8:	f013 0f08 	tst.w	r3, #8
 80023cc:	d009      	beq.n	80023e2 <HAL_UART_IRQHandler+0x8a>
 80023ce:	f011 0f20 	tst.w	r1, #32
 80023d2:	d100      	bne.n	80023d6 <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80023d4:	b12d      	cbz	r5, 80023e2 <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80023d6:	6822      	ldr	r2, [r4, #0]
 80023d8:	2008      	movs	r0, #8
 80023da:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023dc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80023de:	4302      	orrs	r2, r0
 80023e0:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023e2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80023e4:	2a00      	cmp	r2, #0
 80023e6:	d04d      	beq.n	8002484 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023e8:	f013 0f20 	tst.w	r3, #32
 80023ec:	d002      	beq.n	80023f4 <HAL_UART_IRQHandler+0x9c>
 80023ee:	f011 0f20 	tst.w	r1, #32
 80023f2:	d123      	bne.n	800243c <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80023f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80023f6:	f013 0f08 	tst.w	r3, #8
 80023fa:	d104      	bne.n	8002406 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002400:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002404:	d026      	beq.n	8002454 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 8002406:	4620      	mov	r0, r4
 8002408:	f7ff fc6b 	bl	8001ce2 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800240c:	6823      	ldr	r3, [r4, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002414:	d01a      	beq.n	800244c <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800241c:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800241e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002420:	b183      	cbz	r3, 8002444 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002422:	4a23      	ldr	r2, [pc, #140]	; (80024b0 <HAL_UART_IRQHandler+0x158>)
 8002424:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002426:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002428:	f7fe fbf9 	bl	8000c1e <HAL_DMA_Abort_IT>
 800242c:	b350      	cbz	r0, 8002484 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800242e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002430:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002432:	4798      	blx	r3
 8002434:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8002436:	f7ff ff4e 	bl	80022d6 <UART_Receive_IT>
      return;
 800243a:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 800243c:	4620      	mov	r0, r4
 800243e:	f7ff ff4a 	bl	80022d6 <UART_Receive_IT>
 8002442:	e7d7      	b.n	80023f4 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8002444:	4620      	mov	r0, r4
 8002446:	f7ff fcb2 	bl	8001dae <HAL_UART_ErrorCallback>
 800244a:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 800244c:	4620      	mov	r0, r4
 800244e:	f7ff fcae 	bl	8001dae <HAL_UART_ErrorCallback>
 8002452:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8002454:	4620      	mov	r0, r4
 8002456:	f7ff fcaa 	bl	8001dae <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245a:	2300      	movs	r3, #0
 800245c:	66e3      	str	r3, [r4, #108]	; 0x6c
 800245e:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002460:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002464:	d002      	beq.n	800246c <HAL_UART_IRQHandler+0x114>
 8002466:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800246a:	d10c      	bne.n	8002486 <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800246c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002470:	d002      	beq.n	8002478 <HAL_UART_IRQHandler+0x120>
 8002472:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002476:	d112      	bne.n	800249e <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002478:	f013 0f40 	tst.w	r3, #64	; 0x40
 800247c:	d002      	beq.n	8002484 <HAL_UART_IRQHandler+0x12c>
 800247e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002482:	d110      	bne.n	80024a6 <HAL_UART_IRQHandler+0x14e>
 8002484:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8002486:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800248a:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 800248c:	2320      	movs	r3, #32
 800248e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8002492:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8002496:	4620      	mov	r0, r4
 8002498:	f000 f80c 	bl	80024b4 <HAL_UARTEx_WakeupCallback>
    return;
 800249c:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 800249e:	4620      	mov	r0, r4
 80024a0:	f7ff fed5 	bl	800224e <UART_Transmit_IT>
    return;
 80024a4:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 80024a6:	4620      	mov	r0, r4
 80024a8:	f7ff ff08 	bl	80022bc <UART_EndTransmit_IT>
    return;
 80024ac:	e7ea      	b.n	8002484 <HAL_UART_IRQHandler+0x12c>
 80024ae:	bf00      	nop
 80024b0:	08001db1 	.word	0x08001db1

080024b4 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80024b4:	4770      	bx	lr
	...

080024b8 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
static void MX_GPIO_Init(void)
{
 80024b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ba:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024bc:	4b4d      	ldr	r3, [pc, #308]	; (80025f4 <MX_GPIO_Init+0x13c>)
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80024c4:	615a      	str	r2, [r3, #20]
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80024cc:	9201      	str	r2, [sp, #4]
 80024ce:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80024d6:	615a      	str	r2, [r3, #20]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80024de:	9202      	str	r2, [sp, #8]
 80024e0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80024e8:	615a      	str	r2, [r3, #20]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80024f0:	9203      	str	r2, [sp, #12]
 80024f2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80024fa:	615a      	str	r2, [r3, #20]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002502:	9304      	str	r3, [sp, #16]
 8002504:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8002506:	2200      	movs	r2, #0
 8002508:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800250c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002510:	f7fe fc7b 	bl	8000e0a <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8002514:	4d38      	ldr	r5, [pc, #224]	; (80025f8 <MX_GPIO_Init+0x140>)
 8002516:	2200      	movs	r2, #0
 8002518:	f44f 618f 	mov.w	r1, #1144	; 0x478
 800251c:	4628      	mov	r0, r5
 800251e:	f7fe fc74 	bl	8000e0a <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002522:	4e36      	ldr	r6, [pc, #216]	; (80025fc <MX_GPIO_Init+0x144>)
 8002524:	2200      	movs	r2, #0
 8002526:	2180      	movs	r1, #128	; 0x80
 8002528:	4630      	mov	r0, r6
 800252a:	f7fe fc6e 	bl	8000e0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800252e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002532:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002534:	4b32      	ldr	r3, [pc, #200]	; (8002600 <MX_GPIO_Init+0x148>)
 8002536:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2400      	movs	r4, #0
 800253a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800253c:	a905      	add	r1, sp, #20
 800253e:	4630      	mov	r0, r6
 8002540:	f7fe fb92 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002544:	2703      	movs	r7, #3
 8002546:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002548:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800254c:	a905      	add	r1, sp, #20
 800254e:	4630      	mov	r0, r6
 8002550:	f7fe fb8a 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002554:	2313      	movs	r3, #19
 8002556:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002558:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255c:	a905      	add	r1, sp, #20
 800255e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002562:	f7fe fb81 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002566:	230c      	movs	r3, #12
 8002568:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256a:	2302      	movs	r3, #2
 800256c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002570:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002572:	2307      	movs	r3, #7
 8002574:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002576:	a905      	add	r1, sp, #20
 8002578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800257c:	f7fe fb74 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8002580:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002584:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002586:	2701      	movs	r7, #1
 8002588:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	a905      	add	r1, sp, #20
 8002590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002594:	f7fe fb68 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002598:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <MX_GPIO_Init+0x14c>)
 800259c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a0:	a905      	add	r1, sp, #20
 80025a2:	4628      	mov	r0, r5
 80025a4:	f7fe fb60 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80025a8:	f44f 638f 	mov.w	r3, #1144	; 0x478
 80025ac:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ae:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b4:	a905      	add	r1, sp, #20
 80025b6:	4628      	mov	r0, r5
 80025b8:	f7fe fb56 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c0:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c6:	a905      	add	r1, sp, #20
 80025c8:	4630      	mov	r0, r6
 80025ca:	f7fe fb4d 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025d2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025d4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d8:	a905      	add	r1, sp, #20
 80025da:	4628      	mov	r0, r5
 80025dc:	f7fe fb44 	bl	8000c68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025e0:	4622      	mov	r2, r4
 80025e2:	4621      	mov	r1, r4
 80025e4:	2028      	movs	r0, #40	; 0x28
 80025e6:	f7fe fab1 	bl	8000b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025ea:	2028      	movs	r0, #40	; 0x28
 80025ec:	f7fe fae0 	bl	8000bb0 <HAL_NVIC_EnableIRQ>

}
 80025f0:	b00b      	add	sp, #44	; 0x2c
 80025f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025f4:	40021000 	.word	0x40021000
 80025f8:	48000400 	.word	0x48000400
 80025fc:	48000800 	.word	0x48000800
 8002600:	10210000 	.word	0x10210000
 8002604:	10310000 	.word	0x10310000

08002608 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002608:	e7fe      	b.n	8002608 <_Error_Handler>
	...

0800260c <MX_USART1_UART_Init>:
{
 800260c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800260e:	480c      	ldr	r0, [pc, #48]	; (8002640 <MX_USART1_UART_Init+0x34>)
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <MX_USART1_UART_Init+0x38>)
 8002612:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002614:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002618:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800261a:	2300      	movs	r3, #0
 800261c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800261e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002620:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002622:	220c      	movs	r2, #12
 8002624:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002626:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002628:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800262a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800262c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800262e:	f7ff fdda 	bl	80021e6 <HAL_UART_Init>
 8002632:	b900      	cbnz	r0, 8002636 <MX_USART1_UART_Init+0x2a>
 8002634:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002636:	f240 1119 	movw	r1, #281	; 0x119
 800263a:	4803      	ldr	r0, [pc, #12]	; (8002648 <MX_USART1_UART_Init+0x3c>)
 800263c:	f7ff ffe4 	bl	8002608 <_Error_Handler>
 8002640:	2000008c 	.word	0x2000008c
 8002644:	40013800 	.word	0x40013800
 8002648:	08003394 	.word	0x08003394

0800264c <MX_ADC1_Init>:
{
 800264c:	b500      	push	{lr}
 800264e:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Instance = ADC1;
 8002650:	481d      	ldr	r0, [pc, #116]	; (80026c8 <MX_ADC1_Init+0x7c>)
 8002652:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002656:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002658:	2300      	movs	r3, #0
 800265a:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800265c:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800265e:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002660:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002662:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002664:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002666:	2201      	movs	r2, #1
 8002668:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800266a:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 800266c:	6202      	str	r2, [r0, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800266e:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002670:	2204      	movs	r2, #4
 8002672:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002674:	6183      	str	r3, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002676:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002678:	f7fd fe62 	bl	8000340 <HAL_ADC_Init>
 800267c:	b9c0      	cbnz	r0, 80026b0 <MX_ADC1_Init+0x64>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800267e:	a90a      	add	r1, sp, #40	; 0x28
 8002680:	2300      	movs	r3, #0
 8002682:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002686:	4810      	ldr	r0, [pc, #64]	; (80026c8 <MX_ADC1_Init+0x7c>)
 8002688:	f7fe f9b0 	bl	80009ec <HAL_ADCEx_MultiModeConfigChannel>
 800268c:	b9a0      	cbnz	r0, 80026b8 <MX_ADC1_Init+0x6c>
  sConfig.Channel = ADC_CHANNEL_12;
 800268e:	230c      	movs	r3, #12
 8002690:	9301      	str	r3, [sp, #4]
  sConfig.Rank = 1;
 8002692:	2301      	movs	r3, #1
 8002694:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002696:	2300      	movs	r3, #0
 8002698:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800269a:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800269c:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 800269e:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026a0:	a901      	add	r1, sp, #4
 80026a2:	4809      	ldr	r0, [pc, #36]	; (80026c8 <MX_ADC1_Init+0x7c>)
 80026a4:	f7fd ffe0 	bl	8000668 <HAL_ADC_ConfigChannel>
 80026a8:	b950      	cbnz	r0, 80026c0 <MX_ADC1_Init+0x74>
}
 80026aa:	b00b      	add	sp, #44	; 0x2c
 80026ac:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80026b0:	21ce      	movs	r1, #206	; 0xce
 80026b2:	4806      	ldr	r0, [pc, #24]	; (80026cc <MX_ADC1_Init+0x80>)
 80026b4:	f7ff ffa8 	bl	8002608 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80026b8:	21d6      	movs	r1, #214	; 0xd6
 80026ba:	4804      	ldr	r0, [pc, #16]	; (80026cc <MX_ADC1_Init+0x80>)
 80026bc:	f7ff ffa4 	bl	8002608 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80026c0:	21e3      	movs	r1, #227	; 0xe3
 80026c2:	4802      	ldr	r0, [pc, #8]	; (80026cc <MX_ADC1_Init+0x80>)
 80026c4:	f7ff ffa0 	bl	8002608 <_Error_Handler>
 80026c8:	20000038 	.word	0x20000038
 80026cc:	08003394 	.word	0x08003394

080026d0 <MX_TIM2_Init>:
{
 80026d0:	b500      	push	{lr}
 80026d2:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 80026d4:	4818      	ldr	r0, [pc, #96]	; (8002738 <MX_TIM2_Init+0x68>)
 80026d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026da:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80026e0:	2210      	movs	r2, #16
 80026e2:	6082      	str	r2, [r0, #8]
  htim2.Init.Period = 16000;
 80026e4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80026e8:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ea:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026f0:	f7ff fa1a 	bl	8001b28 <HAL_TIM_Base_Init>
 80026f4:	b998      	cbnz	r0, 800271e <MX_TIM2_Init+0x4e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026f6:	a908      	add	r1, sp, #32
 80026f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026fc:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002700:	480d      	ldr	r0, [pc, #52]	; (8002738 <MX_TIM2_Init+0x68>)
 8002702:	f7ff fa37 	bl	8001b74 <HAL_TIM_ConfigClockSource>
 8002706:	b970      	cbnz	r0, 8002726 <MX_TIM2_Init+0x56>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002708:	2300      	movs	r3, #0
 800270a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800270c:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800270e:	a901      	add	r1, sp, #4
 8002710:	4809      	ldr	r0, [pc, #36]	; (8002738 <MX_TIM2_Init+0x68>)
 8002712:	f7ff fabb 	bl	8001c8c <HAL_TIMEx_MasterConfigSynchronization>
 8002716:	b950      	cbnz	r0, 800272e <MX_TIM2_Init+0x5e>
}
 8002718:	b009      	add	sp, #36	; 0x24
 800271a:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800271e:	21f7      	movs	r1, #247	; 0xf7
 8002720:	4806      	ldr	r0, [pc, #24]	; (800273c <MX_TIM2_Init+0x6c>)
 8002722:	f7ff ff71 	bl	8002608 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002726:	21fd      	movs	r1, #253	; 0xfd
 8002728:	4804      	ldr	r0, [pc, #16]	; (800273c <MX_TIM2_Init+0x6c>)
 800272a:	f7ff ff6d 	bl	8002608 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800272e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002732:	4802      	ldr	r0, [pc, #8]	; (800273c <MX_TIM2_Init+0x6c>)
 8002734:	f7ff ff68 	bl	8002608 <_Error_Handler>
 8002738:	200000fc 	.word	0x200000fc
 800273c:	08003394 	.word	0x08003394

08002740 <SystemClock_Config>:
{
 8002740:	b500      	push	{lr}
 8002742:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002744:	2302      	movs	r3, #2
 8002746:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002748:	2201      	movs	r2, #1
 800274a:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800274c:	2210      	movs	r2, #16
 800274e:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002750:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002752:	2300      	movs	r3, #0
 8002754:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002756:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800275a:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800275c:	a80c      	add	r0, sp, #48	; 0x30
 800275e:	f7fe fb69 	bl	8000e34 <HAL_RCC_OscConfig>
 8002762:	bb60      	cbnz	r0, 80027be <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002764:	230f      	movs	r3, #15
 8002766:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002768:	2102      	movs	r1, #2
 800276a:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800276c:	2300      	movs	r3, #0
 800276e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002770:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002774:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002776:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002778:	a807      	add	r0, sp, #28
 800277a:	f7fe fe99 	bl	80014b0 <HAL_RCC_ClockConfig>
 800277e:	bb10      	cbnz	r0, 80027c6 <SystemClock_Config+0x86>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8002780:	2381      	movs	r3, #129	; 0x81
 8002782:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002784:	2300      	movs	r3, #0
 8002786:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800278c:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800278e:	4668      	mov	r0, sp
 8002790:	f7fe ffaa 	bl	80016e8 <HAL_RCCEx_PeriphCLKConfig>
 8002794:	b9d8      	cbnz	r0, 80027ce <SystemClock_Config+0x8e>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002796:	f7fe ff75 	bl	8001684 <HAL_RCC_GetHCLKFreq>
 800279a:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <SystemClock_Config+0x98>)
 800279c:	fba3 3000 	umull	r3, r0, r3, r0
 80027a0:	0980      	lsrs	r0, r0, #6
 80027a2:	f7fe fa11 	bl	8000bc8 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80027a6:	2004      	movs	r0, #4
 80027a8:	f7fe fa24 	bl	8000bf4 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80027ac:	2200      	movs	r2, #0
 80027ae:	4611      	mov	r1, r2
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	f7fe f9ca 	bl	8000b4c <HAL_NVIC_SetPriority>
}
 80027b8:	b017      	add	sp, #92	; 0x5c
 80027ba:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80027be:	2190      	movs	r1, #144	; 0x90
 80027c0:	4806      	ldr	r0, [pc, #24]	; (80027dc <SystemClock_Config+0x9c>)
 80027c2:	f7ff ff21 	bl	8002608 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80027c6:	219e      	movs	r1, #158	; 0x9e
 80027c8:	4804      	ldr	r0, [pc, #16]	; (80027dc <SystemClock_Config+0x9c>)
 80027ca:	f7ff ff1d 	bl	8002608 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80027ce:	21a6      	movs	r1, #166	; 0xa6
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <SystemClock_Config+0x9c>)
 80027d2:	f7ff ff19 	bl	8002608 <_Error_Handler>
 80027d6:	bf00      	nop
 80027d8:	10624dd3 	.word	0x10624dd3
 80027dc:	08003394 	.word	0x08003394

080027e0 <main>:
{
 80027e0:	b508      	push	{r3, lr}
  HAL_Init();
 80027e2:	f7fd fd07 	bl	80001f4 <HAL_Init>
  SystemClock_Config();
 80027e6:	f7ff ffab 	bl	8002740 <SystemClock_Config>
  MX_GPIO_Init();
 80027ea:	f7ff fe65 	bl	80024b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80027ee:	f7ff ff0d 	bl	800260c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80027f2:	f7ff ff2b 	bl	800264c <MX_ADC1_Init>
  MX_TIM2_Init();
 80027f6:	f7ff ff6b 	bl	80026d0 <MX_TIM2_Init>
  UserInitialise();
 80027fa:	f000 f90d 	bl	8002a18 <UserInitialise>
	  User();
 80027fe:	f000 fc29 	bl	8003054 <User>
 8002802:	e7fc      	b.n	80027fe <main+0x1e>

08002804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002804:	b500      	push	{lr}
 8002806:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002808:	4b1c      	ldr	r3, [pc, #112]	; (800287c <HAL_MspInit+0x78>)
 800280a:	699a      	ldr	r2, [r3, #24]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	619a      	str	r2, [r3, #24]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	9301      	str	r3, [sp, #4]
 800281a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800281c:	2007      	movs	r0, #7
 800281e:	f7fe f983 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	4611      	mov	r1, r2
 8002826:	f06f 000b 	mvn.w	r0, #11
 800282a:	f7fe f98f 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	4611      	mov	r1, r2
 8002832:	f06f 000a 	mvn.w	r0, #10
 8002836:	f7fe f989 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	4611      	mov	r1, r2
 800283e:	f06f 0009 	mvn.w	r0, #9
 8002842:	f7fe f983 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	4611      	mov	r1, r2
 800284a:	f06f 0004 	mvn.w	r0, #4
 800284e:	f7fe f97d 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	4611      	mov	r1, r2
 8002856:	f06f 0003 	mvn.w	r0, #3
 800285a:	f7fe f977 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	4611      	mov	r1, r2
 8002862:	f06f 0001 	mvn.w	r0, #1
 8002866:	f7fe f971 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800286a:	2200      	movs	r2, #0
 800286c:	4611      	mov	r1, r2
 800286e:	f04f 30ff 	mov.w	r0, #4294967295
 8002872:	f7fe f96b 	bl	8000b4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002876:	b003      	add	sp, #12
 8002878:	f85d fb04 	ldr.w	pc, [sp], #4
 800287c:	40021000 	.word	0x40021000

08002880 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002880:	6803      	ldr	r3, [r0, #0]
 8002882:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002886:	d000      	beq.n	800288a <HAL_ADC_MspInit+0xa>
 8002888:	4770      	bx	lr
{
 800288a:	b530      	push	{r4, r5, lr}
 800288c:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800288e:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8002892:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800289c:	615a      	str	r2, [r3, #20]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	9b00      	ldr	r3, [sp, #0]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PB1     ------> ADC1_IN12
    PB13     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028a8:	230c      	movs	r3, #12
 80028aa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ac:	2503      	movs	r5, #3
 80028ae:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2400      	movs	r4, #0
 80028b2:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b4:	a901      	add	r1, sp, #4
 80028b6:	4807      	ldr	r0, [pc, #28]	; (80028d4 <HAL_ADC_MspInit+0x54>)
 80028b8:	f7fe f9d6 	bl	8000c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 80028bc:	f242 0302 	movw	r3, #8194	; 0x2002
 80028c0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028c2:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c6:	a901      	add	r1, sp, #4
 80028c8:	4803      	ldr	r0, [pc, #12]	; (80028d8 <HAL_ADC_MspInit+0x58>)
 80028ca:	f7fe f9cd 	bl	8000c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028ce:	b007      	add	sp, #28
 80028d0:	bd30      	pop	{r4, r5, pc}
 80028d2:	bf00      	nop
 80028d4:	48000800 	.word	0x48000800
 80028d8:	48000400 	.word	0x48000400

080028dc <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80028dc:	6803      	ldr	r3, [r0, #0]
 80028de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e2:	d000      	beq.n	80028e6 <HAL_TIM_Base_MspInit+0xa>
 80028e4:	4770      	bx	lr
{
 80028e6:	b500      	push	{lr}
 80028e8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ea:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	f042 0201 	orr.w	r2, r2, #1
 80028f4:	61da      	str	r2, [r3, #28]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002900:	2200      	movs	r2, #0
 8002902:	4611      	mov	r1, r2
 8002904:	201c      	movs	r0, #28
 8002906:	f7fe f921 	bl	8000b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800290a:	201c      	movs	r0, #28
 800290c:	f7fe f950 	bl	8000bb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002910:	b003      	add	sp, #12
 8002912:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002918 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002918:	6802      	ldr	r2, [r0, #0]
 800291a:	4b15      	ldr	r3, [pc, #84]	; (8002970 <HAL_UART_MspInit+0x58>)
 800291c:	429a      	cmp	r2, r3
 800291e:	d000      	beq.n	8002922 <HAL_UART_MspInit+0xa>
 8002920:	4770      	bx	lr
{
 8002922:	b500      	push	{lr}
 8002924:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002926:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800292a:	699a      	ldr	r2, [r3, #24]
 800292c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002930:	619a      	str	r2, [r3, #24]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800293c:	2330      	movs	r3, #48	; 0x30
 800293e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002944:	2301      	movs	r3, #1
 8002946:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002948:	2303      	movs	r3, #3
 800294a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800294c:	2307      	movs	r3, #7
 800294e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002950:	a901      	add	r1, sp, #4
 8002952:	4808      	ldr	r0, [pc, #32]	; (8002974 <HAL_UART_MspInit+0x5c>)
 8002954:	f7fe f988 	bl	8000c68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002958:	2200      	movs	r2, #0
 800295a:	4611      	mov	r1, r2
 800295c:	2025      	movs	r0, #37	; 0x25
 800295e:	f7fe f8f5 	bl	8000b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002962:	2025      	movs	r0, #37	; 0x25
 8002964:	f7fe f924 	bl	8000bb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002968:	b007      	add	sp, #28
 800296a:	f85d fb04 	ldr.w	pc, [sp], #4
 800296e:	bf00      	nop
 8002970:	40013800 	.word	0x40013800
 8002974:	48000800 	.word	0x48000800

08002978 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002978:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800297a:	f7fd fc4d 	bl	8000218 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800297e:	f7fe f94a 	bl	8000c16 <HAL_SYSTICK_IRQHandler>
 8002982:	bd08      	pop	{r3, pc}

08002984 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8002984:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002986:	4802      	ldr	r0, [pc, #8]	; (8002990 <TIM2_IRQHandler+0xc>)
 8002988:	f7fe ffb7 	bl	80018fa <HAL_TIM_IRQHandler>
 800298c:	bd08      	pop	{r3, pc}
 800298e:	bf00      	nop
 8002990:	200000fc 	.word	0x200000fc

08002994 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 8002994:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002996:	4802      	ldr	r0, [pc, #8]	; (80029a0 <USART1_IRQHandler+0xc>)
 8002998:	f7ff fcde 	bl	8002358 <HAL_UART_IRQHandler>
 800299c:	bd08      	pop	{r3, pc}
 800299e:	bf00      	nop
 80029a0:	2000008c 	.word	0x2000008c

080029a4 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 80029a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80029a6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029aa:	f7fe fa35 	bl	8000e18 <HAL_GPIO_EXTI_IRQHandler>
 80029ae:	bd08      	pop	{r3, pc}

080029b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029b0:	4915      	ldr	r1, [pc, #84]	; (8002a08 <SystemInit+0x58>)
 80029b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80029b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <SystemInit+0x5c>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80029c8:	6858      	ldr	r0, [r3, #4]
 80029ca:	4a11      	ldr	r2, [pc, #68]	; (8002a10 <SystemInit+0x60>)
 80029cc:	4002      	ands	r2, r0
 80029ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80029d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029da:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029e2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80029ea:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80029ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ee:	f022 020f 	bic.w	r2, r2, #15
 80029f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80029f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029f6:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <SystemInit+0x64>)
 80029f8:	4002      	ands	r2, r0
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a04:	608b      	str	r3, [r1, #8]
 8002a06:	4770      	bx	lr
 8002a08:	e000ed00 	.word	0xe000ed00
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	f87fc00c 	.word	0xf87fc00c
 8002a14:	ff00fccc 	.word	0xff00fccc

08002a18 <UserInitialise>:
uint8_t in = 0;



void UserInitialise(void)
{
 8002a18:	b570      	push	{r4, r5, r6, lr}
	uartRxFlag = false;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <UserInitialise+0x90>)
 8002a1e:	7013      	strb	r3, [r2, #0]
	tempSetpoint = 60;		// initial value
 8002a20:	213c      	movs	r1, #60	; 0x3c
 8002a22:	4a22      	ldr	r2, [pc, #136]	; (8002aac <UserInitialise+0x94>)
 8002a24:	8011      	strh	r1, [r2, #0]

	//---------------------Prof code--------------------------//
	adcFlag = false;
 8002a26:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <UserInitialise+0x98>)
 8002a28:	7013      	strb	r3, [r2, #0]
	adcchan = 0;
 8002a2a:	4a22      	ldr	r2, [pc, #136]	; (8002ab4 <UserInitialise+0x9c>)
 8002a2c:	7013      	strb	r3, [r2, #0]
	samplectr = 0;
 8002a2e:	4a22      	ldr	r2, [pc, #136]	; (8002ab8 <UserInitialise+0xa0>)
 8002a30:	7013      	strb	r3, [r2, #0]
	irms_accum = 0;
 8002a32:	2200      	movs	r2, #0
 8002a34:	4921      	ldr	r1, [pc, #132]	; (8002abc <UserInitialise+0xa4>)
 8002a36:	600a      	str	r2, [r1, #0]
	vrms_accum = 0;
 8002a38:	4921      	ldr	r1, [pc, #132]	; (8002ac0 <UserInitialise+0xa8>)
 8002a3a:	600a      	str	r2, [r1, #0]

	digit = 0;
 8002a3c:	4a21      	ldr	r2, [pc, #132]	; (8002ac4 <UserInitialise+0xac>)
 8002a3e:	7013      	strb	r3, [r2, #0]
	//---------------------Prof code--------------------------//

	numberMap[0] = 0b00111111;
 8002a40:	4b21      	ldr	r3, [pc, #132]	; (8002ac8 <UserInitialise+0xb0>)
 8002a42:	223f      	movs	r2, #63	; 0x3f
 8002a44:	701a      	strb	r2, [r3, #0]
	numberMap[1] = 0b00000110;
 8002a46:	2506      	movs	r5, #6
 8002a48:	705d      	strb	r5, [r3, #1]
	numberMap[2] = 0b01011011;
 8002a4a:	215b      	movs	r1, #91	; 0x5b
 8002a4c:	7099      	strb	r1, [r3, #2]
	numberMap[3] = 0b01001111;
 8002a4e:	224f      	movs	r2, #79	; 0x4f
 8002a50:	70da      	strb	r2, [r3, #3]
	numberMap[4] = 0b01100110;
 8002a52:	2266      	movs	r2, #102	; 0x66
 8002a54:	711a      	strb	r2, [r3, #4]
	numberMap[5] = 0b01101101;
 8002a56:	206d      	movs	r0, #109	; 0x6d
 8002a58:	7158      	strb	r0, [r3, #5]
	numberMap[6] = 0b01111101;
 8002a5a:	227d      	movs	r2, #125	; 0x7d
 8002a5c:	719a      	strb	r2, [r3, #6]
	numberMap[7] = 0b00000111;
 8002a5e:	2207      	movs	r2, #7
 8002a60:	71da      	strb	r2, [r3, #7]
	numberMap[8] = 0b01111111;
 8002a62:	247f      	movs	r4, #127	; 0x7f
 8002a64:	721c      	strb	r4, [r3, #8]
	numberMap[9] = 0b01100111;
 8002a66:	2267      	movs	r2, #103	; 0x67
 8002a68:	725a      	strb	r2, [r3, #9]

	segements[0] = 0b0001;
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <UserInitialise+0xb4>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]
	segements[1] = 0b0010;
 8002a70:	2602      	movs	r6, #2
 8002a72:	705e      	strb	r6, [r3, #1]
	segements[2] = 0b0100;
 8002a74:	2604      	movs	r6, #4
 8002a76:	709e      	strb	r6, [r3, #2]
	segements[3] = 0b1000;
 8002a78:	2608      	movs	r6, #8
 8002a7a:	70de      	strb	r6, [r3, #3]

	pinsValue[0] = numberMap[1];
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <UserInitialise+0xb8>)
 8002a7e:	701d      	strb	r5, [r3, #0]
	pinsValue[1] = numberMap[8];
 8002a80:	705c      	strb	r4, [r3, #1]
	pinsValue[2] = numberMap[5];
 8002a82:	7098      	strb	r0, [r3, #2]
	pinsValue[3] = numberMap[2];
 8002a84:	70d9      	strb	r1, [r3, #3]

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 8002a86:	4913      	ldr	r1, [pc, #76]	; (8002ad4 <UserInitialise+0xbc>)
 8002a88:	4813      	ldr	r0, [pc, #76]	; (8002ad8 <UserInitialise+0xc0>)
 8002a8a:	f7ff f938 	bl	8001cfe <HAL_UART_Receive_IT>


	// start timer 2 for ADC sampling
	__HAL_TIM_ENABLE(&htim2);
 8002a8e:	4a13      	ldr	r2, [pc, #76]	; (8002adc <UserInitialise+0xc4>)
 8002a90:	6811      	ldr	r1, [r2, #0]
 8002a92:	680b      	ldr	r3, [r1, #0]
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	600b      	str	r3, [r1, #0]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	68d3      	ldr	r3, [r2, #12]
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	60d3      	str	r3, [r2, #12]
 8002aa4:	bd70      	pop	{r4, r5, r6, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200002aa 	.word	0x200002aa
 8002aac:	200001f4 	.word	0x200001f4
 8002ab0:	200002ca 	.word	0x200002ca
 8002ab4:	2000027e 	.word	0x2000027e
 8002ab8:	20000164 	.word	0x20000164
 8002abc:	200002ac 	.word	0x200002ac
 8002ac0:	200002a4 	.word	0x200002a4
 8002ac4:	2000013c 	.word	0x2000013c
 8002ac8:	20000144 	.word	0x20000144
 8002acc:	2000015c 	.word	0x2000015c
 8002ad0:	20000280 	.word	0x20000280
 8002ad4:	200001f6 	.word	0x200001f6
 8002ad8:	2000008c 	.word	0x2000008c
 8002adc:	200000fc 	.word	0x200000fc

08002ae0 <TempConv>:
uint32_t TempConv(uint32_t tempVal)
{
	uint32_t temp = 0;
	uint32_t scale = 0;

	temp = ((100*tempVal)>>7)+((100*tempVal)>>12);
 8002ae0:	2364      	movs	r3, #100	; 0x64
 8002ae2:	fb03 f300 	mul.w	r3, r3, r0
 8002ae6:	0b18      	lsrs	r0, r3, #12
 8002ae8:	eb00 10d3 	add.w	r0, r0, r3, lsr #7
	scale = (temp-500)/10;
 8002aec:	f5a0 70fa 	sub.w	r0, r0, #500	; 0x1f4
 8002af0:	4b02      	ldr	r3, [pc, #8]	; (8002afc <TempConv+0x1c>)
 8002af2:	fba3 3000 	umull	r3, r0, r3, r0

	return scale;
}
 8002af6:	08c0      	lsrs	r0, r0, #3
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	cccccccd 	.word	0xcccccccd

08002b00 <String2Int>:
uint8_t String2Int(char* inputString, int16_t* outputInt)
{
	int returnValue = 0;
	int sign = 1;

	if (*inputString == '\0')
 8002b00:	7803      	ldrb	r3, [r0, #0]
 8002b02:	b353      	cbz	r3, 8002b5a <String2Int+0x5a>
{
 8002b04:	b430      	push	{r4, r5}
		return 0;

	if (*inputString == '-')
 8002b06:	2b2d      	cmp	r3, #45	; 0x2d
 8002b08:	d002      	beq.n	8002b10 <String2Int+0x10>
	int sign = 1;
 8002b0a:	2501      	movs	r5, #1
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e009      	b.n	8002b24 <String2Int+0x24>
	{
		sign = -1;
		inputString++;
 8002b10:	3001      	adds	r0, #1
		sign = -1;
 8002b12:	f04f 35ff 	mov.w	r5, #4294967295
 8002b16:	e7f9      	b.n	8002b0c <String2Int+0xc>
	while ((*inputString >= '0') && (*inputString <= '9'))
	{
		returnValue *= 10;
		returnValue += (*inputString - 48);

		if (((sign == 1) && (returnValue >= 32768)) ||
 8002b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b1c:	db0f      	blt.n	8002b3e <String2Int+0x3e>
				((sign == -1) && (returnValue >= 32769)))
			return 0;
 8002b1e:	2000      	movs	r0, #0
 8002b20:	e019      	b.n	8002b56 <String2Int+0x56>

		inputString++;
 8002b22:	3001      	adds	r0, #1
	while ((*inputString >= '0') && (*inputString <= '9'))
 8002b24:	7802      	ldrb	r2, [r0, #0]
 8002b26:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8002b2a:	b2e4      	uxtb	r4, r4
 8002b2c:	2c09      	cmp	r4, #9
 8002b2e:	d80e      	bhi.n	8002b4e <String2Int+0x4e>
		returnValue *= 10;
 8002b30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b34:	005c      	lsls	r4, r3, #1
		returnValue += (*inputString - 48);
 8002b36:	3a30      	subs	r2, #48	; 0x30
 8002b38:	18a3      	adds	r3, r4, r2
		if (((sign == 1) && (returnValue >= 32768)) ||
 8002b3a:	2d01      	cmp	r5, #1
 8002b3c:	d0ec      	beq.n	8002b18 <String2Int+0x18>
 8002b3e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002b42:	d1ee      	bne.n	8002b22 <String2Int+0x22>
				((sign == -1) && (returnValue >= 32769)))
 8002b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b48:	ddeb      	ble.n	8002b22 <String2Int+0x22>
			return 0;
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	e003      	b.n	8002b56 <String2Int+0x56>
	}
	*outputInt = (int16_t)(sign * returnValue);
 8002b4e:	fb15 f303 	smulbb	r3, r5, r3
 8002b52:	800b      	strh	r3, [r1, #0]
	return 1;
 8002b54:	2001      	movs	r0, #1
}
 8002b56:	bc30      	pop	{r4, r5}
 8002b58:	4770      	bx	lr
		return 0;
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	4770      	bx	lr
	...

08002b60 <Int2String>:

// convert integer var to ASCII string
uint8_t Int2String(char* outputString, int32_t value, uint8_t maxL)
{
 8002b60:	b470      	push	{r4, r5, r6}
	int numWritten = 0;
	int writePosition = 0;
	uint8_t digits = 0;

	if (maxL == 0)
 8002b62:	4614      	mov	r4, r2
 8002b64:	b3ba      	cbz	r2, 8002bd6 <Int2String+0x76>
		return 0;

	if (value < 0)
 8002b66:	2900      	cmp	r1, #0
 8002b68:	db0d      	blt.n	8002b86 <Int2String+0x26>
	int numWritten = 0;
 8002b6a:	2200      	movs	r2, #0
		maxL--;
		value = -value;
		numWritten = 1;
	}

	if (value < 10)
 8002b6c:	2909      	cmp	r1, #9
 8002b6e:	dd12      	ble.n	8002b96 <Int2String+0x36>
		digits = 1;
	else if (value < 100)
 8002b70:	2963      	cmp	r1, #99	; 0x63
 8002b72:	dd15      	ble.n	8002ba0 <Int2String+0x40>
		digits = 2;
	else if (value < 1000)
 8002b74:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002b78:	db14      	blt.n	8002ba4 <Int2String+0x44>
		digits = 3;
	else if (value < 10000)
 8002b7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8002b7e:	4299      	cmp	r1, r3
 8002b80:	dc12      	bgt.n	8002ba8 <Int2String+0x48>
		digits = 4;
 8002b82:	2304      	movs	r3, #4
 8002b84:	e008      	b.n	8002b98 <Int2String+0x38>
		outputString[0] = '-';
 8002b86:	232d      	movs	r3, #45	; 0x2d
 8002b88:	f800 3b01 	strb.w	r3, [r0], #1
		maxL--;
 8002b8c:	1e54      	subs	r4, r2, #1
 8002b8e:	b2e4      	uxtb	r4, r4
		value = -value;
 8002b90:	4249      	negs	r1, r1
		numWritten = 1;
 8002b92:	2201      	movs	r2, #1
 8002b94:	e7ea      	b.n	8002b6c <Int2String+0xc>
		digits = 1;
 8002b96:	2301      	movs	r3, #1
	else
		digits = 5;

	if (digits > maxL)
 8002b98:	429c      	cmp	r4, r3
 8002b9a:	d218      	bcs.n	8002bce <Int2String+0x6e>
		return 0; // error - not enough space in output string!
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	e01b      	b.n	8002bd8 <Int2String+0x78>
		digits = 2;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e7f9      	b.n	8002b98 <Int2String+0x38>
		digits = 3;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e7f7      	b.n	8002b98 <Int2String+0x38>
		digits = 5;
 8002ba8:	2305      	movs	r3, #5
 8002baa:	e7f5      	b.n	8002b98 <Int2String+0x38>

	writePosition = digits;
	while (writePosition > 0)
	{
		outputString[writePosition-1] = (char) ((value % 10) + 48);
 8002bac:	1e5c      	subs	r4, r3, #1
 8002bae:	4d0b      	ldr	r5, [pc, #44]	; (8002bdc <Int2String+0x7c>)
 8002bb0:	fb85 3501 	smull	r3, r5, r5, r1
 8002bb4:	17cb      	asrs	r3, r1, #31
 8002bb6:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
 8002bba:	461e      	mov	r6, r3
 8002bbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002bc0:	005d      	lsls	r5, r3, #1
 8002bc2:	1b4b      	subs	r3, r1, r5
 8002bc4:	3330      	adds	r3, #48	; 0x30
 8002bc6:	5503      	strb	r3, [r0, r4]
		value /= 10;
 8002bc8:	4631      	mov	r1, r6
		writePosition--;
 8002bca:	4623      	mov	r3, r4
		numWritten++;
 8002bcc:	3201      	adds	r2, #1
	while (writePosition > 0)
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	dcec      	bgt.n	8002bac <Int2String+0x4c>
	}

	return numWritten;
 8002bd2:	b2d0      	uxtb	r0, r2
 8002bd4:	e000      	b.n	8002bd8 <Int2String+0x78>
		return 0;
 8002bd6:	4610      	mov	r0, r2
}
 8002bd8:	bc70      	pop	{r4, r5, r6}
 8002bda:	4770      	bx	lr
 8002bdc:	66666667 	.word	0x66666667

08002be0 <DecodeCmd>:
{
 8002be0:	b570      	push	{r4, r5, r6, lr}
	switch (cmdBuf[1])
 8002be2:	4b78      	ldr	r3, [pc, #480]	; (8002dc4 <DecodeCmd+0x1e4>)
 8002be4:	785b      	ldrb	r3, [r3, #1]
 8002be6:	3b41      	subs	r3, #65	; 0x41
 8002be8:	2b0a      	cmp	r3, #10
 8002bea:	f200 80ea 	bhi.w	8002dc2 <DecodeCmd+0x1e2>
 8002bee:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002bf2:	000b      	.short	0x000b
 8002bf4:	00e800e8 	.word	0x00e800e8
 8002bf8:	00e800e8 	.word	0x00e800e8
 8002bfc:	00550014 	.word	0x00550014
 8002c00:	00e800e8 	.word	0x00e800e8
 8002c04:	007200e8 	.word	0x007200e8
		HAL_UART_Transmit(&huart1, (uint8_t*)txStudentNo, 13, 1000);
 8002c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0c:	220d      	movs	r2, #13
 8002c0e:	496e      	ldr	r1, [pc, #440]	; (8002dc8 <DecodeCmd+0x1e8>)
 8002c10:	6809      	ldr	r1, [r1, #0]
 8002c12:	486e      	ldr	r0, [pc, #440]	; (8002dcc <DecodeCmd+0x1ec>)
 8002c14:	f7ff fa47 	bl	80020a6 <HAL_UART_Transmit>
		break;
 8002c18:	bd70      	pop	{r4, r5, r6, pc}
		String2Int(cmdBuf+3, &tempSetpoint);
 8002c1a:	4c6d      	ldr	r4, [pc, #436]	; (8002dd0 <DecodeCmd+0x1f0>)
 8002c1c:	4621      	mov	r1, r4
 8002c1e:	486d      	ldr	r0, [pc, #436]	; (8002dd4 <DecodeCmd+0x1f4>)
 8002c20:	f7ff ff6e 	bl	8002b00 <String2Int>
		txBuf[0] = '$'; txBuf[1] = 'F';	txBuf[2] = '\r'; txBuf[3] = '\n';
 8002c24:	496c      	ldr	r1, [pc, #432]	; (8002dd8 <DecodeCmd+0x1f8>)
 8002c26:	2324      	movs	r3, #36	; 0x24
 8002c28:	700b      	strb	r3, [r1, #0]
 8002c2a:	2346      	movs	r3, #70	; 0x46
 8002c2c:	704b      	strb	r3, [r1, #1]
 8002c2e:	230d      	movs	r3, #13
 8002c30:	708b      	strb	r3, [r1, #2]
 8002c32:	230a      	movs	r3, #10
 8002c34:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8002c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	4863      	ldr	r0, [pc, #396]	; (8002dcc <DecodeCmd+0x1ec>)
 8002c3e:	f7ff fa32 	bl	80020a6 <HAL_UART_Transmit>
		charsL = Int2String(tempF, tempSetpoint, 4);
 8002c42:	2204      	movs	r2, #4
 8002c44:	f9b4 1000 	ldrsh.w	r1, [r4]
 8002c48:	4864      	ldr	r0, [pc, #400]	; (8002ddc <DecodeCmd+0x1fc>)
 8002c4a:	f7ff ff89 	bl	8002b60 <Int2String>
		while (k < charsL)
 8002c4e:	e018      	b.n	8002c82 <DecodeCmd+0xa2>
			for (i=0; i <10; i++)
 8002c50:	4a63      	ldr	r2, [pc, #396]	; (8002de0 <DecodeCmd+0x200>)
 8002c52:	6813      	ldr	r3, [r2, #0]
 8002c54:	3301      	adds	r3, #1
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	4b61      	ldr	r3, [pc, #388]	; (8002de0 <DecodeCmd+0x200>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b09      	cmp	r3, #9
 8002c5e:	dc0d      	bgt.n	8002c7c <DecodeCmd+0x9c>
				if (tempF[k] == (i+0x30))
 8002c60:	4a5e      	ldr	r2, [pc, #376]	; (8002ddc <DecodeCmd+0x1fc>)
 8002c62:	5d11      	ldrb	r1, [r2, r4]
 8002c64:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002c68:	4291      	cmp	r1, r2
 8002c6a:	d1f1      	bne.n	8002c50 <DecodeCmd+0x70>
					pinsValue[k] = numberMap[i];
 8002c6c:	4a5d      	ldr	r2, [pc, #372]	; (8002de4 <DecodeCmd+0x204>)
 8002c6e:	5cd2      	ldrb	r2, [r2, r3]
 8002c70:	4b5d      	ldr	r3, [pc, #372]	; (8002de8 <DecodeCmd+0x208>)
 8002c72:	551a      	strb	r2, [r3, r4]
					i = 10;
 8002c74:	220a      	movs	r2, #10
 8002c76:	4b5a      	ldr	r3, [pc, #360]	; (8002de0 <DecodeCmd+0x200>)
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e7e9      	b.n	8002c50 <DecodeCmd+0x70>
			k++;
 8002c7c:	3401      	adds	r4, #1
 8002c7e:	4b5b      	ldr	r3, [pc, #364]	; (8002dec <DecodeCmd+0x20c>)
 8002c80:	601c      	str	r4, [r3, #0]
		while (k < charsL)
 8002c82:	4b5a      	ldr	r3, [pc, #360]	; (8002dec <DecodeCmd+0x20c>)
 8002c84:	681c      	ldr	r4, [r3, #0]
 8002c86:	42a0      	cmp	r0, r4
 8002c88:	dd03      	ble.n	8002c92 <DecodeCmd+0xb2>
			for (i=0; i <10; i++)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	4b54      	ldr	r3, [pc, #336]	; (8002de0 <DecodeCmd+0x200>)
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e7e2      	b.n	8002c58 <DecodeCmd+0x78>
		k = 0;
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
		g_length = charsL;
 8002c96:	4b56      	ldr	r3, [pc, #344]	; (8002df0 <DecodeCmd+0x210>)
 8002c98:	7018      	strb	r0, [r3, #0]
		break;
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
		txBuf[0] = '$';	txBuf[1] = 'G';	txBuf[2] = ',';
 8002c9c:	4c4e      	ldr	r4, [pc, #312]	; (8002dd8 <DecodeCmd+0x1f8>)
 8002c9e:	2324      	movs	r3, #36	; 0x24
 8002ca0:	7023      	strb	r3, [r4, #0]
 8002ca2:	2347      	movs	r3, #71	; 0x47
 8002ca4:	7063      	strb	r3, [r4, #1]
 8002ca6:	232c      	movs	r3, #44	; 0x2c
 8002ca8:	70a3      	strb	r3, [r4, #2]
		charsL = Int2String(txBuf+3, tempSetpoint, 4);
 8002caa:	2204      	movs	r2, #4
 8002cac:	4b48      	ldr	r3, [pc, #288]	; (8002dd0 <DecodeCmd+0x1f0>)
 8002cae:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002cb2:	1ce0      	adds	r0, r4, #3
 8002cb4:	f7ff ff54 	bl	8002b60 <Int2String>
		txBuf[3 + charsL] = '\r'; txBuf[4 + charsL] = '\n';
 8002cb8:	1cc3      	adds	r3, r0, #3
 8002cba:	220d      	movs	r2, #13
 8002cbc:	54e2      	strb	r2, [r4, r3]
 8002cbe:	1d03      	adds	r3, r0, #4
 8002cc0:	220a      	movs	r2, #10
 8002cc2:	54e2      	strb	r2, [r4, r3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL+5, 1000);
 8002cc4:	1d42      	adds	r2, r0, #5
 8002cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cca:	b292      	uxth	r2, r2
 8002ccc:	4621      	mov	r1, r4
 8002cce:	483f      	ldr	r0, [pc, #252]	; (8002dcc <DecodeCmd+0x1ec>)
 8002cd0:	f7ff f9e9 	bl	80020a6 <HAL_UART_Transmit>
		break;
 8002cd4:	bd70      	pop	{r4, r5, r6, pc}
		txBuf[0] = '$'; txBuf[1] = 'K'; txBuf[2] = ',';
 8002cd6:	4d40      	ldr	r5, [pc, #256]	; (8002dd8 <DecodeCmd+0x1f8>)
 8002cd8:	2324      	movs	r3, #36	; 0x24
 8002cda:	702b      	strb	r3, [r5, #0]
 8002cdc:	234b      	movs	r3, #75	; 0x4b
 8002cde:	706b      	strb	r3, [r5, #1]
 8002ce0:	262c      	movs	r6, #44	; 0x2c
 8002ce2:	70ae      	strb	r6, [r5, #2]
		charsL += Int2String(txBuf+charsL, irms, 10);
 8002ce4:	220a      	movs	r2, #10
 8002ce6:	4b43      	ldr	r3, [pc, #268]	; (8002df4 <DecodeCmd+0x214>)
 8002ce8:	6819      	ldr	r1, [r3, #0]
 8002cea:	1ce8      	adds	r0, r5, #3
 8002cec:	f7ff ff38 	bl	8002b60 <Int2String>
 8002cf0:	1cc3      	adds	r3, r0, #3
 8002cf2:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8002cf4:	54ee      	strb	r6, [r5, r3]
 8002cf6:	3004      	adds	r0, #4
 8002cf8:	b2c4      	uxtb	r4, r0
		charsL += Int2String(txBuf+charsL, vrms, 10);
 8002cfa:	220a      	movs	r2, #10
 8002cfc:	4b3e      	ldr	r3, [pc, #248]	; (8002df8 <DecodeCmd+0x218>)
 8002cfe:	6819      	ldr	r1, [r3, #0]
 8002d00:	1928      	adds	r0, r5, r4
 8002d02:	f7ff ff2d 	bl	8002b60 <Int2String>
 8002d06:	1823      	adds	r3, r4, r0
 8002d08:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8002d0a:	54ee      	strb	r6, [r5, r3]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b2dc      	uxtb	r4, r3
		charsL += Int2String(txBuf+charsL, TempConv(ambientT), 10);    // temp ambient
 8002d10:	4b3a      	ldr	r3, [pc, #232]	; (8002dfc <DecodeCmd+0x21c>)
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	f7ff fee4 	bl	8002ae0 <TempConv>
 8002d18:	220a      	movs	r2, #10
 8002d1a:	4601      	mov	r1, r0
 8002d1c:	1928      	adds	r0, r5, r4
 8002d1e:	f7ff ff1f 	bl	8002b60 <Int2String>
 8002d22:	1823      	adds	r3, r4, r0
 8002d24:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8002d26:	54ee      	strb	r6, [r5, r3]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	b2dc      	uxtb	r4, r3
		charsL += Int2String(txBuf+charsL, TempConv(waterT), 10);    // temp water
 8002d2c:	4b34      	ldr	r3, [pc, #208]	; (8002e00 <DecodeCmd+0x220>)
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	f7ff fed6 	bl	8002ae0 <TempConv>
 8002d34:	220a      	movs	r2, #10
 8002d36:	4601      	mov	r1, r0
 8002d38:	1928      	adds	r0, r5, r4
 8002d3a:	f7ff ff11 	bl	8002b60 <Int2String>
 8002d3e:	1823      	adds	r3, r4, r0
 8002d40:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8002d42:	54ee      	strb	r6, [r5, r3]
 8002d44:	3301      	adds	r3, #1
 8002d46:	b2dc      	uxtb	r4, r3
		charsL += Int2String(txBuf+charsL, flowCounter*100, 10);    // flow totalFlow
 8002d48:	4b2e      	ldr	r3, [pc, #184]	; (8002e04 <DecodeCmd+0x224>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	220a      	movs	r2, #10
 8002d4e:	2164      	movs	r1, #100	; 0x64
 8002d50:	fb01 f103 	mul.w	r1, r1, r3
 8002d54:	1928      	adds	r0, r5, r4
 8002d56:	f7ff ff03 	bl	8002b60 <Int2String>
 8002d5a:	1823      	adds	r3, r4, r0
 8002d5c:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8002d5e:	54ee      	strb	r6, [r5, r3]
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	b2d2      	uxtb	r2, r2
		txBuf[charsL] = 'O'; charsL++;
 8002d64:	214f      	movs	r1, #79	; 0x4f
 8002d66:	54a9      	strb	r1, [r5, r2]
 8002d68:	1c9a      	adds	r2, r3, #2
 8002d6a:	b2d2      	uxtb	r2, r2
		txBuf[charsL] = 'F'; charsL++;
 8002d6c:	2046      	movs	r0, #70	; 0x46
 8002d6e:	54a8      	strb	r0, [r5, r2]
 8002d70:	1cda      	adds	r2, r3, #3
 8002d72:	b2d2      	uxtb	r2, r2
		txBuf[charsL] = 'F'; charsL++;
 8002d74:	54a8      	strb	r0, [r5, r2]
 8002d76:	1d1a      	adds	r2, r3, #4
 8002d78:	b2d2      	uxtb	r2, r2
		txBuf[charsL] = ','; charsL++;
 8002d7a:	54ae      	strb	r6, [r5, r2]
 8002d7c:	1d5a      	adds	r2, r3, #5
 8002d7e:	b2d2      	uxtb	r2, r2
		txBuf[charsL] = 'O'; charsL++;
 8002d80:	54a9      	strb	r1, [r5, r2]
 8002d82:	1d9a      	adds	r2, r3, #6
 8002d84:	b2d2      	uxtb	r2, r2
		txBuf[charsL] = 'P'; charsL++;
 8002d86:	2150      	movs	r1, #80	; 0x50
 8002d88:	54a9      	strb	r1, [r5, r2]
 8002d8a:	1dda      	adds	r2, r3, #7
 8002d8c:	b2d2      	uxtb	r2, r2
		txBuf[charsL] = 'E'; charsL++;
 8002d8e:	2145      	movs	r1, #69	; 0x45
 8002d90:	54a9      	strb	r1, [r5, r2]
 8002d92:	f103 0208 	add.w	r2, r3, #8
 8002d96:	b2d2      	uxtb	r2, r2
		txBuf[charsL] = 'N'; charsL++;
 8002d98:	214e      	movs	r1, #78	; 0x4e
 8002d9a:	54a9      	strb	r1, [r5, r2]
 8002d9c:	f103 0209 	add.w	r2, r3, #9
 8002da0:	b2d2      	uxtb	r2, r2
		txBuf[charsL] = '\r'; charsL++; txBuf[charsL] = '\n'; charsL++;
 8002da2:	210d      	movs	r1, #13
 8002da4:	54a9      	strb	r1, [r5, r2]
 8002da6:	f103 020a 	add.w	r2, r3, #10
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	210a      	movs	r1, #10
 8002dae:	54a9      	strb	r1, [r5, r2]
 8002db0:	f103 020b 	add.w	r2, r3, #11
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL, 1000);
 8002db4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	4629      	mov	r1, r5
 8002dbc:	4803      	ldr	r0, [pc, #12]	; (8002dcc <DecodeCmd+0x1ec>)
 8002dbe:	f7ff f972 	bl	80020a6 <HAL_UART_Transmit>
 8002dc2:	bd70      	pop	{r4, r5, r6, pc}
 8002dc4:	2000024c 	.word	0x2000024c
 8002dc8:	20000004 	.word	0x20000004
 8002dcc:	2000008c 	.word	0x2000008c
 8002dd0:	200001f4 	.word	0x200001f4
 8002dd4:	2000024f 	.word	0x2000024f
 8002dd8:	2000016c 	.word	0x2000016c
 8002ddc:	2000028c 	.word	0x2000028c
 8002de0:	20000028 	.word	0x20000028
 8002de4:	20000144 	.word	0x20000144
 8002de8:	20000280 	.word	0x20000280
 8002dec:	20000030 	.word	0x20000030
 8002df0:	20000024 	.word	0x20000024
 8002df4:	20000248 	.word	0x20000248
 8002df8:	200002b4 	.word	0x200002b4
 8002dfc:	20000140 	.word	0x20000140
 8002e00:	200002c4 	.word	0x200002c4
 8002e04:	200002a8 	.word	0x200002a8

08002e08 <writeToPins>:
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET); //f
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET); //g
}

void writeToPins(uint8_t segments[], uint8_t pins[], int segmentsL)
{
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	460c      	mov	r4, r1

	if(in == segmentsL)
 8002e0c:	4b8c      	ldr	r3, [pc, #560]	; (8003040 <writeToPins+0x238>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00d      	beq.n	8002e30 <writeToPins+0x28>
	{
		in = 0;
	}
	else
	{
		in++;
 8002e14:	3301      	adds	r3, #1
 8002e16:	4a8a      	ldr	r2, [pc, #552]	; (8003040 <writeToPins+0x238>)
 8002e18:	7013      	strb	r3, [r2, #0]
	}

	switch(in)
 8002e1a:	4b89      	ldr	r3, [pc, #548]	; (8003040 <writeToPins+0x238>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d833      	bhi.n	8002e8c <writeToPins+0x84>
 8002e24:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002e28:	008a0008 	.word	0x008a0008
 8002e2c:	00e000b5 	.word	0x00e000b5
		in = 0;
 8002e30:	2200      	movs	r2, #0
 8002e32:	4b83      	ldr	r3, [pc, #524]	; (8003040 <writeToPins+0x238>)
 8002e34:	701a      	strb	r2, [r3, #0]
 8002e36:	e7f0      	b.n	8002e1a <writeToPins+0x12>
	{
	case 1 :
	{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segements[0] >> 0) & 0b00000001)); //1
 8002e38:	4e82      	ldr	r6, [pc, #520]	; (8003044 <writeToPins+0x23c>)
 8002e3a:	7832      	ldrb	r2, [r6, #0]
 8002e3c:	f082 0201 	eor.w	r2, r2, #1
 8002e40:	4d81      	ldr	r5, [pc, #516]	; (8003048 <writeToPins+0x240>)
 8002e42:	f002 0201 	and.w	r2, r2, #1
 8002e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	f7fd ffdd 	bl	8000e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segements[0] >> 1) & 0b00000001)); //2
 8002e50:	7832      	ldrb	r2, [r6, #0]
 8002e52:	0852      	lsrs	r2, r2, #1
 8002e54:	f082 0201 	eor.w	r2, r2, #1
 8002e58:	f002 0201 	and.w	r2, r2, #1
 8002e5c:	2110      	movs	r1, #16
 8002e5e:	4628      	mov	r0, r5
 8002e60:	f7fd ffd3 	bl	8000e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segements[0] >> 2) & 0b00000001)); //3
 8002e64:	7832      	ldrb	r2, [r6, #0]
 8002e66:	0892      	lsrs	r2, r2, #2
 8002e68:	f082 0201 	eor.w	r2, r2, #1
 8002e6c:	f002 0201 	and.w	r2, r2, #1
 8002e70:	2120      	movs	r1, #32
 8002e72:	4628      	mov	r0, r5
 8002e74:	f7fd ffc9 	bl	8000e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segements[0] >> 3) & 0b00000001)); //4
 8002e78:	7832      	ldrb	r2, [r6, #0]
 8002e7a:	08d2      	lsrs	r2, r2, #3
 8002e7c:	f082 0201 	eor.w	r2, r2, #1
 8002e80:	f002 0201 	and.w	r2, r2, #1
 8002e84:	2108      	movs	r1, #8
 8002e86:	4628      	mov	r0, r5
 8002e88:	f7fd ffbf 	bl	8000e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segements[3] >> 3) & 0b00000001)); //4
	}
	break;
	}

	i = (int)(in - 1);
 8002e8c:	4b6c      	ldr	r3, [pc, #432]	; (8003040 <writeToPins+0x238>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	3b01      	subs	r3, #1
 8002e92:	4d6e      	ldr	r5, [pc, #440]	; (800304c <writeToPins+0x244>)
 8002e94:	602b      	str	r3, [r5, #0]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, (~(pins[i] >> 0) & 0b00000001)); //a
 8002e96:	5ce2      	ldrb	r2, [r4, r3]
 8002e98:	f082 0201 	eor.w	r2, r2, #1
 8002e9c:	f002 0201 	and.w	r2, r2, #1
 8002ea0:	2120      	movs	r1, #32
 8002ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ea6:	f7fd ffb0 	bl	8000e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6, (~(pins[i] >> 1) & 0b00000001)); //b
 8002eaa:	682b      	ldr	r3, [r5, #0]
 8002eac:	5ce2      	ldrb	r2, [r4, r3]
 8002eae:	0852      	lsrs	r2, r2, #1
 8002eb0:	f082 0201 	eor.w	r2, r2, #1
 8002eb4:	f002 0201 	and.w	r2, r2, #1
 8002eb8:	2140      	movs	r1, #64	; 0x40
 8002eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ebe:	f7fd ffa4 	bl	8000e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, (~(pins[i] >> 2) & 0b00000001)); //c
 8002ec2:	682b      	ldr	r3, [r5, #0]
 8002ec4:	5ce2      	ldrb	r2, [r4, r3]
 8002ec6:	0892      	lsrs	r2, r2, #2
 8002ec8:	f082 0201 	eor.w	r2, r2, #1
 8002ecc:	f002 0201 	and.w	r2, r2, #1
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ed6:	f7fd ff98 	bl	8000e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6, (~(pins[i] >> 3) & 0b00000001)); //d
 8002eda:	682b      	ldr	r3, [r5, #0]
 8002edc:	5ce2      	ldrb	r2, [r4, r3]
 8002ede:	08d2      	lsrs	r2, r2, #3
 8002ee0:	f082 0201 	eor.w	r2, r2, #1
 8002ee4:	f002 0201 	and.w	r2, r2, #1
 8002ee8:	2140      	movs	r1, #64	; 0x40
 8002eea:	4857      	ldr	r0, [pc, #348]	; (8003048 <writeToPins+0x240>)
 8002eec:	f7fd ff8d 	bl	8000e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7, (~(pins[i] >> 4) & 0b00000001)); //e
 8002ef0:	682b      	ldr	r3, [r5, #0]
 8002ef2:	5ce2      	ldrb	r2, [r4, r3]
 8002ef4:	0912      	lsrs	r2, r2, #4
 8002ef6:	f082 0201 	eor.w	r2, r2, #1
 8002efa:	f002 0201 	and.w	r2, r2, #1
 8002efe:	2180      	movs	r1, #128	; 0x80
 8002f00:	4853      	ldr	r0, [pc, #332]	; (8003050 <writeToPins+0x248>)
 8002f02:	f7fd ff82 	bl	8000e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, (~(pins[i] >> 5) & 0b00000001)); //f
 8002f06:	682b      	ldr	r3, [r5, #0]
 8002f08:	5ce2      	ldrb	r2, [r4, r3]
 8002f0a:	0952      	lsrs	r2, r2, #5
 8002f0c:	f082 0201 	eor.w	r2, r2, #1
 8002f10:	f002 0201 	and.w	r2, r2, #1
 8002f14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f1c:	f7fd ff75 	bl	8000e0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, (~(pins[i] >> 6) & 0b00000001)); //g
 8002f20:	682b      	ldr	r3, [r5, #0]
 8002f22:	5ce2      	ldrb	r2, [r4, r3]
 8002f24:	0992      	lsrs	r2, r2, #6
 8002f26:	f082 0201 	eor.w	r2, r2, #1
 8002f2a:	f002 0201 	and.w	r2, r2, #1
 8002f2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f36:	f7fd ff68 	bl	8000e0a <HAL_GPIO_WritePin>
 8002f3a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segements[1] >> 0) & 0b00000001)); //1
 8002f3c:	4e41      	ldr	r6, [pc, #260]	; (8003044 <writeToPins+0x23c>)
 8002f3e:	7872      	ldrb	r2, [r6, #1]
 8002f40:	f082 0201 	eor.w	r2, r2, #1
 8002f44:	4d40      	ldr	r5, [pc, #256]	; (8003048 <writeToPins+0x240>)
 8002f46:	f002 0201 	and.w	r2, r2, #1
 8002f4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f4e:	4628      	mov	r0, r5
 8002f50:	f7fd ff5b 	bl	8000e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segements[1] >> 1) & 0b00000001)); //2
 8002f54:	7872      	ldrb	r2, [r6, #1]
 8002f56:	0852      	lsrs	r2, r2, #1
 8002f58:	f082 0201 	eor.w	r2, r2, #1
 8002f5c:	f002 0201 	and.w	r2, r2, #1
 8002f60:	2110      	movs	r1, #16
 8002f62:	4628      	mov	r0, r5
 8002f64:	f7fd ff51 	bl	8000e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segements[1] >> 2) & 0b00000001)); //3
 8002f68:	7872      	ldrb	r2, [r6, #1]
 8002f6a:	0892      	lsrs	r2, r2, #2
 8002f6c:	f082 0201 	eor.w	r2, r2, #1
 8002f70:	f002 0201 	and.w	r2, r2, #1
 8002f74:	2120      	movs	r1, #32
 8002f76:	4628      	mov	r0, r5
 8002f78:	f7fd ff47 	bl	8000e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segements[1] >> 3) & 0b00000001)); //4
 8002f7c:	7872      	ldrb	r2, [r6, #1]
 8002f7e:	08d2      	lsrs	r2, r2, #3
 8002f80:	f082 0201 	eor.w	r2, r2, #1
 8002f84:	f002 0201 	and.w	r2, r2, #1
 8002f88:	2108      	movs	r1, #8
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	f7fd ff3d 	bl	8000e0a <HAL_GPIO_WritePin>
	break;
 8002f90:	e77c      	b.n	8002e8c <writeToPins+0x84>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segements[2] >> 0) & 0b00000001)); //1
 8002f92:	4e2c      	ldr	r6, [pc, #176]	; (8003044 <writeToPins+0x23c>)
 8002f94:	78b2      	ldrb	r2, [r6, #2]
 8002f96:	f082 0201 	eor.w	r2, r2, #1
 8002f9a:	4d2b      	ldr	r5, [pc, #172]	; (8003048 <writeToPins+0x240>)
 8002f9c:	f002 0201 	and.w	r2, r2, #1
 8002fa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	f7fd ff30 	bl	8000e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segements[2] >> 1) & 0b00000001)); //2
 8002faa:	78b2      	ldrb	r2, [r6, #2]
 8002fac:	0852      	lsrs	r2, r2, #1
 8002fae:	f082 0201 	eor.w	r2, r2, #1
 8002fb2:	f002 0201 	and.w	r2, r2, #1
 8002fb6:	2110      	movs	r1, #16
 8002fb8:	4628      	mov	r0, r5
 8002fba:	f7fd ff26 	bl	8000e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segements[2] >> 2) & 0b00000001)); //3
 8002fbe:	78b2      	ldrb	r2, [r6, #2]
 8002fc0:	0892      	lsrs	r2, r2, #2
 8002fc2:	f082 0201 	eor.w	r2, r2, #1
 8002fc6:	f002 0201 	and.w	r2, r2, #1
 8002fca:	2120      	movs	r1, #32
 8002fcc:	4628      	mov	r0, r5
 8002fce:	f7fd ff1c 	bl	8000e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segements[2] >> 3) & 0b00000001)); //4
 8002fd2:	78b2      	ldrb	r2, [r6, #2]
 8002fd4:	08d2      	lsrs	r2, r2, #3
 8002fd6:	f082 0201 	eor.w	r2, r2, #1
 8002fda:	f002 0201 	and.w	r2, r2, #1
 8002fde:	2108      	movs	r1, #8
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	f7fd ff12 	bl	8000e0a <HAL_GPIO_WritePin>
	break;
 8002fe6:	e751      	b.n	8002e8c <writeToPins+0x84>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segements[3] >> 0) & 0b00000001)); //1
 8002fe8:	4e16      	ldr	r6, [pc, #88]	; (8003044 <writeToPins+0x23c>)
 8002fea:	78f2      	ldrb	r2, [r6, #3]
 8002fec:	f082 0201 	eor.w	r2, r2, #1
 8002ff0:	4d15      	ldr	r5, [pc, #84]	; (8003048 <writeToPins+0x240>)
 8002ff2:	f002 0201 	and.w	r2, r2, #1
 8002ff6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ffa:	4628      	mov	r0, r5
 8002ffc:	f7fd ff05 	bl	8000e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segements[3] >> 1) & 0b00000001)); //2
 8003000:	78f2      	ldrb	r2, [r6, #3]
 8003002:	0852      	lsrs	r2, r2, #1
 8003004:	f082 0201 	eor.w	r2, r2, #1
 8003008:	f002 0201 	and.w	r2, r2, #1
 800300c:	2110      	movs	r1, #16
 800300e:	4628      	mov	r0, r5
 8003010:	f7fd fefb 	bl	8000e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segements[3] >> 2) & 0b00000001)); //3
 8003014:	78f2      	ldrb	r2, [r6, #3]
 8003016:	0892      	lsrs	r2, r2, #2
 8003018:	f082 0201 	eor.w	r2, r2, #1
 800301c:	f002 0201 	and.w	r2, r2, #1
 8003020:	2120      	movs	r1, #32
 8003022:	4628      	mov	r0, r5
 8003024:	f7fd fef1 	bl	8000e0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segements[3] >> 3) & 0b00000001)); //4
 8003028:	78f2      	ldrb	r2, [r6, #3]
 800302a:	08d2      	lsrs	r2, r2, #3
 800302c:	f082 0201 	eor.w	r2, r2, #1
 8003030:	f002 0201 	and.w	r2, r2, #1
 8003034:	2108      	movs	r1, #8
 8003036:	4628      	mov	r0, r5
 8003038:	f7fd fee7 	bl	8000e0a <HAL_GPIO_WritePin>
	break;
 800303c:	e726      	b.n	8002e8c <writeToPins+0x84>
 800303e:	bf00      	nop
 8003040:	2000002c 	.word	0x2000002c
 8003044:	2000015c 	.word	0x2000015c
 8003048:	48000400 	.word	0x48000400
 800304c:	20000028 	.word	0x20000028
 8003050:	48000800 	.word	0x48000800

08003054 <User>:
{
 8003054:	b530      	push	{r4, r5, lr}
 8003056:	b087      	sub	sp, #28
	if (uartRxFlag)
 8003058:	4b71      	ldr	r3, [pc, #452]	; (8003220 <User+0x1cc>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	b1e3      	cbz	r3, 8003098 <User+0x44>
		if (uartRxChar == '$')
 800305e:	4b71      	ldr	r3, [pc, #452]	; (8003224 <User+0x1d0>)
 8003060:	781a      	ldrb	r2, [r3, #0]
 8003062:	2a24      	cmp	r2, #36	; 0x24
 8003064:	d042      	beq.n	80030ec <User+0x98>
		if (cmdBufPos < cmdBufL)
 8003066:	4b70      	ldr	r3, [pc, #448]	; (8003228 <User+0x1d4>)
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	2b31      	cmp	r3, #49	; 0x31
 800306c:	d804      	bhi.n	8003078 <User+0x24>
			cmdBuf[cmdBufPos++] = uartRxChar;
 800306e:	1c58      	adds	r0, r3, #1
 8003070:	496d      	ldr	r1, [pc, #436]	; (8003228 <User+0x1d4>)
 8003072:	8008      	strh	r0, [r1, #0]
 8003074:	496d      	ldr	r1, [pc, #436]	; (800322c <User+0x1d8>)
 8003076:	54ca      	strb	r2, [r1, r3]
		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 8003078:	4b6b      	ldr	r3, [pc, #428]	; (8003228 <User+0x1d4>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d903      	bls.n	8003088 <User+0x34>
 8003080:	4a6a      	ldr	r2, [pc, #424]	; (800322c <User+0x1d8>)
 8003082:	7812      	ldrb	r2, [r2, #0]
 8003084:	2a24      	cmp	r2, #36	; 0x24
 8003086:	d035      	beq.n	80030f4 <User+0xa0>
		uartRxFlag = false;  // clear the flag - the 'receive character' event has been handled.
 8003088:	2200      	movs	r2, #0
 800308a:	4b65      	ldr	r3, [pc, #404]	; (8003220 <User+0x1cc>)
 800308c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 800308e:	2201      	movs	r2, #1
 8003090:	4964      	ldr	r1, [pc, #400]	; (8003224 <User+0x1d0>)
 8003092:	4867      	ldr	r0, [pc, #412]	; (8003230 <User+0x1dc>)
 8003094:	f7fe fe33 	bl	8001cfe <HAL_UART_Receive_IT>
	if(adcFlag == 1U)
 8003098:	4b66      	ldr	r3, [pc, #408]	; (8003234 <User+0x1e0>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d069      	beq.n	8003174 <User+0x120>
		if (adcchan == 0)
 80030a0:	4b65      	ldr	r3, [pc, #404]	; (8003238 <User+0x1e4>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d034      	beq.n	8003112 <User+0xbe>
		else if (adcchan == 1)
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d03b      	beq.n	8003124 <User+0xd0>
		else if (adcchan == 2)
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d042      	beq.n	8003136 <User+0xe2>
		else if (adcchan == 3)
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d046      	beq.n	8003142 <User+0xee>
		adcchan++;
 80030b4:	4a60      	ldr	r2, [pc, #384]	; (8003238 <User+0x1e4>)
 80030b6:	7813      	ldrb	r3, [r2, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	7013      	strb	r3, [r2, #0]
		if (adcchan >= 4)
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d90c      	bls.n	80030dc <User+0x88>
			adcchan = 0;
 80030c2:	2200      	movs	r2, #0
 80030c4:	4b5c      	ldr	r3, [pc, #368]	; (8003238 <User+0x1e4>)
 80030c6:	701a      	strb	r2, [r3, #0]
			samplectr++;
 80030c8:	4a5c      	ldr	r2, [pc, #368]	; (800323c <User+0x1e8>)
 80030ca:	7813      	ldrb	r3, [r2, #0]
 80030cc:	3301      	adds	r3, #1
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	7013      	strb	r3, [r2, #0]
			if (samplectr >= RMS_WINDOW)
 80030d2:	2b27      	cmp	r3, #39	; 0x27
 80030d4:	d902      	bls.n	80030dc <User+0x88>
				samplectr = 0;
 80030d6:	2200      	movs	r2, #0
 80030d8:	4b58      	ldr	r3, [pc, #352]	; (800323c <User+0x1e8>)
 80030da:	701a      	strb	r2, [r3, #0]
		switch (adcchan)
 80030dc:	4b56      	ldr	r3, [pc, #344]	; (8003238 <User+0x1e4>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d836      	bhi.n	8003152 <User+0xfe>
 80030e4:	e8df f003 	tbb	[pc, r3]
 80030e8:	7d7a7733 	.word	0x7d7a7733
			cmdBufPos = 0;
 80030ec:	2100      	movs	r1, #0
 80030ee:	4b4e      	ldr	r3, [pc, #312]	; (8003228 <User+0x1d4>)
 80030f0:	8019      	strh	r1, [r3, #0]
 80030f2:	e7b8      	b.n	8003066 <User+0x12>
		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 80030f4:	1e9a      	subs	r2, r3, #2
 80030f6:	494d      	ldr	r1, [pc, #308]	; (800322c <User+0x1d8>)
 80030f8:	5c8a      	ldrb	r2, [r1, r2]
 80030fa:	2a0d      	cmp	r2, #13
 80030fc:	d1c4      	bne.n	8003088 <User+0x34>
 80030fe:	3b01      	subs	r3, #1
 8003100:	5ccb      	ldrb	r3, [r1, r3]
 8003102:	2b0a      	cmp	r3, #10
 8003104:	d1c0      	bne.n	8003088 <User+0x34>
			DecodeCmd();
 8003106:	f7ff fd6b 	bl	8002be0 <DecodeCmd>
			cmdBufPos = 0;	// clear buffer
 800310a:	2200      	movs	r2, #0
 800310c:	4b46      	ldr	r3, [pc, #280]	; (8003228 <User+0x1d4>)
 800310e:	801a      	strh	r2, [r3, #0]
 8003110:	e7ba      	b.n	8003088 <User+0x34>
			vsample[samplectr] = HAL_ADC_GetValue(&hadc1);
 8003112:	4b4a      	ldr	r3, [pc, #296]	; (800323c <User+0x1e8>)
 8003114:	781c      	ldrb	r4, [r3, #0]
 8003116:	484a      	ldr	r0, [pc, #296]	; (8003240 <User+0x1ec>)
 8003118:	f7fd faa2 	bl	8000660 <HAL_ADC_GetValue>
 800311c:	4b49      	ldr	r3, [pc, #292]	; (8003244 <User+0x1f0>)
 800311e:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 8003122:	e7c7      	b.n	80030b4 <User+0x60>
			isample[samplectr] = HAL_ADC_GetValue(&hadc1);
 8003124:	4b45      	ldr	r3, [pc, #276]	; (800323c <User+0x1e8>)
 8003126:	781c      	ldrb	r4, [r3, #0]
 8003128:	4845      	ldr	r0, [pc, #276]	; (8003240 <User+0x1ec>)
 800312a:	f7fd fa99 	bl	8000660 <HAL_ADC_GetValue>
 800312e:	4b46      	ldr	r3, [pc, #280]	; (8003248 <User+0x1f4>)
 8003130:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 8003134:	e7be      	b.n	80030b4 <User+0x60>
			ambientT = HAL_ADC_GetValue(&hadc1);
 8003136:	4842      	ldr	r0, [pc, #264]	; (8003240 <User+0x1ec>)
 8003138:	f7fd fa92 	bl	8000660 <HAL_ADC_GetValue>
 800313c:	4b43      	ldr	r3, [pc, #268]	; (800324c <User+0x1f8>)
 800313e:	6018      	str	r0, [r3, #0]
 8003140:	e7b8      	b.n	80030b4 <User+0x60>
			waterT = HAL_ADC_GetValue(&hadc1);
 8003142:	483f      	ldr	r0, [pc, #252]	; (8003240 <User+0x1ec>)
 8003144:	f7fd fa8c 	bl	8000660 <HAL_ADC_GetValue>
 8003148:	4b41      	ldr	r3, [pc, #260]	; (8003250 <User+0x1fc>)
 800314a:	6018      	str	r0, [r3, #0]
 800314c:	e7b2      	b.n	80030b4 <User+0x60>
		case 0: chdef.Channel = ADC_CHANNEL_12; break;  //V				//PB1
 800314e:	230c      	movs	r3, #12
 8003150:	9300      	str	r3, [sp, #0]
		chdef.Rank = 1;
 8003152:	2301      	movs	r3, #1
 8003154:	9301      	str	r3, [sp, #4]
		chdef.SingleDiff = ADC_SINGLE_ENDED;
 8003156:	2400      	movs	r4, #0
 8003158:	9403      	str	r4, [sp, #12]
		chdef.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800315a:	9402      	str	r4, [sp, #8]
		chdef.OffsetNumber = ADC_OFFSET_NONE;
 800315c:	9404      	str	r4, [sp, #16]
		chdef.Offset = 0;
 800315e:	9405      	str	r4, [sp, #20]
		HAL_ADC_ConfigChannel(&hadc1, &chdef);
 8003160:	4d37      	ldr	r5, [pc, #220]	; (8003240 <User+0x1ec>)
 8003162:	4669      	mov	r1, sp
 8003164:	4628      	mov	r0, r5
 8003166:	f7fd fa7f 	bl	8000668 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 800316a:	4628      	mov	r0, r5
 800316c:	f7fd f9f6 	bl	800055c <HAL_ADC_Start>
		adcFlag = 0;
 8003170:	4b30      	ldr	r3, [pc, #192]	; (8003234 <User+0x1e0>)
 8003172:	701c      	strb	r4, [r3, #0]
	if (flowFlag != lastFlowFlag)
 8003174:	4b37      	ldr	r3, [pc, #220]	; (8003254 <User+0x200>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	b2db      	uxtb	r3, r3
 800317a:	4a37      	ldr	r2, [pc, #220]	; (8003258 <User+0x204>)
 800317c:	7812      	ldrb	r2, [r2, #0]
 800317e:	4293      	cmp	r3, r2
 8003180:	d032      	beq.n	80031e8 <User+0x194>
		ms5Counter = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	4a35      	ldr	r2, [pc, #212]	; (800325c <User+0x208>)
 8003186:	7013      	strb	r3, [r2, #0]
		ms5Flag = 0;
 8003188:	4a35      	ldr	r2, [pc, #212]	; (8003260 <User+0x20c>)
 800318a:	7013      	strb	r3, [r2, #0]
		flowPulse = 0;
 800318c:	4a35      	ldr	r2, [pc, #212]	; (8003264 <User+0x210>)
 800318e:	7013      	strb	r3, [r2, #0]
	lastFlowFlag = flowFlag;
 8003190:	4b30      	ldr	r3, [pc, #192]	; (8003254 <User+0x200>)
 8003192:	781a      	ldrb	r2, [r3, #0]
 8003194:	4b30      	ldr	r3, [pc, #192]	; (8003258 <User+0x204>)
 8003196:	701a      	strb	r2, [r3, #0]
	uint32_t tick = HAL_GetTick();
 8003198:	f7fd f846 	bl	8000228 <HAL_GetTick>
	if (tick != lasttick)
 800319c:	4b32      	ldr	r3, [pc, #200]	; (8003268 <User+0x214>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4298      	cmp	r0, r3
 80031a2:	d016      	beq.n	80031d2 <User+0x17e>
		lasttick = tick;
 80031a4:	4b30      	ldr	r3, [pc, #192]	; (8003268 <User+0x214>)
 80031a6:	6018      	str	r0, [r3, #0]
		ms5Counter++;
 80031a8:	4a2c      	ldr	r2, [pc, #176]	; (800325c <User+0x208>)
 80031aa:	7813      	ldrb	r3, [r2, #0]
 80031ac:	3301      	adds	r3, #1
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	7013      	strb	r3, [r2, #0]
		if (ms5Counter >= 5)
 80031b2:	7813      	ldrb	r3, [r2, #0]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d905      	bls.n	80031c6 <User+0x172>
			ms5Counter = 0;
 80031ba:	2200      	movs	r2, #0
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <User+0x208>)
 80031be:	701a      	strb	r2, [r3, #0]
			ms5Flag = 1;
 80031c0:	2201      	movs	r2, #1
 80031c2:	4b27      	ldr	r3, [pc, #156]	; (8003260 <User+0x20c>)
 80031c4:	701a      	strb	r2, [r3, #0]
		writeToPins(segements, pinsValue, g_length);
 80031c6:	4b29      	ldr	r3, [pc, #164]	; (800326c <User+0x218>)
 80031c8:	781a      	ldrb	r2, [r3, #0]
 80031ca:	4929      	ldr	r1, [pc, #164]	; (8003270 <User+0x21c>)
 80031cc:	4829      	ldr	r0, [pc, #164]	; (8003274 <User+0x220>)
 80031ce:	f7ff fe1b 	bl	8002e08 <writeToPins>
}
 80031d2:	b007      	add	sp, #28
 80031d4:	bd30      	pop	{r4, r5, pc}
		case 1: chdef.Channel = ADC_CHANNEL_13; break;  //I				//PB13
 80031d6:	230d      	movs	r3, #13
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	e7ba      	b.n	8003152 <User+0xfe>
		case 2: chdef.Channel = ADC_CHANNEL_8; break; //temp ambient	//PC2
 80031dc:	2308      	movs	r3, #8
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	e7b7      	b.n	8003152 <User+0xfe>
		case 3: chdef.Channel = ADC_CHANNEL_9; break; //temp water		//PC3
 80031e2:	2309      	movs	r3, #9
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	e7b4      	b.n	8003152 <User+0xfe>
	else if (flowFlag == lastFlowFlag && ms5Flag == 1)
 80031e8:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <User+0x200>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d1ce      	bne.n	8003190 <User+0x13c>
 80031f2:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <User+0x20c>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0ca      	beq.n	8003190 <User+0x13c>
		flowPulse++;
 80031fa:	4a1a      	ldr	r2, [pc, #104]	; (8003264 <User+0x210>)
 80031fc:	7813      	ldrb	r3, [r2, #0]
 80031fe:	3301      	adds	r3, #1
 8003200:	b2db      	uxtb	r3, r3
 8003202:	7013      	strb	r3, [r2, #0]
		if (flowPulse == 1)
 8003204:	2b01      	cmp	r3, #1
 8003206:	d1c3      	bne.n	8003190 <User+0x13c>
			flowCounter++;
 8003208:	4a1b      	ldr	r2, [pc, #108]	; (8003278 <User+0x224>)
 800320a:	8813      	ldrh	r3, [r2, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	b29b      	uxth	r3, r3
 8003210:	8013      	strh	r3, [r2, #0]
			totalFlow = flowCounter*100;
 8003212:	2264      	movs	r2, #100	; 0x64
 8003214:	fb02 f303 	mul.w	r3, r2, r3
 8003218:	4a18      	ldr	r2, [pc, #96]	; (800327c <User+0x228>)
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	e7b8      	b.n	8003190 <User+0x13c>
 800321e:	bf00      	nop
 8003220:	200002aa 	.word	0x200002aa
 8003224:	200001f6 	.word	0x200001f6
 8003228:	200002c8 	.word	0x200002c8
 800322c:	2000024c 	.word	0x2000024c
 8003230:	2000008c 	.word	0x2000008c
 8003234:	200002ca 	.word	0x200002ca
 8003238:	2000027e 	.word	0x2000027e
 800323c:	20000164 	.word	0x20000164
 8003240:	20000038 	.word	0x20000038
 8003244:	200001a0 	.word	0x200001a0
 8003248:	200001f8 	.word	0x200001f8
 800324c:	20000140 	.word	0x20000140
 8003250:	200002c4 	.word	0x200002c4
 8003254:	200002a0 	.word	0x200002a0
 8003258:	200002b0 	.word	0x200002b0
 800325c:	2000027f 	.word	0x2000027f
 8003260:	20000154 	.word	0x20000154
 8003264:	20000294 	.word	0x20000294
 8003268:	20000168 	.word	0x20000168
 800326c:	20000024 	.word	0x20000024
 8003270:	20000280 	.word	0x20000280
 8003274:	2000015c 	.word	0x2000015c
 8003278:	200002a8 	.word	0x200002a8
 800327c:	200002c0 	.word	0x200002c0

08003280 <HAL_UART_RxCpltCallback>:
// This function will execute whenever a character is received from the UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
	// the interrupt handler will automatically put the received character in the uartRXChar variable (no need to write any code for that).
	// so all we do it set flag to indicate character was received, and then process the received character further in the main loop
	uartRxFlag = true;
 8003280:	2201      	movs	r2, #1
 8003282:	4b01      	ldr	r3, [pc, #4]	; (8003288 <HAL_UART_RxCpltCallback+0x8>)
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	4770      	bx	lr
 8003288:	200002aa 	.word	0x200002aa

0800328c <HAL_TIM_PeriodElapsedCallback>:
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //every 250 ns
{
 800328c:	b508      	push	{r3, lr}
	if (htim == &htim2)
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003290:	4283      	cmp	r3, r0
 8003292:	d009      	beq.n	80032a8 <HAL_TIM_PeriodElapsedCallback+0x1c>
		adcFlag = true;

	flowFlag = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8003294:	2101      	movs	r1, #1
 8003296:	4807      	ldr	r0, [pc, #28]	; (80032b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003298:	f7fd fdb0 	bl	8000dfc <HAL_GPIO_ReadPin>
 800329c:	3000      	adds	r0, #0
 800329e:	bf18      	it	ne
 80032a0:	2001      	movne	r0, #1
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80032a4:	7018      	strb	r0, [r3, #0]
 80032a6:	bd08      	pop	{r3, pc}
		adcFlag = true;
 80032a8:	2201      	movs	r2, #1
 80032aa:	4b04      	ldr	r3, [pc, #16]	; (80032bc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80032ac:	701a      	strb	r2, [r3, #0]
 80032ae:	e7f1      	b.n	8003294 <HAL_TIM_PeriodElapsedCallback+0x8>
 80032b0:	200000fc 	.word	0x200000fc
 80032b4:	48000400 	.word	0x48000400
 80032b8:	200002a0 	.word	0x200002a0
 80032bc:	200002ca 	.word	0x200002ca

080032c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80032c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80032c6:	e003      	b.n	80032d0 <LoopCopyDataInit>

080032c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80032ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80032cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80032ce:	3104      	adds	r1, #4

080032d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80032d0:	480b      	ldr	r0, [pc, #44]	; (8003300 <LoopForever+0xa>)
	ldr	r3, =_edata
 80032d2:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <LoopForever+0xe>)
	adds	r2, r0, r1
 80032d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80032d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80032d8:	d3f6      	bcc.n	80032c8 <CopyDataInit>
	ldr	r2, =_sbss
 80032da:	4a0b      	ldr	r2, [pc, #44]	; (8003308 <LoopForever+0x12>)
	b	LoopFillZerobss
 80032dc:	e002      	b.n	80032e4 <LoopFillZerobss>

080032de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80032de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80032e0:	f842 3b04 	str.w	r3, [r2], #4

080032e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <LoopForever+0x16>)
	cmp	r2, r3
 80032e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80032e8:	d3f9      	bcc.n	80032de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032ea:	f7ff fb61 	bl	80029b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032ee:	f000 f811 	bl	8003314 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032f2:	f7ff fa75 	bl	80027e0 <main>

080032f6 <LoopForever>:

LoopForever:
    b LoopForever
 80032f6:	e7fe      	b.n	80032f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032f8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80032fc:	080033d4 	.word	0x080033d4
	ldr	r0, =_sdata
 8003300:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003304:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8003308:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 800330c:	200002cc 	.word	0x200002cc

08003310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003310:	e7fe      	b.n	8003310 <ADC1_2_IRQHandler>
	...

08003314 <__libc_init_array>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	4e0d      	ldr	r6, [pc, #52]	; (800334c <__libc_init_array+0x38>)
 8003318:	4c0d      	ldr	r4, [pc, #52]	; (8003350 <__libc_init_array+0x3c>)
 800331a:	1ba4      	subs	r4, r4, r6
 800331c:	10a4      	asrs	r4, r4, #2
 800331e:	2500      	movs	r5, #0
 8003320:	42a5      	cmp	r5, r4
 8003322:	d109      	bne.n	8003338 <__libc_init_array+0x24>
 8003324:	4e0b      	ldr	r6, [pc, #44]	; (8003354 <__libc_init_array+0x40>)
 8003326:	4c0c      	ldr	r4, [pc, #48]	; (8003358 <__libc_init_array+0x44>)
 8003328:	f000 f818 	bl	800335c <_init>
 800332c:	1ba4      	subs	r4, r4, r6
 800332e:	10a4      	asrs	r4, r4, #2
 8003330:	2500      	movs	r5, #0
 8003332:	42a5      	cmp	r5, r4
 8003334:	d105      	bne.n	8003342 <__libc_init_array+0x2e>
 8003336:	bd70      	pop	{r4, r5, r6, pc}
 8003338:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800333c:	4798      	blx	r3
 800333e:	3501      	adds	r5, #1
 8003340:	e7ee      	b.n	8003320 <__libc_init_array+0xc>
 8003342:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003346:	4798      	blx	r3
 8003348:	3501      	adds	r5, #1
 800334a:	e7f2      	b.n	8003332 <__libc_init_array+0x1e>
 800334c:	080033cc 	.word	0x080033cc
 8003350:	080033cc 	.word	0x080033cc
 8003354:	080033cc 	.word	0x080033cc
 8003358:	080033d0 	.word	0x080033d0

0800335c <_init>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr

08003368 <_fini>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr
