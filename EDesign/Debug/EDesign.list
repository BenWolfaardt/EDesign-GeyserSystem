
E:\EDesign\V1.0\EDesign\Debug\EDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001ba4  08001ba4  00011ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001bec  08001bec  00011bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001bf0  08001bf0  00011bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000114  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000118  20000118  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e6a1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e7c  00000000  00000000  0002e6d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000038d6  00000000  00000000  00030551  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000668  00000000  00000000  00033e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000638  00000000  00000000  00034490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003bc2  00000000  00000000  00034ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000025b4  00000000  00000000  0003868a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003ac3e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000efc  00000000  00000000  0003acbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001b8c 	.word	0x08001b8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001b8c 	.word	0x08001b8c

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <HAL_InitTick+0x24>)
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <HAL_InitTick+0x28>)
 80001d2:	fba3 3000 	umull	r3, r0, r3, r0
 80001d6:	0980      	lsrs	r0, r0, #6
 80001d8:	f000 f87c 	bl	80002d4 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f838 	bl	8000258 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000
 80001f0:	10624dd3 	.word	0x10624dd3

080001f4 <HAL_Init>:
{
 80001f4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f6:	4a07      	ldr	r2, [pc, #28]	; (8000214 <HAL_Init+0x20>)
 80001f8:	6813      	ldr	r3, [r2, #0]
 80001fa:	f043 0310 	orr.w	r3, r3, #16
 80001fe:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000200:	2003      	movs	r0, #3
 8000202:	f000 f817 	bl	8000234 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000206:	2000      	movs	r0, #0
 8000208:	f7ff ffde 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 800020c:	f001 fbb8 	bl	8001980 <HAL_MspInit>
}
 8000210:	2000      	movs	r0, #0
 8000212:	bd08      	pop	{r3, pc}
 8000214:	40022000 	.word	0x40022000

08000218 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000218:	4a02      	ldr	r2, [pc, #8]	; (8000224 <HAL_IncTick+0xc>)
 800021a:	6813      	ldr	r3, [r2, #0]
 800021c:	3301      	adds	r3, #1
 800021e:	6013      	str	r3, [r2, #0]
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	20000024 	.word	0x20000024

08000228 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000228:	4b01      	ldr	r3, [pc, #4]	; (8000230 <HAL_GetTick+0x8>)
 800022a:	6818      	ldr	r0, [r3, #0]
}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000024 	.word	0x20000024

08000234 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000234:	4a07      	ldr	r2, [pc, #28]	; (8000254 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000236:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000238:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800023c:	041b      	lsls	r3, r3, #16
 800023e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000240:	0200      	lsls	r0, r0, #8
 8000242:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000246:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000248:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800024c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000250:	60d0      	str	r0, [r2, #12]
 8000252:	4770      	bx	lr
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000258:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <HAL_NVIC_SetPriority+0x5c>)
 800025c:	68db      	ldr	r3, [r3, #12]
 800025e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000262:	f1c3 0407 	rsb	r4, r3, #7
 8000266:	2c04      	cmp	r4, #4
 8000268:	bf28      	it	cs
 800026a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026c:	1d1d      	adds	r5, r3, #4
 800026e:	2d06      	cmp	r5, #6
 8000270:	d917      	bls.n	80002a2 <HAL_NVIC_SetPriority+0x4a>
 8000272:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000274:	2501      	movs	r5, #1
 8000276:	fa05 f404 	lsl.w	r4, r5, r4
 800027a:	3c01      	subs	r4, #1
 800027c:	4021      	ands	r1, r4
 800027e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000280:	fa05 f303 	lsl.w	r3, r5, r3
 8000284:	3b01      	subs	r3, #1
 8000286:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000288:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 800028a:	2800      	cmp	r0, #0
 800028c:	db0b      	blt.n	80002a6 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	0109      	lsls	r1, r1, #4
 8000290:	b2c9      	uxtb	r1, r1
 8000292:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000296:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800029a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800029e:	bc30      	pop	{r4, r5}
 80002a0:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a2:	2300      	movs	r3, #0
 80002a4:	e7e6      	b.n	8000274 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a6:	f000 000f 	and.w	r0, r0, #15
 80002aa:	0109      	lsls	r1, r1, #4
 80002ac:	b2c9      	uxtb	r1, r1
 80002ae:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <HAL_NVIC_SetPriority+0x60>)
 80002b0:	5419      	strb	r1, [r3, r0]
 80002b2:	e7f4      	b.n	800029e <HAL_NVIC_SetPriority+0x46>
 80002b4:	e000ed00 	.word	0xe000ed00
 80002b8:	e000ed14 	.word	0xe000ed14

080002bc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002bc:	0942      	lsrs	r2, r0, #5
 80002be:	f000 001f 	and.w	r0, r0, #31
 80002c2:	2301      	movs	r3, #1
 80002c4:	fa03 f000 	lsl.w	r0, r3, r0
 80002c8:	4b01      	ldr	r3, [pc, #4]	; (80002d0 <HAL_NVIC_EnableIRQ+0x14>)
 80002ca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ce:	4770      	bx	lr
 80002d0:	e000e100 	.word	0xe000e100

080002d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002d4:	3801      	subs	r0, #1
 80002d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002da:	d20a      	bcs.n	80002f2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <HAL_SYSTICK_Config+0x24>)
 80002de:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	21f0      	movs	r1, #240	; 0xf0
 80002e2:	4a06      	ldr	r2, [pc, #24]	; (80002fc <HAL_SYSTICK_Config+0x28>)
 80002e4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e8:	2000      	movs	r0, #0
 80002ea:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ec:	2207      	movs	r2, #7
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002f2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e010 	.word	0xe000e010
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000300:	2804      	cmp	r0, #4
 8000302:	d005      	beq.n	8000310 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000304:	4a05      	ldr	r2, [pc, #20]	; (800031c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000306:	6813      	ldr	r3, [r2, #0]
 8000308:	f023 0304 	bic.w	r3, r3, #4
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000310:	4a02      	ldr	r2, [pc, #8]	; (800031c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000312:	6813      	ldr	r3, [r2, #0]
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	6013      	str	r3, [r2, #0]
 800031a:	4770      	bx	lr
 800031c:	e000e010 	.word	0xe000e010

08000320 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000320:	4770      	bx	lr

08000322 <HAL_SYSTICK_IRQHandler>:
{
 8000322:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000324:	f7ff fffc 	bl	8000320 <HAL_SYSTICK_Callback>
 8000328:	bd08      	pop	{r3, pc}

0800032a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800032a:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800032c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000330:	2b02      	cmp	r3, #2
 8000332:	d003      	beq.n	800033c <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000334:	2304      	movs	r3, #4
 8000336:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000338:	2001      	movs	r0, #1
 800033a:	bd08      	pop	{r3, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800033c:	6802      	ldr	r2, [r0, #0]
 800033e:	6813      	ldr	r3, [r2, #0]
 8000340:	f023 030e 	bic.w	r3, r3, #14
 8000344:	6013      	str	r3, [r2, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000346:	6802      	ldr	r2, [r0, #0]
 8000348:	6813      	ldr	r3, [r2, #0]
 800034a:	f023 0301 	bic.w	r3, r3, #1
 800034e:	6013      	str	r3, [r2, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000350:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000352:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000354:	2201      	movs	r2, #1
 8000356:	fa02 f303 	lsl.w	r3, r2, r3
 800035a:	604b      	str	r3, [r1, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800035c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000360:	2300      	movs	r3, #0
 8000362:	f880 3020 	strb.w	r3, [r0, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000366:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000368:	b113      	cbz	r3, 8000370 <HAL_DMA_Abort_IT+0x46>
    {
      hdma->XferAbortCallback(hdma);
 800036a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800036c:	2000      	movs	r0, #0
 800036e:	bd08      	pop	{r3, pc}
 8000370:	2000      	movs	r0, #0
    } 
  }
  return status;
}
 8000372:	bd08      	pop	{r3, pc}

08000374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000376:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8000378:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800037a:	e088      	b.n	800048e <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800037c:	08de      	lsrs	r6, r3, #3
 800037e:	3608      	adds	r6, #8
 8000380:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000384:	f003 0e07 	and.w	lr, r3, #7
 8000388:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800038c:	270f      	movs	r7, #15
 800038e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000392:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000396:	690f      	ldr	r7, [r1, #16]
 8000398:	fa07 f70e 	lsl.w	r7, r7, lr
 800039c:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 800039e:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 80003a2:	e083      	b.n	80004ac <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80003a4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003a6:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003a8:	68cf      	ldr	r7, [r1, #12]
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80003b0:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80003b2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003b4:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003b8:	684e      	ldr	r6, [r1, #4]
 80003ba:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80003be:	409e      	lsls	r6, r3
 80003c0:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80003c2:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80003c4:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003c6:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003c8:	688d      	ldr	r5, [r1, #8]
 80003ca:	fa05 f50e 	lsl.w	r5, r5, lr
 80003ce:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80003d0:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003d2:	684c      	ldr	r4, [r1, #4]
 80003d4:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80003d8:	d058      	beq.n	800048c <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003da:	4c47      	ldr	r4, [pc, #284]	; (80004f8 <HAL_GPIO_Init+0x184>)
 80003dc:	69a5      	ldr	r5, [r4, #24]
 80003de:	f045 0501 	orr.w	r5, r5, #1
 80003e2:	61a5      	str	r5, [r4, #24]
 80003e4:	69a4      	ldr	r4, [r4, #24]
 80003e6:	f004 0401 	and.w	r4, r4, #1
 80003ea:	9401      	str	r4, [sp, #4]
 80003ec:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 80003ee:	089d      	lsrs	r5, r3, #2
 80003f0:	1cae      	adds	r6, r5, #2
 80003f2:	4c42      	ldr	r4, [pc, #264]	; (80004fc <HAL_GPIO_Init+0x188>)
 80003f4:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80003f8:	f003 0603 	and.w	r6, r3, #3
 80003fc:	00b6      	lsls	r6, r6, #2
 80003fe:	270f      	movs	r7, #15
 8000400:	40b7      	lsls	r7, r6
 8000402:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000406:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800040a:	d06c      	beq.n	80004e6 <HAL_GPIO_Init+0x172>
 800040c:	4f3c      	ldr	r7, [pc, #240]	; (8000500 <HAL_GPIO_Init+0x18c>)
 800040e:	42b8      	cmp	r0, r7
 8000410:	d06b      	beq.n	80004ea <HAL_GPIO_Init+0x176>
 8000412:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000416:	42b8      	cmp	r0, r7
 8000418:	d069      	beq.n	80004ee <HAL_GPIO_Init+0x17a>
 800041a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800041e:	42b8      	cmp	r0, r7
 8000420:	d05f      	beq.n	80004e2 <HAL_GPIO_Init+0x16e>
 8000422:	2705      	movs	r7, #5
 8000424:	fa07 f606 	lsl.w	r6, r7, r6
 8000428:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 800042a:	3502      	adds	r5, #2
 800042c:	4e33      	ldr	r6, [pc, #204]	; (80004fc <HAL_GPIO_Init+0x188>)
 800042e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000432:	4c34      	ldr	r4, [pc, #208]	; (8000504 <HAL_GPIO_Init+0x190>)
 8000434:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000436:	43d4      	mvns	r4, r2
 8000438:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800043c:	684f      	ldr	r7, [r1, #4]
 800043e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000442:	d001      	beq.n	8000448 <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8000444:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8000448:	4d2e      	ldr	r5, [pc, #184]	; (8000504 <HAL_GPIO_Init+0x190>)
 800044a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 800044c:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 800044e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000452:	684f      	ldr	r7, [r1, #4]
 8000454:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000458:	d001      	beq.n	800045e <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 800045a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 800045e:	4d29      	ldr	r5, [pc, #164]	; (8000504 <HAL_GPIO_Init+0x190>)
 8000460:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000462:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8000464:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000468:	684f      	ldr	r7, [r1, #4]
 800046a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800046e:	d001      	beq.n	8000474 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 8000470:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8000474:	4d23      	ldr	r5, [pc, #140]	; (8000504 <HAL_GPIO_Init+0x190>)
 8000476:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8000478:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 800047a:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800047c:	684e      	ldr	r6, [r1, #4]
 800047e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000482:	d001      	beq.n	8000488 <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 8000484:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8000488:	4a1e      	ldr	r2, [pc, #120]	; (8000504 <HAL_GPIO_Init+0x190>)
 800048a:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 800048c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 800048e:	680a      	ldr	r2, [r1, #0]
 8000490:	fa32 f403 	lsrs.w	r4, r2, r3
 8000494:	d02d      	beq.n	80004f2 <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000496:	2501      	movs	r5, #1
 8000498:	409d      	lsls	r5, r3
    if(iocurrent)
 800049a:	402a      	ands	r2, r5
 800049c:	d0f6      	beq.n	800048c <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800049e:	684c      	ldr	r4, [r1, #4]
 80004a0:	2c02      	cmp	r4, #2
 80004a2:	f43f af6b 	beq.w	800037c <HAL_GPIO_Init+0x8>
 80004a6:	2c12      	cmp	r4, #18
 80004a8:	f43f af68 	beq.w	800037c <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 80004ac:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004ae:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80004b2:	2403      	movs	r4, #3
 80004b4:	fa04 f40e 	lsl.w	r4, r4, lr
 80004b8:	43e4      	mvns	r4, r4
 80004ba:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004bc:	684f      	ldr	r7, [r1, #4]
 80004be:	f007 0703 	and.w	r7, r7, #3
 80004c2:	fa07 f70e 	lsl.w	r7, r7, lr
 80004c6:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80004c8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004ca:	684e      	ldr	r6, [r1, #4]
 80004cc:	1e77      	subs	r7, r6, #1
 80004ce:	2f01      	cmp	r7, #1
 80004d0:	f67f af68 	bls.w	80003a4 <HAL_GPIO_Init+0x30>
 80004d4:	2e11      	cmp	r6, #17
 80004d6:	f43f af65 	beq.w	80003a4 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004da:	2e12      	cmp	r6, #18
 80004dc:	f47f af72 	bne.w	80003c4 <HAL_GPIO_Init+0x50>
 80004e0:	e760      	b.n	80003a4 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004e2:	2703      	movs	r7, #3
 80004e4:	e79e      	b.n	8000424 <HAL_GPIO_Init+0xb0>
 80004e6:	2700      	movs	r7, #0
 80004e8:	e79c      	b.n	8000424 <HAL_GPIO_Init+0xb0>
 80004ea:	2701      	movs	r7, #1
 80004ec:	e79a      	b.n	8000424 <HAL_GPIO_Init+0xb0>
 80004ee:	2702      	movs	r7, #2
 80004f0:	e798      	b.n	8000424 <HAL_GPIO_Init+0xb0>
  }
}
 80004f2:	b003      	add	sp, #12
 80004f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010000 	.word	0x40010000
 8000500:	48000400 	.word	0x48000400
 8000504:	40010400 	.word	0x40010400

08000508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800050e:	6803      	ldr	r3, [r0, #0]
 8000510:	f013 0f01 	tst.w	r3, #1
 8000514:	d063      	beq.n	80005de <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000516:	4bb5      	ldr	r3, [pc, #724]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	f003 030c 	and.w	r3, r3, #12
 800051e:	2b04      	cmp	r3, #4
 8000520:	d046      	beq.n	80005b0 <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000522:	4bb2      	ldr	r3, [pc, #712]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	f003 030c 	and.w	r3, r3, #12
 800052a:	2b08      	cmp	r3, #8
 800052c:	d03b      	beq.n	80005a6 <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800052e:	6863      	ldr	r3, [r4, #4]
 8000530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000534:	f000 808e 	beq.w	8000654 <HAL_RCC_OscConfig+0x14c>
 8000538:	2b00      	cmp	r3, #0
 800053a:	f040 8091 	bne.w	8000660 <HAL_RCC_OscConfig+0x158>
 800053e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000542:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000554:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000556:	4aa5      	ldr	r2, [pc, #660]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 8000558:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800055a:	f023 030f 	bic.w	r3, r3, #15
 800055e:	68a1      	ldr	r1, [r4, #8]
 8000560:	430b      	orrs	r3, r1
 8000562:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000564:	6863      	ldr	r3, [r4, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	f000 8094 	beq.w	8000694 <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800056c:	f7ff fe5c 	bl	8000228 <HAL_GetTick>
 8000570:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000572:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000576:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800057a:	4b9c      	ldr	r3, [pc, #624]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 800057c:	6819      	ldr	r1, [r3, #0]
 800057e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000582:	fa93 f3a3 	rbit	r3, r3
 8000586:	fab3 f383 	clz	r3, r3
 800058a:	f003 031f 	and.w	r3, r3, #31
 800058e:	2201      	movs	r2, #1
 8000590:	fa02 f303 	lsl.w	r3, r2, r3
 8000594:	4219      	tst	r1, r3
 8000596:	d122      	bne.n	80005de <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000598:	f7ff fe46 	bl	8000228 <HAL_GetTick>
 800059c:	1b40      	subs	r0, r0, r5
 800059e:	2864      	cmp	r0, #100	; 0x64
 80005a0:	d9e7      	bls.n	8000572 <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 80005a2:	2003      	movs	r0, #3
 80005a4:	e2ab      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005a6:	4b91      	ldr	r3, [pc, #580]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80005ae:	d0be      	beq.n	800052e <HAL_RCC_OscConfig+0x26>
 80005b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005b4:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005b8:	4b8c      	ldr	r3, [pc, #560]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 80005ba:	6819      	ldr	r1, [r3, #0]
 80005bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005c0:	fa93 f3a3 	rbit	r3, r3
 80005c4:	fab3 f383 	clz	r3, r3
 80005c8:	f003 031f 	and.w	r3, r3, #31
 80005cc:	2201      	movs	r2, #1
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	4219      	tst	r1, r3
 80005d4:	d003      	beq.n	80005de <HAL_RCC_OscConfig+0xd6>
 80005d6:	6863      	ldr	r3, [r4, #4]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	f000 8289 	beq.w	8000af0 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005de:	6823      	ldr	r3, [r4, #0]
 80005e0:	f013 0f02 	tst.w	r3, #2
 80005e4:	f000 809c 	beq.w	8000720 <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005e8:	4b80      	ldr	r3, [pc, #512]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	f013 0f0c 	tst.w	r3, #12
 80005f0:	d072      	beq.n	80006d8 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80005f2:	4b7e      	ldr	r3, [pc, #504]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	f003 030c 	and.w	r3, r3, #12
 80005fa:	2b08      	cmp	r3, #8
 80005fc:	d067      	beq.n	80006ce <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005fe:	6923      	ldr	r3, [r4, #16]
 8000600:	2b00      	cmp	r3, #0
 8000602:	f000 80cb 	beq.w	800079c <HAL_RCC_OscConfig+0x294>
 8000606:	2201      	movs	r2, #1
 8000608:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800060c:	fab3 f383 	clz	r3, r3
 8000610:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000614:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800061c:	f7ff fe04 	bl	8000228 <HAL_GetTick>
 8000620:	4605      	mov	r5, r0
 8000622:	2302      	movs	r3, #2
 8000624:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000628:	4b70      	ldr	r3, [pc, #448]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 800062a:	6819      	ldr	r1, [r3, #0]
 800062c:	2302      	movs	r3, #2
 800062e:	fa93 f3a3 	rbit	r3, r3
 8000632:	fab3 f383 	clz	r3, r3
 8000636:	f003 031f 	and.w	r3, r3, #31
 800063a:	2201      	movs	r2, #1
 800063c:	fa02 f303 	lsl.w	r3, r2, r3
 8000640:	4219      	tst	r1, r3
 8000642:	f040 809c 	bne.w	800077e <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000646:	f7ff fdef 	bl	8000228 <HAL_GetTick>
 800064a:	1b40      	subs	r0, r0, r5
 800064c:	2802      	cmp	r0, #2
 800064e:	d9e8      	bls.n	8000622 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000650:	2003      	movs	r0, #3
 8000652:	e254      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000654:	4a65      	ldr	r2, [pc, #404]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 8000656:	6813      	ldr	r3, [r2, #0]
 8000658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800065c:	6013      	str	r3, [r2, #0]
 800065e:	e77a      	b.n	8000556 <HAL_RCC_OscConfig+0x4e>
 8000660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000664:	d009      	beq.n	800067a <HAL_RCC_OscConfig+0x172>
 8000666:	4b61      	ldr	r3, [pc, #388]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	e76d      	b.n	8000556 <HAL_RCC_OscConfig+0x4e>
 800067a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800067e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	e760      	b.n	8000556 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8000694:	f7ff fdc8 	bl	8000228 <HAL_GetTick>
 8000698:	4605      	mov	r5, r0
 800069a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800069e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006a2:	4b52      	ldr	r3, [pc, #328]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 80006a4:	6819      	ldr	r1, [r3, #0]
 80006a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006aa:	fa93 f3a3 	rbit	r3, r3
 80006ae:	fab3 f383 	clz	r3, r3
 80006b2:	f003 031f 	and.w	r3, r3, #31
 80006b6:	2201      	movs	r2, #1
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	4219      	tst	r1, r3
 80006be:	d08e      	beq.n	80005de <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006c0:	f7ff fdb2 	bl	8000228 <HAL_GetTick>
 80006c4:	1b40      	subs	r0, r0, r5
 80006c6:	2864      	cmp	r0, #100	; 0x64
 80006c8:	d9e7      	bls.n	800069a <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 80006ca:	2003      	movs	r0, #3
 80006cc:	e217      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006ce:	4b47      	ldr	r3, [pc, #284]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80006d6:	d192      	bne.n	80005fe <HAL_RCC_OscConfig+0xf6>
 80006d8:	2302      	movs	r3, #2
 80006da:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006de:	4b43      	ldr	r3, [pc, #268]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 80006e0:	6819      	ldr	r1, [r3, #0]
 80006e2:	2302      	movs	r3, #2
 80006e4:	fa93 f3a3 	rbit	r3, r3
 80006e8:	fab3 f383 	clz	r3, r3
 80006ec:	f003 031f 	and.w	r3, r3, #31
 80006f0:	2201      	movs	r2, #1
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	4219      	tst	r1, r3
 80006f8:	d004      	beq.n	8000704 <HAL_RCC_OscConfig+0x1fc>
 80006fa:	6923      	ldr	r3, [r4, #16]
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d001      	beq.n	8000704 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 8000700:	2001      	movs	r0, #1
 8000702:	e1fc      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000704:	4839      	ldr	r0, [pc, #228]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 8000706:	6803      	ldr	r3, [r0, #0]
 8000708:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800070c:	6961      	ldr	r1, [r4, #20]
 800070e:	22f8      	movs	r2, #248	; 0xf8
 8000710:	fa92 f2a2 	rbit	r2, r2
 8000714:	fab2 f282 	clz	r2, r2
 8000718:	fa01 f202 	lsl.w	r2, r1, r2
 800071c:	4313      	orrs	r3, r2
 800071e:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	f013 0f08 	tst.w	r3, #8
 8000726:	f000 808d 	beq.w	8000844 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800072a:	69a3      	ldr	r3, [r4, #24]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d061      	beq.n	80007f4 <HAL_RCC_OscConfig+0x2ec>
 8000730:	2101      	movs	r1, #1
 8000732:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000736:	fab2 f282 	clz	r2, r2
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <HAL_RCC_OscConfig+0x2e8>)
 800073c:	4413      	add	r3, r2
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000742:	f7ff fd71 	bl	8000228 <HAL_GetTick>
 8000746:	4605      	mov	r5, r0
 8000748:	2302      	movs	r3, #2
 800074a:	fa93 f2a3 	rbit	r2, r3
 800074e:	fa93 f2a3 	rbit	r2, r3
 8000752:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000756:	4a25      	ldr	r2, [pc, #148]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 8000758:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800075a:	fa93 f3a3 	rbit	r3, r3
 800075e:	fab3 f383 	clz	r3, r3
 8000762:	f003 031f 	and.w	r3, r3, #31
 8000766:	2201      	movs	r2, #1
 8000768:	fa02 f303 	lsl.w	r3, r2, r3
 800076c:	4219      	tst	r1, r3
 800076e:	d169      	bne.n	8000844 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000770:	f7ff fd5a 	bl	8000228 <HAL_GetTick>
 8000774:	1b40      	subs	r0, r0, r5
 8000776:	2802      	cmp	r0, #2
 8000778:	d9e6      	bls.n	8000748 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800077a:	2003      	movs	r0, #3
 800077c:	e1bf      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800077e:	481b      	ldr	r0, [pc, #108]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 8000780:	6803      	ldr	r3, [r0, #0]
 8000782:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000786:	6961      	ldr	r1, [r4, #20]
 8000788:	22f8      	movs	r2, #248	; 0xf8
 800078a:	fa92 f2a2 	rbit	r2, r2
 800078e:	fab2 f282 	clz	r2, r2
 8000792:	fa01 f202 	lsl.w	r2, r1, r2
 8000796:	4313      	orrs	r3, r2
 8000798:	6003      	str	r3, [r0, #0]
 800079a:	e7c1      	b.n	8000720 <HAL_RCC_OscConfig+0x218>
 800079c:	2301      	movs	r3, #1
 800079e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80007a2:	fab3 f383 	clz	r3, r3
 80007a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80007aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007b4:	f7ff fd38 	bl	8000228 <HAL_GetTick>
 80007b8:	4605      	mov	r5, r0
 80007ba:	2302      	movs	r3, #2
 80007bc:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <HAL_RCC_OscConfig+0x2e4>)
 80007c2:	6819      	ldr	r1, [r3, #0]
 80007c4:	2302      	movs	r3, #2
 80007c6:	fa93 f3a3 	rbit	r3, r3
 80007ca:	fab3 f383 	clz	r3, r3
 80007ce:	f003 031f 	and.w	r3, r3, #31
 80007d2:	2201      	movs	r2, #1
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	4219      	tst	r1, r3
 80007da:	d0a1      	beq.n	8000720 <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007dc:	f7ff fd24 	bl	8000228 <HAL_GetTick>
 80007e0:	1b40      	subs	r0, r0, r5
 80007e2:	2802      	cmp	r0, #2
 80007e4:	d9e9      	bls.n	80007ba <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 80007e6:	2003      	movs	r0, #3
 80007e8:	e189      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000
 80007f0:	10908120 	.word	0x10908120
 80007f4:	2201      	movs	r2, #1
 80007f6:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80007fa:	fab2 f282 	clz	r2, r2
 80007fe:	4bc1      	ldr	r3, [pc, #772]	; (8000b04 <HAL_RCC_OscConfig+0x5fc>)
 8000800:	4413      	add	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000808:	f7ff fd0e 	bl	8000228 <HAL_GetTick>
 800080c:	4605      	mov	r5, r0
 800080e:	2302      	movs	r3, #2
 8000810:	fa93 f2a3 	rbit	r2, r3
 8000814:	fa93 f2a3 	rbit	r2, r3
 8000818:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800081c:	4aba      	ldr	r2, [pc, #744]	; (8000b08 <HAL_RCC_OscConfig+0x600>)
 800081e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000820:	fa93 f3a3 	rbit	r3, r3
 8000824:	fab3 f383 	clz	r3, r3
 8000828:	f003 031f 	and.w	r3, r3, #31
 800082c:	2201      	movs	r2, #1
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	4219      	tst	r1, r3
 8000834:	d006      	beq.n	8000844 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000836:	f7ff fcf7 	bl	8000228 <HAL_GetTick>
 800083a:	1b40      	subs	r0, r0, r5
 800083c:	2802      	cmp	r0, #2
 800083e:	d9e6      	bls.n	800080e <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000840:	2003      	movs	r0, #3
 8000842:	e15c      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000844:	6823      	ldr	r3, [r4, #0]
 8000846:	f013 0f04 	tst.w	r3, #4
 800084a:	f000 80b3 	beq.w	80009b4 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800084e:	4bae      	ldr	r3, [pc, #696]	; (8000b08 <HAL_RCC_OscConfig+0x600>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000856:	d126      	bne.n	80008a6 <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000858:	4bab      	ldr	r3, [pc, #684]	; (8000b08 <HAL_RCC_OscConfig+0x600>)
 800085a:	69da      	ldr	r2, [r3, #28]
 800085c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000860:	61da      	str	r2, [r3, #28]
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800086c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800086e:	4ba7      	ldr	r3, [pc, #668]	; (8000b0c <HAL_RCC_OscConfig+0x604>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000876:	d018      	beq.n	80008aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000878:	68e3      	ldr	r3, [r4, #12]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d029      	beq.n	80008d2 <HAL_RCC_OscConfig+0x3ca>
 800087e:	bb73      	cbnz	r3, 80008de <HAL_RCC_OscConfig+0x3d6>
 8000880:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000884:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000888:	6a1a      	ldr	r2, [r3, #32]
 800088a:	f022 0201 	bic.w	r2, r2, #1
 800088e:	621a      	str	r2, [r3, #32]
 8000890:	6a1a      	ldr	r2, [r3, #32]
 8000892:	f022 0204 	bic.w	r2, r2, #4
 8000896:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000898:	68e3      	ldr	r3, [r4, #12]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d05d      	beq.n	800095a <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800089e:	f7ff fcc3 	bl	8000228 <HAL_GetTick>
 80008a2:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008a4:	e047      	b.n	8000936 <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 80008a6:	2500      	movs	r5, #0
 80008a8:	e7e1      	b.n	800086e <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008aa:	4a98      	ldr	r2, [pc, #608]	; (8000b0c <HAL_RCC_OscConfig+0x604>)
 80008ac:	6813      	ldr	r3, [r2, #0]
 80008ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80008b4:	f7ff fcb8 	bl	8000228 <HAL_GetTick>
 80008b8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008ba:	4b94      	ldr	r3, [pc, #592]	; (8000b0c <HAL_RCC_OscConfig+0x604>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80008c2:	d1d9      	bne.n	8000878 <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008c4:	f7ff fcb0 	bl	8000228 <HAL_GetTick>
 80008c8:	1b80      	subs	r0, r0, r6
 80008ca:	2864      	cmp	r0, #100	; 0x64
 80008cc:	d9f5      	bls.n	80008ba <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 80008ce:	2003      	movs	r0, #3
 80008d0:	e115      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008d2:	4a8d      	ldr	r2, [pc, #564]	; (8000b08 <HAL_RCC_OscConfig+0x600>)
 80008d4:	6a13      	ldr	r3, [r2, #32]
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	6213      	str	r3, [r2, #32]
 80008dc:	e7dc      	b.n	8000898 <HAL_RCC_OscConfig+0x390>
 80008de:	2b05      	cmp	r3, #5
 80008e0:	d009      	beq.n	80008f6 <HAL_RCC_OscConfig+0x3ee>
 80008e2:	4b89      	ldr	r3, [pc, #548]	; (8000b08 <HAL_RCC_OscConfig+0x600>)
 80008e4:	6a1a      	ldr	r2, [r3, #32]
 80008e6:	f022 0201 	bic.w	r2, r2, #1
 80008ea:	621a      	str	r2, [r3, #32]
 80008ec:	6a1a      	ldr	r2, [r3, #32]
 80008ee:	f022 0204 	bic.w	r2, r2, #4
 80008f2:	621a      	str	r2, [r3, #32]
 80008f4:	e7d0      	b.n	8000898 <HAL_RCC_OscConfig+0x390>
 80008f6:	4b84      	ldr	r3, [pc, #528]	; (8000b08 <HAL_RCC_OscConfig+0x600>)
 80008f8:	6a1a      	ldr	r2, [r3, #32]
 80008fa:	f042 0204 	orr.w	r2, r2, #4
 80008fe:	621a      	str	r2, [r3, #32]
 8000900:	6a1a      	ldr	r2, [r3, #32]
 8000902:	f042 0201 	orr.w	r2, r2, #1
 8000906:	621a      	str	r2, [r3, #32]
 8000908:	e7c6      	b.n	8000898 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800090a:	4b7f      	ldr	r3, [pc, #508]	; (8000b08 <HAL_RCC_OscConfig+0x600>)
 800090c:	6a19      	ldr	r1, [r3, #32]
 800090e:	2302      	movs	r3, #2
 8000910:	fa93 f3a3 	rbit	r3, r3
 8000914:	fab3 f383 	clz	r3, r3
 8000918:	f003 031f 	and.w	r3, r3, #31
 800091c:	2201      	movs	r2, #1
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	4219      	tst	r1, r3
 8000924:	d145      	bne.n	80009b2 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000926:	f7ff fc7f 	bl	8000228 <HAL_GetTick>
 800092a:	1b80      	subs	r0, r0, r6
 800092c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000930:	4298      	cmp	r0, r3
 8000932:	f200 80df 	bhi.w	8000af4 <HAL_RCC_OscConfig+0x5ec>
 8000936:	2302      	movs	r3, #2
 8000938:	fa93 f2a3 	rbit	r2, r3
 800093c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000940:	fab3 f383 	clz	r3, r3
 8000944:	095b      	lsrs	r3, r3, #5
 8000946:	f043 0302 	orr.w	r3, r3, #2
 800094a:	2b02      	cmp	r3, #2
 800094c:	d0dd      	beq.n	800090a <HAL_RCC_OscConfig+0x402>
 800094e:	2302      	movs	r3, #2
 8000950:	fa93 f3a3 	rbit	r3, r3
 8000954:	4b6c      	ldr	r3, [pc, #432]	; (8000b08 <HAL_RCC_OscConfig+0x600>)
 8000956:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000958:	e7d9      	b.n	800090e <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800095a:	f7ff fc65 	bl	8000228 <HAL_GetTick>
 800095e:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000960:	e015      	b.n	800098e <HAL_RCC_OscConfig+0x486>
 8000962:	4b69      	ldr	r3, [pc, #420]	; (8000b08 <HAL_RCC_OscConfig+0x600>)
 8000964:	6a19      	ldr	r1, [r3, #32]
 8000966:	2302      	movs	r3, #2
 8000968:	fa93 f3a3 	rbit	r3, r3
 800096c:	fab3 f383 	clz	r3, r3
 8000970:	f003 031f 	and.w	r3, r3, #31
 8000974:	2201      	movs	r2, #1
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	4219      	tst	r1, r3
 800097c:	d019      	beq.n	80009b2 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800097e:	f7ff fc53 	bl	8000228 <HAL_GetTick>
 8000982:	1b80      	subs	r0, r0, r6
 8000984:	f241 3388 	movw	r3, #5000	; 0x1388
 8000988:	4298      	cmp	r0, r3
 800098a:	f200 80b5 	bhi.w	8000af8 <HAL_RCC_OscConfig+0x5f0>
 800098e:	2302      	movs	r3, #2
 8000990:	fa93 f2a3 	rbit	r2, r3
 8000994:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000998:	fab3 f383 	clz	r3, r3
 800099c:	095b      	lsrs	r3, r3, #5
 800099e:	f043 0302 	orr.w	r3, r3, #2
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d0dd      	beq.n	8000962 <HAL_RCC_OscConfig+0x45a>
 80009a6:	2302      	movs	r3, #2
 80009a8:	fa93 f3a3 	rbit	r3, r3
 80009ac:	4b56      	ldr	r3, [pc, #344]	; (8000b08 <HAL_RCC_OscConfig+0x600>)
 80009ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80009b0:	e7d9      	b.n	8000966 <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80009b2:	bbb5      	cbnz	r5, 8000a22 <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009b4:	69e3      	ldr	r3, [r4, #28]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f000 80a0 	beq.w	8000afc <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009bc:	4a52      	ldr	r2, [pc, #328]	; (8000b08 <HAL_RCC_OscConfig+0x600>)
 80009be:	6852      	ldr	r2, [r2, #4]
 80009c0:	f002 020c 	and.w	r2, r2, #12
 80009c4:	2a08      	cmp	r2, #8
 80009c6:	f000 80a3 	beq.w	8000b10 <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d02f      	beq.n	8000a2e <HAL_RCC_OscConfig+0x526>
 80009ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009d2:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80009d6:	fab3 f383 	clz	r3, r3
 80009da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009e8:	f7ff fc1e 	bl	8000228 <HAL_GetTick>
 80009ec:	4604      	mov	r4, r0
 80009ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009f2:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009f6:	4b44      	ldr	r3, [pc, #272]	; (8000b08 <HAL_RCC_OscConfig+0x600>)
 80009f8:	6819      	ldr	r1, [r3, #0]
 80009fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009fe:	fa93 f3a3 	rbit	r3, r3
 8000a02:	fab3 f383 	clz	r3, r3
 8000a06:	f003 031f 	and.w	r3, r3, #31
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	4219      	tst	r1, r3
 8000a12:	d06b      	beq.n	8000aec <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a14:	f7ff fc08 	bl	8000228 <HAL_GetTick>
 8000a18:	1b00      	subs	r0, r0, r4
 8000a1a:	2802      	cmp	r0, #2
 8000a1c:	d9e7      	bls.n	80009ee <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 8000a1e:	2003      	movs	r0, #3
 8000a20:	e06d      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a22:	4a39      	ldr	r2, [pc, #228]	; (8000b08 <HAL_RCC_OscConfig+0x600>)
 8000a24:	69d3      	ldr	r3, [r2, #28]
 8000a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	61d3      	str	r3, [r2, #28]
 8000a2c:	e7c2      	b.n	80009b4 <HAL_RCC_OscConfig+0x4ac>
 8000a2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a32:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a36:	fab3 f383 	clz	r3, r3
 8000a3a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a3e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a48:	f7ff fbee 	bl	8000228 <HAL_GetTick>
 8000a4c:	4605      	mov	r5, r0
 8000a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a52:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a56:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <HAL_RCC_OscConfig+0x600>)
 8000a58:	6819      	ldr	r1, [r3, #0]
 8000a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a5e:	fa93 f3a3 	rbit	r3, r3
 8000a62:	fab3 f383 	clz	r3, r3
 8000a66:	f003 031f 	and.w	r3, r3, #31
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	4219      	tst	r1, r3
 8000a72:	d006      	beq.n	8000a82 <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a74:	f7ff fbd8 	bl	8000228 <HAL_GetTick>
 8000a78:	1b40      	subs	r0, r0, r5
 8000a7a:	2802      	cmp	r0, #2
 8000a7c:	d9e7      	bls.n	8000a4e <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 8000a7e:	2003      	movs	r0, #3
 8000a80:	e03d      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a82:	4921      	ldr	r1, [pc, #132]	; (8000b08 <HAL_RCC_OscConfig+0x600>)
 8000a84:	684b      	ldr	r3, [r1, #4]
 8000a86:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000a8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a8c:	6a20      	ldr	r0, [r4, #32]
 8000a8e:	4302      	orrs	r2, r0
 8000a90:	4313      	orrs	r3, r2
 8000a92:	604b      	str	r3, [r1, #4]
 8000a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a98:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000a9c:	fab3 f383 	clz	r3, r3
 8000aa0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000aa4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	2201      	movs	r2, #1
 8000aac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000aae:	f7ff fbbb 	bl	8000228 <HAL_GetTick>
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ab8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_RCC_OscConfig+0x600>)
 8000abe:	6819      	ldr	r1, [r3, #0]
 8000ac0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ac4:	fa93 f3a3 	rbit	r3, r3
 8000ac8:	fab3 f383 	clz	r3, r3
 8000acc:	f003 031f 	and.w	r3, r3, #31
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	4219      	tst	r1, r3
 8000ad8:	d106      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ada:	f7ff fba5 	bl	8000228 <HAL_GetTick>
 8000ade:	1b00      	subs	r0, r0, r4
 8000ae0:	2802      	cmp	r0, #2
 8000ae2:	d9e7      	bls.n	8000ab4 <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	e00a      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000ae8:	2000      	movs	r0, #0
 8000aea:	e008      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>
 8000aec:	2000      	movs	r0, #0
 8000aee:	e006      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 8000af0:	2001      	movs	r0, #1
 8000af2:	e004      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8000af4:	2003      	movs	r0, #3
 8000af6:	e002      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8000af8:	2003      	movs	r0, #3
 8000afa:	e000      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 8000afc:	2000      	movs	r0, #0
}
 8000afe:	b002      	add	sp, #8
 8000b00:	bd70      	pop	{r4, r5, r6, pc}
 8000b02:	bf00      	nop
 8000b04:	10908120 	.word	0x10908120
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40007000 	.word	0x40007000
      return HAL_ERROR;
 8000b10:	2001      	movs	r0, #1
 8000b12:	e7f4      	b.n	8000afe <HAL_RCC_OscConfig+0x5f6>

08000b14 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000b14:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000b16:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000b18:	f003 020c 	and.w	r2, r3, #12
 8000b1c:	2a08      	cmp	r2, #8
 8000b1e:	d124      	bne.n	8000b6a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b20:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8000b24:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000b28:	fa92 f2a2 	rbit	r2, r2
 8000b2c:	fab2 f282 	clz	r2, r2
 8000b30:	fa21 f202 	lsr.w	r2, r1, r2
 8000b34:	490f      	ldr	r1, [pc, #60]	; (8000b74 <HAL_RCC_GetSysClockFreq+0x60>)
 8000b36:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000b3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b3c:	f002 020f 	and.w	r2, r2, #15
 8000b40:	210f      	movs	r1, #15
 8000b42:	fa91 f1a1 	rbit	r1, r1
 8000b46:	fab1 f181 	clz	r1, r1
 8000b4a:	40ca      	lsrs	r2, r1
 8000b4c:	490a      	ldr	r1, [pc, #40]	; (8000b78 <HAL_RCC_GetSysClockFreq+0x64>)
 8000b4e:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000b50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000b54:	d103      	bne.n	8000b5e <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_RCC_GetSysClockFreq+0x68>)
 8000b58:	fb03 f000 	mul.w	r0, r3, r0
 8000b5c:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b64:	fb03 f000 	mul.w	r0, r3, r0
 8000b68:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000
 8000b74:	08001ba4 	.word	0x08001ba4
 8000b78:	08001bb4 	.word	0x08001bb4
 8000b7c:	003d0900 	.word	0x003d0900
 8000b80:	007a1200 	.word	0x007a1200

08000b84 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b84:	4b70      	ldr	r3, [pc, #448]	; (8000d48 <HAL_RCC_ClockConfig+0x1c4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f003 0307 	and.w	r3, r3, #7
 8000b8c:	428b      	cmp	r3, r1
 8000b8e:	d20c      	bcs.n	8000baa <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b90:	4a6d      	ldr	r2, [pc, #436]	; (8000d48 <HAL_RCC_ClockConfig+0x1c4>)
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	f023 0307 	bic.w	r3, r3, #7
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b9c:	6813      	ldr	r3, [r2, #0]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	d001      	beq.n	8000baa <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	4770      	bx	lr
{
 8000baa:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bac:	6803      	ldr	r3, [r0, #0]
 8000bae:	f013 0f02 	tst.w	r3, #2
 8000bb2:	d006      	beq.n	8000bc2 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bb4:	4a65      	ldr	r2, [pc, #404]	; (8000d4c <HAL_RCC_ClockConfig+0x1c8>)
 8000bb6:	6853      	ldr	r3, [r2, #4]
 8000bb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bbc:	6884      	ldr	r4, [r0, #8]
 8000bbe:	4323      	orrs	r3, r4
 8000bc0:	6053      	str	r3, [r2, #4]
 8000bc2:	460d      	mov	r5, r1
 8000bc4:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bc6:	6803      	ldr	r3, [r0, #0]
 8000bc8:	f013 0f01 	tst.w	r3, #1
 8000bcc:	d07a      	beq.n	8000cc4 <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bce:	6843      	ldr	r3, [r0, #4]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d02f      	beq.n	8000c34 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d042      	beq.n	8000c5e <HAL_RCC_ClockConfig+0xda>
 8000bd8:	2202      	movs	r2, #2
 8000bda:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bde:	4a5b      	ldr	r2, [pc, #364]	; (8000d4c <HAL_RCC_ClockConfig+0x1c8>)
 8000be0:	6810      	ldr	r0, [r2, #0]
 8000be2:	2202      	movs	r2, #2
 8000be4:	fa92 f2a2 	rbit	r2, r2
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	f002 021f 	and.w	r2, r2, #31
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf6:	4210      	tst	r0, r2
 8000bf8:	f000 80a4 	beq.w	8000d44 <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bfc:	4953      	ldr	r1, [pc, #332]	; (8000d4c <HAL_RCC_ClockConfig+0x1c8>)
 8000bfe:	684a      	ldr	r2, [r1, #4]
 8000c00:	f022 0203 	bic.w	r2, r2, #3
 8000c04:	4313      	orrs	r3, r2
 8000c06:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000c08:	f7ff fb0e 	bl	8000228 <HAL_GetTick>
 8000c0c:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c0e:	6863      	ldr	r3, [r4, #4]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d039      	beq.n	8000c88 <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d046      	beq.n	8000ca6 <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c18:	4b4c      	ldr	r3, [pc, #304]	; (8000d4c <HAL_RCC_ClockConfig+0x1c8>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f013 0f0c 	tst.w	r3, #12
 8000c20:	d050      	beq.n	8000cc4 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c22:	f7ff fb01 	bl	8000228 <HAL_GetTick>
 8000c26:	1b80      	subs	r0, r0, r6
 8000c28:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c2c:	4298      	cmp	r0, r3
 8000c2e:	d9f3      	bls.n	8000c18 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000c30:	2003      	movs	r0, #3
 8000c32:	bd70      	pop	{r4, r5, r6, pc}
 8000c34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c38:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3c:	4a43      	ldr	r2, [pc, #268]	; (8000d4c <HAL_RCC_ClockConfig+0x1c8>)
 8000c3e:	6810      	ldr	r0, [r2, #0]
 8000c40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c44:	fa92 f2a2 	rbit	r2, r2
 8000c48:	fab2 f282 	clz	r2, r2
 8000c4c:	f002 021f 	and.w	r2, r2, #31
 8000c50:	2101      	movs	r1, #1
 8000c52:	fa01 f202 	lsl.w	r2, r1, r2
 8000c56:	4210      	tst	r0, r2
 8000c58:	d1d0      	bne.n	8000bfc <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	bd70      	pop	{r4, r5, r6, pc}
 8000c5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c62:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c66:	4a39      	ldr	r2, [pc, #228]	; (8000d4c <HAL_RCC_ClockConfig+0x1c8>)
 8000c68:	6810      	ldr	r0, [r2, #0]
 8000c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c6e:	fa92 f2a2 	rbit	r2, r2
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	f002 021f 	and.w	r2, r2, #31
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c80:	4210      	tst	r0, r2
 8000c82:	d1bb      	bne.n	8000bfc <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8000c84:	2001      	movs	r0, #1
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c88:	4b30      	ldr	r3, [pc, #192]	; (8000d4c <HAL_RCC_ClockConfig+0x1c8>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 030c 	and.w	r3, r3, #12
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d017      	beq.n	8000cc4 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c94:	f7ff fac8 	bl	8000228 <HAL_GetTick>
 8000c98:	1b80      	subs	r0, r0, r6
 8000c9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c9e:	4298      	cmp	r0, r3
 8000ca0:	d9f2      	bls.n	8000c88 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 8000ca2:	2003      	movs	r0, #3
 8000ca4:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ca6:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <HAL_RCC_ClockConfig+0x1c8>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 030c 	and.w	r3, r3, #12
 8000cae:	2b08      	cmp	r3, #8
 8000cb0:	d008      	beq.n	8000cc4 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cb2:	f7ff fab9 	bl	8000228 <HAL_GetTick>
 8000cb6:	1b80      	subs	r0, r0, r6
 8000cb8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cbc:	4298      	cmp	r0, r3
 8000cbe:	d9f2      	bls.n	8000ca6 <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <HAL_RCC_ClockConfig+0x1c4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 0307 	and.w	r3, r3, #7
 8000ccc:	429d      	cmp	r5, r3
 8000cce:	d20c      	bcs.n	8000cea <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cd0:	4a1d      	ldr	r2, [pc, #116]	; (8000d48 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd2:	6813      	ldr	r3, [r2, #0]
 8000cd4:	f023 0307 	bic.w	r3, r3, #7
 8000cd8:	432b      	orrs	r3, r5
 8000cda:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cdc:	6813      	ldr	r3, [r2, #0]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	429d      	cmp	r5, r3
 8000ce4:	d001      	beq.n	8000cea <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 8000ce6:	2001      	movs	r0, #1
}
 8000ce8:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cea:	6823      	ldr	r3, [r4, #0]
 8000cec:	f013 0f04 	tst.w	r3, #4
 8000cf0:	d006      	beq.n	8000d00 <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cf2:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <HAL_RCC_ClockConfig+0x1c8>)
 8000cf4:	6853      	ldr	r3, [r2, #4]
 8000cf6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cfa:	68e1      	ldr	r1, [r4, #12]
 8000cfc:	430b      	orrs	r3, r1
 8000cfe:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d00:	6823      	ldr	r3, [r4, #0]
 8000d02:	f013 0f08 	tst.w	r3, #8
 8000d06:	d007      	beq.n	8000d18 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d08:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <HAL_RCC_ClockConfig+0x1c8>)
 8000d0a:	6853      	ldr	r3, [r2, #4]
 8000d0c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d10:	6921      	ldr	r1, [r4, #16]
 8000d12:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d16:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d18:	f7ff fefc 	bl	8000b14 <HAL_RCC_GetSysClockFreq>
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_RCC_ClockConfig+0x1c8>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d24:	22f0      	movs	r2, #240	; 0xf0
 8000d26:	fa92 f2a2 	rbit	r2, r2
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	40d3      	lsrs	r3, r2
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_RCC_ClockConfig+0x1cc>)
 8000d32:	5cd3      	ldrb	r3, [r2, r3]
 8000d34:	40d8      	lsrs	r0, r3
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <HAL_RCC_ClockConfig+0x1d0>)
 8000d38:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff fa44 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000d40:	2000      	movs	r0, #0
 8000d42:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000d44:	2001      	movs	r0, #1
 8000d46:	bd70      	pop	{r4, r5, r6, pc}
 8000d48:	40022000 	.word	0x40022000
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	08001bd4 	.word	0x08001bd4
 8000d54:	20000000 	.word	0x20000000

08000d58 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d58:	4b01      	ldr	r3, [pc, #4]	; (8000d60 <HAL_RCC_GetHCLKFreq+0x8>)
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000000 	.word	0x20000000

08000d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d64:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000d66:	f7ff fff7 	bl	8000d58 <HAL_RCC_GetHCLKFreq>
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d72:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d76:	fa92 f2a2 	rbit	r2, r2
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	40d3      	lsrs	r3, r2
 8000d80:	4a02      	ldr	r2, [pc, #8]	; (8000d8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000d82:	5cd3      	ldrb	r3, [r2, r3]
}    
 8000d84:	40d8      	lsrs	r0, r3
 8000d86:	bd08      	pop	{r3, pc}
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	08001be4 	.word	0x08001be4

08000d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000d90:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000d92:	f7ff ffe1 	bl	8000d58 <HAL_RCC_GetHCLKFreq>
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000d9e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000da2:	fa92 f2a2 	rbit	r2, r2
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	40d3      	lsrs	r3, r2
 8000dac:	4a02      	ldr	r2, [pc, #8]	; (8000db8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000dae:	5cd3      	ldrb	r3, [r2, r3]
} 
 8000db0:	40d8      	lsrs	r0, r3
 8000db2:	bd08      	pop	{r3, pc}
 8000db4:	40021000 	.word	0x40021000
 8000db8:	08001be4 	.word	0x08001be4

08000dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000dc2:	6803      	ldr	r3, [r0, #0]
 8000dc4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000dc8:	d044      	beq.n	8000e54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dca:	4b64      	ldr	r3, [pc, #400]	; (8000f5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000dd2:	d179      	bne.n	8000ec8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dd4:	4b61      	ldr	r3, [pc, #388]	; (8000f5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000dd6:	69da      	ldr	r2, [r3, #28]
 8000dd8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ddc:	61da      	str	r2, [r3, #28]
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000de8:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dea:	4b5d      	ldr	r3, [pc, #372]	; (8000f60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000df2:	d06b      	beq.n	8000ecc <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000df4:	4b59      	ldr	r3, [pc, #356]	; (8000f5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000df6:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000df8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000dfc:	d021      	beq.n	8000e42 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8000dfe:	6862      	ldr	r2, [r4, #4]
 8000e00:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d01c      	beq.n	8000e42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e08:	4854      	ldr	r0, [pc, #336]	; (8000f5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000e0a:	6a01      	ldr	r1, [r0, #32]
 8000e0c:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8000e10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e14:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e18:	fab2 f282 	clz	r2, r2
 8000e1c:	4f51      	ldr	r7, [pc, #324]	; (8000f64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000e1e:	443a      	add	r2, r7
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	f04f 0e01 	mov.w	lr, #1
 8000e26:	f8c2 e000 	str.w	lr, [r2]
 8000e2a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e2e:	fab3 f383 	clz	r3, r3
 8000e32:	443b      	add	r3, r7
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000e3a:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e3c:	f011 0f01 	tst.w	r1, #1
 8000e40:	d158      	bne.n	8000ef4 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000e42:	4a46      	ldr	r2, [pc, #280]	; (8000f5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000e44:	6a13      	ldr	r3, [r2, #32]
 8000e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e4a:	6861      	ldr	r1, [r4, #4]
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	d17a      	bne.n	8000f4a <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000e54:	6823      	ldr	r3, [r4, #0]
 8000e56:	f013 0f01 	tst.w	r3, #1
 8000e5a:	d006      	beq.n	8000e6a <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000e5c:	4a3f      	ldr	r2, [pc, #252]	; (8000f5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000e5e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e60:	f023 0303 	bic.w	r3, r3, #3
 8000e64:	68a1      	ldr	r1, [r4, #8]
 8000e66:	430b      	orrs	r3, r1
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	f013 0f20 	tst.w	r3, #32
 8000e70:	d006      	beq.n	8000e80 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000e72:	4a3a      	ldr	r2, [pc, #232]	; (8000f5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000e74:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e76:	f023 0310 	bic.w	r3, r3, #16
 8000e7a:	68e1      	ldr	r1, [r4, #12]
 8000e7c:	430b      	orrs	r3, r1
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000e86:	d006      	beq.n	8000e96 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000e88:	4a34      	ldr	r2, [pc, #208]	; (8000f5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000e8a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000e8c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000e90:	6921      	ldr	r1, [r4, #16]
 8000e92:	430b      	orrs	r3, r1
 8000e94:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000e9c:	d006      	beq.n	8000eac <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000e9e:	4a2f      	ldr	r2, [pc, #188]	; (8000f5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000ea0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ea6:	6961      	ldr	r1, [r4, #20]
 8000ea8:	430b      	orrs	r3, r1
 8000eaa:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8000eac:	6823      	ldr	r3, [r4, #0]
 8000eae:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000eb2:	d051      	beq.n	8000f58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8000eb4:	4a29      	ldr	r2, [pc, #164]	; (8000f5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000eb6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ebc:	69a1      	ldr	r1, [r4, #24]
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000ec2:	2000      	movs	r0, #0
}
 8000ec4:	b003      	add	sp, #12
 8000ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8000ec8:	2500      	movs	r5, #0
 8000eca:	e78e      	b.n	8000dea <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ecc:	4a24      	ldr	r2, [pc, #144]	; (8000f60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8000ece:	6813      	ldr	r3, [r2, #0]
 8000ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000ed6:	f7ff f9a7 	bl	8000228 <HAL_GetTick>
 8000eda:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000edc:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ee4:	d186      	bne.n	8000df4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ee6:	f7ff f99f 	bl	8000228 <HAL_GetTick>
 8000eea:	1b80      	subs	r0, r0, r6
 8000eec:	2864      	cmp	r0, #100	; 0x64
 8000eee:	d9f5      	bls.n	8000edc <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	e7e7      	b.n	8000ec4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8000ef4:	f7ff f998 	bl	8000228 <HAL_GetTick>
 8000ef8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000efa:	e014      	b.n	8000f26 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000efe:	6a19      	ldr	r1, [r3, #32]
 8000f00:	2302      	movs	r3, #2
 8000f02:	fa93 f3a3 	rbit	r3, r3
 8000f06:	fab3 f383 	clz	r3, r3
 8000f0a:	f003 031f 	and.w	r3, r3, #31
 8000f0e:	2201      	movs	r2, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	4219      	tst	r1, r3
 8000f16:	d194      	bne.n	8000e42 <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f18:	f7ff f986 	bl	8000228 <HAL_GetTick>
 8000f1c:	1b80      	subs	r0, r0, r6
 8000f1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d816      	bhi.n	8000f54 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8000f26:	2302      	movs	r3, #2
 8000f28:	fa93 f2a3 	rbit	r2, r3
 8000f2c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f30:	fab3 f383 	clz	r3, r3
 8000f34:	095b      	lsrs	r3, r3, #5
 8000f36:	f043 0302 	orr.w	r3, r3, #2
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d0de      	beq.n	8000efc <HAL_RCCEx_PeriphCLKConfig+0x140>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	fa93 f3a3 	rbit	r3, r3
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000f46:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000f48:	e7da      	b.n	8000f00 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f4a:	69d3      	ldr	r3, [r2, #28]
 8000f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f50:	61d3      	str	r3, [r2, #28]
 8000f52:	e77f      	b.n	8000e54 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8000f54:	2003      	movs	r0, #3
 8000f56:	e7b5      	b.n	8000ec4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 8000f58:	2000      	movs	r0, #0
 8000f5a:	e7b3      	b.n	8000ec4 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40007000 	.word	0x40007000
 8000f64:	10908100 	.word	0x10908100

08000f68 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000f68:	6802      	ldr	r2, [r0, #0]
 8000f6a:	6813      	ldr	r3, [r2, #0]
 8000f6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8000f70:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f72:	6802      	ldr	r2, [r0, #0]
 8000f74:	6893      	ldr	r3, [r2, #8]
 8000f76:	f023 0301 	bic.w	r3, r3, #1
 8000f7a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000f7c:	2320      	movs	r3, #32
 8000f7e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8000f82:	4770      	bx	lr

08000f84 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8000f84:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b20      	cmp	r3, #32
 8000f8c:	d001      	beq.n	8000f92 <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 8000f8e:	2002      	movs	r0, #2
 8000f90:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8000f92:	b1b9      	cbz	r1, 8000fc4 <HAL_UART_Transmit_IT+0x40>
 8000f94:	b1c2      	cbz	r2, 8000fc8 <HAL_UART_Transmit_IT+0x44>
    __HAL_LOCK(huart);
 8000f96:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d016      	beq.n	8000fcc <HAL_UART_Transmit_IT+0x48>
    huart->pTxBuffPtr = pData;
 8000f9e:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8000fa0:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8000fa4:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000fac:	2221      	movs	r2, #33	; 0x21
 8000fae:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8000fb2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8000fb6:	6801      	ldr	r1, [r0, #0]
 8000fb8:	680a      	ldr	r2, [r1, #0]
 8000fba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fbe:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	4770      	bx	lr
      return HAL_ERROR;
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	4770      	bx	lr
 8000fc8:	2001      	movs	r0, #1
 8000fca:	4770      	bx	lr
    __HAL_LOCK(huart);
 8000fcc:	2002      	movs	r0, #2
}
 8000fce:	4770      	bx	lr

08000fd0 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8000fd0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b20      	cmp	r3, #32
 8000fd8:	d001      	beq.n	8000fde <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8000fda:	2002      	movs	r0, #2
 8000fdc:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8000fde:	2900      	cmp	r1, #0
 8000fe0:	d047      	beq.n	8001072 <HAL_UART_Receive_IT+0xa2>
 8000fe2:	2a00      	cmp	r2, #0
 8000fe4:	d047      	beq.n	8001076 <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 8000fe6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d045      	beq.n	800107a <HAL_UART_Receive_IT+0xaa>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 8000ff4:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8000ff6:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8000ffa:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8000ffe:	6883      	ldr	r3, [r0, #8]
 8001000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001004:	d006      	beq.n	8001014 <HAL_UART_Receive_IT+0x44>
 8001006:	b9a3      	cbnz	r3, 8001032 <HAL_UART_Receive_IT+0x62>
 8001008:	6903      	ldr	r3, [r0, #16]
 800100a:	b973      	cbnz	r3, 800102a <HAL_UART_Receive_IT+0x5a>
 800100c:	23ff      	movs	r3, #255	; 0xff
 800100e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001012:	e011      	b.n	8001038 <HAL_UART_Receive_IT+0x68>
 8001014:	6903      	ldr	r3, [r0, #16]
 8001016:	b923      	cbnz	r3, 8001022 <HAL_UART_Receive_IT+0x52>
 8001018:	f240 13ff 	movw	r3, #511	; 0x1ff
 800101c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001020:	e00a      	b.n	8001038 <HAL_UART_Receive_IT+0x68>
 8001022:	23ff      	movs	r3, #255	; 0xff
 8001024:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001028:	e006      	b.n	8001038 <HAL_UART_Receive_IT+0x68>
 800102a:	237f      	movs	r3, #127	; 0x7f
 800102c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001030:	e002      	b.n	8001038 <HAL_UART_Receive_IT+0x68>
 8001032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001036:	d012      	beq.n	800105e <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001038:	2300      	movs	r3, #0
 800103a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800103c:	2222      	movs	r2, #34	; 0x22
 800103e:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8001042:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001046:	6801      	ldr	r1, [r0, #0]
 8001048:	688a      	ldr	r2, [r1, #8]
 800104a:	f042 0201 	orr.w	r2, r2, #1
 800104e:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001050:	6801      	ldr	r1, [r0, #0]
 8001052:	680a      	ldr	r2, [r1, #0]
 8001054:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8001058:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 800105a:	4618      	mov	r0, r3
 800105c:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800105e:	6903      	ldr	r3, [r0, #16]
 8001060:	b91b      	cbnz	r3, 800106a <HAL_UART_Receive_IT+0x9a>
 8001062:	237f      	movs	r3, #127	; 0x7f
 8001064:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001068:	e7e6      	b.n	8001038 <HAL_UART_Receive_IT+0x68>
 800106a:	233f      	movs	r3, #63	; 0x3f
 800106c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8001070:	e7e2      	b.n	8001038 <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 8001072:	2001      	movs	r0, #1
 8001074:	4770      	bx	lr
 8001076:	2001      	movs	r0, #1
 8001078:	4770      	bx	lr
    __HAL_LOCK(huart);
 800107a:	2002      	movs	r0, #2
}
 800107c:	4770      	bx	lr

0800107e <HAL_UART_TxCpltCallback>:
{
 800107e:	4770      	bx	lr

08001080 <HAL_UART_ErrorCallback>:
{
 8001080:	4770      	bx	lr

08001082 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001082:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001084:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001086:	2300      	movs	r3, #0
 8001088:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800108c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8001090:	f7ff fff6 	bl	8001080 <HAL_UART_ErrorCallback>
 8001094:	bd08      	pop	{r3, pc}
	...

08001098 <UART_SetConfig>:
{
 8001098:	b538      	push	{r3, r4, r5, lr}
 800109a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800109c:	6883      	ldr	r3, [r0, #8]
 800109e:	6902      	ldr	r2, [r0, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	6942      	ldr	r2, [r0, #20]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	69c2      	ldr	r2, [r0, #28]
 80010a8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80010aa:	6801      	ldr	r1, [r0, #0]
 80010ac:	6808      	ldr	r0, [r1, #0]
 80010ae:	4a64      	ldr	r2, [pc, #400]	; (8001240 <UART_SetConfig+0x1a8>)
 80010b0:	4002      	ands	r2, r0
 80010b2:	4313      	orrs	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010b6:	6822      	ldr	r2, [r4, #0]
 80010b8:	6853      	ldr	r3, [r2, #4]
 80010ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010be:	68e1      	ldr	r1, [r4, #12]
 80010c0:	430b      	orrs	r3, r1
 80010c2:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80010c4:	69a3      	ldr	r3, [r4, #24]
 80010c6:	6a22      	ldr	r2, [r4, #32]
 80010c8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80010ca:	6821      	ldr	r1, [r4, #0]
 80010cc:	688a      	ldr	r2, [r1, #8]
 80010ce:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80010d2:	4313      	orrs	r3, r2
 80010d4:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010d6:	6825      	ldr	r5, [r4, #0]
 80010d8:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <UART_SetConfig+0x1ac>)
 80010da:	429d      	cmp	r5, r3
 80010dc:	d015      	beq.n	800110a <UART_SetConfig+0x72>
 80010de:	4b5a      	ldr	r3, [pc, #360]	; (8001248 <UART_SetConfig+0x1b0>)
 80010e0:	429d      	cmp	r5, r3
 80010e2:	d029      	beq.n	8001138 <UART_SetConfig+0xa0>
 80010e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010e8:	429d      	cmp	r5, r3
 80010ea:	d021      	beq.n	8001130 <UART_SetConfig+0x98>
 80010ec:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010ee:	69e2      	ldr	r2, [r4, #28]
 80010f0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80010f4:	d022      	beq.n	800113c <UART_SetConfig+0xa4>
    switch (clocksource)
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	f200 809f 	bhi.w	800123a <UART_SetConfig+0x1a2>
 80010fc:	e8df f003 	tbb	[pc, r3]
 8001100:	9d7c7166 	.word	0x9d7c7166
 8001104:	9d9d9d88 	.word	0x9d9d9d88
 8001108:	93          	.byte	0x93
 8001109:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800110a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b03      	cmp	r3, #3
 8001116:	d809      	bhi.n	800112c <UART_SetConfig+0x94>
 8001118:	e8df f003 	tbb	[pc, r3]
 800111c:	0c060402 	.word	0x0c060402
 8001120:	2300      	movs	r3, #0
 8001122:	e7e4      	b.n	80010ee <UART_SetConfig+0x56>
 8001124:	2304      	movs	r3, #4
 8001126:	e7e2      	b.n	80010ee <UART_SetConfig+0x56>
 8001128:	2308      	movs	r3, #8
 800112a:	e7e0      	b.n	80010ee <UART_SetConfig+0x56>
 800112c:	2310      	movs	r3, #16
 800112e:	e7de      	b.n	80010ee <UART_SetConfig+0x56>
 8001130:	2300      	movs	r3, #0
 8001132:	e7dc      	b.n	80010ee <UART_SetConfig+0x56>
 8001134:	2302      	movs	r3, #2
 8001136:	e7da      	b.n	80010ee <UART_SetConfig+0x56>
 8001138:	2300      	movs	r3, #0
 800113a:	e7d8      	b.n	80010ee <UART_SetConfig+0x56>
    switch (clocksource)
 800113c:	2b08      	cmp	r3, #8
 800113e:	d842      	bhi.n	80011c6 <UART_SetConfig+0x12e>
 8001140:	e8df f003 	tbb	[pc, r3]
 8001144:	41221705 	.word	0x41221705
 8001148:	4141412d 	.word	0x4141412d
 800114c:	38          	.byte	0x38
 800114d:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800114e:	f7ff fe09 	bl	8000d64 <HAL_RCC_GetPCLK1Freq>
 8001152:	6862      	ldr	r2, [r4, #4]
 8001154:	0853      	lsrs	r3, r2, #1
 8001156:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800115a:	fbb3 f3f2 	udiv	r3, r3, r2
 800115e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001160:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001162:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001166:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800116a:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 800116c:	6822      	ldr	r2, [r4, #0]
 800116e:	60d3      	str	r3, [r2, #12]
 8001170:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001172:	f7ff fe0d 	bl	8000d90 <HAL_RCC_GetPCLK2Freq>
 8001176:	6862      	ldr	r2, [r4, #4]
 8001178:	0853      	lsrs	r3, r2, #1
 800117a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800117e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001182:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001184:	2000      	movs	r0, #0
        break;
 8001186:	e7ec      	b.n	8001162 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001188:	6862      	ldr	r2, [r4, #4]
 800118a:	0853      	lsrs	r3, r2, #1
 800118c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001190:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001194:	fbb3 f3f2 	udiv	r3, r3, r2
 8001198:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800119a:	2000      	movs	r0, #0
        break;
 800119c:	e7e1      	b.n	8001162 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800119e:	f7ff fcb9 	bl	8000b14 <HAL_RCC_GetSysClockFreq>
 80011a2:	6862      	ldr	r2, [r4, #4]
 80011a4:	0853      	lsrs	r3, r2, #1
 80011a6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80011aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80011ae:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80011b0:	2000      	movs	r0, #0
        break;
 80011b2:	e7d6      	b.n	8001162 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80011b4:	6862      	ldr	r2, [r4, #4]
 80011b6:	0853      	lsrs	r3, r2, #1
 80011b8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80011bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80011c0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80011c2:	2000      	movs	r0, #0
        break;
 80011c4:	e7cd      	b.n	8001162 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 80011c6:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	e7ca      	b.n	8001162 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80011cc:	f7ff fdca 	bl	8000d64 <HAL_RCC_GetPCLK1Freq>
 80011d0:	6863      	ldr	r3, [r4, #4]
 80011d2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80011d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80011da:	b280      	uxth	r0, r0
 80011dc:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80011de:	2000      	movs	r0, #0
        break;
 80011e0:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80011e2:	f7ff fdd5 	bl	8000d90 <HAL_RCC_GetPCLK2Freq>
 80011e6:	6863      	ldr	r3, [r4, #4]
 80011e8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80011ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80011f0:	b280      	uxth	r0, r0
 80011f2:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80011f4:	2000      	movs	r0, #0
        break;
 80011f6:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80011f8:	6862      	ldr	r2, [r4, #4]
 80011fa:	0853      	lsrs	r3, r2, #1
 80011fc:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001200:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001204:	fbb3 f3f2 	udiv	r3, r3, r2
 8001208:	b29b      	uxth	r3, r3
 800120a:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800120c:	2000      	movs	r0, #0
        break;
 800120e:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001210:	f7ff fc80 	bl	8000b14 <HAL_RCC_GetSysClockFreq>
 8001214:	6863      	ldr	r3, [r4, #4]
 8001216:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800121a:	fbb0 f0f3 	udiv	r0, r0, r3
 800121e:	b280      	uxth	r0, r0
 8001220:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001222:	2000      	movs	r0, #0
        break;
 8001224:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001226:	6862      	ldr	r2, [r4, #4]
 8001228:	0853      	lsrs	r3, r2, #1
 800122a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800122e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001232:	b29b      	uxth	r3, r3
 8001234:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001236:	2000      	movs	r0, #0
        break;
 8001238:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 800123a:	2001      	movs	r0, #1
}
 800123c:	bd38      	pop	{r3, r4, r5, pc}
 800123e:	bf00      	nop
 8001240:	efff69f3 	.word	0xefff69f3
 8001244:	40013800 	.word	0x40013800
 8001248:	40004400 	.word	0x40004400

0800124c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800124c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800124e:	f013 0f01 	tst.w	r3, #1
 8001252:	d006      	beq.n	8001262 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001254:	6802      	ldr	r2, [r0, #0]
 8001256:	6853      	ldr	r3, [r2, #4]
 8001258:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800125c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800125e:	430b      	orrs	r3, r1
 8001260:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001262:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001264:	f013 0f02 	tst.w	r3, #2
 8001268:	d006      	beq.n	8001278 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800126a:	6802      	ldr	r2, [r0, #0]
 800126c:	6853      	ldr	r3, [r2, #4]
 800126e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001272:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001274:	430b      	orrs	r3, r1
 8001276:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001278:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800127a:	f013 0f04 	tst.w	r3, #4
 800127e:	d006      	beq.n	800128e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001280:	6802      	ldr	r2, [r0, #0]
 8001282:	6853      	ldr	r3, [r2, #4]
 8001284:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001288:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800128a:	430b      	orrs	r3, r1
 800128c:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800128e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001290:	f013 0f08 	tst.w	r3, #8
 8001294:	d006      	beq.n	80012a4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001296:	6802      	ldr	r2, [r0, #0]
 8001298:	6853      	ldr	r3, [r2, #4]
 800129a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800129e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80012a0:	430b      	orrs	r3, r1
 80012a2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80012a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012a6:	f013 0f10 	tst.w	r3, #16
 80012aa:	d006      	beq.n	80012ba <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80012ac:	6802      	ldr	r2, [r0, #0]
 80012ae:	6893      	ldr	r3, [r2, #8]
 80012b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012b4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80012b6:	430b      	orrs	r3, r1
 80012b8:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80012ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012bc:	f013 0f20 	tst.w	r3, #32
 80012c0:	d006      	beq.n	80012d0 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80012c2:	6802      	ldr	r2, [r0, #0]
 80012c4:	6893      	ldr	r3, [r2, #8]
 80012c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012ca:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80012cc:	430b      	orrs	r3, r1
 80012ce:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80012d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80012d6:	d00a      	beq.n	80012ee <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80012d8:	6802      	ldr	r2, [r0, #0]
 80012da:	6853      	ldr	r3, [r2, #4]
 80012dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012e0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80012e2:	430b      	orrs	r3, r1
 80012e4:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80012e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80012ec:	d00b      	beq.n	8001306 <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80012ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80012f4:	d006      	beq.n	8001304 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80012f6:	6802      	ldr	r2, [r0, #0]
 80012f8:	6853      	ldr	r3, [r2, #4]
 80012fa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80012fe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001300:	430b      	orrs	r3, r1
 8001302:	6053      	str	r3, [r2, #4]
 8001304:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001306:	6802      	ldr	r2, [r0, #0]
 8001308:	6853      	ldr	r3, [r2, #4]
 800130a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800130e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001310:	430b      	orrs	r3, r1
 8001312:	6053      	str	r3, [r2, #4]
 8001314:	e7eb      	b.n	80012ee <UART_AdvFeatureConfig+0xa2>

08001316 <UART_WaitOnFlagUntilTimeout>:
{
 8001316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800131a:	4605      	mov	r5, r0
 800131c:	460f      	mov	r7, r1
 800131e:	4616      	mov	r6, r2
 8001320:	4698      	mov	r8, r3
 8001322:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001324:	682b      	ldr	r3, [r5, #0]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	ea37 0303 	bics.w	r3, r7, r3
 800132c:	bf0c      	ite	eq
 800132e:	2301      	moveq	r3, #1
 8001330:	2300      	movne	r3, #0
 8001332:	42b3      	cmp	r3, r6
 8001334:	d11e      	bne.n	8001374 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8001336:	f1b4 3fff 	cmp.w	r4, #4294967295
 800133a:	d0f3      	beq.n	8001324 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800133c:	b12c      	cbz	r4, 800134a <UART_WaitOnFlagUntilTimeout+0x34>
 800133e:	f7fe ff73 	bl	8000228 <HAL_GetTick>
 8001342:	eba0 0008 	sub.w	r0, r0, r8
 8001346:	4284      	cmp	r4, r0
 8001348:	d2ec      	bcs.n	8001324 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800134a:	682a      	ldr	r2, [r5, #0]
 800134c:	6813      	ldr	r3, [r2, #0]
 800134e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001352:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001354:	682a      	ldr	r2, [r5, #0]
 8001356:	6893      	ldr	r3, [r2, #8]
 8001358:	f023 0301 	bic.w	r3, r3, #1
 800135c:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800135e:	2320      	movs	r3, #32
 8001360:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001364:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001368:	2300      	movs	r3, #0
 800136a:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 800136e:	2003      	movs	r0, #3
 8001370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8001374:	2000      	movs	r0, #0
}
 8001376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800137a <UART_CheckIdleState>:
{
 800137a:	b530      	push	{r4, r5, lr}
 800137c:	b083      	sub	sp, #12
 800137e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001380:	2300      	movs	r3, #0
 8001382:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001384:	f7fe ff50 	bl	8000228 <HAL_GetTick>
 8001388:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f013 0f08 	tst.w	r3, #8
 8001392:	d10e      	bne.n	80013b2 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001394:	6823      	ldr	r3, [r4, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f013 0f04 	tst.w	r3, #4
 800139c:	d117      	bne.n	80013ce <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 800139e:	2320      	movs	r3, #32
 80013a0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80013a4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 80013ae:	b003      	add	sp, #12
 80013b0:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80013b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	4603      	mov	r3, r0
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80013c0:	4620      	mov	r0, r4
 80013c2:	f7ff ffa8 	bl	8001316 <UART_WaitOnFlagUntilTimeout>
 80013c6:	2800      	cmp	r0, #0
 80013c8:	d0e4      	beq.n	8001394 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80013ca:	2003      	movs	r0, #3
 80013cc:	e7ef      	b.n	80013ae <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80013ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	462b      	mov	r3, r5
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80013dc:	4620      	mov	r0, r4
 80013de:	f7ff ff9a 	bl	8001316 <UART_WaitOnFlagUntilTimeout>
 80013e2:	2800      	cmp	r0, #0
 80013e4:	d0db      	beq.n	800139e <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 80013e6:	2003      	movs	r0, #3
 80013e8:	e7e1      	b.n	80013ae <UART_CheckIdleState+0x34>

080013ea <HAL_UART_Init>:
  if(huart == NULL)
 80013ea:	b378      	cbz	r0, 800144c <HAL_UART_Init+0x62>
{
 80013ec:	b510      	push	{r4, lr}
 80013ee:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80013f0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80013f4:	b30b      	cbz	r3, 800143a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80013f6:	2324      	movs	r3, #36	; 0x24
 80013f8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80013fc:	6822      	ldr	r2, [r4, #0]
 80013fe:	6813      	ldr	r3, [r2, #0]
 8001400:	f023 0301 	bic.w	r3, r3, #1
 8001404:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001406:	4620      	mov	r0, r4
 8001408:	f7ff fe46 	bl	8001098 <UART_SetConfig>
 800140c:	2801      	cmp	r0, #1
 800140e:	d01f      	beq.n	8001450 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001412:	b9bb      	cbnz	r3, 8001444 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001414:	6822      	ldr	r2, [r4, #0]
 8001416:	6853      	ldr	r3, [r2, #4]
 8001418:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800141c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800141e:	6822      	ldr	r2, [r4, #0]
 8001420:	6893      	ldr	r3, [r2, #8]
 8001422:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001426:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001428:	6822      	ldr	r2, [r4, #0]
 800142a:	6813      	ldr	r3, [r2, #0]
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001432:	4620      	mov	r0, r4
 8001434:	f7ff ffa1 	bl	800137a <UART_CheckIdleState>
 8001438:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800143a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800143e:	f000 fadd 	bl	80019fc <HAL_UART_MspInit>
 8001442:	e7d8      	b.n	80013f6 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8001444:	4620      	mov	r0, r4
 8001446:	f7ff ff01 	bl	800124c <UART_AdvFeatureConfig>
 800144a:	e7e3      	b.n	8001414 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800144c:	2001      	movs	r0, #1
 800144e:	4770      	bx	lr
}
 8001450:	bd10      	pop	{r4, pc}

08001452 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001452:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b21      	cmp	r3, #33	; 0x21
 800145a:	d001      	beq.n	8001460 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 800145c:	2002      	movs	r0, #2
  }
}
 800145e:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8001460:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001464:	b29b      	uxth	r3, r3
 8001466:	b193      	cbz	r3, 800148e <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001468:	6883      	ldr	r3, [r0, #8]
 800146a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800146e:	d01a      	beq.n	80014a6 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8001470:	6802      	ldr	r2, [r0, #0]
 8001472:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001474:	1c59      	adds	r1, r3, #1
 8001476:	64c1      	str	r1, [r0, #76]	; 0x4c
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800147c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001480:	b29b      	uxth	r3, r3
 8001482:	3b01      	subs	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 800148a:	2000      	movs	r0, #0
 800148c:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800148e:	6802      	ldr	r2, [r0, #0]
 8001490:	6813      	ldr	r3, [r2, #0]
 8001492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001496:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001498:	6802      	ldr	r2, [r0, #0]
 800149a:	6813      	ldr	r3, [r2, #0]
 800149c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a0:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 80014a2:	2000      	movs	r0, #0
 80014a4:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014a6:	6903      	ldr	r3, [r0, #16]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e1      	bne.n	8001470 <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80014ac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80014ae:	6802      	ldr	r2, [r0, #0]
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014b6:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80014b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80014ba:	3302      	adds	r3, #2
 80014bc:	64c3      	str	r3, [r0, #76]	; 0x4c
 80014be:	e7dd      	b.n	800147c <UART_Transmit_IT+0x2a>

080014c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80014c0:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80014c2:	6801      	ldr	r1, [r0, #0]
 80014c4:	680b      	ldr	r3, [r1, #0]
 80014c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014ca:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80014cc:	2320      	movs	r3, #32
 80014ce:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 80014d2:	f7ff fdd4 	bl	800107e <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80014d6:	2000      	movs	r0, #0
 80014d8:	bd08      	pop	{r3, pc}

080014da <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 80014da:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80014de:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b22      	cmp	r3, #34	; 0x22
 80014e6:	d006      	beq.n	80014f6 <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80014e8:	6802      	ldr	r2, [r0, #0]
 80014ea:	6993      	ldr	r3, [r2, #24]
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 80014f2:	2002      	movs	r0, #2
 80014f4:	4770      	bx	lr
{
 80014f6:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80014f8:	6803      	ldr	r3, [r0, #0]
 80014fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014fc:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014fe:	6881      	ldr	r1, [r0, #8]
 8001500:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001504:	d00f      	beq.n	8001526 <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001506:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8001508:	1c4c      	adds	r4, r1, #1
 800150a:	6544      	str	r4, [r0, #84]	; 0x54
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	401a      	ands	r2, r3
 8001510:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 8001512:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8001516:	b29b      	uxth	r3, r3
 8001518:	3b01      	subs	r3, #1
 800151a:	b29b      	uxth	r3, r3
 800151c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8001520:	b15b      	cbz	r3, 800153a <UART_Receive_IT+0x60>
    return HAL_OK;
 8001522:	2000      	movs	r0, #0
  }
}
 8001524:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001526:	6901      	ldr	r1, [r0, #16]
 8001528:	2900      	cmp	r1, #0
 800152a:	d1ec      	bne.n	8001506 <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 800152c:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 800152e:	401a      	ands	r2, r3
 8001530:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 8001532:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001534:	3302      	adds	r3, #2
 8001536:	6543      	str	r3, [r0, #84]	; 0x54
 8001538:	e7eb      	b.n	8001512 <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800153a:	6802      	ldr	r2, [r0, #0]
 800153c:	6813      	ldr	r3, [r2, #0]
 800153e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001542:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001544:	6802      	ldr	r2, [r0, #0]
 8001546:	6893      	ldr	r3, [r2, #8]
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800154e:	2320      	movs	r3, #32
 8001550:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8001554:	f000 f8c2 	bl	80016dc <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8001558:	2000      	movs	r0, #0
 800155a:	bd10      	pop	{r4, pc}

0800155c <HAL_UART_IRQHandler>:
{
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001560:	6802      	ldr	r2, [r0, #0]
 8001562:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001564:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 8001566:	f013 050f 	ands.w	r5, r3, #15
 800156a:	d105      	bne.n	8001578 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800156c:	f013 0f20 	tst.w	r3, #32
 8001570:	d002      	beq.n	8001578 <HAL_UART_IRQHandler+0x1c>
 8001572:	f011 0f20 	tst.w	r1, #32
 8001576:	d160      	bne.n	800163a <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 8001578:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 800157a:	2d00      	cmp	r5, #0
 800157c:	d072      	beq.n	8001664 <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800157e:	f010 0501 	ands.w	r5, r0, #1
 8001582:	d102      	bne.n	800158a <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001584:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001588:	d06c      	beq.n	8001664 <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800158a:	f013 0f01 	tst.w	r3, #1
 800158e:	d007      	beq.n	80015a0 <HAL_UART_IRQHandler+0x44>
 8001590:	f411 7f80 	tst.w	r1, #256	; 0x100
 8001594:	d004      	beq.n	80015a0 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8001596:	2001      	movs	r0, #1
 8001598:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800159a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800159c:	4302      	orrs	r2, r0
 800159e:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015a0:	f013 0f02 	tst.w	r3, #2
 80015a4:	d007      	beq.n	80015b6 <HAL_UART_IRQHandler+0x5a>
 80015a6:	b135      	cbz	r5, 80015b6 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80015a8:	6822      	ldr	r2, [r4, #0]
 80015aa:	2002      	movs	r0, #2
 80015ac:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80015ae:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80015b0:	f042 0204 	orr.w	r2, r2, #4
 80015b4:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015b6:	f013 0f04 	tst.w	r3, #4
 80015ba:	d007      	beq.n	80015cc <HAL_UART_IRQHandler+0x70>
 80015bc:	b135      	cbz	r5, 80015cc <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80015be:	6822      	ldr	r2, [r4, #0]
 80015c0:	2004      	movs	r0, #4
 80015c2:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80015c4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80015c6:	f042 0202 	orr.w	r2, r2, #2
 80015ca:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80015cc:	f013 0f08 	tst.w	r3, #8
 80015d0:	d009      	beq.n	80015e6 <HAL_UART_IRQHandler+0x8a>
 80015d2:	f011 0f20 	tst.w	r1, #32
 80015d6:	d100      	bne.n	80015da <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80015d8:	b12d      	cbz	r5, 80015e6 <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80015da:	6822      	ldr	r2, [r4, #0]
 80015dc:	2008      	movs	r0, #8
 80015de:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80015e0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80015e2:	4302      	orrs	r2, r0
 80015e4:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80015e6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80015e8:	2a00      	cmp	r2, #0
 80015ea:	d04d      	beq.n	8001688 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015ec:	f013 0f20 	tst.w	r3, #32
 80015f0:	d002      	beq.n	80015f8 <HAL_UART_IRQHandler+0x9c>
 80015f2:	f011 0f20 	tst.w	r1, #32
 80015f6:	d123      	bne.n	8001640 <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80015f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80015fa:	f013 0f08 	tst.w	r3, #8
 80015fe:	d104      	bne.n	800160a <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001604:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001608:	d026      	beq.n	8001658 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 800160a:	4620      	mov	r0, r4
 800160c:	f7ff fcac 	bl	8000f68 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001618:	d01a      	beq.n	8001650 <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001620:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001624:	b183      	cbz	r3, 8001648 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001626:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <HAL_UART_IRQHandler+0x158>)
 8001628:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800162a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800162c:	f7fe fe7d 	bl	800032a <HAL_DMA_Abort_IT>
 8001630:	b350      	cbz	r0, 8001688 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001632:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001634:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001636:	4798      	blx	r3
 8001638:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 800163a:	f7ff ff4e 	bl	80014da <UART_Receive_IT>
      return;
 800163e:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 8001640:	4620      	mov	r0, r4
 8001642:	f7ff ff4a 	bl	80014da <UART_Receive_IT>
 8001646:	e7d7      	b.n	80015f8 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8001648:	4620      	mov	r0, r4
 800164a:	f7ff fd19 	bl	8001080 <HAL_UART_ErrorCallback>
 800164e:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8001650:	4620      	mov	r0, r4
 8001652:	f7ff fd15 	bl	8001080 <HAL_UART_ErrorCallback>
 8001656:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8001658:	4620      	mov	r0, r4
 800165a:	f7ff fd11 	bl	8001080 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800165e:	2300      	movs	r3, #0
 8001660:	66e3      	str	r3, [r4, #108]	; 0x6c
 8001662:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8001664:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001668:	d002      	beq.n	8001670 <HAL_UART_IRQHandler+0x114>
 800166a:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800166e:	d10c      	bne.n	800168a <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001670:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001674:	d002      	beq.n	800167c <HAL_UART_IRQHandler+0x120>
 8001676:	f011 0f80 	tst.w	r1, #128	; 0x80
 800167a:	d112      	bne.n	80016a2 <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800167c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001680:	d002      	beq.n	8001688 <HAL_UART_IRQHandler+0x12c>
 8001682:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001686:	d110      	bne.n	80016aa <HAL_UART_IRQHandler+0x14e>
 8001688:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 800168a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800168e:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8001690:	2320      	movs	r3, #32
 8001692:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8001696:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 800169a:	4620      	mov	r0, r4
 800169c:	f000 f80c 	bl	80016b8 <HAL_UARTEx_WakeupCallback>
    return;
 80016a0:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 80016a2:	4620      	mov	r0, r4
 80016a4:	f7ff fed5 	bl	8001452 <UART_Transmit_IT>
    return;
 80016a8:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 80016aa:	4620      	mov	r0, r4
 80016ac:	f7ff ff08 	bl	80014c0 <UART_EndTransmit_IT>
    return;
 80016b0:	e7ea      	b.n	8001688 <HAL_UART_IRQHandler+0x12c>
 80016b2:	bf00      	nop
 80016b4:	08001083 	.word	0x08001083

080016b8 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80016b8:	4770      	bx	lr
	...

080016bc <MX_GPIO_Init>:
}

/** Pinout Configuration
 */
static void MX_GPIO_Init(void)
{
 80016bc:	b082      	sub	sp, #8

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_GPIO_Init+0x1c>)
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80016c6:	615a      	str	r2, [r3, #20]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	9b01      	ldr	r3, [sp, #4]

}
 80016d2:	b002      	add	sp, #8
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	uartRXFlag  = 1U;
 80016dc:	2201      	movs	r2, #1
 80016de:	4b01      	ldr	r3, [pc, #4]	; (80016e4 <HAL_UART_RxCpltCallback+0x8>)
 80016e0:	701a      	strb	r2, [r3, #0]
 80016e2:	4770      	bx	lr
 80016e4:	20000021 	.word	0x20000021

080016e8 <clearBuff>:
}

void clearBuff(uint8_t *buffer)
{
	int i = 0;
	for(i=0;i<40;i++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	e002      	b.n	80016f2 <clearBuff+0xa>
		buffer[i] = 0;
 80016ec:	2200      	movs	r2, #0
 80016ee:	54c2      	strb	r2, [r0, r3]
	for(i=0;i<40;i++)
 80016f0:	3301      	adds	r3, #1
 80016f2:	2b27      	cmp	r3, #39	; 0x27
 80016f4:	ddfa      	ble.n	80016ec <clearBuff+0x4>

}
 80016f6:	4770      	bx	lr

080016f8 <_Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void _Error_Handler(char * file, int line)
{
 80016f8:	e7fe      	b.n	80016f8 <_Error_Handler>
	...

080016fc <MX_USART1_UART_Init>:
{
 80016fc:	b508      	push	{r3, lr}
	huart1.Instance = USART1;
 80016fe:	480d      	ldr	r0, [pc, #52]	; (8001734 <MX_USART1_UART_Init+0x38>)
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <MX_USART1_UART_Init+0x3c>)
 8001702:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 115200;
 8001704:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001708:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	2300      	movs	r3, #0
 800170c:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800170e:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001710:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001712:	220c      	movs	r2, #12
 8001714:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001718:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800171c:	61c2      	str	r2, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800171e:	6203      	str	r3, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001720:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001722:	f7ff fe62 	bl	80013ea <HAL_UART_Init>
 8001726:	b900      	cbnz	r0, 800172a <MX_USART1_UART_Init+0x2e>
 8001728:	bd08      	pop	{r3, pc}
		_Error_Handler(__FILE__, __LINE__);
 800172a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800172e:	4803      	ldr	r0, [pc, #12]	; (800173c <MX_USART1_UART_Init+0x40>)
 8001730:	f7ff ffe2 	bl	80016f8 <_Error_Handler>
 8001734:	2000002c 	.word	0x2000002c
 8001738:	40013800 	.word	0x40013800
 800173c:	08001bc4 	.word	0x08001bc4

08001740 <SystemClock_Config>:
{
 8001740:	b500      	push	{lr}
 8001742:	b097      	sub	sp, #92	; 0x5c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001744:	2302      	movs	r3, #2
 8001746:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001748:	2301      	movs	r3, #1
 800174a:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800174c:	2310      	movs	r3, #16
 800174e:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001750:	2300      	movs	r3, #0
 8001752:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001754:	a80c      	add	r0, sp, #48	; 0x30
 8001756:	f7fe fed7 	bl	8000508 <HAL_RCC_OscConfig>
 800175a:	bb30      	cbnz	r0, 80017aa <SystemClock_Config+0x6a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175c:	230f      	movs	r3, #15
 800175e:	9307      	str	r3, [sp, #28]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001760:	2100      	movs	r1, #0
 8001762:	9108      	str	r1, [sp, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001764:	9109      	str	r1, [sp, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001766:	910a      	str	r1, [sp, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001768:	910b      	str	r1, [sp, #44]	; 0x2c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800176a:	a807      	add	r0, sp, #28
 800176c:	f7ff fa0a 	bl	8000b84 <HAL_RCC_ClockConfig>
 8001770:	b9f8      	cbnz	r0, 80017b2 <SystemClock_Config+0x72>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001772:	2301      	movs	r3, #1
 8001774:	9300      	str	r3, [sp, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001776:	2300      	movs	r3, #0
 8001778:	9302      	str	r3, [sp, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177a:	4668      	mov	r0, sp
 800177c:	f7ff fb1e 	bl	8000dbc <HAL_RCCEx_PeriphCLKConfig>
 8001780:	b9d8      	cbnz	r0, 80017ba <SystemClock_Config+0x7a>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001782:	f7ff fae9 	bl	8000d58 <HAL_RCC_GetHCLKFreq>
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <SystemClock_Config+0x84>)
 8001788:	fba3 3000 	umull	r3, r0, r3, r0
 800178c:	0980      	lsrs	r0, r0, #6
 800178e:	f7fe fda1 	bl	80002d4 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001792:	2004      	movs	r0, #4
 8001794:	f7fe fdb4 	bl	8000300 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	4611      	mov	r1, r2
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f7fe fd5a 	bl	8000258 <HAL_NVIC_SetPriority>
}
 80017a4:	b017      	add	sp, #92	; 0x5c
 80017a6:	f85d fb04 	ldr.w	pc, [sp], #4
		_Error_Handler(__FILE__, __LINE__);
 80017aa:	21ec      	movs	r1, #236	; 0xec
 80017ac:	4806      	ldr	r0, [pc, #24]	; (80017c8 <SystemClock_Config+0x88>)
 80017ae:	f7ff ffa3 	bl	80016f8 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 80017b2:	21fa      	movs	r1, #250	; 0xfa
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <SystemClock_Config+0x88>)
 80017b6:	f7ff ff9f 	bl	80016f8 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 80017ba:	f240 1101 	movw	r1, #257	; 0x101
 80017be:	4802      	ldr	r0, [pc, #8]	; (80017c8 <SystemClock_Config+0x88>)
 80017c0:	f7ff ff9a 	bl	80016f8 <_Error_Handler>
 80017c4:	10624dd3 	.word	0x10624dd3
 80017c8:	08001bc4 	.word	0x08001bc4

080017cc <main>:
{
 80017cc:	b508      	push	{r3, lr}
	HAL_Init();
 80017ce:	f7fe fd11 	bl	80001f4 <HAL_Init>
	SystemClock_Config();
 80017d2:	f7ff ffb5 	bl	8001740 <SystemClock_Config>
	MX_GPIO_Init();
 80017d6:	f7ff ff71 	bl	80016bc <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80017da:	f7ff ff8f 	bl	80016fc <MX_USART1_UART_Init>
	HAL_UART_Receive_IT(&huart1, uartRXBuff, 1);
 80017de:	2201      	movs	r2, #1
 80017e0:	495f      	ldr	r1, [pc, #380]	; (8001960 <main+0x194>)
 80017e2:	4860      	ldr	r0, [pc, #384]	; (8001964 <main+0x198>)
 80017e4:	f7ff fbf4 	bl	8000fd0 <HAL_UART_Receive_IT>
 80017e8:	e020      	b.n	800182c <main+0x60>
				position = 0;
 80017ea:	4b5f      	ldr	r3, [pc, #380]	; (8001968 <main+0x19c>)
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	e029      	b.n	8001844 <main+0x78>
					uartTXBuff[0] = buffer[0];
 80017f0:	495e      	ldr	r1, [pc, #376]	; (800196c <main+0x1a0>)
 80017f2:	700b      	strb	r3, [r1, #0]
					uartTXBuff[1] = buffer[1];
 80017f4:	704c      	strb	r4, [r1, #1]
					uartTXBuff[2] = ',';
 80017f6:	232c      	movs	r3, #44	; 0x2c
 80017f8:	708b      	strb	r3, [r1, #2]
					uartTXBuff[3] = '1';
 80017fa:	2031      	movs	r0, #49	; 0x31
 80017fc:	70c8      	strb	r0, [r1, #3]
					uartTXBuff[4] = '8';
 80017fe:	2338      	movs	r3, #56	; 0x38
 8001800:	710b      	strb	r3, [r1, #4]
					uartTXBuff[5] = '3';
 8001802:	2333      	movs	r3, #51	; 0x33
 8001804:	714b      	strb	r3, [r1, #5]
					uartTXBuff[6] = '2';
 8001806:	2432      	movs	r4, #50	; 0x32
 8001808:	718c      	strb	r4, [r1, #6]
					uartTXBuff[7] = '1';
 800180a:	71c8      	strb	r0, [r1, #7]
					uartTXBuff[8] = '9';
 800180c:	2039      	movs	r0, #57	; 0x39
 800180e:	7208      	strb	r0, [r1, #8]
					uartTXBuff[9] = '3';
 8001810:	724b      	strb	r3, [r1, #9]
					uartTXBuff[10] = '3';
 8001812:	728b      	strb	r3, [r1, #10]
					uartTXBuff[11] = buffer[2];
 8001814:	4b56      	ldr	r3, [pc, #344]	; (8001970 <main+0x1a4>)
 8001816:	7898      	ldrb	r0, [r3, #2]
 8001818:	72c8      	strb	r0, [r1, #11]
					uartTXBuff[12] = buffer[3];
 800181a:	78db      	ldrb	r3, [r3, #3]
 800181c:	730b      	strb	r3, [r1, #12]
					HAL_UART_Transmit_IT(&huart1, uartTXBuff, (position +1 + 8));
 800181e:	3209      	adds	r2, #9
 8001820:	4850      	ldr	r0, [pc, #320]	; (8001964 <main+0x198>)
 8001822:	f7ff fbaf 	bl	8000f84 <HAL_UART_Transmit_IT>
				clearBuff(buffer);
 8001826:	4852      	ldr	r0, [pc, #328]	; (8001970 <main+0x1a4>)
 8001828:	f7ff ff5e 	bl	80016e8 <clearBuff>
		if(uartRXFlag == 1U)
 800182c:	4b51      	ldr	r3, [pc, #324]	; (8001974 <main+0x1a8>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d1fa      	bne.n	800182c <main+0x60>
			uartRXFlag = 0U;
 8001836:	2200      	movs	r2, #0
 8001838:	4b4e      	ldr	r3, [pc, #312]	; (8001974 <main+0x1a8>)
 800183a:	701a      	strb	r2, [r3, #0]
			if(uartRXBuff[0] == '$')
 800183c:	4b48      	ldr	r3, [pc, #288]	; (8001960 <main+0x194>)
 800183e:	7819      	ldrb	r1, [r3, #0]
 8001840:	2924      	cmp	r1, #36	; 0x24
 8001842:	d0d2      	beq.n	80017ea <main+0x1e>
			buffer[position] = uartRXBuff[0];
 8001844:	4a48      	ldr	r2, [pc, #288]	; (8001968 <main+0x19c>)
 8001846:	7813      	ldrb	r3, [r2, #0]
 8001848:	4c49      	ldr	r4, [pc, #292]	; (8001970 <main+0x1a4>)
 800184a:	54e1      	strb	r1, [r4, r3]
			position ++;
 800184c:	3301      	adds	r3, #1
 800184e:	7013      	strb	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart1, uartRXBuff, 1);
 8001850:	2201      	movs	r2, #1
 8001852:	4943      	ldr	r1, [pc, #268]	; (8001960 <main+0x194>)
 8001854:	4843      	ldr	r0, [pc, #268]	; (8001964 <main+0x198>)
 8001856:	f7ff fbbb 	bl	8000fd0 <HAL_UART_Receive_IT>
			if(buffer[0] == '$' && buffer[position-2] == '\r' && buffer[position-1] == '\n')
 800185a:	7823      	ldrb	r3, [r4, #0]
 800185c:	2b24      	cmp	r3, #36	; 0x24
 800185e:	d1e5      	bne.n	800182c <main+0x60>
 8001860:	4a41      	ldr	r2, [pc, #260]	; (8001968 <main+0x19c>)
 8001862:	7812      	ldrb	r2, [r2, #0]
 8001864:	1e91      	subs	r1, r2, #2
 8001866:	5c61      	ldrb	r1, [r4, r1]
 8001868:	290d      	cmp	r1, #13
 800186a:	d1df      	bne.n	800182c <main+0x60>
 800186c:	1e50      	subs	r0, r2, #1
 800186e:	5c20      	ldrb	r0, [r4, r0]
 8001870:	280a      	cmp	r0, #10
 8001872:	d1db      	bne.n	800182c <main+0x60>
				switch(buffer[1])
 8001874:	7864      	ldrb	r4, [r4, #1]
 8001876:	2c46      	cmp	r4, #70	; 0x46
 8001878:	d004      	beq.n	8001884 <main+0xb8>
 800187a:	2c47      	cmp	r4, #71	; 0x47
 800187c:	d032      	beq.n	80018e4 <main+0x118>
 800187e:	2c41      	cmp	r4, #65	; 0x41
 8001880:	d1d1      	bne.n	8001826 <main+0x5a>
 8001882:	e7b5      	b.n	80017f0 <main+0x24>
					uartTXBuff[0] = buffer[0];
 8001884:	4d39      	ldr	r5, [pc, #228]	; (800196c <main+0x1a0>)
 8001886:	702b      	strb	r3, [r5, #0]
					uartTXBuff[1] = buffer[1];
 8001888:	706c      	strb	r4, [r5, #1]
					uartTXBuff[2] = buffer[position-2];
 800188a:	70a9      	strb	r1, [r5, #2]
					uartTXBuff[3] = buffer[position-1];
 800188c:	70e8      	strb	r0, [r5, #3]
					if(position == 6)
 800188e:	2a06      	cmp	r2, #6
 8001890:	d00a      	beq.n	80018a8 <main+0xdc>
					else if(position == 7)
 8001892:	2a07      	cmp	r2, #7
 8001894:	d010      	beq.n	80018b8 <main+0xec>
					else if (position == 8)
 8001896:	2a08      	cmp	r2, #8
 8001898:	d018      	beq.n	80018cc <main+0x100>
					HAL_UART_Transmit_IT(&huart1, uartTXBuff, position-2);
 800189a:	3a02      	subs	r2, #2
 800189c:	b292      	uxth	r2, r2
 800189e:	4933      	ldr	r1, [pc, #204]	; (800196c <main+0x1a0>)
 80018a0:	4830      	ldr	r0, [pc, #192]	; (8001964 <main+0x198>)
 80018a2:	f7ff fb6f 	bl	8000f84 <HAL_UART_Transmit_IT>
					break;
 80018a6:	e7be      	b.n	8001826 <main+0x5a>
						getTemp[0] = buffer[3];
 80018a8:	4b31      	ldr	r3, [pc, #196]	; (8001970 <main+0x1a4>)
 80018aa:	78d9      	ldrb	r1, [r3, #3]
 80018ac:	4b32      	ldr	r3, [pc, #200]	; (8001978 <main+0x1ac>)
 80018ae:	7019      	strb	r1, [r3, #0]
						tempL = 1;
 80018b0:	2101      	movs	r1, #1
 80018b2:	4b32      	ldr	r3, [pc, #200]	; (800197c <main+0x1b0>)
 80018b4:	7019      	strb	r1, [r3, #0]
 80018b6:	e7f0      	b.n	800189a <main+0xce>
						getTemp[0] = buffer[3];
 80018b8:	492d      	ldr	r1, [pc, #180]	; (8001970 <main+0x1a4>)
 80018ba:	78c8      	ldrb	r0, [r1, #3]
 80018bc:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <main+0x1ac>)
 80018be:	7018      	strb	r0, [r3, #0]
						getTemp[1] = buffer[4];
 80018c0:	7909      	ldrb	r1, [r1, #4]
 80018c2:	7059      	strb	r1, [r3, #1]
						tempL = 2;
 80018c4:	2102      	movs	r1, #2
 80018c6:	4b2d      	ldr	r3, [pc, #180]	; (800197c <main+0x1b0>)
 80018c8:	7019      	strb	r1, [r3, #0]
 80018ca:	e7e6      	b.n	800189a <main+0xce>
						getTemp[0] = buffer[3];
 80018cc:	4928      	ldr	r1, [pc, #160]	; (8001970 <main+0x1a4>)
 80018ce:	78c8      	ldrb	r0, [r1, #3]
 80018d0:	4b29      	ldr	r3, [pc, #164]	; (8001978 <main+0x1ac>)
 80018d2:	7018      	strb	r0, [r3, #0]
						getTemp[1] = buffer[4];
 80018d4:	7908      	ldrb	r0, [r1, #4]
 80018d6:	7058      	strb	r0, [r3, #1]
						getTemp[2] = buffer[5];
 80018d8:	7949      	ldrb	r1, [r1, #5]
 80018da:	7099      	strb	r1, [r3, #2]
						tempL = 3;
 80018dc:	2103      	movs	r1, #3
 80018de:	4b27      	ldr	r3, [pc, #156]	; (800197c <main+0x1b0>)
 80018e0:	7019      	strb	r1, [r3, #0]
 80018e2:	e7da      	b.n	800189a <main+0xce>
					uartTXBuff[0] = buffer[0];
 80018e4:	4a21      	ldr	r2, [pc, #132]	; (800196c <main+0x1a0>)
 80018e6:	7013      	strb	r3, [r2, #0]
					uartTXBuff[1] = buffer[1];
 80018e8:	7054      	strb	r4, [r2, #1]
					uartTXBuff[2] = ',';
 80018ea:	232c      	movs	r3, #44	; 0x2c
 80018ec:	7093      	strb	r3, [r2, #2]
					if(tempL == 1)
 80018ee:	4b23      	ldr	r3, [pc, #140]	; (800197c <main+0x1b0>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d00a      	beq.n	800190c <main+0x140>
					else if(tempL == 2)
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d014      	beq.n	8001924 <main+0x158>
					else if(tempL == 3)
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d020      	beq.n	8001940 <main+0x174>
					HAL_UART_Transmit_IT(&huart1, uartTXBuff, position);
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <main+0x19c>)
 8001900:	781a      	ldrb	r2, [r3, #0]
 8001902:	491a      	ldr	r1, [pc, #104]	; (800196c <main+0x1a0>)
 8001904:	4817      	ldr	r0, [pc, #92]	; (8001964 <main+0x198>)
 8001906:	f7ff fb3d 	bl	8000f84 <HAL_UART_Transmit_IT>
					break;
 800190a:	e78c      	b.n	8001826 <main+0x5a>
						uartTXBuff[3] = getTemp[0];
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <main+0x1ac>)
 800190e:	781a      	ldrb	r2, [r3, #0]
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <main+0x1a0>)
 8001912:	70da      	strb	r2, [r3, #3]
						uartTXBuff[4] = '\r';
 8001914:	220d      	movs	r2, #13
 8001916:	711a      	strb	r2, [r3, #4]
						uartTXBuff[5] = '\n';
 8001918:	220a      	movs	r2, #10
 800191a:	715a      	strb	r2, [r3, #5]
						position = 6;
 800191c:	2206      	movs	r2, #6
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <main+0x19c>)
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	e7ec      	b.n	80018fe <main+0x132>
						uartTXBuff[3] = getTemp[0];
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <main+0x1ac>)
 8001926:	7811      	ldrb	r1, [r2, #0]
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <main+0x1a0>)
 800192a:	70d9      	strb	r1, [r3, #3]
						uartTXBuff[4] = getTemp[1];
 800192c:	7852      	ldrb	r2, [r2, #1]
 800192e:	711a      	strb	r2, [r3, #4]
						uartTXBuff[5] = '\r';
 8001930:	220d      	movs	r2, #13
 8001932:	715a      	strb	r2, [r3, #5]
						uartTXBuff[6] = '\n';
 8001934:	220a      	movs	r2, #10
 8001936:	719a      	strb	r2, [r3, #6]
						position = 7;
 8001938:	2207      	movs	r2, #7
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <main+0x19c>)
 800193c:	701a      	strb	r2, [r3, #0]
 800193e:	e7de      	b.n	80018fe <main+0x132>
						uartTXBuff[3] = getTemp[0];
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <main+0x1ac>)
 8001942:	7811      	ldrb	r1, [r2, #0]
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <main+0x1a0>)
 8001946:	70d9      	strb	r1, [r3, #3]
						uartTXBuff[4] = getTemp[1];
 8001948:	7851      	ldrb	r1, [r2, #1]
 800194a:	7119      	strb	r1, [r3, #4]
						uartTXBuff[5] = getTemp[2];
 800194c:	7892      	ldrb	r2, [r2, #2]
 800194e:	715a      	strb	r2, [r3, #5]
						uartTXBuff[6] = '\r';
 8001950:	220d      	movs	r2, #13
 8001952:	719a      	strb	r2, [r3, #6]
						uartTXBuff[7] = '\n';
 8001954:	220a      	movs	r2, #10
 8001956:	71da      	strb	r2, [r3, #7]
						position = 8;
 8001958:	2208      	movs	r2, #8
 800195a:	4b03      	ldr	r3, [pc, #12]	; (8001968 <main+0x19c>)
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	e7ce      	b.n	80018fe <main+0x132>
 8001960:	200000c4 	.word	0x200000c4
 8001964:	2000002c 	.word	0x2000002c
 8001968:	20000028 	.word	0x20000028
 800196c:	200000ec 	.word	0x200000ec
 8001970:	2000009c 	.word	0x2000009c
 8001974:	20000021 	.word	0x20000021
 8001978:	20000114 	.word	0x20000114
 800197c:	20000020 	.word	0x20000020

08001980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b500      	push	{lr}
 8001982:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_MspInit+0x78>)
 8001986:	699a      	ldr	r2, [r3, #24]
 8001988:	f042 0201 	orr.w	r2, r2, #1
 800198c:	619a      	str	r2, [r3, #24]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001998:	2003      	movs	r0, #3
 800199a:	f7fe fc4b 	bl	8000234 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	4611      	mov	r1, r2
 80019a2:	f06f 000b 	mvn.w	r0, #11
 80019a6:	f7fe fc57 	bl	8000258 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	4611      	mov	r1, r2
 80019ae:	f06f 000a 	mvn.w	r0, #10
 80019b2:	f7fe fc51 	bl	8000258 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	4611      	mov	r1, r2
 80019ba:	f06f 0009 	mvn.w	r0, #9
 80019be:	f7fe fc4b 	bl	8000258 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	4611      	mov	r1, r2
 80019c6:	f06f 0004 	mvn.w	r0, #4
 80019ca:	f7fe fc45 	bl	8000258 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	4611      	mov	r1, r2
 80019d2:	f06f 0003 	mvn.w	r0, #3
 80019d6:	f7fe fc3f 	bl	8000258 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	4611      	mov	r1, r2
 80019de:	f06f 0001 	mvn.w	r0, #1
 80019e2:	f7fe fc39 	bl	8000258 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	4611      	mov	r1, r2
 80019ea:	f04f 30ff 	mov.w	r0, #4294967295
 80019ee:	f7fe fc33 	bl	8000258 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f2:	b003      	add	sp, #12
 80019f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80019f8:	40021000 	.word	0x40021000

080019fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80019fc:	6802      	ldr	r2, [r0, #0]
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_UART_MspInit+0x58>)
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d000      	beq.n	8001a06 <HAL_UART_MspInit+0xa>
 8001a04:	4770      	bx	lr
{
 8001a06:	b500      	push	{lr}
 8001a08:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a0a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001a0e:	699a      	ldr	r2, [r3, #24]
 8001a10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a14:	619a      	str	r2, [r3, #24]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a20:	2330      	movs	r3, #48	; 0x30
 8001a22:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a30:	2307      	movs	r3, #7
 8001a32:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a34:	a901      	add	r1, sp, #4
 8001a36:	4808      	ldr	r0, [pc, #32]	; (8001a58 <HAL_UART_MspInit+0x5c>)
 8001a38:	f7fe fc9c 	bl	8000374 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	4611      	mov	r1, r2
 8001a40:	2025      	movs	r0, #37	; 0x25
 8001a42:	f7fe fc09 	bl	8000258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a46:	2025      	movs	r0, #37	; 0x25
 8001a48:	f7fe fc38 	bl	80002bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a4c:	b007      	add	sp, #28
 8001a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a52:	bf00      	nop
 8001a54:	40013800 	.word	0x40013800
 8001a58:	48000800 	.word	0x48000800

08001a5c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001a5c:	4770      	bx	lr

08001a5e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001a5e:	e7fe      	b.n	8001a5e <HardFault_Handler>

08001a60 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001a60:	e7fe      	b.n	8001a60 <MemManage_Handler>

08001a62 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001a62:	e7fe      	b.n	8001a62 <BusFault_Handler>

08001a64 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001a64:	e7fe      	b.n	8001a64 <UsageFault_Handler>

08001a66 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001a66:	4770      	bx	lr

08001a68 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001a68:	4770      	bx	lr

08001a6a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001a6a:	4770      	bx	lr

08001a6c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001a6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6e:	f7fe fbd3 	bl	8000218 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001a72:	f7fe fc56 	bl	8000322 <HAL_SYSTICK_IRQHandler>
 8001a76:	bd08      	pop	{r3, pc}

08001a78 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 8001a78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a7a:	4802      	ldr	r0, [pc, #8]	; (8001a84 <USART1_IRQHandler+0xc>)
 8001a7c:	f7ff fd6e 	bl	800155c <HAL_UART_IRQHandler>
 8001a80:	bd08      	pop	{r3, pc}
 8001a82:	bf00      	nop
 8001a84:	2000002c 	.word	0x2000002c

08001a88 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a88:	4915      	ldr	r1, [pc, #84]	; (8001ae0 <SystemInit+0x58>)
 8001a8a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <SystemInit+0x5c>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001aa0:	6858      	ldr	r0, [r3, #4]
 8001aa2:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <SystemInit+0x60>)
 8001aa4:	4002      	ands	r2, r0
 8001aa6:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001aae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ab2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001aba:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001ac2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac6:	f022 020f 	bic.w	r2, r2, #15
 8001aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001acc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ace:	4a07      	ldr	r2, [pc, #28]	; (8001aec <SystemInit+0x64>)
 8001ad0:	4002      	ands	r2, r0
 8001ad2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ad8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001adc:	608b      	str	r3, [r1, #8]
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	f87fc00c 	.word	0xf87fc00c
 8001aec:	ff00fccc 	.word	0xff00fccc

08001af0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b28 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001af4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001af6:	e003      	b.n	8001b00 <LoopCopyDataInit>

08001af8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001afa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001afc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001afe:	3104      	adds	r1, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b00:	480b      	ldr	r0, [pc, #44]	; (8001b30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b08:	d3f6      	bcc.n	8001af8 <CopyDataInit>
	ldr	r2, =_sbss
 8001b0a:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b0c:	e002      	b.n	8001b14 <LoopFillZerobss>

08001b0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b10:	f842 3b04 	str.w	r3, [r2], #4

08001b14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <LoopForever+0x16>)
	cmp	r2, r3
 8001b16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b18:	d3f9      	bcc.n	8001b0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b1a:	f7ff ffb5 	bl	8001a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f000 f811 	bl	8001b44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b22:	f7ff fe53 	bl	80017cc <main>

08001b26 <LoopForever>:

LoopForever:
    b LoopForever
 8001b26:	e7fe      	b.n	8001b26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b28:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001b2c:	08001bf4 	.word	0x08001bf4
	ldr	r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b34:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001b38:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001b3c:	20000118 	.word	0x20000118

08001b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC1_2_IRQHandler>
	...

08001b44 <__libc_init_array>:
 8001b44:	b570      	push	{r4, r5, r6, lr}
 8001b46:	4e0d      	ldr	r6, [pc, #52]	; (8001b7c <__libc_init_array+0x38>)
 8001b48:	4c0d      	ldr	r4, [pc, #52]	; (8001b80 <__libc_init_array+0x3c>)
 8001b4a:	1ba4      	subs	r4, r4, r6
 8001b4c:	10a4      	asrs	r4, r4, #2
 8001b4e:	2500      	movs	r5, #0
 8001b50:	42a5      	cmp	r5, r4
 8001b52:	d109      	bne.n	8001b68 <__libc_init_array+0x24>
 8001b54:	4e0b      	ldr	r6, [pc, #44]	; (8001b84 <__libc_init_array+0x40>)
 8001b56:	4c0c      	ldr	r4, [pc, #48]	; (8001b88 <__libc_init_array+0x44>)
 8001b58:	f000 f818 	bl	8001b8c <_init>
 8001b5c:	1ba4      	subs	r4, r4, r6
 8001b5e:	10a4      	asrs	r4, r4, #2
 8001b60:	2500      	movs	r5, #0
 8001b62:	42a5      	cmp	r5, r4
 8001b64:	d105      	bne.n	8001b72 <__libc_init_array+0x2e>
 8001b66:	bd70      	pop	{r4, r5, r6, pc}
 8001b68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b6c:	4798      	blx	r3
 8001b6e:	3501      	adds	r5, #1
 8001b70:	e7ee      	b.n	8001b50 <__libc_init_array+0xc>
 8001b72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b76:	4798      	blx	r3
 8001b78:	3501      	adds	r5, #1
 8001b7a:	e7f2      	b.n	8001b62 <__libc_init_array+0x1e>
 8001b7c:	08001bec 	.word	0x08001bec
 8001b80:	08001bec 	.word	0x08001bec
 8001b84:	08001bec 	.word	0x08001bec
 8001b88:	08001bf0 	.word	0x08001bf0

08001b8c <_init>:
 8001b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8e:	bf00      	nop
 8001b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b92:	bc08      	pop	{r3}
 8001b94:	469e      	mov	lr, r3
 8001b96:	4770      	bx	lr

08001b98 <_fini>:
 8001b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9a:	bf00      	nop
 8001b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b9e:	bc08      	pop	{r3}
 8001ba0:	469e      	mov	lr, r3
 8001ba2:	4770      	bx	lr
