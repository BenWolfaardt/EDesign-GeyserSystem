
E:\EDesign\V2.1\EDesign\Debug\EDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003848  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003a40  08003a40  00013a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003a44  08003a44  00013a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08003a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  7 .bss          000001cc  20000070  20000070  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000023c  2000023c  00020070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012fa6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002480  00000000  00000000  00033046  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000057b3  00000000  00000000  000354c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000007f8  00000000  00000000  0003ac80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000007a8  00000000  00000000  0003b478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001d4b7  00000000  00000000  0003bc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008787  00000000  00000000  000590d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000a2f95  00000000  00000000  0006185e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  001047f3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001718  00000000  00000000  00104870  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080039b8 	.word	0x080039b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080039b8 	.word	0x080039b8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2uiz>:
 8000a98:	004a      	lsls	r2, r1, #1
 8000a9a:	d211      	bcs.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d211      	bcs.n	8000ac6 <__aeabi_d2uiz+0x2e>
 8000aa2:	d50d      	bpl.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d40e      	bmi.n	8000acc <__aeabi_d2uiz+0x34>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	4770      	bx	lr
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_d2uiz+0x3a>
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0000 	mov.w	r0, #0
 8000ad6:	4770      	bx	lr

08000ad8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b510      	push	{r4, lr}
 8000ada:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <HAL_InitTick+0x24>)
 8000ade:	6818      	ldr	r0, [r3, #0]
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <HAL_InitTick+0x28>)
 8000ae2:	fba3 3000 	umull	r3, r0, r3, r0
 8000ae6:	0980      	lsrs	r0, r0, #6
 8000ae8:	f000 fe14 	bl	8001714 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	4621      	mov	r1, r4
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 fdd0 	bl	8001698 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000af8:	2000      	movs	r0, #0
 8000afa:	bd10      	pop	{r4, pc}
 8000afc:	20000000 	.word	0x20000000
 8000b00:	10624dd3 	.word	0x10624dd3

08000b04 <HAL_Init>:
{
 8000b04:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b06:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_Init+0x20>)
 8000b08:	6813      	ldr	r3, [r2, #0]
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 fdaf 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff ffde 	bl	8000ad8 <HAL_InitTick>
  HAL_MspInit();
 8000b1c:	f002 f994 	bl	8002e48 <HAL_MspInit>
}
 8000b20:	2000      	movs	r0, #0
 8000b22:	bd08      	pop	{r3, pc}
 8000b24:	40022000 	.word	0x40022000

08000b28 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000b28:	4a02      	ldr	r2, [pc, #8]	; (8000b34 <HAL_IncTick+0xc>)
 8000b2a:	6813      	ldr	r3, [r2, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	2000009c 	.word	0x2000009c

08000b38 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000b38:	4b01      	ldr	r3, [pc, #4]	; (8000b40 <HAL_GetTick+0x8>)
 8000b3a:	6818      	ldr	r0, [r3, #0]
}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	2000009c 	.word	0x2000009c

08000b44 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000b44:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000b46:	6802      	ldr	r2, [r0, #0]
 8000b48:	6893      	ldr	r3, [r2, #8]
 8000b4a:	f003 0303 	and.w	r3, r3, #3
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d011      	beq.n	8000b76 <ADC_Disable+0x32>
 8000b52:	2300      	movs	r3, #0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d037      	beq.n	8000bc8 <ADC_Disable+0x84>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000b58:	6893      	ldr	r3, [r2, #8]
 8000b5a:	f003 030d 	and.w	r3, r3, #13
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d011      	beq.n	8000b86 <ADC_Disable+0x42>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b62:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000b64:	f043 0310 	orr.w	r3, r3, #16
 8000b68:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b6a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 8000b72:	2001      	movs	r0, #1
 8000b74:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000b76:	6813      	ldr	r3, [r2, #0]
 8000b78:	f013 0f01 	tst.w	r3, #1
 8000b7c:	d101      	bne.n	8000b82 <ADC_Disable+0x3e>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e7e8      	b.n	8000b54 <ADC_Disable+0x10>
 8000b82:	2301      	movs	r3, #1
 8000b84:	e7e6      	b.n	8000b54 <ADC_Disable+0x10>
 8000b86:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8000b88:	6893      	ldr	r3, [r2, #8]
 8000b8a:	f043 0302 	orr.w	r3, r3, #2
 8000b8e:	6093      	str	r3, [r2, #8]
 8000b90:	6803      	ldr	r3, [r0, #0]
 8000b92:	2203      	movs	r2, #3
 8000b94:	601a      	str	r2, [r3, #0]
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000b96:	f7ff ffcf 	bl	8000b38 <HAL_GetTick>
 8000b9a:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000b9c:	6823      	ldr	r3, [r4, #0]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f013 0f01 	tst.w	r3, #1
 8000ba4:	d00e      	beq.n	8000bc4 <ADC_Disable+0x80>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ba6:	f7ff ffc7 	bl	8000b38 <HAL_GetTick>
 8000baa:	1b40      	subs	r0, r0, r5
 8000bac:	2802      	cmp	r0, #2
 8000bae:	d9f5      	bls.n	8000b9c <ADC_Disable+0x58>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	bd38      	pop	{r3, r4, r5, pc}
 8000bc8:	2000      	movs	r0, #0
}
 8000bca:	bd38      	pop	{r3, r4, r5, pc}

08000bcc <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8000bcc:	6803      	ldr	r3, [r0, #0]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	f012 0f0c 	tst.w	r2, #12
 8000bd4:	d062      	beq.n	8000c9c <ADC_ConversionStop+0xd0>
{
 8000bd6:	b570      	push	{r4, r5, r6, lr}
 8000bd8:	4604      	mov	r4, r0
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000be0:	d002      	beq.n	8000be8 <ADC_ConversionStop+0x1c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8000be2:	69c2      	ldr	r2, [r0, #28]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8000be4:	2a01      	cmp	r2, #1
 8000be6:	d038      	beq.n	8000c5a <ADC_ConversionStop+0x8e>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8000be8:	2960      	cmp	r1, #96	; 0x60
 8000bea:	d00c      	beq.n	8000c06 <ADC_ConversionStop+0x3a>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000bec:	6823      	ldr	r3, [r4, #0]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	f012 0f04 	tst.w	r2, #4
 8000bf4:	d007      	beq.n	8000c06 <ADC_ConversionStop+0x3a>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8000bf6:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000bf8:	f012 0f02 	tst.w	r2, #2
 8000bfc:	d103      	bne.n	8000c06 <ADC_ConversionStop+0x3a>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	f042 0210 	orr.w	r2, r2, #16
 8000c04:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8000c06:	290c      	cmp	r1, #12
 8000c08:	d00c      	beq.n	8000c24 <ADC_ConversionStop+0x58>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8000c0a:	6823      	ldr	r3, [r4, #0]
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	f012 0f08 	tst.w	r2, #8
 8000c12:	d007      	beq.n	8000c24 <ADC_ConversionStop+0x58>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8000c14:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8000c16:	f012 0f02 	tst.w	r2, #2
 8000c1a:	d103      	bne.n	8000c24 <ADC_ConversionStop+0x58>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	f042 0220 	orr.w	r2, r2, #32
 8000c22:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8000c24:	2960      	cmp	r1, #96	; 0x60
 8000c26:	d035      	beq.n	8000c94 <ADC_ConversionStop+0xc8>
 8000c28:	296c      	cmp	r1, #108	; 0x6c
 8000c2a:	d131      	bne.n	8000c90 <ADC_ConversionStop+0xc4>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8000c2c:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8000c2e:	f7ff ff83 	bl	8000b38 <HAL_GetTick>
 8000c32:	4606      	mov	r6, r0
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8000c34:	6823      	ldr	r3, [r4, #0]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	421d      	tst	r5, r3
 8000c3a:	d02d      	beq.n	8000c98 <ADC_ConversionStop+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000c3c:	f7ff ff7c 	bl	8000b38 <HAL_GetTick>
 8000c40:	1b80      	subs	r0, r0, r6
 8000c42:	280b      	cmp	r0, #11
 8000c44:	d9f6      	bls.n	8000c34 <ADC_ConversionStop+0x68>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8000c56:	2001      	movs	r0, #1
 8000c58:	bd70      	pop	{r4, r5, r6, pc}
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8000c5a:	6982      	ldr	r2, [r0, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8000c5c:	2a01      	cmp	r2, #1
 8000c5e:	d1c3      	bne.n	8000be8 <ADC_ConversionStop+0x1c>
 8000c60:	2200      	movs	r2, #0
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8000c62:	6819      	ldr	r1, [r3, #0]
 8000c64:	f011 0f40 	tst.w	r1, #64	; 0x40
 8000c68:	d10e      	bne.n	8000c88 <ADC_ConversionStop+0xbc>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8000c6a:	490d      	ldr	r1, [pc, #52]	; (8000ca0 <ADC_ConversionStop+0xd4>)
 8000c6c:	428a      	cmp	r2, r1
 8000c6e:	d801      	bhi.n	8000c74 <ADC_ConversionStop+0xa8>
        Conversion_Timeout_CPU_cycles ++;
 8000c70:	3201      	adds	r2, #1
 8000c72:	e7f6      	b.n	8000c62 <ADC_ConversionStop+0x96>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	64a3      	str	r3, [r4, #72]	; 0x48
          return HAL_ERROR;
 8000c84:	2001      	movs	r0, #1
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8000c88:	2240      	movs	r2, #64	; 0x40
 8000c8a:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 8000c8c:	210c      	movs	r1, #12
 8000c8e:	e7ab      	b.n	8000be8 <ADC_ConversionStop+0x1c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8000c90:	2504      	movs	r5, #4
        break;
 8000c92:	e7cc      	b.n	8000c2e <ADC_ConversionStop+0x62>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8000c94:	2508      	movs	r5, #8
 8000c96:	e7ca      	b.n	8000c2e <ADC_ConversionStop+0x62>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000c98:	2000      	movs	r0, #0
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	4770      	bx	lr
 8000ca0:	000993ff 	.word	0x000993ff

08000ca4 <ADC_Enable>:
{
 8000ca4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ca6:	6802      	ldr	r2, [r0, #0]
 8000ca8:	6893      	ldr	r3, [r2, #8]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d010      	beq.n	8000cd4 <ADC_Enable+0x30>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d133      	bne.n	8000d20 <ADC_Enable+0x7c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000cb8:	6891      	ldr	r1, [r2, #8]
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <ADC_Enable+0x80>)
 8000cbc:	4219      	tst	r1, r3
 8000cbe:	d011      	beq.n	8000ce4 <ADC_Enable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cc0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000cc2:	f043 0310 	orr.w	r3, r3, #16
 8000cc6:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000cd4:	6813      	ldr	r3, [r2, #0]
 8000cd6:	f013 0f01 	tst.w	r3, #1
 8000cda:	d101      	bne.n	8000ce0 <ADC_Enable+0x3c>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e7e9      	b.n	8000cb4 <ADC_Enable+0x10>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e7e7      	b.n	8000cb4 <ADC_Enable+0x10>
 8000ce4:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8000ce6:	6893      	ldr	r3, [r2, #8]
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8000cee:	f7ff ff23 	bl	8000b38 <HAL_GetTick>
 8000cf2:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000cf4:	6823      	ldr	r3, [r4, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f013 0f01 	tst.w	r3, #1
 8000cfc:	d10e      	bne.n	8000d1c <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000cfe:	f7ff ff1b 	bl	8000b38 <HAL_GetTick>
 8000d02:	1b40      	subs	r0, r0, r5
 8000d04:	2802      	cmp	r0, #2
 8000d06:	d9f5      	bls.n	8000cf4 <ADC_Enable+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000d18:	2001      	movs	r0, #1
 8000d1a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	bd38      	pop	{r3, r4, r5, pc}
 8000d20:	2000      	movs	r0, #0
}
 8000d22:	bd38      	pop	{r3, r4, r5, pc}
 8000d24:	8000003f 	.word	0x8000003f

08000d28 <HAL_ADC_Init>:
{
 8000d28:	b530      	push	{r4, r5, lr}
 8000d2a:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000d30:	2800      	cmp	r0, #0
 8000d32:	f000 80fb 	beq.w	8000f2c <HAL_ADC_Init+0x204>
 8000d36:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d38:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000d3a:	f013 0f10 	tst.w	r3, #16
 8000d3e:	d151      	bne.n	8000de4 <HAL_ADC_Init+0xbc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d40:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000d42:	b1ab      	cbz	r3, 8000d70 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d44:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000d4e:	d003      	beq.n	8000d58 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d50:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d52:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8000d56:	d046      	beq.n	8000de6 <HAL_ADC_Init+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 8000d58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d5a:	f023 0312 	bic.w	r3, r3, #18
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	e03a      	b.n	8000de6 <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 8000d70:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000d72:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000d74:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000d76:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000d7a:	f002 f8a3 	bl	8002ec4 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d86:	d001      	beq.n	8000d8c <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e7dc      	b.n	8000d46 <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f7ff fed9 	bl	8000b44 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d94:	f013 0f10 	tst.w	r3, #16
 8000d98:	d1d5      	bne.n	8000d46 <HAL_ADC_Init+0x1e>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d1d3      	bne.n	8000d46 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8000d9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000da0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000da4:	f023 0302 	bic.w	r3, r3, #2
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000dae:	6822      	ldr	r2, [r4, #0]
 8000db0:	6893      	ldr	r3, [r2, #8]
 8000db2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000db6:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000db8:	6822      	ldr	r2, [r4, #0]
 8000dba:	6893      	ldr	r3, [r2, #8]
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dc2:	4b5b      	ldr	r3, [pc, #364]	; (8000f30 <HAL_ADC_Init+0x208>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a5b      	ldr	r2, [pc, #364]	; (8000f34 <HAL_ADC_Init+0x20c>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	0c9b      	lsrs	r3, r3, #18
 8000dce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000dd2:	005a      	lsls	r2, r3, #1
 8000dd4:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000dd6:	9b00      	ldr	r3, [sp, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0b4      	beq.n	8000d46 <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 8000ddc:	9b00      	ldr	r3, [sp, #0]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	e7f8      	b.n	8000dd6 <HAL_ADC_Init+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de4:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000de6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000de8:	f013 0f10 	tst.w	r3, #16
 8000dec:	f040 8095 	bne.w	8000f1a <HAL_ADC_Init+0x1f2>
 8000df0:	2800      	cmp	r0, #0
 8000df2:	f040 8092 	bne.w	8000f1a <HAL_ADC_Init+0x1f2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000df6:	6822      	ldr	r2, [r4, #0]
 8000df8:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000dfa:	f013 0304 	ands.w	r3, r3, #4
 8000dfe:	f040 808c 	bne.w	8000f1a <HAL_ADC_Init+0x1f2>
    ADC_STATE_CLR_SET(hadc->State,
 8000e02:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000e04:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8000e08:	f041 0102 	orr.w	r1, r1, #2
 8000e0c:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e0e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000e12:	d055      	beq.n	8000ec0 <HAL_ADC_Init+0x198>
 8000e14:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000e18:	9101      	str	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e1a:	6891      	ldr	r1, [r2, #8]
 8000e1c:	f001 0103 	and.w	r1, r1, #3
 8000e20:	2901      	cmp	r1, #1
 8000e22:	d050      	beq.n	8000ec6 <HAL_ADC_Init+0x19e>
 8000e24:	2200      	movs	r2, #0
 8000e26:	b972      	cbnz	r2, 8000e46 <HAL_ADC_Init+0x11e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e28:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e2a:	b12d      	cbz	r5, 8000e38 <HAL_ADC_Init+0x110>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e2c:	68a9      	ldr	r1, [r5, #8]
 8000e2e:	f001 0103 	and.w	r1, r1, #3
 8000e32:	2901      	cmp	r1, #1
 8000e34:	d04f      	beq.n	8000ed6 <HAL_ADC_Init+0x1ae>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e36:	b932      	cbnz	r2, 8000e46 <HAL_ADC_Init+0x11e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e38:	493f      	ldr	r1, [pc, #252]	; (8000f38 <HAL_ADC_Init+0x210>)
 8000e3a:	688a      	ldr	r2, [r1, #8]
 8000e3c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000e40:	6865      	ldr	r5, [r4, #4]
 8000e42:	432a      	orrs	r2, r5
 8000e44:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000e46:	69e2      	ldr	r2, [r4, #28]
 8000e48:	0351      	lsls	r1, r2, #13
 8000e4a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000e4c:	2d01      	cmp	r5, #1
 8000e4e:	d001      	beq.n	8000e54 <HAL_ADC_Init+0x12c>
 8000e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e54:	430b      	orrs	r3, r1
 8000e56:	68e1      	ldr	r1, [r4, #12]
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	68a1      	ldr	r1, [r4, #8]
 8000e5c:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e60:	2901      	cmp	r1, #1
 8000e62:	d03e      	beq.n	8000ee2 <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e66:	2a01      	cmp	r2, #1
 8000e68:	d002      	beq.n	8000e70 <HAL_ADC_Init+0x148>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e70:	6822      	ldr	r2, [r4, #0]
 8000e72:	6891      	ldr	r1, [r2, #8]
 8000e74:	f011 0f0c 	tst.w	r1, #12
 8000e78:	d10b      	bne.n	8000e92 <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e7a:	68d1      	ldr	r1, [r2, #12]
 8000e7c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000e80:	f021 0102 	bic.w	r1, r1, #2
 8000e84:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000e86:	69a1      	ldr	r1, [r4, #24]
 8000e88:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000e8a:	0052      	lsls	r2, r2, #1
 8000e8c:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8000e90:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8000e92:	6821      	ldr	r1, [r4, #0]
 8000e94:	68cd      	ldr	r5, [r1, #12]
 8000e96:	4a29      	ldr	r2, [pc, #164]	; (8000f3c <HAL_ADC_Init+0x214>)
 8000e98:	402a      	ands	r2, r5
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e9e:	6923      	ldr	r3, [r4, #16]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d031      	beq.n	8000f08 <HAL_ADC_Init+0x1e0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ea4:	6822      	ldr	r2, [r4, #0]
 8000ea6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ea8:	f023 030f 	bic.w	r3, r3, #15
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000eae:	2300      	movs	r3, #0
 8000eb0:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000eb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000eb4:	f023 0303 	bic.w	r3, r3, #3
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6463      	str	r3, [r4, #68]	; 0x44
 8000ebe:	e033      	b.n	8000f28 <HAL_ADC_Init+0x200>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ec0:	491f      	ldr	r1, [pc, #124]	; (8000f40 <HAL_ADC_Init+0x218>)
 8000ec2:	9101      	str	r1, [sp, #4]
 8000ec4:	e7a9      	b.n	8000e1a <HAL_ADC_Init+0xf2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ec6:	6812      	ldr	r2, [r2, #0]
 8000ec8:	f012 0f01 	tst.w	r2, #1
 8000ecc:	d101      	bne.n	8000ed2 <HAL_ADC_Init+0x1aa>
 8000ece:	2200      	movs	r2, #0
 8000ed0:	e7a9      	b.n	8000e26 <HAL_ADC_Init+0xfe>
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	e7a7      	b.n	8000e26 <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ed6:	6829      	ldr	r1, [r5, #0]
 8000ed8:	f011 0f01 	tst.w	r1, #1
 8000edc:	d0ab      	beq.n	8000e36 <HAL_ADC_Init+0x10e>
 8000ede:	2201      	movs	r2, #1
 8000ee0:	e7a9      	b.n	8000e36 <HAL_ADC_Init+0x10e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ee2:	b932      	cbnz	r2, 8000ef2 <HAL_ADC_Init+0x1ca>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000ee4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ee6:	3a01      	subs	r2, #1
 8000ee8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef0:	e7b8      	b.n	8000e64 <HAL_ADC_Init+0x13c>
        ADC_STATE_CLR_SET(hadc->State,
 8000ef2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000ef4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8000ef8:	f042 0220 	orr.w	r2, r2, #32
 8000efc:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000efe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000f00:	f042 0201 	orr.w	r2, r2, #1
 8000f04:	64a2      	str	r2, [r4, #72]	; 0x48
 8000f06:	e7ad      	b.n	8000e64 <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f08:	6821      	ldr	r1, [r4, #0]
 8000f0a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000f0c:	f023 030f 	bic.w	r3, r3, #15
 8000f10:	6a22      	ldr	r2, [r4, #32]
 8000f12:	3a01      	subs	r2, #1
 8000f14:	4313      	orrs	r3, r2
 8000f16:	630b      	str	r3, [r1, #48]	; 0x30
 8000f18:	e7c9      	b.n	8000eae <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 8000f1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f1c:	f023 0312 	bic.w	r3, r3, #18
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 8000f26:	2001      	movs	r0, #1
}
 8000f28:	b017      	add	sp, #92	; 0x5c
 8000f2a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	e7fb      	b.n	8000f28 <HAL_ADC_Init+0x200>
 8000f30:	20000000 	.word	0x20000000
 8000f34:	431bde83 	.word	0x431bde83
 8000f38:	50000300 	.word	0x50000300
 8000f3c:	fff0c007 	.word	0xfff0c007
 8000f40:	50000100 	.word	0x50000100

08000f44 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f44:	6803      	ldr	r3, [r0, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f013 0f04 	tst.w	r3, #4
 8000f4c:	d002      	beq.n	8000f54 <HAL_ADC_Start+0x10>
    tmp_hal_status = HAL_BUSY;
 8000f4e:	2302      	movs	r3, #2
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8000f54:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_ADC_Start+0x1c>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e7f7      	b.n	8000f50 <HAL_ADC_Start+0xc>
{
 8000f60:	b510      	push	{r4, lr}
 8000f62:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8000f64:	2301      	movs	r3, #1
 8000f66:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 8000f6a:	f7ff fe9b 	bl	8000ca4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d160      	bne.n	8001036 <HAL_ADC_Start+0xf2>
      ADC_STATE_CLR_SET(hadc->State,
 8000f74:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f76:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000f7a:	f022 0201 	bic.w	r2, r2, #1
 8000f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f82:	6462      	str	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f84:	4a2e      	ldr	r2, [pc, #184]	; (8001040 <HAL_ADC_Start+0xfc>)
 8000f86:	6892      	ldr	r2, [r2, #8]
 8000f88:	f012 0f1f 	tst.w	r2, #31
 8000f8c:	d033      	beq.n	8000ff6 <HAL_ADC_Start+0xb2>
 8000f8e:	6821      	ldr	r1, [r4, #0]
 8000f90:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8000f94:	d02f      	beq.n	8000ff6 <HAL_ADC_Start+0xb2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f96:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f98:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f9c:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f9e:	4a29      	ldr	r2, [pc, #164]	; (8001044 <HAL_ADC_Start+0x100>)
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d038      	beq.n	8001016 <HAL_ADC_Start+0xd2>
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fa4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000fa6:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000faa:	d041      	beq.n	8001030 <HAL_ADC_Start+0xec>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000fae:	f022 0206 	bic.w	r2, r2, #6
 8000fb2:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fba:	6822      	ldr	r2, [r4, #0]
 8000fbc:	211c      	movs	r1, #28
 8000fbe:	6011      	str	r1, [r2, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000fc0:	4a1f      	ldr	r2, [pc, #124]	; (8001040 <HAL_ADC_Start+0xfc>)
 8000fc2:	6892      	ldr	r2, [r2, #8]
 8000fc4:	f012 0f1f 	tst.w	r2, #31
 8000fc8:	d00f      	beq.n	8000fea <HAL_ADC_Start+0xa6>
 8000fca:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <HAL_ADC_Start+0xfc>)
 8000fcc:	6892      	ldr	r2, [r2, #8]
 8000fce:	f002 021f 	and.w	r2, r2, #31
 8000fd2:	2a05      	cmp	r2, #5
 8000fd4:	d009      	beq.n	8000fea <HAL_ADC_Start+0xa6>
 8000fd6:	4a1a      	ldr	r2, [pc, #104]	; (8001040 <HAL_ADC_Start+0xfc>)
 8000fd8:	6892      	ldr	r2, [r2, #8]
 8000fda:	f002 021f 	and.w	r2, r2, #31
 8000fde:	2a09      	cmp	r2, #9
 8000fe0:	d003      	beq.n	8000fea <HAL_ADC_Start+0xa6>
 8000fe2:	6822      	ldr	r2, [r4, #0]
 8000fe4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000fe8:	d128      	bne.n	800103c <HAL_ADC_Start+0xf8>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000fea:	6821      	ldr	r1, [r4, #0]
 8000fec:	688a      	ldr	r2, [r1, #8]
 8000fee:	f042 0204 	orr.w	r2, r2, #4
 8000ff2:	608a      	str	r2, [r1, #8]
 8000ff4:	e022      	b.n	800103c <HAL_ADC_Start+0xf8>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ff6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000ff8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000ffc:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ffe:	6822      	ldr	r2, [r4, #0]
 8001000:	68d2      	ldr	r2, [r2, #12]
 8001002:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001006:	d0cd      	beq.n	8000fa4 <HAL_ADC_Start+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001008:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800100a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800100e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001012:	6462      	str	r2, [r4, #68]	; 0x44
 8001014:	e7c6      	b.n	8000fa4 <HAL_ADC_Start+0x60>
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001016:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800101a:	68d2      	ldr	r2, [r2, #12]
 800101c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001020:	d0c0      	beq.n	8000fa4 <HAL_ADC_Start+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001022:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001024:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001028:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800102c:	6462      	str	r2, [r4, #68]	; 0x44
 800102e:	e7b9      	b.n	8000fa4 <HAL_ADC_Start+0x60>
        ADC_CLEAR_ERRORCODE(hadc);
 8001030:	2200      	movs	r2, #0
 8001032:	64a2      	str	r2, [r4, #72]	; 0x48
 8001034:	e7be      	b.n	8000fb4 <HAL_ADC_Start+0x70>
      __HAL_UNLOCK(hadc);
 8001036:	2200      	movs	r2, #0
 8001038:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
}
 800103c:	4618      	mov	r0, r3
 800103e:	bd10      	pop	{r4, pc}
 8001040:	50000300 	.word	0x50000300
 8001044:	50000100 	.word	0x50000100

08001048 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8001048:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800104c:	2b01      	cmp	r3, #1
 800104e:	d102      	bne.n	8001056 <HAL_ADC_Stop+0xe>
 8001050:	2302      	movs	r3, #2
}
 8001052:	4618      	mov	r0, r3
 8001054:	4770      	bx	lr
{
 8001056:	b510      	push	{r4, lr}
 8001058:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800105a:	2301      	movs	r3, #1
 800105c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001060:	216c      	movs	r1, #108	; 0x6c
 8001062:	f7ff fdb3 	bl	8000bcc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001066:	4603      	mov	r3, r0
 8001068:	b120      	cbz	r0, 8001074 <HAL_ADC_Stop+0x2c>
  __HAL_UNLOCK(hadc);
 800106a:	2200      	movs	r2, #0
 800106c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
}
 8001070:	4618      	mov	r0, r3
 8001072:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8001074:	4620      	mov	r0, r4
 8001076:	f7ff fd65 	bl	8000b44 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800107a:	4603      	mov	r3, r0
 800107c:	2800      	cmp	r0, #0
 800107e:	d1f4      	bne.n	800106a <HAL_ADC_Stop+0x22>
      ADC_STATE_CLR_SET(hadc->State,
 8001080:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001082:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001086:	f022 0201 	bic.w	r2, r2, #1
 800108a:	f042 0201 	orr.w	r2, r2, #1
 800108e:	6462      	str	r2, [r4, #68]	; 0x44
 8001090:	e7eb      	b.n	800106a <HAL_ADC_Stop+0x22>
	...

08001094 <HAL_ADC_PollForConversion>:
{
 8001094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001098:	6946      	ldr	r6, [r0, #20]
 800109a:	2e08      	cmp	r6, #8
 800109c:	d00a      	beq.n	80010b4 <HAL_ADC_PollForConversion+0x20>
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800109e:	4b42      	ldr	r3, [pc, #264]	; (80011a8 <HAL_ADC_PollForConversion+0x114>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f013 0f1f 	tst.w	r3, #31
 80010a6:	d11c      	bne.n	80010e2 <HAL_ADC_PollForConversion+0x4e>
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80010a8:	6803      	ldr	r3, [r0, #0]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	f013 0f01 	tst.w	r3, #1
 80010b0:	d10d      	bne.n	80010ce <HAL_ADC_PollForConversion+0x3a>
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80010b2:	260c      	movs	r6, #12
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010b4:	4b3c      	ldr	r3, [pc, #240]	; (80011a8 <HAL_ADC_PollForConversion+0x114>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f013 0f1f 	tst.w	r3, #31
 80010bc:	d022      	beq.n	8001104 <HAL_ADC_PollForConversion+0x70>
 80010be:	6803      	ldr	r3, [r0, #0]
 80010c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010c4:	d01e      	beq.n	8001104 <HAL_ADC_PollForConversion+0x70>
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80010c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010ca:	68df      	ldr	r7, [r3, #12]
 80010cc:	e01c      	b.n	8001108 <HAL_ADC_PollForConversion+0x74>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80010d0:	f043 0320 	orr.w	r3, r3, #32
 80010d4:	6443      	str	r3, [r0, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80010d6:	2300      	movs	r3, #0
 80010d8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        return HAL_ERROR;
 80010dc:	2001      	movs	r0, #1
 80010de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80010e2:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <HAL_ADC_PollForConversion+0x114>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 80010ea:	d101      	bne.n	80010f0 <HAL_ADC_PollForConversion+0x5c>
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80010ec:	260c      	movs	r6, #12
 80010ee:	e7e1      	b.n	80010b4 <HAL_ADC_PollForConversion+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80010f2:	f043 0320 	orr.w	r3, r3, #32
 80010f6:	6443      	str	r3, [r0, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80010f8:	2300      	movs	r3, #0
 80010fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        return HAL_ERROR;
 80010fe:	2001      	movs	r0, #1
 8001100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001104:	6803      	ldr	r3, [r0, #0]
 8001106:	68df      	ldr	r7, [r3, #12]
 8001108:	460d      	mov	r5, r1
 800110a:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();  
 800110c:	f7ff fd14 	bl	8000b38 <HAL_GetTick>
 8001110:	4680      	mov	r8, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4216      	tst	r6, r2
 8001118:	d113      	bne.n	8001142 <HAL_ADC_PollForConversion+0xae>
    if(Timeout != HAL_MAX_DELAY)
 800111a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800111e:	d0f8      	beq.n	8001112 <HAL_ADC_PollForConversion+0x7e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001120:	b12d      	cbz	r5, 800112e <HAL_ADC_PollForConversion+0x9a>
 8001122:	f7ff fd09 	bl	8000b38 <HAL_GetTick>
 8001126:	eba0 0008 	sub.w	r0, r0, r8
 800112a:	4285      	cmp	r5, r0
 800112c:	d2f1      	bcs.n	8001112 <HAL_ADC_PollForConversion+0x7e>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800112e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001136:	2300      	movs	r3, #0
 8001138:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800113c:	2003      	movs	r0, #3
 800113e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001142:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001148:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001150:	d11f      	bne.n	8001192 <HAL_ADC_PollForConversion+0xfe>
 8001152:	f417 5f00 	tst.w	r7, #8192	; 0x2000
 8001156:	d11c      	bne.n	8001192 <HAL_ADC_PollForConversion+0xfe>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	f012 0f08 	tst.w	r2, #8
 800115e:	d018      	beq.n	8001192 <HAL_ADC_PollForConversion+0xfe>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	f012 0f04 	tst.w	r2, #4
 8001166:	d10c      	bne.n	8001182 <HAL_ADC_PollForConversion+0xee>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001168:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800116a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800116e:	6462      	str	r2, [r4, #68]	; 0x44
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001170:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001172:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001176:	d10c      	bne.n	8001192 <HAL_ADC_PollForConversion+0xfe>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001178:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800117a:	f042 0201 	orr.w	r2, r2, #1
 800117e:	6462      	str	r2, [r4, #68]	; 0x44
 8001180:	e007      	b.n	8001192 <HAL_ADC_PollForConversion+0xfe>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001182:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001184:	f042 0220 	orr.w	r2, r2, #32
 8001188:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800118a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800118c:	f042 0201 	orr.w	r2, r2, #1
 8001190:	64a2      	str	r2, [r4, #72]	; 0x48
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001192:	f417 4f80 	tst.w	r7, #16384	; 0x4000
 8001196:	d103      	bne.n	80011a0 <HAL_ADC_PollForConversion+0x10c>
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001198:	601e      	str	r6, [r3, #0]
  return HAL_OK;
 800119a:	2000      	movs	r0, #0
 800119c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011a0:	2000      	movs	r0, #0
}
 80011a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011a6:	bf00      	nop
 80011a8:	50000300 	.word	0x50000300

080011ac <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80011ac:	6803      	ldr	r3, [r0, #0]
 80011ae:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_ADC_ConfigChannel>:
{
 80011b4:	b470      	push	{r4, r5, r6}
 80011b6:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 80011b8:	2200      	movs	r2, #0
 80011ba:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hadc);
 80011bc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80011c0:	2a01      	cmp	r2, #1
 80011c2:	f000 81ad 	beq.w	8001520 <HAL_ADC_ConfigChannel+0x36c>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2201      	movs	r2, #1
 80011ca:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011ce:	6800      	ldr	r0, [r0, #0]
 80011d0:	6882      	ldr	r2, [r0, #8]
 80011d2:	f012 0f04 	tst.w	r2, #4
 80011d6:	f040 8196 	bne.w	8001506 <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank < 5U)
 80011da:	684a      	ldr	r2, [r1, #4]
 80011dc:	2a04      	cmp	r2, #4
 80011de:	d831      	bhi.n	8001244 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 80011e0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80011e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80011e6:	0055      	lsls	r5, r2, #1
 80011e8:	221f      	movs	r2, #31
 80011ea:	40aa      	lsls	r2, r5
 80011ec:	ea24 0202 	bic.w	r2, r4, r2
 80011f0:	680c      	ldr	r4, [r1, #0]
 80011f2:	40ac      	lsls	r4, r5
 80011f4:	4322      	orrs	r2, r4
 80011f6:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	6882      	ldr	r2, [r0, #8]
 80011fc:	f012 0f0c 	tst.w	r2, #12
 8001200:	d168      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001202:	680a      	ldr	r2, [r1, #0]
 8001204:	2a09      	cmp	r2, #9
 8001206:	d94e      	bls.n	80012a6 <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001208:	6984      	ldr	r4, [r0, #24]
 800120a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800120e:	3a1e      	subs	r2, #30
 8001210:	2507      	movs	r5, #7
 8001212:	4095      	lsls	r5, r2
 8001214:	ea24 0405 	bic.w	r4, r4, r5
 8001218:	688d      	ldr	r5, [r1, #8]
 800121a:	fa05 f202 	lsl.w	r2, r5, r2
 800121e:	4322      	orrs	r2, r4
 8001220:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001222:	6948      	ldr	r0, [r1, #20]
 8001224:	681c      	ldr	r4, [r3, #0]
 8001226:	68e2      	ldr	r2, [r4, #12]
 8001228:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800122c:	0052      	lsls	r2, r2, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 8001232:	6908      	ldr	r0, [r1, #16]
 8001234:	3801      	subs	r0, #1
 8001236:	2803      	cmp	r0, #3
 8001238:	f200 808f 	bhi.w	800135a <HAL_ADC_ConfigChannel+0x1a6>
 800123c:	e8df f000 	tbb	[pc, r0]
 8001240:	82776c40 	.word	0x82776c40
    else if (sConfig->Rank < 10U)
 8001244:	2a09      	cmp	r2, #9
 8001246:	d80e      	bhi.n	8001266 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8001248:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800124a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800124e:	0055      	lsls	r5, r2, #1
 8001250:	3d1e      	subs	r5, #30
 8001252:	221f      	movs	r2, #31
 8001254:	40aa      	lsls	r2, r5
 8001256:	ea24 0202 	bic.w	r2, r4, r2
 800125a:	680c      	ldr	r4, [r1, #0]
 800125c:	fa04 f505 	lsl.w	r5, r4, r5
 8001260:	432a      	orrs	r2, r5
 8001262:	6342      	str	r2, [r0, #52]	; 0x34
 8001264:	e7c8      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8001266:	2a0e      	cmp	r2, #14
 8001268:	d80e      	bhi.n	8001288 <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800126a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800126c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001270:	0055      	lsls	r5, r2, #1
 8001272:	3d3c      	subs	r5, #60	; 0x3c
 8001274:	221f      	movs	r2, #31
 8001276:	40aa      	lsls	r2, r5
 8001278:	ea24 0202 	bic.w	r2, r4, r2
 800127c:	680c      	ldr	r4, [r1, #0]
 800127e:	fa04 f505 	lsl.w	r5, r4, r5
 8001282:	432a      	orrs	r2, r5
 8001284:	6382      	str	r2, [r0, #56]	; 0x38
 8001286:	e7b7      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001288:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800128a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800128e:	0055      	lsls	r5, r2, #1
 8001290:	3d5a      	subs	r5, #90	; 0x5a
 8001292:	221f      	movs	r2, #31
 8001294:	40aa      	lsls	r2, r5
 8001296:	ea24 0202 	bic.w	r2, r4, r2
 800129a:	680c      	ldr	r4, [r1, #0]
 800129c:	fa04 f505 	lsl.w	r5, r4, r5
 80012a0:	432a      	orrs	r2, r5
 80012a2:	63c2      	str	r2, [r0, #60]	; 0x3c
 80012a4:	e7a8      	b.n	80011f8 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012a6:	6944      	ldr	r4, [r0, #20]
 80012a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80012ac:	2507      	movs	r5, #7
 80012ae:	4095      	lsls	r5, r2
 80012b0:	ea24 0405 	bic.w	r4, r4, r5
 80012b4:	688d      	ldr	r5, [r1, #8]
 80012b6:	fa05 f202 	lsl.w	r2, r5, r2
 80012ba:	4322      	orrs	r2, r4
 80012bc:	6142      	str	r2, [r0, #20]
 80012be:	e7b0      	b.n	8001222 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 80012c0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80012c2:	4d98      	ldr	r5, [pc, #608]	; (8001524 <HAL_ADC_ConfigChannel+0x370>)
 80012c4:	4005      	ands	r5, r0
 80012c6:	6808      	ldr	r0, [r1, #0]
 80012c8:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80012cc:	4315      	orrs	r5, r2
 80012ce:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80012d2:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	6882      	ldr	r2, [r0, #8]
 80012d8:	f002 0203 	and.w	r2, r2, #3
 80012dc:	2a01      	cmp	r2, #1
 80012de:	d06f      	beq.n	80013c0 <HAL_ADC_ConfigChannel+0x20c>
 80012e0:	2200      	movs	r2, #0
 80012e2:	2a00      	cmp	r2, #0
 80012e4:	f040 811a 	bne.w	800151c <HAL_ADC_ConfigChannel+0x368>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80012e8:	68cc      	ldr	r4, [r1, #12]
 80012ea:	2c01      	cmp	r4, #1
 80012ec:	d070      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80012ee:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80012f2:	680e      	ldr	r6, [r1, #0]
 80012f4:	2501      	movs	r5, #1
 80012f6:	40b5      	lsls	r5, r6
 80012f8:	ea24 0405 	bic.w	r4, r4, r5
 80012fc:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001300:	6809      	ldr	r1, [r1, #0]
 8001302:	2910      	cmp	r1, #16
 8001304:	f000 808d 	beq.w	8001422 <HAL_ADC_ConfigChannel+0x26e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001308:	2911      	cmp	r1, #17
 800130a:	f000 80af 	beq.w	800146c <HAL_ADC_ConfigChannel+0x2b8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800130e:	2912      	cmp	r1, #18
 8001310:	f000 80b2 	beq.w	8001478 <HAL_ADC_ConfigChannel+0x2c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001314:	2000      	movs	r0, #0
 8001316:	e0fb      	b.n	8001510 <HAL_ADC_ConfigChannel+0x35c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001318:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800131a:	4d82      	ldr	r5, [pc, #520]	; (8001524 <HAL_ADC_ConfigChannel+0x370>)
 800131c:	4005      	ands	r5, r0
 800131e:	6808      	ldr	r0, [r1, #0]
 8001320:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001324:	4315      	orrs	r5, r2
 8001326:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800132a:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 800132c:	e7d2      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800132e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001330:	4d7c      	ldr	r5, [pc, #496]	; (8001524 <HAL_ADC_ConfigChannel+0x370>)
 8001332:	4005      	ands	r5, r0
 8001334:	6808      	ldr	r0, [r1, #0]
 8001336:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 800133a:	4315      	orrs	r5, r2
 800133c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001340:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 8001342:	e7c7      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001344:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8001346:	4877      	ldr	r0, [pc, #476]	; (8001524 <HAL_ADC_ConfigChannel+0x370>)
 8001348:	4028      	ands	r0, r5
 800134a:	680d      	ldr	r5, [r1, #0]
 800134c:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8001350:	4302      	orrs	r2, r0
 8001352:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001356:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 8001358:	e7bc      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800135a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800135c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001360:	6808      	ldr	r0, [r1, #0]
 8001362:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8001366:	d01c      	beq.n	80013a2 <HAL_ADC_ConfigChannel+0x1ee>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800136c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001370:	680c      	ldr	r4, [r1, #0]
 8001372:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001376:	d019      	beq.n	80013ac <HAL_ADC_ConfigChannel+0x1f8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800137c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001380:	680c      	ldr	r4, [r1, #0]
 8001382:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001386:	d016      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x202>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800138c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001390:	680c      	ldr	r4, [r1, #0]
 8001392:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001396:	d19d      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001398:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800139a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800139e:	66c2      	str	r2, [r0, #108]	; 0x6c
 80013a0:	e798      	b.n	80012d4 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80013a2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80013a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013a8:	6622      	str	r2, [r4, #96]	; 0x60
 80013aa:	e7dd      	b.n	8001368 <HAL_ADC_ConfigChannel+0x1b4>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80013ac:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80013ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013b2:	6642      	str	r2, [r0, #100]	; 0x64
 80013b4:	e7e0      	b.n	8001378 <HAL_ADC_ConfigChannel+0x1c4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80013b6:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80013b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013bc:	6682      	str	r2, [r0, #104]	; 0x68
 80013be:	e7e3      	b.n	8001388 <HAL_ADC_ConfigChannel+0x1d4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013c0:	6802      	ldr	r2, [r0, #0]
 80013c2:	f012 0f01 	tst.w	r2, #1
 80013c6:	d101      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x218>
 80013c8:	2200      	movs	r2, #0
 80013ca:	e78a      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x12e>
 80013cc:	2201      	movs	r2, #1
 80013ce:	e788      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x12e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013d0:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80013d4:	680e      	ldr	r6, [r1, #0]
 80013d6:	2501      	movs	r5, #1
 80013d8:	40b5      	lsls	r5, r6
 80013da:	432c      	orrs	r4, r5
 80013dc:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80013e0:	6808      	ldr	r0, [r1, #0]
 80013e2:	2809      	cmp	r0, #9
 80013e4:	d90e      	bls.n	8001404 <HAL_ADC_ConfigChannel+0x250>
        MODIFY_REG(hadc->Instance->SMPR2,
 80013e6:	681e      	ldr	r6, [r3, #0]
 80013e8:	69b4      	ldr	r4, [r6, #24]
 80013ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80013ee:	381b      	subs	r0, #27
 80013f0:	2507      	movs	r5, #7
 80013f2:	4085      	lsls	r5, r0
 80013f4:	ea24 0405 	bic.w	r4, r4, r5
 80013f8:	688d      	ldr	r5, [r1, #8]
 80013fa:	fa05 f000 	lsl.w	r0, r5, r0
 80013fe:	4320      	orrs	r0, r4
 8001400:	61b0      	str	r0, [r6, #24]
 8001402:	e77d      	b.n	8001300 <HAL_ADC_ConfigChannel+0x14c>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001404:	681e      	ldr	r6, [r3, #0]
 8001406:	6974      	ldr	r4, [r6, #20]
 8001408:	3001      	adds	r0, #1
 800140a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800140e:	2507      	movs	r5, #7
 8001410:	4085      	lsls	r5, r0
 8001412:	ea24 0405 	bic.w	r4, r4, r5
 8001416:	688d      	ldr	r5, [r1, #8]
 8001418:	fa05 f000 	lsl.w	r0, r5, r0
 800141c:	4320      	orrs	r0, r4
 800141e:	6170      	str	r0, [r6, #20]
 8001420:	e76e      	b.n	8001300 <HAL_ADC_ConfigChannel+0x14c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001422:	4841      	ldr	r0, [pc, #260]	; (8001528 <HAL_ADC_ConfigChannel+0x374>)
 8001424:	6880      	ldr	r0, [r0, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001426:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800142a:	f47f af6d 	bne.w	8001308 <HAL_ADC_ConfigChannel+0x154>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800142e:	681c      	ldr	r4, [r3, #0]
 8001430:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001434:	d027      	beq.n	8001486 <HAL_ADC_ConfigChannel+0x2d2>
 8001436:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800143a:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800143c:	68a0      	ldr	r0, [r4, #8]
 800143e:	f000 0003 	and.w	r0, r0, #3
 8001442:	2801      	cmp	r0, #1
 8001444:	d022      	beq.n	800148c <HAL_ADC_ConfigChannel+0x2d8>
 8001446:	2a00      	cmp	r2, #0
 8001448:	d157      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x346>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800144a:	9d01      	ldr	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800144c:	b135      	cbz	r5, 800145c <HAL_ADC_ConfigChannel+0x2a8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800144e:	68a8      	ldr	r0, [r5, #8]
 8001450:	f000 0003 	and.w	r0, r0, #3
 8001454:	2801      	cmp	r0, #1
 8001456:	d01f      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x2e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001458:	2a00      	cmp	r2, #0
 800145a:	d14e      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x346>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800145c:	2910      	cmp	r1, #16
 800145e:	d021      	beq.n	80014a4 <HAL_ADC_ConfigChannel+0x2f0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001460:	2911      	cmp	r1, #17
 8001462:	d039      	beq.n	80014d8 <HAL_ADC_ConfigChannel+0x324>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001464:	2912      	cmp	r1, #18
 8001466:	d041      	beq.n	80014ec <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001468:	2000      	movs	r0, #0
 800146a:	e051      	b.n	8001510 <HAL_ADC_ConfigChannel+0x35c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800146c:	482e      	ldr	r0, [pc, #184]	; (8001528 <HAL_ADC_ConfigChannel+0x374>)
 800146e:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001470:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8001474:	d0db      	beq.n	800142e <HAL_ADC_ConfigChannel+0x27a>
 8001476:	e74a      	b.n	800130e <HAL_ADC_ConfigChannel+0x15a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001478:	482b      	ldr	r0, [pc, #172]	; (8001528 <HAL_ADC_ConfigChannel+0x374>)
 800147a:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800147c:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8001480:	d0d5      	beq.n	800142e <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001482:	2000      	movs	r0, #0
 8001484:	e044      	b.n	8001510 <HAL_ADC_ConfigChannel+0x35c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001486:	4829      	ldr	r0, [pc, #164]	; (800152c <HAL_ADC_ConfigChannel+0x378>)
 8001488:	9001      	str	r0, [sp, #4]
 800148a:	e7d7      	b.n	800143c <HAL_ADC_ConfigChannel+0x288>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800148c:	6820      	ldr	r0, [r4, #0]
 800148e:	f010 0f01 	tst.w	r0, #1
 8001492:	d0d8      	beq.n	8001446 <HAL_ADC_ConfigChannel+0x292>
 8001494:	2201      	movs	r2, #1
 8001496:	e7d6      	b.n	8001446 <HAL_ADC_ConfigChannel+0x292>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001498:	6828      	ldr	r0, [r5, #0]
 800149a:	f010 0f01 	tst.w	r0, #1
 800149e:	d0db      	beq.n	8001458 <HAL_ADC_ConfigChannel+0x2a4>
 80014a0:	2201      	movs	r2, #1
 80014a2:	e7d9      	b.n	8001458 <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014a4:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80014a8:	d1da      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x2ac>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80014aa:	491f      	ldr	r1, [pc, #124]	; (8001528 <HAL_ADC_ConfigChannel+0x374>)
 80014ac:	688a      	ldr	r2, [r1, #8]
 80014ae:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014b2:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014b4:	4a1e      	ldr	r2, [pc, #120]	; (8001530 <HAL_ADC_ConfigChannel+0x37c>)
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	491e      	ldr	r1, [pc, #120]	; (8001534 <HAL_ADC_ConfigChannel+0x380>)
 80014ba:	fbb2 f1f1 	udiv	r1, r2, r1
 80014be:	220a      	movs	r2, #10
 80014c0:	fb02 f201 	mul.w	r2, r2, r1
 80014c4:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80014c6:	e002      	b.n	80014ce <HAL_ADC_ConfigChannel+0x31a>
            wait_loop_index--;
 80014c8:	9a00      	ldr	r2, [sp, #0]
 80014ca:	3a01      	subs	r2, #1
 80014cc:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80014ce:	9a00      	ldr	r2, [sp, #0]
 80014d0:	2a00      	cmp	r2, #0
 80014d2:	d1f9      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x314>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d4:	2000      	movs	r0, #0
 80014d6:	e01b      	b.n	8001510 <HAL_ADC_ConfigChannel+0x35c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80014d8:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80014dc:	d1c2      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x2b0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80014de:	4912      	ldr	r1, [pc, #72]	; (8001528 <HAL_ADC_ConfigChannel+0x374>)
 80014e0:	688a      	ldr	r2, [r1, #8]
 80014e2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80014e6:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e8:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80014ea:	e011      	b.n	8001510 <HAL_ADC_ConfigChannel+0x35c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80014ec:	490e      	ldr	r1, [pc, #56]	; (8001528 <HAL_ADC_ConfigChannel+0x374>)
 80014ee:	688a      	ldr	r2, [r1, #8]
 80014f0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80014f4:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f6:	2000      	movs	r0, #0
 80014f8:	e00a      	b.n	8001510 <HAL_ADC_ConfigChannel+0x35c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014fc:	f042 0220 	orr.w	r2, r2, #32
 8001500:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8001502:	2001      	movs	r0, #1
 8001504:	e004      	b.n	8001510 <HAL_ADC_ConfigChannel+0x35c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001506:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001508:	f042 0220 	orr.w	r2, r2, #32
 800150c:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800150e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001516:	b017      	add	sp, #92	; 0x5c
 8001518:	bc70      	pop	{r4, r5, r6}
 800151a:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800151c:	2000      	movs	r0, #0
 800151e:	e7f7      	b.n	8001510 <HAL_ADC_ConfigChannel+0x35c>
  __HAL_LOCK(hadc);
 8001520:	2002      	movs	r0, #2
 8001522:	e7f8      	b.n	8001516 <HAL_ADC_ConfigChannel+0x362>
 8001524:	83fff000 	.word	0x83fff000
 8001528:	50000300 	.word	0x50000300
 800152c:	50000100 	.word	0x50000100
 8001530:	20000000 	.word	0x20000000
 8001534:	000f4240 	.word	0x000f4240

08001538 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8001538:	b470      	push	{r4, r5, r6}
 800153a:	b097      	sub	sp, #92	; 0x5c
 800153c:	4603      	mov	r3, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800153e:	6802      	ldr	r2, [r0, #0]
 8001540:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001544:	d040      	beq.n	80015c8 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8001546:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800154a:	9001      	str	r0, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800154c:	9801      	ldr	r0, [sp, #4]
 800154e:	2800      	cmp	r0, #0
 8001550:	f000 8088 	beq.w	8001664 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
  __HAL_LOCK(hadc);
 8001554:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
 8001558:	2c01      	cmp	r4, #1
 800155a:	f000 8085 	beq.w	8001668 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 800155e:	2401      	movs	r4, #1
 8001560:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001564:	6892      	ldr	r2, [r2, #8]
 8001566:	f012 0f04 	tst.w	r2, #4
 800156a:	d168      	bne.n	800163e <HAL_ADCEx_MultiModeConfigChannel+0x106>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800156c:	6882      	ldr	r2, [r0, #8]
 800156e:	f012 0f04 	tst.w	r2, #4
 8001572:	d164      	bne.n	800163e <HAL_ADCEx_MultiModeConfigChannel+0x106>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001574:	680a      	ldr	r2, [r1, #0]
 8001576:	2a00      	cmp	r2, #0
 8001578:	d037      	beq.n	80015ea <HAL_ADCEx_MultiModeConfigChannel+0xb2>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800157a:	4d3c      	ldr	r5, [pc, #240]	; (800166c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800157c:	68aa      	ldr	r2, [r5, #8]
 800157e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001582:	684c      	ldr	r4, [r1, #4]
 8001584:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8001586:	ea44 3446 	orr.w	r4, r4, r6, lsl #13
 800158a:	4322      	orrs	r2, r4
 800158c:	60aa      	str	r2, [r5, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800158e:	681c      	ldr	r4, [r3, #0]
 8001590:	68a2      	ldr	r2, [r4, #8]
 8001592:	f002 0203 	and.w	r2, r2, #3
 8001596:	2a01      	cmp	r2, #1
 8001598:	d019      	beq.n	80015ce <HAL_ADCEx_MultiModeConfigChannel+0x96>
 800159a:	2200      	movs	r2, #0
 800159c:	2a00      	cmp	r2, #0
 800159e:	d159      	bne.n	8001654 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80015a0:	6884      	ldr	r4, [r0, #8]
 80015a2:	f004 0403 	and.w	r4, r4, #3
 80015a6:	2c01      	cmp	r4, #1
 80015a8:	d019      	beq.n	80015de <HAL_ADCEx_MultiModeConfigChannel+0xa6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015aa:	2a00      	cmp	r2, #0
 80015ac:	d154      	bne.n	8001658 <HAL_ADCEx_MultiModeConfigChannel+0x120>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80015ae:	4c2f      	ldr	r4, [pc, #188]	; (800166c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80015b0:	68a2      	ldr	r2, [r4, #8]
 80015b2:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80015b6:	f022 020f 	bic.w	r2, r2, #15
 80015ba:	6808      	ldr	r0, [r1, #0]
 80015bc:	6889      	ldr	r1, [r1, #8]
 80015be:	4301      	orrs	r1, r0
 80015c0:	430a      	orrs	r2, r1
 80015c2:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c4:	2000      	movs	r0, #0
 80015c6:	e03f      	b.n	8001648 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015c8:	4829      	ldr	r0, [pc, #164]	; (8001670 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80015ca:	9001      	str	r0, [sp, #4]
 80015cc:	e7be      	b.n	800154c <HAL_ADCEx_MultiModeConfigChannel+0x14>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015ce:	6822      	ldr	r2, [r4, #0]
 80015d0:	f012 0f01 	tst.w	r2, #1
 80015d4:	d101      	bne.n	80015da <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 80015d6:	2200      	movs	r2, #0
 80015d8:	e7e0      	b.n	800159c <HAL_ADCEx_MultiModeConfigChannel+0x64>
 80015da:	2201      	movs	r2, #1
 80015dc:	e7de      	b.n	800159c <HAL_ADCEx_MultiModeConfigChannel+0x64>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80015de:	6800      	ldr	r0, [r0, #0]
 80015e0:	f010 0f01 	tst.w	r0, #1
 80015e4:	d0e1      	beq.n	80015aa <HAL_ADCEx_MultiModeConfigChannel+0x72>
 80015e6:	2201      	movs	r2, #1
 80015e8:	e7df      	b.n	80015aa <HAL_ADCEx_MultiModeConfigChannel+0x72>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80015ea:	4920      	ldr	r1, [pc, #128]	; (800166c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80015ec:	688a      	ldr	r2, [r1, #8]
 80015ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015f2:	608a      	str	r2, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015f4:	6819      	ldr	r1, [r3, #0]
 80015f6:	688a      	ldr	r2, [r1, #8]
 80015f8:	f002 0203 	and.w	r2, r2, #3
 80015fc:	2a01      	cmp	r2, #1
 80015fe:	d010      	beq.n	8001622 <HAL_ADCEx_MultiModeConfigChannel+0xea>
 8001600:	2200      	movs	r2, #0
 8001602:	bb5a      	cbnz	r2, 800165c <HAL_ADCEx_MultiModeConfigChannel+0x124>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001604:	6881      	ldr	r1, [r0, #8]
 8001606:	f001 0103 	and.w	r1, r1, #3
 800160a:	2901      	cmp	r1, #1
 800160c:	d011      	beq.n	8001632 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800160e:	bb3a      	cbnz	r2, 8001660 <HAL_ADCEx_MultiModeConfigChannel+0x128>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001610:	4916      	ldr	r1, [pc, #88]	; (800166c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8001612:	688a      	ldr	r2, [r1, #8]
 8001614:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001618:	f022 020f 	bic.w	r2, r2, #15
 800161c:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161e:	2000      	movs	r0, #0
 8001620:	e012      	b.n	8001648 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001622:	680a      	ldr	r2, [r1, #0]
 8001624:	f012 0f01 	tst.w	r2, #1
 8001628:	d101      	bne.n	800162e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800162a:	2200      	movs	r2, #0
 800162c:	e7e9      	b.n	8001602 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800162e:	2201      	movs	r2, #1
 8001630:	e7e7      	b.n	8001602 <HAL_ADCEx_MultiModeConfigChannel+0xca>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001632:	6801      	ldr	r1, [r0, #0]
 8001634:	f011 0f01 	tst.w	r1, #1
 8001638:	d0e9      	beq.n	800160e <HAL_ADCEx_MultiModeConfigChannel+0xd6>
 800163a:	2201      	movs	r2, #1
 800163c:	e7e7      	b.n	800160e <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800163e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001640:	f042 0220 	orr.w	r2, r2, #32
 8001644:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001646:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 800164e:	b017      	add	sp, #92	; 0x5c
 8001650:	bc70      	pop	{r4, r5, r6}
 8001652:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001654:	2000      	movs	r0, #0
 8001656:	e7f7      	b.n	8001648 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8001658:	2000      	movs	r0, #0
 800165a:	e7f5      	b.n	8001648 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 800165c:	2000      	movs	r0, #0
 800165e:	e7f3      	b.n	8001648 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8001660:	2000      	movs	r0, #0
 8001662:	e7f1      	b.n	8001648 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    return HAL_ERROR;
 8001664:	2001      	movs	r0, #1
 8001666:	e7f2      	b.n	800164e <HAL_ADCEx_MultiModeConfigChannel+0x116>
  __HAL_LOCK(hadc);
 8001668:	2002      	movs	r0, #2
 800166a:	e7f0      	b.n	800164e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800166c:	50000300 	.word	0x50000300
 8001670:	50000100 	.word	0x50000100

08001674 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001676:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001678:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001680:	0200      	lsls	r0, r0, #8
 8001682:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001686:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001688:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800168c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001690:	60d0      	str	r0, [r2, #12]
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001698:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800169a:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HAL_NVIC_SetPriority+0x5c>)
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a2:	f1c3 0407 	rsb	r4, r3, #7
 80016a6:	2c04      	cmp	r4, #4
 80016a8:	bf28      	it	cs
 80016aa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ac:	1d1d      	adds	r5, r3, #4
 80016ae:	2d06      	cmp	r5, #6
 80016b0:	d917      	bls.n	80016e2 <HAL_NVIC_SetPriority+0x4a>
 80016b2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	2501      	movs	r5, #1
 80016b6:	fa05 f404 	lsl.w	r4, r5, r4
 80016ba:	3c01      	subs	r4, #1
 80016bc:	4021      	ands	r1, r4
 80016be:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	fa05 f303 	lsl.w	r3, r5, r3
 80016c4:	3b01      	subs	r3, #1
 80016c6:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80016ca:	2800      	cmp	r0, #0
 80016cc:	db0b      	blt.n	80016e6 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	0109      	lsls	r1, r1, #4
 80016d0:	b2c9      	uxtb	r1, r1
 80016d2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80016d6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80016da:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80016de:	bc30      	pop	{r4, r5}
 80016e0:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	2300      	movs	r3, #0
 80016e4:	e7e6      	b.n	80016b4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	f000 000f 	and.w	r0, r0, #15
 80016ea:	0109      	lsls	r1, r1, #4
 80016ec:	b2c9      	uxtb	r1, r1
 80016ee:	4b02      	ldr	r3, [pc, #8]	; (80016f8 <HAL_NVIC_SetPriority+0x60>)
 80016f0:	5419      	strb	r1, [r3, r0]
 80016f2:	e7f4      	b.n	80016de <HAL_NVIC_SetPriority+0x46>
 80016f4:	e000ed00 	.word	0xe000ed00
 80016f8:	e000ed14 	.word	0xe000ed14

080016fc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80016fc:	0942      	lsrs	r2, r0, #5
 80016fe:	f000 001f 	and.w	r0, r0, #31
 8001702:	2301      	movs	r3, #1
 8001704:	fa03 f000 	lsl.w	r0, r3, r0
 8001708:	4b01      	ldr	r3, [pc, #4]	; (8001710 <HAL_NVIC_EnableIRQ+0x14>)
 800170a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100

08001714 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001714:	3801      	subs	r0, #1
 8001716:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800171a:	d20a      	bcs.n	8001732 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_SYSTICK_Config+0x24>)
 800171e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	21f0      	movs	r1, #240	; 0xf0
 8001722:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_SYSTICK_Config+0x28>)
 8001724:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	2000      	movs	r0, #0
 800172a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172c:	2207      	movs	r2, #7
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001732:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000e010 	.word	0xe000e010
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001740:	2804      	cmp	r0, #4
 8001742:	d005      	beq.n	8001750 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001744:	4a05      	ldr	r2, [pc, #20]	; (800175c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001746:	6813      	ldr	r3, [r2, #0]
 8001748:	f023 0304 	bic.w	r3, r3, #4
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001750:	4a02      	ldr	r2, [pc, #8]	; (800175c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001752:	6813      	ldr	r3, [r2, #0]
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4770      	bx	lr
 800175c:	e000e010 	.word	0xe000e010

08001760 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001760:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001762:	f001 fed5 	bl	8003510 <HAL_SYSTICK_Callback>
 8001766:	bd08      	pop	{r3, pc}

08001768 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001768:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800176a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800176e:	2b02      	cmp	r3, #2
 8001770:	d003      	beq.n	800177a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001772:	2304      	movs	r3, #4
 8001774:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001776:	2001      	movs	r0, #1
 8001778:	bd08      	pop	{r3, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800177a:	6802      	ldr	r2, [r0, #0]
 800177c:	6813      	ldr	r3, [r2, #0]
 800177e:	f023 030e 	bic.w	r3, r3, #14
 8001782:	6013      	str	r3, [r2, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001784:	6802      	ldr	r2, [r0, #0]
 8001786:	6813      	ldr	r3, [r2, #0]
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6013      	str	r3, [r2, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800178e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001790:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001792:	2201      	movs	r2, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	604b      	str	r3, [r1, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800179a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179e:	2300      	movs	r3, #0
 80017a0:	f880 3020 	strb.w	r3, [r0, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80017a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80017a6:	b113      	cbz	r3, 80017ae <HAL_DMA_Abort_IT+0x46>
    {
      hdma->XferAbortCallback(hdma);
 80017a8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80017aa:	2000      	movs	r0, #0
 80017ac:	bd08      	pop	{r3, pc}
 80017ae:	2000      	movs	r0, #0
    } 
  }
  return status;
}
 80017b0:	bd08      	pop	{r3, pc}
	...

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80017b8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80017ba:	e088      	b.n	80018ce <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017bc:	08de      	lsrs	r6, r3, #3
 80017be:	3608      	adds	r6, #8
 80017c0:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017c4:	f003 0e07 	and.w	lr, r3, #7
 80017c8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80017cc:	270f      	movs	r7, #15
 80017ce:	fa07 f70e 	lsl.w	r7, r7, lr
 80017d2:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017d6:	690f      	ldr	r7, [r1, #16]
 80017d8:	fa07 f70e 	lsl.w	r7, r7, lr
 80017dc:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 80017de:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 80017e2:	e083      	b.n	80018ec <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017e6:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e8:	68cf      	ldr	r7, [r1, #12]
 80017ea:	fa07 f70e 	lsl.w	r7, r7, lr
 80017ee:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80017f0:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f4:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017f8:	684e      	ldr	r6, [r1, #4]
 80017fa:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80017fe:	409e      	lsls	r6, r3
 8001800:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001802:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001804:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001806:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001808:	688d      	ldr	r5, [r1, #8]
 800180a:	fa05 f50e 	lsl.w	r5, r5, lr
 800180e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001810:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001812:	684c      	ldr	r4, [r1, #4]
 8001814:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001818:	d058      	beq.n	80018cc <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	4c47      	ldr	r4, [pc, #284]	; (8001938 <HAL_GPIO_Init+0x184>)
 800181c:	69a5      	ldr	r5, [r4, #24]
 800181e:	f045 0501 	orr.w	r5, r5, #1
 8001822:	61a5      	str	r5, [r4, #24]
 8001824:	69a4      	ldr	r4, [r4, #24]
 8001826:	f004 0401 	and.w	r4, r4, #1
 800182a:	9401      	str	r4, [sp, #4]
 800182c:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 800182e:	089d      	lsrs	r5, r3, #2
 8001830:	1cae      	adds	r6, r5, #2
 8001832:	4c42      	ldr	r4, [pc, #264]	; (800193c <HAL_GPIO_Init+0x188>)
 8001834:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001838:	f003 0603 	and.w	r6, r3, #3
 800183c:	00b6      	lsls	r6, r6, #2
 800183e:	270f      	movs	r7, #15
 8001840:	40b7      	lsls	r7, r6
 8001842:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001846:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800184a:	d06c      	beq.n	8001926 <HAL_GPIO_Init+0x172>
 800184c:	4f3c      	ldr	r7, [pc, #240]	; (8001940 <HAL_GPIO_Init+0x18c>)
 800184e:	42b8      	cmp	r0, r7
 8001850:	d06b      	beq.n	800192a <HAL_GPIO_Init+0x176>
 8001852:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001856:	42b8      	cmp	r0, r7
 8001858:	d069      	beq.n	800192e <HAL_GPIO_Init+0x17a>
 800185a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800185e:	42b8      	cmp	r0, r7
 8001860:	d05f      	beq.n	8001922 <HAL_GPIO_Init+0x16e>
 8001862:	2705      	movs	r7, #5
 8001864:	fa07 f606 	lsl.w	r6, r7, r6
 8001868:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 800186a:	3502      	adds	r5, #2
 800186c:	4e33      	ldr	r6, [pc, #204]	; (800193c <HAL_GPIO_Init+0x188>)
 800186e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001872:	4c34      	ldr	r4, [pc, #208]	; (8001944 <HAL_GPIO_Init+0x190>)
 8001874:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001876:	43d4      	mvns	r4, r2
 8001878:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800187c:	684f      	ldr	r7, [r1, #4]
 800187e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001882:	d001      	beq.n	8001888 <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8001884:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001888:	4d2e      	ldr	r5, [pc, #184]	; (8001944 <HAL_GPIO_Init+0x190>)
 800188a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 800188c:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 800188e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001892:	684f      	ldr	r7, [r1, #4]
 8001894:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001898:	d001      	beq.n	800189e <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 800189a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 800189e:	4d29      	ldr	r5, [pc, #164]	; (8001944 <HAL_GPIO_Init+0x190>)
 80018a0:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a2:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 80018a4:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018a8:	684f      	ldr	r7, [r1, #4]
 80018aa:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80018ae:	d001      	beq.n	80018b4 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 80018b0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 80018b4:	4d23      	ldr	r5, [pc, #140]	; (8001944 <HAL_GPIO_Init+0x190>)
 80018b6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80018b8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 80018ba:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018bc:	684e      	ldr	r6, [r1, #4]
 80018be:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80018c2:	d001      	beq.n	80018c8 <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 80018c4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 80018c8:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <HAL_GPIO_Init+0x190>)
 80018ca:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 80018cc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80018ce:	680a      	ldr	r2, [r1, #0]
 80018d0:	fa32 f403 	lsrs.w	r4, r2, r3
 80018d4:	d02d      	beq.n	8001932 <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80018d6:	2501      	movs	r5, #1
 80018d8:	409d      	lsls	r5, r3
    if(iocurrent)
 80018da:	402a      	ands	r2, r5
 80018dc:	d0f6      	beq.n	80018cc <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018de:	684c      	ldr	r4, [r1, #4]
 80018e0:	2c02      	cmp	r4, #2
 80018e2:	f43f af6b 	beq.w	80017bc <HAL_GPIO_Init+0x8>
 80018e6:	2c12      	cmp	r4, #18
 80018e8:	f43f af68 	beq.w	80017bc <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 80018ec:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ee:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80018f2:	2403      	movs	r4, #3
 80018f4:	fa04 f40e 	lsl.w	r4, r4, lr
 80018f8:	43e4      	mvns	r4, r4
 80018fa:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018fc:	684f      	ldr	r7, [r1, #4]
 80018fe:	f007 0703 	and.w	r7, r7, #3
 8001902:	fa07 f70e 	lsl.w	r7, r7, lr
 8001906:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001908:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800190a:	684e      	ldr	r6, [r1, #4]
 800190c:	1e77      	subs	r7, r6, #1
 800190e:	2f01      	cmp	r7, #1
 8001910:	f67f af68 	bls.w	80017e4 <HAL_GPIO_Init+0x30>
 8001914:	2e11      	cmp	r6, #17
 8001916:	f43f af65 	beq.w	80017e4 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800191a:	2e12      	cmp	r6, #18
 800191c:	f47f af72 	bne.w	8001804 <HAL_GPIO_Init+0x50>
 8001920:	e760      	b.n	80017e4 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001922:	2703      	movs	r7, #3
 8001924:	e79e      	b.n	8001864 <HAL_GPIO_Init+0xb0>
 8001926:	2700      	movs	r7, #0
 8001928:	e79c      	b.n	8001864 <HAL_GPIO_Init+0xb0>
 800192a:	2701      	movs	r7, #1
 800192c:	e79a      	b.n	8001864 <HAL_GPIO_Init+0xb0>
 800192e:	2702      	movs	r7, #2
 8001930:	e798      	b.n	8001864 <HAL_GPIO_Init+0xb0>
  }
}
 8001932:	b003      	add	sp, #12
 8001934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	40010000 	.word	0x40010000
 8001940:	48000400 	.word	0x48000400
 8001944:	40010400 	.word	0x40010400

08001948 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001948:	b90a      	cbnz	r2, 800194e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800194a:	6281      	str	r1, [r0, #40]	; 0x28
 800194c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800194e:	6181      	str	r1, [r0, #24]
 8001950:	4770      	bx	lr
	...

08001954 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001954:	b570      	push	{r4, r5, r6, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195a:	6803      	ldr	r3, [r0, #0]
 800195c:	f013 0f01 	tst.w	r3, #1
 8001960:	d063      	beq.n	8001a2a <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001962:	4bb5      	ldr	r3, [pc, #724]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b04      	cmp	r3, #4
 800196c:	d046      	beq.n	80019fc <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800196e:	4bb2      	ldr	r3, [pc, #712]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b08      	cmp	r3, #8
 8001978:	d03b      	beq.n	80019f2 <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197a:	6863      	ldr	r3, [r4, #4]
 800197c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001980:	f000 808e 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x14c>
 8001984:	2b00      	cmp	r3, #0
 8001986:	f040 8091 	bne.w	8001aac <HAL_RCC_OscConfig+0x158>
 800198a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800198e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019a0:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019a2:	4aa5      	ldr	r2, [pc, #660]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 80019a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80019a6:	f023 030f 	bic.w	r3, r3, #15
 80019aa:	68a1      	ldr	r1, [r4, #8]
 80019ac:	430b      	orrs	r3, r1
 80019ae:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b0:	6863      	ldr	r3, [r4, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8094 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff f8be 	bl	8000b38 <HAL_GetTick>
 80019bc:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c2:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	4b9c      	ldr	r3, [pc, #624]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 80019c8:	6819      	ldr	r1, [r3, #0]
 80019ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	fab3 f383 	clz	r3, r3
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	2201      	movs	r2, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	4219      	tst	r1, r3
 80019e2:	d122      	bne.n	8001a2a <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff f8a8 	bl	8000b38 <HAL_GetTick>
 80019e8:	1b40      	subs	r0, r0, r5
 80019ea:	2864      	cmp	r0, #100	; 0x64
 80019ec:	d9e7      	bls.n	80019be <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 80019ee:	2003      	movs	r0, #3
 80019f0:	e2ab      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019f2:	4b91      	ldr	r3, [pc, #580]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80019fa:	d0be      	beq.n	800197a <HAL_RCC_OscConfig+0x26>
 80019fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a00:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a04:	4b8c      	ldr	r3, [pc, #560]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 8001a06:	6819      	ldr	r1, [r3, #0]
 8001a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a0c:	fa93 f3a3 	rbit	r3, r3
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	2201      	movs	r2, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	4219      	tst	r1, r3
 8001a20:	d003      	beq.n	8001a2a <HAL_RCC_OscConfig+0xd6>
 8001a22:	6863      	ldr	r3, [r4, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 8289 	beq.w	8001f3c <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	f013 0f02 	tst.w	r3, #2
 8001a30:	f000 809c 	beq.w	8001b6c <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a34:	4b80      	ldr	r3, [pc, #512]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f013 0f0c 	tst.w	r3, #12
 8001a3c:	d072      	beq.n	8001b24 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a3e:	4b7e      	ldr	r3, [pc, #504]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d067      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a4a:	6923      	ldr	r3, [r4, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80cb 	beq.w	8001be8 <HAL_RCC_OscConfig+0x294>
 8001a52:	2201      	movs	r2, #1
 8001a54:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a58:	fab3 f383 	clz	r3, r3
 8001a5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff f866 	bl	8000b38 <HAL_GetTick>
 8001a6c:	4605      	mov	r5, r0
 8001a6e:	2302      	movs	r3, #2
 8001a70:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a74:	4b70      	ldr	r3, [pc, #448]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 8001a76:	6819      	ldr	r1, [r3, #0]
 8001a78:	2302      	movs	r3, #2
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	2201      	movs	r2, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	4219      	tst	r1, r3
 8001a8e:	f040 809c 	bne.w	8001bca <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a92:	f7ff f851 	bl	8000b38 <HAL_GetTick>
 8001a96:	1b40      	subs	r0, r0, r5
 8001a98:	2802      	cmp	r0, #2
 8001a9a:	d9e8      	bls.n	8001a6e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	e254      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa0:	4a65      	ldr	r2, [pc, #404]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 8001aa2:	6813      	ldr	r3, [r2, #0]
 8001aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e77a      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e>
 8001aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab0:	d009      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x172>
 8001ab2:	4b61      	ldr	r3, [pc, #388]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	e76d      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e>
 8001ac6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001aca:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	e760      	b.n	80019a2 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f82a 	bl	8000b38 <HAL_GetTick>
 8001ae4:	4605      	mov	r5, r0
 8001ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aea:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	4b52      	ldr	r3, [pc, #328]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 8001af0:	6819      	ldr	r1, [r3, #0]
 8001af2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	f003 031f 	and.w	r3, r3, #31
 8001b02:	2201      	movs	r2, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	4219      	tst	r1, r3
 8001b0a:	d08e      	beq.n	8001a2a <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff f814 	bl	8000b38 <HAL_GetTick>
 8001b10:	1b40      	subs	r0, r0, r5
 8001b12:	2864      	cmp	r0, #100	; 0x64
 8001b14:	d9e7      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8001b16:	2003      	movs	r0, #3
 8001b18:	e217      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b1a:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001b22:	d192      	bne.n	8001a4a <HAL_RCC_OscConfig+0xf6>
 8001b24:	2302      	movs	r3, #2
 8001b26:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 8001b2c:	6819      	ldr	r1, [r3, #0]
 8001b2e:	2302      	movs	r3, #2
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	4219      	tst	r1, r3
 8001b44:	d004      	beq.n	8001b50 <HAL_RCC_OscConfig+0x1fc>
 8001b46:	6923      	ldr	r3, [r4, #16]
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	e1fc      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4839      	ldr	r0, [pc, #228]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 8001b52:	6803      	ldr	r3, [r0, #0]
 8001b54:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b58:	6961      	ldr	r1, [r4, #20]
 8001b5a:	22f8      	movs	r2, #248	; 0xf8
 8001b5c:	fa92 f2a2 	rbit	r2, r2
 8001b60:	fab2 f282 	clz	r2, r2
 8001b64:	fa01 f202 	lsl.w	r2, r1, r2
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	f013 0f08 	tst.w	r3, #8
 8001b72:	f000 808d 	beq.w	8001c90 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b76:	69a3      	ldr	r3, [r4, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d061      	beq.n	8001c40 <HAL_RCC_OscConfig+0x2ec>
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b82:	fab2 f282 	clz	r2, r2
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_RCC_OscConfig+0x2e8>)
 8001b88:	4413      	add	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7fe ffd3 	bl	8000b38 <HAL_GetTick>
 8001b92:	4605      	mov	r5, r0
 8001b94:	2302      	movs	r3, #2
 8001b96:	fa93 f2a3 	rbit	r2, r3
 8001b9a:	fa93 f2a3 	rbit	r2, r3
 8001b9e:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	4a25      	ldr	r2, [pc, #148]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 8001ba4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	f003 031f 	and.w	r3, r3, #31
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	4219      	tst	r1, r3
 8001bba:	d169      	bne.n	8001c90 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bbc:	f7fe ffbc 	bl	8000b38 <HAL_GetTick>
 8001bc0:	1b40      	subs	r0, r0, r5
 8001bc2:	2802      	cmp	r0, #2
 8001bc4:	d9e6      	bls.n	8001b94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	e1bf      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bca:	481b      	ldr	r0, [pc, #108]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 8001bcc:	6803      	ldr	r3, [r0, #0]
 8001bce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bd2:	6961      	ldr	r1, [r4, #20]
 8001bd4:	22f8      	movs	r2, #248	; 0xf8
 8001bd6:	fa92 f2a2 	rbit	r2, r2
 8001bda:	fab2 f282 	clz	r2, r2
 8001bde:	fa01 f202 	lsl.w	r2, r1, r2
 8001be2:	4313      	orrs	r3, r2
 8001be4:	6003      	str	r3, [r0, #0]
 8001be6:	e7c1      	b.n	8001b6c <HAL_RCC_OscConfig+0x218>
 8001be8:	2301      	movs	r3, #1
 8001bea:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8001bee:	fab3 f383 	clz	r3, r3
 8001bf2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bf6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c00:	f7fe ff9a 	bl	8000b38 <HAL_GetTick>
 8001c04:	4605      	mov	r5, r0
 8001c06:	2302      	movs	r3, #2
 8001c08:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_RCC_OscConfig+0x2e4>)
 8001c0e:	6819      	ldr	r1, [r3, #0]
 8001c10:	2302      	movs	r3, #2
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2201      	movs	r2, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	4219      	tst	r1, r3
 8001c26:	d0a1      	beq.n	8001b6c <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c28:	f7fe ff86 	bl	8000b38 <HAL_GetTick>
 8001c2c:	1b40      	subs	r0, r0, r5
 8001c2e:	2802      	cmp	r0, #2
 8001c30:	d9e9      	bls.n	8001c06 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8001c32:	2003      	movs	r0, #3
 8001c34:	e189      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	10908120 	.word	0x10908120
 8001c40:	2201      	movs	r2, #1
 8001c42:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c46:	fab2 f282 	clz	r2, r2
 8001c4a:	4bc1      	ldr	r3, [pc, #772]	; (8001f50 <HAL_RCC_OscConfig+0x5fc>)
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c54:	f7fe ff70 	bl	8000b38 <HAL_GetTick>
 8001c58:	4605      	mov	r5, r0
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	fa93 f2a3 	rbit	r2, r3
 8001c64:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	4aba      	ldr	r2, [pc, #744]	; (8001f54 <HAL_RCC_OscConfig+0x600>)
 8001c6a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	2201      	movs	r2, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	4219      	tst	r1, r3
 8001c80:	d006      	beq.n	8001c90 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c82:	f7fe ff59 	bl	8000b38 <HAL_GetTick>
 8001c86:	1b40      	subs	r0, r0, r5
 8001c88:	2802      	cmp	r0, #2
 8001c8a:	d9e6      	bls.n	8001c5a <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	e15c      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	f013 0f04 	tst.w	r3, #4
 8001c96:	f000 80b3 	beq.w	8001e00 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c9a:	4bae      	ldr	r3, [pc, #696]	; (8001f54 <HAL_RCC_OscConfig+0x600>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001ca2:	d126      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca4:	4bab      	ldr	r3, [pc, #684]	; (8001f54 <HAL_RCC_OscConfig+0x600>)
 8001ca6:	69da      	ldr	r2, [r3, #28]
 8001ca8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cac:	61da      	str	r2, [r3, #28]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001cb8:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cba:	4ba7      	ldr	r3, [pc, #668]	; (8001f58 <HAL_RCC_OscConfig+0x604>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001cc2:	d018      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc4:	68e3      	ldr	r3, [r4, #12]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d029      	beq.n	8001d1e <HAL_RCC_OscConfig+0x3ca>
 8001cca:	bb73      	cbnz	r3, 8001d2a <HAL_RCC_OscConfig+0x3d6>
 8001ccc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cd0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001cd4:	6a1a      	ldr	r2, [r3, #32]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	621a      	str	r2, [r3, #32]
 8001cdc:	6a1a      	ldr	r2, [r3, #32]
 8001cde:	f022 0204 	bic.w	r2, r2, #4
 8001ce2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce4:	68e3      	ldr	r3, [r4, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d05d      	beq.n	8001da6 <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cea:	f7fe ff25 	bl	8000b38 <HAL_GetTick>
 8001cee:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	e047      	b.n	8001d82 <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	2500      	movs	r5, #0
 8001cf4:	e7e1      	b.n	8001cba <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf6:	4a98      	ldr	r2, [pc, #608]	; (8001f58 <HAL_RCC_OscConfig+0x604>)
 8001cf8:	6813      	ldr	r3, [r2, #0]
 8001cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfe:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001d00:	f7fe ff1a 	bl	8000b38 <HAL_GetTick>
 8001d04:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d06:	4b94      	ldr	r3, [pc, #592]	; (8001f58 <HAL_RCC_OscConfig+0x604>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d0e:	d1d9      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d10:	f7fe ff12 	bl	8000b38 <HAL_GetTick>
 8001d14:	1b80      	subs	r0, r0, r6
 8001d16:	2864      	cmp	r0, #100	; 0x64
 8001d18:	d9f5      	bls.n	8001d06 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8001d1a:	2003      	movs	r0, #3
 8001d1c:	e115      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1e:	4a8d      	ldr	r2, [pc, #564]	; (8001f54 <HAL_RCC_OscConfig+0x600>)
 8001d20:	6a13      	ldr	r3, [r2, #32]
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6213      	str	r3, [r2, #32]
 8001d28:	e7dc      	b.n	8001ce4 <HAL_RCC_OscConfig+0x390>
 8001d2a:	2b05      	cmp	r3, #5
 8001d2c:	d009      	beq.n	8001d42 <HAL_RCC_OscConfig+0x3ee>
 8001d2e:	4b89      	ldr	r3, [pc, #548]	; (8001f54 <HAL_RCC_OscConfig+0x600>)
 8001d30:	6a1a      	ldr	r2, [r3, #32]
 8001d32:	f022 0201 	bic.w	r2, r2, #1
 8001d36:	621a      	str	r2, [r3, #32]
 8001d38:	6a1a      	ldr	r2, [r3, #32]
 8001d3a:	f022 0204 	bic.w	r2, r2, #4
 8001d3e:	621a      	str	r2, [r3, #32]
 8001d40:	e7d0      	b.n	8001ce4 <HAL_RCC_OscConfig+0x390>
 8001d42:	4b84      	ldr	r3, [pc, #528]	; (8001f54 <HAL_RCC_OscConfig+0x600>)
 8001d44:	6a1a      	ldr	r2, [r3, #32]
 8001d46:	f042 0204 	orr.w	r2, r2, #4
 8001d4a:	621a      	str	r2, [r3, #32]
 8001d4c:	6a1a      	ldr	r2, [r3, #32]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	621a      	str	r2, [r3, #32]
 8001d54:	e7c6      	b.n	8001ce4 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d56:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <HAL_RCC_OscConfig+0x600>)
 8001d58:	6a19      	ldr	r1, [r3, #32]
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	2201      	movs	r2, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	4219      	tst	r1, r3
 8001d70:	d145      	bne.n	8001dfe <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d72:	f7fe fee1 	bl	8000b38 <HAL_GetTick>
 8001d76:	1b80      	subs	r0, r0, r6
 8001d78:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d7c:	4298      	cmp	r0, r3
 8001d7e:	f200 80df 	bhi.w	8001f40 <HAL_RCC_OscConfig+0x5ec>
 8001d82:	2302      	movs	r3, #2
 8001d84:	fa93 f2a3 	rbit	r2, r3
 8001d88:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	095b      	lsrs	r3, r3, #5
 8001d92:	f043 0302 	orr.w	r3, r3, #2
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d0dd      	beq.n	8001d56 <HAL_RCC_OscConfig+0x402>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	4b6c      	ldr	r3, [pc, #432]	; (8001f54 <HAL_RCC_OscConfig+0x600>)
 8001da2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001da4:	e7d9      	b.n	8001d5a <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da6:	f7fe fec7 	bl	8000b38 <HAL_GetTick>
 8001daa:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dac:	e015      	b.n	8001dda <HAL_RCC_OscConfig+0x486>
 8001dae:	4b69      	ldr	r3, [pc, #420]	; (8001f54 <HAL_RCC_OscConfig+0x600>)
 8001db0:	6a19      	ldr	r1, [r3, #32]
 8001db2:	2302      	movs	r3, #2
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	4219      	tst	r1, r3
 8001dc8:	d019      	beq.n	8001dfe <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7fe feb5 	bl	8000b38 <HAL_GetTick>
 8001dce:	1b80      	subs	r0, r0, r6
 8001dd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dd4:	4298      	cmp	r0, r3
 8001dd6:	f200 80b5 	bhi.w	8001f44 <HAL_RCC_OscConfig+0x5f0>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	fa93 f2a3 	rbit	r2, r3
 8001de0:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	f043 0302 	orr.w	r3, r3, #2
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d0dd      	beq.n	8001dae <HAL_RCC_OscConfig+0x45a>
 8001df2:	2302      	movs	r3, #2
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	4b56      	ldr	r3, [pc, #344]	; (8001f54 <HAL_RCC_OscConfig+0x600>)
 8001dfa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001dfc:	e7d9      	b.n	8001db2 <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dfe:	bbb5      	cbnz	r5, 8001e6e <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e00:	69e3      	ldr	r3, [r4, #28]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80a0 	beq.w	8001f48 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e08:	4a52      	ldr	r2, [pc, #328]	; (8001f54 <HAL_RCC_OscConfig+0x600>)
 8001e0a:	6852      	ldr	r2, [r2, #4]
 8001e0c:	f002 020c 	and.w	r2, r2, #12
 8001e10:	2a08      	cmp	r2, #8
 8001e12:	f000 80a3 	beq.w	8001f5c <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d02f      	beq.n	8001e7a <HAL_RCC_OscConfig+0x526>
 8001e1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e1e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7fe fe80 	bl	8000b38 <HAL_GetTick>
 8001e38:	4604      	mov	r4, r0
 8001e3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e3e:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e42:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <HAL_RCC_OscConfig+0x600>)
 8001e44:	6819      	ldr	r1, [r3, #0]
 8001e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	2201      	movs	r2, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	4219      	tst	r1, r3
 8001e5e:	d06b      	beq.n	8001f38 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e60:	f7fe fe6a 	bl	8000b38 <HAL_GetTick>
 8001e64:	1b00      	subs	r0, r0, r4
 8001e66:	2802      	cmp	r0, #2
 8001e68:	d9e7      	bls.n	8001e3a <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 8001e6a:	2003      	movs	r0, #3
 8001e6c:	e06d      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6e:	4a39      	ldr	r2, [pc, #228]	; (8001f54 <HAL_RCC_OscConfig+0x600>)
 8001e70:	69d3      	ldr	r3, [r2, #28]
 8001e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e76:	61d3      	str	r3, [r2, #28]
 8001e78:	e7c2      	b.n	8001e00 <HAL_RCC_OscConfig+0x4ac>
 8001e7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e7e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e94:	f7fe fe50 	bl	8000b38 <HAL_GetTick>
 8001e98:	4605      	mov	r5, r0
 8001e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e9e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea2:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <HAL_RCC_OscConfig+0x600>)
 8001ea4:	6819      	ldr	r1, [r3, #0]
 8001ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	4219      	tst	r1, r3
 8001ebe:	d006      	beq.n	8001ece <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7fe fe3a 	bl	8000b38 <HAL_GetTick>
 8001ec4:	1b40      	subs	r0, r0, r5
 8001ec6:	2802      	cmp	r0, #2
 8001ec8:	d9e7      	bls.n	8001e9a <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 8001eca:	2003      	movs	r0, #3
 8001ecc:	e03d      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ece:	4921      	ldr	r1, [pc, #132]	; (8001f54 <HAL_RCC_OscConfig+0x600>)
 8001ed0:	684b      	ldr	r3, [r1, #4]
 8001ed2:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001ed6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ed8:	6a20      	ldr	r0, [r4, #32]
 8001eda:	4302      	orrs	r2, r0
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
 8001ee0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ee4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ef0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001efa:	f7fe fe1d 	bl	8000b38 <HAL_GetTick>
 8001efe:	4604      	mov	r4, r0
 8001f00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f04:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_RCC_OscConfig+0x600>)
 8001f0a:	6819      	ldr	r1, [r3, #0]
 8001f0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	4219      	tst	r1, r3
 8001f24:	d106      	bne.n	8001f34 <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f26:	f7fe fe07 	bl	8000b38 <HAL_GetTick>
 8001f2a:	1b00      	subs	r0, r0, r4
 8001f2c:	2802      	cmp	r0, #2
 8001f2e:	d9e7      	bls.n	8001f00 <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 8001f30:	2003      	movs	r0, #3
 8001f32:	e00a      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001f34:	2000      	movs	r0, #0
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>
 8001f38:	2000      	movs	r0, #0
 8001f3a:	e006      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	e004      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8001f40:	2003      	movs	r0, #3
 8001f42:	e002      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8001f44:	2003      	movs	r0, #3
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 8001f48:	2000      	movs	r0, #0
}
 8001f4a:	b002      	add	sp, #8
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
 8001f4e:	bf00      	nop
 8001f50:	10908120 	.word	0x10908120
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40007000 	.word	0x40007000
      return HAL_ERROR;
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	e7f4      	b.n	8001f4a <HAL_RCC_OscConfig+0x5f6>

08001f60 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x5c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f64:	f003 020c 	and.w	r2, r3, #12
 8001f68:	2a08      	cmp	r2, #8
 8001f6a:	d124      	bne.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f6c:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8001f70:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f74:	fa92 f2a2 	rbit	r2, r2
 8001f78:	fab2 f282 	clz	r2, r2
 8001f7c:	fa21 f202 	lsr.w	r2, r1, r2
 8001f80:	490f      	ldr	r1, [pc, #60]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x60>)
 8001f82:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f84:	4a0d      	ldr	r2, [pc, #52]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x5c>)
 8001f86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f88:	f002 020f 	and.w	r2, r2, #15
 8001f8c:	210f      	movs	r1, #15
 8001f8e:	fa91 f1a1 	rbit	r1, r1
 8001f92:	fab1 f181 	clz	r1, r1
 8001f96:	40ca      	lsrs	r2, r1
 8001f98:	490a      	ldr	r1, [pc, #40]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x64>)
 8001f9a:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f9c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001fa0:	d103      	bne.n	8001faa <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x68>)
 8001fa4:	fb03 f000 	mul.w	r0, r3, r0
 8001fa8:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x6c>)
 8001fac:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fb0:	fb03 f000 	mul.w	r0, r3, r0
 8001fb4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001fb6:	4805      	ldr	r0, [pc, #20]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	080039d0 	.word	0x080039d0
 8001fc4:	080039e0 	.word	0x080039e0
 8001fc8:	003d0900 	.word	0x003d0900
 8001fcc:	007a1200 	.word	0x007a1200

08001fd0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001fd0:	4b70      	ldr	r3, [pc, #448]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	428b      	cmp	r3, r1
 8001fda:	d20c      	bcs.n	8001ff6 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fdc:	4a6d      	ldr	r2, [pc, #436]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	6813      	ldr	r3, [r2, #0]
 8001fe0:	f023 0307 	bic.w	r3, r3, #7
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fe8:	6813      	ldr	r3, [r2, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	4299      	cmp	r1, r3
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	4770      	bx	lr
{
 8001ff6:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	6803      	ldr	r3, [r0, #0]
 8001ffa:	f013 0f02 	tst.w	r3, #2
 8001ffe:	d006      	beq.n	800200e <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002000:	4a65      	ldr	r2, [pc, #404]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002002:	6853      	ldr	r3, [r2, #4]
 8002004:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002008:	6884      	ldr	r4, [r0, #8]
 800200a:	4323      	orrs	r3, r4
 800200c:	6053      	str	r3, [r2, #4]
 800200e:	460d      	mov	r5, r1
 8002010:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002012:	6803      	ldr	r3, [r0, #0]
 8002014:	f013 0f01 	tst.w	r3, #1
 8002018:	d07a      	beq.n	8002110 <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201a:	6843      	ldr	r3, [r0, #4]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d02f      	beq.n	8002080 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002020:	2b02      	cmp	r3, #2
 8002022:	d042      	beq.n	80020aa <HAL_RCC_ClockConfig+0xda>
 8002024:	2202      	movs	r2, #2
 8002026:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202a:	4a5b      	ldr	r2, [pc, #364]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 800202c:	6810      	ldr	r0, [r2, #0]
 800202e:	2202      	movs	r2, #2
 8002030:	fa92 f2a2 	rbit	r2, r2
 8002034:	fab2 f282 	clz	r2, r2
 8002038:	f002 021f 	and.w	r2, r2, #31
 800203c:	2101      	movs	r1, #1
 800203e:	fa01 f202 	lsl.w	r2, r1, r2
 8002042:	4210      	tst	r0, r2
 8002044:	f000 80a4 	beq.w	8002190 <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002048:	4953      	ldr	r1, [pc, #332]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 800204a:	684a      	ldr	r2, [r1, #4]
 800204c:	f022 0203 	bic.w	r2, r2, #3
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002054:	f7fe fd70 	bl	8000b38 <HAL_GetTick>
 8002058:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205a:	6863      	ldr	r3, [r4, #4]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d039      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002060:	2b02      	cmp	r3, #2
 8002062:	d046      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002064:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f013 0f0c 	tst.w	r3, #12
 800206c:	d050      	beq.n	8002110 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206e:	f7fe fd63 	bl	8000b38 <HAL_GetTick>
 8002072:	1b80      	subs	r0, r0, r6
 8002074:	f241 3388 	movw	r3, #5000	; 0x1388
 8002078:	4298      	cmp	r0, r3
 800207a:	d9f3      	bls.n	8002064 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 800207c:	2003      	movs	r0, #3
 800207e:	bd70      	pop	{r4, r5, r6, pc}
 8002080:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002084:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002088:	4a43      	ldr	r2, [pc, #268]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 800208a:	6810      	ldr	r0, [r2, #0]
 800208c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002090:	fa92 f2a2 	rbit	r2, r2
 8002094:	fab2 f282 	clz	r2, r2
 8002098:	f002 021f 	and.w	r2, r2, #31
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f202 	lsl.w	r2, r1, r2
 80020a2:	4210      	tst	r0, r2
 80020a4:	d1d0      	bne.n	8002048 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 80020a6:	2001      	movs	r0, #1
 80020a8:	bd70      	pop	{r4, r5, r6, pc}
 80020aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ae:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b2:	4a39      	ldr	r2, [pc, #228]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 80020b4:	6810      	ldr	r0, [r2, #0]
 80020b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ba:	fa92 f2a2 	rbit	r2, r2
 80020be:	fab2 f282 	clz	r2, r2
 80020c2:	f002 021f 	and.w	r2, r2, #31
 80020c6:	2101      	movs	r1, #1
 80020c8:	fa01 f202 	lsl.w	r2, r1, r2
 80020cc:	4210      	tst	r0, r2
 80020ce:	d1bb      	bne.n	8002048 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 80020d0:	2001      	movs	r0, #1
 80020d2:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d4:	4b30      	ldr	r3, [pc, #192]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d017      	beq.n	8002110 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e0:	f7fe fd2a 	bl	8000b38 <HAL_GetTick>
 80020e4:	1b80      	subs	r0, r0, r6
 80020e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80020ea:	4298      	cmp	r0, r3
 80020ec:	d9f2      	bls.n	80020d4 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 80020ee:	2003      	movs	r0, #3
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020f2:	4b29      	ldr	r3, [pc, #164]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d008      	beq.n	8002110 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fe:	f7fe fd1b 	bl	8000b38 <HAL_GetTick>
 8002102:	1b80      	subs	r0, r0, r6
 8002104:	f241 3388 	movw	r3, #5000	; 0x1388
 8002108:	4298      	cmp	r0, r3
 800210a:	d9f2      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 800210c:	2003      	movs	r0, #3
 800210e:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002110:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	429d      	cmp	r5, r3
 800211a:	d20c      	bcs.n	8002136 <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211c:	4a1d      	ldr	r2, [pc, #116]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	6813      	ldr	r3, [r2, #0]
 8002120:	f023 0307 	bic.w	r3, r3, #7
 8002124:	432b      	orrs	r3, r5
 8002126:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002128:	6813      	ldr	r3, [r2, #0]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	429d      	cmp	r5, r3
 8002130:	d001      	beq.n	8002136 <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 8002132:	2001      	movs	r0, #1
}
 8002134:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	f013 0f04 	tst.w	r3, #4
 800213c:	d006      	beq.n	800214c <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800213e:	4a16      	ldr	r2, [pc, #88]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002140:	6853      	ldr	r3, [r2, #4]
 8002142:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002146:	68e1      	ldr	r1, [r4, #12]
 8002148:	430b      	orrs	r3, r1
 800214a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214c:	6823      	ldr	r3, [r4, #0]
 800214e:	f013 0f08 	tst.w	r3, #8
 8002152:	d007      	beq.n	8002164 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002154:	4a10      	ldr	r2, [pc, #64]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002156:	6853      	ldr	r3, [r2, #4]
 8002158:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800215c:	6921      	ldr	r1, [r4, #16]
 800215e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002162:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002164:	f7ff fefc 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002170:	22f0      	movs	r2, #240	; 0xf0
 8002172:	fa92 f2a2 	rbit	r2, r2
 8002176:	fab2 f282 	clz	r2, r2
 800217a:	40d3      	lsrs	r3, r2
 800217c:	4a07      	ldr	r2, [pc, #28]	; (800219c <HAL_RCC_ClockConfig+0x1cc>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	40d8      	lsrs	r0, r3
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <HAL_RCC_ClockConfig+0x1d0>)
 8002184:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002186:	2000      	movs	r0, #0
 8002188:	f7fe fca6 	bl	8000ad8 <HAL_InitTick>
  return HAL_OK;
 800218c:	2000      	movs	r0, #0
 800218e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002190:	2001      	movs	r0, #1
 8002192:	bd70      	pop	{r4, r5, r6, pc}
 8002194:	40022000 	.word	0x40022000
 8002198:	40021000 	.word	0x40021000
 800219c:	08003a00 	.word	0x08003a00
 80021a0:	20000000 	.word	0x20000000

080021a4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80021a4:	4b01      	ldr	r3, [pc, #4]	; (80021ac <HAL_RCC_GetHCLKFreq+0x8>)
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000000 	.word	0x20000000

080021b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021b2:	f7ff fff7 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021c2:	fa92 f2a2 	rbit	r2, r2
 80021c6:	fab2 f282 	clz	r2, r2
 80021ca:	40d3      	lsrs	r3, r2
 80021cc:	4a02      	ldr	r2, [pc, #8]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
}    
 80021d0:	40d8      	lsrs	r0, r3
 80021d2:	bd08      	pop	{r3, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08003a10 	.word	0x08003a10

080021dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021dc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021de:	f7ff ffe1 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021ea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021ee:	fa92 f2a2 	rbit	r2, r2
 80021f2:	fab2 f282 	clz	r2, r2
 80021f6:	40d3      	lsrs	r3, r2
 80021f8:	4a02      	ldr	r2, [pc, #8]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021fa:	5cd3      	ldrb	r3, [r2, r3]
} 
 80021fc:	40d8      	lsrs	r0, r3
 80021fe:	bd08      	pop	{r3, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	08003a10 	.word	0x08003a10

08002208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220a:	b083      	sub	sp, #12
 800220c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800220e:	6803      	ldr	r3, [r0, #0]
 8002210:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002214:	d044      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002216:	4b64      	ldr	r3, [pc, #400]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800221e:	d179      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002220:	4b61      	ldr	r3, [pc, #388]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002222:	69da      	ldr	r2, [r3, #28]
 8002224:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002228:	61da      	str	r2, [r3, #28]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002234:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002236:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800223e:	d06b      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002244:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002248:	d021      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x86>
 800224a:	6862      	ldr	r2, [r4, #4]
 800224c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002250:	4293      	cmp	r3, r2
 8002252:	d01c      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002254:	4854      	ldr	r0, [pc, #336]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002256:	6a01      	ldr	r1, [r0, #32]
 8002258:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 800225c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002260:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002264:	fab2 f282 	clz	r2, r2
 8002268:	4f51      	ldr	r7, [pc, #324]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800226a:	443a      	add	r2, r7
 800226c:	0092      	lsls	r2, r2, #2
 800226e:	f04f 0e01 	mov.w	lr, #1
 8002272:	f8c2 e000 	str.w	lr, [r2]
 8002276:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	443b      	add	r3, r7
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002286:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002288:	f011 0f01 	tst.w	r1, #1
 800228c:	d158      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800228e:	4a46      	ldr	r2, [pc, #280]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002290:	6a13      	ldr	r3, [r2, #32]
 8002292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002296:	6861      	ldr	r1, [r4, #4]
 8002298:	430b      	orrs	r3, r1
 800229a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800229c:	2d00      	cmp	r5, #0
 800229e:	d17a      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	f013 0f01 	tst.w	r3, #1
 80022a6:	d006      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022a8:	4a3f      	ldr	r2, [pc, #252]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80022aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022ac:	f023 0303 	bic.w	r3, r3, #3
 80022b0:	68a1      	ldr	r1, [r4, #8]
 80022b2:	430b      	orrs	r3, r1
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	f013 0f20 	tst.w	r3, #32
 80022bc:	d006      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022be:	4a3a      	ldr	r2, [pc, #232]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80022c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022c2:	f023 0310 	bic.w	r3, r3, #16
 80022c6:	68e1      	ldr	r1, [r4, #12]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	f013 0f80 	tst.w	r3, #128	; 0x80
 80022d2:	d006      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022d4:	4a34      	ldr	r2, [pc, #208]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80022d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80022d8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80022dc:	6921      	ldr	r1, [r4, #16]
 80022de:	430b      	orrs	r3, r1
 80022e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80022e8:	d006      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022ea:	4a2f      	ldr	r2, [pc, #188]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80022ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80022ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022f2:	6961      	ldr	r1, [r4, #20]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80022fe:	d051      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002300:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002302:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002308:	69a1      	ldr	r1, [r4, #24]
 800230a:	430b      	orrs	r3, r1
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800230e:	2000      	movs	r0, #0
}
 8002310:	b003      	add	sp, #12
 8002312:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002314:	2500      	movs	r5, #0
 8002316:	e78e      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002318:	4a24      	ldr	r2, [pc, #144]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800231a:	6813      	ldr	r3, [r2, #0]
 800231c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002320:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002322:	f7fe fc09 	bl	8000b38 <HAL_GetTick>
 8002326:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002328:	4b20      	ldr	r3, [pc, #128]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002330:	d186      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002332:	f7fe fc01 	bl	8000b38 <HAL_GetTick>
 8002336:	1b80      	subs	r0, r0, r6
 8002338:	2864      	cmp	r0, #100	; 0x64
 800233a:	d9f5      	bls.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 800233c:	2003      	movs	r0, #3
 800233e:	e7e7      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8002340:	f7fe fbfa 	bl	8000b38 <HAL_GetTick>
 8002344:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002346:	e014      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002348:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800234a:	6a19      	ldr	r1, [r3, #32]
 800234c:	2302      	movs	r3, #2
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	fab3 f383 	clz	r3, r3
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	2201      	movs	r2, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	4219      	tst	r1, r3
 8002362:	d194      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002364:	f7fe fbe8 	bl	8000b38 <HAL_GetTick>
 8002368:	1b80      	subs	r0, r0, r6
 800236a:	f241 3388 	movw	r3, #5000	; 0x1388
 800236e:	4298      	cmp	r0, r3
 8002370:	d816      	bhi.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002372:	2302      	movs	r3, #2
 8002374:	fa93 f2a3 	rbit	r2, r3
 8002378:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	f043 0302 	orr.w	r3, r3, #2
 8002386:	2b02      	cmp	r3, #2
 8002388:	d0de      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800238a:	2302      	movs	r3, #2
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002392:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002394:	e7da      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002396:	69d3      	ldr	r3, [r2, #28]
 8002398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239c:	61d3      	str	r3, [r2, #28]
 800239e:	e77f      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 80023a0:	2003      	movs	r0, #3
 80023a2:	e7b5      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 80023a4:	2000      	movs	r0, #0
 80023a6:	e7b3      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
 80023b0:	10908100 	.word	0x10908100

080023b4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023b4:	6802      	ldr	r2, [r0, #0]
 80023b6:	6813      	ldr	r3, [r2, #0]
 80023b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023bc:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023be:	6802      	ldr	r2, [r0, #0]
 80023c0:	6893      	ldr	r3, [r2, #8]
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023c8:	2320      	movs	r3, #32
 80023ca:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80023ce:	4770      	bx	lr

080023d0 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80023d0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	d001      	beq.n	80023de <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 80023da:	2002      	movs	r0, #2
 80023dc:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 80023de:	2900      	cmp	r1, #0
 80023e0:	d047      	beq.n	8002472 <HAL_UART_Receive_IT+0xa2>
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	d047      	beq.n	8002476 <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 80023e6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d045      	beq.n	800247a <HAL_UART_Receive_IT+0xaa>
 80023ee:	2301      	movs	r3, #1
 80023f0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 80023f4:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80023f6:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 80023fa:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80023fe:	6883      	ldr	r3, [r0, #8]
 8002400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002404:	d006      	beq.n	8002414 <HAL_UART_Receive_IT+0x44>
 8002406:	b9a3      	cbnz	r3, 8002432 <HAL_UART_Receive_IT+0x62>
 8002408:	6903      	ldr	r3, [r0, #16]
 800240a:	b973      	cbnz	r3, 800242a <HAL_UART_Receive_IT+0x5a>
 800240c:	23ff      	movs	r3, #255	; 0xff
 800240e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002412:	e011      	b.n	8002438 <HAL_UART_Receive_IT+0x68>
 8002414:	6903      	ldr	r3, [r0, #16]
 8002416:	b923      	cbnz	r3, 8002422 <HAL_UART_Receive_IT+0x52>
 8002418:	f240 13ff 	movw	r3, #511	; 0x1ff
 800241c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002420:	e00a      	b.n	8002438 <HAL_UART_Receive_IT+0x68>
 8002422:	23ff      	movs	r3, #255	; 0xff
 8002424:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002428:	e006      	b.n	8002438 <HAL_UART_Receive_IT+0x68>
 800242a:	237f      	movs	r3, #127	; 0x7f
 800242c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002430:	e002      	b.n	8002438 <HAL_UART_Receive_IT+0x68>
 8002432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002436:	d012      	beq.n	800245e <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002438:	2300      	movs	r3, #0
 800243a:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800243c:	2222      	movs	r2, #34	; 0x22
 800243e:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8002442:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002446:	6801      	ldr	r1, [r0, #0]
 8002448:	688a      	ldr	r2, [r1, #8]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002450:	6801      	ldr	r1, [r0, #0]
 8002452:	680a      	ldr	r2, [r1, #0]
 8002454:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002458:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 800245a:	4618      	mov	r0, r3
 800245c:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800245e:	6903      	ldr	r3, [r0, #16]
 8002460:	b91b      	cbnz	r3, 800246a <HAL_UART_Receive_IT+0x9a>
 8002462:	237f      	movs	r3, #127	; 0x7f
 8002464:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002468:	e7e6      	b.n	8002438 <HAL_UART_Receive_IT+0x68>
 800246a:	233f      	movs	r3, #63	; 0x3f
 800246c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002470:	e7e2      	b.n	8002438 <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 8002472:	2001      	movs	r0, #1
 8002474:	4770      	bx	lr
 8002476:	2001      	movs	r0, #1
 8002478:	4770      	bx	lr
    __HAL_LOCK(huart);
 800247a:	2002      	movs	r0, #2
}
 800247c:	4770      	bx	lr

0800247e <HAL_UART_TxCpltCallback>:
{
 800247e:	4770      	bx	lr

08002480 <HAL_UART_ErrorCallback>:
{
 8002480:	4770      	bx	lr

08002482 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002482:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002484:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800248c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002490:	f7ff fff6 	bl	8002480 <HAL_UART_ErrorCallback>
 8002494:	bd08      	pop	{r3, pc}
	...

08002498 <UART_SetConfig>:
{
 8002498:	b538      	push	{r3, r4, r5, lr}
 800249a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800249c:	6883      	ldr	r3, [r0, #8]
 800249e:	6902      	ldr	r2, [r0, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	6942      	ldr	r2, [r0, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	69c2      	ldr	r2, [r0, #28]
 80024a8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80024aa:	6801      	ldr	r1, [r0, #0]
 80024ac:	6808      	ldr	r0, [r1, #0]
 80024ae:	4a64      	ldr	r2, [pc, #400]	; (8002640 <UART_SetConfig+0x1a8>)
 80024b0:	4002      	ands	r2, r0
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024b6:	6822      	ldr	r2, [r4, #0]
 80024b8:	6853      	ldr	r3, [r2, #4]
 80024ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024be:	68e1      	ldr	r1, [r4, #12]
 80024c0:	430b      	orrs	r3, r1
 80024c2:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80024c4:	69a3      	ldr	r3, [r4, #24]
 80024c6:	6a22      	ldr	r2, [r4, #32]
 80024c8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80024ca:	6821      	ldr	r1, [r4, #0]
 80024cc:	688a      	ldr	r2, [r1, #8]
 80024ce:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024d6:	6825      	ldr	r5, [r4, #0]
 80024d8:	4b5a      	ldr	r3, [pc, #360]	; (8002644 <UART_SetConfig+0x1ac>)
 80024da:	429d      	cmp	r5, r3
 80024dc:	d015      	beq.n	800250a <UART_SetConfig+0x72>
 80024de:	4b5a      	ldr	r3, [pc, #360]	; (8002648 <UART_SetConfig+0x1b0>)
 80024e0:	429d      	cmp	r5, r3
 80024e2:	d029      	beq.n	8002538 <UART_SetConfig+0xa0>
 80024e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e8:	429d      	cmp	r5, r3
 80024ea:	d021      	beq.n	8002530 <UART_SetConfig+0x98>
 80024ec:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024ee:	69e2      	ldr	r2, [r4, #28]
 80024f0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80024f4:	d022      	beq.n	800253c <UART_SetConfig+0xa4>
    switch (clocksource)
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	f200 809f 	bhi.w	800263a <UART_SetConfig+0x1a2>
 80024fc:	e8df f003 	tbb	[pc, r3]
 8002500:	9d7c7166 	.word	0x9d7c7166
 8002504:	9d9d9d88 	.word	0x9d9d9d88
 8002508:	93          	.byte	0x93
 8002509:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800250a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b03      	cmp	r3, #3
 8002516:	d809      	bhi.n	800252c <UART_SetConfig+0x94>
 8002518:	e8df f003 	tbb	[pc, r3]
 800251c:	0c060402 	.word	0x0c060402
 8002520:	2300      	movs	r3, #0
 8002522:	e7e4      	b.n	80024ee <UART_SetConfig+0x56>
 8002524:	2304      	movs	r3, #4
 8002526:	e7e2      	b.n	80024ee <UART_SetConfig+0x56>
 8002528:	2308      	movs	r3, #8
 800252a:	e7e0      	b.n	80024ee <UART_SetConfig+0x56>
 800252c:	2310      	movs	r3, #16
 800252e:	e7de      	b.n	80024ee <UART_SetConfig+0x56>
 8002530:	2300      	movs	r3, #0
 8002532:	e7dc      	b.n	80024ee <UART_SetConfig+0x56>
 8002534:	2302      	movs	r3, #2
 8002536:	e7da      	b.n	80024ee <UART_SetConfig+0x56>
 8002538:	2300      	movs	r3, #0
 800253a:	e7d8      	b.n	80024ee <UART_SetConfig+0x56>
    switch (clocksource)
 800253c:	2b08      	cmp	r3, #8
 800253e:	d842      	bhi.n	80025c6 <UART_SetConfig+0x12e>
 8002540:	e8df f003 	tbb	[pc, r3]
 8002544:	41221705 	.word	0x41221705
 8002548:	4141412d 	.word	0x4141412d
 800254c:	38          	.byte	0x38
 800254d:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800254e:	f7ff fe2f 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 8002552:	6862      	ldr	r2, [r4, #4]
 8002554:	0853      	lsrs	r3, r2, #1
 8002556:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800255a:	fbb3 f3f2 	udiv	r3, r3, r2
 800255e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002560:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002562:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002566:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800256a:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 800256c:	6822      	ldr	r2, [r4, #0]
 800256e:	60d3      	str	r3, [r2, #12]
 8002570:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002572:	f7ff fe33 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 8002576:	6862      	ldr	r2, [r4, #4]
 8002578:	0853      	lsrs	r3, r2, #1
 800257a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800257e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002582:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002584:	2000      	movs	r0, #0
        break;
 8002586:	e7ec      	b.n	8002562 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002588:	6862      	ldr	r2, [r4, #4]
 800258a:	0853      	lsrs	r3, r2, #1
 800258c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002590:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002594:	fbb3 f3f2 	udiv	r3, r3, r2
 8002598:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800259a:	2000      	movs	r0, #0
        break;
 800259c:	e7e1      	b.n	8002562 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800259e:	f7ff fcdf 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 80025a2:	6862      	ldr	r2, [r4, #4]
 80025a4:	0853      	lsrs	r3, r2, #1
 80025a6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80025aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80025ae:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80025b0:	2000      	movs	r0, #0
        break;
 80025b2:	e7d6      	b.n	8002562 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80025b4:	6862      	ldr	r2, [r4, #4]
 80025b6:	0853      	lsrs	r3, r2, #1
 80025b8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80025bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80025c0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80025c2:	2000      	movs	r0, #0
        break;
 80025c4:	e7cd      	b.n	8002562 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 80025c6:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	e7ca      	b.n	8002562 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025cc:	f7ff fdf0 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 80025d0:	6863      	ldr	r3, [r4, #4]
 80025d2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80025d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80025da:	b280      	uxth	r0, r0
 80025dc:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80025de:	2000      	movs	r0, #0
        break;
 80025e0:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80025e2:	f7ff fdfb 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 80025e6:	6863      	ldr	r3, [r4, #4]
 80025e8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80025ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80025f0:	b280      	uxth	r0, r0
 80025f2:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80025f4:	2000      	movs	r0, #0
        break;
 80025f6:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80025f8:	6862      	ldr	r2, [r4, #4]
 80025fa:	0853      	lsrs	r3, r2, #1
 80025fc:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002600:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002604:	fbb3 f3f2 	udiv	r3, r3, r2
 8002608:	b29b      	uxth	r3, r3
 800260a:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800260c:	2000      	movs	r0, #0
        break;
 800260e:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002610:	f7ff fca6 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8002614:	6863      	ldr	r3, [r4, #4]
 8002616:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800261a:	fbb0 f0f3 	udiv	r0, r0, r3
 800261e:	b280      	uxth	r0, r0
 8002620:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002622:	2000      	movs	r0, #0
        break;
 8002624:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002626:	6862      	ldr	r2, [r4, #4]
 8002628:	0853      	lsrs	r3, r2, #1
 800262a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800262e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002632:	b29b      	uxth	r3, r3
 8002634:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002636:	2000      	movs	r0, #0
        break;
 8002638:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 800263a:	2001      	movs	r0, #1
}
 800263c:	bd38      	pop	{r3, r4, r5, pc}
 800263e:	bf00      	nop
 8002640:	efff69f3 	.word	0xefff69f3
 8002644:	40013800 	.word	0x40013800
 8002648:	40004400 	.word	0x40004400

0800264c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800264c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800264e:	f013 0f01 	tst.w	r3, #1
 8002652:	d006      	beq.n	8002662 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002654:	6802      	ldr	r2, [r0, #0]
 8002656:	6853      	ldr	r3, [r2, #4]
 8002658:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800265c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800265e:	430b      	orrs	r3, r1
 8002660:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002662:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002664:	f013 0f02 	tst.w	r3, #2
 8002668:	d006      	beq.n	8002678 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800266a:	6802      	ldr	r2, [r0, #0]
 800266c:	6853      	ldr	r3, [r2, #4]
 800266e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002672:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002674:	430b      	orrs	r3, r1
 8002676:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002678:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800267a:	f013 0f04 	tst.w	r3, #4
 800267e:	d006      	beq.n	800268e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002680:	6802      	ldr	r2, [r0, #0]
 8002682:	6853      	ldr	r3, [r2, #4]
 8002684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002688:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800268a:	430b      	orrs	r3, r1
 800268c:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800268e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002690:	f013 0f08 	tst.w	r3, #8
 8002694:	d006      	beq.n	80026a4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002696:	6802      	ldr	r2, [r0, #0]
 8002698:	6853      	ldr	r3, [r2, #4]
 800269a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800269e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80026a0:	430b      	orrs	r3, r1
 80026a2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026a6:	f013 0f10 	tst.w	r3, #16
 80026aa:	d006      	beq.n	80026ba <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026ac:	6802      	ldr	r2, [r0, #0]
 80026ae:	6893      	ldr	r3, [r2, #8]
 80026b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026b4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80026b6:	430b      	orrs	r3, r1
 80026b8:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026bc:	f013 0f20 	tst.w	r3, #32
 80026c0:	d006      	beq.n	80026d0 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026c2:	6802      	ldr	r2, [r0, #0]
 80026c4:	6893      	ldr	r3, [r2, #8]
 80026c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026ca:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80026d6:	d00a      	beq.n	80026ee <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026d8:	6802      	ldr	r2, [r0, #0]
 80026da:	6853      	ldr	r3, [r2, #4]
 80026dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80026e0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80026e2:	430b      	orrs	r3, r1
 80026e4:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80026e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ec:	d00b      	beq.n	8002706 <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80026f4:	d006      	beq.n	8002704 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026f6:	6802      	ldr	r2, [r0, #0]
 80026f8:	6853      	ldr	r3, [r2, #4]
 80026fa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80026fe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002700:	430b      	orrs	r3, r1
 8002702:	6053      	str	r3, [r2, #4]
 8002704:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002706:	6802      	ldr	r2, [r0, #0]
 8002708:	6853      	ldr	r3, [r2, #4]
 800270a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800270e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002710:	430b      	orrs	r3, r1
 8002712:	6053      	str	r3, [r2, #4]
 8002714:	e7eb      	b.n	80026ee <UART_AdvFeatureConfig+0xa2>

08002716 <UART_WaitOnFlagUntilTimeout>:
{
 8002716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800271a:	4605      	mov	r5, r0
 800271c:	460f      	mov	r7, r1
 800271e:	4616      	mov	r6, r2
 8002720:	4698      	mov	r8, r3
 8002722:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002724:	682b      	ldr	r3, [r5, #0]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	ea37 0303 	bics.w	r3, r7, r3
 800272c:	bf0c      	ite	eq
 800272e:	2301      	moveq	r3, #1
 8002730:	2300      	movne	r3, #0
 8002732:	42b3      	cmp	r3, r6
 8002734:	d11e      	bne.n	8002774 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8002736:	f1b4 3fff 	cmp.w	r4, #4294967295
 800273a:	d0f3      	beq.n	8002724 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800273c:	b12c      	cbz	r4, 800274a <UART_WaitOnFlagUntilTimeout+0x34>
 800273e:	f7fe f9fb 	bl	8000b38 <HAL_GetTick>
 8002742:	eba0 0008 	sub.w	r0, r0, r8
 8002746:	4284      	cmp	r4, r0
 8002748:	d2ec      	bcs.n	8002724 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800274a:	682a      	ldr	r2, [r5, #0]
 800274c:	6813      	ldr	r3, [r2, #0]
 800274e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002752:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002754:	682a      	ldr	r2, [r5, #0]
 8002756:	6893      	ldr	r3, [r2, #8]
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800275e:	2320      	movs	r3, #32
 8002760:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002764:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002768:	2300      	movs	r3, #0
 800276a:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 800276e:	2003      	movs	r0, #3
 8002770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002774:	2000      	movs	r0, #0
}
 8002776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800277a <HAL_UART_Transmit>:
{
 800277a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002782:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b20      	cmp	r3, #32
 800278a:	d004      	beq.n	8002796 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
}
 800278e:	4618      	mov	r0, r3
 8002790:	b002      	add	sp, #8
 8002792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002796:	4604      	mov	r4, r0
 8002798:	460d      	mov	r5, r1
 800279a:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 800279c:	2900      	cmp	r1, #0
 800279e:	d04e      	beq.n	800283e <HAL_UART_Transmit+0xc4>
 80027a0:	2a00      	cmp	r2, #0
 80027a2:	d04e      	beq.n	8002842 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 80027a4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_UART_Transmit+0x36>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e7ee      	b.n	800278e <HAL_UART_Transmit+0x14>
 80027b0:	2301      	movs	r3, #1
 80027b2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ba:	2321      	movs	r3, #33	; 0x21
 80027bc:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80027c0:	f7fe f9ba 	bl	8000b38 <HAL_GetTick>
 80027c4:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80027c6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80027ca:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80027ce:	e003      	b.n	80027d8 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	782a      	ldrb	r2, [r5, #0]
 80027d4:	851a      	strh	r2, [r3, #40]	; 0x28
 80027d6:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 80027d8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80027dc:	b29b      	uxth	r3, r3
 80027de:	b1e3      	cbz	r3, 800281a <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 80027e0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ee:	9600      	str	r6, [sp, #0]
 80027f0:	463b      	mov	r3, r7
 80027f2:	2200      	movs	r2, #0
 80027f4:	2180      	movs	r1, #128	; 0x80
 80027f6:	4620      	mov	r0, r4
 80027f8:	f7ff ff8d 	bl	8002716 <UART_WaitOnFlagUntilTimeout>
 80027fc:	bb18      	cbnz	r0, 8002846 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027fe:	68a3      	ldr	r3, [r4, #8]
 8002800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002804:	d1e4      	bne.n	80027d0 <HAL_UART_Transmit+0x56>
 8002806:	6923      	ldr	r3, [r4, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e1      	bne.n	80027d0 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800280c:	6822      	ldr	r2, [r4, #0]
 800280e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002816:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8002818:	e7de      	b.n	80027d8 <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800281a:	9600      	str	r6, [sp, #0]
 800281c:	463b      	mov	r3, r7
 800281e:	2200      	movs	r2, #0
 8002820:	2140      	movs	r1, #64	; 0x40
 8002822:	4620      	mov	r0, r4
 8002824:	f7ff ff77 	bl	8002716 <UART_WaitOnFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	b108      	cbz	r0, 8002830 <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e7ae      	b.n	800278e <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8002830:	2220      	movs	r2, #32
 8002832:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002836:	2200      	movs	r2, #0
 8002838:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    return HAL_OK;
 800283c:	e7a7      	b.n	800278e <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e7a5      	b.n	800278e <HAL_UART_Transmit+0x14>
 8002842:	2301      	movs	r3, #1
 8002844:	e7a3      	b.n	800278e <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e7a1      	b.n	800278e <HAL_UART_Transmit+0x14>

0800284a <UART_CheckIdleState>:
{
 800284a:	b530      	push	{r4, r5, lr}
 800284c:	b083      	sub	sp, #12
 800284e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002850:	2300      	movs	r3, #0
 8002852:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002854:	f7fe f970 	bl	8000b38 <HAL_GetTick>
 8002858:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f013 0f08 	tst.w	r3, #8
 8002862:	d10e      	bne.n	8002882 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f013 0f04 	tst.w	r3, #4
 800286c:	d117      	bne.n	800289e <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 800286e:	2320      	movs	r3, #32
 8002870:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002874:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8002878:	2000      	movs	r0, #0
 800287a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 800287e:	b003      	add	sp, #12
 8002880:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002882:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	4603      	mov	r3, r0
 800288a:	2200      	movs	r2, #0
 800288c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002890:	4620      	mov	r0, r4
 8002892:	f7ff ff40 	bl	8002716 <UART_WaitOnFlagUntilTimeout>
 8002896:	2800      	cmp	r0, #0
 8002898:	d0e4      	beq.n	8002864 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800289a:	2003      	movs	r0, #3
 800289c:	e7ef      	b.n	800287e <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800289e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	462b      	mov	r3, r5
 80028a6:	2200      	movs	r2, #0
 80028a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80028ac:	4620      	mov	r0, r4
 80028ae:	f7ff ff32 	bl	8002716 <UART_WaitOnFlagUntilTimeout>
 80028b2:	2800      	cmp	r0, #0
 80028b4:	d0db      	beq.n	800286e <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 80028b6:	2003      	movs	r0, #3
 80028b8:	e7e1      	b.n	800287e <UART_CheckIdleState+0x34>

080028ba <HAL_UART_Init>:
  if(huart == NULL)
 80028ba:	b378      	cbz	r0, 800291c <HAL_UART_Init+0x62>
{
 80028bc:	b510      	push	{r4, lr}
 80028be:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80028c0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80028c4:	b30b      	cbz	r3, 800290a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80028c6:	2324      	movs	r3, #36	; 0x24
 80028c8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80028cc:	6822      	ldr	r2, [r4, #0]
 80028ce:	6813      	ldr	r3, [r2, #0]
 80028d0:	f023 0301 	bic.w	r3, r3, #1
 80028d4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028d6:	4620      	mov	r0, r4
 80028d8:	f7ff fdde 	bl	8002498 <UART_SetConfig>
 80028dc:	2801      	cmp	r0, #1
 80028de:	d01f      	beq.n	8002920 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028e2:	b9bb      	cbnz	r3, 8002914 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e4:	6822      	ldr	r2, [r4, #0]
 80028e6:	6853      	ldr	r3, [r2, #4]
 80028e8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80028ec:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ee:	6822      	ldr	r2, [r4, #0]
 80028f0:	6893      	ldr	r3, [r2, #8]
 80028f2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80028f6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80028f8:	6822      	ldr	r2, [r4, #0]
 80028fa:	6813      	ldr	r3, [r2, #0]
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002902:	4620      	mov	r0, r4
 8002904:	f7ff ffa1 	bl	800284a <UART_CheckIdleState>
 8002908:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800290a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800290e:	f000 fafd 	bl	8002f0c <HAL_UART_MspInit>
 8002912:	e7d8      	b.n	80028c6 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002914:	4620      	mov	r0, r4
 8002916:	f7ff fe99 	bl	800264c <UART_AdvFeatureConfig>
 800291a:	e7e3      	b.n	80028e4 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800291c:	2001      	movs	r0, #1
 800291e:	4770      	bx	lr
}
 8002920:	bd10      	pop	{r4, pc}

08002922 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002922:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b21      	cmp	r3, #33	; 0x21
 800292a:	d001      	beq.n	8002930 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 800292c:	2002      	movs	r0, #2
  }
}
 800292e:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8002930:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002934:	b29b      	uxth	r3, r3
 8002936:	b193      	cbz	r3, 800295e <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002938:	6883      	ldr	r3, [r0, #8]
 800293a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293e:	d01a      	beq.n	8002976 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002940:	6802      	ldr	r2, [r0, #0]
 8002942:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002944:	1c59      	adds	r1, r3, #1
 8002946:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800294c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29b      	uxth	r3, r3
 8002956:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 800295a:	2000      	movs	r0, #0
 800295c:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800295e:	6802      	ldr	r2, [r0, #0]
 8002960:	6813      	ldr	r3, [r2, #0]
 8002962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002966:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002968:	6802      	ldr	r2, [r0, #0]
 800296a:	6813      	ldr	r3, [r2, #0]
 800296c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002970:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8002972:	2000      	movs	r0, #0
 8002974:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002976:	6903      	ldr	r3, [r0, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e1      	bne.n	8002940 <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 800297c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800297e:	6802      	ldr	r2, [r0, #0]
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002986:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002988:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800298a:	3302      	adds	r3, #2
 800298c:	64c3      	str	r3, [r0, #76]	; 0x4c
 800298e:	e7dd      	b.n	800294c <UART_Transmit_IT+0x2a>

08002990 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002990:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002992:	6801      	ldr	r1, [r0, #0]
 8002994:	680b      	ldr	r3, [r1, #0]
 8002996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800299a:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800299c:	2320      	movs	r3, #32
 800299e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 80029a2:	f7ff fd6c 	bl	800247e <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80029a6:	2000      	movs	r0, #0
 80029a8:	bd08      	pop	{r3, pc}

080029aa <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 80029aa:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029ae:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b22      	cmp	r3, #34	; 0x22
 80029b6:	d006      	beq.n	80029c6 <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80029b8:	6802      	ldr	r2, [r0, #0]
 80029ba:	6993      	ldr	r3, [r2, #24]
 80029bc:	f043 0308 	orr.w	r3, r3, #8
 80029c0:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 80029c2:	2002      	movs	r0, #2
 80029c4:	4770      	bx	lr
{
 80029c6:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80029c8:	6803      	ldr	r3, [r0, #0]
 80029ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80029cc:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ce:	6881      	ldr	r1, [r0, #8]
 80029d0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80029d4:	d00f      	beq.n	80029f6 <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80029d6:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80029d8:	1c4c      	adds	r4, r1, #1
 80029da:	6544      	str	r4, [r0, #84]	; 0x54
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	401a      	ands	r2, r3
 80029e0:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 80029e2:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80029f0:	b15b      	cbz	r3, 8002a0a <UART_Receive_IT+0x60>
    return HAL_OK;
 80029f2:	2000      	movs	r0, #0
  }
}
 80029f4:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f6:	6901      	ldr	r1, [r0, #16]
 80029f8:	2900      	cmp	r1, #0
 80029fa:	d1ec      	bne.n	80029d6 <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80029fc:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 80029fe:	401a      	ands	r2, r3
 8002a00:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 8002a02:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002a04:	3302      	adds	r3, #2
 8002a06:	6543      	str	r3, [r0, #84]	; 0x54
 8002a08:	e7eb      	b.n	80029e2 <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a0a:	6802      	ldr	r2, [r0, #0]
 8002a0c:	6813      	ldr	r3, [r2, #0]
 8002a0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a12:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a14:	6802      	ldr	r2, [r0, #0]
 8002a16:	6893      	ldr	r3, [r2, #8]
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002a1e:	2320      	movs	r3, #32
 8002a20:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8002a24:	f000 fd6e 	bl	8003504 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002a28:	2000      	movs	r0, #0
 8002a2a:	bd10      	pop	{r4, pc}

08002a2c <HAL_UART_IRQHandler>:
{
 8002a2c:	b538      	push	{r3, r4, r5, lr}
 8002a2e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a30:	6802      	ldr	r2, [r0, #0]
 8002a32:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a34:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 8002a36:	f013 050f 	ands.w	r5, r3, #15
 8002a3a:	d105      	bne.n	8002a48 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a3c:	f013 0f20 	tst.w	r3, #32
 8002a40:	d002      	beq.n	8002a48 <HAL_UART_IRQHandler+0x1c>
 8002a42:	f011 0f20 	tst.w	r1, #32
 8002a46:	d160      	bne.n	8002b0a <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 8002a48:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8002a4a:	2d00      	cmp	r5, #0
 8002a4c:	d072      	beq.n	8002b34 <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002a4e:	f010 0501 	ands.w	r5, r0, #1
 8002a52:	d102      	bne.n	8002a5a <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002a54:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002a58:	d06c      	beq.n	8002b34 <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a5a:	f013 0f01 	tst.w	r3, #1
 8002a5e:	d007      	beq.n	8002a70 <HAL_UART_IRQHandler+0x44>
 8002a60:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002a64:	d004      	beq.n	8002a70 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002a66:	2001      	movs	r0, #1
 8002a68:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a6a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002a6c:	4302      	orrs	r2, r0
 8002a6e:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a70:	f013 0f02 	tst.w	r3, #2
 8002a74:	d007      	beq.n	8002a86 <HAL_UART_IRQHandler+0x5a>
 8002a76:	b135      	cbz	r5, 8002a86 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002a78:	6822      	ldr	r2, [r4, #0]
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a7e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002a80:	f042 0204 	orr.w	r2, r2, #4
 8002a84:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a86:	f013 0f04 	tst.w	r3, #4
 8002a8a:	d007      	beq.n	8002a9c <HAL_UART_IRQHandler+0x70>
 8002a8c:	b135      	cbz	r5, 8002a9c <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002a8e:	6822      	ldr	r2, [r4, #0]
 8002a90:	2004      	movs	r0, #4
 8002a92:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a94:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002a96:	f042 0202 	orr.w	r2, r2, #2
 8002a9a:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002a9c:	f013 0f08 	tst.w	r3, #8
 8002aa0:	d009      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x8a>
 8002aa2:	f011 0f20 	tst.w	r1, #32
 8002aa6:	d100      	bne.n	8002aaa <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002aa8:	b12d      	cbz	r5, 8002ab6 <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002aaa:	6822      	ldr	r2, [r4, #0]
 8002aac:	2008      	movs	r0, #8
 8002aae:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ab0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002ab2:	4302      	orrs	r2, r0
 8002ab4:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ab6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002ab8:	2a00      	cmp	r2, #0
 8002aba:	d04d      	beq.n	8002b58 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002abc:	f013 0f20 	tst.w	r3, #32
 8002ac0:	d002      	beq.n	8002ac8 <HAL_UART_IRQHandler+0x9c>
 8002ac2:	f011 0f20 	tst.w	r1, #32
 8002ac6:	d123      	bne.n	8002b10 <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002ac8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002aca:	f013 0f08 	tst.w	r3, #8
 8002ace:	d104      	bne.n	8002ada <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002ad4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ad8:	d026      	beq.n	8002b28 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 8002ada:	4620      	mov	r0, r4
 8002adc:	f7ff fc6a 	bl	80023b4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae0:	6823      	ldr	r3, [r4, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002ae8:	d01a      	beq.n	8002b20 <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002af0:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002af2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002af4:	b183      	cbz	r3, 8002b18 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002af6:	4a23      	ldr	r2, [pc, #140]	; (8002b84 <HAL_UART_IRQHandler+0x158>)
 8002af8:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002afa:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002afc:	f7fe fe34 	bl	8001768 <HAL_DMA_Abort_IT>
 8002b00:	b350      	cbz	r0, 8002b58 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b02:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002b04:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b06:	4798      	blx	r3
 8002b08:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8002b0a:	f7ff ff4e 	bl	80029aa <UART_Receive_IT>
      return;
 8002b0e:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 8002b10:	4620      	mov	r0, r4
 8002b12:	f7ff ff4a 	bl	80029aa <UART_Receive_IT>
 8002b16:	e7d7      	b.n	8002ac8 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f7ff fcb1 	bl	8002480 <HAL_UART_ErrorCallback>
 8002b1e:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8002b20:	4620      	mov	r0, r4
 8002b22:	f7ff fcad 	bl	8002480 <HAL_UART_ErrorCallback>
 8002b26:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f7ff fca9 	bl	8002480 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002b32:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002b34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002b38:	d002      	beq.n	8002b40 <HAL_UART_IRQHandler+0x114>
 8002b3a:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002b3e:	d10c      	bne.n	8002b5a <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b40:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b44:	d002      	beq.n	8002b4c <HAL_UART_IRQHandler+0x120>
 8002b46:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002b4a:	d112      	bne.n	8002b72 <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b50:	d002      	beq.n	8002b58 <HAL_UART_IRQHandler+0x12c>
 8002b52:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002b56:	d110      	bne.n	8002b7a <HAL_UART_IRQHandler+0x14e>
 8002b58:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8002b5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b5e:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8002b60:	2320      	movs	r3, #32
 8002b62:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8002b66:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	f000 f80c 	bl	8002b88 <HAL_UARTEx_WakeupCallback>
    return;
 8002b70:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 8002b72:	4620      	mov	r0, r4
 8002b74:	f7ff fed5 	bl	8002922 <UART_Transmit_IT>
    return;
 8002b78:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7ff ff08 	bl	8002990 <UART_EndTransmit_IT>
    return;
 8002b80:	e7ea      	b.n	8002b58 <HAL_UART_IRQHandler+0x12c>
 8002b82:	bf00      	nop
 8002b84:	08002483 	.word	0x08002483

08002b88 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002b88:	4770      	bx	lr
	...

08002b8c <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
static void MX_GPIO_Init(void)
{
 8002b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b90:	4b45      	ldr	r3, [pc, #276]	; (8002ca8 <MX_GPIO_Init+0x11c>)
 8002b92:	695a      	ldr	r2, [r3, #20]
 8002b94:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002b98:	615a      	str	r2, [r3, #20]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002ba0:	9201      	str	r2, [sp, #4]
 8002ba2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002baa:	615a      	str	r2, [r3, #20]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002bb2:	9202      	str	r2, [sp, #8]
 8002bb4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002bbc:	615a      	str	r2, [r3, #20]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002bc4:	9203      	str	r2, [sp, #12]
 8002bc6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002bce:	615a      	str	r2, [r3, #20]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd6:	9304      	str	r3, [sp, #16]
 8002bd8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8002be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be4:	f7fe feb0 	bl	8001948 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8002be8:	4e30      	ldr	r6, [pc, #192]	; (8002cac <MX_GPIO_Init+0x120>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8002bf0:	4630      	mov	r0, r6
 8002bf2:	f7fe fea9 	bl	8001948 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002bf6:	4d2e      	ldr	r5, [pc, #184]	; (8002cb0 <MX_GPIO_Init+0x124>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2180      	movs	r1, #128	; 0x80
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f7fe fea3 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c06:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c08:	4b2a      	ldr	r3, [pc, #168]	; (8002cb4 <MX_GPIO_Init+0x128>)
 8002c0a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2400      	movs	r4, #0
 8002c0e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c10:	a905      	add	r1, sp, #20
 8002c12:	4628      	mov	r0, r5
 8002c14:	f7fe fdce 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c18:	2703      	movs	r7, #3
 8002c1a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c1c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c20:	a905      	add	r1, sp, #20
 8002c22:	4628      	mov	r0, r5
 8002c24:	f7fe fdc6 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002c28:	2313      	movs	r3, #19
 8002c2a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c2c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c30:	a905      	add	r1, sp, #20
 8002c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c36:	f7fe fdbd 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c3a:	230c      	movs	r3, #12
 8002c3c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c44:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c46:	2307      	movs	r3, #7
 8002c48:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4a:	a905      	add	r1, sp, #20
 8002c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c50:	f7fe fdb0 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8002c54:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002c58:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c5a:	2701      	movs	r7, #1
 8002c5c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c60:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c62:	a905      	add	r1, sp, #20
 8002c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c68:	f7fe fda4 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8002c6c:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8002c70:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c72:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c78:	a905      	add	r1, sp, #20
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	f7fe fd9a 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c84:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c8a:	a905      	add	r1, sp, #20
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	f7fe fd91 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c96:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c98:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c9c:	a905      	add	r1, sp, #20
 8002c9e:	4630      	mov	r0, r6
 8002ca0:	f7fe fd88 	bl	80017b4 <HAL_GPIO_Init>

}
 8002ca4:	b00b      	add	sp, #44	; 0x2c
 8002ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	48000400 	.word	0x48000400
 8002cb0:	48000800 	.word	0x48000800
 8002cb4:	10210000 	.word	0x10210000

08002cb8 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002cb8:	e7fe      	b.n	8002cb8 <_Error_Handler>
	...

08002cbc <MX_USART1_UART_Init>:
{
 8002cbc:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8002cbe:	480c      	ldr	r0, [pc, #48]	; (8002cf0 <MX_USART1_UART_Init+0x34>)
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <MX_USART1_UART_Init+0x38>)
 8002cc2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002cc4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002cc8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cce:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cd0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cd2:	220c      	movs	r2, #12
 8002cd4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cda:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cdc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cde:	f7ff fdec 	bl	80028ba <HAL_UART_Init>
 8002ce2:	b900      	cbnz	r0, 8002ce6 <MX_USART1_UART_Init+0x2a>
 8002ce4:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002ce6:	21fc      	movs	r1, #252	; 0xfc
 8002ce8:	4803      	ldr	r0, [pc, #12]	; (8002cf8 <MX_USART1_UART_Init+0x3c>)
 8002cea:	f7ff ffe5 	bl	8002cb8 <_Error_Handler>
 8002cee:	bf00      	nop
 8002cf0:	200000f4 	.word	0x200000f4
 8002cf4:	40013800 	.word	0x40013800
 8002cf8:	080039f0 	.word	0x080039f0

08002cfc <MX_ADC1_Init>:
{
 8002cfc:	b500      	push	{lr}
 8002cfe:	b085      	sub	sp, #20
  hadc1.Instance = ADC1;
 8002d00:	481d      	ldr	r0, [pc, #116]	; (8002d78 <MX_ADC1_Init+0x7c>)
 8002d02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d06:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d0c:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d0e:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d10:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d12:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d14:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d16:	2201      	movs	r2, #1
 8002d18:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d1a:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002d1c:	6202      	str	r2, [r0, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d1e:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d20:	2204      	movs	r2, #4
 8002d22:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002d24:	6183      	str	r3, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002d26:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d28:	f7fd fffe 	bl	8000d28 <HAL_ADC_Init>
 8002d2c:	b9e0      	cbnz	r0, 8002d68 <MX_ADC1_Init+0x6c>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002d2e:	a904      	add	r1, sp, #16
 8002d30:	2300      	movs	r3, #0
 8002d32:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002d36:	4810      	ldr	r0, [pc, #64]	; (8002d78 <MX_ADC1_Init+0x7c>)
 8002d38:	f7fe fbfe 	bl	8001538 <HAL_ADCEx_MultiModeConfigChannel>
 8002d3c:	b9c0      	cbnz	r0, 8002d70 <MX_ADC1_Init+0x74>
  adcChannel12.Channel = ADC_CHANNEL_12;
 8002d3e:	4a0f      	ldr	r2, [pc, #60]	; (8002d7c <MX_ADC1_Init+0x80>)
 8002d40:	230c      	movs	r3, #12
 8002d42:	6013      	str	r3, [r2, #0]
  adcChannel12.Rank = 1;
 8002d44:	2101      	movs	r1, #1
 8002d46:	6051      	str	r1, [r2, #4]
  adcChannel12.SingleDiff = ADC_SINGLE_ENDED;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60d3      	str	r3, [r2, #12]
  adcChannel12.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002d4c:	6093      	str	r3, [r2, #8]
  adcChannel12.OffsetNumber = ADC_OFFSET_NONE;
 8002d4e:	6113      	str	r3, [r2, #16]
  adcChannel12.Offset = 0;
 8002d50:	6153      	str	r3, [r2, #20]
  adcChannel13.Channel = ADC_CHANNEL_13;
 8002d52:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <MX_ADC1_Init+0x84>)
 8002d54:	200d      	movs	r0, #13
 8002d56:	6010      	str	r0, [r2, #0]
  adcChannel13.Rank = 1;
 8002d58:	6051      	str	r1, [r2, #4]
  adcChannel13.SingleDiff = ADC_SINGLE_ENDED;
 8002d5a:	60d3      	str	r3, [r2, #12]
  adcChannel13.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002d5c:	6093      	str	r3, [r2, #8]
  adcChannel13.OffsetNumber = ADC_OFFSET_NONE;
 8002d5e:	6113      	str	r3, [r2, #16]
  adcChannel13.Offset = 0;
 8002d60:	6153      	str	r3, [r2, #20]
}
 8002d62:	b005      	add	sp, #20
 8002d64:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002d68:	21cc      	movs	r1, #204	; 0xcc
 8002d6a:	4806      	ldr	r0, [pc, #24]	; (8002d84 <MX_ADC1_Init+0x88>)
 8002d6c:	f7ff ffa4 	bl	8002cb8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002d70:	21d4      	movs	r1, #212	; 0xd4
 8002d72:	4804      	ldr	r0, [pc, #16]	; (8002d84 <MX_ADC1_Init+0x88>)
 8002d74:	f7ff ffa0 	bl	8002cb8 <_Error_Handler>
 8002d78:	200000a0 	.word	0x200000a0
 8002d7c:	2000017c 	.word	0x2000017c
 8002d80:	20000164 	.word	0x20000164
 8002d84:	080039f0 	.word	0x080039f0

08002d88 <SystemClock_Config>:
{
 8002d88:	b500      	push	{lr}
 8002d8a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d90:	2201      	movs	r2, #1
 8002d92:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002d94:	2210      	movs	r2, #16
 8002d96:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d98:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002d9e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002da2:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002da4:	a80c      	add	r0, sp, #48	; 0x30
 8002da6:	f7fe fdd5 	bl	8001954 <HAL_RCC_OscConfig>
 8002daa:	bb60      	cbnz	r0, 8002e06 <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dac:	230f      	movs	r3, #15
 8002dae:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002db0:	2102      	movs	r1, #2
 8002db2:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002db4:	2300      	movs	r3, #0
 8002db6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dbc:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dbe:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002dc0:	a807      	add	r0, sp, #28
 8002dc2:	f7ff f905 	bl	8001fd0 <HAL_RCC_ClockConfig>
 8002dc6:	bb10      	cbnz	r0, 8002e0e <SystemClock_Config+0x86>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8002dc8:	2381      	movs	r3, #129	; 0x81
 8002dca:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dd4:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dd6:	4668      	mov	r0, sp
 8002dd8:	f7ff fa16 	bl	8002208 <HAL_RCCEx_PeriphCLKConfig>
 8002ddc:	b9d8      	cbnz	r0, 8002e16 <SystemClock_Config+0x8e>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002dde:	f7ff f9e1 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <SystemClock_Config+0x98>)
 8002de4:	fba3 3000 	umull	r3, r0, r3, r0
 8002de8:	0980      	lsrs	r0, r0, #6
 8002dea:	f7fe fc93 	bl	8001714 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002dee:	2004      	movs	r0, #4
 8002df0:	f7fe fca6 	bl	8001740 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002df4:	2200      	movs	r2, #0
 8002df6:	4611      	mov	r1, r2
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	f7fe fc4c 	bl	8001698 <HAL_NVIC_SetPriority>
}
 8002e00:	b017      	add	sp, #92	; 0x5c
 8002e02:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002e06:	218e      	movs	r1, #142	; 0x8e
 8002e08:	4806      	ldr	r0, [pc, #24]	; (8002e24 <SystemClock_Config+0x9c>)
 8002e0a:	f7ff ff55 	bl	8002cb8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002e0e:	219c      	movs	r1, #156	; 0x9c
 8002e10:	4804      	ldr	r0, [pc, #16]	; (8002e24 <SystemClock_Config+0x9c>)
 8002e12:	f7ff ff51 	bl	8002cb8 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002e16:	21a4      	movs	r1, #164	; 0xa4
 8002e18:	4802      	ldr	r0, [pc, #8]	; (8002e24 <SystemClock_Config+0x9c>)
 8002e1a:	f7ff ff4d 	bl	8002cb8 <_Error_Handler>
 8002e1e:	bf00      	nop
 8002e20:	10624dd3 	.word	0x10624dd3
 8002e24:	080039f0 	.word	0x080039f0

08002e28 <main>:
{
 8002e28:	b508      	push	{r3, lr}
  HAL_Init();
 8002e2a:	f7fd fe6b 	bl	8000b04 <HAL_Init>
  SystemClock_Config();
 8002e2e:	f7ff ffab 	bl	8002d88 <SystemClock_Config>
  MX_GPIO_Init();
 8002e32:	f7ff feab 	bl	8002b8c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002e36:	f7ff ff41 	bl	8002cbc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002e3a:	f7ff ff5f 	bl	8002cfc <MX_ADC1_Init>
  UserInitialise();
 8002e3e:	f000 f8d7 	bl	8002ff0 <UserInitialise>
	  User();
 8002e42:	f000 fb0d 	bl	8003460 <User>
 8002e46:	e7fc      	b.n	8002e42 <main+0x1a>

08002e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e48:	b500      	push	{lr}
 8002e4a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4c:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <HAL_MspInit+0x78>)
 8002e4e:	699a      	ldr	r2, [r3, #24]
 8002e50:	f042 0201 	orr.w	r2, r2, #1
 8002e54:	619a      	str	r2, [r3, #24]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	9301      	str	r3, [sp, #4]
 8002e5e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e60:	2007      	movs	r0, #7
 8002e62:	f7fe fc07 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002e66:	2200      	movs	r2, #0
 8002e68:	4611      	mov	r1, r2
 8002e6a:	f06f 000b 	mvn.w	r0, #11
 8002e6e:	f7fe fc13 	bl	8001698 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	4611      	mov	r1, r2
 8002e76:	f06f 000a 	mvn.w	r0, #10
 8002e7a:	f7fe fc0d 	bl	8001698 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	4611      	mov	r1, r2
 8002e82:	f06f 0009 	mvn.w	r0, #9
 8002e86:	f7fe fc07 	bl	8001698 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	f06f 0004 	mvn.w	r0, #4
 8002e92:	f7fe fc01 	bl	8001698 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002e96:	2200      	movs	r2, #0
 8002e98:	4611      	mov	r1, r2
 8002e9a:	f06f 0003 	mvn.w	r0, #3
 8002e9e:	f7fe fbfb 	bl	8001698 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	f06f 0001 	mvn.w	r0, #1
 8002eaa:	f7fe fbf5 	bl	8001698 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb6:	f7fe fbef 	bl	8001698 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eba:	b003      	add	sp, #12
 8002ebc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002ec4:	6803      	ldr	r3, [r0, #0]
 8002ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eca:	d000      	beq.n	8002ece <HAL_ADC_MspInit+0xa>
 8002ecc:	4770      	bx	lr
{
 8002ece:	b500      	push	{lr}
 8002ed0:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002ed2:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8002ed6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ee0:	615a      	str	r2, [r3, #20]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PB1     ------> ADC1_IN12
    PB13     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 8002eec:	f242 0302 	movw	r3, #8194	; 0x2002
 8002ef0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efa:	a901      	add	r1, sp, #4
 8002efc:	4802      	ldr	r0, [pc, #8]	; (8002f08 <HAL_ADC_MspInit+0x44>)
 8002efe:	f7fe fc59 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f02:	b007      	add	sp, #28
 8002f04:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f08:	48000400 	.word	0x48000400

08002f0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002f0c:	6802      	ldr	r2, [r0, #0]
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_UART_MspInit+0x58>)
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d000      	beq.n	8002f16 <HAL_UART_MspInit+0xa>
 8002f14:	4770      	bx	lr
{
 8002f16:	b500      	push	{lr}
 8002f18:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f1a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f24:	619a      	str	r2, [r3, #24]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002f30:	2330      	movs	r3, #48	; 0x30
 8002f32:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f34:	2302      	movs	r3, #2
 8002f36:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f40:	2307      	movs	r3, #7
 8002f42:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f44:	a901      	add	r1, sp, #4
 8002f46:	4808      	ldr	r0, [pc, #32]	; (8002f68 <HAL_UART_MspInit+0x5c>)
 8002f48:	f7fe fc34 	bl	80017b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	4611      	mov	r1, r2
 8002f50:	2025      	movs	r0, #37	; 0x25
 8002f52:	f7fe fba1 	bl	8001698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f56:	2025      	movs	r0, #37	; 0x25
 8002f58:	f7fe fbd0 	bl	80016fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f5c:	b007      	add	sp, #28
 8002f5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f62:	bf00      	nop
 8002f64:	40013800 	.word	0x40013800
 8002f68:	48000800 	.word	0x48000800

08002f6c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002f6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f6e:	f7fd fddb 	bl	8000b28 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002f72:	f7fe fbf5 	bl	8001760 <HAL_SYSTICK_IRQHandler>
 8002f76:	bd08      	pop	{r3, pc}

08002f78 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 8002f78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f7a:	4802      	ldr	r0, [pc, #8]	; (8002f84 <USART1_IRQHandler+0xc>)
 8002f7c:	f7ff fd56 	bl	8002a2c <HAL_UART_IRQHandler>
 8002f80:	bd08      	pop	{r3, pc}
 8002f82:	bf00      	nop
 8002f84:	200000f4 	.word	0x200000f4

08002f88 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f88:	4915      	ldr	r1, [pc, #84]	; (8002fe0 <SystemInit+0x58>)
 8002f8a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002f8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002f96:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <SystemInit+0x5c>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002fa0:	6858      	ldr	r0, [r3, #4]
 8002fa2:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <SystemInit+0x60>)
 8002fa4:	4002      	ands	r2, r0
 8002fa6:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002fae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fba:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002fc2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc6:	f022 020f 	bic.w	r2, r2, #15
 8002fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002fcc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002fce:	4a07      	ldr	r2, [pc, #28]	; (8002fec <SystemInit+0x64>)
 8002fd0:	4002      	ands	r2, r0
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fdc:	608b      	str	r3, [r1, #8]
 8002fde:	4770      	bx	lr
 8002fe0:	e000ed00 	.word	0xe000ed00
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	f87fc00c 	.word	0xf87fc00c
 8002fec:	ff00fccc 	.word	0xff00fccc

08002ff0 <UserInitialise>:
uint8_t in = 0;



void UserInitialise(void)
{
 8002ff0:	b570      	push	{r4, r5, r6, lr}
	uartRxFlag = false;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	4a17      	ldr	r2, [pc, #92]	; (8003054 <UserInitialise+0x64>)
 8002ff6:	7013      	strb	r3, [r2, #0]
	systickFlag = false;
 8002ff8:	4a17      	ldr	r2, [pc, #92]	; (8003058 <UserInitialise+0x68>)
 8002ffa:	7013      	strb	r3, [r2, #0]
	tempSetpoint = 60;		// initial value
 8002ffc:	223c      	movs	r2, #60	; 0x3c
 8002ffe:	4b17      	ldr	r3, [pc, #92]	; (800305c <UserInitialise+0x6c>)
 8003000:	801a      	strh	r2, [r3, #0]

	numberMap[0] = 0b00111111;
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <UserInitialise+0x70>)
 8003004:	223f      	movs	r2, #63	; 0x3f
 8003006:	701a      	strb	r2, [r3, #0]
	numberMap[1] = 0b00000110;
 8003008:	2506      	movs	r5, #6
 800300a:	705d      	strb	r5, [r3, #1]
	numberMap[2] = 0b01011011;
 800300c:	215b      	movs	r1, #91	; 0x5b
 800300e:	7099      	strb	r1, [r3, #2]
	numberMap[3] = 0b01001111;
 8003010:	224f      	movs	r2, #79	; 0x4f
 8003012:	70da      	strb	r2, [r3, #3]
	numberMap[4] = 0b01100110;
 8003014:	2266      	movs	r2, #102	; 0x66
 8003016:	711a      	strb	r2, [r3, #4]
	numberMap[5] = 0b01101101;
 8003018:	206d      	movs	r0, #109	; 0x6d
 800301a:	7158      	strb	r0, [r3, #5]
	numberMap[6] = 0b01111101;
 800301c:	227d      	movs	r2, #125	; 0x7d
 800301e:	719a      	strb	r2, [r3, #6]
	numberMap[7] = 0b00000111;
 8003020:	2207      	movs	r2, #7
 8003022:	71da      	strb	r2, [r3, #7]
	numberMap[8] = 0b01111111;
 8003024:	247f      	movs	r4, #127	; 0x7f
 8003026:	721c      	strb	r4, [r3, #8]
	numberMap[9] = 0b01100111;
 8003028:	2267      	movs	r2, #103	; 0x67
 800302a:	725a      	strb	r2, [r3, #9]

	segements[0] = 0b0001;
 800302c:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <UserInitialise+0x74>)
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
	segements[1] = 0b0010;
 8003032:	2602      	movs	r6, #2
 8003034:	705e      	strb	r6, [r3, #1]
	segements[2] = 0b0100;
 8003036:	2604      	movs	r6, #4
 8003038:	709e      	strb	r6, [r3, #2]
	segements[3] = 0b1000;
 800303a:	2608      	movs	r6, #8
 800303c:	70de      	strb	r6, [r3, #3]

	pinsValue[0] = numberMap[1];
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <UserInitialise+0x78>)
 8003040:	701d      	strb	r5, [r3, #0]
	pinsValue[1] = numberMap[8];
 8003042:	705c      	strb	r4, [r3, #1]
	pinsValue[2] = numberMap[5];
 8003044:	7098      	strb	r0, [r3, #2]
	pinsValue[3] = numberMap[2];
 8003046:	70d9      	strb	r1, [r3, #3]

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 8003048:	4908      	ldr	r1, [pc, #32]	; (800306c <UserInitialise+0x7c>)
 800304a:	4809      	ldr	r0, [pc, #36]	; (8003070 <UserInitialise+0x80>)
 800304c:	f7ff f9c0 	bl	80023d0 <HAL_UART_Receive_IT>
 8003050:	bd70      	pop	{r4, r5, r6, pc}
 8003052:	bf00      	nop
 8003054:	20000230 	.word	0x20000230
 8003058:	20000231 	.word	0x20000231
 800305c:	200001e6 	.word	0x200001e6
 8003060:	20000194 	.word	0x20000194
 8003064:	200001ac 	.word	0x200001ac
 8003068:	20000220 	.word	0x20000220
 800306c:	200001e8 	.word	0x200001e8
 8003070:	200000f4 	.word	0x200000f4

08003074 <String2Int>:
uint8_t String2Int(char* inputString, int16_t* outputInt)
{
	int returnValue = 0;
	int sign = 1;

	if (*inputString == '\0')
 8003074:	7803      	ldrb	r3, [r0, #0]
 8003076:	b353      	cbz	r3, 80030ce <String2Int+0x5a>
{
 8003078:	b430      	push	{r4, r5}
		return 0;

	if (*inputString == '-')
 800307a:	2b2d      	cmp	r3, #45	; 0x2d
 800307c:	d002      	beq.n	8003084 <String2Int+0x10>
	int sign = 1;
 800307e:	2501      	movs	r5, #1
 8003080:	2300      	movs	r3, #0
 8003082:	e009      	b.n	8003098 <String2Int+0x24>
	{
		sign = -1;
		inputString++;
 8003084:	3001      	adds	r0, #1
		sign = -1;
 8003086:	f04f 35ff 	mov.w	r5, #4294967295
 800308a:	e7f9      	b.n	8003080 <String2Int+0xc>
	while ((*inputString >= '0') && (*inputString <= '9'))
	{
		returnValue *= 10;
		returnValue += (*inputString - 48);

		if (((sign == 1) && (returnValue >= 32768)) ||
 800308c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003090:	db0f      	blt.n	80030b2 <String2Int+0x3e>
				((sign == -1) && (returnValue >= 32769)))
			return 0;
 8003092:	2000      	movs	r0, #0
 8003094:	e019      	b.n	80030ca <String2Int+0x56>

		inputString++;
 8003096:	3001      	adds	r0, #1
	while ((*inputString >= '0') && (*inputString <= '9'))
 8003098:	7802      	ldrb	r2, [r0, #0]
 800309a:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 800309e:	b2e4      	uxtb	r4, r4
 80030a0:	2c09      	cmp	r4, #9
 80030a2:	d80e      	bhi.n	80030c2 <String2Int+0x4e>
		returnValue *= 10;
 80030a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80030a8:	005c      	lsls	r4, r3, #1
		returnValue += (*inputString - 48);
 80030aa:	3a30      	subs	r2, #48	; 0x30
 80030ac:	18a3      	adds	r3, r4, r2
		if (((sign == 1) && (returnValue >= 32768)) ||
 80030ae:	2d01      	cmp	r5, #1
 80030b0:	d0ec      	beq.n	800308c <String2Int+0x18>
 80030b2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80030b6:	d1ee      	bne.n	8003096 <String2Int+0x22>
				((sign == -1) && (returnValue >= 32769)))
 80030b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030bc:	ddeb      	ble.n	8003096 <String2Int+0x22>
			return 0;
 80030be:	2000      	movs	r0, #0
 80030c0:	e003      	b.n	80030ca <String2Int+0x56>
	}
	*outputInt = (int16_t)(sign * returnValue);
 80030c2:	fb15 f303 	smulbb	r3, r5, r3
 80030c6:	800b      	strh	r3, [r1, #0]
	return 1;
 80030c8:	2001      	movs	r0, #1
}
 80030ca:	bc30      	pop	{r4, r5}
 80030cc:	4770      	bx	lr
		return 0;
 80030ce:	2000      	movs	r0, #0
 80030d0:	4770      	bx	lr
	...

080030d4 <Int2String>:

// convert integer var to ASCII string
uint8_t Int2String(char* outputString, int16_t value, uint8_t maxL)
{
 80030d4:	b470      	push	{r4, r5, r6}
	int numWritten = 0;
	int writePosition = 0;
	uint8_t digits = 0;

	if (maxL == 0)
 80030d6:	4615      	mov	r5, r2
 80030d8:	b3b2      	cbz	r2, 8003148 <Int2String+0x74>
		return 0;

	if (value < 0)
 80030da:	2900      	cmp	r1, #0
 80030dc:	db0d      	blt.n	80030fa <Int2String+0x26>
	int numWritten = 0;
 80030de:	2200      	movs	r2, #0
		maxL--;
		value = -value;
		numWritten = 1;
	}

	if (value < 10)
 80030e0:	2909      	cmp	r1, #9
 80030e2:	dd13      	ble.n	800310c <Int2String+0x38>
		digits = 1;
	else if (value < 100)
 80030e4:	2963      	cmp	r1, #99	; 0x63
 80030e6:	dd16      	ble.n	8003116 <Int2String+0x42>
		digits = 2;
	else if (value < 1000)
 80030e8:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80030ec:	db15      	blt.n	800311a <Int2String+0x46>
		digits = 3;
	else if (value < 10000)
 80030ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80030f2:	4299      	cmp	r1, r3
 80030f4:	dc13      	bgt.n	800311e <Int2String+0x4a>
		digits = 4;
 80030f6:	2404      	movs	r4, #4
 80030f8:	e009      	b.n	800310e <Int2String+0x3a>
		outputString[0] = '-';
 80030fa:	232d      	movs	r3, #45	; 0x2d
 80030fc:	f800 3b01 	strb.w	r3, [r0], #1
		maxL--;
 8003100:	1e55      	subs	r5, r2, #1
 8003102:	b2ed      	uxtb	r5, r5
		value = -value;
 8003104:	424b      	negs	r3, r1
 8003106:	b219      	sxth	r1, r3
		numWritten = 1;
 8003108:	2201      	movs	r2, #1
 800310a:	e7e9      	b.n	80030e0 <Int2String+0xc>
		digits = 1;
 800310c:	2401      	movs	r4, #1
	else
		digits = 5;

	if (digits > maxL)
 800310e:	42a5      	cmp	r5, r4
 8003110:	d216      	bcs.n	8003140 <Int2String+0x6c>
		return 0; // error - not enough space in output string!
 8003112:	2000      	movs	r0, #0
 8003114:	e019      	b.n	800314a <Int2String+0x76>
		digits = 2;
 8003116:	2402      	movs	r4, #2
 8003118:	e7f9      	b.n	800310e <Int2String+0x3a>
		digits = 3;
 800311a:	2403      	movs	r4, #3
 800311c:	e7f7      	b.n	800310e <Int2String+0x3a>
		digits = 5;
 800311e:	2405      	movs	r4, #5
 8003120:	e7f5      	b.n	800310e <Int2String+0x3a>

	writePosition = digits;
	while (writePosition > 0)
	{
		outputString[writePosition-1] = (char) ((value % 10) + 48);
 8003122:	3c01      	subs	r4, #1
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <Int2String+0x7c>)
 8003126:	fb83 5301 	smull	r5, r3, r3, r1
 800312a:	17cd      	asrs	r5, r1, #31
 800312c:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
 8003130:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8003134:	0073      	lsls	r3, r6, #1
 8003136:	1acb      	subs	r3, r1, r3
 8003138:	3330      	adds	r3, #48	; 0x30
 800313a:	5503      	strb	r3, [r0, r4]
		value /= 10;
 800313c:	b229      	sxth	r1, r5
		writePosition--;
		numWritten++;
 800313e:	3201      	adds	r2, #1
	while (writePosition > 0)
 8003140:	2c00      	cmp	r4, #0
 8003142:	dcee      	bgt.n	8003122 <Int2String+0x4e>
	}

	return numWritten;
 8003144:	b2d0      	uxtb	r0, r2
 8003146:	e000      	b.n	800314a <Int2String+0x76>
		return 0;
 8003148:	4610      	mov	r0, r2
}
 800314a:	bc70      	pop	{r4, r5, r6}
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	66666667 	.word	0x66666667

08003154 <DecodeCmd>:
{	//uint32_t temp;
 8003154:	b510      	push	{r4, lr}
	switch (cmdBuf[1])
 8003156:	4b28      	ldr	r3, [pc, #160]	; (80031f8 <DecodeCmd+0xa4>)
 8003158:	785b      	ldrb	r3, [r3, #1]
 800315a:	3b41      	subs	r3, #65	; 0x41
 800315c:	2b0a      	cmp	r3, #10
 800315e:	d849      	bhi.n	80031f4 <DecodeCmd+0xa0>
 8003160:	e8df f003 	tbb	[pc, r3]
 8003164:	48484806 	.word	0x48484806
 8003168:	48230f48 	.word	0x48230f48
 800316c:	4848      	.short	0x4848
 800316e:	40          	.byte	0x40
 800316f:	00          	.byte	0x00
		HAL_UART_Transmit(&huart1, (uint8_t*)txStudentNo, 13, 1000);
 8003170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003174:	220d      	movs	r2, #13
 8003176:	4921      	ldr	r1, [pc, #132]	; (80031fc <DecodeCmd+0xa8>)
 8003178:	6809      	ldr	r1, [r1, #0]
 800317a:	4821      	ldr	r0, [pc, #132]	; (8003200 <DecodeCmd+0xac>)
 800317c:	f7ff fafd 	bl	800277a <HAL_UART_Transmit>
		break;
 8003180:	bd10      	pop	{r4, pc}
		String2Int(cmdBuf+3, &tempSetpoint);
 8003182:	4920      	ldr	r1, [pc, #128]	; (8003204 <DecodeCmd+0xb0>)
 8003184:	4820      	ldr	r0, [pc, #128]	; (8003208 <DecodeCmd+0xb4>)
 8003186:	f7ff ff75 	bl	8003074 <String2Int>
		txBuf[0] = '$';
 800318a:	4920      	ldr	r1, [pc, #128]	; (800320c <DecodeCmd+0xb8>)
 800318c:	2324      	movs	r3, #36	; 0x24
 800318e:	700b      	strb	r3, [r1, #0]
		txBuf[1] = 'F';
 8003190:	2346      	movs	r3, #70	; 0x46
 8003192:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r';
 8003194:	230d      	movs	r3, #13
 8003196:	708b      	strb	r3, [r1, #2]
		txBuf[3] = '\n';
 8003198:	230a      	movs	r3, #10
 800319a:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 800319c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031a0:	2204      	movs	r2, #4
 80031a2:	4817      	ldr	r0, [pc, #92]	; (8003200 <DecodeCmd+0xac>)
 80031a4:	f7ff fae9 	bl	800277a <HAL_UART_Transmit>
		break;
 80031a8:	bd10      	pop	{r4, pc}
		txBuf[0] = '$';
 80031aa:	4c18      	ldr	r4, [pc, #96]	; (800320c <DecodeCmd+0xb8>)
 80031ac:	2324      	movs	r3, #36	; 0x24
 80031ae:	7023      	strb	r3, [r4, #0]
		txBuf[1] = 'G';
 80031b0:	2347      	movs	r3, #71	; 0x47
 80031b2:	7063      	strb	r3, [r4, #1]
		txBuf[2] = ',';
 80031b4:	232c      	movs	r3, #44	; 0x2c
 80031b6:	70a3      	strb	r3, [r4, #2]
		charsL = Int2String(txBuf+3, tempSetpoint, 4);
 80031b8:	2204      	movs	r2, #4
 80031ba:	4b12      	ldr	r3, [pc, #72]	; (8003204 <DecodeCmd+0xb0>)
 80031bc:	f9b3 1000 	ldrsh.w	r1, [r3]
 80031c0:	1ce0      	adds	r0, r4, #3
 80031c2:	f7ff ff87 	bl	80030d4 <Int2String>
		txBuf[3 + charsL] = '\r';
 80031c6:	1cc3      	adds	r3, r0, #3
 80031c8:	220d      	movs	r2, #13
 80031ca:	54e2      	strb	r2, [r4, r3]
		txBuf[4 + charsL] = '\n';
 80031cc:	1d03      	adds	r3, r0, #4
 80031ce:	220a      	movs	r2, #10
 80031d0:	54e2      	strb	r2, [r4, r3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL+5, 1000);
 80031d2:	1d42      	adds	r2, r0, #5
 80031d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031d8:	b292      	uxth	r2, r2
 80031da:	4621      	mov	r1, r4
 80031dc:	4808      	ldr	r0, [pc, #32]	; (8003200 <DecodeCmd+0xac>)
 80031de:	f7ff facc 	bl	800277a <HAL_UART_Transmit>
		break;
 80031e2:	bd10      	pop	{r4, pc}
		HAL_UART_Transmit(&huart1, (uint8_t*)iRMS12, 10, 1000);
 80031e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031e8:	220a      	movs	r2, #10
 80031ea:	4909      	ldr	r1, [pc, #36]	; (8003210 <DecodeCmd+0xbc>)
 80031ec:	6809      	ldr	r1, [r1, #0]
 80031ee:	4804      	ldr	r0, [pc, #16]	; (8003200 <DecodeCmd+0xac>)
 80031f0:	f7ff fac3 	bl	800277a <HAL_UART_Transmit>
 80031f4:	bd10      	pop	{r4, pc}
 80031f6:	bf00      	nop
 80031f8:	200001ec 	.word	0x200001ec
 80031fc:	20000004 	.word	0x20000004
 8003200:	200000f4 	.word	0x200000f4
 8003204:	200001e6 	.word	0x200001e6
 8003208:	200001ef 	.word	0x200001ef
 800320c:	200001b4 	.word	0x200001b4
 8003210:	200001a8 	.word	0x200001a8

08003214 <writeToPins>:
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET); //f
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET); //g
}

void writeToPins(uint8_t segments[], uint8_t pins[], int segmentsL)
{
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	460c      	mov	r4, r1
	if(in == segmentsL)
 8003218:	4b8c      	ldr	r3, [pc, #560]	; (800344c <writeToPins+0x238>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	4293      	cmp	r3, r2
 800321e:	d00d      	beq.n	800323c <writeToPins+0x28>
	{
		in = 0;
	}
	else
	{
		in++;
 8003220:	3301      	adds	r3, #1
 8003222:	4a8a      	ldr	r2, [pc, #552]	; (800344c <writeToPins+0x238>)
 8003224:	7013      	strb	r3, [r2, #0]
	}

	switch(in)
 8003226:	4b89      	ldr	r3, [pc, #548]	; (800344c <writeToPins+0x238>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	3b01      	subs	r3, #1
 800322c:	2b03      	cmp	r3, #3
 800322e:	d833      	bhi.n	8003298 <writeToPins+0x84>
 8003230:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003234:	008a0008 	.word	0x008a0008
 8003238:	00e000b5 	.word	0x00e000b5
		in = 0;
 800323c:	2200      	movs	r2, #0
 800323e:	4b83      	ldr	r3, [pc, #524]	; (800344c <writeToPins+0x238>)
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e7f0      	b.n	8003226 <writeToPins+0x12>
	{
	case 1 :
	{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segements[0] >> 0) & 0b00000001)); //1
 8003244:	4e82      	ldr	r6, [pc, #520]	; (8003450 <writeToPins+0x23c>)
 8003246:	7832      	ldrb	r2, [r6, #0]
 8003248:	f082 0201 	eor.w	r2, r2, #1
 800324c:	4d81      	ldr	r5, [pc, #516]	; (8003454 <writeToPins+0x240>)
 800324e:	f002 0201 	and.w	r2, r2, #1
 8003252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003256:	4628      	mov	r0, r5
 8003258:	f7fe fb76 	bl	8001948 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segements[0] >> 1) & 0b00000001)); //2
 800325c:	7832      	ldrb	r2, [r6, #0]
 800325e:	0852      	lsrs	r2, r2, #1
 8003260:	f082 0201 	eor.w	r2, r2, #1
 8003264:	f002 0201 	and.w	r2, r2, #1
 8003268:	2110      	movs	r1, #16
 800326a:	4628      	mov	r0, r5
 800326c:	f7fe fb6c 	bl	8001948 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segements[0] >> 2) & 0b00000001)); //3
 8003270:	7832      	ldrb	r2, [r6, #0]
 8003272:	0892      	lsrs	r2, r2, #2
 8003274:	f082 0201 	eor.w	r2, r2, #1
 8003278:	f002 0201 	and.w	r2, r2, #1
 800327c:	2120      	movs	r1, #32
 800327e:	4628      	mov	r0, r5
 8003280:	f7fe fb62 	bl	8001948 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segements[0] >> 3) & 0b00000001)); //4
 8003284:	7832      	ldrb	r2, [r6, #0]
 8003286:	08d2      	lsrs	r2, r2, #3
 8003288:	f082 0201 	eor.w	r2, r2, #1
 800328c:	f002 0201 	and.w	r2, r2, #1
 8003290:	2108      	movs	r1, #8
 8003292:	4628      	mov	r0, r5
 8003294:	f7fe fb58 	bl	8001948 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segements[3] >> 3) & 0b00000001)); //4
	}
	break;
	}

	i = (int)(in - 1);
 8003298:	4b6c      	ldr	r3, [pc, #432]	; (800344c <writeToPins+0x238>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	3b01      	subs	r3, #1
 800329e:	4d6e      	ldr	r5, [pc, #440]	; (8003458 <writeToPins+0x244>)
 80032a0:	602b      	str	r3, [r5, #0]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, (~(pins[i] >> 0) & 0b00000001)); //a
 80032a2:	5ce2      	ldrb	r2, [r4, r3]
 80032a4:	f082 0201 	eor.w	r2, r2, #1
 80032a8:	f002 0201 	and.w	r2, r2, #1
 80032ac:	2120      	movs	r1, #32
 80032ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032b2:	f7fe fb49 	bl	8001948 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6, (~(pins[i] >> 1) & 0b00000001)); //b
 80032b6:	682b      	ldr	r3, [r5, #0]
 80032b8:	5ce2      	ldrb	r2, [r4, r3]
 80032ba:	0852      	lsrs	r2, r2, #1
 80032bc:	f082 0201 	eor.w	r2, r2, #1
 80032c0:	f002 0201 	and.w	r2, r2, #1
 80032c4:	2140      	movs	r1, #64	; 0x40
 80032c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032ca:	f7fe fb3d 	bl	8001948 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, (~(pins[i] >> 2) & 0b00000001)); //c
 80032ce:	682b      	ldr	r3, [r5, #0]
 80032d0:	5ce2      	ldrb	r2, [r4, r3]
 80032d2:	0892      	lsrs	r2, r2, #2
 80032d4:	f082 0201 	eor.w	r2, r2, #1
 80032d8:	f002 0201 	and.w	r2, r2, #1
 80032dc:	2180      	movs	r1, #128	; 0x80
 80032de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032e2:	f7fe fb31 	bl	8001948 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6, (~(pins[i] >> 3) & 0b00000001)); //d
 80032e6:	682b      	ldr	r3, [r5, #0]
 80032e8:	5ce2      	ldrb	r2, [r4, r3]
 80032ea:	08d2      	lsrs	r2, r2, #3
 80032ec:	f082 0201 	eor.w	r2, r2, #1
 80032f0:	f002 0201 	and.w	r2, r2, #1
 80032f4:	2140      	movs	r1, #64	; 0x40
 80032f6:	4857      	ldr	r0, [pc, #348]	; (8003454 <writeToPins+0x240>)
 80032f8:	f7fe fb26 	bl	8001948 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7, (~(pins[i] >> 4) & 0b00000001)); //e
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	5ce2      	ldrb	r2, [r4, r3]
 8003300:	0912      	lsrs	r2, r2, #4
 8003302:	f082 0201 	eor.w	r2, r2, #1
 8003306:	f002 0201 	and.w	r2, r2, #1
 800330a:	2180      	movs	r1, #128	; 0x80
 800330c:	4853      	ldr	r0, [pc, #332]	; (800345c <writeToPins+0x248>)
 800330e:	f7fe fb1b 	bl	8001948 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, (~(pins[i] >> 5) & 0b00000001)); //f
 8003312:	682b      	ldr	r3, [r5, #0]
 8003314:	5ce2      	ldrb	r2, [r4, r3]
 8003316:	0952      	lsrs	r2, r2, #5
 8003318:	f082 0201 	eor.w	r2, r2, #1
 800331c:	f002 0201 	and.w	r2, r2, #1
 8003320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003328:	f7fe fb0e 	bl	8001948 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, (~(pins[i] >> 6) & 0b00000001)); //g
 800332c:	682b      	ldr	r3, [r5, #0]
 800332e:	5ce2      	ldrb	r2, [r4, r3]
 8003330:	0992      	lsrs	r2, r2, #6
 8003332:	f082 0201 	eor.w	r2, r2, #1
 8003336:	f002 0201 	and.w	r2, r2, #1
 800333a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800333e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003342:	f7fe fb01 	bl	8001948 <HAL_GPIO_WritePin>
 8003346:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segements[1] >> 0) & 0b00000001)); //1
 8003348:	4e41      	ldr	r6, [pc, #260]	; (8003450 <writeToPins+0x23c>)
 800334a:	7872      	ldrb	r2, [r6, #1]
 800334c:	f082 0201 	eor.w	r2, r2, #1
 8003350:	4d40      	ldr	r5, [pc, #256]	; (8003454 <writeToPins+0x240>)
 8003352:	f002 0201 	and.w	r2, r2, #1
 8003356:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800335a:	4628      	mov	r0, r5
 800335c:	f7fe faf4 	bl	8001948 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segements[1] >> 1) & 0b00000001)); //2
 8003360:	7872      	ldrb	r2, [r6, #1]
 8003362:	0852      	lsrs	r2, r2, #1
 8003364:	f082 0201 	eor.w	r2, r2, #1
 8003368:	f002 0201 	and.w	r2, r2, #1
 800336c:	2110      	movs	r1, #16
 800336e:	4628      	mov	r0, r5
 8003370:	f7fe faea 	bl	8001948 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segements[1] >> 2) & 0b00000001)); //3
 8003374:	7872      	ldrb	r2, [r6, #1]
 8003376:	0892      	lsrs	r2, r2, #2
 8003378:	f082 0201 	eor.w	r2, r2, #1
 800337c:	f002 0201 	and.w	r2, r2, #1
 8003380:	2120      	movs	r1, #32
 8003382:	4628      	mov	r0, r5
 8003384:	f7fe fae0 	bl	8001948 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segements[1] >> 3) & 0b00000001)); //4
 8003388:	7872      	ldrb	r2, [r6, #1]
 800338a:	08d2      	lsrs	r2, r2, #3
 800338c:	f082 0201 	eor.w	r2, r2, #1
 8003390:	f002 0201 	and.w	r2, r2, #1
 8003394:	2108      	movs	r1, #8
 8003396:	4628      	mov	r0, r5
 8003398:	f7fe fad6 	bl	8001948 <HAL_GPIO_WritePin>
	break;
 800339c:	e77c      	b.n	8003298 <writeToPins+0x84>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segements[2] >> 0) & 0b00000001)); //1
 800339e:	4e2c      	ldr	r6, [pc, #176]	; (8003450 <writeToPins+0x23c>)
 80033a0:	78b2      	ldrb	r2, [r6, #2]
 80033a2:	f082 0201 	eor.w	r2, r2, #1
 80033a6:	4d2b      	ldr	r5, [pc, #172]	; (8003454 <writeToPins+0x240>)
 80033a8:	f002 0201 	and.w	r2, r2, #1
 80033ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033b0:	4628      	mov	r0, r5
 80033b2:	f7fe fac9 	bl	8001948 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segements[2] >> 1) & 0b00000001)); //2
 80033b6:	78b2      	ldrb	r2, [r6, #2]
 80033b8:	0852      	lsrs	r2, r2, #1
 80033ba:	f082 0201 	eor.w	r2, r2, #1
 80033be:	f002 0201 	and.w	r2, r2, #1
 80033c2:	2110      	movs	r1, #16
 80033c4:	4628      	mov	r0, r5
 80033c6:	f7fe fabf 	bl	8001948 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segements[2] >> 2) & 0b00000001)); //3
 80033ca:	78b2      	ldrb	r2, [r6, #2]
 80033cc:	0892      	lsrs	r2, r2, #2
 80033ce:	f082 0201 	eor.w	r2, r2, #1
 80033d2:	f002 0201 	and.w	r2, r2, #1
 80033d6:	2120      	movs	r1, #32
 80033d8:	4628      	mov	r0, r5
 80033da:	f7fe fab5 	bl	8001948 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segements[2] >> 3) & 0b00000001)); //4
 80033de:	78b2      	ldrb	r2, [r6, #2]
 80033e0:	08d2      	lsrs	r2, r2, #3
 80033e2:	f082 0201 	eor.w	r2, r2, #1
 80033e6:	f002 0201 	and.w	r2, r2, #1
 80033ea:	2108      	movs	r1, #8
 80033ec:	4628      	mov	r0, r5
 80033ee:	f7fe faab 	bl	8001948 <HAL_GPIO_WritePin>
	break;
 80033f2:	e751      	b.n	8003298 <writeToPins+0x84>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segements[3] >> 0) & 0b00000001)); //1
 80033f4:	4e16      	ldr	r6, [pc, #88]	; (8003450 <writeToPins+0x23c>)
 80033f6:	78f2      	ldrb	r2, [r6, #3]
 80033f8:	f082 0201 	eor.w	r2, r2, #1
 80033fc:	4d15      	ldr	r5, [pc, #84]	; (8003454 <writeToPins+0x240>)
 80033fe:	f002 0201 	and.w	r2, r2, #1
 8003402:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003406:	4628      	mov	r0, r5
 8003408:	f7fe fa9e 	bl	8001948 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segements[3] >> 1) & 0b00000001)); //2
 800340c:	78f2      	ldrb	r2, [r6, #3]
 800340e:	0852      	lsrs	r2, r2, #1
 8003410:	f082 0201 	eor.w	r2, r2, #1
 8003414:	f002 0201 	and.w	r2, r2, #1
 8003418:	2110      	movs	r1, #16
 800341a:	4628      	mov	r0, r5
 800341c:	f7fe fa94 	bl	8001948 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segements[3] >> 2) & 0b00000001)); //3
 8003420:	78f2      	ldrb	r2, [r6, #3]
 8003422:	0892      	lsrs	r2, r2, #2
 8003424:	f082 0201 	eor.w	r2, r2, #1
 8003428:	f002 0201 	and.w	r2, r2, #1
 800342c:	2120      	movs	r1, #32
 800342e:	4628      	mov	r0, r5
 8003430:	f7fe fa8a 	bl	8001948 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segements[3] >> 3) & 0b00000001)); //4
 8003434:	78f2      	ldrb	r2, [r6, #3]
 8003436:	08d2      	lsrs	r2, r2, #3
 8003438:	f082 0201 	eor.w	r2, r2, #1
 800343c:	f002 0201 	and.w	r2, r2, #1
 8003440:	2108      	movs	r1, #8
 8003442:	4628      	mov	r0, r5
 8003444:	f7fe fa80 	bl	8001948 <HAL_GPIO_WritePin>
	break;
 8003448:	e726      	b.n	8003298 <writeToPins+0x84>
 800344a:	bf00      	nop
 800344c:	20000094 	.word	0x20000094
 8003450:	200001ac 	.word	0x200001ac
 8003454:	48000400 	.word	0x48000400
 8003458:	20000090 	.word	0x20000090
 800345c:	48000800 	.word	0x48000800

08003460 <User>:
{
 8003460:	b508      	push	{r3, lr}
	if (uartRxFlag)
 8003462:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <User+0x84>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	b1e3      	cbz	r3, 80034a2 <User+0x42>
		if (uartRxChar == '$')
 8003468:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <User+0x88>)
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	2a24      	cmp	r2, #36	; 0x24
 800346e:	d01c      	beq.n	80034aa <User+0x4a>
		if (cmdBufPos < cmdBufL)
 8003470:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <User+0x8c>)
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	2b31      	cmp	r3, #49	; 0x31
 8003476:	d804      	bhi.n	8003482 <User+0x22>
			cmdBuf[cmdBufPos++] = uartRxChar;
 8003478:	1c58      	adds	r0, r3, #1
 800347a:	491c      	ldr	r1, [pc, #112]	; (80034ec <User+0x8c>)
 800347c:	8008      	strh	r0, [r1, #0]
 800347e:	491c      	ldr	r1, [pc, #112]	; (80034f0 <User+0x90>)
 8003480:	54ca      	strb	r2, [r1, r3]
		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 8003482:	4b1a      	ldr	r3, [pc, #104]	; (80034ec <User+0x8c>)
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	2b03      	cmp	r3, #3
 8003488:	d903      	bls.n	8003492 <User+0x32>
 800348a:	4a19      	ldr	r2, [pc, #100]	; (80034f0 <User+0x90>)
 800348c:	7812      	ldrb	r2, [r2, #0]
 800348e:	2a24      	cmp	r2, #36	; 0x24
 8003490:	d00f      	beq.n	80034b2 <User+0x52>
		uartRxFlag = false;  // clear the flag - the 'receive character' event has been handled.
 8003492:	2200      	movs	r2, #0
 8003494:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <User+0x84>)
 8003496:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 8003498:	2201      	movs	r2, #1
 800349a:	4913      	ldr	r1, [pc, #76]	; (80034e8 <User+0x88>)
 800349c:	4815      	ldr	r0, [pc, #84]	; (80034f4 <User+0x94>)
 800349e:	f7fe ff97 	bl	80023d0 <HAL_UART_Receive_IT>
	if(systickFlag == 1U)
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <User+0x98>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	b99b      	cbnz	r3, 80034d0 <User+0x70>
 80034a8:	bd08      	pop	{r3, pc}
			cmdBufPos = 0;
 80034aa:	2100      	movs	r1, #0
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <User+0x8c>)
 80034ae:	8019      	strh	r1, [r3, #0]
 80034b0:	e7de      	b.n	8003470 <User+0x10>
		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 80034b2:	1e9a      	subs	r2, r3, #2
 80034b4:	490e      	ldr	r1, [pc, #56]	; (80034f0 <User+0x90>)
 80034b6:	5c8a      	ldrb	r2, [r1, r2]
 80034b8:	2a0d      	cmp	r2, #13
 80034ba:	d1ea      	bne.n	8003492 <User+0x32>
 80034bc:	3b01      	subs	r3, #1
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	2b0a      	cmp	r3, #10
 80034c2:	d1e6      	bne.n	8003492 <User+0x32>
			DecodeCmd();
 80034c4:	f7ff fe46 	bl	8003154 <DecodeCmd>
			cmdBufPos = 0;	// clear buffer
 80034c8:	2200      	movs	r2, #0
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <User+0x8c>)
 80034cc:	801a      	strh	r2, [r3, #0]
 80034ce:	e7e0      	b.n	8003492 <User+0x32>
		systickFlag = 0U;
 80034d0:	2200      	movs	r2, #0
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <User+0x98>)
 80034d4:	701a      	strb	r2, [r3, #0]
		writeToPins(segements, pinsValue, 3);
 80034d6:	2203      	movs	r2, #3
 80034d8:	4908      	ldr	r1, [pc, #32]	; (80034fc <User+0x9c>)
 80034da:	4809      	ldr	r0, [pc, #36]	; (8003500 <User+0xa0>)
 80034dc:	f7ff fe9a 	bl	8003214 <writeToPins>
}
 80034e0:	e7e2      	b.n	80034a8 <User+0x48>
 80034e2:	bf00      	nop
 80034e4:	20000230 	.word	0x20000230
 80034e8:	200001e8 	.word	0x200001e8
 80034ec:	20000238 	.word	0x20000238
 80034f0:	200001ec 	.word	0x200001ec
 80034f4:	200000f4 	.word	0x200000f4
 80034f8:	20000231 	.word	0x20000231
 80034fc:	20000220 	.word	0x20000220
 8003500:	200001ac 	.word	0x200001ac

08003504 <HAL_UART_RxCpltCallback>:
// This function will execute whenever a character is received from the UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
	// the interrupt handler will automatically put the received character in the uartRXChar variable (no need to write any code for that).
	// so all we do it set flag to indicate character was received, and then process the received character further in the main loop
	uartRxFlag = true;
 8003504:	2201      	movs	r2, #1
 8003506:	4b01      	ldr	r3, [pc, #4]	; (800350c <HAL_UART_RxCpltCallback+0x8>)
 8003508:	701a      	strb	r2, [r3, #0]
 800350a:	4770      	bx	lr
 800350c:	20000230 	.word	0x20000230

08003510 <HAL_SYSTICK_Callback>:
}

void HAL_SYSTICK_Callback(void)
{
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	systickFlag = true;
 8003512:	2201      	movs	r2, #1
 8003514:	4b66      	ldr	r3, [pc, #408]	; (80036b0 <HAL_SYSTICK_Callback+0x1a0>)
 8003516:	701a      	strb	r2, [r3, #0]
	uint32_t temp12;
	uint32_t temp13;
	j++;
 8003518:	4a66      	ldr	r2, [pc, #408]	; (80036b4 <HAL_SYSTICK_Callback+0x1a4>)
 800351a:	6813      	ldr	r3, [r2, #0]
 800351c:	3301      	adds	r3, #1
 800351e:	6013      	str	r3, [r2, #0]
	if (j == 1)
 8003520:	2b01      	cmp	r3, #1
 8003522:	d046      	beq.n	80035b2 <HAL_SYSTICK_Callback+0xa2>
	{
		j = 0;
		displayDelay2ms = 1;
	}

	if (HAL_ADC_ConfigChannel(&hadc1, &adcChannel12) != HAL_OK)
 8003524:	4964      	ldr	r1, [pc, #400]	; (80036b8 <HAL_SYSTICK_Callback+0x1a8>)
 8003526:	4865      	ldr	r0, [pc, #404]	; (80036bc <HAL_SYSTICK_Callback+0x1ac>)
 8003528:	f7fd fe44 	bl	80011b4 <HAL_ADC_ConfigChannel>
 800352c:	2800      	cmp	r0, #0
 800352e:	d147      	bne.n	80035c0 <HAL_SYSTICK_Callback+0xb0>
	{
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_ADC_Start(&hadc1);
 8003530:	4c62      	ldr	r4, [pc, #392]	; (80036bc <HAL_SYSTICK_Callback+0x1ac>)
 8003532:	4620      	mov	r0, r4
 8003534:	f7fd fd06 	bl	8000f44 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8003538:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800353c:	4620      	mov	r0, r4
 800353e:	f7fd fda9 	bl	8001094 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(&hadc1);
 8003542:	4620      	mov	r0, r4
 8003544:	f7fd fd80 	bl	8001048 <HAL_ADC_Stop>
	adc12 = HAL_ADC_GetValue(&hadc1);
 8003548:	4620      	mov	r0, r4
 800354a:	f7fd fe2f 	bl	80011ac <HAL_ADC_GetValue>
 800354e:	4b5c      	ldr	r3, [pc, #368]	; (80036c0 <HAL_SYSTICK_Callback+0x1b0>)
 8003550:	6018      	str	r0, [r3, #0]


	if (HAL_ADC_ConfigChannel(&hadc1, &adcChannel13) != HAL_OK)
 8003552:	495c      	ldr	r1, [pc, #368]	; (80036c4 <HAL_SYSTICK_Callback+0x1b4>)
 8003554:	4620      	mov	r0, r4
 8003556:	f7fd fe2d 	bl	80011b4 <HAL_ADC_ConfigChannel>
 800355a:	2800      	cmp	r0, #0
 800355c:	d136      	bne.n	80035cc <HAL_SYSTICK_Callback+0xbc>
	{
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_ADC_Start(&hadc1);
 800355e:	4c57      	ldr	r4, [pc, #348]	; (80036bc <HAL_SYSTICK_Callback+0x1ac>)
 8003560:	4620      	mov	r0, r4
 8003562:	f7fd fcef 	bl	8000f44 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8003566:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800356a:	4620      	mov	r0, r4
 800356c:	f7fd fd92 	bl	8001094 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(&hadc1);
 8003570:	4620      	mov	r0, r4
 8003572:	f7fd fd69 	bl	8001048 <HAL_ADC_Stop>
	adc13 = HAL_ADC_GetValue(&hadc1);
 8003576:	4620      	mov	r0, r4
 8003578:	f7fd fe18 	bl	80011ac <HAL_ADC_GetValue>
 800357c:	4b52      	ldr	r3, [pc, #328]	; (80036c8 <HAL_SYSTICK_Callback+0x1b8>)
 800357e:	6018      	str	r0, [r3, #0]


	if (my_counter == 20)
 8003580:	4b52      	ldr	r3, [pc, #328]	; (80036cc <HAL_SYSTICK_Callback+0x1bc>)
 8003582:	781a      	ldrb	r2, [r3, #0]
 8003584:	2a14      	cmp	r2, #20
 8003586:	d027      	beq.n	80035d8 <HAL_SYSTICK_Callback+0xc8>

		my_counter = 0;
	}
	else
	{
		adc12 *= adc12;
 8003588:	494d      	ldr	r1, [pc, #308]	; (80036c0 <HAL_SYSTICK_Callback+0x1b0>)
 800358a:	680b      	ldr	r3, [r1, #0]
 800358c:	fb03 f303 	mul.w	r3, r3, r3
 8003590:	600b      	str	r3, [r1, #0]
		adcBuf12 += adc12;
 8003592:	4c4f      	ldr	r4, [pc, #316]	; (80036d0 <HAL_SYSTICK_Callback+0x1c0>)
 8003594:	6821      	ldr	r1, [r4, #0]
 8003596:	440b      	add	r3, r1
 8003598:	6023      	str	r3, [r4, #0]

		adc13 *= adc13;
 800359a:	fb00 f000 	mul.w	r0, r0, r0
 800359e:	4b4a      	ldr	r3, [pc, #296]	; (80036c8 <HAL_SYSTICK_Callback+0x1b8>)
 80035a0:	6018      	str	r0, [r3, #0]
		adcBuf13 += adc13;
 80035a2:	494c      	ldr	r1, [pc, #304]	; (80036d4 <HAL_SYSTICK_Callback+0x1c4>)
 80035a4:	680b      	ldr	r3, [r1, #0]
 80035a6:	4418      	add	r0, r3
 80035a8:	6008      	str	r0, [r1, #0]

		my_counter++;
 80035aa:	3201      	adds	r2, #1
 80035ac:	4b47      	ldr	r3, [pc, #284]	; (80036cc <HAL_SYSTICK_Callback+0x1bc>)
 80035ae:	701a      	strb	r2, [r3, #0]
 80035b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		j = 0;
 80035b2:	2200      	movs	r2, #0
 80035b4:	4b3f      	ldr	r3, [pc, #252]	; (80036b4 <HAL_SYSTICK_Callback+0x1a4>)
 80035b6:	601a      	str	r2, [r3, #0]
		displayDelay2ms = 1;
 80035b8:	2201      	movs	r2, #1
 80035ba:	4b47      	ldr	r3, [pc, #284]	; (80036d8 <HAL_SYSTICK_Callback+0x1c8>)
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e7b1      	b.n	8003524 <HAL_SYSTICK_Callback+0x14>
		_Error_Handler(__FILE__, __LINE__);
 80035c0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80035c4:	4845      	ldr	r0, [pc, #276]	; (80036dc <HAL_SYSTICK_Callback+0x1cc>)
 80035c6:	f7ff fb77 	bl	8002cb8 <_Error_Handler>
 80035ca:	e7b1      	b.n	8003530 <HAL_SYSTICK_Callback+0x20>
		_Error_Handler(__FILE__, __LINE__);
 80035cc:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80035d0:	4842      	ldr	r0, [pc, #264]	; (80036dc <HAL_SYSTICK_Callback+0x1cc>)
 80035d2:	f7ff fb71 	bl	8002cb8 <_Error_Handler>
 80035d6:	e7c2      	b.n	800355e <HAL_SYSTICK_Callback+0x4e>
		adc12 *= adc12;
 80035d8:	4b39      	ldr	r3, [pc, #228]	; (80036c0 <HAL_SYSTICK_Callback+0x1b0>)
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	fb00 f000 	mul.w	r0, r0, r0
 80035e0:	6018      	str	r0, [r3, #0]
		adcBuf12 += adc12;
 80035e2:	4e3b      	ldr	r6, [pc, #236]	; (80036d0 <HAL_SYSTICK_Callback+0x1c0>)
 80035e4:	6833      	ldr	r3, [r6, #0]
 80035e6:	4418      	add	r0, r3
 80035e8:	6030      	str	r0, [r6, #0]
		temp12/=20;
 80035ea:	4f3d      	ldr	r7, [pc, #244]	; (80036e0 <HAL_SYSTICK_Callback+0x1d0>)
 80035ec:	fba7 3000 	umull	r3, r0, r7, r0
		temp12 = sqrt(temp12);
 80035f0:	0900      	lsrs	r0, r0, #4
 80035f2:	f7fc ff2b 	bl	800044c <__aeabi_ui2d>
 80035f6:	ec41 0b10 	vmov	d0, r0, r1
 80035fa:	f000 f8cb 	bl	8003794 <sqrt>
 80035fe:	ec51 0b10 	vmov	r0, r1, d0
 8003602:	f7fd fa49 	bl	8000a98 <__aeabi_d2uiz>
		temp12*=3350;
 8003606:	f640 5316 	movw	r3, #3350	; 0xd16
 800360a:	fb03 f000 	mul.w	r0, r3, r0
		temp12/=4095;
 800360e:	4c35      	ldr	r4, [pc, #212]	; (80036e4 <HAL_SYSTICK_Callback+0x1d4>)
 8003610:	fba4 2300 	umull	r2, r3, r4, r0
 8003614:	1ac0      	subs	r0, r0, r3
 8003616:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 800361a:	0ac0      	lsrs	r0, r0, #11
		measuredRMS12 = temp12;
 800361c:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <HAL_SYSTICK_Callback+0x1d8>)
 800361e:	6018      	str	r0, [r3, #0]
		iRMS12 = measuredRMS12*4.679287305;
 8003620:	f7fc ff14 	bl	800044c <__aeabi_ui2d>
 8003624:	a31e      	add	r3, pc, #120	; (adr r3, 80036a0 <HAL_SYSTICK_Callback+0x190>)
 8003626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362a:	f7fc ff85 	bl	8000538 <__aeabi_dmul>
 800362e:	f7fd fa33 	bl	8000a98 <__aeabi_d2uiz>
 8003632:	4b2e      	ldr	r3, [pc, #184]	; (80036ec <HAL_SYSTICK_Callback+0x1dc>)
 8003634:	6018      	str	r0, [r3, #0]
		adcBuf12 = 0;
 8003636:	2500      	movs	r5, #0
 8003638:	6035      	str	r5, [r6, #0]
		adc13 *= adc13;
 800363a:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <HAL_SYSTICK_Callback+0x1b8>)
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	fb00 f000 	mul.w	r0, r0, r0
 8003642:	6018      	str	r0, [r3, #0]
		adcBuf13 += adc13;
 8003644:	4e23      	ldr	r6, [pc, #140]	; (80036d4 <HAL_SYSTICK_Callback+0x1c4>)
 8003646:	6833      	ldr	r3, [r6, #0]
 8003648:	4418      	add	r0, r3
 800364a:	6030      	str	r0, [r6, #0]
		temp13/=20;
 800364c:	fba7 3000 	umull	r3, r0, r7, r0
		temp13 = sqrt(temp13);
 8003650:	0900      	lsrs	r0, r0, #4
 8003652:	f7fc fefb 	bl	800044c <__aeabi_ui2d>
 8003656:	ec41 0b10 	vmov	d0, r0, r1
 800365a:	f000 f89b 	bl	8003794 <sqrt>
 800365e:	ec51 0b10 	vmov	r0, r1, d0
 8003662:	f7fd fa19 	bl	8000a98 <__aeabi_d2uiz>
		temp13*=3300;
 8003666:	f640 43e4 	movw	r3, #3300	; 0xce4
 800366a:	fb03 f000 	mul.w	r0, r3, r0
		temp13/=4095;
 800366e:	fba4 3400 	umull	r3, r4, r4, r0
 8003672:	1b00      	subs	r0, r0, r4
 8003674:	eb04 0450 	add.w	r4, r4, r0, lsr #1
 8003678:	0ae0      	lsrs	r0, r4, #11
		measuredRMS13 = temp13;
 800367a:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <HAL_SYSTICK_Callback+0x1e0>)
 800367c:	6018      	str	r0, [r3, #0]
		vRMS13 = measuredRMS13*79.18793901;
 800367e:	f7fc fee5 	bl	800044c <__aeabi_ui2d>
 8003682:	a309      	add	r3, pc, #36	; (adr r3, 80036a8 <HAL_SYSTICK_Callback+0x198>)
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	f7fc ff56 	bl	8000538 <__aeabi_dmul>
 800368c:	f7fd fa04 	bl	8000a98 <__aeabi_d2uiz>
 8003690:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <HAL_SYSTICK_Callback+0x1e4>)
 8003692:	6018      	str	r0, [r3, #0]
		adcBuf13 = 0;
 8003694:	6035      	str	r5, [r6, #0]
		my_counter = 0;
 8003696:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <HAL_SYSTICK_Callback+0x1bc>)
 8003698:	701d      	strb	r5, [r3, #0]
 800369a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800369c:	f3af 8000 	nop.w
 80036a0:	175e407d 	.word	0x175e407d
 80036a4:	4012b797 	.word	0x4012b797
 80036a8:	315765ed 	.word	0x315765ed
 80036ac:	4053cc07 	.word	0x4053cc07
 80036b0:	20000231 	.word	0x20000231
 80036b4:	20000098 	.word	0x20000098
 80036b8:	2000017c 	.word	0x2000017c
 80036bc:	200000a0 	.word	0x200000a0
 80036c0:	200001a4 	.word	0x200001a4
 80036c4:	20000164 	.word	0x20000164
 80036c8:	20000224 	.word	0x20000224
 80036cc:	2000019e 	.word	0x2000019e
 80036d0:	20000234 	.word	0x20000234
 80036d4:	200001b0 	.word	0x200001b0
 80036d8:	2000008c 	.word	0x2000008c
 80036dc:	08003a18 	.word	0x08003a18
 80036e0:	cccccccd 	.word	0xcccccccd
 80036e4:	00100101 	.word	0x00100101
 80036e8:	20000228 	.word	0x20000228
 80036ec:	200001a8 	.word	0x200001a8
 80036f0:	2000022c 	.word	0x2000022c
 80036f4:	200001a0 	.word	0x200001a0

080036f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80036f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003730 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80036fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80036fe:	e003      	b.n	8003708 <LoopCopyDataInit>

08003700 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003702:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003704:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003706:	3104      	adds	r1, #4

08003708 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003708:	480b      	ldr	r0, [pc, #44]	; (8003738 <LoopForever+0xa>)
	ldr	r3, =_edata
 800370a:	4b0c      	ldr	r3, [pc, #48]	; (800373c <LoopForever+0xe>)
	adds	r2, r0, r1
 800370c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800370e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003710:	d3f6      	bcc.n	8003700 <CopyDataInit>
	ldr	r2, =_sbss
 8003712:	4a0b      	ldr	r2, [pc, #44]	; (8003740 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003714:	e002      	b.n	800371c <LoopFillZerobss>

08003716 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003716:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003718:	f842 3b04 	str.w	r3, [r2], #4

0800371c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <LoopForever+0x16>)
	cmp	r2, r3
 800371e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003720:	d3f9      	bcc.n	8003716 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003722:	f7ff fc31 	bl	8002f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003726:	f000 f811 	bl	800374c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800372a:	f7ff fb7d 	bl	8002e28 <main>

0800372e <LoopForever>:

LoopForever:
    b LoopForever
 800372e:	e7fe      	b.n	800372e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003730:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003734:	08003a48 	.word	0x08003a48
	ldr	r0, =_sdata
 8003738:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800373c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003740:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8003744:	2000023c 	.word	0x2000023c

08003748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003748:	e7fe      	b.n	8003748 <ADC1_2_IRQHandler>
	...

0800374c <__libc_init_array>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	4e0d      	ldr	r6, [pc, #52]	; (8003784 <__libc_init_array+0x38>)
 8003750:	4c0d      	ldr	r4, [pc, #52]	; (8003788 <__libc_init_array+0x3c>)
 8003752:	1ba4      	subs	r4, r4, r6
 8003754:	10a4      	asrs	r4, r4, #2
 8003756:	2500      	movs	r5, #0
 8003758:	42a5      	cmp	r5, r4
 800375a:	d109      	bne.n	8003770 <__libc_init_array+0x24>
 800375c:	4e0b      	ldr	r6, [pc, #44]	; (800378c <__libc_init_array+0x40>)
 800375e:	4c0c      	ldr	r4, [pc, #48]	; (8003790 <__libc_init_array+0x44>)
 8003760:	f000 f92a 	bl	80039b8 <_init>
 8003764:	1ba4      	subs	r4, r4, r6
 8003766:	10a4      	asrs	r4, r4, #2
 8003768:	2500      	movs	r5, #0
 800376a:	42a5      	cmp	r5, r4
 800376c:	d105      	bne.n	800377a <__libc_init_array+0x2e>
 800376e:	bd70      	pop	{r4, r5, r6, pc}
 8003770:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003774:	4798      	blx	r3
 8003776:	3501      	adds	r5, #1
 8003778:	e7ee      	b.n	8003758 <__libc_init_array+0xc>
 800377a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800377e:	4798      	blx	r3
 8003780:	3501      	adds	r5, #1
 8003782:	e7f2      	b.n	800376a <__libc_init_array+0x1e>
 8003784:	08003a40 	.word	0x08003a40
 8003788:	08003a40 	.word	0x08003a40
 800378c:	08003a40 	.word	0x08003a40
 8003790:	08003a44 	.word	0x08003a44

08003794 <sqrt>:
 8003794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003798:	ed2d 8b02 	vpush	{d8}
 800379c:	b08b      	sub	sp, #44	; 0x2c
 800379e:	ec55 4b10 	vmov	r4, r5, d0
 80037a2:	f000 f851 	bl	8003848 <__ieee754_sqrt>
 80037a6:	4b26      	ldr	r3, [pc, #152]	; (8003840 <sqrt+0xac>)
 80037a8:	eeb0 8a40 	vmov.f32	s16, s0
 80037ac:	eef0 8a60 	vmov.f32	s17, s1
 80037b0:	f993 6000 	ldrsb.w	r6, [r3]
 80037b4:	1c73      	adds	r3, r6, #1
 80037b6:	d02a      	beq.n	800380e <sqrt+0x7a>
 80037b8:	4622      	mov	r2, r4
 80037ba:	462b      	mov	r3, r5
 80037bc:	4620      	mov	r0, r4
 80037be:	4629      	mov	r1, r5
 80037c0:	f7fd f954 	bl	8000a6c <__aeabi_dcmpun>
 80037c4:	4607      	mov	r7, r0
 80037c6:	bb10      	cbnz	r0, 800380e <sqrt+0x7a>
 80037c8:	f04f 0800 	mov.w	r8, #0
 80037cc:	f04f 0900 	mov.w	r9, #0
 80037d0:	4642      	mov	r2, r8
 80037d2:	464b      	mov	r3, r9
 80037d4:	4620      	mov	r0, r4
 80037d6:	4629      	mov	r1, r5
 80037d8:	f7fd f920 	bl	8000a1c <__aeabi_dcmplt>
 80037dc:	b1b8      	cbz	r0, 800380e <sqrt+0x7a>
 80037de:	2301      	movs	r3, #1
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	4b18      	ldr	r3, [pc, #96]	; (8003844 <sqrt+0xb0>)
 80037e4:	9301      	str	r3, [sp, #4]
 80037e6:	9708      	str	r7, [sp, #32]
 80037e8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80037ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80037f0:	b9b6      	cbnz	r6, 8003820 <sqrt+0x8c>
 80037f2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80037f6:	4668      	mov	r0, sp
 80037f8:	f000 f8d6 	bl	80039a8 <matherr>
 80037fc:	b1d0      	cbz	r0, 8003834 <sqrt+0xa0>
 80037fe:	9b08      	ldr	r3, [sp, #32]
 8003800:	b11b      	cbz	r3, 800380a <sqrt+0x76>
 8003802:	f000 f8d3 	bl	80039ac <__errno>
 8003806:	9b08      	ldr	r3, [sp, #32]
 8003808:	6003      	str	r3, [r0, #0]
 800380a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800380e:	eeb0 0a48 	vmov.f32	s0, s16
 8003812:	eef0 0a68 	vmov.f32	s1, s17
 8003816:	b00b      	add	sp, #44	; 0x2c
 8003818:	ecbd 8b02 	vpop	{d8}
 800381c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003820:	4642      	mov	r2, r8
 8003822:	464b      	mov	r3, r9
 8003824:	4640      	mov	r0, r8
 8003826:	4649      	mov	r1, r9
 8003828:	f7fc ffb0 	bl	800078c <__aeabi_ddiv>
 800382c:	2e02      	cmp	r6, #2
 800382e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003832:	d1e0      	bne.n	80037f6 <sqrt+0x62>
 8003834:	f000 f8ba 	bl	80039ac <__errno>
 8003838:	2321      	movs	r3, #33	; 0x21
 800383a:	6003      	str	r3, [r0, #0]
 800383c:	e7df      	b.n	80037fe <sqrt+0x6a>
 800383e:	bf00      	nop
 8003840:	20000008 	.word	0x20000008
 8003844:	08003a38 	.word	0x08003a38

08003848 <__ieee754_sqrt>:
 8003848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800384c:	ec55 4b10 	vmov	r4, r5, d0
 8003850:	4e54      	ldr	r6, [pc, #336]	; (80039a4 <__ieee754_sqrt+0x15c>)
 8003852:	43ae      	bics	r6, r5
 8003854:	ee10 0a10 	vmov	r0, s0
 8003858:	462b      	mov	r3, r5
 800385a:	462a      	mov	r2, r5
 800385c:	4621      	mov	r1, r4
 800385e:	d113      	bne.n	8003888 <__ieee754_sqrt+0x40>
 8003860:	ee10 2a10 	vmov	r2, s0
 8003864:	462b      	mov	r3, r5
 8003866:	ee10 0a10 	vmov	r0, s0
 800386a:	4629      	mov	r1, r5
 800386c:	f7fc fe64 	bl	8000538 <__aeabi_dmul>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4620      	mov	r0, r4
 8003876:	4629      	mov	r1, r5
 8003878:	f7fc fcac 	bl	80001d4 <__adddf3>
 800387c:	4604      	mov	r4, r0
 800387e:	460d      	mov	r5, r1
 8003880:	ec45 4b10 	vmov	d0, r4, r5
 8003884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003888:	2d00      	cmp	r5, #0
 800388a:	dc10      	bgt.n	80038ae <__ieee754_sqrt+0x66>
 800388c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003890:	4330      	orrs	r0, r6
 8003892:	d0f5      	beq.n	8003880 <__ieee754_sqrt+0x38>
 8003894:	b15d      	cbz	r5, 80038ae <__ieee754_sqrt+0x66>
 8003896:	ee10 2a10 	vmov	r2, s0
 800389a:	462b      	mov	r3, r5
 800389c:	4620      	mov	r0, r4
 800389e:	4629      	mov	r1, r5
 80038a0:	f7fc fc96 	bl	80001d0 <__aeabi_dsub>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	f7fc ff70 	bl	800078c <__aeabi_ddiv>
 80038ac:	e7e6      	b.n	800387c <__ieee754_sqrt+0x34>
 80038ae:	151b      	asrs	r3, r3, #20
 80038b0:	d10c      	bne.n	80038cc <__ieee754_sqrt+0x84>
 80038b2:	2a00      	cmp	r2, #0
 80038b4:	d06d      	beq.n	8003992 <__ieee754_sqrt+0x14a>
 80038b6:	2000      	movs	r0, #0
 80038b8:	02d6      	lsls	r6, r2, #11
 80038ba:	d56e      	bpl.n	800399a <__ieee754_sqrt+0x152>
 80038bc:	1e44      	subs	r4, r0, #1
 80038be:	1b1b      	subs	r3, r3, r4
 80038c0:	f1c0 0420 	rsb	r4, r0, #32
 80038c4:	fa21 f404 	lsr.w	r4, r1, r4
 80038c8:	4322      	orrs	r2, r4
 80038ca:	4081      	lsls	r1, r0
 80038cc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80038d0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80038d4:	07dd      	lsls	r5, r3, #31
 80038d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80038da:	bf42      	ittt	mi
 80038dc:	0052      	lslmi	r2, r2, #1
 80038de:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80038e2:	0049      	lslmi	r1, r1, #1
 80038e4:	1058      	asrs	r0, r3, #1
 80038e6:	2500      	movs	r5, #0
 80038e8:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80038ec:	441a      	add	r2, r3
 80038ee:	0049      	lsls	r1, r1, #1
 80038f0:	2316      	movs	r3, #22
 80038f2:	462c      	mov	r4, r5
 80038f4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80038f8:	19a7      	adds	r7, r4, r6
 80038fa:	4297      	cmp	r7, r2
 80038fc:	bfde      	ittt	le
 80038fe:	1bd2      	suble	r2, r2, r7
 8003900:	19bc      	addle	r4, r7, r6
 8003902:	19ad      	addle	r5, r5, r6
 8003904:	0052      	lsls	r2, r2, #1
 8003906:	3b01      	subs	r3, #1
 8003908:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800390c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003910:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003914:	d1f0      	bne.n	80038f8 <__ieee754_sqrt+0xb0>
 8003916:	f04f 0e20 	mov.w	lr, #32
 800391a:	469c      	mov	ip, r3
 800391c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003920:	42a2      	cmp	r2, r4
 8003922:	eb06 070c 	add.w	r7, r6, ip
 8003926:	dc02      	bgt.n	800392e <__ieee754_sqrt+0xe6>
 8003928:	d112      	bne.n	8003950 <__ieee754_sqrt+0x108>
 800392a:	428f      	cmp	r7, r1
 800392c:	d810      	bhi.n	8003950 <__ieee754_sqrt+0x108>
 800392e:	2f00      	cmp	r7, #0
 8003930:	eb07 0c06 	add.w	ip, r7, r6
 8003934:	da34      	bge.n	80039a0 <__ieee754_sqrt+0x158>
 8003936:	f1bc 0f00 	cmp.w	ip, #0
 800393a:	db31      	blt.n	80039a0 <__ieee754_sqrt+0x158>
 800393c:	f104 0801 	add.w	r8, r4, #1
 8003940:	1b12      	subs	r2, r2, r4
 8003942:	428f      	cmp	r7, r1
 8003944:	bf88      	it	hi
 8003946:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800394a:	1bc9      	subs	r1, r1, r7
 800394c:	4433      	add	r3, r6
 800394e:	4644      	mov	r4, r8
 8003950:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8003954:	f1be 0e01 	subs.w	lr, lr, #1
 8003958:	443a      	add	r2, r7
 800395a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800395e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003962:	d1dd      	bne.n	8003920 <__ieee754_sqrt+0xd8>
 8003964:	430a      	orrs	r2, r1
 8003966:	d006      	beq.n	8003976 <__ieee754_sqrt+0x12e>
 8003968:	1c5c      	adds	r4, r3, #1
 800396a:	bf13      	iteet	ne
 800396c:	3301      	addne	r3, #1
 800396e:	3501      	addeq	r5, #1
 8003970:	4673      	moveq	r3, lr
 8003972:	f023 0301 	bicne.w	r3, r3, #1
 8003976:	106a      	asrs	r2, r5, #1
 8003978:	085b      	lsrs	r3, r3, #1
 800397a:	07e9      	lsls	r1, r5, #31
 800397c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8003980:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003984:	bf48      	it	mi
 8003986:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800398a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800398e:	461c      	mov	r4, r3
 8003990:	e776      	b.n	8003880 <__ieee754_sqrt+0x38>
 8003992:	0aca      	lsrs	r2, r1, #11
 8003994:	3b15      	subs	r3, #21
 8003996:	0549      	lsls	r1, r1, #21
 8003998:	e78b      	b.n	80038b2 <__ieee754_sqrt+0x6a>
 800399a:	0052      	lsls	r2, r2, #1
 800399c:	3001      	adds	r0, #1
 800399e:	e78b      	b.n	80038b8 <__ieee754_sqrt+0x70>
 80039a0:	46a0      	mov	r8, r4
 80039a2:	e7cd      	b.n	8003940 <__ieee754_sqrt+0xf8>
 80039a4:	7ff00000 	.word	0x7ff00000

080039a8 <matherr>:
 80039a8:	2000      	movs	r0, #0
 80039aa:	4770      	bx	lr

080039ac <__errno>:
 80039ac:	4b01      	ldr	r3, [pc, #4]	; (80039b4 <__errno+0x8>)
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	2000000c 	.word	0x2000000c

080039b8 <_init>:
 80039b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ba:	bf00      	nop
 80039bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039be:	bc08      	pop	{r3}
 80039c0:	469e      	mov	lr, r3
 80039c2:	4770      	bx	lr

080039c4 <_fini>:
 80039c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c6:	bf00      	nop
 80039c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ca:	bc08      	pop	{r3}
 80039cc:	469e      	mov	lr, r3
 80039ce:	4770      	bx	lr
