
H:\EDesign\V5.3\GeyserSystem\Debug\GeyserSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080061e4  080061e4  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080061e8  080061e8  000161e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000224  20000000  080061ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020224  2**0
                  CONTENTS
  7 .bss          0000046c  20000224  20000224  00020224  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000690  20000690  00020224  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025469  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000389e  00000000  00000000  000456bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000fc19  00000000  00000000  00048f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001230  00000000  00000000  00058b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001180  00000000  00000000  00059da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00020547  00000000  00000000  0005af28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000fec4  00000000  00000000  0007b46f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000b25bd  00000000  00000000  0008b333  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0013d8f0  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003cb0  00000000  00000000  0013d96c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000df  00000000  00000000  0014161c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ee0 	.word	0x08005ee0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	08005ee0 	.word	0x08005ee0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <HAL_InitTick+0x24>)
 80002a6:	6818      	ldr	r0, [r3, #0]
 80002a8:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <HAL_InitTick+0x28>)
 80002aa:	fba3 3000 	umull	r3, r0, r3, r0
 80002ae:	0980      	lsrs	r0, r0, #6
 80002b0:	f000 fcf6 	bl	8000ca0 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80002b4:	2200      	movs	r2, #0
 80002b6:	4621      	mov	r1, r4
 80002b8:	f04f 30ff 	mov.w	r0, #4294967295
 80002bc:	f000 fcb2 	bl	8000c24 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80002c0:	2000      	movs	r0, #0
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	20000000 	.word	0x20000000
 80002c8:	10624dd3 	.word	0x10624dd3

080002cc <HAL_Init>:
{
 80002cc:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002ce:	4a07      	ldr	r2, [pc, #28]	; (80002ec <HAL_Init+0x20>)
 80002d0:	6813      	ldr	r3, [r2, #0]
 80002d2:	f043 0310 	orr.w	r3, r3, #16
 80002d6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002d8:	2003      	movs	r0, #3
 80002da:	f000 fc91 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002de:	2000      	movs	r0, #0
 80002e0:	f7ff ffde 	bl	80002a0 <HAL_InitTick>
  HAL_MspInit();
 80002e4:	f003 fb8e 	bl	8003a04 <HAL_MspInit>
}
 80002e8:	2000      	movs	r0, #0
 80002ea:	bd08      	pop	{r3, pc}
 80002ec:	40022000 	.word	0x40022000

080002f0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002f0:	4a02      	ldr	r2, [pc, #8]	; (80002fc <HAL_IncTick+0xc>)
 80002f2:	6813      	ldr	r3, [r2, #0]
 80002f4:	3301      	adds	r3, #1
 80002f6:	6013      	str	r3, [r2, #0]
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000274 	.word	0x20000274

08000300 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000300:	4b01      	ldr	r3, [pc, #4]	; (8000308 <HAL_GetTick+0x8>)
 8000302:	6818      	ldr	r0, [r3, #0]
}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	20000274 	.word	0x20000274

0800030c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800030c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800030e:	6802      	ldr	r2, [r0, #0]
 8000310:	6893      	ldr	r3, [r2, #8]
 8000312:	f003 0303 	and.w	r3, r3, #3
 8000316:	2b01      	cmp	r3, #1
 8000318:	d011      	beq.n	800033e <ADC_Disable+0x32>
 800031a:	2300      	movs	r3, #0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d037      	beq.n	8000390 <ADC_Disable+0x84>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000320:	6893      	ldr	r3, [r2, #8]
 8000322:	f003 030d 	and.w	r3, r3, #13
 8000326:	2b01      	cmp	r3, #1
 8000328:	d011      	beq.n	800034e <ADC_Disable+0x42>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800032a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800032c:	f043 0310 	orr.w	r3, r3, #16
 8000330:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000332:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 800033a:	2001      	movs	r0, #1
 800033c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800033e:	6813      	ldr	r3, [r2, #0]
 8000340:	f013 0f01 	tst.w	r3, #1
 8000344:	d101      	bne.n	800034a <ADC_Disable+0x3e>
 8000346:	2300      	movs	r3, #0
 8000348:	e7e8      	b.n	800031c <ADC_Disable+0x10>
 800034a:	2301      	movs	r3, #1
 800034c:	e7e6      	b.n	800031c <ADC_Disable+0x10>
 800034e:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8000350:	6893      	ldr	r3, [r2, #8]
 8000352:	f043 0302 	orr.w	r3, r3, #2
 8000356:	6093      	str	r3, [r2, #8]
 8000358:	6803      	ldr	r3, [r0, #0]
 800035a:	2203      	movs	r2, #3
 800035c:	601a      	str	r2, [r3, #0]
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800035e:	f7ff ffcf 	bl	8000300 <HAL_GetTick>
 8000362:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000364:	6823      	ldr	r3, [r4, #0]
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	f013 0f01 	tst.w	r3, #1
 800036c:	d00e      	beq.n	800038c <ADC_Disable+0x80>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800036e:	f7ff ffc7 	bl	8000300 <HAL_GetTick>
 8000372:	1b40      	subs	r0, r0, r5
 8000374:	2802      	cmp	r0, #2
 8000376:	d9f5      	bls.n	8000364 <ADC_Disable+0x58>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000378:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800037a:	f043 0310 	orr.w	r3, r3, #16
 800037e:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000380:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8000388:	2001      	movs	r0, #1
 800038a:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800038c:	2000      	movs	r0, #0
 800038e:	bd38      	pop	{r3, r4, r5, pc}
 8000390:	2000      	movs	r0, #0
}
 8000392:	bd38      	pop	{r3, r4, r5, pc}

08000394 <ADC_Enable>:
{
 8000394:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000396:	6802      	ldr	r2, [r0, #0]
 8000398:	6893      	ldr	r3, [r2, #8]
 800039a:	f003 0303 	and.w	r3, r3, #3
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d010      	beq.n	80003c4 <ADC_Enable+0x30>
 80003a2:	2300      	movs	r3, #0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d133      	bne.n	8000410 <ADC_Enable+0x7c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80003a8:	6891      	ldr	r1, [r2, #8]
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <ADC_Enable+0x80>)
 80003ac:	4219      	tst	r1, r3
 80003ae:	d011      	beq.n	80003d4 <ADC_Enable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80003b2:	f043 0310 	orr.w	r3, r3, #16
 80003b6:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 80003c0:	2001      	movs	r0, #1
 80003c2:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80003c4:	6813      	ldr	r3, [r2, #0]
 80003c6:	f013 0f01 	tst.w	r3, #1
 80003ca:	d101      	bne.n	80003d0 <ADC_Enable+0x3c>
 80003cc:	2300      	movs	r3, #0
 80003ce:	e7e9      	b.n	80003a4 <ADC_Enable+0x10>
 80003d0:	2301      	movs	r3, #1
 80003d2:	e7e7      	b.n	80003a4 <ADC_Enable+0x10>
 80003d4:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80003d6:	6893      	ldr	r3, [r2, #8]
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80003de:	f7ff ff8f 	bl	8000300 <HAL_GetTick>
 80003e2:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80003e4:	6823      	ldr	r3, [r4, #0]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f013 0f01 	tst.w	r3, #1
 80003ec:	d10e      	bne.n	800040c <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80003ee:	f7ff ff87 	bl	8000300 <HAL_GetTick>
 80003f2:	1b40      	subs	r0, r0, r5
 80003f4:	2802      	cmp	r0, #2
 80003f6:	d9f5      	bls.n	80003e4 <ADC_Enable+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003fa:	f043 0310 	orr.w	r3, r3, #16
 80003fe:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000400:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000402:	f043 0301 	orr.w	r3, r3, #1
 8000406:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000408:	2001      	movs	r0, #1
 800040a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800040c:	2000      	movs	r0, #0
 800040e:	bd38      	pop	{r3, r4, r5, pc}
 8000410:	2000      	movs	r0, #0
}
 8000412:	bd38      	pop	{r3, r4, r5, pc}
 8000414:	8000003f 	.word	0x8000003f

08000418 <HAL_ADC_Init>:
{
 8000418:	b530      	push	{r4, r5, lr}
 800041a:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 800041c:	2300      	movs	r3, #0
 800041e:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000420:	2800      	cmp	r0, #0
 8000422:	f000 80fb 	beq.w	800061c <HAL_ADC_Init+0x204>
 8000426:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000428:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800042a:	f013 0f10 	tst.w	r3, #16
 800042e:	d151      	bne.n	80004d4 <HAL_ADC_Init+0xbc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000430:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000432:	b1ab      	cbz	r3, 8000460 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000434:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000436:	6823      	ldr	r3, [r4, #0]
 8000438:	689a      	ldr	r2, [r3, #8]
 800043a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800043e:	d003      	beq.n	8000448 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000440:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000442:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8000446:	d046      	beq.n	80004d6 <HAL_ADC_Init+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 8000448:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800044a:	f023 0312 	bic.w	r3, r3, #18
 800044e:	f043 0310 	orr.w	r3, r3, #16
 8000452:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000454:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800045c:	2001      	movs	r0, #1
 800045e:	e03a      	b.n	80004d6 <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 8000460:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000462:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000464:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000466:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 800046a:	f003 fb09 	bl	8003a80 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800046e:	6823      	ldr	r3, [r4, #0]
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000476:	d001      	beq.n	800047c <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000478:	2000      	movs	r0, #0
 800047a:	e7dc      	b.n	8000436 <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 800047c:	4620      	mov	r0, r4
 800047e:	f7ff ff45 	bl	800030c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000482:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000484:	f013 0f10 	tst.w	r3, #16
 8000488:	d1d5      	bne.n	8000436 <HAL_ADC_Init+0x1e>
 800048a:	2800      	cmp	r0, #0
 800048c:	d1d3      	bne.n	8000436 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 800048e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000490:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000494:	f023 0302 	bic.w	r3, r3, #2
 8000498:	f043 0302 	orr.w	r3, r3, #2
 800049c:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800049e:	6822      	ldr	r2, [r4, #0]
 80004a0:	6893      	ldr	r3, [r2, #8]
 80004a2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80004a6:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80004a8:	6822      	ldr	r2, [r4, #0]
 80004aa:	6893      	ldr	r3, [r2, #8]
 80004ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b0:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80004b2:	4b5b      	ldr	r3, [pc, #364]	; (8000620 <HAL_ADC_Init+0x208>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a5b      	ldr	r2, [pc, #364]	; (8000624 <HAL_ADC_Init+0x20c>)
 80004b8:	fba2 2303 	umull	r2, r3, r2, r3
 80004bc:	0c9b      	lsrs	r3, r3, #18
 80004be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004c2:	005a      	lsls	r2, r3, #1
 80004c4:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80004c6:	9b00      	ldr	r3, [sp, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d0b4      	beq.n	8000436 <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 80004cc:	9b00      	ldr	r3, [sp, #0]
 80004ce:	3b01      	subs	r3, #1
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	e7f8      	b.n	80004c6 <HAL_ADC_Init+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80004d4:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004d8:	f013 0f10 	tst.w	r3, #16
 80004dc:	f040 8095 	bne.w	800060a <HAL_ADC_Init+0x1f2>
 80004e0:	2800      	cmp	r0, #0
 80004e2:	f040 8092 	bne.w	800060a <HAL_ADC_Init+0x1f2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80004e6:	6822      	ldr	r2, [r4, #0]
 80004e8:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80004ea:	f013 0304 	ands.w	r3, r3, #4
 80004ee:	f040 808c 	bne.w	800060a <HAL_ADC_Init+0x1f2>
    ADC_STATE_CLR_SET(hadc->State,
 80004f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80004f4:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80004f8:	f041 0102 	orr.w	r1, r1, #2
 80004fc:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004fe:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000502:	d055      	beq.n	80005b0 <HAL_ADC_Init+0x198>
 8000504:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000508:	9101      	str	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800050a:	6891      	ldr	r1, [r2, #8]
 800050c:	f001 0103 	and.w	r1, r1, #3
 8000510:	2901      	cmp	r1, #1
 8000512:	d050      	beq.n	80005b6 <HAL_ADC_Init+0x19e>
 8000514:	2200      	movs	r2, #0
 8000516:	b972      	cbnz	r2, 8000536 <HAL_ADC_Init+0x11e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000518:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800051a:	b12d      	cbz	r5, 8000528 <HAL_ADC_Init+0x110>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800051c:	68a9      	ldr	r1, [r5, #8]
 800051e:	f001 0103 	and.w	r1, r1, #3
 8000522:	2901      	cmp	r1, #1
 8000524:	d04f      	beq.n	80005c6 <HAL_ADC_Init+0x1ae>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000526:	b932      	cbnz	r2, 8000536 <HAL_ADC_Init+0x11e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000528:	493f      	ldr	r1, [pc, #252]	; (8000628 <HAL_ADC_Init+0x210>)
 800052a:	688a      	ldr	r2, [r1, #8]
 800052c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000530:	6865      	ldr	r5, [r4, #4]
 8000532:	432a      	orrs	r2, r5
 8000534:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000536:	69e2      	ldr	r2, [r4, #28]
 8000538:	0351      	lsls	r1, r2, #13
 800053a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800053c:	2d01      	cmp	r5, #1
 800053e:	d001      	beq.n	8000544 <HAL_ADC_Init+0x12c>
 8000540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000544:	430b      	orrs	r3, r1
 8000546:	68e1      	ldr	r1, [r4, #12]
 8000548:	430b      	orrs	r3, r1
 800054a:	68a1      	ldr	r1, [r4, #8]
 800054c:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800054e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000550:	2901      	cmp	r1, #1
 8000552:	d03e      	beq.n	80005d2 <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000554:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000556:	2a01      	cmp	r2, #1
 8000558:	d002      	beq.n	8000560 <HAL_ADC_Init+0x148>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800055a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800055c:	430a      	orrs	r2, r1
 800055e:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000560:	6822      	ldr	r2, [r4, #0]
 8000562:	6891      	ldr	r1, [r2, #8]
 8000564:	f011 0f0c 	tst.w	r1, #12
 8000568:	d10b      	bne.n	8000582 <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800056a:	68d1      	ldr	r1, [r2, #12]
 800056c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000570:	f021 0102 	bic.w	r1, r1, #2
 8000574:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000576:	69a1      	ldr	r1, [r4, #24]
 8000578:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800057a:	0052      	lsls	r2, r2, #1
 800057c:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8000580:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8000582:	6821      	ldr	r1, [r4, #0]
 8000584:	68cd      	ldr	r5, [r1, #12]
 8000586:	4a29      	ldr	r2, [pc, #164]	; (800062c <HAL_ADC_Init+0x214>)
 8000588:	402a      	ands	r2, r5
 800058a:	4313      	orrs	r3, r2
 800058c:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800058e:	6923      	ldr	r3, [r4, #16]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d031      	beq.n	80005f8 <HAL_ADC_Init+0x1e0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000594:	6822      	ldr	r2, [r4, #0]
 8000596:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000598:	f023 030f 	bic.w	r3, r3, #15
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800059e:	2300      	movs	r3, #0
 80005a0:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80005a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005a4:	f023 0303 	bic.w	r3, r3, #3
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6463      	str	r3, [r4, #68]	; 0x44
 80005ae:	e033      	b.n	8000618 <HAL_ADC_Init+0x200>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80005b0:	491f      	ldr	r1, [pc, #124]	; (8000630 <HAL_ADC_Init+0x218>)
 80005b2:	9101      	str	r1, [sp, #4]
 80005b4:	e7a9      	b.n	800050a <HAL_ADC_Init+0xf2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80005b6:	6812      	ldr	r2, [r2, #0]
 80005b8:	f012 0f01 	tst.w	r2, #1
 80005bc:	d101      	bne.n	80005c2 <HAL_ADC_Init+0x1aa>
 80005be:	2200      	movs	r2, #0
 80005c0:	e7a9      	b.n	8000516 <HAL_ADC_Init+0xfe>
 80005c2:	2201      	movs	r2, #1
 80005c4:	e7a7      	b.n	8000516 <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80005c6:	6829      	ldr	r1, [r5, #0]
 80005c8:	f011 0f01 	tst.w	r1, #1
 80005cc:	d0ab      	beq.n	8000526 <HAL_ADC_Init+0x10e>
 80005ce:	2201      	movs	r2, #1
 80005d0:	e7a9      	b.n	8000526 <HAL_ADC_Init+0x10e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005d2:	b932      	cbnz	r2, 80005e2 <HAL_ADC_Init+0x1ca>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80005d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005d6:	3a01      	subs	r2, #1
 80005d8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80005dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005e0:	e7b8      	b.n	8000554 <HAL_ADC_Init+0x13c>
        ADC_STATE_CLR_SET(hadc->State,
 80005e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005e4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80005e8:	f042 0220 	orr.w	r2, r2, #32
 80005ec:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005ee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80005f0:	f042 0201 	orr.w	r2, r2, #1
 80005f4:	64a2      	str	r2, [r4, #72]	; 0x48
 80005f6:	e7ad      	b.n	8000554 <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80005f8:	6821      	ldr	r1, [r4, #0]
 80005fa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80005fc:	f023 030f 	bic.w	r3, r3, #15
 8000600:	6a22      	ldr	r2, [r4, #32]
 8000602:	3a01      	subs	r2, #1
 8000604:	4313      	orrs	r3, r2
 8000606:	630b      	str	r3, [r1, #48]	; 0x30
 8000608:	e7c9      	b.n	800059e <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 800060a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800060c:	f023 0312 	bic.w	r3, r3, #18
 8000610:	f043 0310 	orr.w	r3, r3, #16
 8000614:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 8000616:	2001      	movs	r0, #1
}
 8000618:	b017      	add	sp, #92	; 0x5c
 800061a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800061c:	2001      	movs	r0, #1
 800061e:	e7fb      	b.n	8000618 <HAL_ADC_Init+0x200>
 8000620:	20000000 	.word	0x20000000
 8000624:	431bde83 	.word	0x431bde83
 8000628:	50000300 	.word	0x50000300
 800062c:	fff0c007 	.word	0xfff0c007
 8000630:	50000100 	.word	0x50000100

08000634 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000634:	6803      	ldr	r3, [r0, #0]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f013 0f04 	tst.w	r3, #4
 800063c:	d002      	beq.n	8000644 <HAL_ADC_Start+0x10>
    tmp_hal_status = HAL_BUSY;
 800063e:	2302      	movs	r3, #2
}
 8000640:	4618      	mov	r0, r3
 8000642:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8000644:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000648:	2b01      	cmp	r3, #1
 800064a:	d101      	bne.n	8000650 <HAL_ADC_Start+0x1c>
 800064c:	2302      	movs	r3, #2
 800064e:	e7f7      	b.n	8000640 <HAL_ADC_Start+0xc>
{
 8000650:	b510      	push	{r4, lr}
 8000652:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8000654:	2301      	movs	r3, #1
 8000656:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 800065a:	f7ff fe9b 	bl	8000394 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800065e:	4603      	mov	r3, r0
 8000660:	2800      	cmp	r0, #0
 8000662:	d160      	bne.n	8000726 <HAL_ADC_Start+0xf2>
      ADC_STATE_CLR_SET(hadc->State,
 8000664:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000666:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800066a:	f022 0201 	bic.w	r2, r2, #1
 800066e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000672:	6462      	str	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000674:	4a2e      	ldr	r2, [pc, #184]	; (8000730 <HAL_ADC_Start+0xfc>)
 8000676:	6892      	ldr	r2, [r2, #8]
 8000678:	f012 0f1f 	tst.w	r2, #31
 800067c:	d033      	beq.n	80006e6 <HAL_ADC_Start+0xb2>
 800067e:	6821      	ldr	r1, [r4, #0]
 8000680:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8000684:	d02f      	beq.n	80006e6 <HAL_ADC_Start+0xb2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000686:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000688:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800068c:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800068e:	4a29      	ldr	r2, [pc, #164]	; (8000734 <HAL_ADC_Start+0x100>)
 8000690:	4291      	cmp	r1, r2
 8000692:	d038      	beq.n	8000706 <HAL_ADC_Start+0xd2>
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000694:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000696:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800069a:	d041      	beq.n	8000720 <HAL_ADC_Start+0xec>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800069c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800069e:	f022 0206 	bic.w	r2, r2, #6
 80006a2:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80006aa:	6822      	ldr	r2, [r4, #0]
 80006ac:	211c      	movs	r1, #28
 80006ae:	6011      	str	r1, [r2, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80006b0:	4a1f      	ldr	r2, [pc, #124]	; (8000730 <HAL_ADC_Start+0xfc>)
 80006b2:	6892      	ldr	r2, [r2, #8]
 80006b4:	f012 0f1f 	tst.w	r2, #31
 80006b8:	d00f      	beq.n	80006da <HAL_ADC_Start+0xa6>
 80006ba:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <HAL_ADC_Start+0xfc>)
 80006bc:	6892      	ldr	r2, [r2, #8]
 80006be:	f002 021f 	and.w	r2, r2, #31
 80006c2:	2a05      	cmp	r2, #5
 80006c4:	d009      	beq.n	80006da <HAL_ADC_Start+0xa6>
 80006c6:	4a1a      	ldr	r2, [pc, #104]	; (8000730 <HAL_ADC_Start+0xfc>)
 80006c8:	6892      	ldr	r2, [r2, #8]
 80006ca:	f002 021f 	and.w	r2, r2, #31
 80006ce:	2a09      	cmp	r2, #9
 80006d0:	d003      	beq.n	80006da <HAL_ADC_Start+0xa6>
 80006d2:	6822      	ldr	r2, [r4, #0]
 80006d4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80006d8:	d128      	bne.n	800072c <HAL_ADC_Start+0xf8>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80006da:	6821      	ldr	r1, [r4, #0]
 80006dc:	688a      	ldr	r2, [r1, #8]
 80006de:	f042 0204 	orr.w	r2, r2, #4
 80006e2:	608a      	str	r2, [r1, #8]
 80006e4:	e022      	b.n	800072c <HAL_ADC_Start+0xf8>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80006e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80006e8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80006ec:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80006ee:	6822      	ldr	r2, [r4, #0]
 80006f0:	68d2      	ldr	r2, [r2, #12]
 80006f2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80006f6:	d0cd      	beq.n	8000694 <HAL_ADC_Start+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80006f8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80006fa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80006fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000702:	6462      	str	r2, [r4, #68]	; 0x44
 8000704:	e7c6      	b.n	8000694 <HAL_ADC_Start+0x60>
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000706:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800070a:	68d2      	ldr	r2, [r2, #12]
 800070c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000710:	d0c0      	beq.n	8000694 <HAL_ADC_Start+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000712:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000714:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000718:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800071c:	6462      	str	r2, [r4, #68]	; 0x44
 800071e:	e7b9      	b.n	8000694 <HAL_ADC_Start+0x60>
        ADC_CLEAR_ERRORCODE(hadc);
 8000720:	2200      	movs	r2, #0
 8000722:	64a2      	str	r2, [r4, #72]	; 0x48
 8000724:	e7be      	b.n	80006a4 <HAL_ADC_Start+0x70>
      __HAL_UNLOCK(hadc);
 8000726:	2200      	movs	r2, #0
 8000728:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
}
 800072c:	4618      	mov	r0, r3
 800072e:	bd10      	pop	{r4, pc}
 8000730:	50000300 	.word	0x50000300
 8000734:	50000100 	.word	0x50000100

08000738 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000738:	6803      	ldr	r3, [r0, #0]
 800073a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800073c:	4770      	bx	lr
	...

08000740 <HAL_ADC_ConfigChannel>:
{
 8000740:	b470      	push	{r4, r5, r6}
 8000742:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000744:	2200      	movs	r2, #0
 8000746:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hadc);
 8000748:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800074c:	2a01      	cmp	r2, #1
 800074e:	f000 81ad 	beq.w	8000aac <HAL_ADC_ConfigChannel+0x36c>
 8000752:	4603      	mov	r3, r0
 8000754:	2201      	movs	r2, #1
 8000756:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800075a:	6800      	ldr	r0, [r0, #0]
 800075c:	6882      	ldr	r2, [r0, #8]
 800075e:	f012 0f04 	tst.w	r2, #4
 8000762:	f040 8196 	bne.w	8000a92 <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank < 5U)
 8000766:	684a      	ldr	r2, [r1, #4]
 8000768:	2a04      	cmp	r2, #4
 800076a:	d831      	bhi.n	80007d0 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 800076c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800076e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000772:	0055      	lsls	r5, r2, #1
 8000774:	221f      	movs	r2, #31
 8000776:	40aa      	lsls	r2, r5
 8000778:	ea24 0202 	bic.w	r2, r4, r2
 800077c:	680c      	ldr	r4, [r1, #0]
 800077e:	40ac      	lsls	r4, r5
 8000780:	4322      	orrs	r2, r4
 8000782:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000784:	6818      	ldr	r0, [r3, #0]
 8000786:	6882      	ldr	r2, [r0, #8]
 8000788:	f012 0f0c 	tst.w	r2, #12
 800078c:	d168      	bne.n	8000860 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800078e:	680a      	ldr	r2, [r1, #0]
 8000790:	2a09      	cmp	r2, #9
 8000792:	d94e      	bls.n	8000832 <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000794:	6984      	ldr	r4, [r0, #24]
 8000796:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800079a:	3a1e      	subs	r2, #30
 800079c:	2507      	movs	r5, #7
 800079e:	4095      	lsls	r5, r2
 80007a0:	ea24 0405 	bic.w	r4, r4, r5
 80007a4:	688d      	ldr	r5, [r1, #8]
 80007a6:	fa05 f202 	lsl.w	r2, r5, r2
 80007aa:	4322      	orrs	r2, r4
 80007ac:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80007ae:	6948      	ldr	r0, [r1, #20]
 80007b0:	681c      	ldr	r4, [r3, #0]
 80007b2:	68e2      	ldr	r2, [r4, #12]
 80007b4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80007b8:	0052      	lsls	r2, r2, #1
 80007ba:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 80007be:	6908      	ldr	r0, [r1, #16]
 80007c0:	3801      	subs	r0, #1
 80007c2:	2803      	cmp	r0, #3
 80007c4:	f200 808f 	bhi.w	80008e6 <HAL_ADC_ConfigChannel+0x1a6>
 80007c8:	e8df f000 	tbb	[pc, r0]
 80007cc:	82776c40 	.word	0x82776c40
    else if (sConfig->Rank < 10U)
 80007d0:	2a09      	cmp	r2, #9
 80007d2:	d80e      	bhi.n	80007f2 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 80007d4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80007d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80007da:	0055      	lsls	r5, r2, #1
 80007dc:	3d1e      	subs	r5, #30
 80007de:	221f      	movs	r2, #31
 80007e0:	40aa      	lsls	r2, r5
 80007e2:	ea24 0202 	bic.w	r2, r4, r2
 80007e6:	680c      	ldr	r4, [r1, #0]
 80007e8:	fa04 f505 	lsl.w	r5, r4, r5
 80007ec:	432a      	orrs	r2, r5
 80007ee:	6342      	str	r2, [r0, #52]	; 0x34
 80007f0:	e7c8      	b.n	8000784 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 80007f2:	2a0e      	cmp	r2, #14
 80007f4:	d80e      	bhi.n	8000814 <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80007f6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80007f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80007fc:	0055      	lsls	r5, r2, #1
 80007fe:	3d3c      	subs	r5, #60	; 0x3c
 8000800:	221f      	movs	r2, #31
 8000802:	40aa      	lsls	r2, r5
 8000804:	ea24 0202 	bic.w	r2, r4, r2
 8000808:	680c      	ldr	r4, [r1, #0]
 800080a:	fa04 f505 	lsl.w	r5, r4, r5
 800080e:	432a      	orrs	r2, r5
 8000810:	6382      	str	r2, [r0, #56]	; 0x38
 8000812:	e7b7      	b.n	8000784 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000814:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000816:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800081a:	0055      	lsls	r5, r2, #1
 800081c:	3d5a      	subs	r5, #90	; 0x5a
 800081e:	221f      	movs	r2, #31
 8000820:	40aa      	lsls	r2, r5
 8000822:	ea24 0202 	bic.w	r2, r4, r2
 8000826:	680c      	ldr	r4, [r1, #0]
 8000828:	fa04 f505 	lsl.w	r5, r4, r5
 800082c:	432a      	orrs	r2, r5
 800082e:	63c2      	str	r2, [r0, #60]	; 0x3c
 8000830:	e7a8      	b.n	8000784 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000832:	6944      	ldr	r4, [r0, #20]
 8000834:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000838:	2507      	movs	r5, #7
 800083a:	4095      	lsls	r5, r2
 800083c:	ea24 0405 	bic.w	r4, r4, r5
 8000840:	688d      	ldr	r5, [r1, #8]
 8000842:	fa05 f202 	lsl.w	r2, r5, r2
 8000846:	4322      	orrs	r2, r4
 8000848:	6142      	str	r2, [r0, #20]
 800084a:	e7b0      	b.n	80007ae <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 800084c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800084e:	4d98      	ldr	r5, [pc, #608]	; (8000ab0 <HAL_ADC_ConfigChannel+0x370>)
 8000850:	4005      	ands	r5, r0
 8000852:	6808      	ldr	r0, [r1, #0]
 8000854:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000858:	4315      	orrs	r5, r2
 800085a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800085e:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000860:	6818      	ldr	r0, [r3, #0]
 8000862:	6882      	ldr	r2, [r0, #8]
 8000864:	f002 0203 	and.w	r2, r2, #3
 8000868:	2a01      	cmp	r2, #1
 800086a:	d06f      	beq.n	800094c <HAL_ADC_ConfigChannel+0x20c>
 800086c:	2200      	movs	r2, #0
 800086e:	2a00      	cmp	r2, #0
 8000870:	f040 811a 	bne.w	8000aa8 <HAL_ADC_ConfigChannel+0x368>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000874:	68cc      	ldr	r4, [r1, #12]
 8000876:	2c01      	cmp	r4, #1
 8000878:	d070      	beq.n	800095c <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800087a:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 800087e:	680e      	ldr	r6, [r1, #0]
 8000880:	2501      	movs	r5, #1
 8000882:	40b5      	lsls	r5, r6
 8000884:	ea24 0405 	bic.w	r4, r4, r5
 8000888:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800088c:	6809      	ldr	r1, [r1, #0]
 800088e:	2910      	cmp	r1, #16
 8000890:	f000 808d 	beq.w	80009ae <HAL_ADC_ConfigChannel+0x26e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000894:	2911      	cmp	r1, #17
 8000896:	f000 80af 	beq.w	80009f8 <HAL_ADC_ConfigChannel+0x2b8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800089a:	2912      	cmp	r1, #18
 800089c:	f000 80b2 	beq.w	8000a04 <HAL_ADC_ConfigChannel+0x2c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008a0:	2000      	movs	r0, #0
 80008a2:	e0fb      	b.n	8000a9c <HAL_ADC_ConfigChannel+0x35c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80008a4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80008a6:	4d82      	ldr	r5, [pc, #520]	; (8000ab0 <HAL_ADC_ConfigChannel+0x370>)
 80008a8:	4005      	ands	r5, r0
 80008aa:	6808      	ldr	r0, [r1, #0]
 80008ac:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80008b0:	4315      	orrs	r5, r2
 80008b2:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80008b6:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 80008b8:	e7d2      	b.n	8000860 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80008ba:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80008bc:	4d7c      	ldr	r5, [pc, #496]	; (8000ab0 <HAL_ADC_ConfigChannel+0x370>)
 80008be:	4005      	ands	r5, r0
 80008c0:	6808      	ldr	r0, [r1, #0]
 80008c2:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80008c6:	4315      	orrs	r5, r2
 80008c8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80008cc:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 80008ce:	e7c7      	b.n	8000860 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80008d0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80008d2:	4877      	ldr	r0, [pc, #476]	; (8000ab0 <HAL_ADC_ConfigChannel+0x370>)
 80008d4:	4028      	ands	r0, r5
 80008d6:	680d      	ldr	r5, [r1, #0]
 80008d8:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 80008dc:	4302      	orrs	r2, r0
 80008de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80008e2:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 80008e4:	e7bc      	b.n	8000860 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008e6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80008e8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80008ec:	6808      	ldr	r0, [r1, #0]
 80008ee:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 80008f2:	d01c      	beq.n	800092e <HAL_ADC_ConfigChannel+0x1ee>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008f4:	6818      	ldr	r0, [r3, #0]
 80008f6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80008f8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80008fc:	680c      	ldr	r4, [r1, #0]
 80008fe:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000902:	d019      	beq.n	8000938 <HAL_ADC_ConfigChannel+0x1f8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000908:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800090c:	680c      	ldr	r4, [r1, #0]
 800090e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000912:	d016      	beq.n	8000942 <HAL_ADC_ConfigChannel+0x202>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000918:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800091c:	680c      	ldr	r4, [r1, #0]
 800091e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8000922:	d19d      	bne.n	8000860 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000924:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000926:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800092a:	66c2      	str	r2, [r0, #108]	; 0x6c
 800092c:	e798      	b.n	8000860 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800092e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000930:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000934:	6622      	str	r2, [r4, #96]	; 0x60
 8000936:	e7dd      	b.n	80008f4 <HAL_ADC_ConfigChannel+0x1b4>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000938:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800093a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800093e:	6642      	str	r2, [r0, #100]	; 0x64
 8000940:	e7e0      	b.n	8000904 <HAL_ADC_ConfigChannel+0x1c4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000942:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000944:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000948:	6682      	str	r2, [r0, #104]	; 0x68
 800094a:	e7e3      	b.n	8000914 <HAL_ADC_ConfigChannel+0x1d4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800094c:	6802      	ldr	r2, [r0, #0]
 800094e:	f012 0f01 	tst.w	r2, #1
 8000952:	d101      	bne.n	8000958 <HAL_ADC_ConfigChannel+0x218>
 8000954:	2200      	movs	r2, #0
 8000956:	e78a      	b.n	800086e <HAL_ADC_ConfigChannel+0x12e>
 8000958:	2201      	movs	r2, #1
 800095a:	e788      	b.n	800086e <HAL_ADC_ConfigChannel+0x12e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800095c:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8000960:	680e      	ldr	r6, [r1, #0]
 8000962:	2501      	movs	r5, #1
 8000964:	40b5      	lsls	r5, r6
 8000966:	432c      	orrs	r4, r5
 8000968:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800096c:	6808      	ldr	r0, [r1, #0]
 800096e:	2809      	cmp	r0, #9
 8000970:	d90e      	bls.n	8000990 <HAL_ADC_ConfigChannel+0x250>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000972:	681e      	ldr	r6, [r3, #0]
 8000974:	69b4      	ldr	r4, [r6, #24]
 8000976:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800097a:	381b      	subs	r0, #27
 800097c:	2507      	movs	r5, #7
 800097e:	4085      	lsls	r5, r0
 8000980:	ea24 0405 	bic.w	r4, r4, r5
 8000984:	688d      	ldr	r5, [r1, #8]
 8000986:	fa05 f000 	lsl.w	r0, r5, r0
 800098a:	4320      	orrs	r0, r4
 800098c:	61b0      	str	r0, [r6, #24]
 800098e:	e77d      	b.n	800088c <HAL_ADC_ConfigChannel+0x14c>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000990:	681e      	ldr	r6, [r3, #0]
 8000992:	6974      	ldr	r4, [r6, #20]
 8000994:	3001      	adds	r0, #1
 8000996:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800099a:	2507      	movs	r5, #7
 800099c:	4085      	lsls	r5, r0
 800099e:	ea24 0405 	bic.w	r4, r4, r5
 80009a2:	688d      	ldr	r5, [r1, #8]
 80009a4:	fa05 f000 	lsl.w	r0, r5, r0
 80009a8:	4320      	orrs	r0, r4
 80009aa:	6170      	str	r0, [r6, #20]
 80009ac:	e76e      	b.n	800088c <HAL_ADC_ConfigChannel+0x14c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80009ae:	4841      	ldr	r0, [pc, #260]	; (8000ab4 <HAL_ADC_ConfigChannel+0x374>)
 80009b0:	6880      	ldr	r0, [r0, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80009b2:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80009b6:	f47f af6d 	bne.w	8000894 <HAL_ADC_ConfigChannel+0x154>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80009ba:	681c      	ldr	r4, [r3, #0]
 80009bc:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80009c0:	d027      	beq.n	8000a12 <HAL_ADC_ConfigChannel+0x2d2>
 80009c2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80009c6:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80009c8:	68a0      	ldr	r0, [r4, #8]
 80009ca:	f000 0003 	and.w	r0, r0, #3
 80009ce:	2801      	cmp	r0, #1
 80009d0:	d022      	beq.n	8000a18 <HAL_ADC_ConfigChannel+0x2d8>
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	d157      	bne.n	8000a86 <HAL_ADC_ConfigChannel+0x346>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80009d6:	9d01      	ldr	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80009d8:	b135      	cbz	r5, 80009e8 <HAL_ADC_ConfigChannel+0x2a8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80009da:	68a8      	ldr	r0, [r5, #8]
 80009dc:	f000 0003 	and.w	r0, r0, #3
 80009e0:	2801      	cmp	r0, #1
 80009e2:	d01f      	beq.n	8000a24 <HAL_ADC_ConfigChannel+0x2e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80009e4:	2a00      	cmp	r2, #0
 80009e6:	d14e      	bne.n	8000a86 <HAL_ADC_ConfigChannel+0x346>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80009e8:	2910      	cmp	r1, #16
 80009ea:	d021      	beq.n	8000a30 <HAL_ADC_ConfigChannel+0x2f0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80009ec:	2911      	cmp	r1, #17
 80009ee:	d039      	beq.n	8000a64 <HAL_ADC_ConfigChannel+0x324>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80009f0:	2912      	cmp	r1, #18
 80009f2:	d041      	beq.n	8000a78 <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009f4:	2000      	movs	r0, #0
 80009f6:	e051      	b.n	8000a9c <HAL_ADC_ConfigChannel+0x35c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80009f8:	482e      	ldr	r0, [pc, #184]	; (8000ab4 <HAL_ADC_ConfigChannel+0x374>)
 80009fa:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80009fc:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8000a00:	d0db      	beq.n	80009ba <HAL_ADC_ConfigChannel+0x27a>
 8000a02:	e74a      	b.n	800089a <HAL_ADC_ConfigChannel+0x15a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000a04:	482b      	ldr	r0, [pc, #172]	; (8000ab4 <HAL_ADC_ConfigChannel+0x374>)
 8000a06:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000a08:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8000a0c:	d0d5      	beq.n	80009ba <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a0e:	2000      	movs	r0, #0
 8000a10:	e044      	b.n	8000a9c <HAL_ADC_ConfigChannel+0x35c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a12:	4829      	ldr	r0, [pc, #164]	; (8000ab8 <HAL_ADC_ConfigChannel+0x378>)
 8000a14:	9001      	str	r0, [sp, #4]
 8000a16:	e7d7      	b.n	80009c8 <HAL_ADC_ConfigChannel+0x288>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000a18:	6820      	ldr	r0, [r4, #0]
 8000a1a:	f010 0f01 	tst.w	r0, #1
 8000a1e:	d0d8      	beq.n	80009d2 <HAL_ADC_ConfigChannel+0x292>
 8000a20:	2201      	movs	r2, #1
 8000a22:	e7d6      	b.n	80009d2 <HAL_ADC_ConfigChannel+0x292>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000a24:	6828      	ldr	r0, [r5, #0]
 8000a26:	f010 0f01 	tst.w	r0, #1
 8000a2a:	d0db      	beq.n	80009e4 <HAL_ADC_ConfigChannel+0x2a4>
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	e7d9      	b.n	80009e4 <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000a30:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8000a34:	d1da      	bne.n	80009ec <HAL_ADC_ConfigChannel+0x2ac>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000a36:	491f      	ldr	r1, [pc, #124]	; (8000ab4 <HAL_ADC_ConfigChannel+0x374>)
 8000a38:	688a      	ldr	r2, [r1, #8]
 8000a3a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000a3e:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a40:	4a1e      	ldr	r2, [pc, #120]	; (8000abc <HAL_ADC_ConfigChannel+0x37c>)
 8000a42:	6812      	ldr	r2, [r2, #0]
 8000a44:	491e      	ldr	r1, [pc, #120]	; (8000ac0 <HAL_ADC_ConfigChannel+0x380>)
 8000a46:	fbb2 f1f1 	udiv	r1, r2, r1
 8000a4a:	220a      	movs	r2, #10
 8000a4c:	fb02 f201 	mul.w	r2, r2, r1
 8000a50:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000a52:	e002      	b.n	8000a5a <HAL_ADC_ConfigChannel+0x31a>
            wait_loop_index--;
 8000a54:	9a00      	ldr	r2, [sp, #0]
 8000a56:	3a01      	subs	r2, #1
 8000a58:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000a5a:	9a00      	ldr	r2, [sp, #0]
 8000a5c:	2a00      	cmp	r2, #0
 8000a5e:	d1f9      	bne.n	8000a54 <HAL_ADC_ConfigChannel+0x314>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a60:	2000      	movs	r0, #0
 8000a62:	e01b      	b.n	8000a9c <HAL_ADC_ConfigChannel+0x35c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000a64:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8000a68:	d1c2      	bne.n	80009f0 <HAL_ADC_ConfigChannel+0x2b0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000a6a:	4912      	ldr	r1, [pc, #72]	; (8000ab4 <HAL_ADC_ConfigChannel+0x374>)
 8000a6c:	688a      	ldr	r2, [r1, #8]
 8000a6e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000a72:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a74:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000a76:	e011      	b.n	8000a9c <HAL_ADC_ConfigChannel+0x35c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000a78:	490e      	ldr	r1, [pc, #56]	; (8000ab4 <HAL_ADC_ConfigChannel+0x374>)
 8000a7a:	688a      	ldr	r2, [r1, #8]
 8000a7c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000a80:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a82:	2000      	movs	r0, #0
 8000a84:	e00a      	b.n	8000a9c <HAL_ADC_ConfigChannel+0x35c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a88:	f042 0220 	orr.w	r2, r2, #32
 8000a8c:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8000a8e:	2001      	movs	r0, #1
 8000a90:	e004      	b.n	8000a9c <HAL_ADC_ConfigChannel+0x35c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a94:	f042 0220 	orr.w	r2, r2, #32
 8000a98:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000a9a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8000aa2:	b017      	add	sp, #92	; 0x5c
 8000aa4:	bc70      	pop	{r4, r5, r6}
 8000aa6:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	e7f7      	b.n	8000a9c <HAL_ADC_ConfigChannel+0x35c>
  __HAL_LOCK(hadc);
 8000aac:	2002      	movs	r0, #2
 8000aae:	e7f8      	b.n	8000aa2 <HAL_ADC_ConfigChannel+0x362>
 8000ab0:	83fff000 	.word	0x83fff000
 8000ab4:	50000300 	.word	0x50000300
 8000ab8:	50000100 	.word	0x50000100
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	000f4240 	.word	0x000f4240

08000ac4 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8000ac4:	b470      	push	{r4, r5, r6}
 8000ac6:	b097      	sub	sp, #92	; 0x5c
 8000ac8:	4603      	mov	r3, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000aca:	6802      	ldr	r2, [r0, #0]
 8000acc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000ad0:	d040      	beq.n	8000b54 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8000ad2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000ad6:	9001      	str	r0, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000ad8:	9801      	ldr	r0, [sp, #4]
 8000ada:	2800      	cmp	r0, #0
 8000adc:	f000 8088 	beq.w	8000bf0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
  __HAL_LOCK(hadc);
 8000ae0:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
 8000ae4:	2c01      	cmp	r4, #1
 8000ae6:	f000 8085 	beq.w	8000bf4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8000aea:	2401      	movs	r4, #1
 8000aec:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000af0:	6892      	ldr	r2, [r2, #8]
 8000af2:	f012 0f04 	tst.w	r2, #4
 8000af6:	d168      	bne.n	8000bca <HAL_ADCEx_MultiModeConfigChannel+0x106>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000af8:	6882      	ldr	r2, [r0, #8]
 8000afa:	f012 0f04 	tst.w	r2, #4
 8000afe:	d164      	bne.n	8000bca <HAL_ADCEx_MultiModeConfigChannel+0x106>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000b00:	680a      	ldr	r2, [r1, #0]
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	d037      	beq.n	8000b76 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000b06:	4d3c      	ldr	r5, [pc, #240]	; (8000bf8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8000b08:	68aa      	ldr	r2, [r5, #8]
 8000b0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000b0e:	684c      	ldr	r4, [r1, #4]
 8000b10:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8000b12:	ea44 3446 	orr.w	r4, r4, r6, lsl #13
 8000b16:	4322      	orrs	r2, r4
 8000b18:	60aa      	str	r2, [r5, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000b1a:	681c      	ldr	r4, [r3, #0]
 8000b1c:	68a2      	ldr	r2, [r4, #8]
 8000b1e:	f002 0203 	and.w	r2, r2, #3
 8000b22:	2a01      	cmp	r2, #1
 8000b24:	d019      	beq.n	8000b5a <HAL_ADCEx_MultiModeConfigChannel+0x96>
 8000b26:	2200      	movs	r2, #0
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	d159      	bne.n	8000be0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000b2c:	6884      	ldr	r4, [r0, #8]
 8000b2e:	f004 0403 	and.w	r4, r4, #3
 8000b32:	2c01      	cmp	r4, #1
 8000b34:	d019      	beq.n	8000b6a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000b36:	2a00      	cmp	r2, #0
 8000b38:	d154      	bne.n	8000be4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000b3a:	4c2f      	ldr	r4, [pc, #188]	; (8000bf8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8000b3c:	68a2      	ldr	r2, [r4, #8]
 8000b3e:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000b42:	f022 020f 	bic.w	r2, r2, #15
 8000b46:	6808      	ldr	r0, [r1, #0]
 8000b48:	6889      	ldr	r1, [r1, #8]
 8000b4a:	4301      	orrs	r1, r0
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b50:	2000      	movs	r0, #0
 8000b52:	e03f      	b.n	8000bd4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b54:	4829      	ldr	r0, [pc, #164]	; (8000bfc <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8000b56:	9001      	str	r0, [sp, #4]
 8000b58:	e7be      	b.n	8000ad8 <HAL_ADCEx_MultiModeConfigChannel+0x14>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000b5a:	6822      	ldr	r2, [r4, #0]
 8000b5c:	f012 0f01 	tst.w	r2, #1
 8000b60:	d101      	bne.n	8000b66 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8000b62:	2200      	movs	r2, #0
 8000b64:	e7e0      	b.n	8000b28 <HAL_ADCEx_MultiModeConfigChannel+0x64>
 8000b66:	2201      	movs	r2, #1
 8000b68:	e7de      	b.n	8000b28 <HAL_ADCEx_MultiModeConfigChannel+0x64>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000b6a:	6800      	ldr	r0, [r0, #0]
 8000b6c:	f010 0f01 	tst.w	r0, #1
 8000b70:	d0e1      	beq.n	8000b36 <HAL_ADCEx_MultiModeConfigChannel+0x72>
 8000b72:	2201      	movs	r2, #1
 8000b74:	e7df      	b.n	8000b36 <HAL_ADCEx_MultiModeConfigChannel+0x72>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000b76:	4920      	ldr	r1, [pc, #128]	; (8000bf8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8000b78:	688a      	ldr	r2, [r1, #8]
 8000b7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000b7e:	608a      	str	r2, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000b80:	6819      	ldr	r1, [r3, #0]
 8000b82:	688a      	ldr	r2, [r1, #8]
 8000b84:	f002 0203 	and.w	r2, r2, #3
 8000b88:	2a01      	cmp	r2, #1
 8000b8a:	d010      	beq.n	8000bae <HAL_ADCEx_MultiModeConfigChannel+0xea>
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	bb5a      	cbnz	r2, 8000be8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000b90:	6881      	ldr	r1, [r0, #8]
 8000b92:	f001 0103 	and.w	r1, r1, #3
 8000b96:	2901      	cmp	r1, #1
 8000b98:	d011      	beq.n	8000bbe <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000b9a:	bb3a      	cbnz	r2, 8000bec <HAL_ADCEx_MultiModeConfigChannel+0x128>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000b9c:	4916      	ldr	r1, [pc, #88]	; (8000bf8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8000b9e:	688a      	ldr	r2, [r1, #8]
 8000ba0:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000ba4:	f022 020f 	bic.w	r2, r2, #15
 8000ba8:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000baa:	2000      	movs	r0, #0
 8000bac:	e012      	b.n	8000bd4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000bae:	680a      	ldr	r2, [r1, #0]
 8000bb0:	f012 0f01 	tst.w	r2, #1
 8000bb4:	d101      	bne.n	8000bba <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	e7e9      	b.n	8000b8e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8000bba:	2201      	movs	r2, #1
 8000bbc:	e7e7      	b.n	8000b8e <HAL_ADCEx_MultiModeConfigChannel+0xca>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000bbe:	6801      	ldr	r1, [r0, #0]
 8000bc0:	f011 0f01 	tst.w	r1, #1
 8000bc4:	d0e9      	beq.n	8000b9a <HAL_ADCEx_MultiModeConfigChannel+0xd6>
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	e7e7      	b.n	8000b9a <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bcc:	f042 0220 	orr.w	r2, r2, #32
 8000bd0:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000bd2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 8000bda:	b017      	add	sp, #92	; 0x5c
 8000bdc:	bc70      	pop	{r4, r5, r6}
 8000bde:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be0:	2000      	movs	r0, #0
 8000be2:	e7f7      	b.n	8000bd4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8000be4:	2000      	movs	r0, #0
 8000be6:	e7f5      	b.n	8000bd4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8000be8:	2000      	movs	r0, #0
 8000bea:	e7f3      	b.n	8000bd4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8000bec:	2000      	movs	r0, #0
 8000bee:	e7f1      	b.n	8000bd4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    return HAL_ERROR;
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	e7f2      	b.n	8000bda <HAL_ADCEx_MultiModeConfigChannel+0x116>
  __HAL_LOCK(hadc);
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	e7f0      	b.n	8000bda <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8000bf8:	50000300 	.word	0x50000300
 8000bfc:	50000100 	.word	0x50000100

08000c00 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c02:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c08:	041b      	lsls	r3, r3, #16
 8000c0a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c0c:	0200      	lsls	r0, r0, #8
 8000c0e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c12:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000c14:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000c18:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000c1c:	60d0      	str	r0, [r2, #12]
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <HAL_NVIC_SetPriority+0x5c>)
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2e:	f1c3 0407 	rsb	r4, r3, #7
 8000c32:	2c04      	cmp	r4, #4
 8000c34:	bf28      	it	cs
 8000c36:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c38:	1d1d      	adds	r5, r3, #4
 8000c3a:	2d06      	cmp	r5, #6
 8000c3c:	d917      	bls.n	8000c6e <HAL_NVIC_SetPriority+0x4a>
 8000c3e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	2501      	movs	r5, #1
 8000c42:	fa05 f404 	lsl.w	r4, r5, r4
 8000c46:	3c01      	subs	r4, #1
 8000c48:	4021      	ands	r1, r4
 8000c4a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	fa05 f303 	lsl.w	r3, r5, r3
 8000c50:	3b01      	subs	r3, #1
 8000c52:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000c56:	2800      	cmp	r0, #0
 8000c58:	db0b      	blt.n	8000c72 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	0109      	lsls	r1, r1, #4
 8000c5c:	b2c9      	uxtb	r1, r1
 8000c5e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c62:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c66:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c6a:	bc30      	pop	{r4, r5}
 8000c6c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e7e6      	b.n	8000c40 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	f000 000f 	and.w	r0, r0, #15
 8000c76:	0109      	lsls	r1, r1, #4
 8000c78:	b2c9      	uxtb	r1, r1
 8000c7a:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <HAL_NVIC_SetPriority+0x60>)
 8000c7c:	5419      	strb	r1, [r3, r0]
 8000c7e:	e7f4      	b.n	8000c6a <HAL_NVIC_SetPriority+0x46>
 8000c80:	e000ed00 	.word	0xe000ed00
 8000c84:	e000ed14 	.word	0xe000ed14

08000c88 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c88:	0942      	lsrs	r2, r0, #5
 8000c8a:	f000 001f 	and.w	r0, r0, #31
 8000c8e:	2301      	movs	r3, #1
 8000c90:	fa03 f000 	lsl.w	r0, r3, r0
 8000c94:	4b01      	ldr	r3, [pc, #4]	; (8000c9c <HAL_NVIC_EnableIRQ+0x14>)
 8000c96:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	3801      	subs	r0, #1
 8000ca2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ca6:	d20a      	bcs.n	8000cbe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_SYSTICK_Config+0x24>)
 8000caa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	21f0      	movs	r1, #240	; 0xf0
 8000cae:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <HAL_SYSTICK_Config+0x28>)
 8000cb0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000cbe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e010 	.word	0xe000e010
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ccc:	2804      	cmp	r0, #4
 8000cce:	d005      	beq.n	8000cdc <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000cd0:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000cd2:	6813      	ldr	r3, [r2, #0]
 8000cd4:	f023 0304 	bic.w	r3, r3, #4
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cdc:	4a02      	ldr	r2, [pc, #8]	; (8000ce8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000cde:	6813      	ldr	r3, [r2, #0]
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000cec:	4770      	bx	lr

08000cee <HAL_SYSTICK_IRQHandler>:
{
 8000cee:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000cf0:	f7ff fffc 	bl	8000cec <HAL_SYSTICK_Callback>
 8000cf4:	bd08      	pop	{r3, pc}

08000cf6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cf6:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cf8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d003      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d00:	2304      	movs	r3, #4
 8000d02:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d04:	2001      	movs	r0, #1
 8000d06:	bd08      	pop	{r3, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d08:	6802      	ldr	r2, [r0, #0]
 8000d0a:	6813      	ldr	r3, [r2, #0]
 8000d0c:	f023 030e 	bic.w	r3, r3, #14
 8000d10:	6013      	str	r3, [r2, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d12:	6802      	ldr	r2, [r0, #0]
 8000d14:	6813      	ldr	r3, [r2, #0]
 8000d16:	f023 0301 	bic.w	r3, r3, #1
 8000d1a:	6013      	str	r3, [r2, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d1c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000d1e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000d20:	2201      	movs	r2, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	604b      	str	r3, [r1, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d28:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f880 3020 	strb.w	r3, [r0, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000d34:	b113      	cbz	r3, 8000d3c <HAL_DMA_Abort_IT+0x46>
    {
      hdma->XferAbortCallback(hdma);
 8000d36:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000d38:	2000      	movs	r0, #0
 8000d3a:	bd08      	pop	{r3, pc}
 8000d3c:	2000      	movs	r0, #0
    } 
  }
  return status;
}
 8000d3e:	bd08      	pop	{r3, pc}

08000d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d42:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8000d44:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d46:	e088      	b.n	8000e5a <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d48:	08de      	lsrs	r6, r3, #3
 8000d4a:	3608      	adds	r6, #8
 8000d4c:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d50:	f003 0e07 	and.w	lr, r3, #7
 8000d54:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000d58:	270f      	movs	r7, #15
 8000d5a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d5e:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d62:	690f      	ldr	r7, [r1, #16]
 8000d64:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d68:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8000d6a:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8000d6e:	e083      	b.n	8000e78 <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d70:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d72:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d74:	68cf      	ldr	r7, [r1, #12]
 8000d76:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d7a:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000d7c:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d7e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d80:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d84:	684e      	ldr	r6, [r1, #4]
 8000d86:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000d8a:	409e      	lsls	r6, r3
 8000d8c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000d8e:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d90:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d92:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d94:	688d      	ldr	r5, [r1, #8]
 8000d96:	fa05 f50e 	lsl.w	r5, r5, lr
 8000d9a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000d9c:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d9e:	684c      	ldr	r4, [r1, #4]
 8000da0:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000da4:	d058      	beq.n	8000e58 <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	4c47      	ldr	r4, [pc, #284]	; (8000ec4 <HAL_GPIO_Init+0x184>)
 8000da8:	69a5      	ldr	r5, [r4, #24]
 8000daa:	f045 0501 	orr.w	r5, r5, #1
 8000dae:	61a5      	str	r5, [r4, #24]
 8000db0:	69a4      	ldr	r4, [r4, #24]
 8000db2:	f004 0401 	and.w	r4, r4, #1
 8000db6:	9401      	str	r4, [sp, #4]
 8000db8:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8000dba:	089d      	lsrs	r5, r3, #2
 8000dbc:	1cae      	adds	r6, r5, #2
 8000dbe:	4c42      	ldr	r4, [pc, #264]	; (8000ec8 <HAL_GPIO_Init+0x188>)
 8000dc0:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000dc4:	f003 0603 	and.w	r6, r3, #3
 8000dc8:	00b6      	lsls	r6, r6, #2
 8000dca:	270f      	movs	r7, #15
 8000dcc:	40b7      	lsls	r7, r6
 8000dce:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dd2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000dd6:	d06c      	beq.n	8000eb2 <HAL_GPIO_Init+0x172>
 8000dd8:	4f3c      	ldr	r7, [pc, #240]	; (8000ecc <HAL_GPIO_Init+0x18c>)
 8000dda:	42b8      	cmp	r0, r7
 8000ddc:	d06b      	beq.n	8000eb6 <HAL_GPIO_Init+0x176>
 8000dde:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000de2:	42b8      	cmp	r0, r7
 8000de4:	d069      	beq.n	8000eba <HAL_GPIO_Init+0x17a>
 8000de6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000dea:	42b8      	cmp	r0, r7
 8000dec:	d05f      	beq.n	8000eae <HAL_GPIO_Init+0x16e>
 8000dee:	2705      	movs	r7, #5
 8000df0:	fa07 f606 	lsl.w	r6, r7, r6
 8000df4:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000df6:	3502      	adds	r5, #2
 8000df8:	4e33      	ldr	r6, [pc, #204]	; (8000ec8 <HAL_GPIO_Init+0x188>)
 8000dfa:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dfe:	4c34      	ldr	r4, [pc, #208]	; (8000ed0 <HAL_GPIO_Init+0x190>)
 8000e00:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e02:	43d4      	mvns	r4, r2
 8000e04:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e08:	684f      	ldr	r7, [r1, #4]
 8000e0a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000e0e:	d001      	beq.n	8000e14 <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8000e10:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8000e14:	4d2e      	ldr	r5, [pc, #184]	; (8000ed0 <HAL_GPIO_Init+0x190>)
 8000e16:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8000e18:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8000e1a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e1e:	684f      	ldr	r7, [r1, #4]
 8000e20:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000e24:	d001      	beq.n	8000e2a <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 8000e26:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8000e2a:	4d29      	ldr	r5, [pc, #164]	; (8000ed0 <HAL_GPIO_Init+0x190>)
 8000e2c:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e2e:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8000e30:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e34:	684f      	ldr	r7, [r1, #4]
 8000e36:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000e3a:	d001      	beq.n	8000e40 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 8000e3c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8000e40:	4d23      	ldr	r5, [pc, #140]	; (8000ed0 <HAL_GPIO_Init+0x190>)
 8000e42:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8000e44:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8000e46:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e48:	684e      	ldr	r6, [r1, #4]
 8000e4a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000e4e:	d001      	beq.n	8000e54 <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 8000e50:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8000e54:	4a1e      	ldr	r2, [pc, #120]	; (8000ed0 <HAL_GPIO_Init+0x190>)
 8000e56:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8000e58:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e5a:	680a      	ldr	r2, [r1, #0]
 8000e5c:	fa32 f403 	lsrs.w	r4, r2, r3
 8000e60:	d02d      	beq.n	8000ebe <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e62:	2501      	movs	r5, #1
 8000e64:	409d      	lsls	r5, r3
    if(iocurrent)
 8000e66:	402a      	ands	r2, r5
 8000e68:	d0f6      	beq.n	8000e58 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6a:	684c      	ldr	r4, [r1, #4]
 8000e6c:	2c02      	cmp	r4, #2
 8000e6e:	f43f af6b 	beq.w	8000d48 <HAL_GPIO_Init+0x8>
 8000e72:	2c12      	cmp	r4, #18
 8000e74:	f43f af68 	beq.w	8000d48 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000e78:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000e7e:	2403      	movs	r4, #3
 8000e80:	fa04 f40e 	lsl.w	r4, r4, lr
 8000e84:	43e4      	mvns	r4, r4
 8000e86:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e88:	684f      	ldr	r7, [r1, #4]
 8000e8a:	f007 0703 	and.w	r7, r7, #3
 8000e8e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e92:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000e94:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e96:	684e      	ldr	r6, [r1, #4]
 8000e98:	1e77      	subs	r7, r6, #1
 8000e9a:	2f01      	cmp	r7, #1
 8000e9c:	f67f af68 	bls.w	8000d70 <HAL_GPIO_Init+0x30>
 8000ea0:	2e11      	cmp	r6, #17
 8000ea2:	f43f af65 	beq.w	8000d70 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea6:	2e12      	cmp	r6, #18
 8000ea8:	f47f af72 	bne.w	8000d90 <HAL_GPIO_Init+0x50>
 8000eac:	e760      	b.n	8000d70 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000eae:	2703      	movs	r7, #3
 8000eb0:	e79e      	b.n	8000df0 <HAL_GPIO_Init+0xb0>
 8000eb2:	2700      	movs	r7, #0
 8000eb4:	e79c      	b.n	8000df0 <HAL_GPIO_Init+0xb0>
 8000eb6:	2701      	movs	r7, #1
 8000eb8:	e79a      	b.n	8000df0 <HAL_GPIO_Init+0xb0>
 8000eba:	2702      	movs	r7, #2
 8000ebc:	e798      	b.n	8000df0 <HAL_GPIO_Init+0xb0>
  }
}
 8000ebe:	b003      	add	sp, #12
 8000ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010000 	.word	0x40010000
 8000ecc:	48000400 	.word	0x48000400
 8000ed0:	40010400 	.word	0x40010400

08000ed4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed4:	b90a      	cbnz	r2, 8000eda <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ed6:	6281      	str	r1, [r0, #40]	; 0x28
 8000ed8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eda:	6181      	str	r1, [r0, #24]
 8000edc:	4770      	bx	lr
	...

08000ee0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ee0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4203      	tst	r3, r0
 8000ee8:	d100      	bne.n	8000eec <HAL_GPIO_EXTI_IRQHandler+0xc>
 8000eea:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000eec:	4b02      	ldr	r3, [pc, #8]	; (8000ef8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000eee:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ef0:	f002 fb24 	bl	800353c <HAL_GPIO_EXTI_Callback>
  }
}
 8000ef4:	e7f9      	b.n	8000eea <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000ef6:	bf00      	nop
 8000ef8:	40010400 	.word	0x40010400

08000efc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000efc:	6803      	ldr	r3, [r0, #0]
 8000efe:	699a      	ldr	r2, [r3, #24]
 8000f00:	f012 0f02 	tst.w	r2, #2
 8000f04:	d001      	beq.n	8000f0a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000f06:	2200      	movs	r2, #0
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000f0a:	6803      	ldr	r3, [r0, #0]
 8000f0c:	699a      	ldr	r2, [r3, #24]
 8000f0e:	f012 0f01 	tst.w	r2, #1
 8000f12:	d103      	bne.n	8000f1c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000f14:	699a      	ldr	r2, [r3, #24]
 8000f16:	f042 0201 	orr.w	r2, r2, #1
 8000f1a:	619a      	str	r2, [r3, #24]
 8000f1c:	4770      	bx	lr

08000f1e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8000f1e:	b410      	push	{r4}
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000f20:	f011 0f01 	tst.w	r1, #1
 8000f24:	d009      	beq.n	8000f3a <I2C_Disable_IRQ+0x1c>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8000f26:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000f2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8000f2e:	2b28      	cmp	r3, #40	; 0x28
 8000f30:	d001      	beq.n	8000f36 <I2C_Disable_IRQ+0x18>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000f32:	23f2      	movs	r3, #242	; 0xf2
 8000f34:	e002      	b.n	8000f3c <I2C_Disable_IRQ+0x1e>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8000f36:	2342      	movs	r3, #66	; 0x42
 8000f38:	e000      	b.n	8000f3c <I2C_Disable_IRQ+0x1e>
  uint32_t tmpisr = 0U;
 8000f3a:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000f3c:	f011 0f02 	tst.w	r1, #2
 8000f40:	d009      	beq.n	8000f56 <I2C_Disable_IRQ+0x38>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000f42:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8000f46:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000f4a:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000f4e:	2a28      	cmp	r2, #40	; 0x28
 8000f50:	d019      	beq.n	8000f86 <I2C_Disable_IRQ+0x68>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000f52:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000f56:	f011 0f04 	tst.w	r1, #4
 8000f5a:	d001      	beq.n	8000f60 <I2C_Disable_IRQ+0x42>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000f5c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8000f60:	f001 0211 	and.w	r2, r1, #17
 8000f64:	2a11      	cmp	r2, #17
 8000f66:	d010      	beq.n	8000f8a <I2C_Disable_IRQ+0x6c>
 8000f68:	f001 0112 	and.w	r1, r1, #18
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000f6c:	2912      	cmp	r1, #18
 8000f6e:	d00f      	beq.n	8000f90 <I2C_Disable_IRQ+0x72>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8000f70:	2912      	cmp	r1, #18
 8000f72:	d010      	beq.n	8000f96 <I2C_Disable_IRQ+0x78>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000f74:	6801      	ldr	r1, [r0, #0]
 8000f76:	680a      	ldr	r2, [r1, #0]
 8000f78:	ea22 0303 	bic.w	r3, r2, r3
 8000f7c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
}
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f84:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000f86:	4623      	mov	r3, r4
 8000f88:	e7e5      	b.n	8000f56 <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8000f8a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000f8e:	e7eb      	b.n	8000f68 <I2C_Disable_IRQ+0x4a>
    tmpisr |= I2C_IT_STOPI;
 8000f90:	f043 0320 	orr.w	r3, r3, #32
 8000f94:	e7ec      	b.n	8000f70 <I2C_Disable_IRQ+0x52>
    tmpisr |= I2C_IT_TCI;
 8000f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f9a:	e7eb      	b.n	8000f74 <I2C_Disable_IRQ+0x56>

08000f9c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	d059      	beq.n	8001054 <HAL_I2C_Init+0xb8>
{
 8000fa0:	b510      	push	{r4, lr}
 8000fa2:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fa4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d043      	beq.n	8001034 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fac:	2324      	movs	r3, #36	; 0x24
 8000fae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000fb2:	6822      	ldr	r2, [r4, #0]
 8000fb4:	6813      	ldr	r3, [r2, #0]
 8000fb6:	f023 0301 	bic.w	r3, r3, #1
 8000fba:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fbc:	6822      	ldr	r2, [r4, #0]
 8000fbe:	6863      	ldr	r3, [r4, #4]
 8000fc0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000fc4:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fc6:	6822      	ldr	r2, [r4, #0]
 8000fc8:	6893      	ldr	r3, [r2, #8]
 8000fca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000fce:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fd0:	68e3      	ldr	r3, [r4, #12]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d033      	beq.n	800103e <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fd6:	6822      	ldr	r2, [r4, #0]
 8000fd8:	68a3      	ldr	r3, [r4, #8]
 8000fda:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8000fde:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fe0:	68e3      	ldr	r3, [r4, #12]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d031      	beq.n	800104a <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fe6:	6822      	ldr	r2, [r4, #0]
 8000fe8:	6853      	ldr	r3, [r2, #4]
 8000fea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ff2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ff4:	6822      	ldr	r2, [r4, #0]
 8000ff6:	68d3      	ldr	r3, [r2, #12]
 8000ff8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ffc:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000ffe:	6822      	ldr	r2, [r4, #0]
 8001000:	6923      	ldr	r3, [r4, #16]
 8001002:	6961      	ldr	r1, [r4, #20]
 8001004:	430b      	orrs	r3, r1
 8001006:	69a1      	ldr	r1, [r4, #24]
 8001008:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800100c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800100e:	6822      	ldr	r2, [r4, #0]
 8001010:	69e3      	ldr	r3, [r4, #28]
 8001012:	6a21      	ldr	r1, [r4, #32]
 8001014:	430b      	orrs	r3, r1
 8001016:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001018:	6822      	ldr	r2, [r4, #0]
 800101a:	6813      	ldr	r3, [r2, #0]
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001022:	2000      	movs	r0, #0
 8001024:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001026:	2320      	movs	r3, #32
 8001028:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800102c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800102e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001032:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001034:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001038:	f002 fd50 	bl	8003adc <HAL_I2C_MspInit>
 800103c:	e7b6      	b.n	8000fac <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800103e:	6822      	ldr	r2, [r4, #0]
 8001040:	68a3      	ldr	r3, [r4, #8]
 8001042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001046:	6093      	str	r3, [r2, #8]
 8001048:	e7ca      	b.n	8000fe0 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800104a:	6823      	ldr	r3, [r4, #0]
 800104c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	e7c8      	b.n	8000fe6 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001054:	2001      	movs	r0, #1
 8001056:	4770      	bx	lr

08001058 <HAL_I2C_EV_IRQHandler>:
{
 8001058:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800105a:	6803      	ldr	r3, [r0, #0]
 800105c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800105e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8001060:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001062:	b103      	cbz	r3, 8001066 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8001064:	4798      	blx	r3
 8001066:	bd08      	pop	{r3, pc}

08001068 <HAL_I2C_SlaveTxCpltCallback>:
{
 8001068:	4770      	bx	lr

0800106a <HAL_I2C_SlaveRxCpltCallback>:
{
 800106a:	4770      	bx	lr

0800106c <I2C_ITSlaveSequentialCplt>:
{
 800106c:	b510      	push	{r4, lr}
 800106e:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001070:	2300      	movs	r3, #0
 8001072:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001076:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b29      	cmp	r3, #41	; 0x29
 800107e:	d005      	beq.n	800108c <I2C_ITSlaveSequentialCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001080:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b2a      	cmp	r3, #42	; 0x2a
 8001088:	d00f      	beq.n	80010aa <I2C_ITSlaveSequentialCplt+0x3e>
 800108a:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800108c:	2328      	movs	r3, #40	; 0x28
 800108e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001092:	2321      	movs	r3, #33	; 0x21
 8001094:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001096:	2101      	movs	r1, #1
 8001098:	f7ff ff41 	bl	8000f1e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800109c:	2300      	movs	r3, #0
 800109e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80010a2:	4620      	mov	r0, r4
 80010a4:	f7ff ffe0 	bl	8001068 <HAL_I2C_SlaveTxCpltCallback>
 80010a8:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80010aa:	2328      	movs	r3, #40	; 0x28
 80010ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80010b0:	2322      	movs	r3, #34	; 0x22
 80010b2:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80010b4:	2102      	movs	r1, #2
 80010b6:	f7ff ff32 	bl	8000f1e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80010ba:	2300      	movs	r3, #0
 80010bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80010c0:	4620      	mov	r0, r4
 80010c2:	f7ff ffd2 	bl	800106a <HAL_I2C_SlaveRxCpltCallback>
}
 80010c6:	e7e0      	b.n	800108a <I2C_ITSlaveSequentialCplt+0x1e>

080010c8 <HAL_I2C_AddrCallback>:
{
 80010c8:	4770      	bx	lr

080010ca <I2C_ITAddrCplt>:
{
 80010ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 80010cc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80010d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80010d4:	2b28      	cmp	r3, #40	; 0x28
 80010d6:	d006      	beq.n	80010e6 <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80010d8:	6803      	ldr	r3, [r0, #0]
 80010da:	2208      	movs	r2, #8
 80010dc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80010de:	2300      	movs	r3, #0
 80010e0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80010e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010e6:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 80010e8:	6803      	ldr	r3, [r0, #0]
 80010ea:	699e      	ldr	r6, [r3, #24]
 80010ec:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80010f0:	699a      	ldr	r2, [r3, #24]
 80010f2:	0c12      	lsrs	r2, r2, #16
 80010f4:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80010fe:	68df      	ldr	r7, [r3, #12]
 8001100:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001104:	68c1      	ldr	r1, [r0, #12]
 8001106:	2902      	cmp	r1, #2
 8001108:	d121      	bne.n	800114e <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800110a:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 800110e:	f015 0f06 	tst.w	r5, #6
 8001112:	d110      	bne.n	8001136 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8001114:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001116:	3101      	adds	r1, #1
 8001118:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800111a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800111c:	2902      	cmp	r1, #2
 800111e:	d1e1      	bne.n	80010e4 <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 8001120:	2100      	movs	r1, #0
 8001122:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001124:	2008      	movs	r0, #8
 8001126:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8001128:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800112c:	4631      	mov	r1, r6
 800112e:	4620      	mov	r0, r4
 8001130:	f7ff ffca 	bl	80010c8 <HAL_I2C_AddrCallback>
 8001134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001136:	2104      	movs	r1, #4
 8001138:	f7ff fef1 	bl	8000f1e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800113c:	2300      	movs	r3, #0
 800113e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001142:	463a      	mov	r2, r7
 8001144:	4631      	mov	r1, r6
 8001146:	4620      	mov	r0, r4
 8001148:	f7ff ffbe 	bl	80010c8 <HAL_I2C_AddrCallback>
 800114c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800114e:	2104      	movs	r1, #4
 8001150:	f7ff fee5 	bl	8000f1e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001154:	2300      	movs	r3, #0
 8001156:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800115a:	462a      	mov	r2, r5
 800115c:	4631      	mov	r1, r6
 800115e:	4620      	mov	r0, r4
 8001160:	f7ff ffb2 	bl	80010c8 <HAL_I2C_AddrCallback>
 8001164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001166 <HAL_I2C_ListenCpltCallback>:
{
 8001166:	4770      	bx	lr

08001168 <I2C_ITListenCplt>:
{
 8001168:	b510      	push	{r4, lr}
 800116a:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <I2C_ITListenCplt+0x60>)
 800116e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001170:	2300      	movs	r3, #0
 8001172:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001174:	2220      	movs	r2, #32
 8001176:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800117a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 800117e:	6343      	str	r3, [r0, #52]	; 0x34
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8001180:	f011 0f04 	tst.w	r1, #4
 8001184:	d012      	beq.n	80011ac <I2C_ITListenCplt+0x44>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001186:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	6242      	str	r2, [r0, #36]	; 0x24
 800118c:	6802      	ldr	r2, [r0, #0]
 800118e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001190:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8001192:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8001194:	b153      	cbz	r3, 80011ac <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8001196:	3b01      	subs	r3, #1
 8001198:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 800119a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800119c:	b29b      	uxth	r3, r3
 800119e:	3b01      	subs	r3, #1
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80011a4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80011ac:	2107      	movs	r1, #7
 80011ae:	4620      	mov	r0, r4
 80011b0:	f7ff feb5 	bl	8000f1e <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	2210      	movs	r2, #16
 80011b8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80011ba:	2300      	movs	r3, #0
 80011bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80011c0:	4620      	mov	r0, r4
 80011c2:	f7ff ffd0 	bl	8001166 <HAL_I2C_ListenCpltCallback>
 80011c6:	bd10      	pop	{r4, pc}
 80011c8:	ffff0000 	.word	0xffff0000

080011cc <HAL_I2C_ErrorCallback>:
{
 80011cc:	4770      	bx	lr

080011ce <HAL_I2C_AbortCpltCallback>:
{
 80011ce:	4770      	bx	lr

080011d0 <I2C_ITError>:
{
 80011d0:	b510      	push	{r4, lr}
 80011d2:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80011da:	4a3a      	ldr	r2, [pc, #232]	; (80012c4 <I2C_ITError+0xf4>)
 80011dc:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80011de:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80011e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80011e2:	4319      	orrs	r1, r3
 80011e4:	6441      	str	r1, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 80011e6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b28      	cmp	r3, #40	; 0x28
 80011ee:	d018      	beq.n	8001222 <I2C_ITError+0x52>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80011f0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80011f4:	b2db      	uxtb	r3, r3
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 80011f6:	2b29      	cmp	r3, #41	; 0x29
 80011f8:	d013      	beq.n	8001222 <I2C_ITError+0x52>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80011fa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80011fe:	b2db      	uxtb	r3, r3
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001200:	2b2a      	cmp	r3, #42	; 0x2a
 8001202:	d00e      	beq.n	8001222 <I2C_ITError+0x52>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001204:	2107      	movs	r1, #7
 8001206:	f7ff fe8a 	bl	8000f1e <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800120a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b60      	cmp	r3, #96	; 0x60
 8001212:	d002      	beq.n	800121a <I2C_ITError+0x4a>
      hi2c->State         = HAL_I2C_STATE_READY;
 8001214:	2320      	movs	r3, #32
 8001216:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800121a:	2300      	movs	r3, #0
 800121c:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800121e:	6363      	str	r3, [r4, #52]	; 0x34
 8001220:	e00a      	b.n	8001238 <I2C_ITError+0x68>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001222:	2103      	movs	r1, #3
 8001224:	4620      	mov	r0, r4
 8001226:	f7ff fe7a 	bl	8000f1e <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800122a:	2328      	movs	r3, #40	; 0x28
 800122c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001230:	2300      	movs	r3, #0
 8001232:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <I2C_ITError+0xf8>)
 8001236:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8001240:	d10f      	bne.n	8001262 <I2C_ITError+0x92>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001248:	d11e      	bne.n	8001288 <I2C_ITError+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800124a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b60      	cmp	r3, #96	; 0x60
 8001252:	d02c      	beq.n	80012ae <I2C_ITError+0xde>
    __HAL_UNLOCK(hi2c);
 8001254:	2300      	movs	r3, #0
 8001256:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800125a:	4620      	mov	r0, r4
 800125c:	f7ff ffb6 	bl	80011cc <HAL_I2C_ErrorCallback>
 8001260:	bd10      	pop	{r4, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001268:	601a      	str	r2, [r3, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800126a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800126c:	4a17      	ldr	r2, [pc, #92]	; (80012cc <I2C_ITError+0xfc>)
 800126e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8001270:	2300      	movs	r3, #0
 8001272:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001276:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001278:	f7ff fd3d 	bl	8000cf6 <HAL_DMA_Abort_IT>
 800127c:	2800      	cmp	r0, #0
 800127e:	d0ef      	beq.n	8001260 <I2C_ITError+0x90>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001280:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001282:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001284:	4798      	blx	r3
 8001286:	bd10      	pop	{r4, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800128e:	601a      	str	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001290:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <I2C_ITError+0xfc>)
 8001294:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8001296:	2300      	movs	r3, #0
 8001298:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800129c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800129e:	f7ff fd2a 	bl	8000cf6 <HAL_DMA_Abort_IT>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	d0dc      	beq.n	8001260 <I2C_ITError+0x90>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80012a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80012a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80012aa:	4798      	blx	r3
 80012ac:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80012ae:	2320      	movs	r3, #32
 80012b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012b4:	2300      	movs	r3, #0
 80012b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80012ba:	4620      	mov	r0, r4
 80012bc:	f7ff ff87 	bl	80011ce <HAL_I2C_AbortCpltCallback>
 80012c0:	bd10      	pop	{r4, pc}
 80012c2:	bf00      	nop
 80012c4:	ffff0000 	.word	0xffff0000
 80012c8:	080013f9 	.word	0x080013f9
 80012cc:	080015b3 	.word	0x080015b3

080012d0 <I2C_ITSlaveCplt>:
{
 80012d0:	b538      	push	{r3, r4, r5, lr}
 80012d2:	4604      	mov	r4, r0
 80012d4:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012d6:	6803      	ldr	r3, [r0, #0]
 80012d8:	2220      	movs	r2, #32
 80012da:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80012dc:	6803      	ldr	r3, [r0, #0]
 80012de:	2208      	movs	r2, #8
 80012e0:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80012e2:	2107      	movs	r1, #7
 80012e4:	f7ff fe1b 	bl	8000f1e <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80012e8:	6822      	ldr	r2, [r4, #0]
 80012ea:	6853      	ldr	r3, [r2, #4]
 80012ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012f0:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 80012f2:	6822      	ldr	r2, [r4, #0]
 80012f4:	6853      	ldr	r3, [r2, #4]
 80012f6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80012fa:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80012fe:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001302:	f023 0301 	bic.w	r3, r3, #1
 8001306:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff fdf7 	bl	8000efc <I2C_Flush_TXDR>
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 800130e:	6822      	ldr	r2, [r4, #0]
 8001310:	6813      	ldr	r3, [r2, #0]
 8001312:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001316:	d103      	bne.n	8001320 <I2C_ITSlaveCplt+0x50>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8001318:	6813      	ldr	r3, [r2, #0]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 800131a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800131e:	d009      	beq.n	8001334 <I2C_ITSlaveCplt+0x64>
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8001320:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b21      	cmp	r3, #33	; 0x21
 8001328:	d03a      	beq.n	80013a0 <I2C_ITSlaveCplt+0xd0>
 800132a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	b29b      	uxth	r3, r3
 8001332:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8001334:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001336:	b29b      	uxth	r3, r3
 8001338:	b11b      	cbz	r3, 8001342 <I2C_ITSlaveCplt+0x72>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800133a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6463      	str	r3, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8001342:	f015 0f04 	tst.w	r5, #4
 8001346:	d011      	beq.n	800136c <I2C_ITSlaveCplt+0x9c>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800134a:	1c59      	adds	r1, r3, #1
 800134c:	6261      	str	r1, [r4, #36]	; 0x24
 800134e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001350:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8001352:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001354:	b153      	cbz	r3, 800136c <I2C_ITSlaveCplt+0x9c>
      hi2c->XferSize--;
 8001356:	3b01      	subs	r3, #1
 8001358:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800135a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800135c:	b29b      	uxth	r3, r3
 800135e:	3b01      	subs	r3, #1
 8001360:	b29b      	uxth	r3, r3
 8001362:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001364:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 800136c:	2300      	movs	r3, #0
 800136e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001374:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001376:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001378:	b9bb      	cbnz	r3, 80013aa <I2C_ITSlaveCplt+0xda>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800137a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800137c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001380:	d121      	bne.n	80013c6 <I2C_ITSlaveCplt+0xf6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001382:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b22      	cmp	r3, #34	; 0x22
 800138a:	d028      	beq.n	80013de <I2C_ITSlaveCplt+0x10e>
    hi2c->State = HAL_I2C_STATE_READY;
 800138c:	2320      	movs	r3, #32
 800138e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001392:	2300      	movs	r3, #0
 8001394:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001398:	4620      	mov	r0, r4
 800139a:	f7ff fe65 	bl	8001068 <HAL_I2C_SlaveTxCpltCallback>
 800139e:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 80013a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	e7c3      	b.n	8001332 <I2C_ITSlaveCplt+0x62>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80013aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80013ac:	4620      	mov	r0, r4
 80013ae:	f7ff ff0f 	bl	80011d0 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80013b2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b28      	cmp	r3, #40	; 0x28
 80013ba:	d1f0      	bne.n	800139e <I2C_ITSlaveCplt+0xce>
      I2C_ITListenCplt(hi2c, ITFlags);
 80013bc:	4629      	mov	r1, r5
 80013be:	4620      	mov	r0, r4
 80013c0:	f7ff fed2 	bl	8001168 <I2C_ITListenCplt>
 80013c4:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <I2C_ITSlaveCplt+0x124>)
 80013c8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80013ca:	2320      	movs	r3, #32
 80013cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80013d0:	2300      	movs	r3, #0
 80013d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80013d6:	4620      	mov	r0, r4
 80013d8:	f7ff fec5 	bl	8001166 <HAL_I2C_ListenCpltCallback>
 80013dc:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80013de:	2320      	movs	r3, #32
 80013e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80013e4:	2300      	movs	r3, #0
 80013e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80013ea:	4620      	mov	r0, r4
 80013ec:	f7ff fe3d 	bl	800106a <HAL_I2C_SlaveRxCpltCallback>
 80013f0:	bd38      	pop	{r3, r4, r5, pc}
 80013f2:	bf00      	nop
 80013f4:	ffff0000 	.word	0xffff0000

080013f8 <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 80013f8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	f000 80a0 	beq.w	8001542 <I2C_Slave_ISR_IT+0x14a>
{
 8001402:	b570      	push	{r4, r5, r6, lr}
 8001404:	4616      	mov	r6, r2
 8001406:	460d      	mov	r5, r1
 8001408:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 800140a:	2301      	movs	r3, #1
 800140c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8001410:	f011 0f10 	tst.w	r1, #16
 8001414:	d03f      	beq.n	8001496 <I2C_Slave_ISR_IT+0x9e>
 8001416:	f012 0f10 	tst.w	r2, #16
 800141a:	d03c      	beq.n	8001496 <I2C_Slave_ISR_IT+0x9e>
    if (hi2c->XferCount == 0U)
 800141c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800141e:	b29b      	uxth	r3, r3
 8001420:	bb43      	cbnz	r3, 8001474 <I2C_Slave_ISR_IT+0x7c>
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8001422:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001428:	d010      	beq.n	800144c <I2C_Slave_ISR_IT+0x54>
 800142a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800142c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001430:	d00c      	beq.n	800144c <I2C_Slave_ISR_IT+0x54>
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001432:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001434:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001438:	d004      	beq.n	8001444 <I2C_Slave_ISR_IT+0x4c>
 800143a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b29      	cmp	r3, #41	; 0x29
 8001442:	d00d      	beq.n	8001460 <I2C_Slave_ISR_IT+0x68>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	2210      	movs	r2, #16
 8001448:	61da      	str	r2, [r3, #28]
 800144a:	e01a      	b.n	8001482 <I2C_Slave_ISR_IT+0x8a>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 800144c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001450:	b2db      	uxtb	r3, r3
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8001452:	2b28      	cmp	r3, #40	; 0x28
 8001454:	d1ed      	bne.n	8001432 <I2C_Slave_ISR_IT+0x3a>
        I2C_ITListenCplt(hi2c, ITFlags);
 8001456:	4629      	mov	r1, r5
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff fe85 	bl	8001168 <I2C_ITListenCplt>
 800145e:	e010      	b.n	8001482 <I2C_Slave_ISR_IT+0x8a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	2210      	movs	r2, #16
 8001464:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8001466:	4620      	mov	r0, r4
 8001468:	f7ff fd48 	bl	8000efc <I2C_Flush_TXDR>
        I2C_ITSlaveSequentialCplt(hi2c);
 800146c:	4620      	mov	r0, r4
 800146e:	f7ff fdfd 	bl	800106c <I2C_ITSlaveSequentialCplt>
 8001472:	e006      	b.n	8001482 <I2C_Slave_ISR_IT+0x8a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001474:	6803      	ldr	r3, [r0, #0]
 8001476:	2210      	movs	r2, #16
 8001478:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800147a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6443      	str	r3, [r0, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8001482:	f015 0f20 	tst.w	r5, #32
 8001486:	d002      	beq.n	800148e <I2C_Slave_ISR_IT+0x96>
 8001488:	f016 0f20 	tst.w	r6, #32
 800148c:	d154      	bne.n	8001538 <I2C_Slave_ISR_IT+0x140>
  __HAL_UNLOCK(hi2c);
 800148e:	2000      	movs	r0, #0
 8001490:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8001494:	bd70      	pop	{r4, r5, r6, pc}
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8001496:	f015 0f04 	tst.w	r5, #4
 800149a:	d01f      	beq.n	80014dc <I2C_Slave_ISR_IT+0xe4>
 800149c:	f016 0f04 	tst.w	r6, #4
 80014a0:	d01c      	beq.n	80014dc <I2C_Slave_ISR_IT+0xe4>
    if (hi2c->XferCount > 0U)
 80014a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b16b      	cbz	r3, 80014c4 <I2C_Slave_ISR_IT+0xcc>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80014a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	6262      	str	r2, [r4, #36]	; 0x24
 80014ae:	6822      	ldr	r2, [r4, #0]
 80014b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014b2:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80014b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80014b6:	3b01      	subs	r3, #1
 80014b8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80014ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014bc:	b29b      	uxth	r3, r3
 80014be:	3b01      	subs	r3, #1
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80014c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1da      	bne.n	8001482 <I2C_Slave_ISR_IT+0x8a>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 80014cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 80014ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80014d2:	d0d6      	beq.n	8001482 <I2C_Slave_ISR_IT+0x8a>
      I2C_ITSlaveSequentialCplt(hi2c);
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7ff fdc9 	bl	800106c <I2C_ITSlaveSequentialCplt>
 80014da:	e7d2      	b.n	8001482 <I2C_Slave_ISR_IT+0x8a>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 80014dc:	f015 0f08 	tst.w	r5, #8
 80014e0:	d002      	beq.n	80014e8 <I2C_Slave_ISR_IT+0xf0>
 80014e2:	f016 0f08 	tst.w	r6, #8
 80014e6:	d117      	bne.n	8001518 <I2C_Slave_ISR_IT+0x120>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 80014e8:	f015 0f02 	tst.w	r5, #2
 80014ec:	d0c9      	beq.n	8001482 <I2C_Slave_ISR_IT+0x8a>
 80014ee:	f016 0f02 	tst.w	r6, #2
 80014f2:	d0c6      	beq.n	8001482 <I2C_Slave_ISR_IT+0x8a>
    if (hi2c->XferCount > 0U)
 80014f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	b19b      	cbz	r3, 8001522 <I2C_Slave_ISR_IT+0x12a>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80014fa:	6822      	ldr	r2, [r4, #0]
 80014fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014fe:	1c59      	adds	r1, r3, #1
 8001500:	6261      	str	r1, [r4, #36]	; 0x24
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001506:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001508:	b29b      	uxth	r3, r3
 800150a:	3b01      	subs	r3, #1
 800150c:	b29b      	uxth	r3, r3
 800150e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001510:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001512:	3b01      	subs	r3, #1
 8001514:	8523      	strh	r3, [r4, #40]	; 0x28
 8001516:	e7b4      	b.n	8001482 <I2C_Slave_ISR_IT+0x8a>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001518:	4629      	mov	r1, r5
 800151a:	4620      	mov	r0, r4
 800151c:	f7ff fdd5 	bl	80010ca <I2C_ITAddrCplt>
 8001520:	e7af      	b.n	8001482 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 8001522:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001528:	d002      	beq.n	8001530 <I2C_Slave_ISR_IT+0x138>
 800152a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1a8      	bne.n	8001482 <I2C_Slave_ISR_IT+0x8a>
        I2C_ITSlaveSequentialCplt(hi2c);
 8001530:	4620      	mov	r0, r4
 8001532:	f7ff fd9b 	bl	800106c <I2C_ITSlaveSequentialCplt>
 8001536:	e7a4      	b.n	8001482 <I2C_Slave_ISR_IT+0x8a>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001538:	4629      	mov	r1, r5
 800153a:	4620      	mov	r0, r4
 800153c:	f7ff fec8 	bl	80012d0 <I2C_ITSlaveCplt>
 8001540:	e7a5      	b.n	800148e <I2C_Slave_ISR_IT+0x96>
  __HAL_LOCK(hi2c);
 8001542:	2002      	movs	r0, #2
 8001544:	4770      	bx	lr

08001546 <HAL_I2C_ER_IRQHandler>:
{
 8001546:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001548:	6802      	ldr	r2, [r0, #0]
 800154a:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800154c:	6811      	ldr	r1, [r2, #0]
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 800154e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001552:	d009      	beq.n	8001568 <HAL_I2C_ER_IRQHandler+0x22>
 8001554:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001558:	d006      	beq.n	8001568 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800155a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800155c:	f044 0401 	orr.w	r4, r4, #1
 8001560:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001562:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001566:	61d4      	str	r4, [r2, #28]
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001568:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800156c:	d00a      	beq.n	8001584 <HAL_I2C_ER_IRQHandler+0x3e>
 800156e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001572:	d007      	beq.n	8001584 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001574:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001576:	f042 0208 	orr.w	r2, r2, #8
 800157a:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800157c:	6802      	ldr	r2, [r0, #0]
 800157e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001582:	61d4      	str	r4, [r2, #28]
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001584:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001588:	d00a      	beq.n	80015a0 <HAL_I2C_ER_IRQHandler+0x5a>
 800158a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800158e:	d007      	beq.n	80015a0 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001590:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001598:	6803      	ldr	r3, [r0, #0]
 800159a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159e:	61da      	str	r2, [r3, #28]
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80015a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80015a2:	f013 0f0b 	tst.w	r3, #11
 80015a6:	d100      	bne.n	80015aa <HAL_I2C_ER_IRQHandler+0x64>
 80015a8:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80015aa:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80015ac:	f7ff fe10 	bl	80011d0 <I2C_ITError>
}
 80015b0:	e7fa      	b.n	80015a8 <HAL_I2C_ER_IRQHandler+0x62>

080015b2 <I2C_DMAAbort>:
{
 80015b2:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80015b6:	6802      	ldr	r2, [r0, #0]
 80015b8:	6853      	ldr	r3, [r2, #4]
 80015ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015be:	6053      	str	r3, [r2, #4]
  hi2c->hdmatx->XferAbortCallback = NULL;
 80015c0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80015c2:	2300      	movs	r3, #0
 80015c4:	6353      	str	r3, [r2, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 80015c6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80015c8:	6353      	str	r3, [r2, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80015ca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b60      	cmp	r3, #96	; 0x60
 80015d2:	d002      	beq.n	80015da <I2C_DMAAbort+0x28>
    HAL_I2C_ErrorCallback(hi2c);
 80015d4:	f7ff fdfa 	bl	80011cc <HAL_I2C_ErrorCallback>
 80015d8:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80015da:	2320      	movs	r3, #32
 80015dc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80015e0:	f7ff fdf5 	bl	80011ce <HAL_I2C_AbortCpltCallback>
 80015e4:	bd08      	pop	{r3, pc}

080015e6 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b20      	cmp	r3, #32
 80015ee:	d001      	beq.n	80015f4 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80015f0:	2002      	movs	r0, #2
 80015f2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80015f4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d020      	beq.n	800163e <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80015fc:	2301      	movs	r3, #1
 80015fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001602:	2324      	movs	r3, #36	; 0x24
 8001604:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001608:	6802      	ldr	r2, [r0, #0]
 800160a:	6813      	ldr	r3, [r2, #0]
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001612:	6802      	ldr	r2, [r0, #0]
 8001614:	6813      	ldr	r3, [r2, #0]
 8001616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800161a:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800161c:	6802      	ldr	r2, [r0, #0]
 800161e:	6813      	ldr	r3, [r2, #0]
 8001620:	4319      	orrs	r1, r3
 8001622:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001624:	6802      	ldr	r2, [r0, #0]
 8001626:	6813      	ldr	r3, [r2, #0]
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800162e:	2320      	movs	r3, #32
 8001630:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001634:	2300      	movs	r3, #0
 8001636:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 800163a:	4618      	mov	r0, r3
 800163c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800163e:	2002      	movs	r0, #2
  }
}
 8001640:	4770      	bx	lr

08001642 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001642:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b20      	cmp	r3, #32
 800164a:	d001      	beq.n	8001650 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800164c:	2002      	movs	r0, #2
 800164e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001650:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001654:	2b01      	cmp	r3, #1
 8001656:	d01e      	beq.n	8001696 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001658:	2301      	movs	r3, #1
 800165a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800165e:	2324      	movs	r3, #36	; 0x24
 8001660:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001664:	6802      	ldr	r2, [r0, #0]
 8001666:	6813      	ldr	r3, [r2, #0]
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800166e:	6802      	ldr	r2, [r0, #0]
 8001670:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001672:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8001676:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 800167a:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800167c:	6802      	ldr	r2, [r0, #0]
 800167e:	6813      	ldr	r3, [r2, #0]
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001686:	2320      	movs	r3, #32
 8001688:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800168c:	2300      	movs	r3, #0
 800168e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8001692:	4618      	mov	r0, r3
 8001694:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001696:	2002      	movs	r0, #2
  }
}
 8001698:	4770      	bx	lr
	...

0800169c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800169c:	b570      	push	{r4, r5, r6, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a2:	6803      	ldr	r3, [r0, #0]
 80016a4:	f013 0f01 	tst.w	r3, #1
 80016a8:	d063      	beq.n	8001772 <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016aa:	4bb5      	ldr	r3, [pc, #724]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d046      	beq.n	8001744 <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b6:	4bb2      	ldr	r3, [pc, #712]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d03b      	beq.n	800173a <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c2:	6863      	ldr	r3, [r4, #4]
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	f000 808e 	beq.w	80017e8 <HAL_RCC_OscConfig+0x14c>
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f040 8091 	bne.w	80017f4 <HAL_RCC_OscConfig+0x158>
 80016d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016d6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016e8:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016ea:	4aa5      	ldr	r2, [pc, #660]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80016ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80016ee:	f023 030f 	bic.w	r3, r3, #15
 80016f2:	68a1      	ldr	r1, [r4, #8]
 80016f4:	430b      	orrs	r3, r1
 80016f6:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f8:	6863      	ldr	r3, [r4, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8094 	beq.w	8001828 <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7fe fdfe 	bl	8000300 <HAL_GetTick>
 8001704:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800170a:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	4b9c      	ldr	r3, [pc, #624]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 8001710:	6819      	ldr	r1, [r3, #0]
 8001712:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	2201      	movs	r2, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	4219      	tst	r1, r3
 800172a:	d122      	bne.n	8001772 <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800172c:	f7fe fde8 	bl	8000300 <HAL_GetTick>
 8001730:	1b40      	subs	r0, r0, r5
 8001732:	2864      	cmp	r0, #100	; 0x64
 8001734:	d9e7      	bls.n	8001706 <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 8001736:	2003      	movs	r0, #3
 8001738:	e2ab      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800173a:	4b91      	ldr	r3, [pc, #580]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001742:	d0be      	beq.n	80016c2 <HAL_RCC_OscConfig+0x26>
 8001744:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001748:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	4b8c      	ldr	r3, [pc, #560]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 800174e:	6819      	ldr	r1, [r3, #0]
 8001750:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	fab3 f383 	clz	r3, r3
 800175c:	f003 031f 	and.w	r3, r3, #31
 8001760:	2201      	movs	r2, #1
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	4219      	tst	r1, r3
 8001768:	d003      	beq.n	8001772 <HAL_RCC_OscConfig+0xd6>
 800176a:	6863      	ldr	r3, [r4, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 8289 	beq.w	8001c84 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	f013 0f02 	tst.w	r3, #2
 8001778:	f000 809c 	beq.w	80018b4 <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800177c:	4b80      	ldr	r3, [pc, #512]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f013 0f0c 	tst.w	r3, #12
 8001784:	d072      	beq.n	800186c <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001786:	4b7e      	ldr	r3, [pc, #504]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b08      	cmp	r3, #8
 8001790:	d067      	beq.n	8001862 <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001792:	6923      	ldr	r3, [r4, #16]
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 80cb 	beq.w	8001930 <HAL_RCC_OscConfig+0x294>
 800179a:	2201      	movs	r2, #1
 800179c:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a0:	fab3 f383 	clz	r3, r3
 80017a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7fe fda6 	bl	8000300 <HAL_GetTick>
 80017b4:	4605      	mov	r5, r0
 80017b6:	2302      	movs	r3, #2
 80017b8:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017bc:	4b70      	ldr	r3, [pc, #448]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80017be:	6819      	ldr	r1, [r3, #0]
 80017c0:	2302      	movs	r3, #2
 80017c2:	fa93 f3a3 	rbit	r3, r3
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	2201      	movs	r2, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	4219      	tst	r1, r3
 80017d6:	f040 809c 	bne.w	8001912 <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017da:	f7fe fd91 	bl	8000300 <HAL_GetTick>
 80017de:	1b40      	subs	r0, r0, r5
 80017e0:	2802      	cmp	r0, #2
 80017e2:	d9e8      	bls.n	80017b6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80017e4:	2003      	movs	r0, #3
 80017e6:	e254      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e8:	4a65      	ldr	r2, [pc, #404]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80017ea:	6813      	ldr	r3, [r2, #0]
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e77a      	b.n	80016ea <HAL_RCC_OscConfig+0x4e>
 80017f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017f8:	d009      	beq.n	800180e <HAL_RCC_OscConfig+0x172>
 80017fa:	4b61      	ldr	r3, [pc, #388]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	e76d      	b.n	80016ea <HAL_RCC_OscConfig+0x4e>
 800180e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001812:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	e760      	b.n	80016ea <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8001828:	f7fe fd6a 	bl	8000300 <HAL_GetTick>
 800182c:	4605      	mov	r5, r0
 800182e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001832:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001836:	4b52      	ldr	r3, [pc, #328]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 8001838:	6819      	ldr	r1, [r3, #0]
 800183a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	fab3 f383 	clz	r3, r3
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	2201      	movs	r2, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	4219      	tst	r1, r3
 8001852:	d08e      	beq.n	8001772 <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001854:	f7fe fd54 	bl	8000300 <HAL_GetTick>
 8001858:	1b40      	subs	r0, r0, r5
 800185a:	2864      	cmp	r0, #100	; 0x64
 800185c:	d9e7      	bls.n	800182e <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 800185e:	2003      	movs	r0, #3
 8001860:	e217      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001862:	4b47      	ldr	r3, [pc, #284]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800186a:	d192      	bne.n	8001792 <HAL_RCC_OscConfig+0xf6>
 800186c:	2302      	movs	r3, #2
 800186e:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	4b43      	ldr	r3, [pc, #268]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 8001874:	6819      	ldr	r1, [r3, #0]
 8001876:	2302      	movs	r3, #2
 8001878:	fa93 f3a3 	rbit	r3, r3
 800187c:	fab3 f383 	clz	r3, r3
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	2201      	movs	r2, #1
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	4219      	tst	r1, r3
 800188c:	d004      	beq.n	8001898 <HAL_RCC_OscConfig+0x1fc>
 800188e:	6923      	ldr	r3, [r4, #16]
 8001890:	4293      	cmp	r3, r2
 8001892:	d001      	beq.n	8001898 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 8001894:	2001      	movs	r0, #1
 8001896:	e1fc      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4839      	ldr	r0, [pc, #228]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 800189a:	6803      	ldr	r3, [r0, #0]
 800189c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018a0:	6961      	ldr	r1, [r4, #20]
 80018a2:	22f8      	movs	r2, #248	; 0xf8
 80018a4:	fa92 f2a2 	rbit	r2, r2
 80018a8:	fab2 f282 	clz	r2, r2
 80018ac:	fa01 f202 	lsl.w	r2, r1, r2
 80018b0:	4313      	orrs	r3, r2
 80018b2:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	f013 0f08 	tst.w	r3, #8
 80018ba:	f000 808d 	beq.w	80019d8 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018be:	69a3      	ldr	r3, [r4, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d061      	beq.n	8001988 <HAL_RCC_OscConfig+0x2ec>
 80018c4:	2101      	movs	r1, #1
 80018c6:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ca:	fab2 f282 	clz	r2, r2
 80018ce:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <HAL_RCC_OscConfig+0x2e8>)
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d6:	f7fe fd13 	bl	8000300 <HAL_GetTick>
 80018da:	4605      	mov	r5, r0
 80018dc:	2302      	movs	r3, #2
 80018de:	fa93 f2a3 	rbit	r2, r3
 80018e2:	fa93 f2a3 	rbit	r2, r3
 80018e6:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ea:	4a25      	ldr	r2, [pc, #148]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80018ec:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	fab3 f383 	clz	r3, r3
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	2201      	movs	r2, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	4219      	tst	r1, r3
 8001902:	d169      	bne.n	80019d8 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001904:	f7fe fcfc 	bl	8000300 <HAL_GetTick>
 8001908:	1b40      	subs	r0, r0, r5
 800190a:	2802      	cmp	r0, #2
 800190c:	d9e6      	bls.n	80018dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800190e:	2003      	movs	r0, #3
 8001910:	e1bf      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	481b      	ldr	r0, [pc, #108]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 8001914:	6803      	ldr	r3, [r0, #0]
 8001916:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800191a:	6961      	ldr	r1, [r4, #20]
 800191c:	22f8      	movs	r2, #248	; 0xf8
 800191e:	fa92 f2a2 	rbit	r2, r2
 8001922:	fab2 f282 	clz	r2, r2
 8001926:	fa01 f202 	lsl.w	r2, r1, r2
 800192a:	4313      	orrs	r3, r2
 800192c:	6003      	str	r3, [r0, #0]
 800192e:	e7c1      	b.n	80018b4 <HAL_RCC_OscConfig+0x218>
 8001930:	2301      	movs	r3, #1
 8001932:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800193e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001948:	f7fe fcda 	bl	8000300 <HAL_GetTick>
 800194c:	4605      	mov	r5, r0
 800194e:	2302      	movs	r3, #2
 8001950:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 8001956:	6819      	ldr	r1, [r3, #0]
 8001958:	2302      	movs	r3, #2
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	2201      	movs	r2, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	4219      	tst	r1, r3
 800196e:	d0a1      	beq.n	80018b4 <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001970:	f7fe fcc6 	bl	8000300 <HAL_GetTick>
 8001974:	1b40      	subs	r0, r0, r5
 8001976:	2802      	cmp	r0, #2
 8001978:	d9e9      	bls.n	800194e <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 800197a:	2003      	movs	r0, #3
 800197c:	e189      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
 8001984:	10908120 	.word	0x10908120
 8001988:	2201      	movs	r2, #1
 800198a:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198e:	fab2 f282 	clz	r2, r2
 8001992:	4bc1      	ldr	r3, [pc, #772]	; (8001c98 <HAL_RCC_OscConfig+0x5fc>)
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199c:	f7fe fcb0 	bl	8000300 <HAL_GetTick>
 80019a0:	4605      	mov	r5, r0
 80019a2:	2302      	movs	r3, #2
 80019a4:	fa93 f2a3 	rbit	r2, r3
 80019a8:	fa93 f2a3 	rbit	r2, r3
 80019ac:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b0:	4aba      	ldr	r2, [pc, #744]	; (8001c9c <HAL_RCC_OscConfig+0x600>)
 80019b2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	fab3 f383 	clz	r3, r3
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	2201      	movs	r2, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	4219      	tst	r1, r3
 80019c8:	d006      	beq.n	80019d8 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ca:	f7fe fc99 	bl	8000300 <HAL_GetTick>
 80019ce:	1b40      	subs	r0, r0, r5
 80019d0:	2802      	cmp	r0, #2
 80019d2:	d9e6      	bls.n	80019a2 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 80019d4:	2003      	movs	r0, #3
 80019d6:	e15c      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d8:	6823      	ldr	r3, [r4, #0]
 80019da:	f013 0f04 	tst.w	r3, #4
 80019de:	f000 80b3 	beq.w	8001b48 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e2:	4bae      	ldr	r3, [pc, #696]	; (8001c9c <HAL_RCC_OscConfig+0x600>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80019ea:	d126      	bne.n	8001a3a <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ec:	4bab      	ldr	r3, [pc, #684]	; (8001c9c <HAL_RCC_OscConfig+0x600>)
 80019ee:	69da      	ldr	r2, [r3, #28]
 80019f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019f4:	61da      	str	r2, [r3, #28]
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a00:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a02:	4ba7      	ldr	r3, [pc, #668]	; (8001ca0 <HAL_RCC_OscConfig+0x604>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a0a:	d018      	beq.n	8001a3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0c:	68e3      	ldr	r3, [r4, #12]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d029      	beq.n	8001a66 <HAL_RCC_OscConfig+0x3ca>
 8001a12:	bb73      	cbnz	r3, 8001a72 <HAL_RCC_OscConfig+0x3d6>
 8001a14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a18:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001a1c:	6a1a      	ldr	r2, [r3, #32]
 8001a1e:	f022 0201 	bic.w	r2, r2, #1
 8001a22:	621a      	str	r2, [r3, #32]
 8001a24:	6a1a      	ldr	r2, [r3, #32]
 8001a26:	f022 0204 	bic.w	r2, r2, #4
 8001a2a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a2c:	68e3      	ldr	r3, [r4, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d05d      	beq.n	8001aee <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a32:	f7fe fc65 	bl	8000300 <HAL_GetTick>
 8001a36:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a38:	e047      	b.n	8001aca <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 8001a3a:	2500      	movs	r5, #0
 8001a3c:	e7e1      	b.n	8001a02 <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a3e:	4a98      	ldr	r2, [pc, #608]	; (8001ca0 <HAL_RCC_OscConfig+0x604>)
 8001a40:	6813      	ldr	r3, [r2, #0]
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001a48:	f7fe fc5a 	bl	8000300 <HAL_GetTick>
 8001a4c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4e:	4b94      	ldr	r3, [pc, #592]	; (8001ca0 <HAL_RCC_OscConfig+0x604>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a56:	d1d9      	bne.n	8001a0c <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a58:	f7fe fc52 	bl	8000300 <HAL_GetTick>
 8001a5c:	1b80      	subs	r0, r0, r6
 8001a5e:	2864      	cmp	r0, #100	; 0x64
 8001a60:	d9f5      	bls.n	8001a4e <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8001a62:	2003      	movs	r0, #3
 8001a64:	e115      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a66:	4a8d      	ldr	r2, [pc, #564]	; (8001c9c <HAL_RCC_OscConfig+0x600>)
 8001a68:	6a13      	ldr	r3, [r2, #32]
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6213      	str	r3, [r2, #32]
 8001a70:	e7dc      	b.n	8001a2c <HAL_RCC_OscConfig+0x390>
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d009      	beq.n	8001a8a <HAL_RCC_OscConfig+0x3ee>
 8001a76:	4b89      	ldr	r3, [pc, #548]	; (8001c9c <HAL_RCC_OscConfig+0x600>)
 8001a78:	6a1a      	ldr	r2, [r3, #32]
 8001a7a:	f022 0201 	bic.w	r2, r2, #1
 8001a7e:	621a      	str	r2, [r3, #32]
 8001a80:	6a1a      	ldr	r2, [r3, #32]
 8001a82:	f022 0204 	bic.w	r2, r2, #4
 8001a86:	621a      	str	r2, [r3, #32]
 8001a88:	e7d0      	b.n	8001a2c <HAL_RCC_OscConfig+0x390>
 8001a8a:	4b84      	ldr	r3, [pc, #528]	; (8001c9c <HAL_RCC_OscConfig+0x600>)
 8001a8c:	6a1a      	ldr	r2, [r3, #32]
 8001a8e:	f042 0204 	orr.w	r2, r2, #4
 8001a92:	621a      	str	r2, [r3, #32]
 8001a94:	6a1a      	ldr	r2, [r3, #32]
 8001a96:	f042 0201 	orr.w	r2, r2, #1
 8001a9a:	621a      	str	r2, [r3, #32]
 8001a9c:	e7c6      	b.n	8001a2c <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9e:	4b7f      	ldr	r3, [pc, #508]	; (8001c9c <HAL_RCC_OscConfig+0x600>)
 8001aa0:	6a19      	ldr	r1, [r3, #32]
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	fa93 f3a3 	rbit	r3, r3
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	4219      	tst	r1, r3
 8001ab8:	d145      	bne.n	8001b46 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aba:	f7fe fc21 	bl	8000300 <HAL_GetTick>
 8001abe:	1b80      	subs	r0, r0, r6
 8001ac0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ac4:	4298      	cmp	r0, r3
 8001ac6:	f200 80df 	bhi.w	8001c88 <HAL_RCC_OscConfig+0x5ec>
 8001aca:	2302      	movs	r3, #2
 8001acc:	fa93 f2a3 	rbit	r2, r3
 8001ad0:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad4:	fab3 f383 	clz	r3, r3
 8001ad8:	095b      	lsrs	r3, r3, #5
 8001ada:	f043 0302 	orr.w	r3, r3, #2
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d0dd      	beq.n	8001a9e <HAL_RCC_OscConfig+0x402>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	4b6c      	ldr	r3, [pc, #432]	; (8001c9c <HAL_RCC_OscConfig+0x600>)
 8001aea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001aec:	e7d9      	b.n	8001aa2 <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aee:	f7fe fc07 	bl	8000300 <HAL_GetTick>
 8001af2:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af4:	e015      	b.n	8001b22 <HAL_RCC_OscConfig+0x486>
 8001af6:	4b69      	ldr	r3, [pc, #420]	; (8001c9c <HAL_RCC_OscConfig+0x600>)
 8001af8:	6a19      	ldr	r1, [r3, #32]
 8001afa:	2302      	movs	r3, #2
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	2201      	movs	r2, #1
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	4219      	tst	r1, r3
 8001b10:	d019      	beq.n	8001b46 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7fe fbf5 	bl	8000300 <HAL_GetTick>
 8001b16:	1b80      	subs	r0, r0, r6
 8001b18:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b1c:	4298      	cmp	r0, r3
 8001b1e:	f200 80b5 	bhi.w	8001c8c <HAL_RCC_OscConfig+0x5f0>
 8001b22:	2302      	movs	r3, #2
 8001b24:	fa93 f2a3 	rbit	r2, r3
 8001b28:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	095b      	lsrs	r3, r3, #5
 8001b32:	f043 0302 	orr.w	r3, r3, #2
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d0dd      	beq.n	8001af6 <HAL_RCC_OscConfig+0x45a>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <HAL_RCC_OscConfig+0x600>)
 8001b42:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b44:	e7d9      	b.n	8001afa <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b46:	bbb5      	cbnz	r5, 8001bb6 <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b48:	69e3      	ldr	r3, [r4, #28]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80a0 	beq.w	8001c90 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b50:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <HAL_RCC_OscConfig+0x600>)
 8001b52:	6852      	ldr	r2, [r2, #4]
 8001b54:	f002 020c 	and.w	r2, r2, #12
 8001b58:	2a08      	cmp	r2, #8
 8001b5a:	f000 80a3 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d02f      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x526>
 8001b62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b66:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7fe fbc0 	bl	8000300 <HAL_GetTick>
 8001b80:	4604      	mov	r4, r0
 8001b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b86:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8a:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <HAL_RCC_OscConfig+0x600>)
 8001b8c:	6819      	ldr	r1, [r3, #0]
 8001b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	4219      	tst	r1, r3
 8001ba6:	d06b      	beq.n	8001c80 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7fe fbaa 	bl	8000300 <HAL_GetTick>
 8001bac:	1b00      	subs	r0, r0, r4
 8001bae:	2802      	cmp	r0, #2
 8001bb0:	d9e7      	bls.n	8001b82 <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 8001bb2:	2003      	movs	r0, #3
 8001bb4:	e06d      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb6:	4a39      	ldr	r2, [pc, #228]	; (8001c9c <HAL_RCC_OscConfig+0x600>)
 8001bb8:	69d3      	ldr	r3, [r2, #28]
 8001bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	61d3      	str	r3, [r2, #28]
 8001bc0:	e7c2      	b.n	8001b48 <HAL_RCC_OscConfig+0x4ac>
 8001bc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bc6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bdc:	f7fe fb90 	bl	8000300 <HAL_GetTick>
 8001be0:	4605      	mov	r5, r0
 8001be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be6:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bea:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <HAL_RCC_OscConfig+0x600>)
 8001bec:	6819      	ldr	r1, [r3, #0]
 8001bee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bf2:	fa93 f3a3 	rbit	r3, r3
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	2201      	movs	r2, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	4219      	tst	r1, r3
 8001c06:	d006      	beq.n	8001c16 <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c08:	f7fe fb7a 	bl	8000300 <HAL_GetTick>
 8001c0c:	1b40      	subs	r0, r0, r5
 8001c0e:	2802      	cmp	r0, #2
 8001c10:	d9e7      	bls.n	8001be2 <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 8001c12:	2003      	movs	r0, #3
 8001c14:	e03d      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c16:	4921      	ldr	r1, [pc, #132]	; (8001c9c <HAL_RCC_OscConfig+0x600>)
 8001c18:	684b      	ldr	r3, [r1, #4]
 8001c1a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001c1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c20:	6a20      	ldr	r0, [r4, #32]
 8001c22:	4302      	orrs	r2, r0
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
 8001c28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c2c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	2201      	movs	r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c42:	f7fe fb5d 	bl	8000300 <HAL_GetTick>
 8001c46:	4604      	mov	r4, r0
 8001c48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c4c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_RCC_OscConfig+0x600>)
 8001c52:	6819      	ldr	r1, [r3, #0]
 8001c54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	2201      	movs	r2, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	4219      	tst	r1, r3
 8001c6c:	d106      	bne.n	8001c7c <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6e:	f7fe fb47 	bl	8000300 <HAL_GetTick>
 8001c72:	1b00      	subs	r0, r0, r4
 8001c74:	2802      	cmp	r0, #2
 8001c76:	d9e7      	bls.n	8001c48 <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 8001c78:	2003      	movs	r0, #3
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>
 8001c80:	2000      	movs	r0, #0
 8001c82:	e006      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 8001c84:	2001      	movs	r0, #1
 8001c86:	e004      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8001c88:	2003      	movs	r0, #3
 8001c8a:	e002      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 8001c90:	2000      	movs	r0, #0
}
 8001c92:	b002      	add	sp, #8
 8001c94:	bd70      	pop	{r4, r5, r6, pc}
 8001c96:	bf00      	nop
 8001c98:	10908120 	.word	0x10908120
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40007000 	.word	0x40007000
      return HAL_ERROR;
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	e7f4      	b.n	8001c92 <HAL_RCC_OscConfig+0x5f6>

08001ca8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cac:	f003 020c 	and.w	r2, r3, #12
 8001cb0:	2a08      	cmp	r2, #8
 8001cb2:	d124      	bne.n	8001cfe <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001cb4:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8001cb8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001cbc:	fa92 f2a2 	rbit	r2, r2
 8001cc0:	fab2 f282 	clz	r2, r2
 8001cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8001cc8:	490f      	ldr	r1, [pc, #60]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x60>)
 8001cca:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001cce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cd0:	f002 020f 	and.w	r2, r2, #15
 8001cd4:	210f      	movs	r1, #15
 8001cd6:	fa91 f1a1 	rbit	r1, r1
 8001cda:	fab1 f181 	clz	r1, r1
 8001cde:	40ca      	lsrs	r2, r1
 8001ce0:	490a      	ldr	r1, [pc, #40]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x64>)
 8001ce2:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001ce4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ce8:	d103      	bne.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x68>)
 8001cec:	fb03 f000 	mul.w	r0, r3, r0
 8001cf0:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cf8:	fb03 f000 	mul.w	r0, r3, r0
 8001cfc:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	08005f04 	.word	0x08005f04
 8001d0c:	08005f14 	.word	0x08005f14
 8001d10:	003d0900 	.word	0x003d0900
 8001d14:	007a1200 	.word	0x007a1200

08001d18 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d18:	4b70      	ldr	r3, [pc, #448]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	428b      	cmp	r3, r1
 8001d22:	d20c      	bcs.n	8001d3e <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d24:	4a6d      	ldr	r2, [pc, #436]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	6813      	ldr	r3, [r2, #0]
 8001d28:	f023 0307 	bic.w	r3, r3, #7
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d30:	6813      	ldr	r3, [r2, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	4299      	cmp	r1, r3
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	4770      	bx	lr
{
 8001d3e:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d40:	6803      	ldr	r3, [r0, #0]
 8001d42:	f013 0f02 	tst.w	r3, #2
 8001d46:	d006      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d48:	4a65      	ldr	r2, [pc, #404]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d4a:	6853      	ldr	r3, [r2, #4]
 8001d4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d50:	6884      	ldr	r4, [r0, #8]
 8001d52:	4323      	orrs	r3, r4
 8001d54:	6053      	str	r3, [r2, #4]
 8001d56:	460d      	mov	r5, r1
 8001d58:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5a:	6803      	ldr	r3, [r0, #0]
 8001d5c:	f013 0f01 	tst.w	r3, #1
 8001d60:	d07a      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d62:	6843      	ldr	r3, [r0, #4]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d02f      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d042      	beq.n	8001df2 <HAL_RCC_ClockConfig+0xda>
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d72:	4a5b      	ldr	r2, [pc, #364]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d74:	6810      	ldr	r0, [r2, #0]
 8001d76:	2202      	movs	r2, #2
 8001d78:	fa92 f2a2 	rbit	r2, r2
 8001d7c:	fab2 f282 	clz	r2, r2
 8001d80:	f002 021f 	and.w	r2, r2, #31
 8001d84:	2101      	movs	r1, #1
 8001d86:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8a:	4210      	tst	r0, r2
 8001d8c:	f000 80a4 	beq.w	8001ed8 <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d90:	4953      	ldr	r1, [pc, #332]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d92:	684a      	ldr	r2, [r1, #4]
 8001d94:	f022 0203 	bic.w	r2, r2, #3
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001d9c:	f7fe fab0 	bl	8000300 <HAL_GetTick>
 8001da0:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	6863      	ldr	r3, [r4, #4]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d039      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d046      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dac:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f013 0f0c 	tst.w	r3, #12
 8001db4:	d050      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db6:	f7fe faa3 	bl	8000300 <HAL_GetTick>
 8001dba:	1b80      	subs	r0, r0, r6
 8001dbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dc0:	4298      	cmp	r0, r3
 8001dc2:	d9f3      	bls.n	8001dac <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	bd70      	pop	{r4, r5, r6, pc}
 8001dc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dcc:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd0:	4a43      	ldr	r2, [pc, #268]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd2:	6810      	ldr	r0, [r2, #0]
 8001dd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dd8:	fa92 f2a2 	rbit	r2, r2
 8001ddc:	fab2 f282 	clz	r2, r2
 8001de0:	f002 021f 	and.w	r2, r2, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dea:	4210      	tst	r0, r2
 8001dec:	d1d0      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8001dee:	2001      	movs	r0, #1
 8001df0:	bd70      	pop	{r4, r5, r6, pc}
 8001df2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df6:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfa:	4a39      	ldr	r2, [pc, #228]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dfc:	6810      	ldr	r0, [r2, #0]
 8001dfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e02:	fa92 f2a2 	rbit	r2, r2
 8001e06:	fab2 f282 	clz	r2, r2
 8001e0a:	f002 021f 	and.w	r2, r2, #31
 8001e0e:	2101      	movs	r1, #1
 8001e10:	fa01 f202 	lsl.w	r2, r1, r2
 8001e14:	4210      	tst	r0, r2
 8001e16:	d1bb      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8001e18:	2001      	movs	r0, #1
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e1c:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d017      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e28:	f7fe fa6a 	bl	8000300 <HAL_GetTick>
 8001e2c:	1b80      	subs	r0, r0, r6
 8001e2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e32:	4298      	cmp	r0, r3
 8001e34:	d9f2      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 8001e36:	2003      	movs	r0, #3
 8001e38:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e3a:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d008      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e46:	f7fe fa5b 	bl	8000300 <HAL_GetTick>
 8001e4a:	1b80      	subs	r0, r0, r6
 8001e4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e50:	4298      	cmp	r0, r3
 8001e52:	d9f2      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 8001e54:	2003      	movs	r0, #3
 8001e56:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e58:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	429d      	cmp	r5, r3
 8001e62:	d20c      	bcs.n	8001e7e <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e64:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	6813      	ldr	r3, [r2, #0]
 8001e68:	f023 0307 	bic.w	r3, r3, #7
 8001e6c:	432b      	orrs	r3, r5
 8001e6e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e70:	6813      	ldr	r3, [r2, #0]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	429d      	cmp	r5, r3
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 8001e7a:	2001      	movs	r0, #1
}
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	f013 0f04 	tst.w	r3, #4
 8001e84:	d006      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e86:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e88:	6853      	ldr	r3, [r2, #4]
 8001e8a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e8e:	68e1      	ldr	r1, [r4, #12]
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	f013 0f08 	tst.w	r3, #8
 8001e9a:	d007      	beq.n	8001eac <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e9c:	4a10      	ldr	r2, [pc, #64]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e9e:	6853      	ldr	r3, [r2, #4]
 8001ea0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001ea4:	6921      	ldr	r1, [r4, #16]
 8001ea6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001eaa:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001eac:	f7ff fefc 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eb8:	22f0      	movs	r2, #240	; 0xf0
 8001eba:	fa92 f2a2 	rbit	r2, r2
 8001ebe:	fab2 f282 	clz	r2, r2
 8001ec2:	40d3      	lsrs	r3, r2
 8001ec4:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ec6:	5cd3      	ldrb	r3, [r2, r3]
 8001ec8:	40d8      	lsrs	r0, r3
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ecc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7fe f9e6 	bl	80002a0 <HAL_InitTick>
  return HAL_OK;
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001ed8:	2001      	movs	r0, #1
 8001eda:	bd70      	pop	{r4, r5, r6, pc}
 8001edc:	40022000 	.word	0x40022000
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	08005f34 	.word	0x08005f34
 8001ee8:	20000000 	.word	0x20000000

08001eec <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001eec:	4b01      	ldr	r3, [pc, #4]	; (8001ef4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000000 	.word	0x20000000

08001ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001efa:	f7ff fff7 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001efe:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f06:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f0a:	fa92 f2a2 	rbit	r2, r2
 8001f0e:	fab2 f282 	clz	r2, r2
 8001f12:	40d3      	lsrs	r3, r2
 8001f14:	4a02      	ldr	r2, [pc, #8]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f16:	5cd3      	ldrb	r3, [r2, r3]
}    
 8001f18:	40d8      	lsrs	r0, r3
 8001f1a:	bd08      	pop	{r3, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	08005f44 	.word	0x08005f44

08001f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f24:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f26:	f7ff ffe1 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001f32:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001f36:	fa92 f2a2 	rbit	r2, r2
 8001f3a:	fab2 f282 	clz	r2, r2
 8001f3e:	40d3      	lsrs	r3, r2
 8001f40:	4a02      	ldr	r2, [pc, #8]	; (8001f4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f42:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001f44:	40d8      	lsrs	r0, r3
 8001f46:	bd08      	pop	{r3, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	08005f44 	.word	0x08005f44

08001f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f52:	b083      	sub	sp, #12
 8001f54:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f56:	6803      	ldr	r3, [r0, #0]
 8001f58:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001f5c:	d044      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5e:	4b64      	ldr	r3, [pc, #400]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001f66:	d179      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f68:	4b61      	ldr	r3, [pc, #388]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001f6a:	69da      	ldr	r2, [r3, #28]
 8001f6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f70:	61da      	str	r2, [r3, #28]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f7c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7e:	4b5d      	ldr	r3, [pc, #372]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f86:	d06b      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f88:	4b59      	ldr	r3, [pc, #356]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f8c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f90:	d021      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8001f92:	6862      	ldr	r2, [r4, #4]
 8001f94:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d01c      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f9c:	4854      	ldr	r0, [pc, #336]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001f9e:	6a01      	ldr	r1, [r0, #32]
 8001fa0:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8001fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fa8:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fac:	fab2 f282 	clz	r2, r2
 8001fb0:	4f51      	ldr	r7, [pc, #324]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001fb2:	443a      	add	r2, r7
 8001fb4:	0092      	lsls	r2, r2, #2
 8001fb6:	f04f 0e01 	mov.w	lr, #1
 8001fba:	f8c2 e000 	str.w	lr, [r2]
 8001fbe:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	443b      	add	r3, r7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fce:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fd0:	f011 0f01 	tst.w	r1, #1
 8001fd4:	d158      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001fd6:	4a46      	ldr	r2, [pc, #280]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001fd8:	6a13      	ldr	r3, [r2, #32]
 8001fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fde:	6861      	ldr	r1, [r4, #4]
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fe4:	2d00      	cmp	r5, #0
 8001fe6:	d17a      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	f013 0f01 	tst.w	r3, #1
 8001fee:	d006      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ff0:	4a3f      	ldr	r2, [pc, #252]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001ff2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ff4:	f023 0303 	bic.w	r3, r3, #3
 8001ff8:	68a1      	ldr	r1, [r4, #8]
 8001ffa:	430b      	orrs	r3, r1
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ffe:	6823      	ldr	r3, [r4, #0]
 8002000:	f013 0f20 	tst.w	r3, #32
 8002004:	d006      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002006:	4a3a      	ldr	r2, [pc, #232]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002008:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800200a:	f023 0310 	bic.w	r3, r3, #16
 800200e:	68e1      	ldr	r1, [r4, #12]
 8002010:	430b      	orrs	r3, r1
 8002012:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	f013 0f80 	tst.w	r3, #128	; 0x80
 800201a:	d006      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800201c:	4a34      	ldr	r2, [pc, #208]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800201e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002020:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002024:	6921      	ldr	r1, [r4, #16]
 8002026:	430b      	orrs	r3, r1
 8002028:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002030:	d006      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002032:	4a2f      	ldr	r2, [pc, #188]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002034:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002036:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800203a:	6961      	ldr	r1, [r4, #20]
 800203c:	430b      	orrs	r3, r1
 800203e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002046:	d051      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002048:	4a29      	ldr	r2, [pc, #164]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800204a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800204c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002050:	69a1      	ldr	r1, [r4, #24]
 8002052:	430b      	orrs	r3, r1
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002056:	2000      	movs	r0, #0
}
 8002058:	b003      	add	sp, #12
 800205a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 800205c:	2500      	movs	r5, #0
 800205e:	e78e      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002060:	4a24      	ldr	r2, [pc, #144]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002062:	6813      	ldr	r3, [r2, #0]
 8002064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002068:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800206a:	f7fe f949 	bl	8000300 <HAL_GetTick>
 800206e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002078:	d186      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7fe f941 	bl	8000300 <HAL_GetTick>
 800207e:	1b80      	subs	r0, r0, r6
 8002080:	2864      	cmp	r0, #100	; 0x64
 8002082:	d9f5      	bls.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8002084:	2003      	movs	r0, #3
 8002086:	e7e7      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8002088:	f7fe f93a 	bl	8000300 <HAL_GetTick>
 800208c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208e:	e014      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002092:	6a19      	ldr	r1, [r3, #32]
 8002094:	2302      	movs	r3, #2
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	2201      	movs	r2, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	4219      	tst	r1, r3
 80020aa:	d194      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f7fe f928 	bl	8000300 <HAL_GetTick>
 80020b0:	1b80      	subs	r0, r0, r6
 80020b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80020b6:	4298      	cmp	r0, r3
 80020b8:	d816      	bhi.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80020ba:	2302      	movs	r3, #2
 80020bc:	fa93 f2a3 	rbit	r2, r3
 80020c0:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	095b      	lsrs	r3, r3, #5
 80020ca:	f043 0302 	orr.w	r3, r3, #2
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d0de      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80020d2:	2302      	movs	r3, #2
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80020da:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80020dc:	e7da      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020de:	69d3      	ldr	r3, [r2, #28]
 80020e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e4:	61d3      	str	r3, [r2, #28]
 80020e6:	e77f      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 80020e8:	2003      	movs	r0, #3
 80020ea:	e7b5      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 80020ec:	2000      	movs	r0, #0
 80020ee:	e7b3      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40007000 	.word	0x40007000
 80020f8:	10908100 	.word	0x10908100

080020fc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80020fc:	b538      	push	{r3, r4, r5, lr}
 80020fe:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002100:	6802      	ldr	r2, [r0, #0]
 8002102:	68d3      	ldr	r3, [r2, #12]
 8002104:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002108:	60d3      	str	r3, [r2, #12]
  
  tickstart = HAL_GetTick();
 800210a:	f7fe f8f9 	bl	8000300 <HAL_GetTick>
 800210e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f013 0f20 	tst.w	r3, #32
 8002118:	d107      	bne.n	800212a <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 800211a:	f7fe f8f1 	bl	8000300 <HAL_GetTick>
 800211e:	1b40      	subs	r0, r0, r5
 8002120:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002124:	d9f4      	bls.n	8002110 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8002126:	2003      	movs	r0, #3
    } 
  }

  return HAL_OK;
}
 8002128:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800212a:	2000      	movs	r0, #0
 800212c:	bd38      	pop	{r3, r4, r5, pc}

0800212e <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800212e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002130:	6803      	ldr	r3, [r0, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002138:	d001      	beq.n	800213e <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 800213a:	2000      	movs	r0, #0
 800213c:	bd38      	pop	{r3, r4, r5, pc}
 800213e:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002146:	f7fe f8db 	bl	8000300 <HAL_GetTick>
 800214a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800214c:	6823      	ldr	r3, [r4, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002154:	d107      	bne.n	8002166 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002156:	f7fe f8d3 	bl	8000300 <HAL_GetTick>
 800215a:	1b40      	subs	r0, r0, r5
 800215c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002160:	d9f4      	bls.n	800214c <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8002162:	2003      	movs	r0, #3
}
 8002164:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;  
 8002166:	2000      	movs	r0, #0
 8002168:	bd38      	pop	{r3, r4, r5, pc}

0800216a <HAL_RTC_Init>:
{
 800216a:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800216c:	2800      	cmp	r0, #0
 800216e:	d05c      	beq.n	800222a <HAL_RTC_Init+0xc0>
 8002170:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002172:	7f43      	ldrb	r3, [r0, #29]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d041      	beq.n	80021fc <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002178:	2302      	movs	r3, #2
 800217a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	22ca      	movs	r2, #202	; 0xca
 8002180:	625a      	str	r2, [r3, #36]	; 0x24
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	2253      	movs	r2, #83	; 0x53
 8002186:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002188:	4620      	mov	r0, r4
 800218a:	f7ff ffd0 	bl	800212e <RTC_EnterInitMode>
 800218e:	4605      	mov	r5, r0
 8002190:	2800      	cmp	r0, #0
 8002192:	d137      	bne.n	8002204 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002194:	6822      	ldr	r2, [r4, #0]
 8002196:	6893      	ldr	r3, [r2, #8]
 8002198:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800219c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021a0:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80021a2:	6821      	ldr	r1, [r4, #0]
 80021a4:	688a      	ldr	r2, [r1, #8]
 80021a6:	6863      	ldr	r3, [r4, #4]
 80021a8:	6920      	ldr	r0, [r4, #16]
 80021aa:	4303      	orrs	r3, r0
 80021ac:	6960      	ldr	r0, [r4, #20]
 80021ae:	4303      	orrs	r3, r0
 80021b0:	4313      	orrs	r3, r2
 80021b2:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	68e2      	ldr	r2, [r4, #12]
 80021b8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80021ba:	6822      	ldr	r2, [r4, #0]
 80021bc:	6913      	ldr	r3, [r2, #16]
 80021be:	68a1      	ldr	r1, [r4, #8]
 80021c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80021c4:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80021c6:	6822      	ldr	r2, [r4, #0]
 80021c8:	68d3      	ldr	r3, [r2, #12]
 80021ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021ce:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f013 0f20 	tst.w	r3, #32
 80021d8:	d01b      	beq.n	8002212 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80021da:	6822      	ldr	r2, [r4, #0]
 80021dc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80021de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e2:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80021e4:	6822      	ldr	r2, [r4, #0]
 80021e6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80021e8:	69a1      	ldr	r1, [r4, #24]
 80021ea:	430b      	orrs	r3, r1
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	22ff      	movs	r2, #255	; 0xff
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80021f4:	2301      	movs	r3, #1
 80021f6:	7763      	strb	r3, [r4, #29]
}
 80021f8:	4628      	mov	r0, r5
 80021fa:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80021fc:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80021fe:	f001 fcb3 	bl	8003b68 <HAL_RTC_MspInit>
 8002202:	e7b9      	b.n	8002178 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	22ff      	movs	r2, #255	; 0xff
 8002208:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800220a:	2304      	movs	r3, #4
 800220c:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 800220e:	2501      	movs	r5, #1
 8002210:	e7f2      	b.n	80021f8 <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002212:	4620      	mov	r0, r4
 8002214:	f7ff ff72 	bl	80020fc <HAL_RTC_WaitForSynchro>
 8002218:	2800      	cmp	r0, #0
 800221a:	d0de      	beq.n	80021da <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	22ff      	movs	r2, #255	; 0xff
 8002220:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002222:	2304      	movs	r3, #4
 8002224:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8002226:	2501      	movs	r5, #1
 8002228:	e7e6      	b.n	80021f8 <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 800222a:	2501      	movs	r5, #1
 800222c:	e7e4      	b.n	80021f8 <HAL_RTC_Init+0x8e>

0800222e <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800222e:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8002230:	e002      	b.n	8002238 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8002232:	3301      	adds	r3, #1
    Value -= 10U;
 8002234:	380a      	subs	r0, #10
 8002236:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002238:	2809      	cmp	r0, #9
 800223a:	d8fa      	bhi.n	8002232 <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	b2db      	uxtb	r3, r3
}
 8002240:	4318      	orrs	r0, r3
 8002242:	4770      	bx	lr

08002244 <HAL_RTC_SetTime>:
{
 8002244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002246:	7f03      	ldrb	r3, [r0, #28]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d077      	beq.n	800233c <HAL_RTC_SetTime+0xf8>
 800224c:	460e      	mov	r6, r1
 800224e:	4604      	mov	r4, r0
 8002250:	2301      	movs	r3, #1
 8002252:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002254:	2302      	movs	r3, #2
 8002256:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8002258:	2a00      	cmp	r2, #0
 800225a:	d146      	bne.n	80022ea <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800225c:	6803      	ldr	r3, [r0, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002264:	d101      	bne.n	800226a <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800226a:	7830      	ldrb	r0, [r6, #0]
 800226c:	f7ff ffdf 	bl	800222e <RTC_ByteToBcd2>
 8002270:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002272:	7870      	ldrb	r0, [r6, #1]
 8002274:	f7ff ffdb 	bl	800222e <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002278:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800227c:	78b0      	ldrb	r0, [r6, #2]
 800227e:	f7ff ffd6 	bl	800222e <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002282:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8002284:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002286:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800228a:	6823      	ldr	r3, [r4, #0]
 800228c:	22ca      	movs	r2, #202	; 0xca
 800228e:	625a      	str	r2, [r3, #36]	; 0x24
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	2253      	movs	r2, #83	; 0x53
 8002294:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002296:	4620      	mov	r0, r4
 8002298:	f7ff ff49 	bl	800212e <RTC_EnterInitMode>
 800229c:	4607      	mov	r7, r0
 800229e:	2800      	cmp	r0, #0
 80022a0:	d135      	bne.n	800230e <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 80022a8:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 80022ac:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80022ae:	6822      	ldr	r2, [r4, #0]
 80022b0:	6893      	ldr	r3, [r2, #8]
 80022b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80022b8:	6821      	ldr	r1, [r4, #0]
 80022ba:	688b      	ldr	r3, [r1, #8]
 80022bc:	68f2      	ldr	r2, [r6, #12]
 80022be:	6930      	ldr	r0, [r6, #16]
 80022c0:	4302      	orrs	r2, r0
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80022c6:	6822      	ldr	r2, [r4, #0]
 80022c8:	68d3      	ldr	r3, [r2, #12]
 80022ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ce:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f013 0f20 	tst.w	r3, #32
 80022d8:	d022      	beq.n	8002320 <HAL_RTC_SetTime+0xdc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	22ff      	movs	r2, #255	; 0xff
 80022de:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80022e0:	2301      	movs	r3, #1
 80022e2:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 80022e4:	2300      	movs	r3, #0
 80022e6:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 80022e8:	e029      	b.n	800233e <HAL_RTC_SetTime+0xfa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80022ea:	6803      	ldr	r3, [r0, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80022f2:	d101      	bne.n	80022f8 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80022f8:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80022fa:	7870      	ldrb	r0, [r6, #1]
 80022fc:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80022fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8002302:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002304:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8002306:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002308:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800230c:	e7bd      	b.n	800228a <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800230e:	6823      	ldr	r3, [r4, #0]
 8002310:	22ff      	movs	r2, #255	; 0xff
 8002312:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002314:	2304      	movs	r3, #4
 8002316:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002318:	2300      	movs	r3, #0
 800231a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 800231c:	2701      	movs	r7, #1
 800231e:	e00e      	b.n	800233e <HAL_RTC_SetTime+0xfa>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002320:	4620      	mov	r0, r4
 8002322:	f7ff feeb 	bl	80020fc <HAL_RTC_WaitForSynchro>
 8002326:	2800      	cmp	r0, #0
 8002328:	d0d7      	beq.n	80022da <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	22ff      	movs	r2, #255	; 0xff
 800232e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002330:	2304      	movs	r3, #4
 8002332:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002334:	2300      	movs	r3, #0
 8002336:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002338:	2701      	movs	r7, #1
 800233a:	e000      	b.n	800233e <HAL_RTC_SetTime+0xfa>
  __HAL_LOCK(hrtc);
 800233c:	2702      	movs	r7, #2
}
 800233e:	4638      	mov	r0, r7
 8002340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002342 <HAL_RTC_SetDate>:
{
 8002342:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8002344:	7f03      	ldrb	r3, [r0, #28]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d065      	beq.n	8002416 <HAL_RTC_SetDate+0xd4>
 800234a:	2301      	movs	r3, #1
 800234c:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 800234e:	2302      	movs	r3, #2
 8002350:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002352:	b93a      	cbnz	r2, 8002364 <HAL_RTC_SetDate+0x22>
 8002354:	784b      	ldrb	r3, [r1, #1]
 8002356:	f013 0f10 	tst.w	r3, #16
 800235a:	d003      	beq.n	8002364 <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800235c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002360:	330a      	adds	r3, #10
 8002362:	704b      	strb	r3, [r1, #1]
 8002364:	460e      	mov	r6, r1
 8002366:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8002368:	2a00      	cmp	r2, #0
 800236a:	d132      	bne.n	80023d2 <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800236c:	78c8      	ldrb	r0, [r1, #3]
 800236e:	f7ff ff5e 	bl	800222e <RTC_ByteToBcd2>
 8002372:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002374:	7870      	ldrb	r0, [r6, #1]
 8002376:	f7ff ff5a 	bl	800222e <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800237a:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800237e:	78b0      	ldrb	r0, [r6, #2]
 8002380:	f7ff ff55 	bl	800222e <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002384:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));   
 8002386:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002388:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	22ca      	movs	r2, #202	; 0xca
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	2253      	movs	r2, #83	; 0x53
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002398:	4620      	mov	r0, r4
 800239a:	f7ff fec8 	bl	800212e <RTC_EnterInitMode>
 800239e:	4606      	mov	r6, r0
 80023a0:	bb10      	cbnz	r0, 80023e8 <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80023a8:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80023ac:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80023ae:	6822      	ldr	r2, [r4, #0]
 80023b0:	68d3      	ldr	r3, [r2, #12]
 80023b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023b6:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f013 0f20 	tst.w	r3, #32
 80023c0:	d01b      	beq.n	80023fa <HAL_RTC_SetDate+0xb8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	22ff      	movs	r2, #255	; 0xff
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80023c8:	2301      	movs	r3, #1
 80023ca:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80023cc:	2300      	movs	r3, #0
 80023ce:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 80023d0:	e022      	b.n	8002418 <HAL_RTC_SetDate+0xd6>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 80023d2:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 80023d4:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80023d6:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 80023d8:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80023da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80023de:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));  
 80023e0:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80023e2:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 80023e6:	e7d1      	b.n	800238c <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	22ff      	movs	r2, #255	; 0xff
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80023ee:	2304      	movs	r3, #4
 80023f0:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80023f2:	2300      	movs	r3, #0
 80023f4:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80023f6:	2601      	movs	r6, #1
 80023f8:	e00e      	b.n	8002418 <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023fa:	4620      	mov	r0, r4
 80023fc:	f7ff fe7e 	bl	80020fc <HAL_RTC_WaitForSynchro>
 8002400:	2800      	cmp	r0, #0
 8002402:	d0de      	beq.n	80023c2 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	22ff      	movs	r2, #255	; 0xff
 8002408:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800240a:	2304      	movs	r3, #4
 800240c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800240e:	2300      	movs	r3, #0
 8002410:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002412:	2601      	movs	r6, #1
 8002414:	e000      	b.n	8002418 <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 8002416:	2602      	movs	r6, #2
}
 8002418:	4630      	mov	r0, r6
 800241a:	bd70      	pop	{r4, r5, r6, pc}

0800241c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800241c:	0903      	lsrs	r3, r0, #4
 800241e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002422:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 8002424:	f000 000f 	and.w	r0, r0, #15
 8002428:	4410      	add	r0, r2
}
 800242a:	b2c0      	uxtb	r0, r0
 800242c:	4770      	bx	lr

0800242e <HAL_RTC_GetTime>:
{
 800242e:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002430:	6803      	ldr	r3, [r0, #0]
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002434:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002436:	6803      	ldr	r3, [r0, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800243e:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002440:	6803      	ldr	r3, [r0, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002448:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800244c:	0c1d      	lsrs	r5, r3, #16
 800244e:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8002452:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8002454:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8002458:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800245a:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 800245e:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002460:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8002464:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8002466:	b95a      	cbnz	r2, 8002480 <HAL_RTC_GetTime+0x52>
 8002468:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800246a:	f7ff ffd7 	bl	800241c <RTC_Bcd2ToByte>
 800246e:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002470:	4630      	mov	r0, r6
 8002472:	f7ff ffd3 	bl	800241c <RTC_Bcd2ToByte>
 8002476:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8002478:	4620      	mov	r0, r4
 800247a:	f7ff ffcf 	bl	800241c <RTC_Bcd2ToByte>
 800247e:	70a8      	strb	r0, [r5, #2]
}
 8002480:	2000      	movs	r0, #0
 8002482:	bd70      	pop	{r4, r5, r6, pc}

08002484 <HAL_RTC_GetDate>:
{
 8002484:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8002486:	6803      	ldr	r3, [r0, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800248e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002492:	0c18      	lsrs	r0, r3, #16
 8002494:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002496:	f3c3 2604 	ubfx	r6, r3, #8, #5
 800249a:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800249c:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 80024a0:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80024a2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80024a6:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80024a8:	b95a      	cbnz	r2, 80024c2 <HAL_RTC_GetDate+0x3e>
 80024aa:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80024ac:	f7ff ffb6 	bl	800241c <RTC_Bcd2ToByte>
 80024b0:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80024b2:	4630      	mov	r0, r6
 80024b4:	f7ff ffb2 	bl	800241c <RTC_Bcd2ToByte>
 80024b8:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80024ba:	4628      	mov	r0, r5
 80024bc:	f7ff ffae 	bl	800241c <RTC_Bcd2ToByte>
 80024c0:	70a0      	strb	r0, [r4, #2]
}
 80024c2:	2000      	movs	r0, #0
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080024c8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80024c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024ca:	7f03      	ldrb	r3, [r0, #28]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d06d      	beq.n	80025ac <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 80024d0:	4615      	mov	r5, r2
 80024d2:	460e      	mov	r6, r1
 80024d4:	4604      	mov	r4, r0
 80024d6:	2301      	movs	r3, #1
 80024d8:	7703      	strb	r3, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024da:	2302      	movs	r3, #2
 80024dc:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024de:	6803      	ldr	r3, [r0, #0]
 80024e0:	22ca      	movs	r2, #202	; 0xca
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24
 80024e4:	6803      	ldr	r3, [r0, #0]
 80024e6:	2253      	movs	r2, #83	; 0x53
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
 80024ea:	6803      	ldr	r3, [r0, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80024f2:	d015      	beq.n	8002520 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
    tickstart = HAL_GetTick();
 80024f4:	f7fd ff04 	bl	8000300 <HAL_GetTick>
 80024f8:	4607      	mov	r7, r0
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f013 0f04 	tst.w	r3, #4
 8002502:	d00d      	beq.n	8002520 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002504:	f7fd fefc 	bl	8000300 <HAL_GetTick>
 8002508:	1bc0      	subs	r0, r0, r7
 800250a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800250e:	d9f4      	bls.n	80024fa <HAL_RTCEx_SetWakeUpTimer_IT+0x32>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	22ff      	movs	r2, #255	; 0xff
 8002514:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002516:	2003      	movs	r0, #3
 8002518:	7760      	strb	r0, [r4, #29]

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 800251a:	2300      	movs	r3, #0
 800251c:	7723      	strb	r3, [r4, #28]

       return HAL_TIMEOUT;
 800251e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002520:	6822      	ldr	r2, [r4, #0]
 8002522:	6893      	ldr	r3, [r2, #8]
 8002524:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002528:	6093      	str	r3, [r2, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800252a:	6822      	ldr	r2, [r4, #0]
 800252c:	68d3      	ldr	r3, [r2, #12]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002534:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002536:	f7fd fee3 	bl	8000300 <HAL_GetTick>
 800253a:	4607      	mov	r7, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800253c:	6823      	ldr	r3, [r4, #0]
 800253e:	68d8      	ldr	r0, [r3, #12]
 8002540:	f010 0f04 	tst.w	r0, #4
 8002544:	d10d      	bne.n	8002562 <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002546:	f7fd fedb 	bl	8000300 <HAL_GetTick>
 800254a:	1bc0      	subs	r0, r0, r7
 800254c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002550:	d9f4      	bls.n	800253c <HAL_RTCEx_SetWakeUpTimer_IT+0x74>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	22ff      	movs	r2, #255	; 0xff
 8002556:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002558:	2003      	movs	r0, #3
 800255a:	7760      	strb	r0, [r4, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800255c:	2300      	movs	r3, #0
 800255e:	7723      	strb	r3, [r4, #28]

      return HAL_TIMEOUT;
 8002560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002562:	615e      	str	r6, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002564:	6822      	ldr	r2, [r4, #0]
 8002566:	6893      	ldr	r3, [r2, #8]
 8002568:	f023 0307 	bic.w	r3, r3, #7
 800256c:	6093      	str	r3, [r2, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800256e:	6822      	ldr	r2, [r4, #0]
 8002570:	6893      	ldr	r3, [r2, #8]
 8002572:	431d      	orrs	r5, r3
 8002574:	6095      	str	r5, [r2, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002576:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800257e:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002586:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002588:	6822      	ldr	r2, [r4, #0]
 800258a:	6893      	ldr	r3, [r2, #8]
 800258c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002590:	6093      	str	r3, [r2, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002592:	6822      	ldr	r2, [r4, #0]
 8002594:	6893      	ldr	r3, [r2, #8]
 8002596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800259a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	22ff      	movs	r2, #255	; 0xff
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80025a2:	2301      	movs	r3, #1
 80025a4:	7763      	strb	r3, [r4, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80025a6:	2000      	movs	r0, #0
 80025a8:	7720      	strb	r0, [r4, #28]

  return HAL_OK;
 80025aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 80025ac:	2002      	movs	r0, #2
}
 80025ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025b0:	40010400 	.word	0x40010400

080025b4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
{
 80025b8:	b510      	push	{r4, lr}
 80025ba:	4604      	mov	r4, r0
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 80025bc:	6803      	ldr	r3, [r0, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80025c4:	d106      	bne.n	80025d4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80025c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80025cc:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 80025ce:	2301      	movs	r3, #1
 80025d0:	7763      	strb	r3, [r4, #29]
 80025d2:	bd10      	pop	{r4, pc}
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80025d4:	f7ff ffee 	bl	80025b4 <HAL_RTCEx_WakeUpTimerEventCallback>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80025d8:	6822      	ldr	r2, [r4, #0]
 80025da:	68d3      	ldr	r3, [r2, #12]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f463 6390 	orn	r3, r3, #1152	; 0x480
 80025e2:	60d3      	str	r3, [r2, #12]
 80025e4:	e7ef      	b.n	80025c6 <HAL_RTCEx_WakeUpTimerIRQHandler+0xe>
 80025e6:	bf00      	nop
 80025e8:	40010400 	.word	0x40010400

080025ec <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80025ec:	6803      	ldr	r3, [r0, #0]
 80025ee:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80025f0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80025f4:	4770      	bx	lr

080025f6 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80025f6:	6803      	ldr	r3, [r0, #0]
 80025f8:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80025fa:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 80025fe:	4770      	bx	lr

08002600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002600:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002602:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002604:	6a04      	ldr	r4, [r0, #32]
 8002606:	f024 0401 	bic.w	r4, r4, #1
 800260a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800260c:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800260e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002612:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002616:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800261a:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800261c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800261e:	6203      	str	r3, [r0, #32]
}
 8002620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002624:	4770      	bx	lr

08002626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002626:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002628:	6a03      	ldr	r3, [r0, #32]
 800262a:	f023 0310 	bic.w	r3, r3, #16
 800262e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002630:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002632:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002634:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002638:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800263c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002640:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002644:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002646:	6203      	str	r3, [r0, #32]
}
 8002648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800264c:	4770      	bx	lr

0800264e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800264e:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002654:	f041 0107 	orr.w	r1, r1, #7
 8002658:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800265a:	6083      	str	r3, [r0, #8]
 800265c:	4770      	bx	lr

0800265e <HAL_TIM_OC_DelayElapsedCallback>:
{
 800265e:	4770      	bx	lr

08002660 <HAL_TIM_IC_CaptureCallback>:
{
 8002660:	4770      	bx	lr

08002662 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8002662:	4770      	bx	lr

08002664 <HAL_TIM_TriggerCallback>:
{
 8002664:	4770      	bx	lr

08002666 <HAL_TIM_IRQHandler>:
{
 8002666:	b510      	push	{r4, lr}
 8002668:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800266a:	6803      	ldr	r3, [r0, #0]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	f012 0f02 	tst.w	r2, #2
 8002672:	d011      	beq.n	8002698 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	f012 0f02 	tst.w	r2, #2
 800267a:	d00d      	beq.n	8002698 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800267c:	f06f 0202 	mvn.w	r2, #2
 8002680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002682:	2301      	movs	r3, #1
 8002684:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002686:	6803      	ldr	r3, [r0, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f013 0f03 	tst.w	r3, #3
 800268e:	d079      	beq.n	8002784 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002690:	f7ff ffe6 	bl	8002660 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002694:	2300      	movs	r3, #0
 8002696:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	f012 0f04 	tst.w	r2, #4
 80026a0:	d012      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	f012 0f04 	tst.w	r2, #4
 80026a8:	d00e      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026aa:	f06f 0204 	mvn.w	r2, #4
 80026ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026b0:	2302      	movs	r3, #2
 80026b2:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80026bc:	d068      	beq.n	8002790 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80026be:	4620      	mov	r0, r4
 80026c0:	f7ff ffce 	bl	8002660 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c4:	2300      	movs	r3, #0
 80026c6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	f012 0f08 	tst.w	r2, #8
 80026d0:	d012      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	f012 0f08 	tst.w	r2, #8
 80026d8:	d00e      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026da:	f06f 0208 	mvn.w	r2, #8
 80026de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026e0:	2304      	movs	r3, #4
 80026e2:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026e4:	6823      	ldr	r3, [r4, #0]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	f013 0f03 	tst.w	r3, #3
 80026ec:	d057      	beq.n	800279e <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80026ee:	4620      	mov	r0, r4
 80026f0:	f7ff ffb6 	bl	8002660 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f4:	2300      	movs	r3, #0
 80026f6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	f012 0f10 	tst.w	r2, #16
 8002700:	d012      	beq.n	8002728 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	f012 0f10 	tst.w	r2, #16
 8002708:	d00e      	beq.n	8002728 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800270a:	f06f 0210 	mvn.w	r2, #16
 800270e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002710:	2308      	movs	r3, #8
 8002712:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	f413 7f40 	tst.w	r3, #768	; 0x300
 800271c:	d046      	beq.n	80027ac <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800271e:	4620      	mov	r0, r4
 8002720:	f7ff ff9e 	bl	8002660 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002724:	2300      	movs	r3, #0
 8002726:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	f012 0f01 	tst.w	r2, #1
 8002730:	d003      	beq.n	800273a <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	f012 0f01 	tst.w	r2, #1
 8002738:	d13f      	bne.n	80027ba <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002742:	d003      	beq.n	800274c <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	f012 0f80 	tst.w	r2, #128	; 0x80
 800274a:	d13d      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800274c:	6823      	ldr	r3, [r4, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	f012 0f80 	tst.w	r2, #128	; 0x80
 800275c:	d13b      	bne.n	80027d6 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002766:	d003      	beq.n	8002770 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800276e:	d139      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	f012 0f20 	tst.w	r2, #32
 8002778:	d003      	beq.n	8002782 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	f012 0f20 	tst.w	r2, #32
 8002780:	d137      	bne.n	80027f2 <HAL_TIM_IRQHandler+0x18c>
 8002782:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002784:	f7ff ff6b 	bl	800265e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002788:	4620      	mov	r0, r4
 800278a:	f7ff ff6a 	bl	8002662 <HAL_TIM_PWM_PulseFinishedCallback>
 800278e:	e781      	b.n	8002694 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002790:	4620      	mov	r0, r4
 8002792:	f7ff ff64 	bl	800265e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002796:	4620      	mov	r0, r4
 8002798:	f7ff ff63 	bl	8002662 <HAL_TIM_PWM_PulseFinishedCallback>
 800279c:	e792      	b.n	80026c4 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279e:	4620      	mov	r0, r4
 80027a0:	f7ff ff5d 	bl	800265e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80027a4:	4620      	mov	r0, r4
 80027a6:	f7ff ff5c 	bl	8002662 <HAL_TIM_PWM_PulseFinishedCallback>
 80027aa:	e7a3      	b.n	80026f4 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff ff56 	bl	800265e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b2:	4620      	mov	r0, r4
 80027b4:	f7ff ff55 	bl	8002662 <HAL_TIM_PWM_PulseFinishedCallback>
 80027b8:	e7b4      	b.n	8002724 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027ba:	f06f 0201 	mvn.w	r2, #1
 80027be:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80027c0:	4620      	mov	r0, r4
 80027c2:	f000 feaf 	bl	8003524 <HAL_TIM_PeriodElapsedCallback>
 80027c6:	e7b8      	b.n	800273a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80027c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027cc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80027ce:	4620      	mov	r0, r4
 80027d0:	f000 f93b 	bl	8002a4a <HAL_TIMEx_BreakCallback>
 80027d4:	e7ba      	b.n	800274c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027da:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80027dc:	4620      	mov	r0, r4
 80027de:	f000 f935 	bl	8002a4c <HAL_TIMEx_Break2Callback>
 80027e2:	e7bc      	b.n	800275e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027e8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80027ea:	4620      	mov	r0, r4
 80027ec:	f7ff ff3a 	bl	8002664 <HAL_TIM_TriggerCallback>
 80027f0:	e7be      	b.n	8002770 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027f2:	f06f 0220 	mvn.w	r2, #32
 80027f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80027f8:	4620      	mov	r0, r4
 80027fa:	f000 f925 	bl	8002a48 <HAL_TIMEx_CommutationCallback>
}
 80027fe:	e7c0      	b.n	8002782 <HAL_TIM_IRQHandler+0x11c>

08002800 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002800:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002802:	4a23      	ldr	r2, [pc, #140]	; (8002890 <TIM_Base_SetConfig+0x90>)
 8002804:	4290      	cmp	r0, r2
 8002806:	d03d      	beq.n	8002884 <TIM_Base_SetConfig+0x84>
 8002808:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800280c:	d03a      	beq.n	8002884 <TIM_Base_SetConfig+0x84>
 800280e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002812:	4290      	cmp	r0, r2
 8002814:	d036      	beq.n	8002884 <TIM_Base_SetConfig+0x84>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002816:	4a1e      	ldr	r2, [pc, #120]	; (8002890 <TIM_Base_SetConfig+0x90>)
 8002818:	4290      	cmp	r0, r2
 800281a:	d012      	beq.n	8002842 <TIM_Base_SetConfig+0x42>
 800281c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002820:	d00f      	beq.n	8002842 <TIM_Base_SetConfig+0x42>
 8002822:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002826:	4290      	cmp	r0, r2
 8002828:	d00b      	beq.n	8002842 <TIM_Base_SetConfig+0x42>
 800282a:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 800282e:	4290      	cmp	r0, r2
 8002830:	d007      	beq.n	8002842 <TIM_Base_SetConfig+0x42>
 8002832:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002836:	4290      	cmp	r0, r2
 8002838:	d003      	beq.n	8002842 <TIM_Base_SetConfig+0x42>
 800283a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800283e:	4290      	cmp	r0, r2
 8002840:	d103      	bne.n	800284a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002846:	68ca      	ldr	r2, [r1, #12]
 8002848:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800284a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800284e:	694a      	ldr	r2, [r1, #20]
 8002850:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002852:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002854:	688b      	ldr	r3, [r1, #8]
 8002856:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002858:	680b      	ldr	r3, [r1, #0]
 800285a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <TIM_Base_SetConfig+0x90>)
 800285e:	4298      	cmp	r0, r3
 8002860:	d00b      	beq.n	800287a <TIM_Base_SetConfig+0x7a>
 8002862:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002866:	4298      	cmp	r0, r3
 8002868:	d007      	beq.n	800287a <TIM_Base_SetConfig+0x7a>
 800286a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800286e:	4298      	cmp	r0, r3
 8002870:	d003      	beq.n	800287a <TIM_Base_SetConfig+0x7a>
 8002872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002876:	4298      	cmp	r0, r3
 8002878:	d101      	bne.n	800287e <TIM_Base_SetConfig+0x7e>
    TIMx->RCR = Structure->RepetitionCounter;
 800287a:	690b      	ldr	r3, [r1, #16]
 800287c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800287e:	2301      	movs	r3, #1
 8002880:	6143      	str	r3, [r0, #20]
 8002882:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002888:	684a      	ldr	r2, [r1, #4]
 800288a:	4313      	orrs	r3, r2
 800288c:	e7c3      	b.n	8002816 <TIM_Base_SetConfig+0x16>
 800288e:	bf00      	nop
 8002890:	40012c00 	.word	0x40012c00

08002894 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002894:	b1a8      	cbz	r0, 80028c2 <HAL_TIM_Base_Init+0x2e>
{ 
 8002896:	b510      	push	{r4, lr}
 8002898:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800289a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800289e:	b15b      	cbz	r3, 80028b8 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80028a0:	2302      	movs	r3, #2
 80028a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80028a6:	1d21      	adds	r1, r4, #4
 80028a8:	6820      	ldr	r0, [r4, #0]
 80028aa:	f7ff ffa9 	bl	8002800 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80028b4:	2000      	movs	r0, #0
 80028b6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80028b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80028bc:	f001 f972 	bl	8003ba4 <HAL_TIM_Base_MspInit>
 80028c0:	e7ee      	b.n	80028a0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80028c2:	2001      	movs	r0, #1
 80028c4:	4770      	bx	lr

080028c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028c6:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80028c8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ca:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028ce:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80028d2:	4319      	orrs	r1, r3
 80028d4:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028d6:	6084      	str	r4, [r0, #8]
} 
 80028d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80028e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	f000 8082 	beq.w	80029ee <HAL_TIM_ConfigClockSource+0x10e>
{
 80028ea:	b510      	push	{r4, lr}
 80028ec:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80028ee:	2301      	movs	r3, #1
 80028f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	2302      	movs	r3, #2
 80028f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80028fa:	6802      	ldr	r2, [r0, #0]
 80028fc:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028fe:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <HAL_TIM_ConfigClockSource+0x114>)
 8002900:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8002902:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002904:	680b      	ldr	r3, [r1, #0]
 8002906:	2b40      	cmp	r3, #64	; 0x40
 8002908:	d05d      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0xe6>
 800290a:	d910      	bls.n	800292e <HAL_TIM_ConfigClockSource+0x4e>
 800290c:	2b70      	cmp	r3, #112	; 0x70
 800290e:	d040      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0xb2>
 8002910:	d81f      	bhi.n	8002952 <HAL_TIM_ConfigClockSource+0x72>
 8002912:	2b50      	cmp	r3, #80	; 0x50
 8002914:	d04d      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0xd2>
 8002916:	2b60      	cmp	r3, #96	; 0x60
 8002918:	d134      	bne.n	8002984 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800291a:	68ca      	ldr	r2, [r1, #12]
 800291c:	6849      	ldr	r1, [r1, #4]
 800291e:	6820      	ldr	r0, [r4, #0]
 8002920:	f7ff fe81 	bl	8002626 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002924:	2160      	movs	r1, #96	; 0x60
 8002926:	6820      	ldr	r0, [r4, #0]
 8002928:	f7ff fe91 	bl	800264e <TIM_ITRx_SetConfig>
    break;
 800292c:	e02a      	b.n	8002984 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 800292e:	2b10      	cmp	r3, #16
 8002930:	d053      	beq.n	80029da <HAL_TIM_ConfigClockSource+0xfa>
 8002932:	d908      	bls.n	8002946 <HAL_TIM_ConfigClockSource+0x66>
 8002934:	2b20      	cmp	r3, #32
 8002936:	d055      	beq.n	80029e4 <HAL_TIM_ConfigClockSource+0x104>
 8002938:	2b30      	cmp	r3, #48	; 0x30
 800293a:	d123      	bne.n	8002984 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800293c:	2130      	movs	r1, #48	; 0x30
 800293e:	6820      	ldr	r0, [r4, #0]
 8002940:	f7ff fe85 	bl	800264e <TIM_ITRx_SetConfig>
    break;
 8002944:	e01e      	b.n	8002984 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8002946:	b9eb      	cbnz	r3, 8002984 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002948:	2100      	movs	r1, #0
 800294a:	6820      	ldr	r0, [r4, #0]
 800294c:	f7ff fe7f 	bl	800264e <TIM_ITRx_SetConfig>
    break;
 8002950:	e018      	b.n	8002984 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8002952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002956:	d00e      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x96>
 8002958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800295c:	d112      	bne.n	8002984 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance, 
 800295e:	68cb      	ldr	r3, [r1, #12]
 8002960:	684a      	ldr	r2, [r1, #4]
 8002962:	6889      	ldr	r1, [r1, #8]
 8002964:	6820      	ldr	r0, [r4, #0]
 8002966:	f7ff ffae 	bl	80028c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800296a:	6822      	ldr	r2, [r4, #0]
 800296c:	6893      	ldr	r3, [r2, #8]
 800296e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002972:	6093      	str	r3, [r2, #8]
    break;
 8002974:	e006      	b.n	8002984 <HAL_TIM_ConfigClockSource+0xa4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002976:	6822      	ldr	r2, [r4, #0]
 8002978:	6893      	ldr	r3, [r2, #8]
 800297a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297e:	f023 0307 	bic.w	r3, r3, #7
 8002982:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002984:	2301      	movs	r3, #1
 8002986:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800298a:	2000      	movs	r0, #0
 800298c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002990:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 8002992:	68cb      	ldr	r3, [r1, #12]
 8002994:	684a      	ldr	r2, [r1, #4]
 8002996:	6889      	ldr	r1, [r1, #8]
 8002998:	6820      	ldr	r0, [r4, #0]
 800299a:	f7ff ff94 	bl	80028c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800299e:	6822      	ldr	r2, [r4, #0]
 80029a0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80029ae:	6093      	str	r3, [r2, #8]
    break;
 80029b0:	e7e8      	b.n	8002984 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80029b2:	68ca      	ldr	r2, [r1, #12]
 80029b4:	6849      	ldr	r1, [r1, #4]
 80029b6:	6820      	ldr	r0, [r4, #0]
 80029b8:	f7ff fe22 	bl	8002600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029bc:	2150      	movs	r1, #80	; 0x50
 80029be:	6820      	ldr	r0, [r4, #0]
 80029c0:	f7ff fe45 	bl	800264e <TIM_ITRx_SetConfig>
    break;
 80029c4:	e7de      	b.n	8002984 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80029c6:	68ca      	ldr	r2, [r1, #12]
 80029c8:	6849      	ldr	r1, [r1, #4]
 80029ca:	6820      	ldr	r0, [r4, #0]
 80029cc:	f7ff fe18 	bl	8002600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029d0:	2140      	movs	r1, #64	; 0x40
 80029d2:	6820      	ldr	r0, [r4, #0]
 80029d4:	f7ff fe3b 	bl	800264e <TIM_ITRx_SetConfig>
    break;
 80029d8:	e7d4      	b.n	8002984 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80029da:	2110      	movs	r1, #16
 80029dc:	6820      	ldr	r0, [r4, #0]
 80029de:	f7ff fe36 	bl	800264e <TIM_ITRx_SetConfig>
    break;
 80029e2:	e7cf      	b.n	8002984 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80029e4:	2120      	movs	r1, #32
 80029e6:	6820      	ldr	r0, [r4, #0]
 80029e8:	f7ff fe31 	bl	800264e <TIM_ITRx_SetConfig>
    break;
 80029ec:	e7ca      	b.n	8002984 <HAL_TIM_ConfigClockSource+0xa4>
  __HAL_LOCK(htim);
 80029ee:	2002      	movs	r0, #2
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	fffe0088 	.word	0xfffe0088

080029f8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80029f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d01f      	beq.n	8002a40 <HAL_TIMEx_MasterConfigSynchronization+0x48>
{
 8002a00:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002a02:	2301      	movs	r3, #1
 8002a04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a08:	6804      	ldr	r4, [r0, #0]
 8002a0a:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a0c:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a0e:	4d0d      	ldr	r5, [pc, #52]	; (8002a44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 8002a10:	42ac      	cmp	r4, r5
 8002a12:	d010      	beq.n	8002a36 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a18:	680d      	ldr	r5, [r1, #0]
 8002a1a:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a20:	6889      	ldr	r1, [r1, #8]
 8002a22:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a24:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a26:	6803      	ldr	r3, [r0, #0]
 8002a28:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8002a30:	4618      	mov	r0, r3
} 
 8002a32:	bc30      	pop	{r4, r5}
 8002a34:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a3a:	684d      	ldr	r5, [r1, #4]
 8002a3c:	432b      	orrs	r3, r5
 8002a3e:	e7e9      	b.n	8002a14 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
  __HAL_LOCK(htim);
 8002a40:	2002      	movs	r0, #2
 8002a42:	4770      	bx	lr
 8002a44:	40012c00 	.word	0x40012c00

08002a48 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	4770      	bx	lr

08002a4a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a4c:	4770      	bx	lr

08002a4e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a4e:	6802      	ldr	r2, [r0, #0]
 8002a50:	6813      	ldr	r3, [r2, #0]
 8002a52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a56:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a58:	6802      	ldr	r2, [r0, #0]
 8002a5a:	6893      	ldr	r3, [r2, #8]
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a62:	2320      	movs	r3, #32
 8002a64:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8002a68:	4770      	bx	lr

08002a6a <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8002a6a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d001      	beq.n	8002a78 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8002a74:	2002      	movs	r0, #2
 8002a76:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8002a78:	2900      	cmp	r1, #0
 8002a7a:	d047      	beq.n	8002b0c <HAL_UART_Receive_IT+0xa2>
 8002a7c:	2a00      	cmp	r2, #0
 8002a7e:	d047      	beq.n	8002b10 <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 8002a80:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d045      	beq.n	8002b14 <HAL_UART_Receive_IT+0xaa>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 8002a8e:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8002a90:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8002a94:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002a98:	6883      	ldr	r3, [r0, #8]
 8002a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9e:	d006      	beq.n	8002aae <HAL_UART_Receive_IT+0x44>
 8002aa0:	b9a3      	cbnz	r3, 8002acc <HAL_UART_Receive_IT+0x62>
 8002aa2:	6903      	ldr	r3, [r0, #16]
 8002aa4:	b973      	cbnz	r3, 8002ac4 <HAL_UART_Receive_IT+0x5a>
 8002aa6:	23ff      	movs	r3, #255	; 0xff
 8002aa8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002aac:	e011      	b.n	8002ad2 <HAL_UART_Receive_IT+0x68>
 8002aae:	6903      	ldr	r3, [r0, #16]
 8002ab0:	b923      	cbnz	r3, 8002abc <HAL_UART_Receive_IT+0x52>
 8002ab2:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002ab6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002aba:	e00a      	b.n	8002ad2 <HAL_UART_Receive_IT+0x68>
 8002abc:	23ff      	movs	r3, #255	; 0xff
 8002abe:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002ac2:	e006      	b.n	8002ad2 <HAL_UART_Receive_IT+0x68>
 8002ac4:	237f      	movs	r3, #127	; 0x7f
 8002ac6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002aca:	e002      	b.n	8002ad2 <HAL_UART_Receive_IT+0x68>
 8002acc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ad0:	d012      	beq.n	8002af8 <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ad6:	2222      	movs	r2, #34	; 0x22
 8002ad8:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8002adc:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae0:	6801      	ldr	r1, [r0, #0]
 8002ae2:	688a      	ldr	r2, [r1, #8]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002aea:	6801      	ldr	r1, [r0, #0]
 8002aec:	680a      	ldr	r2, [r1, #0]
 8002aee:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002af2:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8002af4:	4618      	mov	r0, r3
 8002af6:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8002af8:	6903      	ldr	r3, [r0, #16]
 8002afa:	b91b      	cbnz	r3, 8002b04 <HAL_UART_Receive_IT+0x9a>
 8002afc:	237f      	movs	r3, #127	; 0x7f
 8002afe:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002b02:	e7e6      	b.n	8002ad2 <HAL_UART_Receive_IT+0x68>
 8002b04:	233f      	movs	r3, #63	; 0x3f
 8002b06:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002b0a:	e7e2      	b.n	8002ad2 <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	4770      	bx	lr
 8002b10:	2001      	movs	r0, #1
 8002b12:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002b14:	2002      	movs	r0, #2
}
 8002b16:	4770      	bx	lr

08002b18 <HAL_UART_TxCpltCallback>:
{
 8002b18:	4770      	bx	lr

08002b1a <HAL_UART_ErrorCallback>:
{
 8002b1a:	4770      	bx	lr

08002b1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002b1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002b26:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002b2a:	f7ff fff6 	bl	8002b1a <HAL_UART_ErrorCallback>
 8002b2e:	bd08      	pop	{r3, pc}

08002b30 <UART_SetConfig>:
{
 8002b30:	b538      	push	{r3, r4, r5, lr}
 8002b32:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b34:	6883      	ldr	r3, [r0, #8]
 8002b36:	6902      	ldr	r2, [r0, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	6942      	ldr	r2, [r0, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	69c2      	ldr	r2, [r0, #28]
 8002b40:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002b42:	6801      	ldr	r1, [r0, #0]
 8002b44:	6808      	ldr	r0, [r1, #0]
 8002b46:	4a64      	ldr	r2, [pc, #400]	; (8002cd8 <UART_SetConfig+0x1a8>)
 8002b48:	4002      	ands	r2, r0
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b4e:	6822      	ldr	r2, [r4, #0]
 8002b50:	6853      	ldr	r3, [r2, #4]
 8002b52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b56:	68e1      	ldr	r1, [r4, #12]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002b5c:	69a3      	ldr	r3, [r4, #24]
 8002b5e:	6a22      	ldr	r2, [r4, #32]
 8002b60:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002b62:	6821      	ldr	r1, [r4, #0]
 8002b64:	688a      	ldr	r2, [r1, #8]
 8002b66:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b6e:	6825      	ldr	r5, [r4, #0]
 8002b70:	4b5a      	ldr	r3, [pc, #360]	; (8002cdc <UART_SetConfig+0x1ac>)
 8002b72:	429d      	cmp	r5, r3
 8002b74:	d015      	beq.n	8002ba2 <UART_SetConfig+0x72>
 8002b76:	4b5a      	ldr	r3, [pc, #360]	; (8002ce0 <UART_SetConfig+0x1b0>)
 8002b78:	429d      	cmp	r5, r3
 8002b7a:	d029      	beq.n	8002bd0 <UART_SetConfig+0xa0>
 8002b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b80:	429d      	cmp	r5, r3
 8002b82:	d021      	beq.n	8002bc8 <UART_SetConfig+0x98>
 8002b84:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b86:	69e2      	ldr	r2, [r4, #28]
 8002b88:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002b8c:	d022      	beq.n	8002bd4 <UART_SetConfig+0xa4>
    switch (clocksource)
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	f200 809f 	bhi.w	8002cd2 <UART_SetConfig+0x1a2>
 8002b94:	e8df f003 	tbb	[pc, r3]
 8002b98:	9d7c7166 	.word	0x9d7c7166
 8002b9c:	9d9d9d88 	.word	0x9d9d9d88
 8002ba0:	93          	.byte	0x93
 8002ba1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ba2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d809      	bhi.n	8002bc4 <UART_SetConfig+0x94>
 8002bb0:	e8df f003 	tbb	[pc, r3]
 8002bb4:	0c060402 	.word	0x0c060402
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e7e4      	b.n	8002b86 <UART_SetConfig+0x56>
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	e7e2      	b.n	8002b86 <UART_SetConfig+0x56>
 8002bc0:	2308      	movs	r3, #8
 8002bc2:	e7e0      	b.n	8002b86 <UART_SetConfig+0x56>
 8002bc4:	2310      	movs	r3, #16
 8002bc6:	e7de      	b.n	8002b86 <UART_SetConfig+0x56>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e7dc      	b.n	8002b86 <UART_SetConfig+0x56>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e7da      	b.n	8002b86 <UART_SetConfig+0x56>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e7d8      	b.n	8002b86 <UART_SetConfig+0x56>
    switch (clocksource)
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d842      	bhi.n	8002c5e <UART_SetConfig+0x12e>
 8002bd8:	e8df f003 	tbb	[pc, r3]
 8002bdc:	41221705 	.word	0x41221705
 8002be0:	4141412d 	.word	0x4141412d
 8002be4:	38          	.byte	0x38
 8002be5:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002be6:	f7ff f987 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002bea:	6862      	ldr	r2, [r4, #4]
 8002bec:	0853      	lsrs	r3, r2, #1
 8002bee:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002bf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bf6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bf8:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002bfa:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bfe:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002c02:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8002c04:	6822      	ldr	r2, [r4, #0]
 8002c06:	60d3      	str	r3, [r2, #12]
 8002c08:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c0a:	f7ff f98b 	bl	8001f24 <HAL_RCC_GetPCLK2Freq>
 8002c0e:	6862      	ldr	r2, [r4, #4]
 8002c10:	0853      	lsrs	r3, r2, #1
 8002c12:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002c16:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c1a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c1c:	2000      	movs	r0, #0
        break;
 8002c1e:	e7ec      	b.n	8002bfa <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c20:	6862      	ldr	r2, [r4, #4]
 8002c22:	0853      	lsrs	r3, r2, #1
 8002c24:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002c28:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c30:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c32:	2000      	movs	r0, #0
        break;
 8002c34:	e7e1      	b.n	8002bfa <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c36:	f7ff f837 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8002c3a:	6862      	ldr	r2, [r4, #4]
 8002c3c:	0853      	lsrs	r3, r2, #1
 8002c3e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002c42:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c46:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c48:	2000      	movs	r0, #0
        break;
 8002c4a:	e7d6      	b.n	8002bfa <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c4c:	6862      	ldr	r2, [r4, #4]
 8002c4e:	0853      	lsrs	r3, r2, #1
 8002c50:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c58:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c5a:	2000      	movs	r0, #0
        break;
 8002c5c:	e7cd      	b.n	8002bfa <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8002c5e:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	e7ca      	b.n	8002bfa <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c64:	f7ff f948 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002c68:	6863      	ldr	r3, [r4, #4]
 8002c6a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002c6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c72:	b280      	uxth	r0, r0
 8002c74:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c76:	2000      	movs	r0, #0
        break;
 8002c78:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c7a:	f7ff f953 	bl	8001f24 <HAL_RCC_GetPCLK2Freq>
 8002c7e:	6863      	ldr	r3, [r4, #4]
 8002c80:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002c84:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c88:	b280      	uxth	r0, r0
 8002c8a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c8c:	2000      	movs	r0, #0
        break;
 8002c8e:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c90:	6862      	ldr	r2, [r4, #4]
 8002c92:	0853      	lsrs	r3, r2, #1
 8002c94:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002c98:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002c9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ca4:	2000      	movs	r0, #0
        break;
 8002ca6:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002ca8:	f7fe fffe 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8002cac:	6863      	ldr	r3, [r4, #4]
 8002cae:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002cb2:	fbb0 f0f3 	udiv	r0, r0, r3
 8002cb6:	b280      	uxth	r0, r0
 8002cb8:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cba:	2000      	movs	r0, #0
        break;
 8002cbc:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002cbe:	6862      	ldr	r2, [r4, #4]
 8002cc0:	0853      	lsrs	r3, r2, #1
 8002cc2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002cc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cce:	2000      	movs	r0, #0
        break;
 8002cd0:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 8002cd2:	2001      	movs	r0, #1
}
 8002cd4:	bd38      	pop	{r3, r4, r5, pc}
 8002cd6:	bf00      	nop
 8002cd8:	efff69f3 	.word	0xefff69f3
 8002cdc:	40013800 	.word	0x40013800
 8002ce0:	40004400 	.word	0x40004400

08002ce4 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ce4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ce6:	f013 0f01 	tst.w	r3, #1
 8002cea:	d006      	beq.n	8002cfa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cec:	6802      	ldr	r2, [r0, #0]
 8002cee:	6853      	ldr	r3, [r2, #4]
 8002cf0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002cf4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cfa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cfc:	f013 0f02 	tst.w	r3, #2
 8002d00:	d006      	beq.n	8002d10 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d02:	6802      	ldr	r2, [r0, #0]
 8002d04:	6853      	ldr	r3, [r2, #4]
 8002d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d12:	f013 0f04 	tst.w	r3, #4
 8002d16:	d006      	beq.n	8002d26 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d18:	6802      	ldr	r2, [r0, #0]
 8002d1a:	6853      	ldr	r3, [r2, #4]
 8002d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d20:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002d22:	430b      	orrs	r3, r1
 8002d24:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d26:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d28:	f013 0f08 	tst.w	r3, #8
 8002d2c:	d006      	beq.n	8002d3c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d2e:	6802      	ldr	r2, [r0, #0]
 8002d30:	6853      	ldr	r3, [r2, #4]
 8002d32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d36:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d3e:	f013 0f10 	tst.w	r3, #16
 8002d42:	d006      	beq.n	8002d52 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d44:	6802      	ldr	r2, [r0, #0]
 8002d46:	6893      	ldr	r3, [r2, #8]
 8002d48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d4c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d52:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d54:	f013 0f20 	tst.w	r3, #32
 8002d58:	d006      	beq.n	8002d68 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d5a:	6802      	ldr	r2, [r0, #0]
 8002d5c:	6893      	ldr	r3, [r2, #8]
 8002d5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d62:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d6a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d6e:	d00a      	beq.n	8002d86 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d70:	6802      	ldr	r2, [r0, #0]
 8002d72:	6853      	ldr	r3, [r2, #4]
 8002d74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d78:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d7e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d84:	d00b      	beq.n	8002d9e <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d86:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002d8c:	d006      	beq.n	8002d9c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d8e:	6802      	ldr	r2, [r0, #0]
 8002d90:	6853      	ldr	r3, [r2, #4]
 8002d92:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002d96:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6053      	str	r3, [r2, #4]
 8002d9c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d9e:	6802      	ldr	r2, [r0, #0]
 8002da0:	6853      	ldr	r3, [r2, #4]
 8002da2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002da6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6053      	str	r3, [r2, #4]
 8002dac:	e7eb      	b.n	8002d86 <UART_AdvFeatureConfig+0xa2>

08002dae <UART_WaitOnFlagUntilTimeout>:
{
 8002dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002db2:	4605      	mov	r5, r0
 8002db4:	460f      	mov	r7, r1
 8002db6:	4616      	mov	r6, r2
 8002db8:	4698      	mov	r8, r3
 8002dba:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dbc:	682b      	ldr	r3, [r5, #0]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	ea37 0303 	bics.w	r3, r7, r3
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	42b3      	cmp	r3, r6
 8002dcc:	d11e      	bne.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8002dce:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002dd2:	d0f3      	beq.n	8002dbc <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002dd4:	b12c      	cbz	r4, 8002de2 <UART_WaitOnFlagUntilTimeout+0x34>
 8002dd6:	f7fd fa93 	bl	8000300 <HAL_GetTick>
 8002dda:	eba0 0008 	sub.w	r0, r0, r8
 8002dde:	4284      	cmp	r4, r0
 8002de0:	d2ec      	bcs.n	8002dbc <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002de2:	682a      	ldr	r2, [r5, #0]
 8002de4:	6813      	ldr	r3, [r2, #0]
 8002de6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002dea:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dec:	682a      	ldr	r2, [r5, #0]
 8002dee:	6893      	ldr	r3, [r2, #8]
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002df6:	2320      	movs	r3, #32
 8002df8:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002dfc:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002e00:	2300      	movs	r3, #0
 8002e02:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8002e06:	2003      	movs	r0, #3
 8002e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002e0c:	2000      	movs	r0, #0
}
 8002e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002e12 <HAL_UART_Transmit>:
{
 8002e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002e1a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d004      	beq.n	8002e2e <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8002e24:	2302      	movs	r3, #2
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	b002      	add	sp, #8
 8002e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e2e:	4604      	mov	r4, r0
 8002e30:	460d      	mov	r5, r1
 8002e32:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8002e34:	2900      	cmp	r1, #0
 8002e36:	d04e      	beq.n	8002ed6 <HAL_UART_Transmit+0xc4>
 8002e38:	2a00      	cmp	r2, #0
 8002e3a:	d04e      	beq.n	8002eda <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8002e3c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_UART_Transmit+0x36>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e7ee      	b.n	8002e26 <HAL_UART_Transmit+0x14>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e52:	2321      	movs	r3, #33	; 0x21
 8002e54:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8002e58:	f7fd fa52 	bl	8000300 <HAL_GetTick>
 8002e5c:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002e5e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e62:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002e66:	e003      	b.n	8002e70 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	782a      	ldrb	r2, [r5, #0]
 8002e6c:	851a      	strh	r2, [r3, #40]	; 0x28
 8002e6e:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 8002e70:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	b1e3      	cbz	r3, 8002eb2 <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 8002e78:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e86:	9600      	str	r6, [sp, #0]
 8002e88:	463b      	mov	r3, r7
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2180      	movs	r1, #128	; 0x80
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f7ff ff8d 	bl	8002dae <UART_WaitOnFlagUntilTimeout>
 8002e94:	bb18      	cbnz	r0, 8002ede <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e96:	68a3      	ldr	r3, [r4, #8]
 8002e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9c:	d1e4      	bne.n	8002e68 <HAL_UART_Transmit+0x56>
 8002e9e:	6923      	ldr	r3, [r4, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e1      	bne.n	8002e68 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002ea4:	6822      	ldr	r2, [r4, #0]
 8002ea6:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eae:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8002eb0:	e7de      	b.n	8002e70 <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eb2:	9600      	str	r6, [sp, #0]
 8002eb4:	463b      	mov	r3, r7
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2140      	movs	r1, #64	; 0x40
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f7ff ff77 	bl	8002dae <UART_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	b108      	cbz	r0, 8002ec8 <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e7ae      	b.n	8002e26 <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    return HAL_OK;
 8002ed4:	e7a7      	b.n	8002e26 <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e7a5      	b.n	8002e26 <HAL_UART_Transmit+0x14>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e7a3      	b.n	8002e26 <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e7a1      	b.n	8002e26 <HAL_UART_Transmit+0x14>

08002ee2 <UART_CheckIdleState>:
{
 8002ee2:	b530      	push	{r4, r5, lr}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002eec:	f7fd fa08 	bl	8000300 <HAL_GetTick>
 8002ef0:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f013 0f08 	tst.w	r3, #8
 8002efa:	d10e      	bne.n	8002f1a <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f013 0f04 	tst.w	r3, #4
 8002f04:	d117      	bne.n	8002f36 <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 8002f06:	2320      	movs	r3, #32
 8002f08:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002f0c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8002f10:	2000      	movs	r0, #0
 8002f12:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 8002f16:	b003      	add	sp, #12
 8002f18:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	4603      	mov	r3, r0
 8002f22:	2200      	movs	r2, #0
 8002f24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f7ff ff40 	bl	8002dae <UART_WaitOnFlagUntilTimeout>
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	d0e4      	beq.n	8002efc <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002f32:	2003      	movs	r0, #3
 8002f34:	e7ef      	b.n	8002f16 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	462b      	mov	r3, r5
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f44:	4620      	mov	r0, r4
 8002f46:	f7ff ff32 	bl	8002dae <UART_WaitOnFlagUntilTimeout>
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	d0db      	beq.n	8002f06 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8002f4e:	2003      	movs	r0, #3
 8002f50:	e7e1      	b.n	8002f16 <UART_CheckIdleState+0x34>

08002f52 <HAL_UART_Init>:
  if(huart == NULL)
 8002f52:	b378      	cbz	r0, 8002fb4 <HAL_UART_Init+0x62>
{
 8002f54:	b510      	push	{r4, lr}
 8002f56:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8002f58:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002f5c:	b30b      	cbz	r3, 8002fa2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002f5e:	2324      	movs	r3, #36	; 0x24
 8002f60:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002f64:	6822      	ldr	r2, [r4, #0]
 8002f66:	6813      	ldr	r3, [r2, #0]
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f7ff fdde 	bl	8002b30 <UART_SetConfig>
 8002f74:	2801      	cmp	r0, #1
 8002f76:	d01f      	beq.n	8002fb8 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f7a:	b9bb      	cbnz	r3, 8002fac <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7c:	6822      	ldr	r2, [r4, #0]
 8002f7e:	6853      	ldr	r3, [r2, #4]
 8002f80:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002f84:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f86:	6822      	ldr	r2, [r4, #0]
 8002f88:	6893      	ldr	r3, [r2, #8]
 8002f8a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002f8e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002f90:	6822      	ldr	r2, [r4, #0]
 8002f92:	6813      	ldr	r3, [r2, #0]
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f7ff ffa1 	bl	8002ee2 <UART_CheckIdleState>
 8002fa0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002fa2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002fa6:	f000 fe1b 	bl	8003be0 <HAL_UART_MspInit>
 8002faa:	e7d8      	b.n	8002f5e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002fac:	4620      	mov	r0, r4
 8002fae:	f7ff fe99 	bl	8002ce4 <UART_AdvFeatureConfig>
 8002fb2:	e7e3      	b.n	8002f7c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	4770      	bx	lr
}
 8002fb8:	bd10      	pop	{r4, pc}

08002fba <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fba:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b21      	cmp	r3, #33	; 0x21
 8002fc2:	d001      	beq.n	8002fc8 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002fc4:	2002      	movs	r0, #2
  }
}
 8002fc6:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8002fc8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	b193      	cbz	r3, 8002ff6 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd0:	6883      	ldr	r3, [r0, #8]
 8002fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd6:	d01a      	beq.n	800300e <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002fd8:	6802      	ldr	r2, [r0, #0]
 8002fda:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002fdc:	1c59      	adds	r1, r3, #1
 8002fde:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002fe4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ff6:	6802      	ldr	r2, [r0, #0]
 8002ff8:	6813      	ldr	r3, [r2, #0]
 8002ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ffe:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003000:	6802      	ldr	r2, [r0, #0]
 8003002:	6813      	ldr	r3, [r2, #0]
 8003004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003008:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 800300a:	2000      	movs	r0, #0
 800300c:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800300e:	6903      	ldr	r3, [r0, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e1      	bne.n	8002fd8 <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8003014:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003016:	6802      	ldr	r2, [r0, #0]
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800301e:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003020:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003022:	3302      	adds	r3, #2
 8003024:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003026:	e7dd      	b.n	8002fe4 <UART_Transmit_IT+0x2a>

08003028 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003028:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800302a:	6801      	ldr	r1, [r0, #0]
 800302c:	680b      	ldr	r3, [r1, #0]
 800302e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003032:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003034:	2320      	movs	r3, #32
 8003036:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800303a:	f7ff fd6d 	bl	8002b18 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 800303e:	2000      	movs	r0, #0
 8003040:	bd08      	pop	{r3, pc}

08003042 <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8003042:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003046:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b22      	cmp	r3, #34	; 0x22
 800304e:	d006      	beq.n	800305e <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003050:	6802      	ldr	r2, [r0, #0]
 8003052:	6993      	ldr	r3, [r2, #24]
 8003054:	f043 0308 	orr.w	r3, r3, #8
 8003058:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 800305a:	2002      	movs	r0, #2
 800305c:	4770      	bx	lr
{
 800305e:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003060:	6803      	ldr	r3, [r0, #0]
 8003062:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003064:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003066:	6881      	ldr	r1, [r0, #8]
 8003068:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800306c:	d00f      	beq.n	800308e <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800306e:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8003070:	1c4c      	adds	r4, r1, #1
 8003072:	6544      	str	r4, [r0, #84]	; 0x54
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	401a      	ands	r2, r3
 8003078:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 800307a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29b      	uxth	r3, r3
 8003084:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8003088:	b15b      	cbz	r3, 80030a2 <UART_Receive_IT+0x60>
    return HAL_OK;
 800308a:	2000      	movs	r0, #0
  }
}
 800308c:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800308e:	6901      	ldr	r1, [r0, #16]
 8003090:	2900      	cmp	r1, #0
 8003092:	d1ec      	bne.n	800306e <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8003094:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 8003096:	401a      	ands	r2, r3
 8003098:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 800309a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800309c:	3302      	adds	r3, #2
 800309e:	6543      	str	r3, [r0, #84]	; 0x54
 80030a0:	e7eb      	b.n	800307a <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a2:	6802      	ldr	r2, [r0, #0]
 80030a4:	6813      	ldr	r3, [r2, #0]
 80030a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030aa:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ac:	6802      	ldr	r2, [r0, #0]
 80030ae:	6893      	ldr	r3, [r2, #8]
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80030b6:	2320      	movs	r3, #32
 80030b8:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80030bc:	f000 fa2c 	bl	8003518 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80030c0:	2000      	movs	r0, #0
 80030c2:	bd10      	pop	{r4, pc}

080030c4 <HAL_UART_IRQHandler>:
{
 80030c4:	b538      	push	{r3, r4, r5, lr}
 80030c6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030c8:	6802      	ldr	r2, [r0, #0]
 80030ca:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030cc:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 80030ce:	f013 050f 	ands.w	r5, r3, #15
 80030d2:	d105      	bne.n	80030e0 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030d4:	f013 0f20 	tst.w	r3, #32
 80030d8:	d002      	beq.n	80030e0 <HAL_UART_IRQHandler+0x1c>
 80030da:	f011 0f20 	tst.w	r1, #32
 80030de:	d160      	bne.n	80031a2 <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 80030e0:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 80030e2:	2d00      	cmp	r5, #0
 80030e4:	d072      	beq.n	80031cc <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80030e6:	f010 0501 	ands.w	r5, r0, #1
 80030ea:	d102      	bne.n	80030f2 <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80030ec:	f411 7f90 	tst.w	r1, #288	; 0x120
 80030f0:	d06c      	beq.n	80031cc <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030f2:	f013 0f01 	tst.w	r3, #1
 80030f6:	d007      	beq.n	8003108 <HAL_UART_IRQHandler+0x44>
 80030f8:	f411 7f80 	tst.w	r1, #256	; 0x100
 80030fc:	d004      	beq.n	8003108 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80030fe:	2001      	movs	r0, #1
 8003100:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003102:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003104:	4302      	orrs	r2, r0
 8003106:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003108:	f013 0f02 	tst.w	r3, #2
 800310c:	d007      	beq.n	800311e <HAL_UART_IRQHandler+0x5a>
 800310e:	b135      	cbz	r5, 800311e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003110:	6822      	ldr	r2, [r4, #0]
 8003112:	2002      	movs	r0, #2
 8003114:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003116:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003118:	f042 0204 	orr.w	r2, r2, #4
 800311c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800311e:	f013 0f04 	tst.w	r3, #4
 8003122:	d007      	beq.n	8003134 <HAL_UART_IRQHandler+0x70>
 8003124:	b135      	cbz	r5, 8003134 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003126:	6822      	ldr	r2, [r4, #0]
 8003128:	2004      	movs	r0, #4
 800312a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800312c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800312e:	f042 0202 	orr.w	r2, r2, #2
 8003132:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003134:	f013 0f08 	tst.w	r3, #8
 8003138:	d009      	beq.n	800314e <HAL_UART_IRQHandler+0x8a>
 800313a:	f011 0f20 	tst.w	r1, #32
 800313e:	d100      	bne.n	8003142 <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003140:	b12d      	cbz	r5, 800314e <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003142:	6822      	ldr	r2, [r4, #0]
 8003144:	2008      	movs	r0, #8
 8003146:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003148:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800314a:	4302      	orrs	r2, r0
 800314c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800314e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003150:	2a00      	cmp	r2, #0
 8003152:	d04d      	beq.n	80031f0 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003154:	f013 0f20 	tst.w	r3, #32
 8003158:	d002      	beq.n	8003160 <HAL_UART_IRQHandler+0x9c>
 800315a:	f011 0f20 	tst.w	r1, #32
 800315e:	d123      	bne.n	80031a8 <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003160:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003162:	f013 0f08 	tst.w	r3, #8
 8003166:	d104      	bne.n	8003172 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800316c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003170:	d026      	beq.n	80031c0 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 8003172:	4620      	mov	r0, r4
 8003174:	f7ff fc6b 	bl	8002a4e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003180:	d01a      	beq.n	80031b8 <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003188:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800318a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800318c:	b183      	cbz	r3, 80031b0 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800318e:	4a23      	ldr	r2, [pc, #140]	; (800321c <HAL_UART_IRQHandler+0x158>)
 8003190:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003192:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003194:	f7fd fdaf 	bl	8000cf6 <HAL_DMA_Abort_IT>
 8003198:	b350      	cbz	r0, 80031f0 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800319a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800319c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800319e:	4798      	blx	r3
 80031a0:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 80031a2:	f7ff ff4e 	bl	8003042 <UART_Receive_IT>
      return;
 80031a6:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 80031a8:	4620      	mov	r0, r4
 80031aa:	f7ff ff4a 	bl	8003042 <UART_Receive_IT>
 80031ae:	e7d7      	b.n	8003160 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 80031b0:	4620      	mov	r0, r4
 80031b2:	f7ff fcb2 	bl	8002b1a <HAL_UART_ErrorCallback>
 80031b6:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 80031b8:	4620      	mov	r0, r4
 80031ba:	f7ff fcae 	bl	8002b1a <HAL_UART_ErrorCallback>
 80031be:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 80031c0:	4620      	mov	r0, r4
 80031c2:	f7ff fcaa 	bl	8002b1a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	66e3      	str	r3, [r4, #108]	; 0x6c
 80031ca:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80031cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80031d0:	d002      	beq.n	80031d8 <HAL_UART_IRQHandler+0x114>
 80031d2:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80031d6:	d10c      	bne.n	80031f2 <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80031dc:	d002      	beq.n	80031e4 <HAL_UART_IRQHandler+0x120>
 80031de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80031e2:	d112      	bne.n	800320a <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80031e8:	d002      	beq.n	80031f0 <HAL_UART_IRQHandler+0x12c>
 80031ea:	f011 0f40 	tst.w	r1, #64	; 0x40
 80031ee:	d110      	bne.n	8003212 <HAL_UART_IRQHandler+0x14e>
 80031f0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80031f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031f6:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80031f8:	2320      	movs	r3, #32
 80031fa:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 80031fe:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8003202:	4620      	mov	r0, r4
 8003204:	f000 f80c 	bl	8003220 <HAL_UARTEx_WakeupCallback>
    return;
 8003208:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 800320a:	4620      	mov	r0, r4
 800320c:	f7ff fed5 	bl	8002fba <UART_Transmit_IT>
    return;
 8003210:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8003212:	4620      	mov	r0, r4
 8003214:	f7ff ff08 	bl	8003028 <UART_EndTransmit_IT>
    return;
 8003218:	e7ea      	b.n	80031f0 <HAL_UART_IRQHandler+0x12c>
 800321a:	bf00      	nop
 800321c:	08002b1d 	.word	0x08002b1d

08003220 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003220:	4770      	bx	lr
	...

08003224 <TempConv>:
uint32_t TempConv(uint32_t tempVal)
{
	uint32_t temp = 0;
	uint32_t scale = 0;

	temp = ((100*tempVal)>>7)+((100*tempVal)>>12);
 8003224:	2364      	movs	r3, #100	; 0x64
 8003226:	fb03 f300 	mul.w	r3, r3, r0
 800322a:	0b18      	lsrs	r0, r3, #12
 800322c:	eb00 10d3 	add.w	r0, r0, r3, lsr #7
	scale = (temp-500)/10;
 8003230:	f5a0 70fa 	sub.w	r0, r0, #500	; 0x1f4
 8003234:	4b02      	ldr	r3, [pc, #8]	; (8003240 <TempConv+0x1c>)
 8003236:	fba3 3000 	umull	r3, r0, r3, r0

	return scale;
}
 800323a:	08c0      	lsrs	r0, r0, #3
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	cccccccd 	.word	0xcccccccd

08003244 <switchHeater>:

void switchHeater(void)
{
 8003244:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12,heaterState);
 8003246:	4b04      	ldr	r3, [pc, #16]	; (8003258 <switchHeater+0x14>)
 8003248:	881a      	ldrh	r2, [r3, #0]
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003250:	4802      	ldr	r0, [pc, #8]	; (800325c <switchHeater+0x18>)
 8003252:	f7fd fe3f 	bl	8000ed4 <HAL_GPIO_WritePin>
 8003256:	bd08      	pop	{r3, pc}
 8003258:	200002a8 	.word	0x200002a8
 800325c:	48000800 	.word	0x48000800

08003260 <switchValve>:
}

void switchValve(void)
{
 8003260:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,valveState);
 8003262:	4b04      	ldr	r3, [pc, #16]	; (8003274 <switchValve+0x14>)
 8003264:	881a      	ldrh	r2, [r3, #0]
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800326c:	4802      	ldr	r0, [pc, #8]	; (8003278 <switchValve+0x18>)
 800326e:	f7fd fe31 	bl	8000ed4 <HAL_GPIO_WritePin>
 8003272:	bd08      	pop	{r3, pc}
 8003274:	200002aa 	.word	0x200002aa
 8003278:	48000800 	.word	0x48000800

0800327c <StringTime2Int>:
}

uint8_t StringTime2Int(char* inputTimeString, uint8_t* outputTimeInt)
{
	int returnValue = 0;
	timeL += 1;
 800327c:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <StringTime2Int+0x54>)
 800327e:	7813      	ldrb	r3, [r2, #0]
 8003280:	3301      	adds	r3, #1
 8003282:	b2db      	uxtb	r3, r3
 8003284:	7013      	strb	r3, [r2, #0]

	if (*inputTimeString == ',')
 8003286:	7803      	ldrb	r3, [r0, #0]
 8003288:	2b2c      	cmp	r3, #44	; 0x2c
 800328a:	d01d      	beq.n	80032c8 <StringTime2Int+0x4c>
{
 800328c:	b410      	push	{r4}
 800328e:	2300      	movs	r3, #0
		return 0;

	while ((*inputTimeString >= '0') && (*inputTimeString <= '9'))
 8003290:	7802      	ldrb	r2, [r0, #0]
 8003292:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8003296:	b2e4      	uxtb	r4, r4
 8003298:	2c09      	cmp	r4, #9
 800329a:	d80e      	bhi.n	80032ba <StringTime2Int+0x3e>
	{
		returnValue *= 10;
 800329c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80032a0:	005c      	lsls	r4, r3, #1
		returnValue += (*inputTimeString - 48);
 80032a2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80032a6:	4423      	add	r3, r4

		if (returnValue >= 128)
 80032a8:	2b7f      	cmp	r3, #127	; 0x7f
 80032aa:	dc0f      	bgt.n	80032cc <StringTime2Int+0x50>
			return 0;

		inputTimeString++;
 80032ac:	3001      	adds	r0, #1
		timeL++;
 80032ae:	4c08      	ldr	r4, [pc, #32]	; (80032d0 <StringTime2Int+0x54>)
 80032b0:	7822      	ldrb	r2, [r4, #0]
 80032b2:	3201      	adds	r2, #1
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	7022      	strb	r2, [r4, #0]
 80032b8:	e7ea      	b.n	8003290 <StringTime2Int+0x14>
	}
	*outputTimeInt = (int8_t)(returnValue);
 80032ba:	700b      	strb	r3, [r1, #0]
	return timeL;
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <StringTime2Int+0x54>)
 80032be:	7818      	ldrb	r0, [r3, #0]
 80032c0:	b2c0      	uxtb	r0, r0
}
 80032c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032c6:	4770      	bx	lr
		return 0;
 80032c8:	2000      	movs	r0, #0
 80032ca:	4770      	bx	lr
			return 0;
 80032cc:	2000      	movs	r0, #0
 80032ce:	e7f8      	b.n	80032c2 <StringTime2Int+0x46>
 80032d0:	20000278 	.word	0x20000278

080032d4 <String2Int>:
uint8_t String2Int(char* inputString, int16_t* outputInt)
{
	int returnValue = 0;
	int sign = 1;

	if (*inputString == '\0')
 80032d4:	7803      	ldrb	r3, [r0, #0]
 80032d6:	b353      	cbz	r3, 800332e <String2Int+0x5a>
{
 80032d8:	b430      	push	{r4, r5}
		return 0;

	if (*inputString == '-')
 80032da:	2b2d      	cmp	r3, #45	; 0x2d
 80032dc:	d002      	beq.n	80032e4 <String2Int+0x10>
	int sign = 1;
 80032de:	2501      	movs	r5, #1
 80032e0:	2300      	movs	r3, #0
 80032e2:	e009      	b.n	80032f8 <String2Int+0x24>
	{
		sign = -1;
		inputString++;
 80032e4:	3001      	adds	r0, #1
		sign = -1;
 80032e6:	f04f 35ff 	mov.w	r5, #4294967295
 80032ea:	e7f9      	b.n	80032e0 <String2Int+0xc>
	while ((*inputString >= '0') && (*inputString <= '9'))
	{
		returnValue *= 10;
		returnValue += (*inputString - 48);

		if (((sign == 1) && (returnValue >= 32768)) ||
 80032ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f0:	db0f      	blt.n	8003312 <String2Int+0x3e>
				((sign == -1) && (returnValue >= 32769)))
			return 0;
 80032f2:	2000      	movs	r0, #0
 80032f4:	e019      	b.n	800332a <String2Int+0x56>

		inputString++;
 80032f6:	3001      	adds	r0, #1
	while ((*inputString >= '0') && (*inputString <= '9'))
 80032f8:	7802      	ldrb	r2, [r0, #0]
 80032fa:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 80032fe:	b2e4      	uxtb	r4, r4
 8003300:	2c09      	cmp	r4, #9
 8003302:	d80e      	bhi.n	8003322 <String2Int+0x4e>
		returnValue *= 10;
 8003304:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003308:	005c      	lsls	r4, r3, #1
		returnValue += (*inputString - 48);
 800330a:	3a30      	subs	r2, #48	; 0x30
 800330c:	18a3      	adds	r3, r4, r2
		if (((sign == 1) && (returnValue >= 32768)) ||
 800330e:	2d01      	cmp	r5, #1
 8003310:	d0ec      	beq.n	80032ec <String2Int+0x18>
 8003312:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003316:	d1ee      	bne.n	80032f6 <String2Int+0x22>
				((sign == -1) && (returnValue >= 32769)))
 8003318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800331c:	ddeb      	ble.n	80032f6 <String2Int+0x22>
			return 0;
 800331e:	2000      	movs	r0, #0
 8003320:	e003      	b.n	800332a <String2Int+0x56>
	}
	*outputInt = (int16_t)(sign * returnValue);
 8003322:	fb15 f303 	smulbb	r3, r5, r3
 8003326:	800b      	strh	r3, [r1, #0]
	return 1;
 8003328:	2001      	movs	r0, #1
}
 800332a:	bc30      	pop	{r4, r5}
 800332c:	4770      	bx	lr
		return 0;
 800332e:	2000      	movs	r0, #0
 8003330:	4770      	bx	lr
	...

08003334 <Int2String>:
{
	int numWritten = 0;
	int writePosition = 0;
	uint8_t digits = 0;

	if (maxL == 0)
 8003334:	2a00      	cmp	r2, #0
 8003336:	d044      	beq.n	80033c2 <Int2String+0x8e>
{
 8003338:	b470      	push	{r4, r5, r6}
 800333a:	4614      	mov	r4, r2
		return 0;

	if (value < 0)
 800333c:	2900      	cmp	r1, #0
 800333e:	db13      	blt.n	8003368 <Int2String+0x34>
	int numWritten = 0;
 8003340:	2500      	movs	r5, #0
		maxL--;
		value = -value;
		numWritten = 1;
	}

	if (value < 10)
 8003342:	2909      	cmp	r1, #9
 8003344:	dd18      	ble.n	8003378 <Int2String+0x44>
		digits = 1;
	else if (value < 100)
 8003346:	2963      	cmp	r1, #99	; 0x63
 8003348:	dd1b      	ble.n	8003382 <Int2String+0x4e>
		digits = 2;
	else if (value < 1000)
 800334a:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800334e:	db1a      	blt.n	8003386 <Int2String+0x52>
		digits = 3;
	else if (value < 10000)
 8003350:	f242 730f 	movw	r3, #9999	; 0x270f
 8003354:	4299      	cmp	r1, r3
 8003356:	dd18      	ble.n	800338a <Int2String+0x56>
		digits = 4;
	else if (value < 100000)
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <Int2String+0x94>)
 800335a:	4299      	cmp	r1, r3
 800335c:	dd17      	ble.n	800338e <Int2String+0x5a>
		digits = 5;
	else if (value < 1000000)
 800335e:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <Int2String+0x98>)
 8003360:	4299      	cmp	r1, r3
 8003362:	dc16      	bgt.n	8003392 <Int2String+0x5e>
		digits = 6;
 8003364:	2306      	movs	r3, #6
 8003366:	e008      	b.n	800337a <Int2String+0x46>
		outputString[0] = '-';
 8003368:	232d      	movs	r3, #45	; 0x2d
 800336a:	f800 3b01 	strb.w	r3, [r0], #1
		maxL--;
 800336e:	1e54      	subs	r4, r2, #1
 8003370:	b2e4      	uxtb	r4, r4
		value = -value;
 8003372:	4249      	negs	r1, r1
		numWritten = 1;
 8003374:	2501      	movs	r5, #1
 8003376:	e7e4      	b.n	8003342 <Int2String+0xe>
		digits = 1;
 8003378:	2301      	movs	r3, #1
	else
		digits = 7;

	if (digits > maxL)
 800337a:	429c      	cmp	r4, r3
 800337c:	d21c      	bcs.n	80033b8 <Int2String+0x84>
		return 0; // error - not enough space in output string!
 800337e:	2000      	movs	r0, #0
 8003380:	e01d      	b.n	80033be <Int2String+0x8a>
		digits = 2;
 8003382:	2302      	movs	r3, #2
 8003384:	e7f9      	b.n	800337a <Int2String+0x46>
		digits = 3;
 8003386:	2303      	movs	r3, #3
 8003388:	e7f7      	b.n	800337a <Int2String+0x46>
		digits = 4;
 800338a:	2304      	movs	r3, #4
 800338c:	e7f5      	b.n	800337a <Int2String+0x46>
		digits = 5;
 800338e:	2305      	movs	r3, #5
 8003390:	e7f3      	b.n	800337a <Int2String+0x46>
		digits = 7;
 8003392:	2307      	movs	r3, #7
 8003394:	e7f1      	b.n	800337a <Int2String+0x46>

	writePosition = digits;
	while (writePosition > 0)
	{
		outputString[writePosition-1] = (char) ((value % 10) + 48);
 8003396:	1e5a      	subs	r2, r3, #1
 8003398:	4c0d      	ldr	r4, [pc, #52]	; (80033d0 <Int2String+0x9c>)
 800339a:	fb84 3401 	smull	r3, r4, r4, r1
 800339e:	17cb      	asrs	r3, r1, #31
 80033a0:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
 80033a4:	461e      	mov	r6, r3
 80033a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033aa:	005c      	lsls	r4, r3, #1
 80033ac:	1b0b      	subs	r3, r1, r4
 80033ae:	3330      	adds	r3, #48	; 0x30
 80033b0:	5483      	strb	r3, [r0, r2]
		value /= 10;
 80033b2:	4631      	mov	r1, r6
		writePosition--;
 80033b4:	4613      	mov	r3, r2
		numWritten++;
 80033b6:	3501      	adds	r5, #1
	while (writePosition > 0)
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	dcec      	bgt.n	8003396 <Int2String+0x62>
	}

	return numWritten;
 80033bc:	4628      	mov	r0, r5
}
 80033be:	bc70      	pop	{r4, r5, r6}
 80033c0:	4770      	bx	lr
		return 0;
 80033c2:	2000      	movs	r0, #0
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	0001869f 	.word	0x0001869f
 80033cc:	000f423f 	.word	0x000f423f
 80033d0:	66666667 	.word	0x66666667

080033d4 <writeToPins>:

void writeToPins(uint8_t segments[], uint8_t pins[], int segmentsL, uint8_t i)
{
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d6:	4607      	mov	r7, r0
 80033d8:	460d      	mov	r5, r1
 80033da:	461c      	mov	r4, r3
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segments[i] >> 0) & 0b00000001)); //1
 80033dc:	5cc2      	ldrb	r2, [r0, r3]
 80033de:	f082 0201 	eor.w	r2, r2, #1
 80033e2:	4e39      	ldr	r6, [pc, #228]	; (80034c8 <writeToPins+0xf4>)
 80033e4:	f002 0201 	and.w	r2, r2, #1
 80033e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033ec:	4630      	mov	r0, r6
 80033ee:	f7fd fd71 	bl	8000ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segments[i] >> 1) & 0b00000001)); //2
 80033f2:	5d3a      	ldrb	r2, [r7, r4]
 80033f4:	0852      	lsrs	r2, r2, #1
 80033f6:	f082 0201 	eor.w	r2, r2, #1
 80033fa:	f002 0201 	and.w	r2, r2, #1
 80033fe:	2110      	movs	r1, #16
 8003400:	4630      	mov	r0, r6
 8003402:	f7fd fd67 	bl	8000ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segments[i] >> 2) & 0b00000001)); //3
 8003406:	5d3a      	ldrb	r2, [r7, r4]
 8003408:	0892      	lsrs	r2, r2, #2
 800340a:	f082 0201 	eor.w	r2, r2, #1
 800340e:	f002 0201 	and.w	r2, r2, #1
 8003412:	2120      	movs	r1, #32
 8003414:	4630      	mov	r0, r6
 8003416:	f7fd fd5d 	bl	8000ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segments[i] >> 3) & 0b00000001)); //4
 800341a:	5d3a      	ldrb	r2, [r7, r4]
 800341c:	08d2      	lsrs	r2, r2, #3
 800341e:	f082 0201 	eor.w	r2, r2, #1
 8003422:	f002 0201 	and.w	r2, r2, #1
 8003426:	2108      	movs	r1, #8
 8003428:	4630      	mov	r0, r6
 800342a:	f7fd fd53 	bl	8000ed4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, (~(pins[i] >> 0) & 0b00000001)); //a
 800342e:	5d2a      	ldrb	r2, [r5, r4]
 8003430:	f082 0201 	eor.w	r2, r2, #1
 8003434:	f002 0201 	and.w	r2, r2, #1
 8003438:	2120      	movs	r1, #32
 800343a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800343e:	f7fd fd49 	bl	8000ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6, (~(pins[i] >> 1) & 0b00000001)); //b
 8003442:	5d2a      	ldrb	r2, [r5, r4]
 8003444:	0852      	lsrs	r2, r2, #1
 8003446:	f082 0201 	eor.w	r2, r2, #1
 800344a:	f002 0201 	and.w	r2, r2, #1
 800344e:	2140      	movs	r1, #64	; 0x40
 8003450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003454:	f7fd fd3e 	bl	8000ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, (~(pins[i] >> 2) & 0b00000001)); //c
 8003458:	5d2a      	ldrb	r2, [r5, r4]
 800345a:	0892      	lsrs	r2, r2, #2
 800345c:	f082 0201 	eor.w	r2, r2, #1
 8003460:	f002 0201 	and.w	r2, r2, #1
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800346a:	f7fd fd33 	bl	8000ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6, (~(pins[i] >> 3) & 0b00000001)); //d
 800346e:	5d2a      	ldrb	r2, [r5, r4]
 8003470:	08d2      	lsrs	r2, r2, #3
 8003472:	f082 0201 	eor.w	r2, r2, #1
 8003476:	f002 0201 	and.w	r2, r2, #1
 800347a:	2140      	movs	r1, #64	; 0x40
 800347c:	4630      	mov	r0, r6
 800347e:	f7fd fd29 	bl	8000ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7, (~(pins[i] >> 4) & 0b00000001)); //e
 8003482:	5d2a      	ldrb	r2, [r5, r4]
 8003484:	0912      	lsrs	r2, r2, #4
 8003486:	f082 0201 	eor.w	r2, r2, #1
 800348a:	f002 0201 	and.w	r2, r2, #1
 800348e:	2180      	movs	r1, #128	; 0x80
 8003490:	480e      	ldr	r0, [pc, #56]	; (80034cc <writeToPins+0xf8>)
 8003492:	f7fd fd1f 	bl	8000ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, (~(pins[i] >> 5) & 0b00000001)); //f
 8003496:	5d2a      	ldrb	r2, [r5, r4]
 8003498:	0952      	lsrs	r2, r2, #5
 800349a:	f082 0201 	eor.w	r2, r2, #1
 800349e:	f002 0201 	and.w	r2, r2, #1
 80034a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034aa:	f7fd fd13 	bl	8000ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, (~(pins[i] >> 6) & 0b00000001)); //g
 80034ae:	5d2a      	ldrb	r2, [r5, r4]
 80034b0:	0992      	lsrs	r2, r2, #6
 80034b2:	f082 0201 	eor.w	r2, r2, #1
 80034b6:	f002 0201 	and.w	r2, r2, #1
 80034ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c2:	f7fd fd07 	bl	8000ed4 <HAL_GPIO_WritePin>
 80034c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034c8:	48000400 	.word	0x48000400
 80034cc:	48000800 	.word	0x48000800

080034d0 <timeToEpoch>:

}

time_t timeToEpoch(RTC_DateTypeDef dateLive, RTC_TimeTypeDef timeLive)
{
 80034d0:	b084      	sub	sp, #16
 80034d2:	b510      	push	{r4, lr}
 80034d4:	b08c      	sub	sp, #48	; 0x30
 80034d6:	9001      	str	r0, [sp, #4]
 80034d8:	ac0f      	add	r4, sp, #60	; 0x3c
 80034da:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	//-----------------------------------------------------------------------possibly hardcode date protion

	time_t epoch;
	struct tm time;

	time.tm_year = dateLive.Year - 1900;
 80034de:	0e03      	lsrs	r3, r0, #24
 80034e0:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80034e4:	9308      	str	r3, [sp, #32]
	time.tm_mon = dateLive.Month;
 80034e6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80034ea:	9307      	str	r3, [sp, #28]
	time.tm_mday = dateLive.Date;
 80034ec:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80034f0:	9006      	str	r0, [sp, #24]
	time.tm_hour = timeLive.Hours;
 80034f2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80034f6:	9305      	str	r3, [sp, #20]
	time.tm_min = timeLive.Minutes;
 80034f8:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 80034fc:	9304      	str	r3, [sp, #16]
	time.tm_sec = timeLive.Seconds;
 80034fe:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8003502:	9303      	str	r3, [sp, #12]
	time.tm_isdst = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	930b      	str	r3, [sp, #44]	; 0x2c

	return epoch = mktime(&time);
 8003508:	a803      	add	r0, sp, #12
 800350a:	f001 faab 	bl	8004a64 <mktime>
}
 800350e:	b00c      	add	sp, #48	; 0x30
 8003510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003514:	b004      	add	sp, #16
 8003516:	4770      	bx	lr

08003518 <HAL_UART_RxCpltCallback>:
// This function will execute whenever a character is received from the UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
	// the interrupt handler will automatically put the received character in the uartRXChar variable (no need to write any code for that).
	// so all we do it set flag to indicate character was received, and then process the received character further in the main loop
	uartRxFlag = true;
 8003518:	2201      	movs	r2, #1
 800351a:	4b01      	ldr	r3, [pc, #4]	; (8003520 <HAL_UART_RxCpltCallback+0x8>)
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	4770      	bx	lr
 8003520:	200002ad 	.word	0x200002ad

08003524 <HAL_TIM_PeriodElapsedCallback>:
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //every 250 ns
{
	if (htim == &htim2)
 8003524:	4b03      	ldr	r3, [pc, #12]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003526:	4283      	cmp	r3, r0
 8003528:	d000      	beq.n	800352c <HAL_TIM_PeriodElapsedCallback+0x8>
 800352a:	4770      	bx	lr
		adcFlag = true;
 800352c:	2201      	movs	r2, #1
 800352e:	4b02      	ldr	r3, [pc, #8]	; (8003538 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8003530:	701a      	strb	r2, [r3, #0]

}
 8003532:	e7fa      	b.n	800352a <HAL_TIM_PeriodElapsedCallback+0x6>
 8003534:	200003f0 	.word	0x200003f0
 8003538:	200002bc 	.word	0x200002bc

0800353c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	flowHighFlag = 1;
 800353c:	2301      	movs	r3, #1
 800353e:	4a02      	ldr	r2, [pc, #8]	; (8003548 <HAL_GPIO_EXTI_Callback+0xc>)
 8003540:	7013      	strb	r3, [r2, #0]
	firstHighFlag = 1;
 8003542:	4a02      	ldr	r2, [pc, #8]	; (800354c <HAL_GPIO_EXTI_Callback+0x10>)
 8003544:	7013      	strb	r3, [r2, #0]
 8003546:	4770      	bx	lr
 8003548:	200002ac 	.word	0x200002ac
 800354c:	20000290 	.word	0x20000290

08003550 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
static void MX_GPIO_Init(void)
{
 8003550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003554:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003556:	4b56      	ldr	r3, [pc, #344]	; (80036b0 <MX_GPIO_Init+0x160>)
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800355e:	615a      	str	r2, [r3, #20]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003566:	9201      	str	r2, [sp, #4]
 8003568:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800356a:	695a      	ldr	r2, [r3, #20]
 800356c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003570:	615a      	str	r2, [r3, #20]
 8003572:	695a      	ldr	r2, [r3, #20]
 8003574:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003578:	9202      	str	r2, [sp, #8]
 800357a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003582:	615a      	str	r2, [r3, #20]
 8003584:	695a      	ldr	r2, [r3, #20]
 8003586:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800358a:	9203      	str	r2, [sp, #12]
 800358c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003594:	615a      	str	r2, [r3, #20]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359c:	9304      	str	r3, [sp, #16]
 800359e:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_SET);
 80035a0:	2201      	movs	r2, #1
 80035a2:	2113      	movs	r1, #19
 80035a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035a8:	f7fd fc94 	bl	8000ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 80035ac:	2200      	movs	r2, #0
 80035ae:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80035b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035b6:	f7fd fc8d 	bl	8000ed4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80035ba:	4f3e      	ldr	r7, [pc, #248]	; (80036b4 <MX_GPIO_Init+0x164>)
 80035bc:	2200      	movs	r2, #0
 80035be:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80035c2:	4638      	mov	r0, r7
 80035c4:	f7fd fc86 	bl	8000ed4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 80035c8:	4d3b      	ldr	r5, [pc, #236]	; (80036b8 <MX_GPIO_Init+0x168>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 80035d0:	4628      	mov	r0, r5
 80035d2:	f7fd fc7f 	bl	8000ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80035d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035da:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035dc:	4b37      	ldr	r3, [pc, #220]	; (80036bc <MX_GPIO_Init+0x16c>)
 80035de:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	2400      	movs	r4, #0
 80035e2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80035e4:	a905      	add	r1, sp, #20
 80035e6:	4628      	mov	r0, r5
 80035e8:	f7fd fbaa 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035ec:	f04f 0803 	mov.w	r8, #3
 80035f0:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035f8:	a905      	add	r1, sp, #20
 80035fa:	4628      	mov	r0, r5
 80035fc:	f7fd fba0 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8003600:	2313      	movs	r3, #19
 8003602:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003604:	2311      	movs	r3, #17
 8003606:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003608:	2601      	movs	r6, #1
 800360a:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360e:	a905      	add	r1, sp, #20
 8003610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003614:	f7fd fb94 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003618:	230c      	movs	r3, #12
 800361a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361c:	2302      	movs	r3, #2
 800361e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003622:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003626:	2307      	movs	r3, #7
 8003628:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362a:	a905      	add	r1, sp, #20
 800362c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003630:	f7fd fb86 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8003634:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8003638:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800363a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003640:	a905      	add	r1, sp, #20
 8003642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003646:	f7fd fb7b 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 800364a:	f44f 638f 	mov.w	r3, #1144	; 0x478
 800364e:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003650:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003654:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003656:	a905      	add	r1, sp, #20
 8003658:	4638      	mov	r0, r7
 800365a:	f7fd fb71 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800365e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003662:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003664:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003668:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800366a:	a905      	add	r1, sp, #20
 800366c:	4628      	mov	r0, r5
 800366e:	f7fd fb67 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003676:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <MX_GPIO_Init+0x170>)
 800367a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367e:	a905      	add	r1, sp, #20
 8003680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003684:	f7fd fb5c 	bl	8000d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003688:	f44f 7340 	mov.w	r3, #768	; 0x300
 800368c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800368e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003692:	a905      	add	r1, sp, #20
 8003694:	4638      	mov	r0, r7
 8003696:	f7fd fb53 	bl	8000d40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800369a:	4622      	mov	r2, r4
 800369c:	4621      	mov	r1, r4
 800369e:	2028      	movs	r0, #40	; 0x28
 80036a0:	f7fd fac0 	bl	8000c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80036a4:	2028      	movs	r0, #40	; 0x28
 80036a6:	f7fd faef 	bl	8000c88 <HAL_NVIC_EnableIRQ>

}
 80036aa:	b00a      	add	sp, #40	; 0x28
 80036ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	48000400 	.word	0x48000400
 80036b8:	48000800 	.word	0x48000800
 80036bc:	10210000 	.word	0x10210000
 80036c0:	10310000 	.word	0x10310000

080036c4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80036c4:	e7fe      	b.n	80036c4 <_Error_Handler>
	...

080036c8 <MX_USART1_UART_Init>:
{
 80036c8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80036ca:	480c      	ldr	r0, [pc, #48]	; (80036fc <MX_USART1_UART_Init+0x34>)
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <MX_USART1_UART_Init+0x38>)
 80036ce:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80036d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80036d4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036d6:	2300      	movs	r3, #0
 80036d8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036da:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036dc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036de:	220c      	movs	r2, #12
 80036e0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036e2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036e4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036e6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036e8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036ea:	f7ff fc32 	bl	8002f52 <HAL_UART_Init>
 80036ee:	b900      	cbnz	r0, 80036f2 <MX_USART1_UART_Init+0x2a>
 80036f0:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80036f2:	f44f 71c1 	mov.w	r1, #386	; 0x182
 80036f6:	4803      	ldr	r0, [pc, #12]	; (8003704 <MX_USART1_UART_Init+0x3c>)
 80036f8:	f7ff ffe4 	bl	80036c4 <_Error_Handler>
 80036fc:	20000360 	.word	0x20000360
 8003700:	40013800 	.word	0x40013800
 8003704:	08005f24 	.word	0x08005f24

08003708 <MX_ADC1_Init>:
{
 8003708:	b500      	push	{lr}
 800370a:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Instance = ADC1;
 800370c:	481d      	ldr	r0, [pc, #116]	; (8003784 <MX_ADC1_Init+0x7c>)
 800370e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003712:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003714:	2300      	movs	r3, #0
 8003716:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003718:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800371a:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800371c:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800371e:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003720:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003722:	2201      	movs	r2, #1
 8003724:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003726:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003728:	6202      	str	r2, [r0, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800372a:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800372c:	2204      	movs	r2, #4
 800372e:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003730:	6183      	str	r3, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003732:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003734:	f7fc fe70 	bl	8000418 <HAL_ADC_Init>
 8003738:	b9c0      	cbnz	r0, 800376c <MX_ADC1_Init+0x64>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800373a:	a90a      	add	r1, sp, #40	; 0x28
 800373c:	2300      	movs	r3, #0
 800373e:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003742:	4810      	ldr	r0, [pc, #64]	; (8003784 <MX_ADC1_Init+0x7c>)
 8003744:	f7fd f9be 	bl	8000ac4 <HAL_ADCEx_MultiModeConfigChannel>
 8003748:	b9a0      	cbnz	r0, 8003774 <MX_ADC1_Init+0x6c>
  sConfig.Channel = ADC_CHANNEL_9;
 800374a:	2309      	movs	r3, #9
 800374c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800374e:	2301      	movs	r3, #1
 8003750:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003752:	2300      	movs	r3, #0
 8003754:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003756:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003758:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 800375a:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800375c:	a901      	add	r1, sp, #4
 800375e:	4809      	ldr	r0, [pc, #36]	; (8003784 <MX_ADC1_Init+0x7c>)
 8003760:	f7fc ffee 	bl	8000740 <HAL_ADC_ConfigChannel>
 8003764:	b950      	cbnz	r0, 800377c <MX_ADC1_Init+0x74>
}
 8003766:	b00b      	add	sp, #44	; 0x2c
 8003768:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800376c:	21dd      	movs	r1, #221	; 0xdd
 800376e:	4806      	ldr	r0, [pc, #24]	; (8003788 <MX_ADC1_Init+0x80>)
 8003770:	f7ff ffa8 	bl	80036c4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003774:	21e5      	movs	r1, #229	; 0xe5
 8003776:	4804      	ldr	r0, [pc, #16]	; (8003788 <MX_ADC1_Init+0x80>)
 8003778:	f7ff ffa4 	bl	80036c4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800377c:	21f2      	movs	r1, #242	; 0xf2
 800377e:	4802      	ldr	r0, [pc, #8]	; (8003788 <MX_ADC1_Init+0x80>)
 8003780:	f7ff ffa0 	bl	80036c4 <_Error_Handler>
 8003784:	2000030c 	.word	0x2000030c
 8003788:	08005f24 	.word	0x08005f24

0800378c <MX_I2C1_Init>:
{
 800378c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800378e:	4815      	ldr	r0, [pc, #84]	; (80037e4 <MX_I2C1_Init+0x58>)
 8003790:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <MX_I2C1_Init+0x5c>)
 8003792:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003794:	4b15      	ldr	r3, [pc, #84]	; (80037ec <MX_I2C1_Init+0x60>)
 8003796:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800379c:	2201      	movs	r2, #1
 800379e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037a0:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80037a2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80037a4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037a6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037a8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037aa:	f7fd fbf7 	bl	8000f9c <HAL_I2C_Init>
 80037ae:	b950      	cbnz	r0, 80037c6 <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037b0:	2100      	movs	r1, #0
 80037b2:	480c      	ldr	r0, [pc, #48]	; (80037e4 <MX_I2C1_Init+0x58>)
 80037b4:	f7fd ff17 	bl	80015e6 <HAL_I2CEx_ConfigAnalogFilter>
 80037b8:	b950      	cbnz	r0, 80037d0 <MX_I2C1_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80037ba:	2100      	movs	r1, #0
 80037bc:	4809      	ldr	r0, [pc, #36]	; (80037e4 <MX_I2C1_Init+0x58>)
 80037be:	f7fd ff40 	bl	8001642 <HAL_I2CEx_ConfigDigitalFilter>
 80037c2:	b950      	cbnz	r0, 80037da <MX_I2C1_Init+0x4e>
 80037c4:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80037c6:	f44f 7183 	mov.w	r1, #262	; 0x106
 80037ca:	4809      	ldr	r0, [pc, #36]	; (80037f0 <MX_I2C1_Init+0x64>)
 80037cc:	f7ff ff7a 	bl	80036c4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80037d0:	f240 110d 	movw	r1, #269	; 0x10d
 80037d4:	4806      	ldr	r0, [pc, #24]	; (80037f0 <MX_I2C1_Init+0x64>)
 80037d6:	f7ff ff75 	bl	80036c4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80037da:	f44f 718a 	mov.w	r1, #276	; 0x114
 80037de:	4804      	ldr	r0, [pc, #16]	; (80037f0 <MX_I2C1_Init+0x64>)
 80037e0:	f7ff ff70 	bl	80036c4 <_Error_Handler>
 80037e4:	200002c0 	.word	0x200002c0
 80037e8:	40005400 	.word	0x40005400
 80037ec:	2000090e 	.word	0x2000090e
 80037f0:	08005f24 	.word	0x08005f24

080037f4 <MX_RTC_Init>:
{
 80037f4:	b500      	push	{lr}
 80037f6:	b087      	sub	sp, #28
  hrtc.Instance = RTC;
 80037f8:	482b      	ldr	r0, [pc, #172]	; (80038a8 <MX_RTC_Init+0xb4>)
 80037fa:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <MX_RTC_Init+0xb8>)
 80037fc:	6003      	str	r3, [r0, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 80037fe:	2100      	movs	r1, #0
 8003800:	f7fe fef9 	bl	80025f6 <HAL_RTCEx_BKUPRead>
 8003804:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8003808:	4298      	cmp	r0, r3
 800380a:	d036      	beq.n	800387a <MX_RTC_Init+0x86>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800380c:	4826      	ldr	r0, [pc, #152]	; (80038a8 <MX_RTC_Init+0xb4>)
 800380e:	2300      	movs	r3, #0
 8003810:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003812:	227f      	movs	r2, #127	; 0x7f
 8003814:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8003816:	22ff      	movs	r2, #255	; 0xff
 8003818:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800381a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800381c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800381e:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003820:	f7fe fca3 	bl	800216a <HAL_RTC_Init>
 8003824:	bb60      	cbnz	r0, 8003880 <MX_RTC_Init+0x8c>
  sTime.Hours = 0x0;
 8003826:	2300      	movs	r3, #0
 8003828:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 800382c:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8003830:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003834:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003836:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003838:	2201      	movs	r2, #1
 800383a:	a901      	add	r1, sp, #4
 800383c:	481a      	ldr	r0, [pc, #104]	; (80038a8 <MX_RTC_Init+0xb4>)
 800383e:	f7fe fd01 	bl	8002244 <HAL_RTC_SetTime>
 8003842:	bb10      	cbnz	r0, 800388a <MX_RTC_Init+0x96>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003844:	2201      	movs	r2, #1
 8003846:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 800384a:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 800384e:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 8003852:	2300      	movs	r3, #0
 8003854:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003858:	4669      	mov	r1, sp
 800385a:	4813      	ldr	r0, [pc, #76]	; (80038a8 <MX_RTC_Init+0xb4>)
 800385c:	f7fe fd71 	bl	8002342 <HAL_RTC_SetDate>
 8003860:	b9c0      	cbnz	r0, 8003894 <MX_RTC_Init+0xa0>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003862:	2204      	movs	r2, #4
 8003864:	2100      	movs	r1, #0
 8003866:	4810      	ldr	r0, [pc, #64]	; (80038a8 <MX_RTC_Init+0xb4>)
 8003868:	f7fe fe2e 	bl	80024c8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800386c:	b9b8      	cbnz	r0, 800389e <MX_RTC_Init+0xaa>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 800386e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8003872:	2100      	movs	r1, #0
 8003874:	480c      	ldr	r0, [pc, #48]	; (80038a8 <MX_RTC_Init+0xb4>)
 8003876:	f7fe feb9 	bl	80025ec <HAL_RTCEx_BKUPWrite>
}
 800387a:	b007      	add	sp, #28
 800387c:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003880:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003884:	480a      	ldr	r0, [pc, #40]	; (80038b0 <MX_RTC_Init+0xbc>)
 8003886:	f7ff ff1d 	bl	80036c4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800388a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800388e:	4808      	ldr	r0, [pc, #32]	; (80038b0 <MX_RTC_Init+0xbc>)
 8003890:	f7ff ff18 	bl	80036c4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003894:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003898:	4805      	ldr	r0, [pc, #20]	; (80038b0 <MX_RTC_Init+0xbc>)
 800389a:	f7ff ff13 	bl	80036c4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800389e:	f240 1149 	movw	r1, #329	; 0x149
 80038a2:	4803      	ldr	r0, [pc, #12]	; (80038b0 <MX_RTC_Init+0xbc>)
 80038a4:	f7ff ff0e 	bl	80036c4 <_Error_Handler>
 80038a8:	200003d0 	.word	0x200003d0
 80038ac:	40002800 	.word	0x40002800
 80038b0:	08005f24 	.word	0x08005f24

080038b4 <MX_TIM2_Init>:
{
 80038b4:	b500      	push	{lr}
 80038b6:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 80038b8:	4819      	ldr	r0, [pc, #100]	; (8003920 <MX_TIM2_Init+0x6c>)
 80038ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038be:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80038c4:	2210      	movs	r2, #16
 80038c6:	6082      	str	r2, [r0, #8]
  htim2.Init.Period = 16000;
 80038c8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80038cc:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ce:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038d4:	f7fe ffde 	bl	8002894 <HAL_TIM_Base_Init>
 80038d8:	b998      	cbnz	r0, 8003902 <MX_TIM2_Init+0x4e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038da:	a908      	add	r1, sp, #32
 80038dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038e0:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038e4:	480e      	ldr	r0, [pc, #56]	; (8003920 <MX_TIM2_Init+0x6c>)
 80038e6:	f7fe fffb 	bl	80028e0 <HAL_TIM_ConfigClockSource>
 80038ea:	b978      	cbnz	r0, 800390c <MX_TIM2_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ec:	2300      	movs	r3, #0
 80038ee:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038f0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038f2:	a901      	add	r1, sp, #4
 80038f4:	480a      	ldr	r0, [pc, #40]	; (8003920 <MX_TIM2_Init+0x6c>)
 80038f6:	f7ff f87f 	bl	80029f8 <HAL_TIMEx_MasterConfigSynchronization>
 80038fa:	b960      	cbnz	r0, 8003916 <MX_TIM2_Init+0x62>
}
 80038fc:	b009      	add	sp, #36	; 0x24
 80038fe:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003902:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8003906:	4807      	ldr	r0, [pc, #28]	; (8003924 <MX_TIM2_Init+0x70>)
 8003908:	f7ff fedc 	bl	80036c4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800390c:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8003910:	4804      	ldr	r0, [pc, #16]	; (8003924 <MX_TIM2_Init+0x70>)
 8003912:	f7ff fed7 	bl	80036c4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003916:	f240 116d 	movw	r1, #365	; 0x16d
 800391a:	4802      	ldr	r0, [pc, #8]	; (8003924 <MX_TIM2_Init+0x70>)
 800391c:	f7ff fed2 	bl	80036c4 <_Error_Handler>
 8003920:	200003f0 	.word	0x200003f0
 8003924:	08005f24 	.word	0x08005f24

08003928 <SystemClock_Config>:
{
 8003928:	b500      	push	{lr}
 800392a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800392c:	230a      	movs	r3, #10
 800392e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003930:	2301      	movs	r3, #1
 8003932:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003934:	2210      	movs	r2, #16
 8003936:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003938:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800393a:	2302      	movs	r3, #2
 800393c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800393e:	2300      	movs	r3, #0
 8003940:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003942:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003946:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003948:	a80c      	add	r0, sp, #48	; 0x30
 800394a:	f7fd fea7 	bl	800169c <HAL_RCC_OscConfig>
 800394e:	bb80      	cbnz	r0, 80039b2 <SystemClock_Config+0x8a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003950:	230f      	movs	r3, #15
 8003952:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003954:	2102      	movs	r1, #2
 8003956:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003958:	2300      	movs	r3, #0
 800395a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800395c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003960:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003962:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003964:	a807      	add	r0, sp, #28
 8003966:	f7fe f9d7 	bl	8001d18 <HAL_RCC_ClockConfig>
 800396a:	bb30      	cbnz	r0, 80039ba <SystemClock_Config+0x92>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800396c:	4b17      	ldr	r3, [pc, #92]	; (80039cc <SystemClock_Config+0xa4>)
 800396e:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003970:	2300      	movs	r3, #0
 8003972:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8003974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003978:	9204      	str	r2, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800397a:	9303      	str	r3, [sp, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800397c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003980:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003982:	4668      	mov	r0, sp
 8003984:	f7fe fae4 	bl	8001f50 <HAL_RCCEx_PeriphCLKConfig>
 8003988:	b9d8      	cbnz	r0, 80039c2 <SystemClock_Config+0x9a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800398a:	f7fe faaf 	bl	8001eec <HAL_RCC_GetHCLKFreq>
 800398e:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <SystemClock_Config+0xa8>)
 8003990:	fba3 3000 	umull	r3, r0, r3, r0
 8003994:	0980      	lsrs	r0, r0, #6
 8003996:	f7fd f983 	bl	8000ca0 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800399a:	2004      	movs	r0, #4
 800399c:	f7fd f996 	bl	8000ccc <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80039a0:	2200      	movs	r2, #0
 80039a2:	4611      	mov	r1, r2
 80039a4:	f04f 30ff 	mov.w	r0, #4294967295
 80039a8:	f7fd f93c 	bl	8000c24 <HAL_NVIC_SetPriority>
}
 80039ac:	b017      	add	sp, #92	; 0x5c
 80039ae:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80039b2:	219c      	movs	r1, #156	; 0x9c
 80039b4:	4807      	ldr	r0, [pc, #28]	; (80039d4 <SystemClock_Config+0xac>)
 80039b6:	f7ff fe85 	bl	80036c4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80039ba:	21aa      	movs	r1, #170	; 0xaa
 80039bc:	4805      	ldr	r0, [pc, #20]	; (80039d4 <SystemClock_Config+0xac>)
 80039be:	f7ff fe81 	bl	80036c4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80039c2:	21b5      	movs	r1, #181	; 0xb5
 80039c4:	4803      	ldr	r0, [pc, #12]	; (80039d4 <SystemClock_Config+0xac>)
 80039c6:	f7ff fe7d 	bl	80036c4 <_Error_Handler>
 80039ca:	bf00      	nop
 80039cc:	000100a1 	.word	0x000100a1
 80039d0:	10624dd3 	.word	0x10624dd3
 80039d4:	08005f24 	.word	0x08005f24

080039d8 <main>:
{
 80039d8:	b508      	push	{r3, lr}
  HAL_Init();
 80039da:	f7fc fc77 	bl	80002cc <HAL_Init>
  SystemClock_Config();
 80039de:	f7ff ffa3 	bl	8003928 <SystemClock_Config>
  MX_GPIO_Init();
 80039e2:	f7ff fdb5 	bl	8003550 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80039e6:	f7ff fe6f 	bl	80036c8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80039ea:	f7ff fe8d 	bl	8003708 <MX_ADC1_Init>
  MX_I2C1_Init();
 80039ee:	f7ff fecd 	bl	800378c <MX_I2C1_Init>
  MX_RTC_Init();
 80039f2:	f7ff feff 	bl	80037f4 <MX_RTC_Init>
  MX_TIM2_Init();
 80039f6:	f7ff ff5d 	bl	80038b4 <MX_TIM2_Init>
  UserInitialise();
 80039fa:	f000 f98d 	bl	8003d18 <UserInitialise>
	  Flags();
 80039fe:	f000 fd55 	bl	80044ac <Flags>
 8003a02:	e7fc      	b.n	80039fe <main+0x26>

08003a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a04:	b500      	push	{lr}
 8003a06:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a08:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <HAL_MspInit+0x78>)
 8003a0a:	699a      	ldr	r2, [r3, #24]
 8003a0c:	f042 0201 	orr.w	r2, r2, #1
 8003a10:	619a      	str	r2, [r3, #24]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003a1c:	2007      	movs	r0, #7
 8003a1e:	f7fd f8ef 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003a22:	2200      	movs	r2, #0
 8003a24:	4611      	mov	r1, r2
 8003a26:	f06f 000b 	mvn.w	r0, #11
 8003a2a:	f7fd f8fb 	bl	8000c24 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	4611      	mov	r1, r2
 8003a32:	f06f 000a 	mvn.w	r0, #10
 8003a36:	f7fd f8f5 	bl	8000c24 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	f06f 0009 	mvn.w	r0, #9
 8003a42:	f7fd f8ef 	bl	8000c24 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003a46:	2200      	movs	r2, #0
 8003a48:	4611      	mov	r1, r2
 8003a4a:	f06f 0004 	mvn.w	r0, #4
 8003a4e:	f7fd f8e9 	bl	8000c24 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003a52:	2200      	movs	r2, #0
 8003a54:	4611      	mov	r1, r2
 8003a56:	f06f 0003 	mvn.w	r0, #3
 8003a5a:	f7fd f8e3 	bl	8000c24 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003a5e:	2200      	movs	r2, #0
 8003a60:	4611      	mov	r1, r2
 8003a62:	f06f 0001 	mvn.w	r0, #1
 8003a66:	f7fd f8dd 	bl	8000c24 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a72:	f7fd f8d7 	bl	8000c24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a76:	b003      	add	sp, #12
 8003a78:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a7c:	40021000 	.word	0x40021000

08003a80 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003a80:	6803      	ldr	r3, [r0, #0]
 8003a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a86:	d000      	beq.n	8003a8a <HAL_ADC_MspInit+0xa>
 8003a88:	4770      	bx	lr
{
 8003a8a:	b530      	push	{r4, r5, lr}
 8003a8c:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003a8e:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8003a92:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003a96:	695a      	ldr	r2, [r3, #20]
 8003a98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a9c:	615a      	str	r2, [r3, #20]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	9b00      	ldr	r3, [sp, #0]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PB1     ------> ADC1_IN12
    PB13     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003aa8:	230c      	movs	r3, #12
 8003aaa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003aac:	2503      	movs	r5, #3
 8003aae:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2400      	movs	r4, #0
 8003ab2:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ab4:	a901      	add	r1, sp, #4
 8003ab6:	4807      	ldr	r0, [pc, #28]	; (8003ad4 <HAL_ADC_MspInit+0x54>)
 8003ab8:	f7fd f942 	bl	8000d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 8003abc:	f242 0302 	movw	r3, #8194	; 0x2002
 8003ac0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ac2:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac6:	a901      	add	r1, sp, #4
 8003ac8:	4803      	ldr	r0, [pc, #12]	; (8003ad8 <HAL_ADC_MspInit+0x58>)
 8003aca:	f7fd f939 	bl	8000d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ace:	b007      	add	sp, #28
 8003ad0:	bd30      	pop	{r4, r5, pc}
 8003ad2:	bf00      	nop
 8003ad4:	48000800 	.word	0x48000800
 8003ad8:	48000400 	.word	0x48000400

08003adc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8003adc:	6802      	ldr	r2, [r0, #0]
 8003ade:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <HAL_I2C_MspInit+0x80>)
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d000      	beq.n	8003ae6 <HAL_I2C_MspInit+0xa>
 8003ae4:	4770      	bx	lr
{
 8003ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae8:	b087      	sub	sp, #28
  
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003af0:	2712      	movs	r7, #18
 8003af2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003af4:	2601      	movs	r6, #1
 8003af6:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003af8:	2503      	movs	r5, #3
 8003afa:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003afc:	2404      	movs	r4, #4
 8003afe:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b00:	eb0d 0104 	add.w	r1, sp, r4
 8003b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b08:	f7fd f91a 	bl	8000d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b10:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b12:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b14:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b16:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b18:	eb0d 0104 	add.w	r1, sp, r4
 8003b1c:	4810      	ldr	r0, [pc, #64]	; (8003b60 <HAL_I2C_MspInit+0x84>)
 8003b1e:	f7fd f90f 	bl	8000d40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <HAL_I2C_MspInit+0x88>)
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003b2a:	61da      	str	r2, [r3, #28]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	9b00      	ldr	r3, [sp, #0]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003b36:	2200      	movs	r2, #0
 8003b38:	4611      	mov	r1, r2
 8003b3a:	201f      	movs	r0, #31
 8003b3c:	f7fd f872 	bl	8000c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b40:	201f      	movs	r0, #31
 8003b42:	f7fd f8a1 	bl	8000c88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	4611      	mov	r1, r2
 8003b4a:	2020      	movs	r0, #32
 8003b4c:	f7fd f86a 	bl	8000c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003b50:	2020      	movs	r0, #32
 8003b52:	f7fd f899 	bl	8000c88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b56:	b007      	add	sp, #28
 8003b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40005400 	.word	0x40005400
 8003b60:	48000400 	.word	0x48000400
 8003b64:	40021000 	.word	0x40021000

08003b68 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003b68:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 8003b6a:	6802      	ldr	r2, [r0, #0]
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RTC_MspInit+0x34>)
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d000      	beq.n	8003b74 <HAL_RTC_MspInit+0xc>
 8003b72:	bd08      	pop	{r3, pc}
 8003b74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b78:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003b7c:	fab2 f282 	clz	r2, r2
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <HAL_RTC_MspInit+0x38>)
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	2201      	movs	r2, #1
 8003b88:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	2003      	movs	r0, #3
 8003b90:	f7fd f848 	bl	8000c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003b94:	2003      	movs	r0, #3
 8003b96:	f7fd f877 	bl	8000c88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003b9a:	e7ea      	b.n	8003b72 <HAL_RTC_MspInit+0xa>
 8003b9c:	40002800 	.word	0x40002800
 8003ba0:	10908100 	.word	0x10908100

08003ba4 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8003ba4:	6803      	ldr	r3, [r0, #0]
 8003ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003baa:	d000      	beq.n	8003bae <HAL_TIM_Base_MspInit+0xa>
 8003bac:	4770      	bx	lr
{
 8003bae:	b500      	push	{lr}
 8003bb0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bb2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	f042 0201 	orr.w	r2, r2, #1
 8003bbc:	61da      	str	r2, [r3, #28]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003bc8:	2200      	movs	r2, #0
 8003bca:	4611      	mov	r1, r2
 8003bcc:	201c      	movs	r0, #28
 8003bce:	f7fd f829 	bl	8000c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003bd2:	201c      	movs	r0, #28
 8003bd4:	f7fd f858 	bl	8000c88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003bd8:	b003      	add	sp, #12
 8003bda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003be0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003be0:	6802      	ldr	r2, [r0, #0]
 8003be2:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <HAL_UART_MspInit+0x58>)
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d000      	beq.n	8003bea <HAL_UART_MspInit+0xa>
 8003be8:	4770      	bx	lr
{
 8003bea:	b500      	push	{lr}
 8003bec:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bee:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bf8:	619a      	str	r2, [r3, #24]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c04:	2330      	movs	r3, #48	; 0x30
 8003c06:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c10:	2303      	movs	r3, #3
 8003c12:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c14:	2307      	movs	r3, #7
 8003c16:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c18:	a901      	add	r1, sp, #4
 8003c1a:	4808      	ldr	r0, [pc, #32]	; (8003c3c <HAL_UART_MspInit+0x5c>)
 8003c1c:	f7fd f890 	bl	8000d40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c20:	2200      	movs	r2, #0
 8003c22:	4611      	mov	r1, r2
 8003c24:	2025      	movs	r0, #37	; 0x25
 8003c26:	f7fc fffd 	bl	8000c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c2a:	2025      	movs	r0, #37	; 0x25
 8003c2c:	f7fd f82c 	bl	8000c88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c30:	b007      	add	sp, #28
 8003c32:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c36:	bf00      	nop
 8003c38:	40013800 	.word	0x40013800
 8003c3c:	48000800 	.word	0x48000800

08003c40 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003c40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c42:	f7fc fb55 	bl	80002f0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003c46:	f7fd f852 	bl	8000cee <HAL_SYSTICK_IRQHandler>
 8003c4a:	bd08      	pop	{r3, pc}

08003c4c <RTC_WKUP_IRQHandler>:

/**
* @brief This function handles RTC wake-up interrupt through EXTI line 20.
*/
void RTC_WKUP_IRQHandler(void)
{
 8003c4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003c4e:	4802      	ldr	r0, [pc, #8]	; (8003c58 <RTC_WKUP_IRQHandler+0xc>)
 8003c50:	f7fe fcb2 	bl	80025b8 <HAL_RTCEx_WakeUpTimerIRQHandler>
 8003c54:	bd08      	pop	{r3, pc}
 8003c56:	bf00      	nop
 8003c58:	200003d0 	.word	0x200003d0

08003c5c <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8003c5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c5e:	4802      	ldr	r0, [pc, #8]	; (8003c68 <TIM2_IRQHandler+0xc>)
 8003c60:	f7fe fd01 	bl	8002666 <HAL_TIM_IRQHandler>
 8003c64:	bd08      	pop	{r3, pc}
 8003c66:	bf00      	nop
 8003c68:	200003f0 	.word	0x200003f0

08003c6c <I2C1_EV_IRQHandler>:

/**
* @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
*/
void I2C1_EV_IRQHandler(void)
{
 8003c6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c6e:	4802      	ldr	r0, [pc, #8]	; (8003c78 <I2C1_EV_IRQHandler+0xc>)
 8003c70:	f7fd f9f2 	bl	8001058 <HAL_I2C_EV_IRQHandler>
 8003c74:	bd08      	pop	{r3, pc}
 8003c76:	bf00      	nop
 8003c78:	200002c0 	.word	0x200002c0

08003c7c <I2C1_ER_IRQHandler>:

/**
* @brief This function handles I2C1 error interrupt.
*/
void I2C1_ER_IRQHandler(void)
{
 8003c7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003c7e:	4802      	ldr	r0, [pc, #8]	; (8003c88 <I2C1_ER_IRQHandler+0xc>)
 8003c80:	f7fd fc61 	bl	8001546 <HAL_I2C_ER_IRQHandler>
 8003c84:	bd08      	pop	{r3, pc}
 8003c86:	bf00      	nop
 8003c88:	200002c0 	.word	0x200002c0

08003c8c <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 8003c8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c8e:	4802      	ldr	r0, [pc, #8]	; (8003c98 <USART1_IRQHandler+0xc>)
 8003c90:	f7ff fa18 	bl	80030c4 <HAL_UART_IRQHandler>
 8003c94:	bd08      	pop	{r3, pc}
 8003c96:	bf00      	nop
 8003c98:	20000360 	.word	0x20000360

08003c9c <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8003c9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003c9e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003ca2:	f7fd f91d 	bl	8000ee0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003ca6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003caa:	f7fd f919 	bl	8000ee0 <HAL_GPIO_EXTI_IRQHandler>
 8003cae:	bd08      	pop	{r3, pc}

08003cb0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cb0:	4915      	ldr	r1, [pc, #84]	; (8003d08 <SystemInit+0x58>)
 8003cb2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003cb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003cbe:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <SystemInit+0x5c>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003cc8:	6858      	ldr	r0, [r3, #4]
 8003cca:	4a11      	ldr	r2, [pc, #68]	; (8003d10 <SystemInit+0x60>)
 8003ccc:	4002      	ands	r2, r0
 8003cce:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003cd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003cda:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003cea:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cee:	f022 020f 	bic.w	r2, r2, #15
 8003cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003cf4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003cf6:	4a07      	ldr	r2, [pc, #28]	; (8003d14 <SystemInit+0x64>)
 8003cf8:	4002      	ands	r2, r0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d04:	608b      	str	r3, [r1, #8]
 8003d06:	4770      	bx	lr
 8003d08:	e000ed00 	.word	0xe000ed00
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	f87fc00c 	.word	0xf87fc00c
 8003d14:	ff00fccc 	.word	0xff00fccc

08003d18 <UserInitialise>:
bool heaterFlag;
uint8_t iCurrent;


void UserInitialise(void)
{
 8003d18:	b510      	push	{r4, lr}
	uartRxFlag = false;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	4a26      	ldr	r2, [pc, #152]	; (8003db8 <UserInitialise+0xa0>)
 8003d1e:	7013      	strb	r3, [r2, #0]
	tempSetpoint = 60;		// initial value
 8003d20:	213c      	movs	r1, #60	; 0x3c
 8003d22:	4a26      	ldr	r2, [pc, #152]	; (8003dbc <UserInitialise+0xa4>)
 8003d24:	8011      	strh	r1, [r2, #0]

	//---------------------Prof code--------------------------//
	adcFlag = false;
 8003d26:	4a26      	ldr	r2, [pc, #152]	; (8003dc0 <UserInitialise+0xa8>)
 8003d28:	7013      	strb	r3, [r2, #0]
	adcCh = 0;
 8003d2a:	4a26      	ldr	r2, [pc, #152]	; (8003dc4 <UserInitialise+0xac>)
 8003d2c:	7013      	strb	r3, [r2, #0]
	sampleCntr = 0;
 8003d2e:	4a26      	ldr	r2, [pc, #152]	; (8003dc8 <UserInitialise+0xb0>)
 8003d30:	7013      	strb	r3, [r2, #0]
	irmsSum = 0;
 8003d32:	2200      	movs	r2, #0
 8003d34:	4925      	ldr	r1, [pc, #148]	; (8003dcc <UserInitialise+0xb4>)
 8003d36:	600a      	str	r2, [r1, #0]
	vrmsSum = 0;
 8003d38:	4925      	ldr	r1, [pc, #148]	; (8003dd0 <UserInitialise+0xb8>)
 8003d3a:	600a      	str	r2, [r1, #0]

	//digit = 0;
	//---------------------Prof code--------------------------//

	valveState = 0;
 8003d3c:	4a25      	ldr	r2, [pc, #148]	; (8003dd4 <UserInitialise+0xbc>)
 8003d3e:	8013      	strh	r3, [r2, #0]
	heaterState = 0;
 8003d40:	4a25      	ldr	r2, [pc, #148]	; (8003dd8 <UserInitialise+0xc0>)
 8003d42:	8013      	strh	r3, [r2, #0]
	scheduleState = 0;
 8003d44:	4a25      	ldr	r2, [pc, #148]	; (8003ddc <UserInitialise+0xc4>)
 8003d46:	8013      	strh	r3, [r2, #0]

	numberMap[0] = 0b00111111;
 8003d48:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <UserInitialise+0xc8>)
 8003d4a:	223f      	movs	r2, #63	; 0x3f
 8003d4c:	701a      	strb	r2, [r3, #0]
	numberMap[1] = 0b00000110;
 8003d4e:	2206      	movs	r2, #6
 8003d50:	705a      	strb	r2, [r3, #1]
	numberMap[2] = 0b01011011;
 8003d52:	225b      	movs	r2, #91	; 0x5b
 8003d54:	709a      	strb	r2, [r3, #2]
	numberMap[3] = 0b01001111;
 8003d56:	224f      	movs	r2, #79	; 0x4f
 8003d58:	70da      	strb	r2, [r3, #3]
	numberMap[4] = 0b01100110;
 8003d5a:	2266      	movs	r2, #102	; 0x66
 8003d5c:	711a      	strb	r2, [r3, #4]
	numberMap[5] = 0b01101101;
 8003d5e:	226d      	movs	r2, #109	; 0x6d
 8003d60:	715a      	strb	r2, [r3, #5]
	numberMap[6] = 0b01111101;
 8003d62:	227d      	movs	r2, #125	; 0x7d
 8003d64:	719a      	strb	r2, [r3, #6]
	numberMap[7] = 0b00000111;
 8003d66:	2207      	movs	r2, #7
 8003d68:	71da      	strb	r2, [r3, #7]
	numberMap[8] = 0b01111111;
 8003d6a:	217f      	movs	r1, #127	; 0x7f
 8003d6c:	7219      	strb	r1, [r3, #8]
	numberMap[9] = 0b01100111;
 8003d6e:	2267      	movs	r2, #103	; 0x67
 8003d70:	725a      	strb	r2, [r3, #9]

	segementsSet[0] = 0b0001;
 8003d72:	4b1c      	ldr	r3, [pc, #112]	; (8003de4 <UserInitialise+0xcc>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	701a      	strb	r2, [r3, #0]
	segementsSet[1] = 0b0010;
 8003d78:	2002      	movs	r0, #2
 8003d7a:	7058      	strb	r0, [r3, #1]
	segementsSet[2] = 0b0100;
 8003d7c:	2004      	movs	r0, #4
 8003d7e:	7098      	strb	r0, [r3, #2]
	segementsSet[3] = 0b1000;
 8003d80:	2408      	movs	r4, #8
 8003d82:	70dc      	strb	r4, [r3, #3]

	pinsValue[0] = numberMap[8];
 8003d84:	4b18      	ldr	r3, [pc, #96]	; (8003de8 <UserInitialise+0xd0>)
 8003d86:	7019      	strb	r1, [r3, #0]
	pinsValue[1] = numberMap[8];
 8003d88:	7059      	strb	r1, [r3, #1]
	pinsValue[2] = numberMap[8];
 8003d8a:	7099      	strb	r1, [r3, #2]
	pinsValue[3] = numberMap[8];
 8003d8c:	70d9      	strb	r1, [r3, #3]

	segmentsL = 4;
 8003d8e:	4b17      	ldr	r3, [pc, #92]	; (8003dec <UserInitialise+0xd4>)
 8003d90:	7018      	strb	r0, [r3, #0]

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 8003d92:	4917      	ldr	r1, [pc, #92]	; (8003df0 <UserInitialise+0xd8>)
 8003d94:	4817      	ldr	r0, [pc, #92]	; (8003df4 <UserInitialise+0xdc>)
 8003d96:	f7fe fe68 	bl	8002a6a <HAL_UART_Receive_IT>


	// start timer 2 for ADC sampling
	__HAL_TIM_ENABLE(&htim2);
 8003d9a:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <UserInitialise+0xe0>)
 8003d9c:	6811      	ldr	r1, [r2, #0]
 8003d9e:	680b      	ldr	r3, [r1, #0]
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	600b      	str	r3, [r1, #0]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	68d3      	ldr	r3, [r2, #12]
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	60d3      	str	r3, [r2, #12]

	HAL_I2C_Init(&hi2c1);
 8003db0:	4812      	ldr	r0, [pc, #72]	; (8003dfc <UserInitialise+0xe4>)
 8003db2:	f7fd f8f3 	bl	8000f9c <HAL_I2C_Init>
 8003db6:	bd10      	pop	{r4, pc}
 8003db8:	200002ad 	.word	0x200002ad
 8003dbc:	20000298 	.word	0x20000298
 8003dc0:	200002bc 	.word	0x200002bc
 8003dc4:	20000665 	.word	0x20000665
 8003dc8:	20000438 	.word	0x20000438
 8003dcc:	2000058c 	.word	0x2000058c
 8003dd0:	20000668 	.word	0x20000668
 8003dd4:	200002aa 	.word	0x200002aa
 8003dd8:	200002a8 	.word	0x200002a8
 8003ddc:	200002be 	.word	0x200002be
 8003de0:	2000043c 	.word	0x2000043c
 8003de4:	20000294 	.word	0x20000294
 8003de8:	20000640 	.word	0x20000640
 8003dec:	20000240 	.word	0x20000240
 8003df0:	20000588 	.word	0x20000588
 8003df4:	20000360 	.word	0x20000360
 8003df8:	200003f0 	.word	0x200003f0
 8003dfc:	200002c0 	.word	0x200002c0

08003e00 <DecodeCmd>:
	//HAL_I2C_Master_Transmit(&hi2c1, 0x45<<1, &buffer[0], 1, 100);

}

void DecodeCmd()
{
 8003e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e04:	b083      	sub	sp, #12
	//uint8_t charsL;

	switch (cmdBuf[1])
 8003e06:	4b99      	ldr	r3, [pc, #612]	; (800406c <DecodeCmd+0x26c>)
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	3b41      	subs	r3, #65	; 0x41
 8003e0c:	2b0b      	cmp	r3, #11
 8003e0e:	d815      	bhi.n	8003e3c <DecodeCmd+0x3c>
 8003e10:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003e14:	0017000c 	.word	0x0017000c
 8003e18:	0041002d 	.word	0x0041002d
 8003e1c:	006b0057 	.word	0x006b0057
 8003e20:	00d100b2 	.word	0x00d100b2
 8003e24:	01a70162 	.word	0x01a70162
 8003e28:	032b0231 	.word	0x032b0231
	{
	case 'A' : //Student number
		//flowCounter = 0;	//-----------------------------------------------------------------------------------------------------------------flow counter remove
		HAL_UART_Transmit(&huart1, (uint8_t*)txStudentNo, 13, 1000);
 8003e2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e30:	220d      	movs	r2, #13
 8003e32:	498f      	ldr	r1, [pc, #572]	; (8004070 <DecodeCmd+0x270>)
 8003e34:	6809      	ldr	r1, [r1, #0]
 8003e36:	488f      	ldr	r0, [pc, #572]	; (8004074 <DecodeCmd+0x274>)
 8003e38:	f7fe ffeb 	bl	8002e12 <HAL_UART_Transmit>
		txBuf[0] = '$';	txBuf[1] = 'B';
		txBuf[2] = '\r'; txBuf[3] = '\n';
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
		break;
	}
}
 8003e3c:	b003      	add	sp, #12
 8003e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		String2Int(cmdBuf+3, (int16_t*) &valveState);
 8003e42:	498d      	ldr	r1, [pc, #564]	; (8004078 <DecodeCmd+0x278>)
 8003e44:	488d      	ldr	r0, [pc, #564]	; (800407c <DecodeCmd+0x27c>)
 8003e46:	f7ff fa45 	bl	80032d4 <String2Int>
		switchValve();//----------------------------------------------------------default values
 8003e4a:	f7ff fa09 	bl	8003260 <switchValve>
		txBuf[0] = '$';	txBuf[1] = 'B';
 8003e4e:	498c      	ldr	r1, [pc, #560]	; (8004080 <DecodeCmd+0x280>)
 8003e50:	2324      	movs	r3, #36	; 0x24
 8003e52:	700b      	strb	r3, [r1, #0]
 8003e54:	2342      	movs	r3, #66	; 0x42
 8003e56:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8003e58:	230d      	movs	r3, #13
 8003e5a:	708b      	strb	r3, [r1, #2]
 8003e5c:	230a      	movs	r3, #10
 8003e5e:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8003e60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e64:	2204      	movs	r2, #4
 8003e66:	4883      	ldr	r0, [pc, #524]	; (8004074 <DecodeCmd+0x274>)
 8003e68:	f7fe ffd3 	bl	8002e12 <HAL_UART_Transmit>
		break;
 8003e6c:	e7e6      	b.n	8003e3c <DecodeCmd+0x3c>
		String2Int(cmdBuf+3, (int16_t*) &scheduleState);//----------------------------------------------------------default values OFF
 8003e6e:	4985      	ldr	r1, [pc, #532]	; (8004084 <DecodeCmd+0x284>)
 8003e70:	4882      	ldr	r0, [pc, #520]	; (800407c <DecodeCmd+0x27c>)
 8003e72:	f7ff fa2f 	bl	80032d4 <String2Int>
		txBuf[0] = '$';	txBuf[1] = 'C';
 8003e76:	4982      	ldr	r1, [pc, #520]	; (8004080 <DecodeCmd+0x280>)
 8003e78:	2324      	movs	r3, #36	; 0x24
 8003e7a:	700b      	strb	r3, [r1, #0]
 8003e7c:	2343      	movs	r3, #67	; 0x43
 8003e7e:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8003e80:	230d      	movs	r3, #13
 8003e82:	708b      	strb	r3, [r1, #2]
 8003e84:	230a      	movs	r3, #10
 8003e86:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8003e88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	4879      	ldr	r0, [pc, #484]	; (8004074 <DecodeCmd+0x274>)
 8003e90:	f7fe ffbf 	bl	8002e12 <HAL_UART_Transmit>
		break;
 8003e94:	e7d2      	b.n	8003e3c <DecodeCmd+0x3c>
		String2Int(cmdBuf+3, (int16_t*) &heaterState);
 8003e96:	497c      	ldr	r1, [pc, #496]	; (8004088 <DecodeCmd+0x288>)
 8003e98:	4878      	ldr	r0, [pc, #480]	; (800407c <DecodeCmd+0x27c>)
 8003e9a:	f7ff fa1b 	bl	80032d4 <String2Int>
		switchHeater();
 8003e9e:	f7ff f9d1 	bl	8003244 <switchHeater>
		txBuf[0] = '$';	txBuf[1] = 'D';
 8003ea2:	4977      	ldr	r1, [pc, #476]	; (8004080 <DecodeCmd+0x280>)
 8003ea4:	2324      	movs	r3, #36	; 0x24
 8003ea6:	700b      	strb	r3, [r1, #0]
 8003ea8:	2344      	movs	r3, #68	; 0x44
 8003eaa:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8003eac:	230d      	movs	r3, #13
 8003eae:	708b      	strb	r3, [r1, #2]
 8003eb0:	230a      	movs	r3, #10
 8003eb2:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8003eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eb8:	2204      	movs	r2, #4
 8003eba:	486e      	ldr	r0, [pc, #440]	; (8004074 <DecodeCmd+0x274>)
 8003ebc:	f7fe ffa9 	bl	8002e12 <HAL_UART_Transmit>
		break;
 8003ec0:	e7bc      	b.n	8003e3c <DecodeCmd+0x3c>
		String2Int(cmdBuf+3, (int16_t*) &valveState);
 8003ec2:	496d      	ldr	r1, [pc, #436]	; (8004078 <DecodeCmd+0x278>)
 8003ec4:	486d      	ldr	r0, [pc, #436]	; (800407c <DecodeCmd+0x27c>)
 8003ec6:	f7ff fa05 	bl	80032d4 <String2Int>
		txBuf[0] = '$';	txBuf[1] = 'E';
 8003eca:	496d      	ldr	r1, [pc, #436]	; (8004080 <DecodeCmd+0x280>)
 8003ecc:	2324      	movs	r3, #36	; 0x24
 8003ece:	700b      	strb	r3, [r1, #0]
 8003ed0:	2345      	movs	r3, #69	; 0x45
 8003ed2:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8003ed4:	230d      	movs	r3, #13
 8003ed6:	708b      	strb	r3, [r1, #2]
 8003ed8:	230a      	movs	r3, #10
 8003eda:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8003edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	4864      	ldr	r0, [pc, #400]	; (8004074 <DecodeCmd+0x274>)
 8003ee4:	f7fe ff95 	bl	8002e12 <HAL_UART_Transmit>
		break;
 8003ee8:	e7a8      	b.n	8003e3c <DecodeCmd+0x3c>
		String2Int(cmdBuf+3, (int16_t*) &tempSetpoint);
 8003eea:	4c68      	ldr	r4, [pc, #416]	; (800408c <DecodeCmd+0x28c>)
 8003eec:	4621      	mov	r1, r4
 8003eee:	4863      	ldr	r0, [pc, #396]	; (800407c <DecodeCmd+0x27c>)
 8003ef0:	f7ff f9f0 	bl	80032d4 <String2Int>
		txBuf[0] = '$'; txBuf[1] = 'F';	txBuf[2] = '\r'; txBuf[3] = '\n';
 8003ef4:	4962      	ldr	r1, [pc, #392]	; (8004080 <DecodeCmd+0x280>)
 8003ef6:	2324      	movs	r3, #36	; 0x24
 8003ef8:	700b      	strb	r3, [r1, #0]
 8003efa:	2346      	movs	r3, #70	; 0x46
 8003efc:	704b      	strb	r3, [r1, #1]
 8003efe:	230d      	movs	r3, #13
 8003f00:	708b      	strb	r3, [r1, #2]
 8003f02:	230a      	movs	r3, #10
 8003f04:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8003f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	4859      	ldr	r0, [pc, #356]	; (8004074 <DecodeCmd+0x274>)
 8003f0e:	f7fe ff80 	bl	8002e12 <HAL_UART_Transmit>
		i = 0;
 8003f12:	2200      	movs	r2, #0
 8003f14:	4b5e      	ldr	r3, [pc, #376]	; (8004090 <DecodeCmd+0x290>)
 8003f16:	601a      	str	r2, [r3, #0]
		charsL = Int2String(tempF, tempSetpoint, 4);
 8003f18:	8821      	ldrh	r1, [r4, #0]
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	b209      	sxth	r1, r1
 8003f1e:	485d      	ldr	r0, [pc, #372]	; (8004094 <DecodeCmd+0x294>)
 8003f20:	f7ff fa08 	bl	8003334 <Int2String>
 8003f24:	b2c0      	uxtb	r0, r0
 8003f26:	4b5c      	ldr	r3, [pc, #368]	; (8004098 <DecodeCmd+0x298>)
 8003f28:	7018      	strb	r0, [r3, #0]
		while (i < charsL)
 8003f2a:	e018      	b.n	8003f5e <DecodeCmd+0x15e>
			for (j=0; j <10; j++)
 8003f2c:	4a5b      	ldr	r2, [pc, #364]	; (800409c <DecodeCmd+0x29c>)
 8003f2e:	6813      	ldr	r3, [r2, #0]
 8003f30:	3301      	adds	r3, #1
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	4b59      	ldr	r3, [pc, #356]	; (800409c <DecodeCmd+0x29c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b09      	cmp	r3, #9
 8003f3a:	dc0d      	bgt.n	8003f58 <DecodeCmd+0x158>
				if (tempF[i] == (j+0x30))
 8003f3c:	4a55      	ldr	r2, [pc, #340]	; (8004094 <DecodeCmd+0x294>)
 8003f3e:	5d11      	ldrb	r1, [r2, r4]
 8003f40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003f44:	4291      	cmp	r1, r2
 8003f46:	d1f1      	bne.n	8003f2c <DecodeCmd+0x12c>
					pinsValue[i] = numberMap[j];
 8003f48:	4a55      	ldr	r2, [pc, #340]	; (80040a0 <DecodeCmd+0x2a0>)
 8003f4a:	5cd2      	ldrb	r2, [r2, r3]
 8003f4c:	4b55      	ldr	r3, [pc, #340]	; (80040a4 <DecodeCmd+0x2a4>)
 8003f4e:	551a      	strb	r2, [r3, r4]
					j = 10;
 8003f50:	220a      	movs	r2, #10
 8003f52:	4b52      	ldr	r3, [pc, #328]	; (800409c <DecodeCmd+0x29c>)
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	e7e9      	b.n	8003f2c <DecodeCmd+0x12c>
			i++;
 8003f58:	3401      	adds	r4, #1
 8003f5a:	4b4d      	ldr	r3, [pc, #308]	; (8004090 <DecodeCmd+0x290>)
 8003f5c:	601c      	str	r4, [r3, #0]
		while (i < charsL)
 8003f5e:	4b4c      	ldr	r3, [pc, #304]	; (8004090 <DecodeCmd+0x290>)
 8003f60:	681c      	ldr	r4, [r3, #0]
 8003f62:	42a0      	cmp	r0, r4
 8003f64:	dd03      	ble.n	8003f6e <DecodeCmd+0x16e>
			for (j=0; j <10; j++)
 8003f66:	2200      	movs	r2, #0
 8003f68:	4b4c      	ldr	r3, [pc, #304]	; (800409c <DecodeCmd+0x29c>)
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	e7e2      	b.n	8003f34 <DecodeCmd+0x134>
		i = 0;
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
		segmentsL = charsL;
 8003f72:	4b4d      	ldr	r3, [pc, #308]	; (80040a8 <DecodeCmd+0x2a8>)
 8003f74:	7018      	strb	r0, [r3, #0]
		break;
 8003f76:	e761      	b.n	8003e3c <DecodeCmd+0x3c>
		txBuf[0] = '$';	txBuf[1] = 'G';	txBuf[2] = ',';
 8003f78:	4c41      	ldr	r4, [pc, #260]	; (8004080 <DecodeCmd+0x280>)
 8003f7a:	2324      	movs	r3, #36	; 0x24
 8003f7c:	7023      	strb	r3, [r4, #0]
 8003f7e:	2347      	movs	r3, #71	; 0x47
 8003f80:	7063      	strb	r3, [r4, #1]
 8003f82:	232c      	movs	r3, #44	; 0x2c
 8003f84:	70a3      	strb	r3, [r4, #2]
		charsL = Int2String(txBuf+3, tempSetpoint, 4);
 8003f86:	4b41      	ldr	r3, [pc, #260]	; (800408c <DecodeCmd+0x28c>)
 8003f88:	8819      	ldrh	r1, [r3, #0]
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	b209      	sxth	r1, r1
 8003f8e:	1ce0      	adds	r0, r4, #3
 8003f90:	f7ff f9d0 	bl	8003334 <Int2String>
 8003f94:	b2c2      	uxtb	r2, r0
 8003f96:	4b40      	ldr	r3, [pc, #256]	; (8004098 <DecodeCmd+0x298>)
 8003f98:	701a      	strb	r2, [r3, #0]
		txBuf[3 + charsL] = '\r'; txBuf[4 + charsL] = '\n';
 8003f9a:	1cd3      	adds	r3, r2, #3
 8003f9c:	210d      	movs	r1, #13
 8003f9e:	54e1      	strb	r1, [r4, r3]
 8003fa0:	1d13      	adds	r3, r2, #4
 8003fa2:	210a      	movs	r1, #10
 8003fa4:	54e1      	strb	r1, [r4, r3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL+5, 1000);
 8003fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003faa:	3205      	adds	r2, #5
 8003fac:	4621      	mov	r1, r4
 8003fae:	4831      	ldr	r0, [pc, #196]	; (8004074 <DecodeCmd+0x274>)
 8003fb0:	f7fe ff2f 	bl	8002e12 <HAL_UART_Transmit>
		break;
 8003fb4:	e742      	b.n	8003e3c <DecodeCmd+0x3c>
		timeL = 0;
 8003fb6:	4c3d      	ldr	r4, [pc, #244]	; (80040ac <DecodeCmd+0x2ac>)
 8003fb8:	2300      	movs	r3, #0
 8003fba:	7023      	strb	r3, [r4, #0]
		timeL = StringTime2Int(cmdBuf+3+timeL, &HH_set);
 8003fbc:	7820      	ldrb	r0, [r4, #0]
 8003fbe:	3003      	adds	r0, #3
 8003fc0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80040d0 <DecodeCmd+0x2d0>
 8003fc4:	4d29      	ldr	r5, [pc, #164]	; (800406c <DecodeCmd+0x26c>)
 8003fc6:	4641      	mov	r1, r8
 8003fc8:	4428      	add	r0, r5
 8003fca:	f7ff f957 	bl	800327c <StringTime2Int>
 8003fce:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+3+timeL, &mm_set);
 8003fd0:	7820      	ldrb	r0, [r4, #0]
 8003fd2:	3003      	adds	r0, #3
 8003fd4:	4f36      	ldr	r7, [pc, #216]	; (80040b0 <DecodeCmd+0x2b0>)
 8003fd6:	4639      	mov	r1, r7
 8003fd8:	4428      	add	r0, r5
 8003fda:	f7ff f94f 	bl	800327c <StringTime2Int>
 8003fde:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+3+timeL, &ss_set);
 8003fe0:	7820      	ldrb	r0, [r4, #0]
 8003fe2:	3003      	adds	r0, #3
 8003fe4:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80040d4 <DecodeCmd+0x2d4>
 8003fe8:	4649      	mov	r1, r9
 8003fea:	4428      	add	r0, r5
 8003fec:	f7ff f946 	bl	800327c <StringTime2Int>
 8003ff0:	7020      	strb	r0, [r4, #0]
		setDate.Year = YYYY_set;
 8003ff2:	4d30      	ldr	r5, [pc, #192]	; (80040b4 <DecodeCmd+0x2b4>)
 8003ff4:	4b30      	ldr	r3, [pc, #192]	; (80040b8 <DecodeCmd+0x2b8>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	70eb      	strb	r3, [r5, #3]
		setDate.Month = MM_set;
 8003ffa:	4b30      	ldr	r3, [pc, #192]	; (80040bc <DecodeCmd+0x2bc>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	706b      	strb	r3, [r5, #1]
		setDate.Date = DD_set;
 8004000:	4b2f      	ldr	r3, [pc, #188]	; (80040c0 <DecodeCmd+0x2c0>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	70ab      	strb	r3, [r5, #2]
		setTime.Hours = HH_set;
 8004006:	4e2f      	ldr	r6, [pc, #188]	; (80040c4 <DecodeCmd+0x2c4>)
 8004008:	f898 3000 	ldrb.w	r3, [r8]
 800400c:	7033      	strb	r3, [r6, #0]
		setTime.Minutes = mm_set;
 800400e:	783b      	ldrb	r3, [r7, #0]
 8004010:	7073      	strb	r3, [r6, #1]
		setTime.Seconds = ss_set;
 8004012:	f899 3000 	ldrb.w	r3, [r9]
 8004016:	70b3      	strb	r3, [r6, #2]
		__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8004018:	4c2b      	ldr	r4, [pc, #172]	; (80040c8 <DecodeCmd+0x2c8>)
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	22ca      	movs	r2, #202	; 0xca
 800401e:	625a      	str	r2, [r3, #36]	; 0x24
 8004020:	2253      	movs	r2, #83	; 0x53
 8004022:	625a      	str	r2, [r3, #36]	; 0x24
		halStatus = RTC_EnterInitMode(&hrtc); // Enter init mode
 8004024:	4620      	mov	r0, r4
 8004026:	f7fe f882 	bl	800212e <RTC_EnterInitMode>
 800402a:	4f28      	ldr	r7, [pc, #160]	; (80040cc <DecodeCmd+0x2cc>)
 800402c:	7038      	strb	r0, [r7, #0]
		halStatus = HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BCD);
 800402e:	2201      	movs	r2, #1
 8004030:	4631      	mov	r1, r6
 8004032:	4620      	mov	r0, r4
 8004034:	f7fe f906 	bl	8002244 <HAL_RTC_SetTime>
 8004038:	7038      	strb	r0, [r7, #0]
		halStatus = HAL_RTC_SetDate(&hrtc, &setDate, RTC_FORMAT_BCD);
 800403a:	2201      	movs	r2, #1
 800403c:	4629      	mov	r1, r5
 800403e:	4620      	mov	r0, r4
 8004040:	f7fe f97f 	bl	8002342 <HAL_RTC_SetDate>
 8004044:	7038      	strb	r0, [r7, #0]
		__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	22ff      	movs	r2, #255	; 0xff
 800404a:	625a      	str	r2, [r3, #36]	; 0x24
		txBuf[0] = '$';	txBuf[1] = 'H';
 800404c:	490c      	ldr	r1, [pc, #48]	; (8004080 <DecodeCmd+0x280>)
 800404e:	2324      	movs	r3, #36	; 0x24
 8004050:	700b      	strb	r3, [r1, #0]
 8004052:	2348      	movs	r3, #72	; 0x48
 8004054:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8004056:	230d      	movs	r3, #13
 8004058:	708b      	strb	r3, [r1, #2]
 800405a:	230a      	movs	r3, #10
 800405c:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 800405e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004062:	2204      	movs	r2, #4
 8004064:	4803      	ldr	r0, [pc, #12]	; (8004074 <DecodeCmd+0x274>)
 8004066:	f7fe fed4 	bl	8002e12 <HAL_UART_Transmit>
		break;
 800406a:	e6e7      	b.n	8003e3c <DecodeCmd+0x3c>
 800406c:	20000600 	.word	0x20000600
 8004070:	20000004 	.word	0x20000004
 8004074:	20000360 	.word	0x20000360
 8004078:	200002aa 	.word	0x200002aa
 800407c:	20000603 	.word	0x20000603
 8004080:	200004ec 	.word	0x200004ec
 8004084:	200002be 	.word	0x200002be
 8004088:	200002a8 	.word	0x200002a8
 800408c:	20000298 	.word	0x20000298
 8004090:	2000029c 	.word	0x2000029c
 8004094:	20000660 	.word	0x20000660
 8004098:	200002a0 	.word	0x200002a0
 800409c:	2000027c 	.word	0x2000027c
 80040a0:	2000043c 	.word	0x2000043c
 80040a4:	20000640 	.word	0x20000640
 80040a8:	20000240 	.word	0x20000240
 80040ac:	20000278 	.word	0x20000278
 80040b0:	2000065c 	.word	0x2000065c
 80040b4:	20000584 	.word	0x20000584
 80040b8:	20000646 	.word	0x20000646
 80040bc:	20000484 	.word	0x20000484
 80040c0:	20000580 	.word	0x20000580
 80040c4:	20000594 	.word	0x20000594
 80040c8:	200003d0 	.word	0x200003d0
 80040cc:	2000048e 	.word	0x2000048e
 80040d0:	20000495 	.word	0x20000495
 80040d4:	2000048c 	.word	0x2000048c
		getTime = getTimeLive;
 80040d8:	4ebc      	ldr	r6, [pc, #752]	; (80043cc <DecodeCmd+0x5cc>)
 80040da:	4634      	mov	r4, r6
 80040dc:	4dbc      	ldr	r5, [pc, #752]	; (80043d0 <DecodeCmd+0x5d0>)
 80040de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040e2:	682b      	ldr	r3, [r5, #0]
 80040e4:	6023      	str	r3, [r4, #0]
		getDate = getDateLive;
 80040e6:	4bbb      	ldr	r3, [pc, #748]	; (80043d4 <DecodeCmd+0x5d4>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	4bbb      	ldr	r3, [pc, #748]	; (80043d8 <DecodeCmd+0x5d8>)
 80040ec:	601a      	str	r2, [r3, #0]
		txBuf[0] = '$';	txBuf[1] = 'I';
 80040ee:	4cbb      	ldr	r4, [pc, #748]	; (80043dc <DecodeCmd+0x5dc>)
 80040f0:	2324      	movs	r3, #36	; 0x24
 80040f2:	7023      	strb	r3, [r4, #0]
 80040f4:	2349      	movs	r3, #73	; 0x49
 80040f6:	7063      	strb	r3, [r4, #1]
		txBuf[2] = ',';
 80040f8:	272c      	movs	r7, #44	; 0x2c
 80040fa:	70a7      	strb	r7, [r4, #2]
		charsL = 3;
 80040fc:	4db8      	ldr	r5, [pc, #736]	; (80043e0 <DecodeCmd+0x5e0>)
 80040fe:	2303      	movs	r3, #3
 8004100:	702b      	strb	r3, [r5, #0]
		charsL += Int2String(txBuf+charsL, (uint32_t) getTime.Hours, 2);
 8004102:	2202      	movs	r2, #2
 8004104:	7831      	ldrb	r1, [r6, #0]
 8004106:	18e0      	adds	r0, r4, r3
 8004108:	f7ff f914 	bl	8003334 <Int2String>
 800410c:	782b      	ldrb	r3, [r5, #0]
 800410e:	4403      	add	r3, r0
 8004110:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004112:	54e7      	strb	r7, [r4, r3]
 8004114:	3301      	adds	r3, #1
 8004116:	b2d8      	uxtb	r0, r3
 8004118:	7028      	strb	r0, [r5, #0]
		charsL += Int2String(txBuf+charsL, (uint32_t) getTime.Minutes, 2);
 800411a:	2202      	movs	r2, #2
 800411c:	7871      	ldrb	r1, [r6, #1]
 800411e:	4420      	add	r0, r4
 8004120:	f7ff f908 	bl	8003334 <Int2String>
 8004124:	782b      	ldrb	r3, [r5, #0]
 8004126:	4403      	add	r3, r0
 8004128:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 800412a:	54e7      	strb	r7, [r4, r3]
 800412c:	3301      	adds	r3, #1
 800412e:	b2d8      	uxtb	r0, r3
 8004130:	7028      	strb	r0, [r5, #0]
		charsL += Int2String(txBuf+charsL, (uint32_t) getTime.Seconds, 2);
 8004132:	2202      	movs	r2, #2
 8004134:	78b1      	ldrb	r1, [r6, #2]
 8004136:	4420      	add	r0, r4
 8004138:	f7ff f8fc 	bl	8003334 <Int2String>
 800413c:	782b      	ldrb	r3, [r5, #0]
 800413e:	4403      	add	r3, r0
 8004140:	b2db      	uxtb	r3, r3
		txBuf[charsL] = '\r'; charsL++; txBuf[charsL] = '\n'; charsL++;
 8004142:	220d      	movs	r2, #13
 8004144:	54e2      	strb	r2, [r4, r3]
 8004146:	3301      	adds	r3, #1
 8004148:	b2db      	uxtb	r3, r3
 800414a:	220a      	movs	r2, #10
 800414c:	54e2      	strb	r2, [r4, r3]
 800414e:	3301      	adds	r3, #1
 8004150:	b2da      	uxtb	r2, r3
 8004152:	702a      	strb	r2, [r5, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL, 1000);
 8004154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004158:	4621      	mov	r1, r4
 800415a:	48a2      	ldr	r0, [pc, #648]	; (80043e4 <DecodeCmd+0x5e4>)
 800415c:	f7fe fe59 	bl	8002e12 <HAL_UART_Transmit>
		break;
 8004160:	e66c      	b.n	8003e3c <DecodeCmd+0x3c>
		String2Int(cmdBuf+3, &heatingWindow);
 8004162:	4ea1      	ldr	r6, [pc, #644]	; (80043e8 <DecodeCmd+0x5e8>)
 8004164:	4da1      	ldr	r5, [pc, #644]	; (80043ec <DecodeCmd+0x5ec>)
 8004166:	4631      	mov	r1, r6
 8004168:	4628      	mov	r0, r5
 800416a:	f7ff f8b3 	bl	80032d4 <String2Int>
		timeL = 0;
 800416e:	4ca0      	ldr	r4, [pc, #640]	; (80043f0 <DecodeCmd+0x5f0>)
 8004170:	2300      	movs	r3, #0
 8004172:	7023      	strb	r3, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5, &HH_on);
 8004174:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8004428 <DecodeCmd+0x628>
 8004178:	4659      	mov	r1, fp
 800417a:	1ca8      	adds	r0, r5, #2
 800417c:	f7ff f87e 	bl	800327c <StringTime2Int>
 8004180:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &mm_on);
 8004182:	7820      	ldrb	r0, [r4, #0]
 8004184:	3005      	adds	r0, #5
 8004186:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 800442c <DecodeCmd+0x62c>
 800418a:	3d03      	subs	r5, #3
 800418c:	4651      	mov	r1, sl
 800418e:	4428      	add	r0, r5
 8004190:	f7ff f874 	bl	800327c <StringTime2Int>
 8004194:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &ss_on);
 8004196:	7820      	ldrb	r0, [r4, #0]
 8004198:	3005      	adds	r0, #5
 800419a:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8004430 <DecodeCmd+0x630>
 800419e:	4649      	mov	r1, r9
 80041a0:	4428      	add	r0, r5
 80041a2:	f7ff f86b 	bl	800327c <StringTime2Int>
 80041a6:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &HH_off);
 80041a8:	7820      	ldrb	r0, [r4, #0]
 80041aa:	3005      	adds	r0, #5
 80041ac:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8004434 <DecodeCmd+0x634>
 80041b0:	4641      	mov	r1, r8
 80041b2:	4428      	add	r0, r5
 80041b4:	f7ff f862 	bl	800327c <StringTime2Int>
 80041b8:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &mm_off);
 80041ba:	7820      	ldrb	r0, [r4, #0]
 80041bc:	3005      	adds	r0, #5
 80041be:	4f8d      	ldr	r7, [pc, #564]	; (80043f4 <DecodeCmd+0x5f4>)
 80041c0:	4639      	mov	r1, r7
 80041c2:	4428      	add	r0, r5
 80041c4:	f7ff f85a 	bl	800327c <StringTime2Int>
 80041c8:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &ss_off);
 80041ca:	7820      	ldrb	r0, [r4, #0]
 80041cc:	3005      	adds	r0, #5
 80041ce:	498a      	ldr	r1, [pc, #552]	; (80043f8 <DecodeCmd+0x5f8>)
 80041d0:	4428      	add	r0, r5
 80041d2:	f7ff f853 	bl	800327c <StringTime2Int>
 80041d6:	7020      	strb	r0, [r4, #0]
		onTime[heatingWindow-1].Hours = HH_on;
 80041d8:	f9b6 4000 	ldrsh.w	r4, [r6]
 80041dc:	3c01      	subs	r4, #1
 80041de:	4987      	ldr	r1, [pc, #540]	; (80043fc <DecodeCmd+0x5fc>)
 80041e0:	00a3      	lsls	r3, r4, #2
 80041e2:	4423      	add	r3, r4
 80041e4:	009a      	lsls	r2, r3, #2
 80041e6:	188b      	adds	r3, r1, r2
 80041e8:	f89b 0000 	ldrb.w	r0, [fp]
 80041ec:	5488      	strb	r0, [r1, r2]
		onTime[heatingWindow-1].Minutes = mm_on;
 80041ee:	f89a 2000 	ldrb.w	r2, [sl]
 80041f2:	705a      	strb	r2, [r3, #1]
		onTime[heatingWindow-1].Seconds = ss_on;
 80041f4:	f899 2000 	ldrb.w	r2, [r9]
 80041f8:	709a      	strb	r2, [r3, #2]
		onEpoch[heatingWindow-1] = timeToEpoch(getDateLive, onTime[heatingWindow-1]);
 80041fa:	4d76      	ldr	r5, [pc, #472]	; (80043d4 <DecodeCmd+0x5d4>)
 80041fc:	f8d5 e000 	ldr.w	lr, [r5]
 8004200:	f103 020c 	add.w	r2, r3, #12
 8004204:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004208:	e88d 0003 	stmia.w	sp, {r0, r1}
 800420c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800420e:	4670      	mov	r0, lr
 8004210:	f7ff f95e 	bl	80034d0 <timeToEpoch>
 8004214:	4b7a      	ldr	r3, [pc, #488]	; (8004400 <DecodeCmd+0x600>)
 8004216:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		offTime[heatingWindow-1].Hours = HH_off;
 800421a:	f9b6 4000 	ldrsh.w	r4, [r6]
 800421e:	3c01      	subs	r4, #1
 8004220:	4978      	ldr	r1, [pc, #480]	; (8004404 <DecodeCmd+0x604>)
 8004222:	00a3      	lsls	r3, r4, #2
 8004224:	4423      	add	r3, r4
 8004226:	009a      	lsls	r2, r3, #2
 8004228:	188b      	adds	r3, r1, r2
 800422a:	f898 0000 	ldrb.w	r0, [r8]
 800422e:	5488      	strb	r0, [r1, r2]
		offTime[heatingWindow-1].Minutes = mm_off;
 8004230:	783a      	ldrb	r2, [r7, #0]
 8004232:	705a      	strb	r2, [r3, #1]
		offTime[heatingWindow-1].Seconds = ss_off;
 8004234:	4a70      	ldr	r2, [pc, #448]	; (80043f8 <DecodeCmd+0x5f8>)
 8004236:	7812      	ldrb	r2, [r2, #0]
 8004238:	709a      	strb	r2, [r3, #2]
		offEpoch[heatingWindow-1] = timeToEpoch(getDateLive, offTime[heatingWindow-1]);
 800423a:	682d      	ldr	r5, [r5, #0]
 800423c:	f103 020c 	add.w	r2, r3, #12
 8004240:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004244:	e88d 0003 	stmia.w	sp, {r0, r1}
 8004248:	cb0e      	ldmia	r3, {r1, r2, r3}
 800424a:	4628      	mov	r0, r5
 800424c:	f7ff f940 	bl	80034d0 <timeToEpoch>
 8004250:	4b6d      	ldr	r3, [pc, #436]	; (8004408 <DecodeCmd+0x608>)
 8004252:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		txBuf[0] = '$';	txBuf[1] = 'J';
 8004256:	4961      	ldr	r1, [pc, #388]	; (80043dc <DecodeCmd+0x5dc>)
 8004258:	2324      	movs	r3, #36	; 0x24
 800425a:	700b      	strb	r3, [r1, #0]
 800425c:	234a      	movs	r3, #74	; 0x4a
 800425e:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8004260:	230d      	movs	r3, #13
 8004262:	708b      	strb	r3, [r1, #2]
 8004264:	230a      	movs	r3, #10
 8004266:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8004268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800426c:	2204      	movs	r2, #4
 800426e:	485d      	ldr	r0, [pc, #372]	; (80043e4 <DecodeCmd+0x5e4>)
 8004270:	f7fe fdcf 	bl	8002e12 <HAL_UART_Transmit>
		break;
 8004274:	e5e2      	b.n	8003e3c <DecodeCmd+0x3c>
		txBuf[0] = '$'; txBuf[1] = 'K'; txBuf[2] = ',';
 8004276:	4c59      	ldr	r4, [pc, #356]	; (80043dc <DecodeCmd+0x5dc>)
 8004278:	2324      	movs	r3, #36	; 0x24
 800427a:	7023      	strb	r3, [r4, #0]
 800427c:	234b      	movs	r3, #75	; 0x4b
 800427e:	7063      	strb	r3, [r4, #1]
 8004280:	262c      	movs	r6, #44	; 0x2c
 8004282:	70a6      	strb	r6, [r4, #2]
		charsL = 3;
 8004284:	4d56      	ldr	r5, [pc, #344]	; (80043e0 <DecodeCmd+0x5e0>)
 8004286:	2303      	movs	r3, #3
 8004288:	702b      	strb	r3, [r5, #0]
		charsL += Int2String(txBuf+charsL, irms, 10);
 800428a:	220a      	movs	r2, #10
 800428c:	4b5f      	ldr	r3, [pc, #380]	; (800440c <DecodeCmd+0x60c>)
 800428e:	6819      	ldr	r1, [r3, #0]
 8004290:	1ce0      	adds	r0, r4, #3
 8004292:	f7ff f84f 	bl	8003334 <Int2String>
 8004296:	782b      	ldrb	r3, [r5, #0]
 8004298:	4403      	add	r3, r0
 800429a:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 800429c:	54e6      	strb	r6, [r4, r3]
 800429e:	3301      	adds	r3, #1
 80042a0:	b2d8      	uxtb	r0, r3
 80042a2:	7028      	strb	r0, [r5, #0]
		charsL += Int2String(txBuf+charsL, vrms, 10);
 80042a4:	220a      	movs	r2, #10
 80042a6:	4b5a      	ldr	r3, [pc, #360]	; (8004410 <DecodeCmd+0x610>)
 80042a8:	6819      	ldr	r1, [r3, #0]
 80042aa:	4420      	add	r0, r4
 80042ac:	f7ff f842 	bl	8003334 <Int2String>
 80042b0:	782b      	ldrb	r3, [r5, #0]
 80042b2:	4403      	add	r3, r0
 80042b4:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 80042b6:	54e6      	strb	r6, [r4, r3]
 80042b8:	3301      	adds	r3, #1
 80042ba:	b2df      	uxtb	r7, r3
 80042bc:	702f      	strb	r7, [r5, #0]
		charsL += Int2String(txBuf+charsL, TempConv(ambientT), 10);    // temp ambient
 80042be:	4b55      	ldr	r3, [pc, #340]	; (8004414 <DecodeCmd+0x614>)
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	f7fe ffaf 	bl	8003224 <TempConv>
 80042c6:	220a      	movs	r2, #10
 80042c8:	4601      	mov	r1, r0
 80042ca:	19e0      	adds	r0, r4, r7
 80042cc:	f7ff f832 	bl	8003334 <Int2String>
 80042d0:	782b      	ldrb	r3, [r5, #0]
 80042d2:	4403      	add	r3, r0
 80042d4:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 80042d6:	54e6      	strb	r6, [r4, r3]
 80042d8:	3301      	adds	r3, #1
 80042da:	b2df      	uxtb	r7, r3
 80042dc:	702f      	strb	r7, [r5, #0]
		charsL += Int2String(txBuf+charsL, TempConv(waterT), 10);    // temp water
 80042de:	4b4e      	ldr	r3, [pc, #312]	; (8004418 <DecodeCmd+0x618>)
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	f7fe ff9f 	bl	8003224 <TempConv>
 80042e6:	220a      	movs	r2, #10
 80042e8:	4601      	mov	r1, r0
 80042ea:	19e0      	adds	r0, r4, r7
 80042ec:	f7ff f822 	bl	8003334 <Int2String>
 80042f0:	782b      	ldrb	r3, [r5, #0]
 80042f2:	4403      	add	r3, r0
 80042f4:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 80042f6:	54e6      	strb	r6, [r4, r3]
 80042f8:	3301      	adds	r3, #1
 80042fa:	b2d8      	uxtb	r0, r3
 80042fc:	7028      	strb	r0, [r5, #0]
		charsL += Int2String(txBuf+charsL, totalFlow, 10);    // flow totalFlow
 80042fe:	220a      	movs	r2, #10
 8004300:	4b46      	ldr	r3, [pc, #280]	; (800441c <DecodeCmd+0x61c>)
 8004302:	6819      	ldr	r1, [r3, #0]
 8004304:	4420      	add	r0, r4
 8004306:	f7ff f815 	bl	8003334 <Int2String>
 800430a:	782b      	ldrb	r3, [r5, #0]
 800430c:	4403      	add	r3, r0
 800430e:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004310:	54e6      	strb	r6, [r4, r3]
 8004312:	3301      	adds	r3, #1
 8004314:	b2db      	uxtb	r3, r3
 8004316:	702b      	strb	r3, [r5, #0]
		if (heaterState == 0U)
 8004318:	4a41      	ldr	r2, [pc, #260]	; (8004420 <DecodeCmd+0x620>)
 800431a:	8812      	ldrh	r2, [r2, #0]
 800431c:	b212      	sxth	r2, r2
 800431e:	2a00      	cmp	r2, #0
 8004320:	d140      	bne.n	80043a4 <DecodeCmd+0x5a4>
			txBuf[charsL] = 'O'; charsL++;
 8004322:	4622      	mov	r2, r4
 8004324:	214f      	movs	r1, #79	; 0x4f
 8004326:	54e1      	strb	r1, [r4, r3]
 8004328:	3301      	adds	r3, #1
 800432a:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'F'; charsL++;
 800432c:	2146      	movs	r1, #70	; 0x46
 800432e:	54e1      	strb	r1, [r4, r3]
 8004330:	3301      	adds	r3, #1
 8004332:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'F'; charsL++;
 8004334:	54e1      	strb	r1, [r4, r3]
 8004336:	3301      	adds	r3, #1
 8004338:	b2db      	uxtb	r3, r3
			txBuf[charsL] = ','; charsL++;
 800433a:	54d6      	strb	r6, [r2, r3]
 800433c:	3301      	adds	r3, #1
 800433e:	702b      	strb	r3, [r5, #0]
		if(valveState==0U)
 8004340:	4b38      	ldr	r3, [pc, #224]	; (8004424 <DecodeCmd+0x624>)
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b21b      	sxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d176      	bne.n	8004438 <DecodeCmd+0x638>
			txBuf[charsL] = 'C'; charsL++;
 800434a:	4925      	ldr	r1, [pc, #148]	; (80043e0 <DecodeCmd+0x5e0>)
 800434c:	780b      	ldrb	r3, [r1, #0]
 800434e:	4a23      	ldr	r2, [pc, #140]	; (80043dc <DecodeCmd+0x5dc>)
 8004350:	2043      	movs	r0, #67	; 0x43
 8004352:	54d0      	strb	r0, [r2, r3]
 8004354:	3301      	adds	r3, #1
 8004356:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'L'; charsL++;
 8004358:	204c      	movs	r0, #76	; 0x4c
 800435a:	54d0      	strb	r0, [r2, r3]
 800435c:	3301      	adds	r3, #1
 800435e:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'O'; charsL++;
 8004360:	204f      	movs	r0, #79	; 0x4f
 8004362:	54d0      	strb	r0, [r2, r3]
 8004364:	3301      	adds	r3, #1
 8004366:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'S'; charsL++;
 8004368:	2053      	movs	r0, #83	; 0x53
 800436a:	54d0      	strb	r0, [r2, r3]
 800436c:	3301      	adds	r3, #1
 800436e:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'E'; charsL++;
 8004370:	2045      	movs	r0, #69	; 0x45
 8004372:	54d0      	strb	r0, [r2, r3]
 8004374:	3301      	adds	r3, #1
 8004376:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'D'; charsL++;
 8004378:	2044      	movs	r0, #68	; 0x44
 800437a:	54d0      	strb	r0, [r2, r3]
 800437c:	3301      	adds	r3, #1
 800437e:	700b      	strb	r3, [r1, #0]
		txBuf[charsL] = '\r'; charsL++; txBuf[charsL] = '\n'; charsL++;
 8004380:	4817      	ldr	r0, [pc, #92]	; (80043e0 <DecodeCmd+0x5e0>)
 8004382:	7803      	ldrb	r3, [r0, #0]
 8004384:	4915      	ldr	r1, [pc, #84]	; (80043dc <DecodeCmd+0x5dc>)
 8004386:	220d      	movs	r2, #13
 8004388:	54ca      	strb	r2, [r1, r3]
 800438a:	3301      	adds	r3, #1
 800438c:	b2db      	uxtb	r3, r3
 800438e:	220a      	movs	r2, #10
 8004390:	54ca      	strb	r2, [r1, r3]
 8004392:	3301      	adds	r3, #1
 8004394:	b2da      	uxtb	r2, r3
 8004396:	7002      	strb	r2, [r0, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL, 1000);
 8004398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800439c:	4811      	ldr	r0, [pc, #68]	; (80043e4 <DecodeCmd+0x5e4>)
 800439e:	f7fe fd38 	bl	8002e12 <HAL_UART_Transmit>
		break;
 80043a2:	e54b      	b.n	8003e3c <DecodeCmd+0x3c>
		else if(heaterState==1U)
 80043a4:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <DecodeCmd+0x620>)
 80043a6:	8812      	ldrh	r2, [r2, #0]
 80043a8:	b212      	sxth	r2, r2
 80043aa:	2a01      	cmp	r2, #1
 80043ac:	d1c8      	bne.n	8004340 <DecodeCmd+0x540>
			txBuf[charsL] = 'O'; charsL++;
 80043ae:	4a0b      	ldr	r2, [pc, #44]	; (80043dc <DecodeCmd+0x5dc>)
 80043b0:	214f      	movs	r1, #79	; 0x4f
 80043b2:	54d1      	strb	r1, [r2, r3]
 80043b4:	3301      	adds	r3, #1
 80043b6:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'N'; charsL++;
 80043b8:	214e      	movs	r1, #78	; 0x4e
 80043ba:	54d1      	strb	r1, [r2, r3]
 80043bc:	3301      	adds	r3, #1
 80043be:	b2db      	uxtb	r3, r3
			txBuf[charsL] = ','; charsL++;
 80043c0:	212c      	movs	r1, #44	; 0x2c
 80043c2:	54d1      	strb	r1, [r2, r3]
 80043c4:	3301      	adds	r3, #1
 80043c6:	4a06      	ldr	r2, [pc, #24]	; (80043e0 <DecodeCmd+0x5e0>)
 80043c8:	7013      	strb	r3, [r2, #0]
 80043ca:	e7b9      	b.n	8004340 <DecodeCmd+0x540>
 80043cc:	20000648 	.word	0x20000648
 80043d0:	20000498 	.word	0x20000498
 80043d4:	20000684 	.word	0x20000684
 80043d8:	20000490 	.word	0x20000490
 80043dc:	200004ec 	.word	0x200004ec
 80043e0:	200002a0 	.word	0x200002a0
 80043e4:	20000360 	.word	0x20000360
 80043e8:	20000674 	.word	0x20000674
 80043ec:	20000603 	.word	0x20000603
 80043f0:	20000278 	.word	0x20000278
 80043f4:	20000666 	.word	0x20000666
 80043f8:	20000589 	.word	0x20000589
 80043fc:	200004b0 	.word	0x200004b0
 8004400:	20000284 	.word	0x20000284
 8004404:	20000448 	.word	0x20000448
 8004408:	200002b0 	.word	0x200002b0
 800440c:	200005f8 	.word	0x200005f8
 8004410:	20000670 	.word	0x20000670
 8004414:	20000434 	.word	0x20000434
 8004418:	2000067c 	.word	0x2000067c
 800441c:	20000678 	.word	0x20000678
 8004420:	200002a8 	.word	0x200002a8
 8004424:	200002aa 	.word	0x200002aa
 8004428:	20000494 	.word	0x20000494
 800442c:	20000590 	.word	0x20000590
 8004430:	20000680 	.word	0x20000680
 8004434:	20000647 	.word	0x20000647
		else if(valveState==1U)
 8004438:	4b17      	ldr	r3, [pc, #92]	; (8004498 <DecodeCmd+0x698>)
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b21b      	sxth	r3, r3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d19e      	bne.n	8004380 <DecodeCmd+0x580>
			txBuf[charsL] = 'O'; charsL++;
 8004442:	4916      	ldr	r1, [pc, #88]	; (800449c <DecodeCmd+0x69c>)
 8004444:	780b      	ldrb	r3, [r1, #0]
 8004446:	4a16      	ldr	r2, [pc, #88]	; (80044a0 <DecodeCmd+0x6a0>)
 8004448:	204f      	movs	r0, #79	; 0x4f
 800444a:	54d0      	strb	r0, [r2, r3]
 800444c:	3301      	adds	r3, #1
 800444e:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'P'; charsL++;
 8004450:	2050      	movs	r0, #80	; 0x50
 8004452:	54d0      	strb	r0, [r2, r3]
 8004454:	3301      	adds	r3, #1
 8004456:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'E'; charsL++;
 8004458:	2045      	movs	r0, #69	; 0x45
 800445a:	54d0      	strb	r0, [r2, r3]
 800445c:	3301      	adds	r3, #1
 800445e:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'N'; charsL++;
 8004460:	204e      	movs	r0, #78	; 0x4e
 8004462:	54d0      	strb	r0, [r2, r3]
 8004464:	3301      	adds	r3, #1
 8004466:	700b      	strb	r3, [r1, #0]
 8004468:	e78a      	b.n	8004380 <DecodeCmd+0x580>
		String2Int(cmdBuf+3, (int16_t*) &valveState);
 800446a:	490b      	ldr	r1, [pc, #44]	; (8004498 <DecodeCmd+0x698>)
 800446c:	480d      	ldr	r0, [pc, #52]	; (80044a4 <DecodeCmd+0x6a4>)
 800446e:	f7fe ff31 	bl	80032d4 <String2Int>
		switchValve();
 8004472:	f7fe fef5 	bl	8003260 <switchValve>
		txBuf[0] = '$';	txBuf[1] = 'B';
 8004476:	490a      	ldr	r1, [pc, #40]	; (80044a0 <DecodeCmd+0x6a0>)
 8004478:	2324      	movs	r3, #36	; 0x24
 800447a:	700b      	strb	r3, [r1, #0]
 800447c:	2342      	movs	r3, #66	; 0x42
 800447e:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8004480:	230d      	movs	r3, #13
 8004482:	708b      	strb	r3, [r1, #2]
 8004484:	230a      	movs	r3, #10
 8004486:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8004488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800448c:	2204      	movs	r2, #4
 800448e:	4806      	ldr	r0, [pc, #24]	; (80044a8 <DecodeCmd+0x6a8>)
 8004490:	f7fe fcbf 	bl	8002e12 <HAL_UART_Transmit>
}
 8004494:	e4d2      	b.n	8003e3c <DecodeCmd+0x3c>
 8004496:	bf00      	nop
 8004498:	200002aa 	.word	0x200002aa
 800449c:	200002a0 	.word	0x200002a0
 80044a0:	200004ec 	.word	0x200004ec
 80044a4:	20000603 	.word	0x20000603
 80044a8:	20000360 	.word	0x20000360

080044ac <Flags>:

void Flags(void)
{
 80044ac:	b530      	push	{r4, r5, lr}
 80044ae:	b089      	sub	sp, #36	; 0x24
	//halStatus = HAL_I2C_Master_Transmit_IT(&hi2c1, 0x44<<1, &pData, 1);	// I2C write call

	if (uartRxFlag)
 80044b0:	4b90      	ldr	r3, [pc, #576]	; (80046f4 <Flags+0x248>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	b1e3      	cbz	r3, 80044f0 <Flags+0x44>
	{
		if (uartRxChar == '$')
 80044b6:	4b90      	ldr	r3, [pc, #576]	; (80046f8 <Flags+0x24c>)
 80044b8:	781a      	ldrb	r2, [r3, #0]
 80044ba:	2a24      	cmp	r2, #36	; 0x24
 80044bc:	d042      	beq.n	8004544 <Flags+0x98>
			cmdBufPos = 0;

		// add character to command buffer, but only if there is more space in the command buffer
		if (cmdBufPos < cmdBufL)
 80044be:	4b8f      	ldr	r3, [pc, #572]	; (80046fc <Flags+0x250>)
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	2b3b      	cmp	r3, #59	; 0x3b
 80044c4:	d804      	bhi.n	80044d0 <Flags+0x24>
			cmdBuf[cmdBufPos++] = uartRxChar;
 80044c6:	1c58      	adds	r0, r3, #1
 80044c8:	498c      	ldr	r1, [pc, #560]	; (80046fc <Flags+0x250>)
 80044ca:	8008      	strh	r0, [r1, #0]
 80044cc:	498c      	ldr	r1, [pc, #560]	; (8004700 <Flags+0x254>)
 80044ce:	54ca      	strb	r2, [r1, r3]

		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 80044d0:	4b8a      	ldr	r3, [pc, #552]	; (80046fc <Flags+0x250>)
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d903      	bls.n	80044e0 <Flags+0x34>
 80044d8:	4a89      	ldr	r2, [pc, #548]	; (8004700 <Flags+0x254>)
 80044da:	7812      	ldrb	r2, [r2, #0]
 80044dc:	2a24      	cmp	r2, #36	; 0x24
 80044de:	d035      	beq.n	800454c <Flags+0xa0>
		{
			DecodeCmd();
			cmdBufPos = 0;	// clear buffer
		}
		uartRxFlag = false;  // clear the flag - the 'receive character' event has been handled.
 80044e0:	2200      	movs	r2, #0
 80044e2:	4b84      	ldr	r3, [pc, #528]	; (80046f4 <Flags+0x248>)
 80044e4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 80044e6:	2201      	movs	r2, #1
 80044e8:	4983      	ldr	r1, [pc, #524]	; (80046f8 <Flags+0x24c>)
 80044ea:	4886      	ldr	r0, [pc, #536]	; (8004704 <Flags+0x258>)
 80044ec:	f7fe fabd 	bl	8002a6a <HAL_UART_Receive_IT>
	}
	if(adcFlag == 1U)
 80044f0:	4b85      	ldr	r3, [pc, #532]	; (8004708 <Flags+0x25c>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d069      	beq.n	80045cc <Flags+0x120>
		// 3. change the ADC channel
		// 4. start a new ADC sampling iteration
		//
		// the result is that all ADC 4 channels are sampled every 1ms

		if (adcCh == 0)
 80044f8:	4b84      	ldr	r3, [pc, #528]	; (800470c <Flags+0x260>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d034      	beq.n	800456a <Flags+0xbe>
		{
			vsample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
		}
		else if (adcCh == 1)
 8004500:	2b01      	cmp	r3, #1
 8004502:	d03b      	beq.n	800457c <Flags+0xd0>
		{
			isample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
		}
		else if (adcCh == 2)
 8004504:	2b02      	cmp	r3, #2
 8004506:	d042      	beq.n	800458e <Flags+0xe2>
		{
			ambientT = HAL_ADC_GetValue(&hadc1);
		}
		else if (adcCh == 3)
 8004508:	2b03      	cmp	r3, #3
 800450a:	d046      	beq.n	800459a <Flags+0xee>
		{
			waterT = HAL_ADC_GetValue(&hadc1);
		}

		adcCh++;
 800450c:	4a7f      	ldr	r2, [pc, #508]	; (800470c <Flags+0x260>)
 800450e:	7813      	ldrb	r3, [r2, #0]
 8004510:	3301      	adds	r3, #1
 8004512:	b2db      	uxtb	r3, r3
 8004514:	7013      	strb	r3, [r2, #0]
		if (adcCh >= 4)
 8004516:	2b03      	cmp	r3, #3
 8004518:	d90c      	bls.n	8004534 <Flags+0x88>
		{
			adcCh = 0;
 800451a:	2200      	movs	r2, #0
 800451c:	4b7b      	ldr	r3, [pc, #492]	; (800470c <Flags+0x260>)
 800451e:	701a      	strb	r2, [r3, #0]
			sampleCntr++;
 8004520:	4a7b      	ldr	r2, [pc, #492]	; (8004710 <Flags+0x264>)
 8004522:	7813      	ldrb	r3, [r2, #0]
 8004524:	3301      	adds	r3, #1
 8004526:	b2db      	uxtb	r3, r3
 8004528:	7013      	strb	r3, [r2, #0]

			if (sampleCntr >= RMS_WINDOW)
 800452a:	2b27      	cmp	r3, #39	; 0x27
 800452c:	d902      	bls.n	8004534 <Flags+0x88>
				adcBuf12 = 0;

				//iRMS13 = measuredRMS12*84.97807018;
				irms = measuredRMS12*84.97807018;
				adcBuf13 = 0;*/
				sampleCntr = 0;
 800452e:	2200      	movs	r2, #0
 8004530:	4b77      	ldr	r3, [pc, #476]	; (8004710 <Flags+0x264>)
 8004532:	701a      	strb	r2, [r3, #0]
				temp12 += adc12;*/
			}
		}

		ADC_ChannelConfTypeDef chdef;
		switch (adcCh)
 8004534:	4b75      	ldr	r3, [pc, #468]	; (800470c <Flags+0x260>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b03      	cmp	r3, #3
 800453a:	d836      	bhi.n	80045aa <Flags+0xfe>
 800453c:	e8df f003 	tbb	[pc, r3]
 8004540:	a19e9b33 	.word	0xa19e9b33
			cmdBufPos = 0;
 8004544:	2100      	movs	r1, #0
 8004546:	4b6d      	ldr	r3, [pc, #436]	; (80046fc <Flags+0x250>)
 8004548:	8019      	strh	r1, [r3, #0]
 800454a:	e7b8      	b.n	80044be <Flags+0x12>
		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 800454c:	1e9a      	subs	r2, r3, #2
 800454e:	496c      	ldr	r1, [pc, #432]	; (8004700 <Flags+0x254>)
 8004550:	5c8a      	ldrb	r2, [r1, r2]
 8004552:	2a0d      	cmp	r2, #13
 8004554:	d1c4      	bne.n	80044e0 <Flags+0x34>
 8004556:	3b01      	subs	r3, #1
 8004558:	5ccb      	ldrb	r3, [r1, r3]
 800455a:	2b0a      	cmp	r3, #10
 800455c:	d1c0      	bne.n	80044e0 <Flags+0x34>
			DecodeCmd();
 800455e:	f7ff fc4f 	bl	8003e00 <DecodeCmd>
			cmdBufPos = 0;	// clear buffer
 8004562:	2200      	movs	r2, #0
 8004564:	4b65      	ldr	r3, [pc, #404]	; (80046fc <Flags+0x250>)
 8004566:	801a      	strh	r2, [r3, #0]
 8004568:	e7ba      	b.n	80044e0 <Flags+0x34>
			vsample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
 800456a:	4b69      	ldr	r3, [pc, #420]	; (8004710 <Flags+0x264>)
 800456c:	781c      	ldrb	r4, [r3, #0]
 800456e:	4869      	ldr	r0, [pc, #420]	; (8004714 <Flags+0x268>)
 8004570:	f7fc f8e2 	bl	8000738 <HAL_ADC_GetValue>
 8004574:	4b68      	ldr	r3, [pc, #416]	; (8004718 <Flags+0x26c>)
 8004576:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 800457a:	e7c7      	b.n	800450c <Flags+0x60>
			isample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
 800457c:	4b64      	ldr	r3, [pc, #400]	; (8004710 <Flags+0x264>)
 800457e:	781c      	ldrb	r4, [r3, #0]
 8004580:	4864      	ldr	r0, [pc, #400]	; (8004714 <Flags+0x268>)
 8004582:	f7fc f8d9 	bl	8000738 <HAL_ADC_GetValue>
 8004586:	4b65      	ldr	r3, [pc, #404]	; (800471c <Flags+0x270>)
 8004588:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 800458c:	e7be      	b.n	800450c <Flags+0x60>
			ambientT = HAL_ADC_GetValue(&hadc1);
 800458e:	4861      	ldr	r0, [pc, #388]	; (8004714 <Flags+0x268>)
 8004590:	f7fc f8d2 	bl	8000738 <HAL_ADC_GetValue>
 8004594:	4b62      	ldr	r3, [pc, #392]	; (8004720 <Flags+0x274>)
 8004596:	6018      	str	r0, [r3, #0]
 8004598:	e7b8      	b.n	800450c <Flags+0x60>
			waterT = HAL_ADC_GetValue(&hadc1);
 800459a:	485e      	ldr	r0, [pc, #376]	; (8004714 <Flags+0x268>)
 800459c:	f7fc f8cc 	bl	8000738 <HAL_ADC_GetValue>
 80045a0:	4b60      	ldr	r3, [pc, #384]	; (8004724 <Flags+0x278>)
 80045a2:	6018      	str	r0, [r3, #0]
 80045a4:	e7b2      	b.n	800450c <Flags+0x60>
		{
		case 0: chdef.Channel = ADC_CHANNEL_12; break;  //V				//PB1
 80045a6:	230c      	movs	r3, #12
 80045a8:	9302      	str	r3, [sp, #8]
		case 1: chdef.Channel = ADC_CHANNEL_13; break;  //I				//PB13
		case 2: chdef.Channel = ADC_CHANNEL_8; break; //temp ambient	//PC2
		case 3: chdef.Channel = ADC_CHANNEL_9; break; //temp water		//PC3
		}

		chdef.Rank = 1;
 80045aa:	2301      	movs	r3, #1
 80045ac:	9303      	str	r3, [sp, #12]
		chdef.SingleDiff = ADC_SINGLE_ENDED;
 80045ae:	2400      	movs	r4, #0
 80045b0:	9405      	str	r4, [sp, #20]
		chdef.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80045b2:	9404      	str	r4, [sp, #16]
		chdef.OffsetNumber = ADC_OFFSET_NONE;
 80045b4:	9406      	str	r4, [sp, #24]
		chdef.Offset = 0;
 80045b6:	9407      	str	r4, [sp, #28]
		HAL_ADC_ConfigChannel(&hadc1, &chdef);
 80045b8:	4d56      	ldr	r5, [pc, #344]	; (8004714 <Flags+0x268>)
 80045ba:	a902      	add	r1, sp, #8
 80045bc:	4628      	mov	r0, r5
 80045be:	f7fc f8bf 	bl	8000740 <HAL_ADC_ConfigChannel>

		HAL_ADC_Start(&hadc1);
 80045c2:	4628      	mov	r0, r5
 80045c4:	f7fc f836 	bl	8000634 <HAL_ADC_Start>

		adcFlag = 0;
 80045c8:	4b4f      	ldr	r3, [pc, #316]	; (8004708 <Flags+0x25c>)
 80045ca:	701c      	strb	r4, [r3, #0]
	}

	if (flowHighFlag == 1)
 80045cc:	4b56      	ldr	r3, [pc, #344]	; (8004728 <Flags+0x27c>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	b1c3      	cbz	r3, 8004604 <Flags+0x158>
	{
		if (firstHighFlag == 1)
 80045d2:	4b56      	ldr	r3, [pc, #344]	; (800472c <Flags+0x280>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	b143      	cbz	r3, 80045ea <Flags+0x13e>
		{
			firstHighFlag = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	4a54      	ldr	r2, [pc, #336]	; (800472c <Flags+0x280>)
 80045dc:	7013      	strb	r3, [r2, #0]
			ms5Counter = 0;
 80045de:	4a54      	ldr	r2, [pc, #336]	; (8004730 <Flags+0x284>)
 80045e0:	7013      	strb	r3, [r2, #0]
			ms5Flag = 0;
 80045e2:	4a54      	ldr	r2, [pc, #336]	; (8004734 <Flags+0x288>)
 80045e4:	7013      	strb	r3, [r2, #0]
			flowPulse = 0;
 80045e6:	4a54      	ldr	r2, [pc, #336]	; (8004738 <Flags+0x28c>)
 80045e8:	7013      	strb	r3, [r2, #0]
		}
		if (ms5Flag == 1)
 80045ea:	4b52      	ldr	r3, [pc, #328]	; (8004734 <Flags+0x288>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	b14b      	cbz	r3, 8004604 <Flags+0x158>
		{
			ms5Flag = 0;
 80045f0:	2200      	movs	r2, #0
 80045f2:	4b50      	ldr	r3, [pc, #320]	; (8004734 <Flags+0x288>)
 80045f4:	701a      	strb	r2, [r3, #0]

			flowPulse++;
 80045f6:	4a50      	ldr	r2, [pc, #320]	; (8004738 <Flags+0x28c>)
 80045f8:	7813      	ldrb	r3, [r2, #0]
 80045fa:	3301      	adds	r3, #1
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	7013      	strb	r3, [r2, #0]
			if (flowPulse == 1)
 8004600:	2b01      	cmp	r3, #1
 8004602:	d041      	beq.n	8004688 <Flags+0x1dc>
			}
		}
	}

	// 1ms timer
	uint32_t tick = HAL_GetTick();
 8004604:	f7fb fe7c 	bl	8000300 <HAL_GetTick>
	if (tick != lasttick)
 8004608:	4b4c      	ldr	r3, [pc, #304]	; (800473c <Flags+0x290>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4298      	cmp	r0, r3
 800460e:	d02a      	beq.n	8004666 <Flags+0x1ba>
	{
		lasttick = tick;
 8004610:	4b4a      	ldr	r3, [pc, #296]	; (800473c <Flags+0x290>)
 8004612:	6018      	str	r0, [r3, #0]

		ms5Counter++;
 8004614:	4a46      	ldr	r2, [pc, #280]	; (8004730 <Flags+0x284>)
 8004616:	7813      	ldrb	r3, [r2, #0]
 8004618:	3301      	adds	r3, #1
 800461a:	b2db      	uxtb	r3, r3
 800461c:	7013      	strb	r3, [r2, #0]
		if (ms5Counter >= 5)
 800461e:	7813      	ldrb	r3, [r2, #0]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b04      	cmp	r3, #4
 8004624:	d905      	bls.n	8004632 <Flags+0x186>
		{
			ms5Counter = 0;
 8004626:	2200      	movs	r2, #0
 8004628:	4b41      	ldr	r3, [pc, #260]	; (8004730 <Flags+0x284>)
 800462a:	701a      	strb	r2, [r3, #0]
			ms5Flag = 1;
 800462c:	2201      	movs	r2, #1
 800462e:	4b41      	ldr	r3, [pc, #260]	; (8004734 <Flags+0x288>)
 8004630:	701a      	strb	r2, [r3, #0]
		}

		s1Counter++;
 8004632:	4a43      	ldr	r2, [pc, #268]	; (8004740 <Flags+0x294>)
 8004634:	8813      	ldrh	r3, [r2, #0]
 8004636:	b29b      	uxth	r3, r3
 8004638:	3301      	adds	r3, #1
 800463a:	b29b      	uxth	r3, r3
 800463c:	8013      	strh	r3, [r2, #0]
		if (s1Counter >= 1000)
 800463e:	8813      	ldrh	r3, [r2, #0]
 8004640:	b29b      	uxth	r3, r3
 8004642:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004646:	d229      	bcs.n	800469c <Flags+0x1f0>
				}
				switchHeater();
			}
		}

		writeToPins(segementsSet, pinsValue, segmentsL, i);
 8004648:	4c3e      	ldr	r4, [pc, #248]	; (8004744 <Flags+0x298>)
 800464a:	4d3f      	ldr	r5, [pc, #252]	; (8004748 <Flags+0x29c>)
 800464c:	7823      	ldrb	r3, [r4, #0]
 800464e:	782a      	ldrb	r2, [r5, #0]
 8004650:	493e      	ldr	r1, [pc, #248]	; (800474c <Flags+0x2a0>)
 8004652:	483f      	ldr	r0, [pc, #252]	; (8004750 <Flags+0x2a4>)
 8004654:	f7fe febe 	bl	80033d4 <writeToPins>
		i++;
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	3301      	adds	r3, #1
 800465c:	6023      	str	r3, [r4, #0]

		if (i == segmentsL)
 800465e:	782a      	ldrb	r2, [r5, #0]
 8004660:	4293      	cmp	r3, r2
 8004662:	f000 80c0 	beq.w	80047e6 <Flags+0x33a>
	//HAL_I2C_Master_Receive(&hi2c1, 0x45<<1, &buffer[1], 3, 100);
	//HAL_I2C_Master_Transmit(&hi2c1, 0x45<<1, buffer, 4, 100); //45 rotary slider
	//HAL_I2C_Master_Receive(&hi2c1, 0x45<<1, &buffer[0], 1, 100);


	if (i2cTxFlag)	//Now process the interrupt call-back
 8004666:	4b3b      	ldr	r3, [pc, #236]	; (8004754 <Flags+0x2a8>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	b113      	cbz	r3, 8004672 <Flags+0x1c6>
	{
		i2cTxFlag = 0;
 800466c:	2200      	movs	r2, #0
 800466e:	4b39      	ldr	r3, [pc, #228]	; (8004754 <Flags+0x2a8>)
 8004670:	701a      	strb	r2, [r3, #0]
		//float value = buffer[0]<<8 | buffer[1]; //combine 2 8-bit into 1 16-bit

		//HAL_Delay(100);
		//HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
	}
}
 8004672:	b009      	add	sp, #36	; 0x24
 8004674:	bd30      	pop	{r4, r5, pc}
		case 1: chdef.Channel = ADC_CHANNEL_13; break;  //I				//PB13
 8004676:	230d      	movs	r3, #13
 8004678:	9302      	str	r3, [sp, #8]
 800467a:	e796      	b.n	80045aa <Flags+0xfe>
		case 2: chdef.Channel = ADC_CHANNEL_8; break; //temp ambient	//PC2
 800467c:	2308      	movs	r3, #8
 800467e:	9302      	str	r3, [sp, #8]
 8004680:	e793      	b.n	80045aa <Flags+0xfe>
		case 3: chdef.Channel = ADC_CHANNEL_9; break; //temp water		//PC3
 8004682:	2309      	movs	r3, #9
 8004684:	9302      	str	r3, [sp, #8]
 8004686:	e790      	b.n	80045aa <Flags+0xfe>
				flowCounter++;
 8004688:	4a33      	ldr	r2, [pc, #204]	; (8004758 <Flags+0x2ac>)
 800468a:	6813      	ldr	r3, [r2, #0]
 800468c:	3301      	adds	r3, #1
 800468e:	6013      	str	r3, [r2, #0]
				totalFlow = 100*flowCounter;
 8004690:	2264      	movs	r2, #100	; 0x64
 8004692:	fb02 f303 	mul.w	r3, r2, r3
 8004696:	4a31      	ldr	r2, [pc, #196]	; (800475c <Flags+0x2b0>)
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e7b3      	b.n	8004604 <Flags+0x158>
			s1Counter = 0;
 800469c:	2200      	movs	r2, #0
 800469e:	4b28      	ldr	r3, [pc, #160]	; (8004740 <Flags+0x294>)
 80046a0:	801a      	strh	r2, [r3, #0]
			halStatus = HAL_RTC_GetTime(&hrtc, &getTimeLive, RTC_FORMAT_BCD);
 80046a2:	4d2f      	ldr	r5, [pc, #188]	; (8004760 <Flags+0x2b4>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	492f      	ldr	r1, [pc, #188]	; (8004764 <Flags+0x2b8>)
 80046a8:	4628      	mov	r0, r5
 80046aa:	f7fd fec0 	bl	800242e <HAL_RTC_GetTime>
 80046ae:	4c2e      	ldr	r4, [pc, #184]	; (8004768 <Flags+0x2bc>)
 80046b0:	7020      	strb	r0, [r4, #0]
			halStatus = HAL_RTC_GetDate(&hrtc, &getDateLive, RTC_FORMAT_BCD);
 80046b2:	2201      	movs	r2, #1
 80046b4:	492d      	ldr	r1, [pc, #180]	; (800476c <Flags+0x2c0>)
 80046b6:	4628      	mov	r0, r5
 80046b8:	f7fd fee4 	bl	8002484 <HAL_RTC_GetDate>
 80046bc:	7020      	strb	r0, [r4, #0]
			if (scheduleState == 1)
 80046be:	4b2c      	ldr	r3, [pc, #176]	; (8004770 <Flags+0x2c4>)
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b21b      	sxth	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d1bf      	bne.n	8004648 <Flags+0x19c>
				tNow = timeToEpoch(getDateLive, getTimeLive);
 80046c8:	4b26      	ldr	r3, [pc, #152]	; (8004764 <Flags+0x2b8>)
 80046ca:	4a28      	ldr	r2, [pc, #160]	; (800476c <Flags+0x2c0>)
 80046cc:	6814      	ldr	r4, [r2, #0]
 80046ce:	f103 020c 	add.w	r2, r3, #12
 80046d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046d6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80046da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046dc:	4620      	mov	r0, r4
 80046de:	f7fe fef7 	bl	80034d0 <timeToEpoch>
 80046e2:	4b24      	ldr	r3, [pc, #144]	; (8004774 <Flags+0x2c8>)
 80046e4:	6018      	str	r0, [r3, #0]
				i = 0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	4a16      	ldr	r2, [pc, #88]	; (8004744 <Flags+0x298>)
 80046ea:	6013      	str	r3, [r2, #0]
				heaterFlag = 0;
 80046ec:	4a22      	ldr	r2, [pc, #136]	; (8004778 <Flags+0x2cc>)
 80046ee:	7013      	strb	r3, [r2, #0]
				while (i < 3)
 80046f0:	e058      	b.n	80047a4 <Flags+0x2f8>
 80046f2:	bf00      	nop
 80046f4:	200002ad 	.word	0x200002ad
 80046f8:	20000588 	.word	0x20000588
 80046fc:	20000682 	.word	0x20000682
 8004700:	20000600 	.word	0x20000600
 8004704:	20000360 	.word	0x20000360
 8004708:	200002bc 	.word	0x200002bc
 800470c:	20000665 	.word	0x20000665
 8004710:	20000438 	.word	0x20000438
 8004714:	2000030c 	.word	0x2000030c
 8004718:	20000528 	.word	0x20000528
 800471c:	200005a8 	.word	0x200005a8
 8004720:	20000434 	.word	0x20000434
 8004724:	2000067c 	.word	0x2000067c
 8004728:	200002ac 	.word	0x200002ac
 800472c:	20000290 	.word	0x20000290
 8004730:	2000063c 	.word	0x2000063c
 8004734:	2000048d 	.word	0x2000048d
 8004738:	20000663 	.word	0x20000663
 800473c:	200004ac 	.word	0x200004ac
 8004740:	20000644 	.word	0x20000644
 8004744:	2000029c 	.word	0x2000029c
 8004748:	20000240 	.word	0x20000240
 800474c:	20000640 	.word	0x20000640
 8004750:	20000294 	.word	0x20000294
 8004754:	200002af 	.word	0x200002af
 8004758:	2000066c 	.word	0x2000066c
 800475c:	20000678 	.word	0x20000678
 8004760:	200003d0 	.word	0x200003d0
 8004764:	20000498 	.word	0x20000498
 8004768:	2000048e 	.word	0x2000048e
 800476c:	20000684 	.word	0x20000684
 8004770:	200002be 	.word	0x200002be
 8004774:	200002a4 	.word	0x200002a4
 8004778:	2000065d 	.word	0x2000065d
					if (tNow >= offEpoch[iCurrent] && heaterFlag == 1)
 800477c:	4a1b      	ldr	r2, [pc, #108]	; (80047ec <Flags+0x340>)
 800477e:	7811      	ldrb	r1, [r2, #0]
 8004780:	4a1b      	ldr	r2, [pc, #108]	; (80047f0 <Flags+0x344>)
 8004782:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8004786:	4a1b      	ldr	r2, [pc, #108]	; (80047f4 <Flags+0x348>)
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	4291      	cmp	r1, r2
 800478c:	dc07      	bgt.n	800479e <Flags+0x2f2>
 800478e:	4a1a      	ldr	r2, [pc, #104]	; (80047f8 <Flags+0x34c>)
 8004790:	7812      	ldrb	r2, [r2, #0]
 8004792:	b122      	cbz	r2, 800479e <Flags+0x2f2>
						heaterState = 0;
 8004794:	2200      	movs	r2, #0
 8004796:	4919      	ldr	r1, [pc, #100]	; (80047fc <Flags+0x350>)
 8004798:	800a      	strh	r2, [r1, #0]
						heaterFlag = 0;
 800479a:	4917      	ldr	r1, [pc, #92]	; (80047f8 <Flags+0x34c>)
 800479c:	700a      	strb	r2, [r1, #0]
					i++;
 800479e:	3301      	adds	r3, #1
 80047a0:	4a17      	ldr	r2, [pc, #92]	; (8004800 <Flags+0x354>)
 80047a2:	6013      	str	r3, [r2, #0]
				while (i < 3)
 80047a4:	4b16      	ldr	r3, [pc, #88]	; (8004800 <Flags+0x354>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	dc19      	bgt.n	80047e0 <Flags+0x334>
					if (tNow >= onEpoch[i] && tNow <= offEpoch[i] && heaterFlag == 0)
 80047ac:	4a15      	ldr	r2, [pc, #84]	; (8004804 <Flags+0x358>)
 80047ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047b2:	4a10      	ldr	r2, [pc, #64]	; (80047f4 <Flags+0x348>)
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	4291      	cmp	r1, r2
 80047b8:	dce0      	bgt.n	800477c <Flags+0x2d0>
 80047ba:	4a0d      	ldr	r2, [pc, #52]	; (80047f0 <Flags+0x344>)
 80047bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047c0:	4a0c      	ldr	r2, [pc, #48]	; (80047f4 <Flags+0x348>)
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	4291      	cmp	r1, r2
 80047c6:	dbd9      	blt.n	800477c <Flags+0x2d0>
 80047c8:	4a0b      	ldr	r2, [pc, #44]	; (80047f8 <Flags+0x34c>)
 80047ca:	7812      	ldrb	r2, [r2, #0]
 80047cc:	2a00      	cmp	r2, #0
 80047ce:	d1d5      	bne.n	800477c <Flags+0x2d0>
						heaterState = 1;
 80047d0:	2201      	movs	r2, #1
 80047d2:	490a      	ldr	r1, [pc, #40]	; (80047fc <Flags+0x350>)
 80047d4:	800a      	strh	r2, [r1, #0]
						iCurrent = i;
 80047d6:	4905      	ldr	r1, [pc, #20]	; (80047ec <Flags+0x340>)
 80047d8:	700b      	strb	r3, [r1, #0]
						heaterFlag = 1;
 80047da:	4907      	ldr	r1, [pc, #28]	; (80047f8 <Flags+0x34c>)
 80047dc:	700a      	strb	r2, [r1, #0]
 80047de:	e7cd      	b.n	800477c <Flags+0x2d0>
				switchHeater();
 80047e0:	f7fe fd30 	bl	8003244 <switchHeater>
 80047e4:	e730      	b.n	8004648 <Flags+0x19c>
			i = 0;
 80047e6:	2200      	movs	r2, #0
 80047e8:	6022      	str	r2, [r4, #0]
 80047ea:	e73c      	b.n	8004666 <Flags+0x1ba>
 80047ec:	20000578 	.word	0x20000578
 80047f0:	200002b0 	.word	0x200002b0
 80047f4:	200002a4 	.word	0x200002a4
 80047f8:	2000065d 	.word	0x2000065d
 80047fc:	200002a8 	.word	0x200002a8
 8004800:	2000029c 	.word	0x2000029c
 8004804:	20000284 	.word	0x20000284

08004808 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004840 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800480c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800480e:	e003      	b.n	8004818 <LoopCopyDataInit>

08004810 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004810:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004812:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004814:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004816:	3104      	adds	r1, #4

08004818 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004818:	480b      	ldr	r0, [pc, #44]	; (8004848 <LoopForever+0xa>)
	ldr	r3, =_edata
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <LoopForever+0xe>)
	adds	r2, r0, r1
 800481c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800481e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004820:	d3f6      	bcc.n	8004810 <CopyDataInit>
	ldr	r2, =_sbss
 8004822:	4a0b      	ldr	r2, [pc, #44]	; (8004850 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004824:	e002      	b.n	800482c <LoopFillZerobss>

08004826 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004826:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004828:	f842 3b04 	str.w	r3, [r2], #4

0800482c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800482c:	4b09      	ldr	r3, [pc, #36]	; (8004854 <LoopForever+0x16>)
	cmp	r2, r3
 800482e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004830:	d3f9      	bcc.n	8004826 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004832:	f7ff fa3d 	bl	8003cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004836:	f000 f811 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800483a:	f7ff f8cd 	bl	80039d8 <main>

0800483e <LoopForever>:

LoopForever:
    b LoopForever
 800483e:	e7fe      	b.n	800483e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004840:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004844:	080061ec 	.word	0x080061ec
	ldr	r0, =_sdata
 8004848:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800484c:	20000224 	.word	0x20000224
	ldr	r2, =_sbss
 8004850:	20000224 	.word	0x20000224
	ldr	r3, = _ebss
 8004854:	20000690 	.word	0x20000690

08004858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004858:	e7fe      	b.n	8004858 <ADC1_2_IRQHandler>
	...

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	4e0d      	ldr	r6, [pc, #52]	; (8004894 <__libc_init_array+0x38>)
 8004860:	4c0d      	ldr	r4, [pc, #52]	; (8004898 <__libc_init_array+0x3c>)
 8004862:	1ba4      	subs	r4, r4, r6
 8004864:	10a4      	asrs	r4, r4, #2
 8004866:	2500      	movs	r5, #0
 8004868:	42a5      	cmp	r5, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	4e0b      	ldr	r6, [pc, #44]	; (800489c <__libc_init_array+0x40>)
 800486e:	4c0c      	ldr	r4, [pc, #48]	; (80048a0 <__libc_init_array+0x44>)
 8004870:	f001 fb36 	bl	8005ee0 <_init>
 8004874:	1ba4      	subs	r4, r4, r6
 8004876:	10a4      	asrs	r4, r4, #2
 8004878:	2500      	movs	r5, #0
 800487a:	42a5      	cmp	r5, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004884:	4798      	blx	r3
 8004886:	3501      	adds	r5, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800488e:	4798      	blx	r3
 8004890:	3501      	adds	r5, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	080061e4 	.word	0x080061e4
 8004898:	080061e4 	.word	0x080061e4
 800489c:	080061e4 	.word	0x080061e4
 80048a0:	080061e8 	.word	0x080061e8

080048a4 <validate_structure>:
 80048a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048a6:	6801      	ldr	r1, [r0, #0]
 80048a8:	293b      	cmp	r1, #59	; 0x3b
 80048aa:	4604      	mov	r4, r0
 80048ac:	d911      	bls.n	80048d2 <validate_structure+0x2e>
 80048ae:	223c      	movs	r2, #60	; 0x3c
 80048b0:	4668      	mov	r0, sp
 80048b2:	f000 fc85 	bl	80051c0 <div>
 80048b6:	9a01      	ldr	r2, [sp, #4]
 80048b8:	6863      	ldr	r3, [r4, #4]
 80048ba:	9900      	ldr	r1, [sp, #0]
 80048bc:	2a00      	cmp	r2, #0
 80048be:	440b      	add	r3, r1
 80048c0:	6063      	str	r3, [r4, #4]
 80048c2:	bfbb      	ittet	lt
 80048c4:	323c      	addlt	r2, #60	; 0x3c
 80048c6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80048ca:	6022      	strge	r2, [r4, #0]
 80048cc:	6022      	strlt	r2, [r4, #0]
 80048ce:	bfb8      	it	lt
 80048d0:	6063      	strlt	r3, [r4, #4]
 80048d2:	6861      	ldr	r1, [r4, #4]
 80048d4:	293b      	cmp	r1, #59	; 0x3b
 80048d6:	d911      	bls.n	80048fc <validate_structure+0x58>
 80048d8:	223c      	movs	r2, #60	; 0x3c
 80048da:	4668      	mov	r0, sp
 80048dc:	f000 fc70 	bl	80051c0 <div>
 80048e0:	9a01      	ldr	r2, [sp, #4]
 80048e2:	68a3      	ldr	r3, [r4, #8]
 80048e4:	9900      	ldr	r1, [sp, #0]
 80048e6:	2a00      	cmp	r2, #0
 80048e8:	440b      	add	r3, r1
 80048ea:	60a3      	str	r3, [r4, #8]
 80048ec:	bfbb      	ittet	lt
 80048ee:	323c      	addlt	r2, #60	; 0x3c
 80048f0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80048f4:	6062      	strge	r2, [r4, #4]
 80048f6:	6062      	strlt	r2, [r4, #4]
 80048f8:	bfb8      	it	lt
 80048fa:	60a3      	strlt	r3, [r4, #8]
 80048fc:	68a1      	ldr	r1, [r4, #8]
 80048fe:	2917      	cmp	r1, #23
 8004900:	d911      	bls.n	8004926 <validate_structure+0x82>
 8004902:	2218      	movs	r2, #24
 8004904:	4668      	mov	r0, sp
 8004906:	f000 fc5b 	bl	80051c0 <div>
 800490a:	9a01      	ldr	r2, [sp, #4]
 800490c:	68e3      	ldr	r3, [r4, #12]
 800490e:	9900      	ldr	r1, [sp, #0]
 8004910:	2a00      	cmp	r2, #0
 8004912:	440b      	add	r3, r1
 8004914:	60e3      	str	r3, [r4, #12]
 8004916:	bfbb      	ittet	lt
 8004918:	3218      	addlt	r2, #24
 800491a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800491e:	60a2      	strge	r2, [r4, #8]
 8004920:	60a2      	strlt	r2, [r4, #8]
 8004922:	bfb8      	it	lt
 8004924:	60e3      	strlt	r3, [r4, #12]
 8004926:	6921      	ldr	r1, [r4, #16]
 8004928:	290b      	cmp	r1, #11
 800492a:	d911      	bls.n	8004950 <validate_structure+0xac>
 800492c:	220c      	movs	r2, #12
 800492e:	4668      	mov	r0, sp
 8004930:	f000 fc46 	bl	80051c0 <div>
 8004934:	9a01      	ldr	r2, [sp, #4]
 8004936:	6963      	ldr	r3, [r4, #20]
 8004938:	9900      	ldr	r1, [sp, #0]
 800493a:	2a00      	cmp	r2, #0
 800493c:	440b      	add	r3, r1
 800493e:	6163      	str	r3, [r4, #20]
 8004940:	bfbb      	ittet	lt
 8004942:	320c      	addlt	r2, #12
 8004944:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8004948:	6122      	strge	r2, [r4, #16]
 800494a:	6122      	strlt	r2, [r4, #16]
 800494c:	bfb8      	it	lt
 800494e:	6163      	strlt	r3, [r4, #20]
 8004950:	6963      	ldr	r3, [r4, #20]
 8004952:	0799      	lsls	r1, r3, #30
 8004954:	d143      	bne.n	80049de <validate_structure+0x13a>
 8004956:	2164      	movs	r1, #100	; 0x64
 8004958:	fb93 f2f1 	sdiv	r2, r3, r1
 800495c:	fb01 3212 	mls	r2, r1, r2, r3
 8004960:	2a00      	cmp	r2, #0
 8004962:	d13e      	bne.n	80049e2 <validate_structure+0x13e>
 8004964:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8004968:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800496c:	fb93 f2f1 	sdiv	r2, r3, r1
 8004970:	fb01 3312 	mls	r3, r1, r2, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	bf14      	ite	ne
 8004978:	231c      	movne	r3, #28
 800497a:	231d      	moveq	r3, #29
 800497c:	68e2      	ldr	r2, [r4, #12]
 800497e:	2a00      	cmp	r2, #0
 8004980:	dd31      	ble.n	80049e6 <validate_structure+0x142>
 8004982:	4f37      	ldr	r7, [pc, #220]	; (8004a60 <validate_structure+0x1bc>)
 8004984:	2602      	movs	r6, #2
 8004986:	f04f 0e00 	mov.w	lr, #0
 800498a:	2064      	movs	r0, #100	; 0x64
 800498c:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8004990:	6921      	ldr	r1, [r4, #16]
 8004992:	68e2      	ldr	r2, [r4, #12]
 8004994:	2901      	cmp	r1, #1
 8004996:	d05d      	beq.n	8004a54 <validate_structure+0x1b0>
 8004998:	f857 c021 	ldr.w	ip, [r7, r1, lsl #2]
 800499c:	4562      	cmp	r2, ip
 800499e:	dd2c      	ble.n	80049fa <validate_structure+0x156>
 80049a0:	3101      	adds	r1, #1
 80049a2:	eba2 020c 	sub.w	r2, r2, ip
 80049a6:	290c      	cmp	r1, #12
 80049a8:	60e2      	str	r2, [r4, #12]
 80049aa:	6121      	str	r1, [r4, #16]
 80049ac:	d1f0      	bne.n	8004990 <validate_structure+0xec>
 80049ae:	6963      	ldr	r3, [r4, #20]
 80049b0:	f8c4 e010 	str.w	lr, [r4, #16]
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	0791      	lsls	r1, r2, #30
 80049b8:	6162      	str	r2, [r4, #20]
 80049ba:	d147      	bne.n	8004a4c <validate_structure+0x1a8>
 80049bc:	fb92 f1f0 	sdiv	r1, r2, r0
 80049c0:	fb00 2211 	mls	r2, r0, r1, r2
 80049c4:	2a00      	cmp	r2, #0
 80049c6:	d143      	bne.n	8004a50 <validate_structure+0x1ac>
 80049c8:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80049cc:	fb93 f2f5 	sdiv	r2, r3, r5
 80049d0:	fb05 3312 	mls	r3, r5, r2, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf14      	ite	ne
 80049d8:	231c      	movne	r3, #28
 80049da:	231d      	moveq	r3, #29
 80049dc:	e7d8      	b.n	8004990 <validate_structure+0xec>
 80049de:	231c      	movs	r3, #28
 80049e0:	e7cc      	b.n	800497c <validate_structure+0xd8>
 80049e2:	231d      	movs	r3, #29
 80049e4:	e7ca      	b.n	800497c <validate_structure+0xd8>
 80049e6:	4f1e      	ldr	r7, [pc, #120]	; (8004a60 <validate_structure+0x1bc>)
 80049e8:	260b      	movs	r6, #11
 80049ea:	2064      	movs	r0, #100	; 0x64
 80049ec:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80049f0:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80049f4:	f1be 0f00 	cmp.w	lr, #0
 80049f8:	dd01      	ble.n	80049fe <validate_structure+0x15a>
 80049fa:	b003      	add	sp, #12
 80049fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049fe:	6921      	ldr	r1, [r4, #16]
 8004a00:	3901      	subs	r1, #1
 8004a02:	6121      	str	r1, [r4, #16]
 8004a04:	3101      	adds	r1, #1
 8004a06:	d114      	bne.n	8004a32 <validate_structure+0x18e>
 8004a08:	6963      	ldr	r3, [r4, #20]
 8004a0a:	6126      	str	r6, [r4, #16]
 8004a0c:	1e59      	subs	r1, r3, #1
 8004a0e:	078a      	lsls	r2, r1, #30
 8004a10:	6161      	str	r1, [r4, #20]
 8004a12:	d117      	bne.n	8004a44 <validate_structure+0x1a0>
 8004a14:	fb91 f2f0 	sdiv	r2, r1, r0
 8004a18:	fb00 1112 	mls	r1, r0, r2, r1
 8004a1c:	b9a1      	cbnz	r1, 8004a48 <validate_structure+0x1a4>
 8004a1e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8004a22:	fb93 f2f5 	sdiv	r2, r3, r5
 8004a26:	fb05 3312 	mls	r3, r5, r2, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	bf14      	ite	ne
 8004a2e:	231c      	movne	r3, #28
 8004a30:	231d      	moveq	r3, #29
 8004a32:	6922      	ldr	r2, [r4, #16]
 8004a34:	2a01      	cmp	r2, #1
 8004a36:	bf14      	ite	ne
 8004a38:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8004a3c:	461a      	moveq	r2, r3
 8004a3e:	4472      	add	r2, lr
 8004a40:	60e2      	str	r2, [r4, #12]
 8004a42:	e7d5      	b.n	80049f0 <validate_structure+0x14c>
 8004a44:	231c      	movs	r3, #28
 8004a46:	e7f4      	b.n	8004a32 <validate_structure+0x18e>
 8004a48:	231d      	movs	r3, #29
 8004a4a:	e7f2      	b.n	8004a32 <validate_structure+0x18e>
 8004a4c:	231c      	movs	r3, #28
 8004a4e:	e79f      	b.n	8004990 <validate_structure+0xec>
 8004a50:	231d      	movs	r3, #29
 8004a52:	e79d      	b.n	8004990 <validate_structure+0xec>
 8004a54:	4293      	cmp	r3, r2
 8004a56:	dad0      	bge.n	80049fa <validate_structure+0x156>
 8004a58:	1ad2      	subs	r2, r2, r3
 8004a5a:	60e2      	str	r2, [r4, #12]
 8004a5c:	6126      	str	r6, [r4, #16]
 8004a5e:	e797      	b.n	8004990 <validate_structure+0xec>
 8004a60:	08005f5c 	.word	0x08005f5c

08004a64 <mktime>:
 8004a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	4681      	mov	r9, r0
 8004a6a:	f000 fc05 	bl	8005278 <__gettzinfo>
 8004a6e:	4680      	mov	r8, r0
 8004a70:	4648      	mov	r0, r9
 8004a72:	f7ff ff17 	bl	80048a4 <validate_structure>
 8004a76:	e899 0081 	ldmia.w	r9, {r0, r7}
 8004a7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004a7e:	4ab4      	ldr	r2, [pc, #720]	; (8004d50 <mktime+0x2ec>)
 8004a80:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8004a84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a88:	253c      	movs	r5, #60	; 0x3c
 8004a8a:	fb05 0707 	mla	r7, r5, r7, r0
 8004a8e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8004a92:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 8004a96:	3c01      	subs	r4, #1
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	fb05 7000 	mla	r0, r5, r0, r7
 8004a9e:	4414      	add	r4, r2
 8004aa0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004aa4:	dd11      	ble.n	8004aca <mktime+0x66>
 8004aa6:	0799      	lsls	r1, r3, #30
 8004aa8:	d10f      	bne.n	8004aca <mktime+0x66>
 8004aaa:	2164      	movs	r1, #100	; 0x64
 8004aac:	fb93 f2f1 	sdiv	r2, r3, r1
 8004ab0:	fb01 3212 	mls	r2, r1, r2, r3
 8004ab4:	b942      	cbnz	r2, 8004ac8 <mktime+0x64>
 8004ab6:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8004aba:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004abe:	fb95 f2f1 	sdiv	r2, r5, r1
 8004ac2:	fb01 5212 	mls	r2, r1, r2, r5
 8004ac6:	b902      	cbnz	r2, 8004aca <mktime+0x66>
 8004ac8:	3401      	adds	r4, #1
 8004aca:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 8004ace:	3210      	adds	r2, #16
 8004ad0:	f644 6120 	movw	r1, #20000	; 0x4e20
 8004ad4:	428a      	cmp	r2, r1
 8004ad6:	f8c9 401c 	str.w	r4, [r9, #28]
 8004ada:	f200 812d 	bhi.w	8004d38 <mktime+0x2d4>
 8004ade:	2b46      	cmp	r3, #70	; 0x46
 8004ae0:	dd70      	ble.n	8004bc4 <mktime+0x160>
 8004ae2:	2546      	movs	r5, #70	; 0x46
 8004ae4:	f240 176d 	movw	r7, #365	; 0x16d
 8004ae8:	2164      	movs	r1, #100	; 0x64
 8004aea:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8004aee:	07aa      	lsls	r2, r5, #30
 8004af0:	d162      	bne.n	8004bb8 <mktime+0x154>
 8004af2:	fb95 f2f1 	sdiv	r2, r5, r1
 8004af6:	fb01 5212 	mls	r2, r1, r2, r5
 8004afa:	2a00      	cmp	r2, #0
 8004afc:	d15f      	bne.n	8004bbe <mktime+0x15a>
 8004afe:	f205 7e6c 	addw	lr, r5, #1900	; 0x76c
 8004b02:	fb9e f2f6 	sdiv	r2, lr, r6
 8004b06:	fb06 e212 	mls	r2, r6, r2, lr
 8004b0a:	2a00      	cmp	r2, #0
 8004b0c:	bf14      	ite	ne
 8004b0e:	463a      	movne	r2, r7
 8004b10:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8004b14:	3501      	adds	r5, #1
 8004b16:	42ab      	cmp	r3, r5
 8004b18:	4414      	add	r4, r2
 8004b1a:	d1e8      	bne.n	8004aee <mktime+0x8a>
 8004b1c:	4f8d      	ldr	r7, [pc, #564]	; (8004d54 <mktime+0x2f0>)
 8004b1e:	fb07 0704 	mla	r7, r7, r4, r0
 8004b22:	f000 f9c3 	bl	8004eac <__tz_lock>
 8004b26:	f000 f9c3 	bl	8004eb0 <_tzset_unlocked>
 8004b2a:	4b8b      	ldr	r3, [pc, #556]	; (8004d58 <mktime+0x2f4>)
 8004b2c:	681e      	ldr	r6, [r3, #0]
 8004b2e:	2e00      	cmp	r6, #0
 8004b30:	f000 810a 	beq.w	8004d48 <mktime+0x2e4>
 8004b34:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8004b38:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	bfa8      	it	ge
 8004b40:	2301      	movge	r3, #1
 8004b42:	469a      	mov	sl, r3
 8004b44:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004b48:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8004b4c:	4298      	cmp	r0, r3
 8004b4e:	d17c      	bne.n	8004c4a <mktime+0x1e6>
 8004b50:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 8004b54:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8004b58:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 8004b5c:	f8d8 101c 	ldr.w	r1, [r8, #28]
 8004b60:	1ad6      	subs	r6, r2, r3
 8004b62:	42b7      	cmp	r7, r6
 8004b64:	eba1 0100 	sub.w	r1, r1, r0
 8004b68:	da76      	bge.n	8004c58 <mktime+0x1f4>
 8004b6a:	f8d8 2000 	ldr.w	r2, [r8]
 8004b6e:	2a00      	cmp	r2, #0
 8004b70:	d076      	beq.n	8004c60 <mktime+0x1fc>
 8004b72:	428f      	cmp	r7, r1
 8004b74:	f2c0 80e3 	blt.w	8004d3e <mktime+0x2da>
 8004b78:	42b7      	cmp	r7, r6
 8004b7a:	bfac      	ite	ge
 8004b7c:	2600      	movge	r6, #0
 8004b7e:	2601      	movlt	r6, #1
 8004b80:	f1ba 0f00 	cmp.w	sl, #0
 8004b84:	da72      	bge.n	8004c6c <mktime+0x208>
 8004b86:	2e01      	cmp	r6, #1
 8004b88:	f040 80de 	bne.w	8004d48 <mktime+0x2e4>
 8004b8c:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 8004b90:	2601      	movs	r6, #1
 8004b92:	443d      	add	r5, r7
 8004b94:	f000 f98b 	bl	8004eae <__tz_unlock>
 8004b98:	3404      	adds	r4, #4
 8004b9a:	2307      	movs	r3, #7
 8004b9c:	fb94 f3f3 	sdiv	r3, r4, r3
 8004ba0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004ba4:	1ae4      	subs	r4, r4, r3
 8004ba6:	bf48      	it	mi
 8004ba8:	3407      	addmi	r4, #7
 8004baa:	f8c9 6020 	str.w	r6, [r9, #32]
 8004bae:	f8c9 4018 	str.w	r4, [r9, #24]
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb8:	f240 126d 	movw	r2, #365	; 0x16d
 8004bbc:	e7aa      	b.n	8004b14 <mktime+0xb0>
 8004bbe:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8004bc2:	e7a7      	b.n	8004b14 <mktime+0xb0>
 8004bc4:	d01e      	beq.n	8004c04 <mktime+0x1a0>
 8004bc6:	2245      	movs	r2, #69	; 0x45
 8004bc8:	f240 176d 	movw	r7, #365	; 0x16d
 8004bcc:	2564      	movs	r5, #100	; 0x64
 8004bce:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	dc18      	bgt.n	8004c08 <mktime+0x1a4>
 8004bd6:	079d      	lsls	r5, r3, #30
 8004bd8:	d131      	bne.n	8004c3e <mktime+0x1da>
 8004bda:	2164      	movs	r1, #100	; 0x64
 8004bdc:	fb93 f2f1 	sdiv	r2, r3, r1
 8004be0:	fb01 3212 	mls	r2, r1, r2, r3
 8004be4:	bb72      	cbnz	r2, 8004c44 <mktime+0x1e0>
 8004be6:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8004bea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004bee:	fb95 f2f1 	sdiv	r2, r5, r1
 8004bf2:	fb01 5212 	mls	r2, r1, r2, r5
 8004bf6:	2a00      	cmp	r2, #0
 8004bf8:	f240 126d 	movw	r2, #365	; 0x16d
 8004bfc:	bf08      	it	eq
 8004bfe:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8004c02:	1aa4      	subs	r4, r4, r2
 8004c04:	461d      	mov	r5, r3
 8004c06:	e789      	b.n	8004b1c <mktime+0xb8>
 8004c08:	0791      	lsls	r1, r2, #30
 8004c0a:	d112      	bne.n	8004c32 <mktime+0x1ce>
 8004c0c:	fb92 f1f5 	sdiv	r1, r2, r5
 8004c10:	fb05 2111 	mls	r1, r5, r1, r2
 8004c14:	b981      	cbnz	r1, 8004c38 <mktime+0x1d4>
 8004c16:	f202 7e6c 	addw	lr, r2, #1900	; 0x76c
 8004c1a:	fb9e f1f6 	sdiv	r1, lr, r6
 8004c1e:	fb06 e111 	mls	r1, r6, r1, lr
 8004c22:	2900      	cmp	r1, #0
 8004c24:	bf14      	ite	ne
 8004c26:	4639      	movne	r1, r7
 8004c28:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
 8004c2c:	1a64      	subs	r4, r4, r1
 8004c2e:	3a01      	subs	r2, #1
 8004c30:	e7cf      	b.n	8004bd2 <mktime+0x16e>
 8004c32:	f240 116d 	movw	r1, #365	; 0x16d
 8004c36:	e7f9      	b.n	8004c2c <mktime+0x1c8>
 8004c38:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8004c3c:	e7f6      	b.n	8004c2c <mktime+0x1c8>
 8004c3e:	f240 126d 	movw	r2, #365	; 0x16d
 8004c42:	e7de      	b.n	8004c02 <mktime+0x19e>
 8004c44:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8004c48:	e7db      	b.n	8004c02 <mktime+0x19e>
 8004c4a:	f000 f887 	bl	8004d5c <__tzcalc_limits>
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	f47f af7e 	bne.w	8004b50 <mktime+0xec>
 8004c54:	4656      	mov	r6, sl
 8004c56:	e796      	b.n	8004b86 <mktime+0x122>
 8004c58:	1a12      	subs	r2, r2, r0
 8004c5a:	4297      	cmp	r7, r2
 8004c5c:	dbfa      	blt.n	8004c54 <mktime+0x1f0>
 8004c5e:	e784      	b.n	8004b6a <mktime+0x106>
 8004c60:	428f      	cmp	r7, r1
 8004c62:	db89      	blt.n	8004b78 <mktime+0x114>
 8004c64:	f1ba 0f00 	cmp.w	sl, #0
 8004c68:	db90      	blt.n	8004b8c <mktime+0x128>
 8004c6a:	2601      	movs	r6, #1
 8004c6c:	ea8a 0a06 	eor.w	sl, sl, r6
 8004c70:	f1ba 0f01 	cmp.w	sl, #1
 8004c74:	d187      	bne.n	8004b86 <mktime+0x122>
 8004c76:	1a1b      	subs	r3, r3, r0
 8004c78:	b906      	cbnz	r6, 8004c7c <mktime+0x218>
 8004c7a:	425b      	negs	r3, r3
 8004c7c:	f8d9 2000 	ldr.w	r2, [r9]
 8004c80:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8004c84:	441a      	add	r2, r3
 8004c86:	f8c9 2000 	str.w	r2, [r9]
 8004c8a:	4648      	mov	r0, r9
 8004c8c:	441f      	add	r7, r3
 8004c8e:	f7ff fe09 	bl	80048a4 <validate_structure>
 8004c92:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004c96:	ebb3 030a 	subs.w	r3, r3, sl
 8004c9a:	f43f af74 	beq.w	8004b86 <mktime+0x122>
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	dc21      	bgt.n	8004ce6 <mktime+0x282>
 8004ca2:	1c98      	adds	r0, r3, #2
 8004ca4:	bfd8      	it	le
 8004ca6:	2301      	movle	r3, #1
 8004ca8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8004cac:	441c      	add	r4, r3
 8004cae:	189b      	adds	r3, r3, r2
 8004cb0:	d522      	bpl.n	8004cf8 <mktime+0x294>
 8004cb2:	1e6a      	subs	r2, r5, #1
 8004cb4:	0791      	lsls	r1, r2, #30
 8004cb6:	d119      	bne.n	8004cec <mktime+0x288>
 8004cb8:	2164      	movs	r1, #100	; 0x64
 8004cba:	fb92 f3f1 	sdiv	r3, r2, r1
 8004cbe:	fb01 2313 	mls	r3, r1, r3, r2
 8004cc2:	b9b3      	cbnz	r3, 8004cf2 <mktime+0x28e>
 8004cc4:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 8004cc8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004ccc:	fb95 f3f2 	sdiv	r3, r5, r2
 8004cd0:	fb02 5513 	mls	r5, r2, r3, r5
 8004cd4:	2d00      	cmp	r5, #0
 8004cd6:	f240 136d 	movw	r3, #365	; 0x16d
 8004cda:	bf18      	it	ne
 8004cdc:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8004ce0:	f8c9 301c 	str.w	r3, [r9, #28]
 8004ce4:	e74f      	b.n	8004b86 <mktime+0x122>
 8004ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cea:	e7dd      	b.n	8004ca8 <mktime+0x244>
 8004cec:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8004cf0:	e7f6      	b.n	8004ce0 <mktime+0x27c>
 8004cf2:	f240 136d 	movw	r3, #365	; 0x16d
 8004cf6:	e7f3      	b.n	8004ce0 <mktime+0x27c>
 8004cf8:	07aa      	lsls	r2, r5, #30
 8004cfa:	d117      	bne.n	8004d2c <mktime+0x2c8>
 8004cfc:	2164      	movs	r1, #100	; 0x64
 8004cfe:	fb95 f2f1 	sdiv	r2, r5, r1
 8004d02:	fb01 5212 	mls	r2, r1, r2, r5
 8004d06:	b9a2      	cbnz	r2, 8004d32 <mktime+0x2ce>
 8004d08:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8004d0c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004d10:	fb95 f2f1 	sdiv	r2, r5, r1
 8004d14:	fb01 5512 	mls	r5, r1, r2, r5
 8004d18:	2d00      	cmp	r5, #0
 8004d1a:	f240 126d 	movw	r2, #365	; 0x16d
 8004d1e:	bf08      	it	eq
 8004d20:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8004d24:	429a      	cmp	r2, r3
 8004d26:	bfd8      	it	le
 8004d28:	1a9b      	suble	r3, r3, r2
 8004d2a:	e7d9      	b.n	8004ce0 <mktime+0x27c>
 8004d2c:	f240 126d 	movw	r2, #365	; 0x16d
 8004d30:	e7f8      	b.n	8004d24 <mktime+0x2c0>
 8004d32:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8004d36:	e7f5      	b.n	8004d24 <mktime+0x2c0>
 8004d38:	f04f 35ff 	mov.w	r5, #4294967295
 8004d3c:	e739      	b.n	8004bb2 <mktime+0x14e>
 8004d3e:	f1ba 0f00 	cmp.w	sl, #0
 8004d42:	f04f 0600 	mov.w	r6, #0
 8004d46:	da91      	bge.n	8004c6c <mktime+0x208>
 8004d48:	f8d8 5020 	ldr.w	r5, [r8, #32]
 8004d4c:	443d      	add	r5, r7
 8004d4e:	e721      	b.n	8004b94 <mktime+0x130>
 8004d50:	08005f8c 	.word	0x08005f8c
 8004d54:	00015180 	.word	0x00015180
 8004d58:	2000025c 	.word	0x2000025c

08004d5c <__tzcalc_limits>:
 8004d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d60:	4604      	mov	r4, r0
 8004d62:	f000 fa89 	bl	8005278 <__gettzinfo>
 8004d66:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8004d6a:	429c      	cmp	r4, r3
 8004d6c:	f340 8098 	ble.w	8004ea0 <__tzcalc_limits+0x144>
 8004d70:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8004d74:	18e3      	adds	r3, r4, r3
 8004d76:	109b      	asrs	r3, r3, #2
 8004d78:	f240 126d 	movw	r2, #365	; 0x16d
 8004d7c:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 8004d80:	fb02 3505 	mla	r5, r2, r5, r3
 8004d84:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8004d88:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 8004d8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d90:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8004d94:	441d      	add	r5, r3
 8004d96:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8004d9a:	18a2      	adds	r2, r4, r2
 8004d9c:	fb94 f7f3 	sdiv	r7, r4, r3
 8004da0:	fb92 f2f3 	sdiv	r2, r2, r3
 8004da4:	fb03 4717 	mls	r7, r3, r7, r4
 8004da8:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8004dac:	4415      	add	r5, r2
 8004dae:	fab7 fe87 	clz	lr, r7
 8004db2:	2264      	movs	r2, #100	; 0x64
 8004db4:	9301      	str	r3, [sp, #4]
 8004db6:	f004 0303 	and.w	r3, r4, #3
 8004dba:	fb94 f6f2 	sdiv	r6, r4, r2
 8004dbe:	6044      	str	r4, [r0, #4]
 8004dc0:	fb02 4616 	mls	r6, r2, r6, r4
 8004dc4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004dc8:	4601      	mov	r1, r0
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 8004dd0:	7a0b      	ldrb	r3, [r1, #8]
 8004dd2:	2b4a      	cmp	r3, #74	; 0x4a
 8004dd4:	d123      	bne.n	8004e1e <__tzcalc_limits+0xc2>
 8004dd6:	694c      	ldr	r4, [r1, #20]
 8004dd8:	9a00      	ldr	r2, [sp, #0]
 8004dda:	192b      	adds	r3, r5, r4
 8004ddc:	b902      	cbnz	r2, 8004de0 <__tzcalc_limits+0x84>
 8004dde:	b906      	cbnz	r6, 8004de2 <__tzcalc_limits+0x86>
 8004de0:	b9df      	cbnz	r7, 8004e1a <__tzcalc_limits+0xbe>
 8004de2:	2c3b      	cmp	r4, #59	; 0x3b
 8004de4:	bfd4      	ite	le
 8004de6:	2400      	movle	r4, #0
 8004de8:	2401      	movgt	r4, #1
 8004dea:	441c      	add	r4, r3
 8004dec:	3c01      	subs	r4, #1
 8004dee:	4b2d      	ldr	r3, [pc, #180]	; (8004ea4 <__tzcalc_limits+0x148>)
 8004df0:	698a      	ldr	r2, [r1, #24]
 8004df2:	fb03 2404 	mla	r4, r3, r4, r2
 8004df6:	6a0b      	ldr	r3, [r1, #32]
 8004df8:	441c      	add	r4, r3
 8004dfa:	f841 4f1c 	str.w	r4, [r1, #28]!
 8004dfe:	9b01      	ldr	r3, [sp, #4]
 8004e00:	428b      	cmp	r3, r1
 8004e02:	d1e5      	bne.n	8004dd0 <__tzcalc_limits+0x74>
 8004e04:	69c3      	ldr	r3, [r0, #28]
 8004e06:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	bfac      	ite	ge
 8004e0c:	2300      	movge	r3, #0
 8004e0e:	2301      	movlt	r3, #1
 8004e10:	6003      	str	r3, [r0, #0]
 8004e12:	2001      	movs	r0, #1
 8004e14:	b003      	add	sp, #12
 8004e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e1a:	2400      	movs	r4, #0
 8004e1c:	e7e5      	b.n	8004dea <__tzcalc_limits+0x8e>
 8004e1e:	2b44      	cmp	r3, #68	; 0x44
 8004e20:	d102      	bne.n	8004e28 <__tzcalc_limits+0xcc>
 8004e22:	694b      	ldr	r3, [r1, #20]
 8004e24:	18ec      	adds	r4, r5, r3
 8004e26:	e7e2      	b.n	8004dee <__tzcalc_limits+0x92>
 8004e28:	9b00      	ldr	r3, [sp, #0]
 8004e2a:	bb7b      	cbnz	r3, 8004e8c <__tzcalc_limits+0x130>
 8004e2c:	2e00      	cmp	r6, #0
 8004e2e:	bf0c      	ite	eq
 8004e30:	46f0      	moveq	r8, lr
 8004e32:	f04f 0801 	movne.w	r8, #1
 8004e36:	4b1c      	ldr	r3, [pc, #112]	; (8004ea8 <__tzcalc_limits+0x14c>)
 8004e38:	68cc      	ldr	r4, [r1, #12]
 8004e3a:	2230      	movs	r2, #48	; 0x30
 8004e3c:	fb02 3808 	mla	r8, r2, r8, r3
 8004e40:	f1a8 0a04 	sub.w	sl, r8, #4
 8004e44:	462b      	mov	r3, r5
 8004e46:	f04f 0901 	mov.w	r9, #1
 8004e4a:	45a1      	cmp	r9, r4
 8004e4c:	db20      	blt.n	8004e90 <__tzcalc_limits+0x134>
 8004e4e:	2c01      	cmp	r4, #1
 8004e50:	bfb8      	it	lt
 8004e52:	2401      	movlt	r4, #1
 8004e54:	46a1      	mov	r9, r4
 8004e56:	f103 0b04 	add.w	fp, r3, #4
 8004e5a:	2207      	movs	r2, #7
 8004e5c:	694c      	ldr	r4, [r1, #20]
 8004e5e:	fb9b faf2 	sdiv	sl, fp, r2
 8004e62:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8004e66:	ebab 0a0a 	sub.w	sl, fp, sl
 8004e6a:	ebb4 0a0a 	subs.w	sl, r4, sl
 8004e6e:	690c      	ldr	r4, [r1, #16]
 8004e70:	44e1      	add	r9, ip
 8004e72:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e76:	bf48      	it	mi
 8004e78:	4492      	addmi	sl, r2
 8004e7a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8004e7e:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 8004e82:	4454      	add	r4, sl
 8004e84:	4544      	cmp	r4, r8
 8004e86:	da09      	bge.n	8004e9c <__tzcalc_limits+0x140>
 8004e88:	441c      	add	r4, r3
 8004e8a:	e7b0      	b.n	8004dee <__tzcalc_limits+0x92>
 8004e8c:	46f0      	mov	r8, lr
 8004e8e:	e7d2      	b.n	8004e36 <__tzcalc_limits+0xda>
 8004e90:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8004e94:	f109 0901 	add.w	r9, r9, #1
 8004e98:	445b      	add	r3, fp
 8004e9a:	e7d6      	b.n	8004e4a <__tzcalc_limits+0xee>
 8004e9c:	3c07      	subs	r4, #7
 8004e9e:	e7f1      	b.n	8004e84 <__tzcalc_limits+0x128>
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	e7b7      	b.n	8004e14 <__tzcalc_limits+0xb8>
 8004ea4:	00015180 	.word	0x00015180
 8004ea8:	08005ff8 	.word	0x08005ff8

08004eac <__tz_lock>:
 8004eac:	4770      	bx	lr

08004eae <__tz_unlock>:
 8004eae:	4770      	bx	lr

08004eb0 <_tzset_unlocked>:
 8004eb0:	4b01      	ldr	r3, [pc, #4]	; (8004eb8 <_tzset_unlocked+0x8>)
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	f000 b802 	b.w	8004ebc <_tzset_unlocked_r>
 8004eb8:	20000050 	.word	0x20000050

08004ebc <_tzset_unlocked_r>:
 8004ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec0:	b08d      	sub	sp, #52	; 0x34
 8004ec2:	4607      	mov	r7, r0
 8004ec4:	f000 f9d8 	bl	8005278 <__gettzinfo>
 8004ec8:	49b1      	ldr	r1, [pc, #708]	; (8005190 <_tzset_unlocked_r+0x2d4>)
 8004eca:	4eb2      	ldr	r6, [pc, #712]	; (8005194 <_tzset_unlocked_r+0x2d8>)
 8004ecc:	4605      	mov	r5, r0
 8004ece:	4638      	mov	r0, r7
 8004ed0:	f000 f9ca 	bl	8005268 <_getenv_r>
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	b970      	cbnz	r0, 8004ef6 <_tzset_unlocked_r+0x3a>
 8004ed8:	4baf      	ldr	r3, [pc, #700]	; (8005198 <_tzset_unlocked_r+0x2dc>)
 8004eda:	4ab0      	ldr	r2, [pc, #704]	; (800519c <_tzset_unlocked_r+0x2e0>)
 8004edc:	6018      	str	r0, [r3, #0]
 8004ede:	4bb0      	ldr	r3, [pc, #704]	; (80051a0 <_tzset_unlocked_r+0x2e4>)
 8004ee0:	6018      	str	r0, [r3, #0]
 8004ee2:	4bb0      	ldr	r3, [pc, #704]	; (80051a4 <_tzset_unlocked_r+0x2e8>)
 8004ee4:	6830      	ldr	r0, [r6, #0]
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	605a      	str	r2, [r3, #4]
 8004eea:	f000 f9c9 	bl	8005280 <free>
 8004eee:	6034      	str	r4, [r6, #0]
 8004ef0:	b00d      	add	sp, #52	; 0x34
 8004ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef6:	6831      	ldr	r1, [r6, #0]
 8004ef8:	2900      	cmp	r1, #0
 8004efa:	d160      	bne.n	8004fbe <_tzset_unlocked_r+0x102>
 8004efc:	6830      	ldr	r0, [r6, #0]
 8004efe:	f000 f9bf 	bl	8005280 <free>
 8004f02:	4620      	mov	r0, r4
 8004f04:	f7fb f96e 	bl	80001e4 <strlen>
 8004f08:	1c41      	adds	r1, r0, #1
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	f000 fa0e 	bl	800532c <_malloc_r>
 8004f10:	6030      	str	r0, [r6, #0]
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d158      	bne.n	8004fc8 <_tzset_unlocked_r+0x10c>
 8004f16:	7823      	ldrb	r3, [r4, #0]
 8004f18:	4aa3      	ldr	r2, [pc, #652]	; (80051a8 <_tzset_unlocked_r+0x2ec>)
 8004f1a:	49a4      	ldr	r1, [pc, #656]	; (80051ac <_tzset_unlocked_r+0x2f0>)
 8004f1c:	2b3a      	cmp	r3, #58	; 0x3a
 8004f1e:	bf08      	it	eq
 8004f20:	3401      	addeq	r4, #1
 8004f22:	ae0a      	add	r6, sp, #40	; 0x28
 8004f24:	4633      	mov	r3, r6
 8004f26:	4620      	mov	r0, r4
 8004f28:	f000 fa6e 	bl	8005408 <siscanf>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	dddf      	ble.n	8004ef0 <_tzset_unlocked_r+0x34>
 8004f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f32:	18e7      	adds	r7, r4, r3
 8004f34:	5ce3      	ldrb	r3, [r4, r3]
 8004f36:	2b2d      	cmp	r3, #45	; 0x2d
 8004f38:	d14a      	bne.n	8004fd0 <_tzset_unlocked_r+0x114>
 8004f3a:	3701      	adds	r7, #1
 8004f3c:	f04f 34ff 	mov.w	r4, #4294967295
 8004f40:	f10d 0a20 	add.w	sl, sp, #32
 8004f44:	f10d 0b1e 	add.w	fp, sp, #30
 8004f48:	f04f 0800 	mov.w	r8, #0
 8004f4c:	9603      	str	r6, [sp, #12]
 8004f4e:	f8cd a008 	str.w	sl, [sp, #8]
 8004f52:	9601      	str	r6, [sp, #4]
 8004f54:	f8cd b000 	str.w	fp, [sp]
 8004f58:	4633      	mov	r3, r6
 8004f5a:	aa07      	add	r2, sp, #28
 8004f5c:	4994      	ldr	r1, [pc, #592]	; (80051b0 <_tzset_unlocked_r+0x2f4>)
 8004f5e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8004f62:	4638      	mov	r0, r7
 8004f64:	f8ad 8020 	strh.w	r8, [sp, #32]
 8004f68:	f000 fa4e 	bl	8005408 <siscanf>
 8004f6c:	4540      	cmp	r0, r8
 8004f6e:	ddbf      	ble.n	8004ef0 <_tzset_unlocked_r+0x34>
 8004f70:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8004f74:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8004f78:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80051bc <_tzset_unlocked_r+0x300>
 8004f7c:	213c      	movs	r1, #60	; 0x3c
 8004f7e:	fb01 2203 	mla	r2, r1, r3, r2
 8004f82:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8004f86:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004f8a:	fb01 2303 	mla	r3, r1, r3, r2
 8004f8e:	435c      	muls	r4, r3
 8004f90:	622c      	str	r4, [r5, #32]
 8004f92:	4c84      	ldr	r4, [pc, #528]	; (80051a4 <_tzset_unlocked_r+0x2e8>)
 8004f94:	4b84      	ldr	r3, [pc, #528]	; (80051a8 <_tzset_unlocked_r+0x2ec>)
 8004f96:	6023      	str	r3, [r4, #0]
 8004f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f9a:	4984      	ldr	r1, [pc, #528]	; (80051ac <_tzset_unlocked_r+0x2f0>)
 8004f9c:	441f      	add	r7, r3
 8004f9e:	464a      	mov	r2, r9
 8004fa0:	4633      	mov	r3, r6
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	f000 fa30 	bl	8005408 <siscanf>
 8004fa8:	4540      	cmp	r0, r8
 8004faa:	dc16      	bgt.n	8004fda <_tzset_unlocked_r+0x11e>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	6063      	str	r3, [r4, #4]
 8004fb0:	4b79      	ldr	r3, [pc, #484]	; (8005198 <_tzset_unlocked_r+0x2dc>)
 8004fb2:	6a2a      	ldr	r2, [r5, #32]
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	4b7a      	ldr	r3, [pc, #488]	; (80051a0 <_tzset_unlocked_r+0x2e4>)
 8004fb8:	f8c3 8000 	str.w	r8, [r3]
 8004fbc:	e798      	b.n	8004ef0 <_tzset_unlocked_r+0x34>
 8004fbe:	f7fb f907 	bl	80001d0 <strcmp>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d094      	beq.n	8004ef0 <_tzset_unlocked_r+0x34>
 8004fc6:	e799      	b.n	8004efc <_tzset_unlocked_r+0x40>
 8004fc8:	4621      	mov	r1, r4
 8004fca:	f000 fa49 	bl	8005460 <strcpy>
 8004fce:	e7a2      	b.n	8004f16 <_tzset_unlocked_r+0x5a>
 8004fd0:	2b2b      	cmp	r3, #43	; 0x2b
 8004fd2:	bf08      	it	eq
 8004fd4:	3701      	addeq	r7, #1
 8004fd6:	2401      	movs	r4, #1
 8004fd8:	e7b2      	b.n	8004f40 <_tzset_unlocked_r+0x84>
 8004fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fdc:	f8c4 9004 	str.w	r9, [r4, #4]
 8004fe0:	18fc      	adds	r4, r7, r3
 8004fe2:	5cfb      	ldrb	r3, [r7, r3]
 8004fe4:	2b2d      	cmp	r3, #45	; 0x2d
 8004fe6:	f040 8092 	bne.w	800510e <_tzset_unlocked_r+0x252>
 8004fea:	3401      	adds	r4, #1
 8004fec:	f04f 37ff 	mov.w	r7, #4294967295
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8004ff6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004ffa:	f8ad 3020 	strh.w	r3, [sp, #32]
 8004ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8005000:	9603      	str	r6, [sp, #12]
 8005002:	f8cd a008 	str.w	sl, [sp, #8]
 8005006:	9601      	str	r6, [sp, #4]
 8005008:	f8cd b000 	str.w	fp, [sp]
 800500c:	4633      	mov	r3, r6
 800500e:	aa07      	add	r2, sp, #28
 8005010:	4967      	ldr	r1, [pc, #412]	; (80051b0 <_tzset_unlocked_r+0x2f4>)
 8005012:	4620      	mov	r0, r4
 8005014:	f000 f9f8 	bl	8005408 <siscanf>
 8005018:	2800      	cmp	r0, #0
 800501a:	dc7d      	bgt.n	8005118 <_tzset_unlocked_r+0x25c>
 800501c:	6a2b      	ldr	r3, [r5, #32]
 800501e:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8005022:	63eb      	str	r3, [r5, #60]	; 0x3c
 8005024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005026:	462f      	mov	r7, r5
 8005028:	441c      	add	r4, r3
 800502a:	f04f 0900 	mov.w	r9, #0
 800502e:	7823      	ldrb	r3, [r4, #0]
 8005030:	2b2c      	cmp	r3, #44	; 0x2c
 8005032:	bf08      	it	eq
 8005034:	3401      	addeq	r4, #1
 8005036:	f894 8000 	ldrb.w	r8, [r4]
 800503a:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800503e:	d17b      	bne.n	8005138 <_tzset_unlocked_r+0x27c>
 8005040:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8005044:	9302      	str	r3, [sp, #8]
 8005046:	ab09      	add	r3, sp, #36	; 0x24
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	9603      	str	r6, [sp, #12]
 800504c:	9601      	str	r6, [sp, #4]
 800504e:	4633      	mov	r3, r6
 8005050:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8005054:	4957      	ldr	r1, [pc, #348]	; (80051b4 <_tzset_unlocked_r+0x2f8>)
 8005056:	4620      	mov	r0, r4
 8005058:	f000 f9d6 	bl	8005408 <siscanf>
 800505c:	2803      	cmp	r0, #3
 800505e:	f47f af47 	bne.w	8004ef0 <_tzset_unlocked_r+0x34>
 8005062:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8005066:	1e4b      	subs	r3, r1, #1
 8005068:	2b0b      	cmp	r3, #11
 800506a:	f63f af41 	bhi.w	8004ef0 <_tzset_unlocked_r+0x34>
 800506e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8005072:	1e53      	subs	r3, r2, #1
 8005074:	2b04      	cmp	r3, #4
 8005076:	f63f af3b 	bhi.w	8004ef0 <_tzset_unlocked_r+0x34>
 800507a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800507e:	2b06      	cmp	r3, #6
 8005080:	f63f af36 	bhi.w	8004ef0 <_tzset_unlocked_r+0x34>
 8005084:	f887 8008 	strb.w	r8, [r7, #8]
 8005088:	60f9      	str	r1, [r7, #12]
 800508a:	613a      	str	r2, [r7, #16]
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005090:	eb04 0803 	add.w	r8, r4, r3
 8005094:	2302      	movs	r3, #2
 8005096:	f8ad 301c 	strh.w	r3, [sp, #28]
 800509a:	2300      	movs	r3, #0
 800509c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80050a0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80050a4:	930a      	str	r3, [sp, #40]	; 0x28
 80050a6:	f898 3000 	ldrb.w	r3, [r8]
 80050aa:	2b2f      	cmp	r3, #47	; 0x2f
 80050ac:	d10b      	bne.n	80050c6 <_tzset_unlocked_r+0x20a>
 80050ae:	9603      	str	r6, [sp, #12]
 80050b0:	f8cd a008 	str.w	sl, [sp, #8]
 80050b4:	9601      	str	r6, [sp, #4]
 80050b6:	f8cd b000 	str.w	fp, [sp]
 80050ba:	4633      	mov	r3, r6
 80050bc:	aa07      	add	r2, sp, #28
 80050be:	493e      	ldr	r1, [pc, #248]	; (80051b8 <_tzset_unlocked_r+0x2fc>)
 80050c0:	4640      	mov	r0, r8
 80050c2:	f000 f9a1 	bl	8005408 <siscanf>
 80050c6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80050ca:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80050ce:	213c      	movs	r1, #60	; 0x3c
 80050d0:	fb01 2203 	mla	r2, r1, r3, r2
 80050d4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80050d8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80050dc:	fb01 2303 	mla	r3, r1, r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80050e4:	f109 0901 	add.w	r9, r9, #1
 80050e8:	f1b9 0f02 	cmp.w	r9, #2
 80050ec:	4444      	add	r4, r8
 80050ee:	f107 071c 	add.w	r7, r7, #28
 80050f2:	d19c      	bne.n	800502e <_tzset_unlocked_r+0x172>
 80050f4:	6868      	ldr	r0, [r5, #4]
 80050f6:	f7ff fe31 	bl	8004d5c <__tzcalc_limits>
 80050fa:	4b27      	ldr	r3, [pc, #156]	; (8005198 <_tzset_unlocked_r+0x2dc>)
 80050fc:	6a2a      	ldr	r2, [r5, #32]
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	4a26      	ldr	r2, [pc, #152]	; (80051a0 <_tzset_unlocked_r+0x2e4>)
 8005106:	bf18      	it	ne
 8005108:	2301      	movne	r3, #1
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	e6f0      	b.n	8004ef0 <_tzset_unlocked_r+0x34>
 800510e:	2b2b      	cmp	r3, #43	; 0x2b
 8005110:	bf08      	it	eq
 8005112:	3401      	addeq	r4, #1
 8005114:	2701      	movs	r7, #1
 8005116:	e76b      	b.n	8004ff0 <_tzset_unlocked_r+0x134>
 8005118:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800511c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005120:	213c      	movs	r1, #60	; 0x3c
 8005122:	fb01 2203 	mla	r2, r1, r3, r2
 8005126:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800512a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800512e:	fb01 2303 	mla	r3, r1, r3, r2
 8005132:	435f      	muls	r7, r3
 8005134:	63ef      	str	r7, [r5, #60]	; 0x3c
 8005136:	e775      	b.n	8005024 <_tzset_unlocked_r+0x168>
 8005138:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800513c:	bf06      	itte	eq
 800513e:	3401      	addeq	r4, #1
 8005140:	4643      	moveq	r3, r8
 8005142:	2344      	movne	r3, #68	; 0x44
 8005144:	220a      	movs	r2, #10
 8005146:	a90b      	add	r1, sp, #44	; 0x2c
 8005148:	4620      	mov	r0, r4
 800514a:	9305      	str	r3, [sp, #20]
 800514c:	f000 fa32 	bl	80055b4 <strtoul>
 8005150:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005154:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8005158:	4544      	cmp	r4, r8
 800515a:	9b05      	ldr	r3, [sp, #20]
 800515c:	d114      	bne.n	8005188 <_tzset_unlocked_r+0x2cc>
 800515e:	234d      	movs	r3, #77	; 0x4d
 8005160:	f1b9 0f00 	cmp.w	r9, #0
 8005164:	d107      	bne.n	8005176 <_tzset_unlocked_r+0x2ba>
 8005166:	722b      	strb	r3, [r5, #8]
 8005168:	2303      	movs	r3, #3
 800516a:	60eb      	str	r3, [r5, #12]
 800516c:	2302      	movs	r3, #2
 800516e:	612b      	str	r3, [r5, #16]
 8005170:	f8c5 9014 	str.w	r9, [r5, #20]
 8005174:	e78e      	b.n	8005094 <_tzset_unlocked_r+0x1d8>
 8005176:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 800517a:	230b      	movs	r3, #11
 800517c:	62ab      	str	r3, [r5, #40]	; 0x28
 800517e:	2301      	movs	r3, #1
 8005180:	62eb      	str	r3, [r5, #44]	; 0x2c
 8005182:	2300      	movs	r3, #0
 8005184:	632b      	str	r3, [r5, #48]	; 0x30
 8005186:	e785      	b.n	8005094 <_tzset_unlocked_r+0x1d8>
 8005188:	b280      	uxth	r0, r0
 800518a:	723b      	strb	r3, [r7, #8]
 800518c:	6178      	str	r0, [r7, #20]
 800518e:	e781      	b.n	8005094 <_tzset_unlocked_r+0x1d8>
 8005190:	08005fbc 	.word	0x08005fbc
 8005194:	20000258 	.word	0x20000258
 8005198:	20000260 	.word	0x20000260
 800519c:	08005fbf 	.word	0x08005fbf
 80051a0:	2000025c 	.word	0x2000025c
 80051a4:	20000008 	.word	0x20000008
 80051a8:	2000024c 	.word	0x2000024c
 80051ac:	08005fc3 	.word	0x08005fc3
 80051b0:	08005fe6 	.word	0x08005fe6
 80051b4:	08005fd2 	.word	0x08005fd2
 80051b8:	08005fe5 	.word	0x08005fe5
 80051bc:	20000241 	.word	0x20000241

080051c0 <div>:
 80051c0:	2900      	cmp	r1, #0
 80051c2:	b510      	push	{r4, lr}
 80051c4:	fb91 f4f2 	sdiv	r4, r1, r2
 80051c8:	fb02 1314 	mls	r3, r2, r4, r1
 80051cc:	db06      	blt.n	80051dc <div+0x1c>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	da01      	bge.n	80051d6 <div+0x16>
 80051d2:	3401      	adds	r4, #1
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	6004      	str	r4, [r0, #0]
 80051d8:	6043      	str	r3, [r0, #4]
 80051da:	bd10      	pop	{r4, pc}
 80051dc:	2b00      	cmp	r3, #0
 80051de:	bfc4      	itt	gt
 80051e0:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80051e4:	189b      	addgt	r3, r3, r2
 80051e6:	e7f6      	b.n	80051d6 <div+0x16>

080051e8 <_findenv_r>:
 80051e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ec:	4606      	mov	r6, r0
 80051ee:	468a      	mov	sl, r1
 80051f0:	4617      	mov	r7, r2
 80051f2:	f000 f9f5 	bl	80055e0 <__env_lock>
 80051f6:	4b1b      	ldr	r3, [pc, #108]	; (8005264 <_findenv_r+0x7c>)
 80051f8:	f8d3 8000 	ldr.w	r8, [r3]
 80051fc:	4699      	mov	r9, r3
 80051fe:	f1b8 0f00 	cmp.w	r8, #0
 8005202:	d007      	beq.n	8005214 <_findenv_r+0x2c>
 8005204:	4654      	mov	r4, sl
 8005206:	4623      	mov	r3, r4
 8005208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800520c:	b332      	cbz	r2, 800525c <_findenv_r+0x74>
 800520e:	2a3d      	cmp	r2, #61	; 0x3d
 8005210:	461c      	mov	r4, r3
 8005212:	d1f8      	bne.n	8005206 <_findenv_r+0x1e>
 8005214:	4630      	mov	r0, r6
 8005216:	f000 f9e4 	bl	80055e2 <__env_unlock>
 800521a:	2000      	movs	r0, #0
 800521c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005220:	f108 0804 	add.w	r8, r8, #4
 8005224:	f8d8 0000 	ldr.w	r0, [r8]
 8005228:	2800      	cmp	r0, #0
 800522a:	d0f3      	beq.n	8005214 <_findenv_r+0x2c>
 800522c:	4622      	mov	r2, r4
 800522e:	4651      	mov	r1, sl
 8005230:	f000 f91e 	bl	8005470 <strncmp>
 8005234:	2800      	cmp	r0, #0
 8005236:	d1f3      	bne.n	8005220 <_findenv_r+0x38>
 8005238:	f8d8 3000 	ldr.w	r3, [r8]
 800523c:	191d      	adds	r5, r3, r4
 800523e:	5d1b      	ldrb	r3, [r3, r4]
 8005240:	2b3d      	cmp	r3, #61	; 0x3d
 8005242:	d1ed      	bne.n	8005220 <_findenv_r+0x38>
 8005244:	f8d9 3000 	ldr.w	r3, [r9]
 8005248:	eba8 0303 	sub.w	r3, r8, r3
 800524c:	109b      	asrs	r3, r3, #2
 800524e:	4630      	mov	r0, r6
 8005250:	603b      	str	r3, [r7, #0]
 8005252:	f000 f9c6 	bl	80055e2 <__env_unlock>
 8005256:	1c68      	adds	r0, r5, #1
 8005258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525c:	eba4 040a 	sub.w	r4, r4, sl
 8005260:	e7e0      	b.n	8005224 <_findenv_r+0x3c>
 8005262:	bf00      	nop
 8005264:	200000b4 	.word	0x200000b4

08005268 <_getenv_r>:
 8005268:	b507      	push	{r0, r1, r2, lr}
 800526a:	aa01      	add	r2, sp, #4
 800526c:	f7ff ffbc 	bl	80051e8 <_findenv_r>
 8005270:	b003      	add	sp, #12
 8005272:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005278 <__gettzinfo>:
 8005278:	4800      	ldr	r0, [pc, #0]	; (800527c <__gettzinfo+0x4>)
 800527a:	4770      	bx	lr
 800527c:	20000010 	.word	0x20000010

08005280 <free>:
 8005280:	4b02      	ldr	r3, [pc, #8]	; (800528c <free+0xc>)
 8005282:	4601      	mov	r1, r0
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	f000 b803 	b.w	8005290 <_free_r>
 800528a:	bf00      	nop
 800528c:	20000050 	.word	0x20000050

08005290 <_free_r>:
 8005290:	b538      	push	{r3, r4, r5, lr}
 8005292:	4605      	mov	r5, r0
 8005294:	2900      	cmp	r1, #0
 8005296:	d045      	beq.n	8005324 <_free_r+0x94>
 8005298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800529c:	1f0c      	subs	r4, r1, #4
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bfb8      	it	lt
 80052a2:	18e4      	addlt	r4, r4, r3
 80052a4:	f000 f9c2 	bl	800562c <__malloc_lock>
 80052a8:	4a1f      	ldr	r2, [pc, #124]	; (8005328 <_free_r+0x98>)
 80052aa:	6813      	ldr	r3, [r2, #0]
 80052ac:	4610      	mov	r0, r2
 80052ae:	b933      	cbnz	r3, 80052be <_free_r+0x2e>
 80052b0:	6063      	str	r3, [r4, #4]
 80052b2:	6014      	str	r4, [r2, #0]
 80052b4:	4628      	mov	r0, r5
 80052b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052ba:	f000 b9b8 	b.w	800562e <__malloc_unlock>
 80052be:	42a3      	cmp	r3, r4
 80052c0:	d90c      	bls.n	80052dc <_free_r+0x4c>
 80052c2:	6821      	ldr	r1, [r4, #0]
 80052c4:	1862      	adds	r2, r4, r1
 80052c6:	4293      	cmp	r3, r2
 80052c8:	bf04      	itt	eq
 80052ca:	681a      	ldreq	r2, [r3, #0]
 80052cc:	685b      	ldreq	r3, [r3, #4]
 80052ce:	6063      	str	r3, [r4, #4]
 80052d0:	bf04      	itt	eq
 80052d2:	1852      	addeq	r2, r2, r1
 80052d4:	6022      	streq	r2, [r4, #0]
 80052d6:	6004      	str	r4, [r0, #0]
 80052d8:	e7ec      	b.n	80052b4 <_free_r+0x24>
 80052da:	4613      	mov	r3, r2
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	b10a      	cbz	r2, 80052e4 <_free_r+0x54>
 80052e0:	42a2      	cmp	r2, r4
 80052e2:	d9fa      	bls.n	80052da <_free_r+0x4a>
 80052e4:	6819      	ldr	r1, [r3, #0]
 80052e6:	1858      	adds	r0, r3, r1
 80052e8:	42a0      	cmp	r0, r4
 80052ea:	d10b      	bne.n	8005304 <_free_r+0x74>
 80052ec:	6820      	ldr	r0, [r4, #0]
 80052ee:	4401      	add	r1, r0
 80052f0:	1858      	adds	r0, r3, r1
 80052f2:	4282      	cmp	r2, r0
 80052f4:	6019      	str	r1, [r3, #0]
 80052f6:	d1dd      	bne.n	80052b4 <_free_r+0x24>
 80052f8:	6810      	ldr	r0, [r2, #0]
 80052fa:	6852      	ldr	r2, [r2, #4]
 80052fc:	605a      	str	r2, [r3, #4]
 80052fe:	4401      	add	r1, r0
 8005300:	6019      	str	r1, [r3, #0]
 8005302:	e7d7      	b.n	80052b4 <_free_r+0x24>
 8005304:	d902      	bls.n	800530c <_free_r+0x7c>
 8005306:	230c      	movs	r3, #12
 8005308:	602b      	str	r3, [r5, #0]
 800530a:	e7d3      	b.n	80052b4 <_free_r+0x24>
 800530c:	6820      	ldr	r0, [r4, #0]
 800530e:	1821      	adds	r1, r4, r0
 8005310:	428a      	cmp	r2, r1
 8005312:	bf04      	itt	eq
 8005314:	6811      	ldreq	r1, [r2, #0]
 8005316:	6852      	ldreq	r2, [r2, #4]
 8005318:	6062      	str	r2, [r4, #4]
 800531a:	bf04      	itt	eq
 800531c:	1809      	addeq	r1, r1, r0
 800531e:	6021      	streq	r1, [r4, #0]
 8005320:	605c      	str	r4, [r3, #4]
 8005322:	e7c7      	b.n	80052b4 <_free_r+0x24>
 8005324:	bd38      	pop	{r3, r4, r5, pc}
 8005326:	bf00      	nop
 8005328:	20000264 	.word	0x20000264

0800532c <_malloc_r>:
 800532c:	b570      	push	{r4, r5, r6, lr}
 800532e:	1ccd      	adds	r5, r1, #3
 8005330:	f025 0503 	bic.w	r5, r5, #3
 8005334:	3508      	adds	r5, #8
 8005336:	2d0c      	cmp	r5, #12
 8005338:	bf38      	it	cc
 800533a:	250c      	movcc	r5, #12
 800533c:	2d00      	cmp	r5, #0
 800533e:	4606      	mov	r6, r0
 8005340:	db01      	blt.n	8005346 <_malloc_r+0x1a>
 8005342:	42a9      	cmp	r1, r5
 8005344:	d903      	bls.n	800534e <_malloc_r+0x22>
 8005346:	230c      	movs	r3, #12
 8005348:	6033      	str	r3, [r6, #0]
 800534a:	2000      	movs	r0, #0
 800534c:	bd70      	pop	{r4, r5, r6, pc}
 800534e:	f000 f96d 	bl	800562c <__malloc_lock>
 8005352:	4a23      	ldr	r2, [pc, #140]	; (80053e0 <_malloc_r+0xb4>)
 8005354:	6814      	ldr	r4, [r2, #0]
 8005356:	4621      	mov	r1, r4
 8005358:	b991      	cbnz	r1, 8005380 <_malloc_r+0x54>
 800535a:	4c22      	ldr	r4, [pc, #136]	; (80053e4 <_malloc_r+0xb8>)
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	b91b      	cbnz	r3, 8005368 <_malloc_r+0x3c>
 8005360:	4630      	mov	r0, r6
 8005362:	f000 f841 	bl	80053e8 <_sbrk_r>
 8005366:	6020      	str	r0, [r4, #0]
 8005368:	4629      	mov	r1, r5
 800536a:	4630      	mov	r0, r6
 800536c:	f000 f83c 	bl	80053e8 <_sbrk_r>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d126      	bne.n	80053c2 <_malloc_r+0x96>
 8005374:	230c      	movs	r3, #12
 8005376:	6033      	str	r3, [r6, #0]
 8005378:	4630      	mov	r0, r6
 800537a:	f000 f958 	bl	800562e <__malloc_unlock>
 800537e:	e7e4      	b.n	800534a <_malloc_r+0x1e>
 8005380:	680b      	ldr	r3, [r1, #0]
 8005382:	1b5b      	subs	r3, r3, r5
 8005384:	d41a      	bmi.n	80053bc <_malloc_r+0x90>
 8005386:	2b0b      	cmp	r3, #11
 8005388:	d90f      	bls.n	80053aa <_malloc_r+0x7e>
 800538a:	600b      	str	r3, [r1, #0]
 800538c:	50cd      	str	r5, [r1, r3]
 800538e:	18cc      	adds	r4, r1, r3
 8005390:	4630      	mov	r0, r6
 8005392:	f000 f94c 	bl	800562e <__malloc_unlock>
 8005396:	f104 000b 	add.w	r0, r4, #11
 800539a:	1d23      	adds	r3, r4, #4
 800539c:	f020 0007 	bic.w	r0, r0, #7
 80053a0:	1ac3      	subs	r3, r0, r3
 80053a2:	d01b      	beq.n	80053dc <_malloc_r+0xb0>
 80053a4:	425a      	negs	r2, r3
 80053a6:	50e2      	str	r2, [r4, r3]
 80053a8:	bd70      	pop	{r4, r5, r6, pc}
 80053aa:	428c      	cmp	r4, r1
 80053ac:	bf0d      	iteet	eq
 80053ae:	6863      	ldreq	r3, [r4, #4]
 80053b0:	684b      	ldrne	r3, [r1, #4]
 80053b2:	6063      	strne	r3, [r4, #4]
 80053b4:	6013      	streq	r3, [r2, #0]
 80053b6:	bf18      	it	ne
 80053b8:	460c      	movne	r4, r1
 80053ba:	e7e9      	b.n	8005390 <_malloc_r+0x64>
 80053bc:	460c      	mov	r4, r1
 80053be:	6849      	ldr	r1, [r1, #4]
 80053c0:	e7ca      	b.n	8005358 <_malloc_r+0x2c>
 80053c2:	1cc4      	adds	r4, r0, #3
 80053c4:	f024 0403 	bic.w	r4, r4, #3
 80053c8:	42a0      	cmp	r0, r4
 80053ca:	d005      	beq.n	80053d8 <_malloc_r+0xac>
 80053cc:	1a21      	subs	r1, r4, r0
 80053ce:	4630      	mov	r0, r6
 80053d0:	f000 f80a 	bl	80053e8 <_sbrk_r>
 80053d4:	3001      	adds	r0, #1
 80053d6:	d0cd      	beq.n	8005374 <_malloc_r+0x48>
 80053d8:	6025      	str	r5, [r4, #0]
 80053da:	e7d9      	b.n	8005390 <_malloc_r+0x64>
 80053dc:	bd70      	pop	{r4, r5, r6, pc}
 80053de:	bf00      	nop
 80053e0:	20000264 	.word	0x20000264
 80053e4:	20000268 	.word	0x20000268

080053e8 <_sbrk_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4c06      	ldr	r4, [pc, #24]	; (8005404 <_sbrk_r+0x1c>)
 80053ec:	2300      	movs	r3, #0
 80053ee:	4605      	mov	r5, r0
 80053f0:	4608      	mov	r0, r1
 80053f2:	6023      	str	r3, [r4, #0]
 80053f4:	f000 fd66 	bl	8005ec4 <_sbrk>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d102      	bne.n	8005402 <_sbrk_r+0x1a>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	b103      	cbz	r3, 8005402 <_sbrk_r+0x1a>
 8005400:	602b      	str	r3, [r5, #0]
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	2000068c 	.word	0x2000068c

08005408 <siscanf>:
 8005408:	b40e      	push	{r1, r2, r3}
 800540a:	b530      	push	{r4, r5, lr}
 800540c:	b09c      	sub	sp, #112	; 0x70
 800540e:	ac1f      	add	r4, sp, #124	; 0x7c
 8005410:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005414:	f854 5b04 	ldr.w	r5, [r4], #4
 8005418:	f8ad 2014 	strh.w	r2, [sp, #20]
 800541c:	9002      	str	r0, [sp, #8]
 800541e:	9006      	str	r0, [sp, #24]
 8005420:	f7fa fee0 	bl	80001e4 <strlen>
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <siscanf+0x4c>)
 8005426:	9003      	str	r0, [sp, #12]
 8005428:	9007      	str	r0, [sp, #28]
 800542a:	930b      	str	r3, [sp, #44]	; 0x2c
 800542c:	480a      	ldr	r0, [pc, #40]	; (8005458 <siscanf+0x50>)
 800542e:	9401      	str	r4, [sp, #4]
 8005430:	2300      	movs	r3, #0
 8005432:	930f      	str	r3, [sp, #60]	; 0x3c
 8005434:	9314      	str	r3, [sp, #80]	; 0x50
 8005436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800543a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800543e:	462a      	mov	r2, r5
 8005440:	4623      	mov	r3, r4
 8005442:	a902      	add	r1, sp, #8
 8005444:	6800      	ldr	r0, [r0, #0]
 8005446:	f000 f94d 	bl	80056e4 <__ssvfiscanf_r>
 800544a:	b01c      	add	sp, #112	; 0x70
 800544c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005450:	b003      	add	sp, #12
 8005452:	4770      	bx	lr
 8005454:	0800545d 	.word	0x0800545d
 8005458:	20000050 	.word	0x20000050

0800545c <__seofread>:
 800545c:	2000      	movs	r0, #0
 800545e:	4770      	bx	lr

08005460 <strcpy>:
 8005460:	4603      	mov	r3, r0
 8005462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005466:	f803 2b01 	strb.w	r2, [r3], #1
 800546a:	2a00      	cmp	r2, #0
 800546c:	d1f9      	bne.n	8005462 <strcpy+0x2>
 800546e:	4770      	bx	lr

08005470 <strncmp>:
 8005470:	b510      	push	{r4, lr}
 8005472:	b16a      	cbz	r2, 8005490 <strncmp+0x20>
 8005474:	3901      	subs	r1, #1
 8005476:	1884      	adds	r4, r0, r2
 8005478:	f810 3b01 	ldrb.w	r3, [r0], #1
 800547c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005480:	4293      	cmp	r3, r2
 8005482:	d103      	bne.n	800548c <strncmp+0x1c>
 8005484:	42a0      	cmp	r0, r4
 8005486:	d001      	beq.n	800548c <strncmp+0x1c>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f5      	bne.n	8005478 <strncmp+0x8>
 800548c:	1a98      	subs	r0, r3, r2
 800548e:	bd10      	pop	{r4, pc}
 8005490:	4610      	mov	r0, r2
 8005492:	bd10      	pop	{r4, pc}

08005494 <_strtoul_l.isra.0>:
 8005494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005498:	4680      	mov	r8, r0
 800549a:	4689      	mov	r9, r1
 800549c:	4692      	mov	sl, r2
 800549e:	461e      	mov	r6, r3
 80054a0:	460f      	mov	r7, r1
 80054a2:	463d      	mov	r5, r7
 80054a4:	9808      	ldr	r0, [sp, #32]
 80054a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054aa:	f000 f89b 	bl	80055e4 <__locale_ctype_ptr_l>
 80054ae:	4420      	add	r0, r4
 80054b0:	7843      	ldrb	r3, [r0, #1]
 80054b2:	f013 0308 	ands.w	r3, r3, #8
 80054b6:	d10a      	bne.n	80054ce <_strtoul_l.isra.0+0x3a>
 80054b8:	2c2d      	cmp	r4, #45	; 0x2d
 80054ba:	d10a      	bne.n	80054d2 <_strtoul_l.isra.0+0x3e>
 80054bc:	782c      	ldrb	r4, [r5, #0]
 80054be:	2301      	movs	r3, #1
 80054c0:	1cbd      	adds	r5, r7, #2
 80054c2:	b15e      	cbz	r6, 80054dc <_strtoul_l.isra.0+0x48>
 80054c4:	2e10      	cmp	r6, #16
 80054c6:	d113      	bne.n	80054f0 <_strtoul_l.isra.0+0x5c>
 80054c8:	2c30      	cmp	r4, #48	; 0x30
 80054ca:	d009      	beq.n	80054e0 <_strtoul_l.isra.0+0x4c>
 80054cc:	e010      	b.n	80054f0 <_strtoul_l.isra.0+0x5c>
 80054ce:	462f      	mov	r7, r5
 80054d0:	e7e7      	b.n	80054a2 <_strtoul_l.isra.0+0xe>
 80054d2:	2c2b      	cmp	r4, #43	; 0x2b
 80054d4:	bf04      	itt	eq
 80054d6:	782c      	ldrbeq	r4, [r5, #0]
 80054d8:	1cbd      	addeq	r5, r7, #2
 80054da:	e7f2      	b.n	80054c2 <_strtoul_l.isra.0+0x2e>
 80054dc:	2c30      	cmp	r4, #48	; 0x30
 80054de:	d125      	bne.n	800552c <_strtoul_l.isra.0+0x98>
 80054e0:	782a      	ldrb	r2, [r5, #0]
 80054e2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80054e6:	2a58      	cmp	r2, #88	; 0x58
 80054e8:	d14a      	bne.n	8005580 <_strtoul_l.isra.0+0xec>
 80054ea:	786c      	ldrb	r4, [r5, #1]
 80054ec:	2610      	movs	r6, #16
 80054ee:	3502      	adds	r5, #2
 80054f0:	f04f 31ff 	mov.w	r1, #4294967295
 80054f4:	2700      	movs	r7, #0
 80054f6:	fbb1 f1f6 	udiv	r1, r1, r6
 80054fa:	fb06 fe01 	mul.w	lr, r6, r1
 80054fe:	ea6f 0e0e 	mvn.w	lr, lr
 8005502:	4638      	mov	r0, r7
 8005504:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8005508:	2a09      	cmp	r2, #9
 800550a:	d811      	bhi.n	8005530 <_strtoul_l.isra.0+0x9c>
 800550c:	4614      	mov	r4, r2
 800550e:	42a6      	cmp	r6, r4
 8005510:	dd1d      	ble.n	800554e <_strtoul_l.isra.0+0xba>
 8005512:	2f00      	cmp	r7, #0
 8005514:	db18      	blt.n	8005548 <_strtoul_l.isra.0+0xb4>
 8005516:	4281      	cmp	r1, r0
 8005518:	d316      	bcc.n	8005548 <_strtoul_l.isra.0+0xb4>
 800551a:	d101      	bne.n	8005520 <_strtoul_l.isra.0+0x8c>
 800551c:	45a6      	cmp	lr, r4
 800551e:	db13      	blt.n	8005548 <_strtoul_l.isra.0+0xb4>
 8005520:	fb00 4006 	mla	r0, r0, r6, r4
 8005524:	2701      	movs	r7, #1
 8005526:	f815 4b01 	ldrb.w	r4, [r5], #1
 800552a:	e7eb      	b.n	8005504 <_strtoul_l.isra.0+0x70>
 800552c:	260a      	movs	r6, #10
 800552e:	e7df      	b.n	80054f0 <_strtoul_l.isra.0+0x5c>
 8005530:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8005534:	2a19      	cmp	r2, #25
 8005536:	d801      	bhi.n	800553c <_strtoul_l.isra.0+0xa8>
 8005538:	3c37      	subs	r4, #55	; 0x37
 800553a:	e7e8      	b.n	800550e <_strtoul_l.isra.0+0x7a>
 800553c:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8005540:	2a19      	cmp	r2, #25
 8005542:	d804      	bhi.n	800554e <_strtoul_l.isra.0+0xba>
 8005544:	3c57      	subs	r4, #87	; 0x57
 8005546:	e7e2      	b.n	800550e <_strtoul_l.isra.0+0x7a>
 8005548:	f04f 37ff 	mov.w	r7, #4294967295
 800554c:	e7eb      	b.n	8005526 <_strtoul_l.isra.0+0x92>
 800554e:	2f00      	cmp	r7, #0
 8005550:	da09      	bge.n	8005566 <_strtoul_l.isra.0+0xd2>
 8005552:	2322      	movs	r3, #34	; 0x22
 8005554:	f8c8 3000 	str.w	r3, [r8]
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	f1ba 0f00 	cmp.w	sl, #0
 8005560:	d107      	bne.n	8005572 <_strtoul_l.isra.0+0xde>
 8005562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005566:	b103      	cbz	r3, 800556a <_strtoul_l.isra.0+0xd6>
 8005568:	4240      	negs	r0, r0
 800556a:	f1ba 0f00 	cmp.w	sl, #0
 800556e:	d00c      	beq.n	800558a <_strtoul_l.isra.0+0xf6>
 8005570:	b127      	cbz	r7, 800557c <_strtoul_l.isra.0+0xe8>
 8005572:	3d01      	subs	r5, #1
 8005574:	f8ca 5000 	str.w	r5, [sl]
 8005578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557c:	464d      	mov	r5, r9
 800557e:	e7f9      	b.n	8005574 <_strtoul_l.isra.0+0xe0>
 8005580:	2430      	movs	r4, #48	; 0x30
 8005582:	2e00      	cmp	r6, #0
 8005584:	d1b4      	bne.n	80054f0 <_strtoul_l.isra.0+0x5c>
 8005586:	2608      	movs	r6, #8
 8005588:	e7b2      	b.n	80054f0 <_strtoul_l.isra.0+0x5c>
 800558a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08005590 <_strtoul_r>:
 8005590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005592:	4c06      	ldr	r4, [pc, #24]	; (80055ac <_strtoul_r+0x1c>)
 8005594:	4d06      	ldr	r5, [pc, #24]	; (80055b0 <_strtoul_r+0x20>)
 8005596:	6824      	ldr	r4, [r4, #0]
 8005598:	6a24      	ldr	r4, [r4, #32]
 800559a:	2c00      	cmp	r4, #0
 800559c:	bf08      	it	eq
 800559e:	462c      	moveq	r4, r5
 80055a0:	9400      	str	r4, [sp, #0]
 80055a2:	f7ff ff77 	bl	8005494 <_strtoul_l.isra.0>
 80055a6:	b003      	add	sp, #12
 80055a8:	bd30      	pop	{r4, r5, pc}
 80055aa:	bf00      	nop
 80055ac:	20000050 	.word	0x20000050
 80055b0:	200000b8 	.word	0x200000b8

080055b4 <strtoul>:
 80055b4:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <strtoul+0x24>)
 80055b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055b8:	681c      	ldr	r4, [r3, #0]
 80055ba:	4d08      	ldr	r5, [pc, #32]	; (80055dc <strtoul+0x28>)
 80055bc:	6a23      	ldr	r3, [r4, #32]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	bf08      	it	eq
 80055c2:	462b      	moveq	r3, r5
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	4613      	mov	r3, r2
 80055c8:	460a      	mov	r2, r1
 80055ca:	4601      	mov	r1, r0
 80055cc:	4620      	mov	r0, r4
 80055ce:	f7ff ff61 	bl	8005494 <_strtoul_l.isra.0>
 80055d2:	b003      	add	sp, #12
 80055d4:	bd30      	pop	{r4, r5, pc}
 80055d6:	bf00      	nop
 80055d8:	20000050 	.word	0x20000050
 80055dc:	200000b8 	.word	0x200000b8

080055e0 <__env_lock>:
 80055e0:	4770      	bx	lr

080055e2 <__env_unlock>:
 80055e2:	4770      	bx	lr

080055e4 <__locale_ctype_ptr_l>:
 80055e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80055e8:	4770      	bx	lr
	...

080055ec <__locale_ctype_ptr>:
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <__locale_ctype_ptr+0x14>)
 80055ee:	4a05      	ldr	r2, [pc, #20]	; (8005604 <__locale_ctype_ptr+0x18>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bf08      	it	eq
 80055f8:	4613      	moveq	r3, r2
 80055fa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80055fe:	4770      	bx	lr
 8005600:	20000050 	.word	0x20000050
 8005604:	200000b8 	.word	0x200000b8

08005608 <__ascii_mbtowc>:
 8005608:	b082      	sub	sp, #8
 800560a:	b901      	cbnz	r1, 800560e <__ascii_mbtowc+0x6>
 800560c:	a901      	add	r1, sp, #4
 800560e:	b142      	cbz	r2, 8005622 <__ascii_mbtowc+0x1a>
 8005610:	b14b      	cbz	r3, 8005626 <__ascii_mbtowc+0x1e>
 8005612:	7813      	ldrb	r3, [r2, #0]
 8005614:	600b      	str	r3, [r1, #0]
 8005616:	7812      	ldrb	r2, [r2, #0]
 8005618:	1c10      	adds	r0, r2, #0
 800561a:	bf18      	it	ne
 800561c:	2001      	movne	r0, #1
 800561e:	b002      	add	sp, #8
 8005620:	4770      	bx	lr
 8005622:	4610      	mov	r0, r2
 8005624:	e7fb      	b.n	800561e <__ascii_mbtowc+0x16>
 8005626:	f06f 0001 	mvn.w	r0, #1
 800562a:	e7f8      	b.n	800561e <__ascii_mbtowc+0x16>

0800562c <__malloc_lock>:
 800562c:	4770      	bx	lr

0800562e <__malloc_unlock>:
 800562e:	4770      	bx	lr

08005630 <_sungetc_r>:
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	1c4b      	adds	r3, r1, #1
 8005634:	4614      	mov	r4, r2
 8005636:	d103      	bne.n	8005640 <_sungetc_r+0x10>
 8005638:	f04f 35ff 	mov.w	r5, #4294967295
 800563c:	4628      	mov	r0, r5
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	8993      	ldrh	r3, [r2, #12]
 8005642:	f023 0320 	bic.w	r3, r3, #32
 8005646:	8193      	strh	r3, [r2, #12]
 8005648:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800564a:	6852      	ldr	r2, [r2, #4]
 800564c:	b2cd      	uxtb	r5, r1
 800564e:	b18b      	cbz	r3, 8005674 <_sungetc_r+0x44>
 8005650:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005652:	429a      	cmp	r2, r3
 8005654:	da08      	bge.n	8005668 <_sungetc_r+0x38>
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	1e5a      	subs	r2, r3, #1
 800565a:	6022      	str	r2, [r4, #0]
 800565c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005660:	6863      	ldr	r3, [r4, #4]
 8005662:	3301      	adds	r3, #1
 8005664:	6063      	str	r3, [r4, #4]
 8005666:	e7e9      	b.n	800563c <_sungetc_r+0xc>
 8005668:	4621      	mov	r1, r4
 800566a:	f000 fba9 	bl	8005dc0 <__submore>
 800566e:	2800      	cmp	r0, #0
 8005670:	d0f1      	beq.n	8005656 <_sungetc_r+0x26>
 8005672:	e7e1      	b.n	8005638 <_sungetc_r+0x8>
 8005674:	6921      	ldr	r1, [r4, #16]
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	b151      	cbz	r1, 8005690 <_sungetc_r+0x60>
 800567a:	4299      	cmp	r1, r3
 800567c:	d208      	bcs.n	8005690 <_sungetc_r+0x60>
 800567e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005682:	428d      	cmp	r5, r1
 8005684:	d104      	bne.n	8005690 <_sungetc_r+0x60>
 8005686:	3b01      	subs	r3, #1
 8005688:	3201      	adds	r2, #1
 800568a:	6023      	str	r3, [r4, #0]
 800568c:	6062      	str	r2, [r4, #4]
 800568e:	e7d5      	b.n	800563c <_sungetc_r+0xc>
 8005690:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005692:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005696:	6363      	str	r3, [r4, #52]	; 0x34
 8005698:	2303      	movs	r3, #3
 800569a:	63a3      	str	r3, [r4, #56]	; 0x38
 800569c:	4623      	mov	r3, r4
 800569e:	6422      	str	r2, [r4, #64]	; 0x40
 80056a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	2301      	movs	r3, #1
 80056a8:	e7dc      	b.n	8005664 <_sungetc_r+0x34>

080056aa <__ssrefill_r>:
 80056aa:	b510      	push	{r4, lr}
 80056ac:	460c      	mov	r4, r1
 80056ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80056b0:	b169      	cbz	r1, 80056ce <__ssrefill_r+0x24>
 80056b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056b6:	4299      	cmp	r1, r3
 80056b8:	d001      	beq.n	80056be <__ssrefill_r+0x14>
 80056ba:	f7ff fde9 	bl	8005290 <_free_r>
 80056be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056c0:	6063      	str	r3, [r4, #4]
 80056c2:	2000      	movs	r0, #0
 80056c4:	6360      	str	r0, [r4, #52]	; 0x34
 80056c6:	b113      	cbz	r3, 80056ce <__ssrefill_r+0x24>
 80056c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80056ca:	6023      	str	r3, [r4, #0]
 80056cc:	bd10      	pop	{r4, pc}
 80056ce:	6923      	ldr	r3, [r4, #16]
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	2300      	movs	r3, #0
 80056d4:	6063      	str	r3, [r4, #4]
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	f043 0320 	orr.w	r3, r3, #32
 80056dc:	81a3      	strh	r3, [r4, #12]
 80056de:	f04f 30ff 	mov.w	r0, #4294967295
 80056e2:	bd10      	pop	{r4, pc}

080056e4 <__ssvfiscanf_r>:
 80056e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e8:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 80056ec:	f10d 080c 	add.w	r8, sp, #12
 80056f0:	9301      	str	r3, [sp, #4]
 80056f2:	2300      	movs	r3, #0
 80056f4:	9346      	str	r3, [sp, #280]	; 0x118
 80056f6:	9347      	str	r3, [sp, #284]	; 0x11c
 80056f8:	4ba0      	ldr	r3, [pc, #640]	; (800597c <__ssvfiscanf_r+0x298>)
 80056fa:	93a2      	str	r3, [sp, #648]	; 0x288
 80056fc:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8005984 <__ssvfiscanf_r+0x2a0>
 8005700:	4b9f      	ldr	r3, [pc, #636]	; (8005980 <__ssvfiscanf_r+0x29c>)
 8005702:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8005706:	4606      	mov	r6, r0
 8005708:	460c      	mov	r4, r1
 800570a:	93a3      	str	r3, [sp, #652]	; 0x28c
 800570c:	4692      	mov	sl, r2
 800570e:	270a      	movs	r7, #10
 8005710:	f89a 3000 	ldrb.w	r3, [sl]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 812f 	beq.w	8005978 <__ssvfiscanf_r+0x294>
 800571a:	f7ff ff67 	bl	80055ec <__locale_ctype_ptr>
 800571e:	f89a b000 	ldrb.w	fp, [sl]
 8005722:	4458      	add	r0, fp
 8005724:	7843      	ldrb	r3, [r0, #1]
 8005726:	f013 0308 	ands.w	r3, r3, #8
 800572a:	d143      	bne.n	80057b4 <__ssvfiscanf_r+0xd0>
 800572c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8005730:	f10a 0501 	add.w	r5, sl, #1
 8005734:	f040 8099 	bne.w	800586a <__ssvfiscanf_r+0x186>
 8005738:	9345      	str	r3, [sp, #276]	; 0x114
 800573a:	9343      	str	r3, [sp, #268]	; 0x10c
 800573c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8005740:	2b2a      	cmp	r3, #42	; 0x2a
 8005742:	d103      	bne.n	800574c <__ssvfiscanf_r+0x68>
 8005744:	2310      	movs	r3, #16
 8005746:	9343      	str	r3, [sp, #268]	; 0x10c
 8005748:	f10a 0502 	add.w	r5, sl, #2
 800574c:	7829      	ldrb	r1, [r5, #0]
 800574e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8005752:	2a09      	cmp	r2, #9
 8005754:	46aa      	mov	sl, r5
 8005756:	f105 0501 	add.w	r5, r5, #1
 800575a:	d941      	bls.n	80057e0 <__ssvfiscanf_r+0xfc>
 800575c:	2203      	movs	r2, #3
 800575e:	4889      	ldr	r0, [pc, #548]	; (8005984 <__ssvfiscanf_r+0x2a0>)
 8005760:	f7fa fd4e 	bl	8000200 <memchr>
 8005764:	b138      	cbz	r0, 8005776 <__ssvfiscanf_r+0x92>
 8005766:	eba0 0309 	sub.w	r3, r0, r9
 800576a:	2001      	movs	r0, #1
 800576c:	4098      	lsls	r0, r3
 800576e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005770:	4318      	orrs	r0, r3
 8005772:	9043      	str	r0, [sp, #268]	; 0x10c
 8005774:	46aa      	mov	sl, r5
 8005776:	f89a 3000 	ldrb.w	r3, [sl]
 800577a:	2b67      	cmp	r3, #103	; 0x67
 800577c:	f10a 0501 	add.w	r5, sl, #1
 8005780:	d84a      	bhi.n	8005818 <__ssvfiscanf_r+0x134>
 8005782:	2b65      	cmp	r3, #101	; 0x65
 8005784:	f080 80b7 	bcs.w	80058f6 <__ssvfiscanf_r+0x212>
 8005788:	2b47      	cmp	r3, #71	; 0x47
 800578a:	d82f      	bhi.n	80057ec <__ssvfiscanf_r+0x108>
 800578c:	2b45      	cmp	r3, #69	; 0x45
 800578e:	f080 80b2 	bcs.w	80058f6 <__ssvfiscanf_r+0x212>
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8082 	beq.w	800589c <__ssvfiscanf_r+0x1b8>
 8005798:	2b25      	cmp	r3, #37	; 0x25
 800579a:	d066      	beq.n	800586a <__ssvfiscanf_r+0x186>
 800579c:	2303      	movs	r3, #3
 800579e:	9349      	str	r3, [sp, #292]	; 0x124
 80057a0:	9744      	str	r7, [sp, #272]	; 0x110
 80057a2:	e045      	b.n	8005830 <__ssvfiscanf_r+0x14c>
 80057a4:	9947      	ldr	r1, [sp, #284]	; 0x11c
 80057a6:	3101      	adds	r1, #1
 80057a8:	9147      	str	r1, [sp, #284]	; 0x11c
 80057aa:	6861      	ldr	r1, [r4, #4]
 80057ac:	3301      	adds	r3, #1
 80057ae:	3901      	subs	r1, #1
 80057b0:	6061      	str	r1, [r4, #4]
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	6863      	ldr	r3, [r4, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	dd0b      	ble.n	80057d2 <__ssvfiscanf_r+0xee>
 80057ba:	f7ff ff17 	bl	80055ec <__locale_ctype_ptr>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	7819      	ldrb	r1, [r3, #0]
 80057c2:	4408      	add	r0, r1
 80057c4:	7841      	ldrb	r1, [r0, #1]
 80057c6:	070d      	lsls	r5, r1, #28
 80057c8:	d4ec      	bmi.n	80057a4 <__ssvfiscanf_r+0xc0>
 80057ca:	f10a 0501 	add.w	r5, sl, #1
 80057ce:	46aa      	mov	sl, r5
 80057d0:	e79e      	b.n	8005710 <__ssvfiscanf_r+0x2c>
 80057d2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80057d4:	4621      	mov	r1, r4
 80057d6:	4630      	mov	r0, r6
 80057d8:	4798      	blx	r3
 80057da:	2800      	cmp	r0, #0
 80057dc:	d0ed      	beq.n	80057ba <__ssvfiscanf_r+0xd6>
 80057de:	e7f4      	b.n	80057ca <__ssvfiscanf_r+0xe6>
 80057e0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80057e2:	fb07 1303 	mla	r3, r7, r3, r1
 80057e6:	3b30      	subs	r3, #48	; 0x30
 80057e8:	9345      	str	r3, [sp, #276]	; 0x114
 80057ea:	e7af      	b.n	800574c <__ssvfiscanf_r+0x68>
 80057ec:	2b5b      	cmp	r3, #91	; 0x5b
 80057ee:	d061      	beq.n	80058b4 <__ssvfiscanf_r+0x1d0>
 80057f0:	d80c      	bhi.n	800580c <__ssvfiscanf_r+0x128>
 80057f2:	2b58      	cmp	r3, #88	; 0x58
 80057f4:	d1d2      	bne.n	800579c <__ssvfiscanf_r+0xb8>
 80057f6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80057f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057fc:	9243      	str	r2, [sp, #268]	; 0x10c
 80057fe:	2210      	movs	r2, #16
 8005800:	9244      	str	r2, [sp, #272]	; 0x110
 8005802:	2b6f      	cmp	r3, #111	; 0x6f
 8005804:	bfb4      	ite	lt
 8005806:	2303      	movlt	r3, #3
 8005808:	2304      	movge	r3, #4
 800580a:	e010      	b.n	800582e <__ssvfiscanf_r+0x14a>
 800580c:	2b63      	cmp	r3, #99	; 0x63
 800580e:	d05c      	beq.n	80058ca <__ssvfiscanf_r+0x1e6>
 8005810:	2b64      	cmp	r3, #100	; 0x64
 8005812:	d1c3      	bne.n	800579c <__ssvfiscanf_r+0xb8>
 8005814:	9744      	str	r7, [sp, #272]	; 0x110
 8005816:	e7f4      	b.n	8005802 <__ssvfiscanf_r+0x11e>
 8005818:	2b70      	cmp	r3, #112	; 0x70
 800581a:	d042      	beq.n	80058a2 <__ssvfiscanf_r+0x1be>
 800581c:	d81d      	bhi.n	800585a <__ssvfiscanf_r+0x176>
 800581e:	2b6e      	cmp	r3, #110	; 0x6e
 8005820:	d059      	beq.n	80058d6 <__ssvfiscanf_r+0x1f2>
 8005822:	d843      	bhi.n	80058ac <__ssvfiscanf_r+0x1c8>
 8005824:	2b69      	cmp	r3, #105	; 0x69
 8005826:	d1b9      	bne.n	800579c <__ssvfiscanf_r+0xb8>
 8005828:	2300      	movs	r3, #0
 800582a:	9344      	str	r3, [sp, #272]	; 0x110
 800582c:	2303      	movs	r3, #3
 800582e:	9349      	str	r3, [sp, #292]	; 0x124
 8005830:	6863      	ldr	r3, [r4, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	dd61      	ble.n	80058fa <__ssvfiscanf_r+0x216>
 8005836:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005838:	0659      	lsls	r1, r3, #25
 800583a:	d56f      	bpl.n	800591c <__ssvfiscanf_r+0x238>
 800583c:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800583e:	2b02      	cmp	r3, #2
 8005840:	dc7c      	bgt.n	800593c <__ssvfiscanf_r+0x258>
 8005842:	ab01      	add	r3, sp, #4
 8005844:	4622      	mov	r2, r4
 8005846:	a943      	add	r1, sp, #268	; 0x10c
 8005848:	4630      	mov	r0, r6
 800584a:	f000 f89f 	bl	800598c <_scanf_chars>
 800584e:	2801      	cmp	r0, #1
 8005850:	f000 8092 	beq.w	8005978 <__ssvfiscanf_r+0x294>
 8005854:	2802      	cmp	r0, #2
 8005856:	d1ba      	bne.n	80057ce <__ssvfiscanf_r+0xea>
 8005858:	e01d      	b.n	8005896 <__ssvfiscanf_r+0x1b2>
 800585a:	2b75      	cmp	r3, #117	; 0x75
 800585c:	d0da      	beq.n	8005814 <__ssvfiscanf_r+0x130>
 800585e:	2b78      	cmp	r3, #120	; 0x78
 8005860:	d0c9      	beq.n	80057f6 <__ssvfiscanf_r+0x112>
 8005862:	2b73      	cmp	r3, #115	; 0x73
 8005864:	d19a      	bne.n	800579c <__ssvfiscanf_r+0xb8>
 8005866:	2302      	movs	r3, #2
 8005868:	e7e1      	b.n	800582e <__ssvfiscanf_r+0x14a>
 800586a:	6863      	ldr	r3, [r4, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	dd0c      	ble.n	800588a <__ssvfiscanf_r+0x1a6>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	781a      	ldrb	r2, [r3, #0]
 8005874:	4593      	cmp	fp, r2
 8005876:	d17f      	bne.n	8005978 <__ssvfiscanf_r+0x294>
 8005878:	3301      	adds	r3, #1
 800587a:	6862      	ldr	r2, [r4, #4]
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005880:	3a01      	subs	r2, #1
 8005882:	3301      	adds	r3, #1
 8005884:	6062      	str	r2, [r4, #4]
 8005886:	9347      	str	r3, [sp, #284]	; 0x11c
 8005888:	e7a1      	b.n	80057ce <__ssvfiscanf_r+0xea>
 800588a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800588c:	4621      	mov	r1, r4
 800588e:	4630      	mov	r0, r6
 8005890:	4798      	blx	r3
 8005892:	2800      	cmp	r0, #0
 8005894:	d0ec      	beq.n	8005870 <__ssvfiscanf_r+0x18c>
 8005896:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005898:	2800      	cmp	r0, #0
 800589a:	d163      	bne.n	8005964 <__ssvfiscanf_r+0x280>
 800589c:	f04f 30ff 	mov.w	r0, #4294967295
 80058a0:	e066      	b.n	8005970 <__ssvfiscanf_r+0x28c>
 80058a2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80058a4:	f042 0220 	orr.w	r2, r2, #32
 80058a8:	9243      	str	r2, [sp, #268]	; 0x10c
 80058aa:	e7a4      	b.n	80057f6 <__ssvfiscanf_r+0x112>
 80058ac:	2308      	movs	r3, #8
 80058ae:	9344      	str	r3, [sp, #272]	; 0x110
 80058b0:	2304      	movs	r3, #4
 80058b2:	e7bc      	b.n	800582e <__ssvfiscanf_r+0x14a>
 80058b4:	4629      	mov	r1, r5
 80058b6:	4640      	mov	r0, r8
 80058b8:	f000 f9c0 	bl	8005c3c <__sccl>
 80058bc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80058be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c2:	9343      	str	r3, [sp, #268]	; 0x10c
 80058c4:	4605      	mov	r5, r0
 80058c6:	2301      	movs	r3, #1
 80058c8:	e7b1      	b.n	800582e <__ssvfiscanf_r+0x14a>
 80058ca:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80058cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d0:	9343      	str	r3, [sp, #268]	; 0x10c
 80058d2:	2300      	movs	r3, #0
 80058d4:	e7ab      	b.n	800582e <__ssvfiscanf_r+0x14a>
 80058d6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80058d8:	06d0      	lsls	r0, r2, #27
 80058da:	f53f af78 	bmi.w	80057ce <__ssvfiscanf_r+0xea>
 80058de:	f012 0f01 	tst.w	r2, #1
 80058e2:	9a01      	ldr	r2, [sp, #4]
 80058e4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80058e6:	f102 0104 	add.w	r1, r2, #4
 80058ea:	9101      	str	r1, [sp, #4]
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	bf14      	ite	ne
 80058f0:	8013      	strhne	r3, [r2, #0]
 80058f2:	6013      	streq	r3, [r2, #0]
 80058f4:	e76b      	b.n	80057ce <__ssvfiscanf_r+0xea>
 80058f6:	2305      	movs	r3, #5
 80058f8:	e799      	b.n	800582e <__ssvfiscanf_r+0x14a>
 80058fa:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80058fc:	4621      	mov	r1, r4
 80058fe:	4630      	mov	r0, r6
 8005900:	4798      	blx	r3
 8005902:	2800      	cmp	r0, #0
 8005904:	d097      	beq.n	8005836 <__ssvfiscanf_r+0x152>
 8005906:	e7c6      	b.n	8005896 <__ssvfiscanf_r+0x1b2>
 8005908:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800590a:	3201      	adds	r2, #1
 800590c:	9247      	str	r2, [sp, #284]	; 0x11c
 800590e:	6862      	ldr	r2, [r4, #4]
 8005910:	3a01      	subs	r2, #1
 8005912:	2a00      	cmp	r2, #0
 8005914:	6062      	str	r2, [r4, #4]
 8005916:	dd0a      	ble.n	800592e <__ssvfiscanf_r+0x24a>
 8005918:	3301      	adds	r3, #1
 800591a:	6023      	str	r3, [r4, #0]
 800591c:	f7ff fe66 	bl	80055ec <__locale_ctype_ptr>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	781a      	ldrb	r2, [r3, #0]
 8005924:	4410      	add	r0, r2
 8005926:	7842      	ldrb	r2, [r0, #1]
 8005928:	0712      	lsls	r2, r2, #28
 800592a:	d4ed      	bmi.n	8005908 <__ssvfiscanf_r+0x224>
 800592c:	e786      	b.n	800583c <__ssvfiscanf_r+0x158>
 800592e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005930:	4621      	mov	r1, r4
 8005932:	4630      	mov	r0, r6
 8005934:	4798      	blx	r3
 8005936:	2800      	cmp	r0, #0
 8005938:	d0f0      	beq.n	800591c <__ssvfiscanf_r+0x238>
 800593a:	e7ac      	b.n	8005896 <__ssvfiscanf_r+0x1b2>
 800593c:	2b04      	cmp	r3, #4
 800593e:	dc06      	bgt.n	800594e <__ssvfiscanf_r+0x26a>
 8005940:	ab01      	add	r3, sp, #4
 8005942:	4622      	mov	r2, r4
 8005944:	a943      	add	r1, sp, #268	; 0x10c
 8005946:	4630      	mov	r0, r6
 8005948:	f000 f884 	bl	8005a54 <_scanf_i>
 800594c:	e77f      	b.n	800584e <__ssvfiscanf_r+0x16a>
 800594e:	4b0e      	ldr	r3, [pc, #56]	; (8005988 <__ssvfiscanf_r+0x2a4>)
 8005950:	2b00      	cmp	r3, #0
 8005952:	f43f af3c 	beq.w	80057ce <__ssvfiscanf_r+0xea>
 8005956:	ab01      	add	r3, sp, #4
 8005958:	4622      	mov	r2, r4
 800595a:	a943      	add	r1, sp, #268	; 0x10c
 800595c:	4630      	mov	r0, r6
 800595e:	f3af 8000 	nop.w
 8005962:	e774      	b.n	800584e <__ssvfiscanf_r+0x16a>
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	f013 0f40 	tst.w	r3, #64	; 0x40
 800596a:	bf18      	it	ne
 800596c:	f04f 30ff 	movne.w	r0, #4294967295
 8005970:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8005974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005978:	9846      	ldr	r0, [sp, #280]	; 0x118
 800597a:	e7f9      	b.n	8005970 <__ssvfiscanf_r+0x28c>
 800597c:	08005631 	.word	0x08005631
 8005980:	080056ab 	.word	0x080056ab
 8005984:	08006062 	.word	0x08006062
 8005988:	00000000 	.word	0x00000000

0800598c <_scanf_chars>:
 800598c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005990:	4615      	mov	r5, r2
 8005992:	688a      	ldr	r2, [r1, #8]
 8005994:	4680      	mov	r8, r0
 8005996:	460c      	mov	r4, r1
 8005998:	b932      	cbnz	r2, 80059a8 <_scanf_chars+0x1c>
 800599a:	698a      	ldr	r2, [r1, #24]
 800599c:	2a00      	cmp	r2, #0
 800599e:	bf0c      	ite	eq
 80059a0:	2201      	moveq	r2, #1
 80059a2:	f04f 32ff 	movne.w	r2, #4294967295
 80059a6:	608a      	str	r2, [r1, #8]
 80059a8:	6822      	ldr	r2, [r4, #0]
 80059aa:	06d1      	lsls	r1, r2, #27
 80059ac:	bf5f      	itttt	pl
 80059ae:	681a      	ldrpl	r2, [r3, #0]
 80059b0:	1d11      	addpl	r1, r2, #4
 80059b2:	6019      	strpl	r1, [r3, #0]
 80059b4:	6817      	ldrpl	r7, [r2, #0]
 80059b6:	2600      	movs	r6, #0
 80059b8:	69a3      	ldr	r3, [r4, #24]
 80059ba:	b1db      	cbz	r3, 80059f4 <_scanf_chars+0x68>
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d107      	bne.n	80059d0 <_scanf_chars+0x44>
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	6962      	ldr	r2, [r4, #20]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	5cd3      	ldrb	r3, [r2, r3]
 80059c8:	b9a3      	cbnz	r3, 80059f4 <_scanf_chars+0x68>
 80059ca:	2e00      	cmp	r6, #0
 80059cc:	d132      	bne.n	8005a34 <_scanf_chars+0xa8>
 80059ce:	e006      	b.n	80059de <_scanf_chars+0x52>
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d007      	beq.n	80059e4 <_scanf_chars+0x58>
 80059d4:	2e00      	cmp	r6, #0
 80059d6:	d12d      	bne.n	8005a34 <_scanf_chars+0xa8>
 80059d8:	69a3      	ldr	r3, [r4, #24]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d12a      	bne.n	8005a34 <_scanf_chars+0xa8>
 80059de:	2001      	movs	r0, #1
 80059e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059e4:	f7ff fe02 	bl	80055ec <__locale_ctype_ptr>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	4418      	add	r0, r3
 80059ee:	7843      	ldrb	r3, [r0, #1]
 80059f0:	071b      	lsls	r3, r3, #28
 80059f2:	d4ef      	bmi.n	80059d4 <_scanf_chars+0x48>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	06da      	lsls	r2, r3, #27
 80059f8:	bf5e      	ittt	pl
 80059fa:	682b      	ldrpl	r3, [r5, #0]
 80059fc:	781b      	ldrbpl	r3, [r3, #0]
 80059fe:	703b      	strbpl	r3, [r7, #0]
 8005a00:	682a      	ldr	r2, [r5, #0]
 8005a02:	686b      	ldr	r3, [r5, #4]
 8005a04:	f102 0201 	add.w	r2, r2, #1
 8005a08:	602a      	str	r2, [r5, #0]
 8005a0a:	68a2      	ldr	r2, [r4, #8]
 8005a0c:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a10:	f102 32ff 	add.w	r2, r2, #4294967295
 8005a14:	606b      	str	r3, [r5, #4]
 8005a16:	f106 0601 	add.w	r6, r6, #1
 8005a1a:	bf58      	it	pl
 8005a1c:	3701      	addpl	r7, #1
 8005a1e:	60a2      	str	r2, [r4, #8]
 8005a20:	b142      	cbz	r2, 8005a34 <_scanf_chars+0xa8>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	dcc8      	bgt.n	80059b8 <_scanf_chars+0x2c>
 8005a26:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	4798      	blx	r3
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d0c1      	beq.n	80059b8 <_scanf_chars+0x2c>
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	f013 0310 	ands.w	r3, r3, #16
 8005a3a:	d105      	bne.n	8005a48 <_scanf_chars+0xbc>
 8005a3c:	68e2      	ldr	r2, [r4, #12]
 8005a3e:	3201      	adds	r2, #1
 8005a40:	60e2      	str	r2, [r4, #12]
 8005a42:	69a2      	ldr	r2, [r4, #24]
 8005a44:	b102      	cbz	r2, 8005a48 <_scanf_chars+0xbc>
 8005a46:	703b      	strb	r3, [r7, #0]
 8005a48:	6923      	ldr	r3, [r4, #16]
 8005a4a:	441e      	add	r6, r3
 8005a4c:	6126      	str	r6, [r4, #16]
 8005a4e:	2000      	movs	r0, #0
 8005a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a54 <_scanf_i>:
 8005a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	469a      	mov	sl, r3
 8005a5a:	4b74      	ldr	r3, [pc, #464]	; (8005c2c <_scanf_i+0x1d8>)
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	4683      	mov	fp, r0
 8005a60:	4616      	mov	r6, r2
 8005a62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a66:	b087      	sub	sp, #28
 8005a68:	ab03      	add	r3, sp, #12
 8005a6a:	68a7      	ldr	r7, [r4, #8]
 8005a6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005a70:	4b6f      	ldr	r3, [pc, #444]	; (8005c30 <_scanf_i+0x1dc>)
 8005a72:	69a1      	ldr	r1, [r4, #24]
 8005a74:	4a6f      	ldr	r2, [pc, #444]	; (8005c34 <_scanf_i+0x1e0>)
 8005a76:	2903      	cmp	r1, #3
 8005a78:	bf18      	it	ne
 8005a7a:	461a      	movne	r2, r3
 8005a7c:	1e7b      	subs	r3, r7, #1
 8005a7e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8005a82:	bf84      	itt	hi
 8005a84:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005a88:	60a3      	strhi	r3, [r4, #8]
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	9200      	str	r2, [sp, #0]
 8005a8e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005a92:	bf88      	it	hi
 8005a94:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005a98:	f104 091c 	add.w	r9, r4, #28
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	bf8c      	ite	hi
 8005aa0:	197f      	addhi	r7, r7, r5
 8005aa2:	2700      	movls	r7, #0
 8005aa4:	464b      	mov	r3, r9
 8005aa6:	f04f 0800 	mov.w	r8, #0
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	6831      	ldr	r1, [r6, #0]
 8005aae:	ab03      	add	r3, sp, #12
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005ab6:	7809      	ldrb	r1, [r1, #0]
 8005ab8:	f7fa fba2 	bl	8000200 <memchr>
 8005abc:	9b01      	ldr	r3, [sp, #4]
 8005abe:	b328      	cbz	r0, 8005b0c <_scanf_i+0xb8>
 8005ac0:	f1b8 0f01 	cmp.w	r8, #1
 8005ac4:	d156      	bne.n	8005b74 <_scanf_i+0x120>
 8005ac6:	6862      	ldr	r2, [r4, #4]
 8005ac8:	b92a      	cbnz	r2, 8005ad6 <_scanf_i+0x82>
 8005aca:	2208      	movs	r2, #8
 8005acc:	6062      	str	r2, [r4, #4]
 8005ace:	6822      	ldr	r2, [r4, #0]
 8005ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad4:	6022      	str	r2, [r4, #0]
 8005ad6:	6822      	ldr	r2, [r4, #0]
 8005ad8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005adc:	6022      	str	r2, [r4, #0]
 8005ade:	68a2      	ldr	r2, [r4, #8]
 8005ae0:	1e51      	subs	r1, r2, #1
 8005ae2:	60a1      	str	r1, [r4, #8]
 8005ae4:	b192      	cbz	r2, 8005b0c <_scanf_i+0xb8>
 8005ae6:	6832      	ldr	r2, [r6, #0]
 8005ae8:	1c51      	adds	r1, r2, #1
 8005aea:	6031      	str	r1, [r6, #0]
 8005aec:	7812      	ldrb	r2, [r2, #0]
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	1c5d      	adds	r5, r3, #1
 8005af2:	6873      	ldr	r3, [r6, #4]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	6073      	str	r3, [r6, #4]
 8005afa:	dc06      	bgt.n	8005b0a <_scanf_i+0xb6>
 8005afc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005b00:	4631      	mov	r1, r6
 8005b02:	4658      	mov	r0, fp
 8005b04:	4798      	blx	r3
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d176      	bne.n	8005bf8 <_scanf_i+0x1a4>
 8005b0a:	462b      	mov	r3, r5
 8005b0c:	f108 0801 	add.w	r8, r8, #1
 8005b10:	f1b8 0f03 	cmp.w	r8, #3
 8005b14:	d1c9      	bne.n	8005aaa <_scanf_i+0x56>
 8005b16:	6862      	ldr	r2, [r4, #4]
 8005b18:	b90a      	cbnz	r2, 8005b1e <_scanf_i+0xca>
 8005b1a:	220a      	movs	r2, #10
 8005b1c:	6062      	str	r2, [r4, #4]
 8005b1e:	6862      	ldr	r2, [r4, #4]
 8005b20:	4945      	ldr	r1, [pc, #276]	; (8005c38 <_scanf_i+0x1e4>)
 8005b22:	6960      	ldr	r0, [r4, #20]
 8005b24:	9301      	str	r3, [sp, #4]
 8005b26:	1a89      	subs	r1, r1, r2
 8005b28:	f000 f888 	bl	8005c3c <__sccl>
 8005b2c:	9b01      	ldr	r3, [sp, #4]
 8005b2e:	f04f 0800 	mov.w	r8, #0
 8005b32:	461d      	mov	r5, r3
 8005b34:	68a3      	ldr	r3, [r4, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d038      	beq.n	8005bac <_scanf_i+0x158>
 8005b3a:	6831      	ldr	r1, [r6, #0]
 8005b3c:	6960      	ldr	r0, [r4, #20]
 8005b3e:	780a      	ldrb	r2, [r1, #0]
 8005b40:	5c80      	ldrb	r0, [r0, r2]
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d032      	beq.n	8005bac <_scanf_i+0x158>
 8005b46:	2a30      	cmp	r2, #48	; 0x30
 8005b48:	6822      	ldr	r2, [r4, #0]
 8005b4a:	d121      	bne.n	8005b90 <_scanf_i+0x13c>
 8005b4c:	0510      	lsls	r0, r2, #20
 8005b4e:	d51f      	bpl.n	8005b90 <_scanf_i+0x13c>
 8005b50:	f108 0801 	add.w	r8, r8, #1
 8005b54:	b117      	cbz	r7, 8005b5c <_scanf_i+0x108>
 8005b56:	3301      	adds	r3, #1
 8005b58:	3f01      	subs	r7, #1
 8005b5a:	60a3      	str	r3, [r4, #8]
 8005b5c:	6873      	ldr	r3, [r6, #4]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	6073      	str	r3, [r6, #4]
 8005b64:	dd1b      	ble.n	8005b9e <_scanf_i+0x14a>
 8005b66:	6833      	ldr	r3, [r6, #0]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	6033      	str	r3, [r6, #0]
 8005b6c:	68a3      	ldr	r3, [r4, #8]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	60a3      	str	r3, [r4, #8]
 8005b72:	e7df      	b.n	8005b34 <_scanf_i+0xe0>
 8005b74:	f1b8 0f02 	cmp.w	r8, #2
 8005b78:	d1b1      	bne.n	8005ade <_scanf_i+0x8a>
 8005b7a:	6822      	ldr	r2, [r4, #0]
 8005b7c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005b80:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005b84:	d1c2      	bne.n	8005b0c <_scanf_i+0xb8>
 8005b86:	2110      	movs	r1, #16
 8005b88:	6061      	str	r1, [r4, #4]
 8005b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b8e:	e7a5      	b.n	8005adc <_scanf_i+0x88>
 8005b90:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005b94:	6022      	str	r2, [r4, #0]
 8005b96:	780b      	ldrb	r3, [r1, #0]
 8005b98:	702b      	strb	r3, [r5, #0]
 8005b9a:	3501      	adds	r5, #1
 8005b9c:	e7de      	b.n	8005b5c <_scanf_i+0x108>
 8005b9e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4658      	mov	r0, fp
 8005ba6:	4798      	blx	r3
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d0df      	beq.n	8005b6c <_scanf_i+0x118>
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	05d9      	lsls	r1, r3, #23
 8005bb0:	d50c      	bpl.n	8005bcc <_scanf_i+0x178>
 8005bb2:	454d      	cmp	r5, r9
 8005bb4:	d908      	bls.n	8005bc8 <_scanf_i+0x174>
 8005bb6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005bba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bbe:	4632      	mov	r2, r6
 8005bc0:	4658      	mov	r0, fp
 8005bc2:	4798      	blx	r3
 8005bc4:	1e6f      	subs	r7, r5, #1
 8005bc6:	463d      	mov	r5, r7
 8005bc8:	454d      	cmp	r5, r9
 8005bca:	d02c      	beq.n	8005c26 <_scanf_i+0x1d2>
 8005bcc:	6822      	ldr	r2, [r4, #0]
 8005bce:	f012 0210 	ands.w	r2, r2, #16
 8005bd2:	d11e      	bne.n	8005c12 <_scanf_i+0x1be>
 8005bd4:	702a      	strb	r2, [r5, #0]
 8005bd6:	6863      	ldr	r3, [r4, #4]
 8005bd8:	9e00      	ldr	r6, [sp, #0]
 8005bda:	4649      	mov	r1, r9
 8005bdc:	4658      	mov	r0, fp
 8005bde:	47b0      	blx	r6
 8005be0:	6822      	ldr	r2, [r4, #0]
 8005be2:	f8da 3000 	ldr.w	r3, [sl]
 8005be6:	f012 0f20 	tst.w	r2, #32
 8005bea:	d008      	beq.n	8005bfe <_scanf_i+0x1aa>
 8005bec:	1d1a      	adds	r2, r3, #4
 8005bee:	f8ca 2000 	str.w	r2, [sl]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6018      	str	r0, [r3, #0]
 8005bf6:	e009      	b.n	8005c0c <_scanf_i+0x1b8>
 8005bf8:	f04f 0800 	mov.w	r8, #0
 8005bfc:	e7d6      	b.n	8005bac <_scanf_i+0x158>
 8005bfe:	07d2      	lsls	r2, r2, #31
 8005c00:	d5f4      	bpl.n	8005bec <_scanf_i+0x198>
 8005c02:	1d1a      	adds	r2, r3, #4
 8005c04:	f8ca 2000 	str.w	r2, [sl]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	8018      	strh	r0, [r3, #0]
 8005c0c:	68e3      	ldr	r3, [r4, #12]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	60e3      	str	r3, [r4, #12]
 8005c12:	eba5 0509 	sub.w	r5, r5, r9
 8005c16:	44a8      	add	r8, r5
 8005c18:	6925      	ldr	r5, [r4, #16]
 8005c1a:	4445      	add	r5, r8
 8005c1c:	6125      	str	r5, [r4, #16]
 8005c1e:	2000      	movs	r0, #0
 8005c20:	b007      	add	sp, #28
 8005c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c26:	2001      	movs	r0, #1
 8005c28:	e7fa      	b.n	8005c20 <_scanf_i+0x1cc>
 8005c2a:	bf00      	nop
 8005c2c:	08005ef8 	.word	0x08005ef8
 8005c30:	08005591 	.word	0x08005591
 8005c34:	08005d9d 	.word	0x08005d9d
 8005c38:	08006076 	.word	0x08006076

08005c3c <__sccl>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	780b      	ldrb	r3, [r1, #0]
 8005c40:	2b5e      	cmp	r3, #94	; 0x5e
 8005c42:	bf13      	iteet	ne
 8005c44:	1c4a      	addne	r2, r1, #1
 8005c46:	1c8a      	addeq	r2, r1, #2
 8005c48:	784b      	ldrbeq	r3, [r1, #1]
 8005c4a:	2100      	movne	r1, #0
 8005c4c:	bf08      	it	eq
 8005c4e:	2101      	moveq	r1, #1
 8005c50:	1e44      	subs	r4, r0, #1
 8005c52:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8005c56:	f804 1f01 	strb.w	r1, [r4, #1]!
 8005c5a:	42a5      	cmp	r5, r4
 8005c5c:	d1fb      	bne.n	8005c56 <__sccl+0x1a>
 8005c5e:	b913      	cbnz	r3, 8005c66 <__sccl+0x2a>
 8005c60:	3a01      	subs	r2, #1
 8005c62:	4610      	mov	r0, r2
 8005c64:	bd70      	pop	{r4, r5, r6, pc}
 8005c66:	f081 0401 	eor.w	r4, r1, #1
 8005c6a:	54c4      	strb	r4, [r0, r3]
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	780d      	ldrb	r5, [r1, #0]
 8005c70:	2d2d      	cmp	r5, #45	; 0x2d
 8005c72:	f101 0201 	add.w	r2, r1, #1
 8005c76:	d006      	beq.n	8005c86 <__sccl+0x4a>
 8005c78:	2d5d      	cmp	r5, #93	; 0x5d
 8005c7a:	d0f2      	beq.n	8005c62 <__sccl+0x26>
 8005c7c:	b90d      	cbnz	r5, 8005c82 <__sccl+0x46>
 8005c7e:	460a      	mov	r2, r1
 8005c80:	e7ef      	b.n	8005c62 <__sccl+0x26>
 8005c82:	462b      	mov	r3, r5
 8005c84:	e7f1      	b.n	8005c6a <__sccl+0x2e>
 8005c86:	784e      	ldrb	r6, [r1, #1]
 8005c88:	2e5d      	cmp	r6, #93	; 0x5d
 8005c8a:	d0fa      	beq.n	8005c82 <__sccl+0x46>
 8005c8c:	42b3      	cmp	r3, r6
 8005c8e:	dcf8      	bgt.n	8005c82 <__sccl+0x46>
 8005c90:	3102      	adds	r1, #2
 8005c92:	3301      	adds	r3, #1
 8005c94:	429e      	cmp	r6, r3
 8005c96:	54c4      	strb	r4, [r0, r3]
 8005c98:	dcfb      	bgt.n	8005c92 <__sccl+0x56>
 8005c9a:	e7e8      	b.n	8005c6e <__sccl+0x32>

08005c9c <_strtol_l.isra.0>:
 8005c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca0:	4680      	mov	r8, r0
 8005ca2:	4689      	mov	r9, r1
 8005ca4:	4692      	mov	sl, r2
 8005ca6:	461f      	mov	r7, r3
 8005ca8:	468b      	mov	fp, r1
 8005caa:	465d      	mov	r5, fp
 8005cac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005cae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cb2:	f7ff fc97 	bl	80055e4 <__locale_ctype_ptr_l>
 8005cb6:	4420      	add	r0, r4
 8005cb8:	7846      	ldrb	r6, [r0, #1]
 8005cba:	f016 0608 	ands.w	r6, r6, #8
 8005cbe:	d10b      	bne.n	8005cd8 <_strtol_l.isra.0+0x3c>
 8005cc0:	2c2d      	cmp	r4, #45	; 0x2d
 8005cc2:	d10b      	bne.n	8005cdc <_strtol_l.isra.0+0x40>
 8005cc4:	782c      	ldrb	r4, [r5, #0]
 8005cc6:	2601      	movs	r6, #1
 8005cc8:	f10b 0502 	add.w	r5, fp, #2
 8005ccc:	b167      	cbz	r7, 8005ce8 <_strtol_l.isra.0+0x4c>
 8005cce:	2f10      	cmp	r7, #16
 8005cd0:	d114      	bne.n	8005cfc <_strtol_l.isra.0+0x60>
 8005cd2:	2c30      	cmp	r4, #48	; 0x30
 8005cd4:	d00a      	beq.n	8005cec <_strtol_l.isra.0+0x50>
 8005cd6:	e011      	b.n	8005cfc <_strtol_l.isra.0+0x60>
 8005cd8:	46ab      	mov	fp, r5
 8005cda:	e7e6      	b.n	8005caa <_strtol_l.isra.0+0xe>
 8005cdc:	2c2b      	cmp	r4, #43	; 0x2b
 8005cde:	bf04      	itt	eq
 8005ce0:	782c      	ldrbeq	r4, [r5, #0]
 8005ce2:	f10b 0502 	addeq.w	r5, fp, #2
 8005ce6:	e7f1      	b.n	8005ccc <_strtol_l.isra.0+0x30>
 8005ce8:	2c30      	cmp	r4, #48	; 0x30
 8005cea:	d127      	bne.n	8005d3c <_strtol_l.isra.0+0xa0>
 8005cec:	782b      	ldrb	r3, [r5, #0]
 8005cee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005cf2:	2b58      	cmp	r3, #88	; 0x58
 8005cf4:	d14b      	bne.n	8005d8e <_strtol_l.isra.0+0xf2>
 8005cf6:	786c      	ldrb	r4, [r5, #1]
 8005cf8:	2710      	movs	r7, #16
 8005cfa:	3502      	adds	r5, #2
 8005cfc:	2e00      	cmp	r6, #0
 8005cfe:	bf0c      	ite	eq
 8005d00:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005d04:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005d08:	2200      	movs	r2, #0
 8005d0a:	fbb1 fef7 	udiv	lr, r1, r7
 8005d0e:	4610      	mov	r0, r2
 8005d10:	fb07 1c1e 	mls	ip, r7, lr, r1
 8005d14:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005d18:	2b09      	cmp	r3, #9
 8005d1a:	d811      	bhi.n	8005d40 <_strtol_l.isra.0+0xa4>
 8005d1c:	461c      	mov	r4, r3
 8005d1e:	42a7      	cmp	r7, r4
 8005d20:	dd1d      	ble.n	8005d5e <_strtol_l.isra.0+0xc2>
 8005d22:	1c53      	adds	r3, r2, #1
 8005d24:	d007      	beq.n	8005d36 <_strtol_l.isra.0+0x9a>
 8005d26:	4586      	cmp	lr, r0
 8005d28:	d316      	bcc.n	8005d58 <_strtol_l.isra.0+0xbc>
 8005d2a:	d101      	bne.n	8005d30 <_strtol_l.isra.0+0x94>
 8005d2c:	45a4      	cmp	ip, r4
 8005d2e:	db13      	blt.n	8005d58 <_strtol_l.isra.0+0xbc>
 8005d30:	fb00 4007 	mla	r0, r0, r7, r4
 8005d34:	2201      	movs	r2, #1
 8005d36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d3a:	e7eb      	b.n	8005d14 <_strtol_l.isra.0+0x78>
 8005d3c:	270a      	movs	r7, #10
 8005d3e:	e7dd      	b.n	8005cfc <_strtol_l.isra.0+0x60>
 8005d40:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005d44:	2b19      	cmp	r3, #25
 8005d46:	d801      	bhi.n	8005d4c <_strtol_l.isra.0+0xb0>
 8005d48:	3c37      	subs	r4, #55	; 0x37
 8005d4a:	e7e8      	b.n	8005d1e <_strtol_l.isra.0+0x82>
 8005d4c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005d50:	2b19      	cmp	r3, #25
 8005d52:	d804      	bhi.n	8005d5e <_strtol_l.isra.0+0xc2>
 8005d54:	3c57      	subs	r4, #87	; 0x57
 8005d56:	e7e2      	b.n	8005d1e <_strtol_l.isra.0+0x82>
 8005d58:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5c:	e7eb      	b.n	8005d36 <_strtol_l.isra.0+0x9a>
 8005d5e:	1c53      	adds	r3, r2, #1
 8005d60:	d108      	bne.n	8005d74 <_strtol_l.isra.0+0xd8>
 8005d62:	2322      	movs	r3, #34	; 0x22
 8005d64:	f8c8 3000 	str.w	r3, [r8]
 8005d68:	4608      	mov	r0, r1
 8005d6a:	f1ba 0f00 	cmp.w	sl, #0
 8005d6e:	d107      	bne.n	8005d80 <_strtol_l.isra.0+0xe4>
 8005d70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d74:	b106      	cbz	r6, 8005d78 <_strtol_l.isra.0+0xdc>
 8005d76:	4240      	negs	r0, r0
 8005d78:	f1ba 0f00 	cmp.w	sl, #0
 8005d7c:	d00c      	beq.n	8005d98 <_strtol_l.isra.0+0xfc>
 8005d7e:	b122      	cbz	r2, 8005d8a <_strtol_l.isra.0+0xee>
 8005d80:	3d01      	subs	r5, #1
 8005d82:	f8ca 5000 	str.w	r5, [sl]
 8005d86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8a:	464d      	mov	r5, r9
 8005d8c:	e7f9      	b.n	8005d82 <_strtol_l.isra.0+0xe6>
 8005d8e:	2430      	movs	r4, #48	; 0x30
 8005d90:	2f00      	cmp	r7, #0
 8005d92:	d1b3      	bne.n	8005cfc <_strtol_l.isra.0+0x60>
 8005d94:	2708      	movs	r7, #8
 8005d96:	e7b1      	b.n	8005cfc <_strtol_l.isra.0+0x60>
 8005d98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d9c <_strtol_r>:
 8005d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d9e:	4c06      	ldr	r4, [pc, #24]	; (8005db8 <_strtol_r+0x1c>)
 8005da0:	4d06      	ldr	r5, [pc, #24]	; (8005dbc <_strtol_r+0x20>)
 8005da2:	6824      	ldr	r4, [r4, #0]
 8005da4:	6a24      	ldr	r4, [r4, #32]
 8005da6:	2c00      	cmp	r4, #0
 8005da8:	bf08      	it	eq
 8005daa:	462c      	moveq	r4, r5
 8005dac:	9400      	str	r4, [sp, #0]
 8005dae:	f7ff ff75 	bl	8005c9c <_strtol_l.isra.0>
 8005db2:	b003      	add	sp, #12
 8005db4:	bd30      	pop	{r4, r5, pc}
 8005db6:	bf00      	nop
 8005db8:	20000050 	.word	0x20000050
 8005dbc:	200000b8 	.word	0x200000b8

08005dc0 <__submore>:
 8005dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dcc:	4299      	cmp	r1, r3
 8005dce:	d11e      	bne.n	8005e0e <__submore+0x4e>
 8005dd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005dd4:	f7ff faaa 	bl	800532c <_malloc_r>
 8005dd8:	b918      	cbnz	r0, 8005de2 <__submore+0x22>
 8005dda:	f04f 30ff 	mov.w	r0, #4294967295
 8005dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005de6:	63a3      	str	r3, [r4, #56]	; 0x38
 8005de8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005dec:	6360      	str	r0, [r4, #52]	; 0x34
 8005dee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005df2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005df6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005dfa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005dfe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005e02:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005e06:	6020      	str	r0, [r4, #0]
 8005e08:	2000      	movs	r0, #0
 8005e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e0e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005e10:	0077      	lsls	r7, r6, #1
 8005e12:	463a      	mov	r2, r7
 8005e14:	f000 f827 	bl	8005e66 <_realloc_r>
 8005e18:	4605      	mov	r5, r0
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	d0dd      	beq.n	8005dda <__submore+0x1a>
 8005e1e:	eb00 0806 	add.w	r8, r0, r6
 8005e22:	4601      	mov	r1, r0
 8005e24:	4632      	mov	r2, r6
 8005e26:	4640      	mov	r0, r8
 8005e28:	f000 f812 	bl	8005e50 <memcpy>
 8005e2c:	f8c4 8000 	str.w	r8, [r4]
 8005e30:	6365      	str	r5, [r4, #52]	; 0x34
 8005e32:	63a7      	str	r7, [r4, #56]	; 0x38
 8005e34:	e7e8      	b.n	8005e08 <__submore+0x48>

08005e36 <__ascii_wctomb>:
 8005e36:	b149      	cbz	r1, 8005e4c <__ascii_wctomb+0x16>
 8005e38:	2aff      	cmp	r2, #255	; 0xff
 8005e3a:	bf85      	ittet	hi
 8005e3c:	238a      	movhi	r3, #138	; 0x8a
 8005e3e:	6003      	strhi	r3, [r0, #0]
 8005e40:	700a      	strbls	r2, [r1, #0]
 8005e42:	f04f 30ff 	movhi.w	r0, #4294967295
 8005e46:	bf98      	it	ls
 8005e48:	2001      	movls	r0, #1
 8005e4a:	4770      	bx	lr
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	4770      	bx	lr

08005e50 <memcpy>:
 8005e50:	b510      	push	{r4, lr}
 8005e52:	1e43      	subs	r3, r0, #1
 8005e54:	440a      	add	r2, r1
 8005e56:	4291      	cmp	r1, r2
 8005e58:	d100      	bne.n	8005e5c <memcpy+0xc>
 8005e5a:	bd10      	pop	{r4, pc}
 8005e5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e64:	e7f7      	b.n	8005e56 <memcpy+0x6>

08005e66 <_realloc_r>:
 8005e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e68:	4607      	mov	r7, r0
 8005e6a:	4614      	mov	r4, r2
 8005e6c:	460e      	mov	r6, r1
 8005e6e:	b921      	cbnz	r1, 8005e7a <_realloc_r+0x14>
 8005e70:	4611      	mov	r1, r2
 8005e72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e76:	f7ff ba59 	b.w	800532c <_malloc_r>
 8005e7a:	b922      	cbnz	r2, 8005e86 <_realloc_r+0x20>
 8005e7c:	f7ff fa08 	bl	8005290 <_free_r>
 8005e80:	4625      	mov	r5, r4
 8005e82:	4628      	mov	r0, r5
 8005e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e86:	f000 f814 	bl	8005eb2 <_malloc_usable_size_r>
 8005e8a:	4284      	cmp	r4, r0
 8005e8c:	d90f      	bls.n	8005eae <_realloc_r+0x48>
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4638      	mov	r0, r7
 8005e92:	f7ff fa4b 	bl	800532c <_malloc_r>
 8005e96:	4605      	mov	r5, r0
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d0f2      	beq.n	8005e82 <_realloc_r+0x1c>
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	f7ff ffd6 	bl	8005e50 <memcpy>
 8005ea4:	4631      	mov	r1, r6
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	f7ff f9f2 	bl	8005290 <_free_r>
 8005eac:	e7e9      	b.n	8005e82 <_realloc_r+0x1c>
 8005eae:	4635      	mov	r5, r6
 8005eb0:	e7e7      	b.n	8005e82 <_realloc_r+0x1c>

08005eb2 <_malloc_usable_size_r>:
 8005eb2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	f1a0 0004 	sub.w	r0, r0, #4
 8005ebc:	bfbc      	itt	lt
 8005ebe:	580b      	ldrlt	r3, [r1, r0]
 8005ec0:	18c0      	addlt	r0, r0, r3
 8005ec2:	4770      	bx	lr

08005ec4 <_sbrk>:
 8005ec4:	4b04      	ldr	r3, [pc, #16]	; (8005ed8 <_sbrk+0x14>)
 8005ec6:	6819      	ldr	r1, [r3, #0]
 8005ec8:	4602      	mov	r2, r0
 8005eca:	b909      	cbnz	r1, 8005ed0 <_sbrk+0xc>
 8005ecc:	4903      	ldr	r1, [pc, #12]	; (8005edc <_sbrk+0x18>)
 8005ece:	6019      	str	r1, [r3, #0]
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	4402      	add	r2, r0
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	4770      	bx	lr
 8005ed8:	20000270 	.word	0x20000270
 8005edc:	20000690 	.word	0x20000690

08005ee0 <_init>:
 8005ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee2:	bf00      	nop
 8005ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee6:	bc08      	pop	{r3}
 8005ee8:	469e      	mov	lr, r3
 8005eea:	4770      	bx	lr

08005eec <_fini>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	bf00      	nop
 8005ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef2:	bc08      	pop	{r3}
 8005ef4:	469e      	mov	lr, r3
 8005ef6:	4770      	bx	lr
