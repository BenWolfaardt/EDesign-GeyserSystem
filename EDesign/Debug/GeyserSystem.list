
H:\EDesign\V5.3\GeyserSystem\Debug\GeyserSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08006bbc  08006bbc  00016bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006eb0  08006eb0  00016eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006eb4  08006eb4  00016eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000228  20000000  08006eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020228  2**0
                  CONTENTS
  7 .bss          000005c0  20000228  20000228  00020228  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200007e8  200007e8  00020228  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 10 .debug_info   000254ff  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000389e  00000000  00000000  00045757  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000fc19  00000000  00000000  00048ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001230  00000000  00000000  00058c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001180  00000000  00000000  00059e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00020547  00000000  00000000  0005afc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000fed2  00000000  00000000  0007b507  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000b2606  00000000  00000000  0008b3d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0013d9df  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003f80  00000000  00000000  0013da5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000df  00000000  00000000  001419dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ba4 	.word	0x08006ba4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08006ba4 	.word	0x08006ba4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2uiz>:
 8000b70:	004a      	lsls	r2, r1, #1
 8000b72:	d211      	bcs.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d211      	bcs.n	8000b9e <__aeabi_d2uiz+0x2e>
 8000b7a:	d50d      	bpl.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d40e      	bmi.n	8000ba4 <__aeabi_d2uiz+0x34>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_d2uiz+0x3a>
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0000 	mov.w	r0, #0
 8000bae:	4770      	bx	lr

08000bb0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b510      	push	{r4, lr}
 8000bb2:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <HAL_InitTick+0x24>)
 8000bb6:	6818      	ldr	r0, [r3, #0]
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <HAL_InitTick+0x28>)
 8000bba:	fba3 3000 	umull	r3, r0, r3, r0
 8000bbe:	0980      	lsrs	r0, r0, #6
 8000bc0:	f000 fcf6 	bl	80015b0 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4621      	mov	r1, r4
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 fcb2 	bl	8001534 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	bd10      	pop	{r4, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	10624dd3 	.word	0x10624dd3

08000bdc <HAL_Init>:
{
 8000bdc:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bde:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_Init+0x20>)
 8000be0:	6813      	ldr	r3, [r2, #0]
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 fc91 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff ffde 	bl	8000bb0 <HAL_InitTick>
  HAL_MspInit();
 8000bf4:	f003 fb8e 	bl	8004314 <HAL_MspInit>
}
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	bd08      	pop	{r3, pc}
 8000bfc:	40022000 	.word	0x40022000

08000c00 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000c00:	4a02      	ldr	r2, [pc, #8]	; (8000c0c <HAL_IncTick+0xc>)
 8000c02:	6813      	ldr	r3, [r2, #0]
 8000c04:	3301      	adds	r3, #1
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000278 	.word	0x20000278

08000c10 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000c10:	4b01      	ldr	r3, [pc, #4]	; (8000c18 <HAL_GetTick+0x8>)
 8000c12:	6818      	ldr	r0, [r3, #0]
}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000278 	.word	0x20000278

08000c1c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000c1e:	6802      	ldr	r2, [r0, #0]
 8000c20:	6893      	ldr	r3, [r2, #8]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d011      	beq.n	8000c4e <ADC_Disable+0x32>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d037      	beq.n	8000ca0 <ADC_Disable+0x84>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000c30:	6893      	ldr	r3, [r2, #8]
 8000c32:	f003 030d 	and.w	r3, r3, #13
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d011      	beq.n	8000c5e <ADC_Disable+0x42>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c3a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000c3c:	f043 0310 	orr.w	r3, r3, #16
 8000c40:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c42:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000c4e:	6813      	ldr	r3, [r2, #0]
 8000c50:	f013 0f01 	tst.w	r3, #1
 8000c54:	d101      	bne.n	8000c5a <ADC_Disable+0x3e>
 8000c56:	2300      	movs	r3, #0
 8000c58:	e7e8      	b.n	8000c2c <ADC_Disable+0x10>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e7e6      	b.n	8000c2c <ADC_Disable+0x10>
 8000c5e:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8000c60:	6893      	ldr	r3, [r2, #8]
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	6093      	str	r3, [r2, #8]
 8000c68:	6803      	ldr	r3, [r0, #0]
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	601a      	str	r2, [r3, #0]
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000c6e:	f7ff ffcf 	bl	8000c10 <HAL_GetTick>
 8000c72:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f013 0f01 	tst.w	r3, #1
 8000c7c:	d00e      	beq.n	8000c9c <ADC_Disable+0x80>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000c7e:	f7ff ffc7 	bl	8000c10 <HAL_GetTick>
 8000c82:	1b40      	subs	r0, r0, r5
 8000c84:	2802      	cmp	r0, #2
 8000c86:	d9f5      	bls.n	8000c74 <ADC_Disable+0x58>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c8a:	f043 0310 	orr.w	r3, r3, #16
 8000c8e:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8000c98:	2001      	movs	r0, #1
 8000c9a:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	bd38      	pop	{r3, r4, r5, pc}
 8000ca0:	2000      	movs	r0, #0
}
 8000ca2:	bd38      	pop	{r3, r4, r5, pc}

08000ca4 <ADC_Enable>:
{
 8000ca4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ca6:	6802      	ldr	r2, [r0, #0]
 8000ca8:	6893      	ldr	r3, [r2, #8]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d010      	beq.n	8000cd4 <ADC_Enable+0x30>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d133      	bne.n	8000d20 <ADC_Enable+0x7c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000cb8:	6891      	ldr	r1, [r2, #8]
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <ADC_Enable+0x80>)
 8000cbc:	4219      	tst	r1, r3
 8000cbe:	d011      	beq.n	8000ce4 <ADC_Enable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cc0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000cc2:	f043 0310 	orr.w	r3, r3, #16
 8000cc6:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000cd4:	6813      	ldr	r3, [r2, #0]
 8000cd6:	f013 0f01 	tst.w	r3, #1
 8000cda:	d101      	bne.n	8000ce0 <ADC_Enable+0x3c>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e7e9      	b.n	8000cb4 <ADC_Enable+0x10>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e7e7      	b.n	8000cb4 <ADC_Enable+0x10>
 8000ce4:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8000ce6:	6893      	ldr	r3, [r2, #8]
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8000cee:	f7ff ff8f 	bl	8000c10 <HAL_GetTick>
 8000cf2:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000cf4:	6823      	ldr	r3, [r4, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f013 0f01 	tst.w	r3, #1
 8000cfc:	d10e      	bne.n	8000d1c <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000cfe:	f7ff ff87 	bl	8000c10 <HAL_GetTick>
 8000d02:	1b40      	subs	r0, r0, r5
 8000d04:	2802      	cmp	r0, #2
 8000d06:	d9f5      	bls.n	8000cf4 <ADC_Enable+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000d18:	2001      	movs	r0, #1
 8000d1a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	bd38      	pop	{r3, r4, r5, pc}
 8000d20:	2000      	movs	r0, #0
}
 8000d22:	bd38      	pop	{r3, r4, r5, pc}
 8000d24:	8000003f 	.word	0x8000003f

08000d28 <HAL_ADC_Init>:
{
 8000d28:	b530      	push	{r4, r5, lr}
 8000d2a:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000d30:	2800      	cmp	r0, #0
 8000d32:	f000 80fb 	beq.w	8000f2c <HAL_ADC_Init+0x204>
 8000d36:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d38:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000d3a:	f013 0f10 	tst.w	r3, #16
 8000d3e:	d151      	bne.n	8000de4 <HAL_ADC_Init+0xbc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d40:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000d42:	b1ab      	cbz	r3, 8000d70 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d44:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000d4e:	d003      	beq.n	8000d58 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d50:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d52:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8000d56:	d046      	beq.n	8000de6 <HAL_ADC_Init+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 8000d58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d5a:	f023 0312 	bic.w	r3, r3, #18
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	e03a      	b.n	8000de6 <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 8000d70:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000d72:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000d74:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000d76:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000d7a:	f003 fb09 	bl	8004390 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d86:	d001      	beq.n	8000d8c <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e7dc      	b.n	8000d46 <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f7ff ff45 	bl	8000c1c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d94:	f013 0f10 	tst.w	r3, #16
 8000d98:	d1d5      	bne.n	8000d46 <HAL_ADC_Init+0x1e>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d1d3      	bne.n	8000d46 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8000d9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000da0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000da4:	f023 0302 	bic.w	r3, r3, #2
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000dae:	6822      	ldr	r2, [r4, #0]
 8000db0:	6893      	ldr	r3, [r2, #8]
 8000db2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000db6:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000db8:	6822      	ldr	r2, [r4, #0]
 8000dba:	6893      	ldr	r3, [r2, #8]
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dc2:	4b5b      	ldr	r3, [pc, #364]	; (8000f30 <HAL_ADC_Init+0x208>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a5b      	ldr	r2, [pc, #364]	; (8000f34 <HAL_ADC_Init+0x20c>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	0c9b      	lsrs	r3, r3, #18
 8000dce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000dd2:	005a      	lsls	r2, r3, #1
 8000dd4:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000dd6:	9b00      	ldr	r3, [sp, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0b4      	beq.n	8000d46 <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 8000ddc:	9b00      	ldr	r3, [sp, #0]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	e7f8      	b.n	8000dd6 <HAL_ADC_Init+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de4:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000de6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000de8:	f013 0f10 	tst.w	r3, #16
 8000dec:	f040 8095 	bne.w	8000f1a <HAL_ADC_Init+0x1f2>
 8000df0:	2800      	cmp	r0, #0
 8000df2:	f040 8092 	bne.w	8000f1a <HAL_ADC_Init+0x1f2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000df6:	6822      	ldr	r2, [r4, #0]
 8000df8:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000dfa:	f013 0304 	ands.w	r3, r3, #4
 8000dfe:	f040 808c 	bne.w	8000f1a <HAL_ADC_Init+0x1f2>
    ADC_STATE_CLR_SET(hadc->State,
 8000e02:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000e04:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8000e08:	f041 0102 	orr.w	r1, r1, #2
 8000e0c:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e0e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000e12:	d055      	beq.n	8000ec0 <HAL_ADC_Init+0x198>
 8000e14:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000e18:	9101      	str	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e1a:	6891      	ldr	r1, [r2, #8]
 8000e1c:	f001 0103 	and.w	r1, r1, #3
 8000e20:	2901      	cmp	r1, #1
 8000e22:	d050      	beq.n	8000ec6 <HAL_ADC_Init+0x19e>
 8000e24:	2200      	movs	r2, #0
 8000e26:	b972      	cbnz	r2, 8000e46 <HAL_ADC_Init+0x11e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e28:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e2a:	b12d      	cbz	r5, 8000e38 <HAL_ADC_Init+0x110>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e2c:	68a9      	ldr	r1, [r5, #8]
 8000e2e:	f001 0103 	and.w	r1, r1, #3
 8000e32:	2901      	cmp	r1, #1
 8000e34:	d04f      	beq.n	8000ed6 <HAL_ADC_Init+0x1ae>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e36:	b932      	cbnz	r2, 8000e46 <HAL_ADC_Init+0x11e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e38:	493f      	ldr	r1, [pc, #252]	; (8000f38 <HAL_ADC_Init+0x210>)
 8000e3a:	688a      	ldr	r2, [r1, #8]
 8000e3c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000e40:	6865      	ldr	r5, [r4, #4]
 8000e42:	432a      	orrs	r2, r5
 8000e44:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000e46:	69e2      	ldr	r2, [r4, #28]
 8000e48:	0351      	lsls	r1, r2, #13
 8000e4a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000e4c:	2d01      	cmp	r5, #1
 8000e4e:	d001      	beq.n	8000e54 <HAL_ADC_Init+0x12c>
 8000e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e54:	430b      	orrs	r3, r1
 8000e56:	68e1      	ldr	r1, [r4, #12]
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	68a1      	ldr	r1, [r4, #8]
 8000e5c:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e60:	2901      	cmp	r1, #1
 8000e62:	d03e      	beq.n	8000ee2 <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e66:	2a01      	cmp	r2, #1
 8000e68:	d002      	beq.n	8000e70 <HAL_ADC_Init+0x148>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e70:	6822      	ldr	r2, [r4, #0]
 8000e72:	6891      	ldr	r1, [r2, #8]
 8000e74:	f011 0f0c 	tst.w	r1, #12
 8000e78:	d10b      	bne.n	8000e92 <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e7a:	68d1      	ldr	r1, [r2, #12]
 8000e7c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000e80:	f021 0102 	bic.w	r1, r1, #2
 8000e84:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000e86:	69a1      	ldr	r1, [r4, #24]
 8000e88:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000e8a:	0052      	lsls	r2, r2, #1
 8000e8c:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8000e90:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8000e92:	6821      	ldr	r1, [r4, #0]
 8000e94:	68cd      	ldr	r5, [r1, #12]
 8000e96:	4a29      	ldr	r2, [pc, #164]	; (8000f3c <HAL_ADC_Init+0x214>)
 8000e98:	402a      	ands	r2, r5
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e9e:	6923      	ldr	r3, [r4, #16]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d031      	beq.n	8000f08 <HAL_ADC_Init+0x1e0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ea4:	6822      	ldr	r2, [r4, #0]
 8000ea6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ea8:	f023 030f 	bic.w	r3, r3, #15
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000eae:	2300      	movs	r3, #0
 8000eb0:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000eb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000eb4:	f023 0303 	bic.w	r3, r3, #3
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6463      	str	r3, [r4, #68]	; 0x44
 8000ebe:	e033      	b.n	8000f28 <HAL_ADC_Init+0x200>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ec0:	491f      	ldr	r1, [pc, #124]	; (8000f40 <HAL_ADC_Init+0x218>)
 8000ec2:	9101      	str	r1, [sp, #4]
 8000ec4:	e7a9      	b.n	8000e1a <HAL_ADC_Init+0xf2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ec6:	6812      	ldr	r2, [r2, #0]
 8000ec8:	f012 0f01 	tst.w	r2, #1
 8000ecc:	d101      	bne.n	8000ed2 <HAL_ADC_Init+0x1aa>
 8000ece:	2200      	movs	r2, #0
 8000ed0:	e7a9      	b.n	8000e26 <HAL_ADC_Init+0xfe>
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	e7a7      	b.n	8000e26 <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ed6:	6829      	ldr	r1, [r5, #0]
 8000ed8:	f011 0f01 	tst.w	r1, #1
 8000edc:	d0ab      	beq.n	8000e36 <HAL_ADC_Init+0x10e>
 8000ede:	2201      	movs	r2, #1
 8000ee0:	e7a9      	b.n	8000e36 <HAL_ADC_Init+0x10e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ee2:	b932      	cbnz	r2, 8000ef2 <HAL_ADC_Init+0x1ca>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000ee4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ee6:	3a01      	subs	r2, #1
 8000ee8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef0:	e7b8      	b.n	8000e64 <HAL_ADC_Init+0x13c>
        ADC_STATE_CLR_SET(hadc->State,
 8000ef2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000ef4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8000ef8:	f042 0220 	orr.w	r2, r2, #32
 8000efc:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000efe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000f00:	f042 0201 	orr.w	r2, r2, #1
 8000f04:	64a2      	str	r2, [r4, #72]	; 0x48
 8000f06:	e7ad      	b.n	8000e64 <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f08:	6821      	ldr	r1, [r4, #0]
 8000f0a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000f0c:	f023 030f 	bic.w	r3, r3, #15
 8000f10:	6a22      	ldr	r2, [r4, #32]
 8000f12:	3a01      	subs	r2, #1
 8000f14:	4313      	orrs	r3, r2
 8000f16:	630b      	str	r3, [r1, #48]	; 0x30
 8000f18:	e7c9      	b.n	8000eae <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 8000f1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f1c:	f023 0312 	bic.w	r3, r3, #18
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 8000f26:	2001      	movs	r0, #1
}
 8000f28:	b017      	add	sp, #92	; 0x5c
 8000f2a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	e7fb      	b.n	8000f28 <HAL_ADC_Init+0x200>
 8000f30:	20000000 	.word	0x20000000
 8000f34:	431bde83 	.word	0x431bde83
 8000f38:	50000300 	.word	0x50000300
 8000f3c:	fff0c007 	.word	0xfff0c007
 8000f40:	50000100 	.word	0x50000100

08000f44 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f44:	6803      	ldr	r3, [r0, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f013 0f04 	tst.w	r3, #4
 8000f4c:	d002      	beq.n	8000f54 <HAL_ADC_Start+0x10>
    tmp_hal_status = HAL_BUSY;
 8000f4e:	2302      	movs	r3, #2
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8000f54:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_ADC_Start+0x1c>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e7f7      	b.n	8000f50 <HAL_ADC_Start+0xc>
{
 8000f60:	b510      	push	{r4, lr}
 8000f62:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8000f64:	2301      	movs	r3, #1
 8000f66:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 8000f6a:	f7ff fe9b 	bl	8000ca4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d160      	bne.n	8001036 <HAL_ADC_Start+0xf2>
      ADC_STATE_CLR_SET(hadc->State,
 8000f74:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f76:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000f7a:	f022 0201 	bic.w	r2, r2, #1
 8000f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f82:	6462      	str	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f84:	4a2e      	ldr	r2, [pc, #184]	; (8001040 <HAL_ADC_Start+0xfc>)
 8000f86:	6892      	ldr	r2, [r2, #8]
 8000f88:	f012 0f1f 	tst.w	r2, #31
 8000f8c:	d033      	beq.n	8000ff6 <HAL_ADC_Start+0xb2>
 8000f8e:	6821      	ldr	r1, [r4, #0]
 8000f90:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8000f94:	d02f      	beq.n	8000ff6 <HAL_ADC_Start+0xb2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f96:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f98:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f9c:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f9e:	4a29      	ldr	r2, [pc, #164]	; (8001044 <HAL_ADC_Start+0x100>)
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d038      	beq.n	8001016 <HAL_ADC_Start+0xd2>
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fa4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000fa6:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000faa:	d041      	beq.n	8001030 <HAL_ADC_Start+0xec>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000fae:	f022 0206 	bic.w	r2, r2, #6
 8000fb2:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fba:	6822      	ldr	r2, [r4, #0]
 8000fbc:	211c      	movs	r1, #28
 8000fbe:	6011      	str	r1, [r2, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000fc0:	4a1f      	ldr	r2, [pc, #124]	; (8001040 <HAL_ADC_Start+0xfc>)
 8000fc2:	6892      	ldr	r2, [r2, #8]
 8000fc4:	f012 0f1f 	tst.w	r2, #31
 8000fc8:	d00f      	beq.n	8000fea <HAL_ADC_Start+0xa6>
 8000fca:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <HAL_ADC_Start+0xfc>)
 8000fcc:	6892      	ldr	r2, [r2, #8]
 8000fce:	f002 021f 	and.w	r2, r2, #31
 8000fd2:	2a05      	cmp	r2, #5
 8000fd4:	d009      	beq.n	8000fea <HAL_ADC_Start+0xa6>
 8000fd6:	4a1a      	ldr	r2, [pc, #104]	; (8001040 <HAL_ADC_Start+0xfc>)
 8000fd8:	6892      	ldr	r2, [r2, #8]
 8000fda:	f002 021f 	and.w	r2, r2, #31
 8000fde:	2a09      	cmp	r2, #9
 8000fe0:	d003      	beq.n	8000fea <HAL_ADC_Start+0xa6>
 8000fe2:	6822      	ldr	r2, [r4, #0]
 8000fe4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000fe8:	d128      	bne.n	800103c <HAL_ADC_Start+0xf8>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000fea:	6821      	ldr	r1, [r4, #0]
 8000fec:	688a      	ldr	r2, [r1, #8]
 8000fee:	f042 0204 	orr.w	r2, r2, #4
 8000ff2:	608a      	str	r2, [r1, #8]
 8000ff4:	e022      	b.n	800103c <HAL_ADC_Start+0xf8>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ff6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000ff8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000ffc:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ffe:	6822      	ldr	r2, [r4, #0]
 8001000:	68d2      	ldr	r2, [r2, #12]
 8001002:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001006:	d0cd      	beq.n	8000fa4 <HAL_ADC_Start+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001008:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800100a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800100e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001012:	6462      	str	r2, [r4, #68]	; 0x44
 8001014:	e7c6      	b.n	8000fa4 <HAL_ADC_Start+0x60>
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001016:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800101a:	68d2      	ldr	r2, [r2, #12]
 800101c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001020:	d0c0      	beq.n	8000fa4 <HAL_ADC_Start+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001022:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001024:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001028:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800102c:	6462      	str	r2, [r4, #68]	; 0x44
 800102e:	e7b9      	b.n	8000fa4 <HAL_ADC_Start+0x60>
        ADC_CLEAR_ERRORCODE(hadc);
 8001030:	2200      	movs	r2, #0
 8001032:	64a2      	str	r2, [r4, #72]	; 0x48
 8001034:	e7be      	b.n	8000fb4 <HAL_ADC_Start+0x70>
      __HAL_UNLOCK(hadc);
 8001036:	2200      	movs	r2, #0
 8001038:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
}
 800103c:	4618      	mov	r0, r3
 800103e:	bd10      	pop	{r4, pc}
 8001040:	50000300 	.word	0x50000300
 8001044:	50000100 	.word	0x50000100

08001048 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001048:	6803      	ldr	r3, [r0, #0]
 800104a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800104c:	4770      	bx	lr
	...

08001050 <HAL_ADC_ConfigChannel>:
{
 8001050:	b470      	push	{r4, r5, r6}
 8001052:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8001054:	2200      	movs	r2, #0
 8001056:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hadc);
 8001058:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800105c:	2a01      	cmp	r2, #1
 800105e:	f000 81ad 	beq.w	80013bc <HAL_ADC_ConfigChannel+0x36c>
 8001062:	4603      	mov	r3, r0
 8001064:	2201      	movs	r2, #1
 8001066:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800106a:	6800      	ldr	r0, [r0, #0]
 800106c:	6882      	ldr	r2, [r0, #8]
 800106e:	f012 0f04 	tst.w	r2, #4
 8001072:	f040 8196 	bne.w	80013a2 <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank < 5U)
 8001076:	684a      	ldr	r2, [r1, #4]
 8001078:	2a04      	cmp	r2, #4
 800107a:	d831      	bhi.n	80010e0 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 800107c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800107e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001082:	0055      	lsls	r5, r2, #1
 8001084:	221f      	movs	r2, #31
 8001086:	40aa      	lsls	r2, r5
 8001088:	ea24 0202 	bic.w	r2, r4, r2
 800108c:	680c      	ldr	r4, [r1, #0]
 800108e:	40ac      	lsls	r4, r5
 8001090:	4322      	orrs	r2, r4
 8001092:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	6882      	ldr	r2, [r0, #8]
 8001098:	f012 0f0c 	tst.w	r2, #12
 800109c:	d168      	bne.n	8001170 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800109e:	680a      	ldr	r2, [r1, #0]
 80010a0:	2a09      	cmp	r2, #9
 80010a2:	d94e      	bls.n	8001142 <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010a4:	6984      	ldr	r4, [r0, #24]
 80010a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80010aa:	3a1e      	subs	r2, #30
 80010ac:	2507      	movs	r5, #7
 80010ae:	4095      	lsls	r5, r2
 80010b0:	ea24 0405 	bic.w	r4, r4, r5
 80010b4:	688d      	ldr	r5, [r1, #8]
 80010b6:	fa05 f202 	lsl.w	r2, r5, r2
 80010ba:	4322      	orrs	r2, r4
 80010bc:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80010be:	6948      	ldr	r0, [r1, #20]
 80010c0:	681c      	ldr	r4, [r3, #0]
 80010c2:	68e2      	ldr	r2, [r4, #12]
 80010c4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80010c8:	0052      	lsls	r2, r2, #1
 80010ca:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 80010ce:	6908      	ldr	r0, [r1, #16]
 80010d0:	3801      	subs	r0, #1
 80010d2:	2803      	cmp	r0, #3
 80010d4:	f200 808f 	bhi.w	80011f6 <HAL_ADC_ConfigChannel+0x1a6>
 80010d8:	e8df f000 	tbb	[pc, r0]
 80010dc:	82776c40 	.word	0x82776c40
    else if (sConfig->Rank < 10U)
 80010e0:	2a09      	cmp	r2, #9
 80010e2:	d80e      	bhi.n	8001102 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 80010e4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80010e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80010ea:	0055      	lsls	r5, r2, #1
 80010ec:	3d1e      	subs	r5, #30
 80010ee:	221f      	movs	r2, #31
 80010f0:	40aa      	lsls	r2, r5
 80010f2:	ea24 0202 	bic.w	r2, r4, r2
 80010f6:	680c      	ldr	r4, [r1, #0]
 80010f8:	fa04 f505 	lsl.w	r5, r4, r5
 80010fc:	432a      	orrs	r2, r5
 80010fe:	6342      	str	r2, [r0, #52]	; 0x34
 8001100:	e7c8      	b.n	8001094 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8001102:	2a0e      	cmp	r2, #14
 8001104:	d80e      	bhi.n	8001124 <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001106:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001108:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800110c:	0055      	lsls	r5, r2, #1
 800110e:	3d3c      	subs	r5, #60	; 0x3c
 8001110:	221f      	movs	r2, #31
 8001112:	40aa      	lsls	r2, r5
 8001114:	ea24 0202 	bic.w	r2, r4, r2
 8001118:	680c      	ldr	r4, [r1, #0]
 800111a:	fa04 f505 	lsl.w	r5, r4, r5
 800111e:	432a      	orrs	r2, r5
 8001120:	6382      	str	r2, [r0, #56]	; 0x38
 8001122:	e7b7      	b.n	8001094 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001124:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001126:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800112a:	0055      	lsls	r5, r2, #1
 800112c:	3d5a      	subs	r5, #90	; 0x5a
 800112e:	221f      	movs	r2, #31
 8001130:	40aa      	lsls	r2, r5
 8001132:	ea24 0202 	bic.w	r2, r4, r2
 8001136:	680c      	ldr	r4, [r1, #0]
 8001138:	fa04 f505 	lsl.w	r5, r4, r5
 800113c:	432a      	orrs	r2, r5
 800113e:	63c2      	str	r2, [r0, #60]	; 0x3c
 8001140:	e7a8      	b.n	8001094 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001142:	6944      	ldr	r4, [r0, #20]
 8001144:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001148:	2507      	movs	r5, #7
 800114a:	4095      	lsls	r5, r2
 800114c:	ea24 0405 	bic.w	r4, r4, r5
 8001150:	688d      	ldr	r5, [r1, #8]
 8001152:	fa05 f202 	lsl.w	r2, r5, r2
 8001156:	4322      	orrs	r2, r4
 8001158:	6142      	str	r2, [r0, #20]
 800115a:	e7b0      	b.n	80010be <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 800115c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800115e:	4d98      	ldr	r5, [pc, #608]	; (80013c0 <HAL_ADC_ConfigChannel+0x370>)
 8001160:	4005      	ands	r5, r0
 8001162:	6808      	ldr	r0, [r1, #0]
 8001164:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001168:	4315      	orrs	r5, r2
 800116a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800116e:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	6882      	ldr	r2, [r0, #8]
 8001174:	f002 0203 	and.w	r2, r2, #3
 8001178:	2a01      	cmp	r2, #1
 800117a:	d06f      	beq.n	800125c <HAL_ADC_ConfigChannel+0x20c>
 800117c:	2200      	movs	r2, #0
 800117e:	2a00      	cmp	r2, #0
 8001180:	f040 811a 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0x368>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001184:	68cc      	ldr	r4, [r1, #12]
 8001186:	2c01      	cmp	r4, #1
 8001188:	d070      	beq.n	800126c <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800118a:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 800118e:	680e      	ldr	r6, [r1, #0]
 8001190:	2501      	movs	r5, #1
 8001192:	40b5      	lsls	r5, r6
 8001194:	ea24 0405 	bic.w	r4, r4, r5
 8001198:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800119c:	6809      	ldr	r1, [r1, #0]
 800119e:	2910      	cmp	r1, #16
 80011a0:	f000 808d 	beq.w	80012be <HAL_ADC_ConfigChannel+0x26e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80011a4:	2911      	cmp	r1, #17
 80011a6:	f000 80af 	beq.w	8001308 <HAL_ADC_ConfigChannel+0x2b8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80011aa:	2912      	cmp	r1, #18
 80011ac:	f000 80b2 	beq.w	8001314 <HAL_ADC_ConfigChannel+0x2c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b0:	2000      	movs	r0, #0
 80011b2:	e0fb      	b.n	80013ac <HAL_ADC_ConfigChannel+0x35c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80011b4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80011b6:	4d82      	ldr	r5, [pc, #520]	; (80013c0 <HAL_ADC_ConfigChannel+0x370>)
 80011b8:	4005      	ands	r5, r0
 80011ba:	6808      	ldr	r0, [r1, #0]
 80011bc:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80011c0:	4315      	orrs	r5, r2
 80011c2:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80011c6:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 80011c8:	e7d2      	b.n	8001170 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80011ca:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80011cc:	4d7c      	ldr	r5, [pc, #496]	; (80013c0 <HAL_ADC_ConfigChannel+0x370>)
 80011ce:	4005      	ands	r5, r0
 80011d0:	6808      	ldr	r0, [r1, #0]
 80011d2:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80011d6:	4315      	orrs	r5, r2
 80011d8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80011dc:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 80011de:	e7c7      	b.n	8001170 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80011e0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80011e2:	4877      	ldr	r0, [pc, #476]	; (80013c0 <HAL_ADC_ConfigChannel+0x370>)
 80011e4:	4028      	ands	r0, r5
 80011e6:	680d      	ldr	r5, [r1, #0]
 80011e8:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 80011ec:	4302      	orrs	r2, r0
 80011ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011f2:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 80011f4:	e7bc      	b.n	8001170 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011f6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80011f8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80011fc:	6808      	ldr	r0, [r1, #0]
 80011fe:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8001202:	d01c      	beq.n	800123e <HAL_ADC_ConfigChannel+0x1ee>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001208:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800120c:	680c      	ldr	r4, [r1, #0]
 800120e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001212:	d019      	beq.n	8001248 <HAL_ADC_ConfigChannel+0x1f8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001218:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800121c:	680c      	ldr	r4, [r1, #0]
 800121e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001222:	d016      	beq.n	8001252 <HAL_ADC_ConfigChannel+0x202>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001228:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800122c:	680c      	ldr	r4, [r1, #0]
 800122e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001232:	d19d      	bne.n	8001170 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001234:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001236:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800123a:	66c2      	str	r2, [r0, #108]	; 0x6c
 800123c:	e798      	b.n	8001170 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800123e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001240:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001244:	6622      	str	r2, [r4, #96]	; 0x60
 8001246:	e7dd      	b.n	8001204 <HAL_ADC_ConfigChannel+0x1b4>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001248:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800124a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800124e:	6642      	str	r2, [r0, #100]	; 0x64
 8001250:	e7e0      	b.n	8001214 <HAL_ADC_ConfigChannel+0x1c4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001252:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001254:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001258:	6682      	str	r2, [r0, #104]	; 0x68
 800125a:	e7e3      	b.n	8001224 <HAL_ADC_ConfigChannel+0x1d4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800125c:	6802      	ldr	r2, [r0, #0]
 800125e:	f012 0f01 	tst.w	r2, #1
 8001262:	d101      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x218>
 8001264:	2200      	movs	r2, #0
 8001266:	e78a      	b.n	800117e <HAL_ADC_ConfigChannel+0x12e>
 8001268:	2201      	movs	r2, #1
 800126a:	e788      	b.n	800117e <HAL_ADC_ConfigChannel+0x12e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800126c:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8001270:	680e      	ldr	r6, [r1, #0]
 8001272:	2501      	movs	r5, #1
 8001274:	40b5      	lsls	r5, r6
 8001276:	432c      	orrs	r4, r5
 8001278:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800127c:	6808      	ldr	r0, [r1, #0]
 800127e:	2809      	cmp	r0, #9
 8001280:	d90e      	bls.n	80012a0 <HAL_ADC_ConfigChannel+0x250>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001282:	681e      	ldr	r6, [r3, #0]
 8001284:	69b4      	ldr	r4, [r6, #24]
 8001286:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800128a:	381b      	subs	r0, #27
 800128c:	2507      	movs	r5, #7
 800128e:	4085      	lsls	r5, r0
 8001290:	ea24 0405 	bic.w	r4, r4, r5
 8001294:	688d      	ldr	r5, [r1, #8]
 8001296:	fa05 f000 	lsl.w	r0, r5, r0
 800129a:	4320      	orrs	r0, r4
 800129c:	61b0      	str	r0, [r6, #24]
 800129e:	e77d      	b.n	800119c <HAL_ADC_ConfigChannel+0x14c>
        MODIFY_REG(hadc->Instance->SMPR1,
 80012a0:	681e      	ldr	r6, [r3, #0]
 80012a2:	6974      	ldr	r4, [r6, #20]
 80012a4:	3001      	adds	r0, #1
 80012a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80012aa:	2507      	movs	r5, #7
 80012ac:	4085      	lsls	r5, r0
 80012ae:	ea24 0405 	bic.w	r4, r4, r5
 80012b2:	688d      	ldr	r5, [r1, #8]
 80012b4:	fa05 f000 	lsl.w	r0, r5, r0
 80012b8:	4320      	orrs	r0, r4
 80012ba:	6170      	str	r0, [r6, #20]
 80012bc:	e76e      	b.n	800119c <HAL_ADC_ConfigChannel+0x14c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80012be:	4841      	ldr	r0, [pc, #260]	; (80013c4 <HAL_ADC_ConfigChannel+0x374>)
 80012c0:	6880      	ldr	r0, [r0, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012c2:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80012c6:	f47f af6d 	bne.w	80011a4 <HAL_ADC_ConfigChannel+0x154>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012ca:	681c      	ldr	r4, [r3, #0]
 80012cc:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80012d0:	d027      	beq.n	8001322 <HAL_ADC_ConfigChannel+0x2d2>
 80012d2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012d6:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012d8:	68a0      	ldr	r0, [r4, #8]
 80012da:	f000 0003 	and.w	r0, r0, #3
 80012de:	2801      	cmp	r0, #1
 80012e0:	d022      	beq.n	8001328 <HAL_ADC_ConfigChannel+0x2d8>
 80012e2:	2a00      	cmp	r2, #0
 80012e4:	d157      	bne.n	8001396 <HAL_ADC_ConfigChannel+0x346>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012e6:	9d01      	ldr	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012e8:	b135      	cbz	r5, 80012f8 <HAL_ADC_ConfigChannel+0x2a8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012ea:	68a8      	ldr	r0, [r5, #8]
 80012ec:	f000 0003 	and.w	r0, r0, #3
 80012f0:	2801      	cmp	r0, #1
 80012f2:	d01f      	beq.n	8001334 <HAL_ADC_ConfigChannel+0x2e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012f4:	2a00      	cmp	r2, #0
 80012f6:	d14e      	bne.n	8001396 <HAL_ADC_ConfigChannel+0x346>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012f8:	2910      	cmp	r1, #16
 80012fa:	d021      	beq.n	8001340 <HAL_ADC_ConfigChannel+0x2f0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80012fc:	2911      	cmp	r1, #17
 80012fe:	d039      	beq.n	8001374 <HAL_ADC_ConfigChannel+0x324>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001300:	2912      	cmp	r1, #18
 8001302:	d041      	beq.n	8001388 <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001304:	2000      	movs	r0, #0
 8001306:	e051      	b.n	80013ac <HAL_ADC_ConfigChannel+0x35c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001308:	482e      	ldr	r0, [pc, #184]	; (80013c4 <HAL_ADC_ConfigChannel+0x374>)
 800130a:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800130c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8001310:	d0db      	beq.n	80012ca <HAL_ADC_ConfigChannel+0x27a>
 8001312:	e74a      	b.n	80011aa <HAL_ADC_ConfigChannel+0x15a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001314:	482b      	ldr	r0, [pc, #172]	; (80013c4 <HAL_ADC_ConfigChannel+0x374>)
 8001316:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001318:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800131c:	d0d5      	beq.n	80012ca <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800131e:	2000      	movs	r0, #0
 8001320:	e044      	b.n	80013ac <HAL_ADC_ConfigChannel+0x35c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001322:	4829      	ldr	r0, [pc, #164]	; (80013c8 <HAL_ADC_ConfigChannel+0x378>)
 8001324:	9001      	str	r0, [sp, #4]
 8001326:	e7d7      	b.n	80012d8 <HAL_ADC_ConfigChannel+0x288>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001328:	6820      	ldr	r0, [r4, #0]
 800132a:	f010 0f01 	tst.w	r0, #1
 800132e:	d0d8      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0x292>
 8001330:	2201      	movs	r2, #1
 8001332:	e7d6      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x292>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001334:	6828      	ldr	r0, [r5, #0]
 8001336:	f010 0f01 	tst.w	r0, #1
 800133a:	d0db      	beq.n	80012f4 <HAL_ADC_ConfigChannel+0x2a4>
 800133c:	2201      	movs	r2, #1
 800133e:	e7d9      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001340:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001344:	d1da      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x2ac>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001346:	491f      	ldr	r1, [pc, #124]	; (80013c4 <HAL_ADC_ConfigChannel+0x374>)
 8001348:	688a      	ldr	r2, [r1, #8]
 800134a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800134e:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001350:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <HAL_ADC_ConfigChannel+0x37c>)
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	491e      	ldr	r1, [pc, #120]	; (80013d0 <HAL_ADC_ConfigChannel+0x380>)
 8001356:	fbb2 f1f1 	udiv	r1, r2, r1
 800135a:	220a      	movs	r2, #10
 800135c:	fb02 f201 	mul.w	r2, r2, r1
 8001360:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8001362:	e002      	b.n	800136a <HAL_ADC_ConfigChannel+0x31a>
            wait_loop_index--;
 8001364:	9a00      	ldr	r2, [sp, #0]
 8001366:	3a01      	subs	r2, #1
 8001368:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 800136a:	9a00      	ldr	r2, [sp, #0]
 800136c:	2a00      	cmp	r2, #0
 800136e:	d1f9      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x314>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001370:	2000      	movs	r0, #0
 8001372:	e01b      	b.n	80013ac <HAL_ADC_ConfigChannel+0x35c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001374:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001378:	d1c2      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x2b0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800137a:	4912      	ldr	r1, [pc, #72]	; (80013c4 <HAL_ADC_ConfigChannel+0x374>)
 800137c:	688a      	ldr	r2, [r1, #8]
 800137e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001382:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001384:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001386:	e011      	b.n	80013ac <HAL_ADC_ConfigChannel+0x35c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001388:	490e      	ldr	r1, [pc, #56]	; (80013c4 <HAL_ADC_ConfigChannel+0x374>)
 800138a:	688a      	ldr	r2, [r1, #8]
 800138c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001390:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001392:	2000      	movs	r0, #0
 8001394:	e00a      	b.n	80013ac <HAL_ADC_ConfigChannel+0x35c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001396:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001398:	f042 0220 	orr.w	r2, r2, #32
 800139c:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 800139e:	2001      	movs	r0, #1
 80013a0:	e004      	b.n	80013ac <HAL_ADC_ConfigChannel+0x35c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013a4:	f042 0220 	orr.w	r2, r2, #32
 80013a8:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80013aa:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80013b2:	b017      	add	sp, #92	; 0x5c
 80013b4:	bc70      	pop	{r4, r5, r6}
 80013b6:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b8:	2000      	movs	r0, #0
 80013ba:	e7f7      	b.n	80013ac <HAL_ADC_ConfigChannel+0x35c>
  __HAL_LOCK(hadc);
 80013bc:	2002      	movs	r0, #2
 80013be:	e7f8      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x362>
 80013c0:	83fff000 	.word	0x83fff000
 80013c4:	50000300 	.word	0x50000300
 80013c8:	50000100 	.word	0x50000100
 80013cc:	20000000 	.word	0x20000000
 80013d0:	000f4240 	.word	0x000f4240

080013d4 <HAL_ADCEx_MultiModeConfigChannel>:
{
 80013d4:	b470      	push	{r4, r5, r6}
 80013d6:	b097      	sub	sp, #92	; 0x5c
 80013d8:	4603      	mov	r3, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013da:	6802      	ldr	r2, [r0, #0]
 80013dc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80013e0:	d040      	beq.n	8001464 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80013e2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80013e6:	9001      	str	r0, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80013e8:	9801      	ldr	r0, [sp, #4]
 80013ea:	2800      	cmp	r0, #0
 80013ec:	f000 8088 	beq.w	8001500 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
  __HAL_LOCK(hadc);
 80013f0:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
 80013f4:	2c01      	cmp	r4, #1
 80013f6:	f000 8085 	beq.w	8001504 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 80013fa:	2401      	movs	r4, #1
 80013fc:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001400:	6892      	ldr	r2, [r2, #8]
 8001402:	f012 0f04 	tst.w	r2, #4
 8001406:	d168      	bne.n	80014da <HAL_ADCEx_MultiModeConfigChannel+0x106>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001408:	6882      	ldr	r2, [r0, #8]
 800140a:	f012 0f04 	tst.w	r2, #4
 800140e:	d164      	bne.n	80014da <HAL_ADCEx_MultiModeConfigChannel+0x106>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001410:	680a      	ldr	r2, [r1, #0]
 8001412:	2a00      	cmp	r2, #0
 8001414:	d037      	beq.n	8001486 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001416:	4d3c      	ldr	r5, [pc, #240]	; (8001508 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8001418:	68aa      	ldr	r2, [r5, #8]
 800141a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800141e:	684c      	ldr	r4, [r1, #4]
 8001420:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8001422:	ea44 3446 	orr.w	r4, r4, r6, lsl #13
 8001426:	4322      	orrs	r2, r4
 8001428:	60aa      	str	r2, [r5, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800142a:	681c      	ldr	r4, [r3, #0]
 800142c:	68a2      	ldr	r2, [r4, #8]
 800142e:	f002 0203 	and.w	r2, r2, #3
 8001432:	2a01      	cmp	r2, #1
 8001434:	d019      	beq.n	800146a <HAL_ADCEx_MultiModeConfigChannel+0x96>
 8001436:	2200      	movs	r2, #0
 8001438:	2a00      	cmp	r2, #0
 800143a:	d159      	bne.n	80014f0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800143c:	6884      	ldr	r4, [r0, #8]
 800143e:	f004 0403 	and.w	r4, r4, #3
 8001442:	2c01      	cmp	r4, #1
 8001444:	d019      	beq.n	800147a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001446:	2a00      	cmp	r2, #0
 8001448:	d154      	bne.n	80014f4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800144a:	4c2f      	ldr	r4, [pc, #188]	; (8001508 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800144c:	68a2      	ldr	r2, [r4, #8]
 800144e:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001452:	f022 020f 	bic.w	r2, r2, #15
 8001456:	6808      	ldr	r0, [r1, #0]
 8001458:	6889      	ldr	r1, [r1, #8]
 800145a:	4301      	orrs	r1, r0
 800145c:	430a      	orrs	r2, r1
 800145e:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001460:	2000      	movs	r0, #0
 8001462:	e03f      	b.n	80014e4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001464:	4829      	ldr	r0, [pc, #164]	; (800150c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001466:	9001      	str	r0, [sp, #4]
 8001468:	e7be      	b.n	80013e8 <HAL_ADCEx_MultiModeConfigChannel+0x14>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800146a:	6822      	ldr	r2, [r4, #0]
 800146c:	f012 0f01 	tst.w	r2, #1
 8001470:	d101      	bne.n	8001476 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8001472:	2200      	movs	r2, #0
 8001474:	e7e0      	b.n	8001438 <HAL_ADCEx_MultiModeConfigChannel+0x64>
 8001476:	2201      	movs	r2, #1
 8001478:	e7de      	b.n	8001438 <HAL_ADCEx_MultiModeConfigChannel+0x64>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800147a:	6800      	ldr	r0, [r0, #0]
 800147c:	f010 0f01 	tst.w	r0, #1
 8001480:	d0e1      	beq.n	8001446 <HAL_ADCEx_MultiModeConfigChannel+0x72>
 8001482:	2201      	movs	r2, #1
 8001484:	e7df      	b.n	8001446 <HAL_ADCEx_MultiModeConfigChannel+0x72>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001486:	4920      	ldr	r1, [pc, #128]	; (8001508 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8001488:	688a      	ldr	r2, [r1, #8]
 800148a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800148e:	608a      	str	r2, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	688a      	ldr	r2, [r1, #8]
 8001494:	f002 0203 	and.w	r2, r2, #3
 8001498:	2a01      	cmp	r2, #1
 800149a:	d010      	beq.n	80014be <HAL_ADCEx_MultiModeConfigChannel+0xea>
 800149c:	2200      	movs	r2, #0
 800149e:	bb5a      	cbnz	r2, 80014f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014a0:	6881      	ldr	r1, [r0, #8]
 80014a2:	f001 0103 	and.w	r1, r1, #3
 80014a6:	2901      	cmp	r1, #1
 80014a8:	d011      	beq.n	80014ce <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014aa:	bb3a      	cbnz	r2, 80014fc <HAL_ADCEx_MultiModeConfigChannel+0x128>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80014ac:	4916      	ldr	r1, [pc, #88]	; (8001508 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80014ae:	688a      	ldr	r2, [r1, #8]
 80014b0:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80014b4:	f022 020f 	bic.w	r2, r2, #15
 80014b8:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ba:	2000      	movs	r0, #0
 80014bc:	e012      	b.n	80014e4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014be:	680a      	ldr	r2, [r1, #0]
 80014c0:	f012 0f01 	tst.w	r2, #1
 80014c4:	d101      	bne.n	80014ca <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80014c6:	2200      	movs	r2, #0
 80014c8:	e7e9      	b.n	800149e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80014ca:	2201      	movs	r2, #1
 80014cc:	e7e7      	b.n	800149e <HAL_ADCEx_MultiModeConfigChannel+0xca>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014ce:	6801      	ldr	r1, [r0, #0]
 80014d0:	f011 0f01 	tst.w	r1, #1
 80014d4:	d0e9      	beq.n	80014aa <HAL_ADCEx_MultiModeConfigChannel+0xd6>
 80014d6:	2201      	movs	r2, #1
 80014d8:	e7e7      	b.n	80014aa <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014dc:	f042 0220 	orr.w	r2, r2, #32
 80014e0:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80014e2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 80014ea:	b017      	add	sp, #92	; 0x5c
 80014ec:	bc70      	pop	{r4, r5, r6}
 80014ee:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f0:	2000      	movs	r0, #0
 80014f2:	e7f7      	b.n	80014e4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 80014f4:	2000      	movs	r0, #0
 80014f6:	e7f5      	b.n	80014e4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 80014f8:	2000      	movs	r0, #0
 80014fa:	e7f3      	b.n	80014e4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 80014fc:	2000      	movs	r0, #0
 80014fe:	e7f1      	b.n	80014e4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    return HAL_ERROR;
 8001500:	2001      	movs	r0, #1
 8001502:	e7f2      	b.n	80014ea <HAL_ADCEx_MultiModeConfigChannel+0x116>
  __HAL_LOCK(hadc);
 8001504:	2002      	movs	r0, #2
 8001506:	e7f0      	b.n	80014ea <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001508:	50000300 	.word	0x50000300
 800150c:	50000100 	.word	0x50000100

08001510 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001512:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001514:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001518:	041b      	lsls	r3, r3, #16
 800151a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800151c:	0200      	lsls	r0, r0, #8
 800151e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001522:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001524:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001528:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800152c:	60d0      	str	r0, [r2, #12]
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_NVIC_SetPriority+0x5c>)
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800153e:	f1c3 0407 	rsb	r4, r3, #7
 8001542:	2c04      	cmp	r4, #4
 8001544:	bf28      	it	cs
 8001546:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001548:	1d1d      	adds	r5, r3, #4
 800154a:	2d06      	cmp	r5, #6
 800154c:	d917      	bls.n	800157e <HAL_NVIC_SetPriority+0x4a>
 800154e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	2501      	movs	r5, #1
 8001552:	fa05 f404 	lsl.w	r4, r5, r4
 8001556:	3c01      	subs	r4, #1
 8001558:	4021      	ands	r1, r4
 800155a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	fa05 f303 	lsl.w	r3, r5, r3
 8001560:	3b01      	subs	r3, #1
 8001562:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8001566:	2800      	cmp	r0, #0
 8001568:	db0b      	blt.n	8001582 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	0109      	lsls	r1, r1, #4
 800156c:	b2c9      	uxtb	r1, r1
 800156e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001572:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001576:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800157a:	bc30      	pop	{r4, r5}
 800157c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	2300      	movs	r3, #0
 8001580:	e7e6      	b.n	8001550 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	f000 000f 	and.w	r0, r0, #15
 8001586:	0109      	lsls	r1, r1, #4
 8001588:	b2c9      	uxtb	r1, r1
 800158a:	4b02      	ldr	r3, [pc, #8]	; (8001594 <HAL_NVIC_SetPriority+0x60>)
 800158c:	5419      	strb	r1, [r3, r0]
 800158e:	e7f4      	b.n	800157a <HAL_NVIC_SetPriority+0x46>
 8001590:	e000ed00 	.word	0xe000ed00
 8001594:	e000ed14 	.word	0xe000ed14

08001598 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001598:	0942      	lsrs	r2, r0, #5
 800159a:	f000 001f 	and.w	r0, r0, #31
 800159e:	2301      	movs	r3, #1
 80015a0:	fa03 f000 	lsl.w	r0, r3, r0
 80015a4:	4b01      	ldr	r3, [pc, #4]	; (80015ac <HAL_NVIC_EnableIRQ+0x14>)
 80015a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80015aa:	4770      	bx	lr
 80015ac:	e000e100 	.word	0xe000e100

080015b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	3801      	subs	r0, #1
 80015b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015b6:	d20a      	bcs.n	80015ce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_SYSTICK_Config+0x24>)
 80015ba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	21f0      	movs	r1, #240	; 0xf0
 80015be:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <HAL_SYSTICK_Config+0x28>)
 80015c0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c4:	2000      	movs	r0, #0
 80015c6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c8:	2207      	movs	r2, #7
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015ce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80015dc:	2804      	cmp	r0, #4
 80015de:	d005      	beq.n	80015ec <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80015e0:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80015e2:	6813      	ldr	r3, [r2, #0]
 80015e4:	f023 0304 	bic.w	r3, r3, #4
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80015ec:	4a02      	ldr	r2, [pc, #8]	; (80015f8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80015ee:	6813      	ldr	r3, [r2, #0]
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	4770      	bx	lr
 80015f8:	e000e010 	.word	0xe000e010

080015fc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80015fc:	4770      	bx	lr

080015fe <HAL_SYSTICK_IRQHandler>:
{
 80015fe:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001600:	f7ff fffc 	bl	80015fc <HAL_SYSTICK_Callback>
 8001604:	bd08      	pop	{r3, pc}

08001606 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001606:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001608:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800160c:	2b02      	cmp	r3, #2
 800160e:	d003      	beq.n	8001618 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001610:	2304      	movs	r3, #4
 8001612:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001614:	2001      	movs	r0, #1
 8001616:	bd08      	pop	{r3, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001618:	6802      	ldr	r2, [r0, #0]
 800161a:	6813      	ldr	r3, [r2, #0]
 800161c:	f023 030e 	bic.w	r3, r3, #14
 8001620:	6013      	str	r3, [r2, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001622:	6802      	ldr	r2, [r0, #0]
 8001624:	6813      	ldr	r3, [r2, #0]
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	6013      	str	r3, [r2, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800162c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800162e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001630:	2201      	movs	r2, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	604b      	str	r3, [r1, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001638:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163c:	2300      	movs	r3, #0
 800163e:	f880 3020 	strb.w	r3, [r0, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001642:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001644:	b113      	cbz	r3, 800164c <HAL_DMA_Abort_IT+0x46>
    {
      hdma->XferAbortCallback(hdma);
 8001646:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001648:	2000      	movs	r0, #0
 800164a:	bd08      	pop	{r3, pc}
 800164c:	2000      	movs	r0, #0
    } 
  }
  return status;
}
 800164e:	bd08      	pop	{r3, pc}

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001652:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8001654:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001656:	e088      	b.n	800176a <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001658:	08de      	lsrs	r6, r3, #3
 800165a:	3608      	adds	r6, #8
 800165c:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001660:	f003 0e07 	and.w	lr, r3, #7
 8001664:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001668:	270f      	movs	r7, #15
 800166a:	fa07 f70e 	lsl.w	r7, r7, lr
 800166e:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001672:	690f      	ldr	r7, [r1, #16]
 8001674:	fa07 f70e 	lsl.w	r7, r7, lr
 8001678:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 800167a:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 800167e:	e083      	b.n	8001788 <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001680:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001682:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001684:	68cf      	ldr	r7, [r1, #12]
 8001686:	fa07 f70e 	lsl.w	r7, r7, lr
 800168a:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800168c:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800168e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001690:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001694:	684e      	ldr	r6, [r1, #4]
 8001696:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800169a:	409e      	lsls	r6, r3
 800169c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800169e:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016a0:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016a2:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a4:	688d      	ldr	r5, [r1, #8]
 80016a6:	fa05 f50e 	lsl.w	r5, r5, lr
 80016aa:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80016ac:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ae:	684c      	ldr	r4, [r1, #4]
 80016b0:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80016b4:	d058      	beq.n	8001768 <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b6:	4c47      	ldr	r4, [pc, #284]	; (80017d4 <HAL_GPIO_Init+0x184>)
 80016b8:	69a5      	ldr	r5, [r4, #24]
 80016ba:	f045 0501 	orr.w	r5, r5, #1
 80016be:	61a5      	str	r5, [r4, #24]
 80016c0:	69a4      	ldr	r4, [r4, #24]
 80016c2:	f004 0401 	and.w	r4, r4, #1
 80016c6:	9401      	str	r4, [sp, #4]
 80016c8:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 80016ca:	089d      	lsrs	r5, r3, #2
 80016cc:	1cae      	adds	r6, r5, #2
 80016ce:	4c42      	ldr	r4, [pc, #264]	; (80017d8 <HAL_GPIO_Init+0x188>)
 80016d0:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80016d4:	f003 0603 	and.w	r6, r3, #3
 80016d8:	00b6      	lsls	r6, r6, #2
 80016da:	270f      	movs	r7, #15
 80016dc:	40b7      	lsls	r7, r6
 80016de:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016e2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80016e6:	d06c      	beq.n	80017c2 <HAL_GPIO_Init+0x172>
 80016e8:	4f3c      	ldr	r7, [pc, #240]	; (80017dc <HAL_GPIO_Init+0x18c>)
 80016ea:	42b8      	cmp	r0, r7
 80016ec:	d06b      	beq.n	80017c6 <HAL_GPIO_Init+0x176>
 80016ee:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80016f2:	42b8      	cmp	r0, r7
 80016f4:	d069      	beq.n	80017ca <HAL_GPIO_Init+0x17a>
 80016f6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80016fa:	42b8      	cmp	r0, r7
 80016fc:	d05f      	beq.n	80017be <HAL_GPIO_Init+0x16e>
 80016fe:	2705      	movs	r7, #5
 8001700:	fa07 f606 	lsl.w	r6, r7, r6
 8001704:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001706:	3502      	adds	r5, #2
 8001708:	4e33      	ldr	r6, [pc, #204]	; (80017d8 <HAL_GPIO_Init+0x188>)
 800170a:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170e:	4c34      	ldr	r4, [pc, #208]	; (80017e0 <HAL_GPIO_Init+0x190>)
 8001710:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001712:	43d4      	mvns	r4, r2
 8001714:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001718:	684f      	ldr	r7, [r1, #4]
 800171a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800171e:	d001      	beq.n	8001724 <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8001720:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001724:	4d2e      	ldr	r5, [pc, #184]	; (80017e0 <HAL_GPIO_Init+0x190>)
 8001726:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001728:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 800172a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800172e:	684f      	ldr	r7, [r1, #4]
 8001730:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001734:	d001      	beq.n	800173a <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 8001736:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 800173a:	4d29      	ldr	r5, [pc, #164]	; (80017e0 <HAL_GPIO_Init+0x190>)
 800173c:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173e:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8001740:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001744:	684f      	ldr	r7, [r1, #4]
 8001746:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800174a:	d001      	beq.n	8001750 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 800174c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8001750:	4d23      	ldr	r5, [pc, #140]	; (80017e0 <HAL_GPIO_Init+0x190>)
 8001752:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001754:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8001756:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001758:	684e      	ldr	r6, [r1, #4]
 800175a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800175e:	d001      	beq.n	8001764 <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 8001760:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8001764:	4a1e      	ldr	r2, [pc, #120]	; (80017e0 <HAL_GPIO_Init+0x190>)
 8001766:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8001768:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 800176a:	680a      	ldr	r2, [r1, #0]
 800176c:	fa32 f403 	lsrs.w	r4, r2, r3
 8001770:	d02d      	beq.n	80017ce <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001772:	2501      	movs	r5, #1
 8001774:	409d      	lsls	r5, r3
    if(iocurrent)
 8001776:	402a      	ands	r2, r5
 8001778:	d0f6      	beq.n	8001768 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800177a:	684c      	ldr	r4, [r1, #4]
 800177c:	2c02      	cmp	r4, #2
 800177e:	f43f af6b 	beq.w	8001658 <HAL_GPIO_Init+0x8>
 8001782:	2c12      	cmp	r4, #18
 8001784:	f43f af68 	beq.w	8001658 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8001788:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800178a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800178e:	2403      	movs	r4, #3
 8001790:	fa04 f40e 	lsl.w	r4, r4, lr
 8001794:	43e4      	mvns	r4, r4
 8001796:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001798:	684f      	ldr	r7, [r1, #4]
 800179a:	f007 0703 	and.w	r7, r7, #3
 800179e:	fa07 f70e 	lsl.w	r7, r7, lr
 80017a2:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80017a4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a6:	684e      	ldr	r6, [r1, #4]
 80017a8:	1e77      	subs	r7, r6, #1
 80017aa:	2f01      	cmp	r7, #1
 80017ac:	f67f af68 	bls.w	8001680 <HAL_GPIO_Init+0x30>
 80017b0:	2e11      	cmp	r6, #17
 80017b2:	f43f af65 	beq.w	8001680 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b6:	2e12      	cmp	r6, #18
 80017b8:	f47f af72 	bne.w	80016a0 <HAL_GPIO_Init+0x50>
 80017bc:	e760      	b.n	8001680 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017be:	2703      	movs	r7, #3
 80017c0:	e79e      	b.n	8001700 <HAL_GPIO_Init+0xb0>
 80017c2:	2700      	movs	r7, #0
 80017c4:	e79c      	b.n	8001700 <HAL_GPIO_Init+0xb0>
 80017c6:	2701      	movs	r7, #1
 80017c8:	e79a      	b.n	8001700 <HAL_GPIO_Init+0xb0>
 80017ca:	2702      	movs	r7, #2
 80017cc:	e798      	b.n	8001700 <HAL_GPIO_Init+0xb0>
  }
}
 80017ce:	b003      	add	sp, #12
 80017d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010000 	.word	0x40010000
 80017dc:	48000400 	.word	0x48000400
 80017e0:	40010400 	.word	0x40010400

080017e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e4:	b90a      	cbnz	r2, 80017ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017e6:	6281      	str	r1, [r0, #40]	; 0x28
 80017e8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ea:	6181      	str	r1, [r0, #24]
 80017ec:	4770      	bx	lr
	...

080017f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017f0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4203      	tst	r3, r0
 80017f8:	d100      	bne.n	80017fc <HAL_GPIO_EXTI_IRQHandler+0xc>
 80017fa:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80017fe:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001800:	f002 fb24 	bl	8003e4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001804:	e7f9      	b.n	80017fa <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001806:	bf00      	nop
 8001808:	40010400 	.word	0x40010400

0800180c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800180c:	6803      	ldr	r3, [r0, #0]
 800180e:	699a      	ldr	r2, [r3, #24]
 8001810:	f012 0f02 	tst.w	r2, #2
 8001814:	d001      	beq.n	800181a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001816:	2200      	movs	r2, #0
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800181a:	6803      	ldr	r3, [r0, #0]
 800181c:	699a      	ldr	r2, [r3, #24]
 800181e:	f012 0f01 	tst.w	r2, #1
 8001822:	d103      	bne.n	800182c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001824:	699a      	ldr	r2, [r3, #24]
 8001826:	f042 0201 	orr.w	r2, r2, #1
 800182a:	619a      	str	r2, [r3, #24]
 800182c:	4770      	bx	lr

0800182e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800182e:	b410      	push	{r4}
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001830:	f011 0f01 	tst.w	r1, #1
 8001834:	d009      	beq.n	800184a <I2C_Disable_IRQ+0x1c>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001836:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800183a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800183e:	2b28      	cmp	r3, #40	; 0x28
 8001840:	d001      	beq.n	8001846 <I2C_Disable_IRQ+0x18>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001842:	23f2      	movs	r3, #242	; 0xf2
 8001844:	e002      	b.n	800184c <I2C_Disable_IRQ+0x1e>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001846:	2342      	movs	r3, #66	; 0x42
 8001848:	e000      	b.n	800184c <I2C_Disable_IRQ+0x1e>
  uint32_t tmpisr = 0U;
 800184a:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800184c:	f011 0f02 	tst.w	r1, #2
 8001850:	d009      	beq.n	8001866 <I2C_Disable_IRQ+0x38>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001852:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001856:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800185a:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800185e:	2a28      	cmp	r2, #40	; 0x28
 8001860:	d019      	beq.n	8001896 <I2C_Disable_IRQ+0x68>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001862:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001866:	f011 0f04 	tst.w	r1, #4
 800186a:	d001      	beq.n	8001870 <I2C_Disable_IRQ+0x42>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800186c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001870:	f001 0211 	and.w	r2, r1, #17
 8001874:	2a11      	cmp	r2, #17
 8001876:	d010      	beq.n	800189a <I2C_Disable_IRQ+0x6c>
 8001878:	f001 0112 	and.w	r1, r1, #18
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800187c:	2912      	cmp	r1, #18
 800187e:	d00f      	beq.n	80018a0 <I2C_Disable_IRQ+0x72>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8001880:	2912      	cmp	r1, #18
 8001882:	d010      	beq.n	80018a6 <I2C_Disable_IRQ+0x78>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001884:	6801      	ldr	r1, [r0, #0]
 8001886:	680a      	ldr	r2, [r1, #0]
 8001888:	ea22 0303 	bic.w	r3, r2, r3
 800188c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
}
 800188e:	2000      	movs	r0, #0
 8001890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001894:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001896:	4623      	mov	r3, r4
 8001898:	e7e5      	b.n	8001866 <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800189a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800189e:	e7eb      	b.n	8001878 <I2C_Disable_IRQ+0x4a>
    tmpisr |= I2C_IT_STOPI;
 80018a0:	f043 0320 	orr.w	r3, r3, #32
 80018a4:	e7ec      	b.n	8001880 <I2C_Disable_IRQ+0x52>
    tmpisr |= I2C_IT_TCI;
 80018a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018aa:	e7eb      	b.n	8001884 <I2C_Disable_IRQ+0x56>

080018ac <HAL_I2C_Init>:
  if (hi2c == NULL)
 80018ac:	2800      	cmp	r0, #0
 80018ae:	d059      	beq.n	8001964 <HAL_I2C_Init+0xb8>
{
 80018b0:	b510      	push	{r4, lr}
 80018b2:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018b4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d043      	beq.n	8001944 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80018bc:	2324      	movs	r3, #36	; 0x24
 80018be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80018c2:	6822      	ldr	r2, [r4, #0]
 80018c4:	6813      	ldr	r3, [r2, #0]
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018cc:	6822      	ldr	r2, [r4, #0]
 80018ce:	6863      	ldr	r3, [r4, #4]
 80018d0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80018d4:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018d6:	6822      	ldr	r2, [r4, #0]
 80018d8:	6893      	ldr	r3, [r2, #8]
 80018da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80018de:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018e0:	68e3      	ldr	r3, [r4, #12]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d033      	beq.n	800194e <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018e6:	6822      	ldr	r2, [r4, #0]
 80018e8:	68a3      	ldr	r3, [r4, #8]
 80018ea:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80018ee:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018f0:	68e3      	ldr	r3, [r4, #12]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d031      	beq.n	800195a <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018f6:	6822      	ldr	r2, [r4, #0]
 80018f8:	6853      	ldr	r3, [r2, #4]
 80018fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001902:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001904:	6822      	ldr	r2, [r4, #0]
 8001906:	68d3      	ldr	r3, [r2, #12]
 8001908:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800190c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800190e:	6822      	ldr	r2, [r4, #0]
 8001910:	6923      	ldr	r3, [r4, #16]
 8001912:	6961      	ldr	r1, [r4, #20]
 8001914:	430b      	orrs	r3, r1
 8001916:	69a1      	ldr	r1, [r4, #24]
 8001918:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800191c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800191e:	6822      	ldr	r2, [r4, #0]
 8001920:	69e3      	ldr	r3, [r4, #28]
 8001922:	6a21      	ldr	r1, [r4, #32]
 8001924:	430b      	orrs	r3, r1
 8001926:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001928:	6822      	ldr	r2, [r4, #0]
 800192a:	6813      	ldr	r3, [r2, #0]
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001932:	2000      	movs	r0, #0
 8001934:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001936:	2320      	movs	r3, #32
 8001938:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800193c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800193e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001942:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001944:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001948:	f002 fd50 	bl	80043ec <HAL_I2C_MspInit>
 800194c:	e7b6      	b.n	80018bc <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800194e:	6822      	ldr	r2, [r4, #0]
 8001950:	68a3      	ldr	r3, [r4, #8]
 8001952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001956:	6093      	str	r3, [r2, #8]
 8001958:	e7ca      	b.n	80018f0 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	e7c8      	b.n	80018f6 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001964:	2001      	movs	r0, #1
 8001966:	4770      	bx	lr

08001968 <HAL_I2C_EV_IRQHandler>:
{
 8001968:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800196a:	6803      	ldr	r3, [r0, #0]
 800196c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800196e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8001970:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001972:	b103      	cbz	r3, 8001976 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8001974:	4798      	blx	r3
 8001976:	bd08      	pop	{r3, pc}

08001978 <HAL_I2C_SlaveTxCpltCallback>:
{
 8001978:	4770      	bx	lr

0800197a <HAL_I2C_SlaveRxCpltCallback>:
{
 800197a:	4770      	bx	lr

0800197c <I2C_ITSlaveSequentialCplt>:
{
 800197c:	b510      	push	{r4, lr}
 800197e:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001980:	2300      	movs	r3, #0
 8001982:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001986:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b29      	cmp	r3, #41	; 0x29
 800198e:	d005      	beq.n	800199c <I2C_ITSlaveSequentialCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001990:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b2a      	cmp	r3, #42	; 0x2a
 8001998:	d00f      	beq.n	80019ba <I2C_ITSlaveSequentialCplt+0x3e>
 800199a:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800199c:	2328      	movs	r3, #40	; 0x28
 800199e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80019a2:	2321      	movs	r3, #33	; 0x21
 80019a4:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80019a6:	2101      	movs	r1, #1
 80019a8:	f7ff ff41 	bl	800182e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80019ac:	2300      	movs	r3, #0
 80019ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff ffe0 	bl	8001978 <HAL_I2C_SlaveTxCpltCallback>
 80019b8:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80019ba:	2328      	movs	r3, #40	; 0x28
 80019bc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80019c0:	2322      	movs	r3, #34	; 0x22
 80019c2:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80019c4:	2102      	movs	r1, #2
 80019c6:	f7ff ff32 	bl	800182e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80019ca:	2300      	movs	r3, #0
 80019cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80019d0:	4620      	mov	r0, r4
 80019d2:	f7ff ffd2 	bl	800197a <HAL_I2C_SlaveRxCpltCallback>
}
 80019d6:	e7e0      	b.n	800199a <I2C_ITSlaveSequentialCplt+0x1e>

080019d8 <HAL_I2C_AddrCallback>:
{
 80019d8:	4770      	bx	lr

080019da <I2C_ITAddrCplt>:
{
 80019da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 80019dc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80019e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80019e4:	2b28      	cmp	r3, #40	; 0x28
 80019e6:	d006      	beq.n	80019f6 <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80019e8:	6803      	ldr	r3, [r0, #0]
 80019ea:	2208      	movs	r2, #8
 80019ec:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80019ee:	2300      	movs	r3, #0
 80019f0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80019f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019f6:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 80019f8:	6803      	ldr	r3, [r0, #0]
 80019fa:	699e      	ldr	r6, [r3, #24]
 80019fc:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	0c12      	lsrs	r2, r2, #16
 8001a04:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001a0e:	68df      	ldr	r7, [r3, #12]
 8001a10:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a14:	68c1      	ldr	r1, [r0, #12]
 8001a16:	2902      	cmp	r1, #2
 8001a18:	d121      	bne.n	8001a5e <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001a1a:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8001a1e:	f015 0f06 	tst.w	r5, #6
 8001a22:	d110      	bne.n	8001a46 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8001a24:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001a26:	3101      	adds	r1, #1
 8001a28:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001a2a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001a2c:	2902      	cmp	r1, #2
 8001a2e:	d1e1      	bne.n	80019f4 <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 8001a30:	2100      	movs	r1, #0
 8001a32:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a34:	2008      	movs	r0, #8
 8001a36:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8001a38:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a3c:	4631      	mov	r1, r6
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f7ff ffca 	bl	80019d8 <HAL_I2C_AddrCallback>
 8001a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a46:	2104      	movs	r1, #4
 8001a48:	f7ff fef1 	bl	800182e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a52:	463a      	mov	r2, r7
 8001a54:	4631      	mov	r1, r6
 8001a56:	4620      	mov	r0, r4
 8001a58:	f7ff ffbe 	bl	80019d8 <HAL_I2C_AddrCallback>
 8001a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a5e:	2104      	movs	r1, #4
 8001a60:	f7ff fee5 	bl	800182e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001a64:	2300      	movs	r3, #0
 8001a66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a6a:	462a      	mov	r2, r5
 8001a6c:	4631      	mov	r1, r6
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f7ff ffb2 	bl	80019d8 <HAL_I2C_AddrCallback>
 8001a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001a76 <HAL_I2C_ListenCpltCallback>:
{
 8001a76:	4770      	bx	lr

08001a78 <I2C_ITListenCplt>:
{
 8001a78:	b510      	push	{r4, lr}
 8001a7a:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <I2C_ITListenCplt+0x60>)
 8001a7e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001a84:	2220      	movs	r2, #32
 8001a86:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001a8e:	6343      	str	r3, [r0, #52]	; 0x34
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8001a90:	f011 0f04 	tst.w	r1, #4
 8001a94:	d012      	beq.n	8001abc <I2C_ITListenCplt+0x44>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001a96:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	6242      	str	r2, [r0, #36]	; 0x24
 8001a9c:	6802      	ldr	r2, [r0, #0]
 8001a9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aa0:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8001aa2:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8001aa4:	b153      	cbz	r3, 8001abc <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8001aaa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ab4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001abc:	2107      	movs	r1, #7
 8001abe:	4620      	mov	r0, r4
 8001ac0:	f7ff feb5 	bl	800182e <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8001aca:	2300      	movs	r3, #0
 8001acc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f7ff ffd0 	bl	8001a76 <HAL_I2C_ListenCpltCallback>
 8001ad6:	bd10      	pop	{r4, pc}
 8001ad8:	ffff0000 	.word	0xffff0000

08001adc <HAL_I2C_ErrorCallback>:
{
 8001adc:	4770      	bx	lr

08001ade <HAL_I2C_AbortCpltCallback>:
{
 8001ade:	4770      	bx	lr

08001ae0 <I2C_ITError>:
{
 8001ae0:	b510      	push	{r4, lr}
 8001ae2:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001aea:	4a3a      	ldr	r2, [pc, #232]	; (8001bd4 <I2C_ITError+0xf4>)
 8001aec:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001aee:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8001af0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001af2:	4319      	orrs	r1, r3
 8001af4:	6441      	str	r1, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8001af6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b28      	cmp	r3, #40	; 0x28
 8001afe:	d018      	beq.n	8001b32 <I2C_ITError+0x52>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001b00:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001b04:	b2db      	uxtb	r3, r3
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8001b06:	2b29      	cmp	r3, #41	; 0x29
 8001b08:	d013      	beq.n	8001b32 <I2C_ITError+0x52>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001b0a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001b0e:	b2db      	uxtb	r3, r3
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001b10:	2b2a      	cmp	r3, #42	; 0x2a
 8001b12:	d00e      	beq.n	8001b32 <I2C_ITError+0x52>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001b14:	2107      	movs	r1, #7
 8001b16:	f7ff fe8a 	bl	800182e <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001b1a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b60      	cmp	r3, #96	; 0x60
 8001b22:	d002      	beq.n	8001b2a <I2C_ITError+0x4a>
      hi2c->State         = HAL_I2C_STATE_READY;
 8001b24:	2320      	movs	r3, #32
 8001b26:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001b2e:	6363      	str	r3, [r4, #52]	; 0x34
 8001b30:	e00a      	b.n	8001b48 <I2C_ITError+0x68>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001b32:	2103      	movs	r1, #3
 8001b34:	4620      	mov	r0, r4
 8001b36:	f7ff fe7a 	bl	800182e <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b3a:	2328      	movs	r3, #40	; 0x28
 8001b3c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <I2C_ITError+0xf8>)
 8001b46:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8001b50:	d10f      	bne.n	8001b72 <I2C_ITError+0x92>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001b58:	d11e      	bne.n	8001b98 <I2C_ITError+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001b5a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b60      	cmp	r3, #96	; 0x60
 8001b62:	d02c      	beq.n	8001bbe <I2C_ITError+0xde>
    __HAL_UNLOCK(hi2c);
 8001b64:	2300      	movs	r3, #0
 8001b66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f7ff ffb6 	bl	8001adc <HAL_I2C_ErrorCallback>
 8001b70:	bd10      	pop	{r4, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b78:	601a      	str	r2, [r3, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001b7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b7c:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <I2C_ITError+0xfc>)
 8001b7e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8001b80:	2300      	movs	r3, #0
 8001b82:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001b86:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001b88:	f7ff fd3d 	bl	8001606 <HAL_DMA_Abort_IT>
 8001b8c:	2800      	cmp	r0, #0
 8001b8e:	d0ef      	beq.n	8001b70 <I2C_ITError+0x90>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001b90:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001b92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b94:	4798      	blx	r3
 8001b96:	bd10      	pop	{r4, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b9e:	601a      	str	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001ba0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <I2C_ITError+0xfc>)
 8001ba4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001bac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001bae:	f7ff fd2a 	bl	8001606 <HAL_DMA_Abort_IT>
 8001bb2:	2800      	cmp	r0, #0
 8001bb4:	d0dc      	beq.n	8001b70 <I2C_ITError+0x90>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001bb6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001bb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001bba:	4798      	blx	r3
 8001bbc:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001bbe:	2320      	movs	r3, #32
 8001bc0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001bca:	4620      	mov	r0, r4
 8001bcc:	f7ff ff87 	bl	8001ade <HAL_I2C_AbortCpltCallback>
 8001bd0:	bd10      	pop	{r4, pc}
 8001bd2:	bf00      	nop
 8001bd4:	ffff0000 	.word	0xffff0000
 8001bd8:	08001d09 	.word	0x08001d09
 8001bdc:	08001ec3 	.word	0x08001ec3

08001be0 <I2C_ITSlaveCplt>:
{
 8001be0:	b538      	push	{r3, r4, r5, lr}
 8001be2:	4604      	mov	r4, r0
 8001be4:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001be6:	6803      	ldr	r3, [r0, #0]
 8001be8:	2220      	movs	r2, #32
 8001bea:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bec:	6803      	ldr	r3, [r0, #0]
 8001bee:	2208      	movs	r2, #8
 8001bf0:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001bf2:	2107      	movs	r1, #7
 8001bf4:	f7ff fe1b 	bl	800182e <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001bf8:	6822      	ldr	r2, [r4, #0]
 8001bfa:	6853      	ldr	r3, [r2, #4]
 8001bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c00:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8001c02:	6822      	ldr	r2, [r4, #0]
 8001c04:	6853      	ldr	r3, [r2, #4]
 8001c06:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001c0a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001c0e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f7ff fdf7 	bl	800180c <I2C_Flush_TXDR>
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8001c1e:	6822      	ldr	r2, [r4, #0]
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001c26:	d103      	bne.n	8001c30 <I2C_ITSlaveCplt+0x50>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8001c28:	6813      	ldr	r3, [r2, #0]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8001c2a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001c2e:	d009      	beq.n	8001c44 <I2C_ITSlaveCplt+0x64>
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8001c30:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b21      	cmp	r3, #33	; 0x21
 8001c38:	d03a      	beq.n	8001cb0 <I2C_ITSlaveCplt+0xd0>
 8001c3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8001c44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	b11b      	cbz	r3, 8001c52 <I2C_ITSlaveCplt+0x72>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	6463      	str	r3, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8001c52:	f015 0f04 	tst.w	r5, #4
 8001c56:	d011      	beq.n	8001c7c <I2C_ITSlaveCplt+0x9c>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c5a:	1c59      	adds	r1, r3, #1
 8001c5c:	6261      	str	r1, [r4, #36]	; 0x24
 8001c5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c60:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8001c62:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c64:	b153      	cbz	r3, 8001c7c <I2C_ITSlaveCplt+0x9c>
      hi2c->XferSize--;
 8001c66:	3b01      	subs	r3, #1
 8001c68:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001c6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001c84:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c88:	b9bb      	cbnz	r3, 8001cba <I2C_ITSlaveCplt+0xda>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001c8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c90:	d121      	bne.n	8001cd6 <I2C_ITSlaveCplt+0xf6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c92:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b22      	cmp	r3, #34	; 0x22
 8001c9a:	d028      	beq.n	8001cee <I2C_ITSlaveCplt+0x10e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f7ff fe65 	bl	8001978 <HAL_I2C_SlaveTxCpltCallback>
 8001cae:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8001cb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	e7c3      	b.n	8001c42 <I2C_ITSlaveCplt+0x62>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001cba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	f7ff ff0f 	bl	8001ae0 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001cc2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b28      	cmp	r3, #40	; 0x28
 8001cca:	d1f0      	bne.n	8001cae <I2C_ITSlaveCplt+0xce>
      I2C_ITListenCplt(hi2c, ITFlags);
 8001ccc:	4629      	mov	r1, r5
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f7ff fed2 	bl	8001a78 <I2C_ITListenCplt>
 8001cd4:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <I2C_ITSlaveCplt+0x124>)
 8001cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	f7ff fec5 	bl	8001a76 <HAL_I2C_ListenCpltCallback>
 8001cec:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001cee:	2320      	movs	r3, #32
 8001cf0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7ff fe3d 	bl	800197a <HAL_I2C_SlaveRxCpltCallback>
 8001d00:	bd38      	pop	{r3, r4, r5, pc}
 8001d02:	bf00      	nop
 8001d04:	ffff0000 	.word	0xffff0000

08001d08 <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 8001d08:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	f000 80a0 	beq.w	8001e52 <I2C_Slave_ISR_IT+0x14a>
{
 8001d12:	b570      	push	{r4, r5, r6, lr}
 8001d14:	4616      	mov	r6, r2
 8001d16:	460d      	mov	r5, r1
 8001d18:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8001d20:	f011 0f10 	tst.w	r1, #16
 8001d24:	d03f      	beq.n	8001da6 <I2C_Slave_ISR_IT+0x9e>
 8001d26:	f012 0f10 	tst.w	r2, #16
 8001d2a:	d03c      	beq.n	8001da6 <I2C_Slave_ISR_IT+0x9e>
    if (hi2c->XferCount == 0U)
 8001d2c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	bb43      	cbnz	r3, 8001d84 <I2C_Slave_ISR_IT+0x7c>
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8001d32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d38:	d010      	beq.n	8001d5c <I2C_Slave_ISR_IT+0x54>
 8001d3a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001d3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d40:	d00c      	beq.n	8001d5c <I2C_Slave_ISR_IT+0x54>
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d48:	d004      	beq.n	8001d54 <I2C_Slave_ISR_IT+0x4c>
 8001d4a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b29      	cmp	r3, #41	; 0x29
 8001d52:	d00d      	beq.n	8001d70 <I2C_Slave_ISR_IT+0x68>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	2210      	movs	r2, #16
 8001d58:	61da      	str	r2, [r3, #28]
 8001d5a:	e01a      	b.n	8001d92 <I2C_Slave_ISR_IT+0x8a>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8001d5c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001d60:	b2db      	uxtb	r3, r3
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8001d62:	2b28      	cmp	r3, #40	; 0x28
 8001d64:	d1ed      	bne.n	8001d42 <I2C_Slave_ISR_IT+0x3a>
        I2C_ITListenCplt(hi2c, ITFlags);
 8001d66:	4629      	mov	r1, r5
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f7ff fe85 	bl	8001a78 <I2C_ITListenCplt>
 8001d6e:	e010      	b.n	8001d92 <I2C_Slave_ISR_IT+0x8a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	2210      	movs	r2, #16
 8001d74:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8001d76:	4620      	mov	r0, r4
 8001d78:	f7ff fd48 	bl	800180c <I2C_Flush_TXDR>
        I2C_ITSlaveSequentialCplt(hi2c);
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	f7ff fdfd 	bl	800197c <I2C_ITSlaveSequentialCplt>
 8001d82:	e006      	b.n	8001d92 <I2C_Slave_ISR_IT+0x8a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d84:	6803      	ldr	r3, [r0, #0]
 8001d86:	2210      	movs	r2, #16
 8001d88:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d8a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d8c:	f043 0304 	orr.w	r3, r3, #4
 8001d90:	6443      	str	r3, [r0, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8001d92:	f015 0f20 	tst.w	r5, #32
 8001d96:	d002      	beq.n	8001d9e <I2C_Slave_ISR_IT+0x96>
 8001d98:	f016 0f20 	tst.w	r6, #32
 8001d9c:	d154      	bne.n	8001e48 <I2C_Slave_ISR_IT+0x140>
  __HAL_UNLOCK(hi2c);
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8001da4:	bd70      	pop	{r4, r5, r6, pc}
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8001da6:	f015 0f04 	tst.w	r5, #4
 8001daa:	d01f      	beq.n	8001dec <I2C_Slave_ISR_IT+0xe4>
 8001dac:	f016 0f04 	tst.w	r6, #4
 8001db0:	d01c      	beq.n	8001dec <I2C_Slave_ISR_IT+0xe4>
    if (hi2c->XferCount > 0U)
 8001db2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	b16b      	cbz	r3, 8001dd4 <I2C_Slave_ISR_IT+0xcc>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	6262      	str	r2, [r4, #36]	; 0x24
 8001dbe:	6822      	ldr	r2, [r4, #0]
 8001dc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dc2:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001dc4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001dca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8001dd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1da      	bne.n	8001d92 <I2C_Slave_ISR_IT+0x8a>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 8001ddc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 8001dde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001de2:	d0d6      	beq.n	8001d92 <I2C_Slave_ISR_IT+0x8a>
      I2C_ITSlaveSequentialCplt(hi2c);
 8001de4:	4620      	mov	r0, r4
 8001de6:	f7ff fdc9 	bl	800197c <I2C_ITSlaveSequentialCplt>
 8001dea:	e7d2      	b.n	8001d92 <I2C_Slave_ISR_IT+0x8a>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8001dec:	f015 0f08 	tst.w	r5, #8
 8001df0:	d002      	beq.n	8001df8 <I2C_Slave_ISR_IT+0xf0>
 8001df2:	f016 0f08 	tst.w	r6, #8
 8001df6:	d117      	bne.n	8001e28 <I2C_Slave_ISR_IT+0x120>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8001df8:	f015 0f02 	tst.w	r5, #2
 8001dfc:	d0c9      	beq.n	8001d92 <I2C_Slave_ISR_IT+0x8a>
 8001dfe:	f016 0f02 	tst.w	r6, #2
 8001e02:	d0c6      	beq.n	8001d92 <I2C_Slave_ISR_IT+0x8a>
    if (hi2c->XferCount > 0U)
 8001e04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	b19b      	cbz	r3, 8001e32 <I2C_Slave_ISR_IT+0x12a>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001e0a:	6822      	ldr	r2, [r4, #0]
 8001e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e0e:	1c59      	adds	r1, r3, #1
 8001e10:	6261      	str	r1, [r4, #36]	; 0x24
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001e16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001e20:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e22:	3b01      	subs	r3, #1
 8001e24:	8523      	strh	r3, [r4, #40]	; 0x28
 8001e26:	e7b4      	b.n	8001d92 <I2C_Slave_ISR_IT+0x8a>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001e28:	4629      	mov	r1, r5
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7ff fdd5 	bl	80019da <I2C_ITAddrCplt>
 8001e30:	e7af      	b.n	8001d92 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 8001e32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e38:	d002      	beq.n	8001e40 <I2C_Slave_ISR_IT+0x138>
 8001e3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1a8      	bne.n	8001d92 <I2C_Slave_ISR_IT+0x8a>
        I2C_ITSlaveSequentialCplt(hi2c);
 8001e40:	4620      	mov	r0, r4
 8001e42:	f7ff fd9b 	bl	800197c <I2C_ITSlaveSequentialCplt>
 8001e46:	e7a4      	b.n	8001d92 <I2C_Slave_ISR_IT+0x8a>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001e48:	4629      	mov	r1, r5
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7ff fec8 	bl	8001be0 <I2C_ITSlaveCplt>
 8001e50:	e7a5      	b.n	8001d9e <I2C_Slave_ISR_IT+0x96>
  __HAL_LOCK(hi2c);
 8001e52:	2002      	movs	r0, #2
 8001e54:	4770      	bx	lr

08001e56 <HAL_I2C_ER_IRQHandler>:
{
 8001e56:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e58:	6802      	ldr	r2, [r0, #0]
 8001e5a:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e5c:	6811      	ldr	r1, [r2, #0]
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001e5e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001e62:	d009      	beq.n	8001e78 <HAL_I2C_ER_IRQHandler+0x22>
 8001e64:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e68:	d006      	beq.n	8001e78 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001e6a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001e6c:	f044 0401 	orr.w	r4, r4, #1
 8001e70:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e72:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001e76:	61d4      	str	r4, [r2, #28]
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001e78:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001e7c:	d00a      	beq.n	8001e94 <HAL_I2C_ER_IRQHandler+0x3e>
 8001e7e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e82:	d007      	beq.n	8001e94 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001e84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001e86:	f042 0208 	orr.w	r2, r2, #8
 8001e8a:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e8c:	6802      	ldr	r2, [r0, #0]
 8001e8e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001e92:	61d4      	str	r4, [r2, #28]
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001e94:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001e98:	d00a      	beq.n	8001eb0 <HAL_I2C_ER_IRQHandler+0x5a>
 8001e9a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e9e:	d007      	beq.n	8001eb0 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001ea0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ea8:	6803      	ldr	r3, [r0, #0]
 8001eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eae:	61da      	str	r2, [r3, #28]
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001eb0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001eb2:	f013 0f0b 	tst.w	r3, #11
 8001eb6:	d100      	bne.n	8001eba <HAL_I2C_ER_IRQHandler+0x64>
 8001eb8:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001eba:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001ebc:	f7ff fe10 	bl	8001ae0 <I2C_ITError>
}
 8001ec0:	e7fa      	b.n	8001eb8 <HAL_I2C_ER_IRQHandler+0x62>

08001ec2 <I2C_DMAAbort>:
{
 8001ec2:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ec4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001ec6:	6802      	ldr	r2, [r0, #0]
 8001ec8:	6853      	ldr	r3, [r2, #4]
 8001eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ece:	6053      	str	r3, [r2, #4]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001ed0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	6353      	str	r3, [r2, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001ed6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001ed8:	6353      	str	r3, [r2, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001eda:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b60      	cmp	r3, #96	; 0x60
 8001ee2:	d002      	beq.n	8001eea <I2C_DMAAbort+0x28>
    HAL_I2C_ErrorCallback(hi2c);
 8001ee4:	f7ff fdfa 	bl	8001adc <HAL_I2C_ErrorCallback>
 8001ee8:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001eea:	2320      	movs	r3, #32
 8001eec:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001ef0:	f7ff fdf5 	bl	8001ade <HAL_I2C_AbortCpltCallback>
 8001ef4:	bd08      	pop	{r3, pc}

08001ef6 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	d001      	beq.n	8001f04 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001f00:	2002      	movs	r0, #2
 8001f02:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001f04:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d020      	beq.n	8001f4e <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f12:	2324      	movs	r3, #36	; 0x24
 8001f14:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001f18:	6802      	ldr	r2, [r0, #0]
 8001f1a:	6813      	ldr	r3, [r2, #0]
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f22:	6802      	ldr	r2, [r0, #0]
 8001f24:	6813      	ldr	r3, [r2, #0]
 8001f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f2a:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f2c:	6802      	ldr	r2, [r0, #0]
 8001f2e:	6813      	ldr	r3, [r2, #0]
 8001f30:	4319      	orrs	r1, r3
 8001f32:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001f34:	6802      	ldr	r2, [r0, #0]
 8001f36:	6813      	ldr	r3, [r2, #0]
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	2320      	movs	r3, #32
 8001f40:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001f44:	2300      	movs	r3, #0
 8001f46:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001f4e:	2002      	movs	r0, #2
  }
}
 8001f50:	4770      	bx	lr

08001f52 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f52:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d001      	beq.n	8001f60 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001f5c:	2002      	movs	r0, #2
 8001f5e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001f60:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d01e      	beq.n	8001fa6 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6e:	2324      	movs	r3, #36	; 0x24
 8001f70:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001f74:	6802      	ldr	r2, [r0, #0]
 8001f76:	6813      	ldr	r3, [r2, #0]
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8001f7e:	6802      	ldr	r2, [r0, #0]
 8001f80:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001f82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8001f86:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8001f8a:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001f8c:	6802      	ldr	r2, [r0, #0]
 8001f8e:	6813      	ldr	r3, [r2, #0]
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	2320      	movs	r3, #32
 8001f98:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001fa6:	2002      	movs	r0, #2
  }
}
 8001fa8:	4770      	bx	lr
	...

08001fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fac:	b570      	push	{r4, r5, r6, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb2:	6803      	ldr	r3, [r0, #0]
 8001fb4:	f013 0f01 	tst.w	r3, #1
 8001fb8:	d063      	beq.n	8002082 <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fba:	4bb5      	ldr	r3, [pc, #724]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d046      	beq.n	8002054 <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fc6:	4bb2      	ldr	r3, [pc, #712]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d03b      	beq.n	800204a <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd2:	6863      	ldr	r3, [r4, #4]
 8001fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd8:	f000 808e 	beq.w	80020f8 <HAL_RCC_OscConfig+0x14c>
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f040 8091 	bne.w	8002104 <HAL_RCC_OscConfig+0x158>
 8001fe2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fe6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ff8:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ffa:	4aa5      	ldr	r2, [pc, #660]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 8001ffc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ffe:	f023 030f 	bic.w	r3, r3, #15
 8002002:	68a1      	ldr	r1, [r4, #8]
 8002004:	430b      	orrs	r3, r1
 8002006:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002008:	6863      	ldr	r3, [r4, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8094 	beq.w	8002138 <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7fe fdfe 	bl	8000c10 <HAL_GetTick>
 8002014:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800201a:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	4b9c      	ldr	r3, [pc, #624]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 8002020:	6819      	ldr	r1, [r3, #0]
 8002022:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	2201      	movs	r2, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	4219      	tst	r1, r3
 800203a:	d122      	bne.n	8002082 <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203c:	f7fe fde8 	bl	8000c10 <HAL_GetTick>
 8002040:	1b40      	subs	r0, r0, r5
 8002042:	2864      	cmp	r0, #100	; 0x64
 8002044:	d9e7      	bls.n	8002016 <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 8002046:	2003      	movs	r0, #3
 8002048:	e2ab      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800204a:	4b91      	ldr	r3, [pc, #580]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002052:	d0be      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x26>
 8002054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002058:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	4b8c      	ldr	r3, [pc, #560]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 800205e:	6819      	ldr	r1, [r3, #0]
 8002060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	fab3 f383 	clz	r3, r3
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	2201      	movs	r2, #1
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	4219      	tst	r1, r3
 8002078:	d003      	beq.n	8002082 <HAL_RCC_OscConfig+0xd6>
 800207a:	6863      	ldr	r3, [r4, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8289 	beq.w	8002594 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	f013 0f02 	tst.w	r3, #2
 8002088:	f000 809c 	beq.w	80021c4 <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800208c:	4b80      	ldr	r3, [pc, #512]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f013 0f0c 	tst.w	r3, #12
 8002094:	d072      	beq.n	800217c <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002096:	4b7e      	ldr	r3, [pc, #504]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d067      	beq.n	8002172 <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020a2:	6923      	ldr	r3, [r4, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80cb 	beq.w	8002240 <HAL_RCC_OscConfig+0x294>
 80020aa:	2201      	movs	r2, #1
 80020ac:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7fe fda6 	bl	8000c10 <HAL_GetTick>
 80020c4:	4605      	mov	r5, r0
 80020c6:	2302      	movs	r3, #2
 80020c8:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020cc:	4b70      	ldr	r3, [pc, #448]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 80020ce:	6819      	ldr	r1, [r3, #0]
 80020d0:	2302      	movs	r3, #2
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	f003 031f 	and.w	r3, r3, #31
 80020de:	2201      	movs	r2, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	4219      	tst	r1, r3
 80020e6:	f040 809c 	bne.w	8002222 <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ea:	f7fe fd91 	bl	8000c10 <HAL_GetTick>
 80020ee:	1b40      	subs	r0, r0, r5
 80020f0:	2802      	cmp	r0, #2
 80020f2:	d9e8      	bls.n	80020c6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80020f4:	2003      	movs	r0, #3
 80020f6:	e254      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f8:	4a65      	ldr	r2, [pc, #404]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 80020fa:	6813      	ldr	r3, [r2, #0]
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e77a      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e>
 8002104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002108:	d009      	beq.n	800211e <HAL_RCC_OscConfig+0x172>
 800210a:	4b61      	ldr	r3, [pc, #388]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	e76d      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e>
 800211e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002122:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e760      	b.n	8001ffa <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8002138:	f7fe fd6a 	bl	8000c10 <HAL_GetTick>
 800213c:	4605      	mov	r5, r0
 800213e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002142:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	4b52      	ldr	r3, [pc, #328]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 8002148:	6819      	ldr	r1, [r3, #0]
 800214a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	2201      	movs	r2, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	4219      	tst	r1, r3
 8002162:	d08e      	beq.n	8002082 <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002164:	f7fe fd54 	bl	8000c10 <HAL_GetTick>
 8002168:	1b40      	subs	r0, r0, r5
 800216a:	2864      	cmp	r0, #100	; 0x64
 800216c:	d9e7      	bls.n	800213e <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 800216e:	2003      	movs	r0, #3
 8002170:	e217      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002172:	4b47      	ldr	r3, [pc, #284]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800217a:	d192      	bne.n	80020a2 <HAL_RCC_OscConfig+0xf6>
 800217c:	2302      	movs	r3, #2
 800217e:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002182:	4b43      	ldr	r3, [pc, #268]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 8002184:	6819      	ldr	r1, [r3, #0]
 8002186:	2302      	movs	r3, #2
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	2201      	movs	r2, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	4219      	tst	r1, r3
 800219c:	d004      	beq.n	80021a8 <HAL_RCC_OscConfig+0x1fc>
 800219e:	6923      	ldr	r3, [r4, #16]
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 80021a4:	2001      	movs	r0, #1
 80021a6:	e1fc      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	4839      	ldr	r0, [pc, #228]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 80021aa:	6803      	ldr	r3, [r0, #0]
 80021ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021b0:	6961      	ldr	r1, [r4, #20]
 80021b2:	22f8      	movs	r2, #248	; 0xf8
 80021b4:	fa92 f2a2 	rbit	r2, r2
 80021b8:	fab2 f282 	clz	r2, r2
 80021bc:	fa01 f202 	lsl.w	r2, r1, r2
 80021c0:	4313      	orrs	r3, r2
 80021c2:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	f013 0f08 	tst.w	r3, #8
 80021ca:	f000 808d 	beq.w	80022e8 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ce:	69a3      	ldr	r3, [r4, #24]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d061      	beq.n	8002298 <HAL_RCC_OscConfig+0x2ec>
 80021d4:	2101      	movs	r1, #1
 80021d6:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021da:	fab2 f282 	clz	r2, r2
 80021de:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_RCC_OscConfig+0x2e8>)
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e6:	f7fe fd13 	bl	8000c10 <HAL_GetTick>
 80021ea:	4605      	mov	r5, r0
 80021ec:	2302      	movs	r3, #2
 80021ee:	fa93 f2a3 	rbit	r2, r3
 80021f2:	fa93 f2a3 	rbit	r2, r3
 80021f6:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	4a25      	ldr	r2, [pc, #148]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 80021fc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	2201      	movs	r2, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	4219      	tst	r1, r3
 8002212:	d169      	bne.n	80022e8 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002214:	f7fe fcfc 	bl	8000c10 <HAL_GetTick>
 8002218:	1b40      	subs	r0, r0, r5
 800221a:	2802      	cmp	r0, #2
 800221c:	d9e6      	bls.n	80021ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800221e:	2003      	movs	r0, #3
 8002220:	e1bf      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002222:	481b      	ldr	r0, [pc, #108]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 8002224:	6803      	ldr	r3, [r0, #0]
 8002226:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800222a:	6961      	ldr	r1, [r4, #20]
 800222c:	22f8      	movs	r2, #248	; 0xf8
 800222e:	fa92 f2a2 	rbit	r2, r2
 8002232:	fab2 f282 	clz	r2, r2
 8002236:	fa01 f202 	lsl.w	r2, r1, r2
 800223a:	4313      	orrs	r3, r2
 800223c:	6003      	str	r3, [r0, #0]
 800223e:	e7c1      	b.n	80021c4 <HAL_RCC_OscConfig+0x218>
 8002240:	2301      	movs	r3, #1
 8002242:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800224e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002258:	f7fe fcda 	bl	8000c10 <HAL_GetTick>
 800225c:	4605      	mov	r5, r0
 800225e:	2302      	movs	r3, #2
 8002260:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_RCC_OscConfig+0x2e4>)
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	2302      	movs	r3, #2
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2201      	movs	r2, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	4219      	tst	r1, r3
 800227e:	d0a1      	beq.n	80021c4 <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002280:	f7fe fcc6 	bl	8000c10 <HAL_GetTick>
 8002284:	1b40      	subs	r0, r0, r5
 8002286:	2802      	cmp	r0, #2
 8002288:	d9e9      	bls.n	800225e <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 800228a:	2003      	movs	r0, #3
 800228c:	e189      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	10908120 	.word	0x10908120
 8002298:	2201      	movs	r2, #1
 800229a:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800229e:	fab2 f282 	clz	r2, r2
 80022a2:	4bc1      	ldr	r3, [pc, #772]	; (80025a8 <HAL_RCC_OscConfig+0x5fc>)
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7fe fcb0 	bl	8000c10 <HAL_GetTick>
 80022b0:	4605      	mov	r5, r0
 80022b2:	2302      	movs	r3, #2
 80022b4:	fa93 f2a3 	rbit	r2, r3
 80022b8:	fa93 f2a3 	rbit	r2, r3
 80022bc:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c0:	4aba      	ldr	r2, [pc, #744]	; (80025ac <HAL_RCC_OscConfig+0x600>)
 80022c2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	2201      	movs	r2, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	4219      	tst	r1, r3
 80022d8:	d006      	beq.n	80022e8 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022da:	f7fe fc99 	bl	8000c10 <HAL_GetTick>
 80022de:	1b40      	subs	r0, r0, r5
 80022e0:	2802      	cmp	r0, #2
 80022e2:	d9e6      	bls.n	80022b2 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 80022e4:	2003      	movs	r0, #3
 80022e6:	e15c      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	f013 0f04 	tst.w	r3, #4
 80022ee:	f000 80b3 	beq.w	8002458 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f2:	4bae      	ldr	r3, [pc, #696]	; (80025ac <HAL_RCC_OscConfig+0x600>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80022fa:	d126      	bne.n	800234a <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fc:	4bab      	ldr	r3, [pc, #684]	; (80025ac <HAL_RCC_OscConfig+0x600>)
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002304:	61da      	str	r2, [r3, #28]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002310:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002312:	4ba7      	ldr	r3, [pc, #668]	; (80025b0 <HAL_RCC_OscConfig+0x604>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f413 7f80 	tst.w	r3, #256	; 0x100
 800231a:	d018      	beq.n	800234e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231c:	68e3      	ldr	r3, [r4, #12]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d029      	beq.n	8002376 <HAL_RCC_OscConfig+0x3ca>
 8002322:	bb73      	cbnz	r3, 8002382 <HAL_RCC_OscConfig+0x3d6>
 8002324:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002328:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800232c:	6a1a      	ldr	r2, [r3, #32]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	621a      	str	r2, [r3, #32]
 8002334:	6a1a      	ldr	r2, [r3, #32]
 8002336:	f022 0204 	bic.w	r2, r2, #4
 800233a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800233c:	68e3      	ldr	r3, [r4, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d05d      	beq.n	80023fe <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002342:	f7fe fc65 	bl	8000c10 <HAL_GetTick>
 8002346:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002348:	e047      	b.n	80023da <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 800234a:	2500      	movs	r5, #0
 800234c:	e7e1      	b.n	8002312 <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234e:	4a98      	ldr	r2, [pc, #608]	; (80025b0 <HAL_RCC_OscConfig+0x604>)
 8002350:	6813      	ldr	r3, [r2, #0]
 8002352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002356:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002358:	f7fe fc5a 	bl	8000c10 <HAL_GetTick>
 800235c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b94      	ldr	r3, [pc, #592]	; (80025b0 <HAL_RCC_OscConfig+0x604>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002366:	d1d9      	bne.n	800231c <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002368:	f7fe fc52 	bl	8000c10 <HAL_GetTick>
 800236c:	1b80      	subs	r0, r0, r6
 800236e:	2864      	cmp	r0, #100	; 0x64
 8002370:	d9f5      	bls.n	800235e <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8002372:	2003      	movs	r0, #3
 8002374:	e115      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002376:	4a8d      	ldr	r2, [pc, #564]	; (80025ac <HAL_RCC_OscConfig+0x600>)
 8002378:	6a13      	ldr	r3, [r2, #32]
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6213      	str	r3, [r2, #32]
 8002380:	e7dc      	b.n	800233c <HAL_RCC_OscConfig+0x390>
 8002382:	2b05      	cmp	r3, #5
 8002384:	d009      	beq.n	800239a <HAL_RCC_OscConfig+0x3ee>
 8002386:	4b89      	ldr	r3, [pc, #548]	; (80025ac <HAL_RCC_OscConfig+0x600>)
 8002388:	6a1a      	ldr	r2, [r3, #32]
 800238a:	f022 0201 	bic.w	r2, r2, #1
 800238e:	621a      	str	r2, [r3, #32]
 8002390:	6a1a      	ldr	r2, [r3, #32]
 8002392:	f022 0204 	bic.w	r2, r2, #4
 8002396:	621a      	str	r2, [r3, #32]
 8002398:	e7d0      	b.n	800233c <HAL_RCC_OscConfig+0x390>
 800239a:	4b84      	ldr	r3, [pc, #528]	; (80025ac <HAL_RCC_OscConfig+0x600>)
 800239c:	6a1a      	ldr	r2, [r3, #32]
 800239e:	f042 0204 	orr.w	r2, r2, #4
 80023a2:	621a      	str	r2, [r3, #32]
 80023a4:	6a1a      	ldr	r2, [r3, #32]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	621a      	str	r2, [r3, #32]
 80023ac:	e7c6      	b.n	800233c <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ae:	4b7f      	ldr	r3, [pc, #508]	; (80025ac <HAL_RCC_OscConfig+0x600>)
 80023b0:	6a19      	ldr	r1, [r3, #32]
 80023b2:	2302      	movs	r3, #2
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	2201      	movs	r2, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	4219      	tst	r1, r3
 80023c8:	d145      	bne.n	8002456 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7fe fc21 	bl	8000c10 <HAL_GetTick>
 80023ce:	1b80      	subs	r0, r0, r6
 80023d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80023d4:	4298      	cmp	r0, r3
 80023d6:	f200 80df 	bhi.w	8002598 <HAL_RCC_OscConfig+0x5ec>
 80023da:	2302      	movs	r3, #2
 80023dc:	fa93 f2a3 	rbit	r2, r3
 80023e0:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d0dd      	beq.n	80023ae <HAL_RCC_OscConfig+0x402>
 80023f2:	2302      	movs	r3, #2
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	4b6c      	ldr	r3, [pc, #432]	; (80025ac <HAL_RCC_OscConfig+0x600>)
 80023fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023fc:	e7d9      	b.n	80023b2 <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fe:	f7fe fc07 	bl	8000c10 <HAL_GetTick>
 8002402:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002404:	e015      	b.n	8002432 <HAL_RCC_OscConfig+0x486>
 8002406:	4b69      	ldr	r3, [pc, #420]	; (80025ac <HAL_RCC_OscConfig+0x600>)
 8002408:	6a19      	ldr	r1, [r3, #32]
 800240a:	2302      	movs	r3, #2
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	2201      	movs	r2, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	4219      	tst	r1, r3
 8002420:	d019      	beq.n	8002456 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7fe fbf5 	bl	8000c10 <HAL_GetTick>
 8002426:	1b80      	subs	r0, r0, r6
 8002428:	f241 3388 	movw	r3, #5000	; 0x1388
 800242c:	4298      	cmp	r0, r3
 800242e:	f200 80b5 	bhi.w	800259c <HAL_RCC_OscConfig+0x5f0>
 8002432:	2302      	movs	r3, #2
 8002434:	fa93 f2a3 	rbit	r2, r3
 8002438:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	2b02      	cmp	r3, #2
 8002448:	d0dd      	beq.n	8002406 <HAL_RCC_OscConfig+0x45a>
 800244a:	2302      	movs	r3, #2
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	4b56      	ldr	r3, [pc, #344]	; (80025ac <HAL_RCC_OscConfig+0x600>)
 8002452:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002454:	e7d9      	b.n	800240a <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002456:	bbb5      	cbnz	r5, 80024c6 <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002458:	69e3      	ldr	r3, [r4, #28]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 80a0 	beq.w	80025a0 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002460:	4a52      	ldr	r2, [pc, #328]	; (80025ac <HAL_RCC_OscConfig+0x600>)
 8002462:	6852      	ldr	r2, [r2, #4]
 8002464:	f002 020c 	and.w	r2, r2, #12
 8002468:	2a08      	cmp	r2, #8
 800246a:	f000 80a3 	beq.w	80025b4 <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800246e:	2b02      	cmp	r3, #2
 8002470:	d02f      	beq.n	80024d2 <HAL_RCC_OscConfig+0x526>
 8002472:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002476:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002482:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7fe fbc0 	bl	8000c10 <HAL_GetTick>
 8002490:	4604      	mov	r4, r0
 8002492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002496:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249a:	4b44      	ldr	r3, [pc, #272]	; (80025ac <HAL_RCC_OscConfig+0x600>)
 800249c:	6819      	ldr	r1, [r3, #0]
 800249e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	2201      	movs	r2, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	4219      	tst	r1, r3
 80024b6:	d06b      	beq.n	8002590 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b8:	f7fe fbaa 	bl	8000c10 <HAL_GetTick>
 80024bc:	1b00      	subs	r0, r0, r4
 80024be:	2802      	cmp	r0, #2
 80024c0:	d9e7      	bls.n	8002492 <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 80024c2:	2003      	movs	r0, #3
 80024c4:	e06d      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c6:	4a39      	ldr	r2, [pc, #228]	; (80025ac <HAL_RCC_OscConfig+0x600>)
 80024c8:	69d3      	ldr	r3, [r2, #28]
 80024ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ce:	61d3      	str	r3, [r2, #28]
 80024d0:	e7c2      	b.n	8002458 <HAL_RCC_OscConfig+0x4ac>
 80024d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024d6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024ec:	f7fe fb90 	bl	8000c10 <HAL_GetTick>
 80024f0:	4605      	mov	r5, r0
 80024f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f6:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fa:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <HAL_RCC_OscConfig+0x600>)
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	2201      	movs	r2, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	4219      	tst	r1, r3
 8002516:	d006      	beq.n	8002526 <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002518:	f7fe fb7a 	bl	8000c10 <HAL_GetTick>
 800251c:	1b40      	subs	r0, r0, r5
 800251e:	2802      	cmp	r0, #2
 8002520:	d9e7      	bls.n	80024f2 <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 8002522:	2003      	movs	r0, #3
 8002524:	e03d      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002526:	4921      	ldr	r1, [pc, #132]	; (80025ac <HAL_RCC_OscConfig+0x600>)
 8002528:	684b      	ldr	r3, [r1, #4]
 800252a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800252e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002530:	6a20      	ldr	r0, [r4, #32]
 8002532:	4302      	orrs	r2, r0
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
 8002538:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800253c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002548:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	2201      	movs	r2, #1
 8002550:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002552:	f7fe fb5d 	bl	8000c10 <HAL_GetTick>
 8002556:	4604      	mov	r4, r0
 8002558:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800255c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002560:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_RCC_OscConfig+0x600>)
 8002562:	6819      	ldr	r1, [r3, #0]
 8002564:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2201      	movs	r2, #1
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	4219      	tst	r1, r3
 800257c:	d106      	bne.n	800258c <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257e:	f7fe fb47 	bl	8000c10 <HAL_GetTick>
 8002582:	1b00      	subs	r0, r0, r4
 8002584:	2802      	cmp	r0, #2
 8002586:	d9e7      	bls.n	8002558 <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 8002588:	2003      	movs	r0, #3
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800258c:	2000      	movs	r0, #0
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>
 8002590:	2000      	movs	r0, #0
 8002592:	e006      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 8002594:	2001      	movs	r0, #1
 8002596:	e004      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8002598:	2003      	movs	r0, #3
 800259a:	e002      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 800259c:	2003      	movs	r0, #3
 800259e:	e000      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 80025a0:	2000      	movs	r0, #0
}
 80025a2:	b002      	add	sp, #8
 80025a4:	bd70      	pop	{r4, r5, r6, pc}
 80025a6:	bf00      	nop
 80025a8:	10908120 	.word	0x10908120
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40007000 	.word	0x40007000
      return HAL_ERROR;
 80025b4:	2001      	movs	r0, #1
 80025b6:	e7f4      	b.n	80025a2 <HAL_RCC_OscConfig+0x5f6>

080025b8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80025b8:	4b16      	ldr	r3, [pc, #88]	; (8002614 <HAL_RCC_GetSysClockFreq+0x5c>)
 80025ba:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025bc:	f003 020c 	and.w	r2, r3, #12
 80025c0:	2a08      	cmp	r2, #8
 80025c2:	d124      	bne.n	800260e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025c4:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 80025c8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025cc:	fa92 f2a2 	rbit	r2, r2
 80025d0:	fab2 f282 	clz	r2, r2
 80025d4:	fa21 f202 	lsr.w	r2, r1, r2
 80025d8:	490f      	ldr	r1, [pc, #60]	; (8002618 <HAL_RCC_GetSysClockFreq+0x60>)
 80025da:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025dc:	4a0d      	ldr	r2, [pc, #52]	; (8002614 <HAL_RCC_GetSysClockFreq+0x5c>)
 80025de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025e0:	f002 020f 	and.w	r2, r2, #15
 80025e4:	210f      	movs	r1, #15
 80025e6:	fa91 f1a1 	rbit	r1, r1
 80025ea:	fab1 f181 	clz	r1, r1
 80025ee:	40ca      	lsrs	r2, r1
 80025f0:	490a      	ldr	r1, [pc, #40]	; (800261c <HAL_RCC_GetSysClockFreq+0x64>)
 80025f2:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80025f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80025f8:	d103      	bne.n	8002602 <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCC_GetSysClockFreq+0x68>)
 80025fc:	fb03 f000 	mul.w	r0, r3, r0
 8002600:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002604:	fbb3 f3f2 	udiv	r3, r3, r2
 8002608:	fb03 f000 	mul.w	r0, r3, r0
 800260c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800260e:	4805      	ldr	r0, [pc, #20]	; (8002624 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
 8002618:	08006bc8 	.word	0x08006bc8
 800261c:	08006bd8 	.word	0x08006bd8
 8002620:	003d0900 	.word	0x003d0900
 8002624:	007a1200 	.word	0x007a1200

08002628 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002628:	4b70      	ldr	r3, [pc, #448]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	428b      	cmp	r3, r1
 8002632:	d20c      	bcs.n	800264e <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002634:	4a6d      	ldr	r2, [pc, #436]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	6813      	ldr	r3, [r2, #0]
 8002638:	f023 0307 	bic.w	r3, r3, #7
 800263c:	430b      	orrs	r3, r1
 800263e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002640:	6813      	ldr	r3, [r2, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	4299      	cmp	r1, r3
 8002648:	d001      	beq.n	800264e <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 800264a:	2001      	movs	r0, #1
 800264c:	4770      	bx	lr
{
 800264e:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002650:	6803      	ldr	r3, [r0, #0]
 8002652:	f013 0f02 	tst.w	r3, #2
 8002656:	d006      	beq.n	8002666 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002658:	4a65      	ldr	r2, [pc, #404]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 800265a:	6853      	ldr	r3, [r2, #4]
 800265c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002660:	6884      	ldr	r4, [r0, #8]
 8002662:	4323      	orrs	r3, r4
 8002664:	6053      	str	r3, [r2, #4]
 8002666:	460d      	mov	r5, r1
 8002668:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800266a:	6803      	ldr	r3, [r0, #0]
 800266c:	f013 0f01 	tst.w	r3, #1
 8002670:	d07a      	beq.n	8002768 <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002672:	6843      	ldr	r3, [r0, #4]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d02f      	beq.n	80026d8 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002678:	2b02      	cmp	r3, #2
 800267a:	d042      	beq.n	8002702 <HAL_RCC_ClockConfig+0xda>
 800267c:	2202      	movs	r2, #2
 800267e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	4a5b      	ldr	r2, [pc, #364]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002684:	6810      	ldr	r0, [r2, #0]
 8002686:	2202      	movs	r2, #2
 8002688:	fa92 f2a2 	rbit	r2, r2
 800268c:	fab2 f282 	clz	r2, r2
 8002690:	f002 021f 	and.w	r2, r2, #31
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	4210      	tst	r0, r2
 800269c:	f000 80a4 	beq.w	80027e8 <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026a0:	4953      	ldr	r1, [pc, #332]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a2:	684a      	ldr	r2, [r1, #4]
 80026a4:	f022 0203 	bic.w	r2, r2, #3
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80026ac:	f7fe fab0 	bl	8000c10 <HAL_GetTick>
 80026b0:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b2:	6863      	ldr	r3, [r4, #4]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d039      	beq.n	800272c <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d046      	beq.n	800274a <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026bc:	4b4c      	ldr	r3, [pc, #304]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f013 0f0c 	tst.w	r3, #12
 80026c4:	d050      	beq.n	8002768 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c6:	f7fe faa3 	bl	8000c10 <HAL_GetTick>
 80026ca:	1b80      	subs	r0, r0, r6
 80026cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80026d0:	4298      	cmp	r0, r3
 80026d2:	d9f3      	bls.n	80026bc <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 80026d4:	2003      	movs	r0, #3
 80026d6:	bd70      	pop	{r4, r5, r6, pc}
 80026d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026dc:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e0:	4a43      	ldr	r2, [pc, #268]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026e2:	6810      	ldr	r0, [r2, #0]
 80026e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026e8:	fa92 f2a2 	rbit	r2, r2
 80026ec:	fab2 f282 	clz	r2, r2
 80026f0:	f002 021f 	and.w	r2, r2, #31
 80026f4:	2101      	movs	r1, #1
 80026f6:	fa01 f202 	lsl.w	r2, r1, r2
 80026fa:	4210      	tst	r0, r2
 80026fc:	d1d0      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 80026fe:	2001      	movs	r0, #1
 8002700:	bd70      	pop	{r4, r5, r6, pc}
 8002702:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002706:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270a:	4a39      	ldr	r2, [pc, #228]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 800270c:	6810      	ldr	r0, [r2, #0]
 800270e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002712:	fa92 f2a2 	rbit	r2, r2
 8002716:	fab2 f282 	clz	r2, r2
 800271a:	f002 021f 	and.w	r2, r2, #31
 800271e:	2101      	movs	r1, #1
 8002720:	fa01 f202 	lsl.w	r2, r1, r2
 8002724:	4210      	tst	r0, r2
 8002726:	d1bb      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8002728:	2001      	movs	r0, #1
 800272a:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800272c:	4b30      	ldr	r3, [pc, #192]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b04      	cmp	r3, #4
 8002736:	d017      	beq.n	8002768 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7fe fa6a 	bl	8000c10 <HAL_GetTick>
 800273c:	1b80      	subs	r0, r0, r6
 800273e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002742:	4298      	cmp	r0, r3
 8002744:	d9f2      	bls.n	800272c <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 8002746:	2003      	movs	r0, #3
 8002748:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274a:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b08      	cmp	r3, #8
 8002754:	d008      	beq.n	8002768 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002756:	f7fe fa5b 	bl	8000c10 <HAL_GetTick>
 800275a:	1b80      	subs	r0, r0, r6
 800275c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002760:	4298      	cmp	r0, r3
 8002762:	d9f2      	bls.n	800274a <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 8002764:	2003      	movs	r0, #3
 8002766:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002768:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	429d      	cmp	r5, r3
 8002772:	d20c      	bcs.n	800278e <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002774:	4a1d      	ldr	r2, [pc, #116]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	6813      	ldr	r3, [r2, #0]
 8002778:	f023 0307 	bic.w	r3, r3, #7
 800277c:	432b      	orrs	r3, r5
 800277e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002780:	6813      	ldr	r3, [r2, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	429d      	cmp	r5, r3
 8002788:	d001      	beq.n	800278e <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 800278a:	2001      	movs	r0, #1
}
 800278c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	f013 0f04 	tst.w	r3, #4
 8002794:	d006      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002796:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002798:	6853      	ldr	r3, [r2, #4]
 800279a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800279e:	68e1      	ldr	r1, [r4, #12]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	f013 0f08 	tst.w	r3, #8
 80027aa:	d007      	beq.n	80027bc <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ac:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027ae:	6853      	ldr	r3, [r2, #4]
 80027b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80027b4:	6921      	ldr	r1, [r4, #16]
 80027b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027ba:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027bc:	f7ff fefc 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c8:	22f0      	movs	r2, #240	; 0xf0
 80027ca:	fa92 f2a2 	rbit	r2, r2
 80027ce:	fab2 f282 	clz	r2, r2
 80027d2:	40d3      	lsrs	r3, r2
 80027d4:	4a07      	ldr	r2, [pc, #28]	; (80027f4 <HAL_RCC_ClockConfig+0x1cc>)
 80027d6:	5cd3      	ldrb	r3, [r2, r3]
 80027d8:	40d8      	lsrs	r0, r3
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <HAL_RCC_ClockConfig+0x1d0>)
 80027dc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80027de:	2000      	movs	r0, #0
 80027e0:	f7fe f9e6 	bl	8000bb0 <HAL_InitTick>
  return HAL_OK;
 80027e4:	2000      	movs	r0, #0
 80027e6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80027e8:	2001      	movs	r0, #1
 80027ea:	bd70      	pop	{r4, r5, r6, pc}
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40021000 	.word	0x40021000
 80027f4:	08006bf8 	.word	0x08006bf8
 80027f8:	20000000 	.word	0x20000000

080027fc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80027fc:	4b01      	ldr	r3, [pc, #4]	; (8002804 <HAL_RCC_GetHCLKFreq+0x8>)
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000000 	.word	0x20000000

08002808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002808:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800280a:	f7ff fff7 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002816:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800281a:	fa92 f2a2 	rbit	r2, r2
 800281e:	fab2 f282 	clz	r2, r2
 8002822:	40d3      	lsrs	r3, r2
 8002824:	4a02      	ldr	r2, [pc, #8]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002826:	5cd3      	ldrb	r3, [r2, r3]
}    
 8002828:	40d8      	lsrs	r0, r3
 800282a:	bd08      	pop	{r3, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	08006c08 	.word	0x08006c08

08002834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002834:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002836:	f7ff ffe1 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002842:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002846:	fa92 f2a2 	rbit	r2, r2
 800284a:	fab2 f282 	clz	r2, r2
 800284e:	40d3      	lsrs	r3, r2
 8002850:	4a02      	ldr	r2, [pc, #8]	; (800285c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002852:	5cd3      	ldrb	r3, [r2, r3]
} 
 8002854:	40d8      	lsrs	r0, r3
 8002856:	bd08      	pop	{r3, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	08006c08 	.word	0x08006c08

08002860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002862:	b083      	sub	sp, #12
 8002864:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002866:	6803      	ldr	r3, [r0, #0]
 8002868:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800286c:	d044      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286e:	4b64      	ldr	r3, [pc, #400]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002876:	d179      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002878:	4b61      	ldr	r3, [pc, #388]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800287a:	69da      	ldr	r2, [r3, #28]
 800287c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002880:	61da      	str	r2, [r3, #28]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800288c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b5d      	ldr	r3, [pc, #372]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002896:	d06b      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002898:	4b59      	ldr	r3, [pc, #356]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800289c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80028a0:	d021      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
 80028a2:	6862      	ldr	r2, [r4, #4]
 80028a4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d01c      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028ac:	4854      	ldr	r0, [pc, #336]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80028ae:	6a01      	ldr	r1, [r0, #32]
 80028b0:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 80028b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028b8:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028bc:	fab2 f282 	clz	r2, r2
 80028c0:	4f51      	ldr	r7, [pc, #324]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80028c2:	443a      	add	r2, r7
 80028c4:	0092      	lsls	r2, r2, #2
 80028c6:	f04f 0e01 	mov.w	lr, #1
 80028ca:	f8c2 e000 	str.w	lr, [r2]
 80028ce:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	443b      	add	r3, r7
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028de:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028e0:	f011 0f01 	tst.w	r1, #1
 80028e4:	d158      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80028e6:	4a46      	ldr	r2, [pc, #280]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80028e8:	6a13      	ldr	r3, [r2, #32]
 80028ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ee:	6861      	ldr	r1, [r4, #4]
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028f4:	2d00      	cmp	r5, #0
 80028f6:	d17a      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	f013 0f01 	tst.w	r3, #1
 80028fe:	d006      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002900:	4a3f      	ldr	r2, [pc, #252]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002902:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002904:	f023 0303 	bic.w	r3, r3, #3
 8002908:	68a1      	ldr	r1, [r4, #8]
 800290a:	430b      	orrs	r3, r1
 800290c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	f013 0f20 	tst.w	r3, #32
 8002914:	d006      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002916:	4a3a      	ldr	r2, [pc, #232]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002918:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800291a:	f023 0310 	bic.w	r3, r3, #16
 800291e:	68e1      	ldr	r1, [r4, #12]
 8002920:	430b      	orrs	r3, r1
 8002922:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	f013 0f80 	tst.w	r3, #128	; 0x80
 800292a:	d006      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800292c:	4a34      	ldr	r2, [pc, #208]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800292e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002930:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002934:	6921      	ldr	r1, [r4, #16]
 8002936:	430b      	orrs	r3, r1
 8002938:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002940:	d006      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002942:	4a2f      	ldr	r2, [pc, #188]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002944:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002946:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800294a:	6961      	ldr	r1, [r4, #20]
 800294c:	430b      	orrs	r3, r1
 800294e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002950:	6823      	ldr	r3, [r4, #0]
 8002952:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002956:	d051      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002958:	4a29      	ldr	r2, [pc, #164]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800295a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800295c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002960:	69a1      	ldr	r1, [r4, #24]
 8002962:	430b      	orrs	r3, r1
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002966:	2000      	movs	r0, #0
}
 8002968:	b003      	add	sp, #12
 800296a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 800296c:	2500      	movs	r5, #0
 800296e:	e78e      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002970:	4a24      	ldr	r2, [pc, #144]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002972:	6813      	ldr	r3, [r2, #0]
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800297a:	f7fe f949 	bl	8000c10 <HAL_GetTick>
 800297e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002988:	d186      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298a:	f7fe f941 	bl	8000c10 <HAL_GetTick>
 800298e:	1b80      	subs	r0, r0, r6
 8002990:	2864      	cmp	r0, #100	; 0x64
 8002992:	d9f5      	bls.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8002994:	2003      	movs	r0, #3
 8002996:	e7e7      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8002998:	f7fe f93a 	bl	8000c10 <HAL_GetTick>
 800299c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299e:	e014      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80029a0:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80029a2:	6a19      	ldr	r1, [r3, #32]
 80029a4:	2302      	movs	r3, #2
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2201      	movs	r2, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	4219      	tst	r1, r3
 80029ba:	d194      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7fe f928 	bl	8000c10 <HAL_GetTick>
 80029c0:	1b80      	subs	r0, r0, r6
 80029c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80029c6:	4298      	cmp	r0, r3
 80029c8:	d816      	bhi.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80029ca:	2302      	movs	r3, #2
 80029cc:	fa93 f2a3 	rbit	r2, r3
 80029d0:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	095b      	lsrs	r3, r3, #5
 80029da:	f043 0302 	orr.w	r3, r3, #2
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d0de      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80029e2:	2302      	movs	r3, #2
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80029ea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80029ec:	e7da      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ee:	69d3      	ldr	r3, [r2, #28]
 80029f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f4:	61d3      	str	r3, [r2, #28]
 80029f6:	e77f      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 80029f8:	2003      	movs	r0, #3
 80029fa:	e7b5      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 80029fc:	2000      	movs	r0, #0
 80029fe:	e7b3      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40007000 	.word	0x40007000
 8002a08:	10908100 	.word	0x10908100

08002a0c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002a0c:	b538      	push	{r3, r4, r5, lr}
 8002a0e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002a10:	6802      	ldr	r2, [r0, #0]
 8002a12:	68d3      	ldr	r3, [r2, #12]
 8002a14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a18:	60d3      	str	r3, [r2, #12]
  
  tickstart = HAL_GetTick();
 8002a1a:	f7fe f8f9 	bl	8000c10 <HAL_GetTick>
 8002a1e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f013 0f20 	tst.w	r3, #32
 8002a28:	d107      	bne.n	8002a3a <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002a2a:	f7fe f8f1 	bl	8000c10 <HAL_GetTick>
 8002a2e:	1b40      	subs	r0, r0, r5
 8002a30:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002a34:	d9f4      	bls.n	8002a20 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8002a36:	2003      	movs	r0, #3
    } 
  }

  return HAL_OK;
}
 8002a38:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	bd38      	pop	{r3, r4, r5, pc}

08002a3e <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002a3e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002a40:	6803      	ldr	r3, [r0, #0]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002a48:	d001      	beq.n	8002a4e <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	bd38      	pop	{r3, r4, r5, pc}
 8002a4e:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002a50:	f04f 32ff 	mov.w	r2, #4294967295
 8002a54:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002a56:	f7fe f8db 	bl	8000c10 <HAL_GetTick>
 8002a5a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a64:	d107      	bne.n	8002a76 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002a66:	f7fe f8d3 	bl	8000c10 <HAL_GetTick>
 8002a6a:	1b40      	subs	r0, r0, r5
 8002a6c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002a70:	d9f4      	bls.n	8002a5c <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8002a72:	2003      	movs	r0, #3
}
 8002a74:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;  
 8002a76:	2000      	movs	r0, #0
 8002a78:	bd38      	pop	{r3, r4, r5, pc}

08002a7a <HAL_RTC_Init>:
{
 8002a7a:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	d05c      	beq.n	8002b3a <HAL_RTC_Init+0xc0>
 8002a80:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002a82:	7f43      	ldrb	r3, [r0, #29]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d041      	beq.n	8002b0c <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002a88:	2302      	movs	r3, #2
 8002a8a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a8c:	6823      	ldr	r3, [r4, #0]
 8002a8e:	22ca      	movs	r2, #202	; 0xca
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24
 8002a92:	6823      	ldr	r3, [r4, #0]
 8002a94:	2253      	movs	r2, #83	; 0x53
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f7ff ffd0 	bl	8002a3e <RTC_EnterInitMode>
 8002a9e:	4605      	mov	r5, r0
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	d137      	bne.n	8002b14 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002aa4:	6822      	ldr	r2, [r4, #0]
 8002aa6:	6893      	ldr	r3, [r2, #8]
 8002aa8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab0:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ab2:	6821      	ldr	r1, [r4, #0]
 8002ab4:	688a      	ldr	r2, [r1, #8]
 8002ab6:	6863      	ldr	r3, [r4, #4]
 8002ab8:	6920      	ldr	r0, [r4, #16]
 8002aba:	4303      	orrs	r3, r0
 8002abc:	6960      	ldr	r0, [r4, #20]
 8002abe:	4303      	orrs	r3, r0
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	68e2      	ldr	r2, [r4, #12]
 8002ac8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002aca:	6822      	ldr	r2, [r4, #0]
 8002acc:	6913      	ldr	r3, [r2, #16]
 8002ace:	68a1      	ldr	r1, [r4, #8]
 8002ad0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002ad4:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002ad6:	6822      	ldr	r2, [r4, #0]
 8002ad8:	68d3      	ldr	r3, [r2, #12]
 8002ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ade:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002ae0:	6823      	ldr	r3, [r4, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f013 0f20 	tst.w	r3, #32
 8002ae8:	d01b      	beq.n	8002b22 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002aea:	6822      	ldr	r2, [r4, #0]
 8002aec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af2:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002af4:	6822      	ldr	r2, [r4, #0]
 8002af6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002af8:	69a1      	ldr	r1, [r4, #24]
 8002afa:	430b      	orrs	r3, r1
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	22ff      	movs	r2, #255	; 0xff
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002b04:	2301      	movs	r3, #1
 8002b06:	7763      	strb	r3, [r4, #29]
}
 8002b08:	4628      	mov	r0, r5
 8002b0a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002b0c:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002b0e:	f001 fcb3 	bl	8004478 <HAL_RTC_MspInit>
 8002b12:	e7b9      	b.n	8002a88 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	22ff      	movs	r2, #255	; 0xff
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8002b1e:	2501      	movs	r5, #1
 8002b20:	e7f2      	b.n	8002b08 <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b22:	4620      	mov	r0, r4
 8002b24:	f7ff ff72 	bl	8002a0c <HAL_RTC_WaitForSynchro>
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	d0de      	beq.n	8002aea <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	22ff      	movs	r2, #255	; 0xff
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b32:	2304      	movs	r3, #4
 8002b34:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8002b36:	2501      	movs	r5, #1
 8002b38:	e7e6      	b.n	8002b08 <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 8002b3a:	2501      	movs	r5, #1
 8002b3c:	e7e4      	b.n	8002b08 <HAL_RTC_Init+0x8e>

08002b3e <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002b3e:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8002b40:	e002      	b.n	8002b48 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8002b42:	3301      	adds	r3, #1
    Value -= 10U;
 8002b44:	380a      	subs	r0, #10
 8002b46:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002b48:	2809      	cmp	r0, #9
 8002b4a:	d8fa      	bhi.n	8002b42 <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	b2db      	uxtb	r3, r3
}
 8002b50:	4318      	orrs	r0, r3
 8002b52:	4770      	bx	lr

08002b54 <HAL_RTC_SetTime>:
{
 8002b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002b56:	7f03      	ldrb	r3, [r0, #28]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d077      	beq.n	8002c4c <HAL_RTC_SetTime+0xf8>
 8002b5c:	460e      	mov	r6, r1
 8002b5e:	4604      	mov	r4, r0
 8002b60:	2301      	movs	r3, #1
 8002b62:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b64:	2302      	movs	r3, #2
 8002b66:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8002b68:	2a00      	cmp	r2, #0
 8002b6a:	d146      	bne.n	8002bfa <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b6c:	6803      	ldr	r3, [r0, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b74:	d101      	bne.n	8002b7a <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b7a:	7830      	ldrb	r0, [r6, #0]
 8002b7c:	f7ff ffdf 	bl	8002b3e <RTC_ByteToBcd2>
 8002b80:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b82:	7870      	ldrb	r0, [r6, #1]
 8002b84:	f7ff ffdb 	bl	8002b3e <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b88:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002b8c:	78b0      	ldrb	r0, [r6, #2]
 8002b8e:	f7ff ffd6 	bl	8002b3e <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b92:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8002b94:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b96:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	22ca      	movs	r2, #202	; 0xca
 8002b9e:	625a      	str	r2, [r3, #36]	; 0x24
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	2253      	movs	r2, #83	; 0x53
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f7ff ff49 	bl	8002a3e <RTC_EnterInitMode>
 8002bac:	4607      	mov	r7, r0
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	d135      	bne.n	8002c1e <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8002bb8:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8002bbc:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002bbe:	6822      	ldr	r2, [r4, #0]
 8002bc0:	6893      	ldr	r3, [r2, #8]
 8002bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002bc8:	6821      	ldr	r1, [r4, #0]
 8002bca:	688b      	ldr	r3, [r1, #8]
 8002bcc:	68f2      	ldr	r2, [r6, #12]
 8002bce:	6930      	ldr	r0, [r6, #16]
 8002bd0:	4302      	orrs	r2, r0
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002bd6:	6822      	ldr	r2, [r4, #0]
 8002bd8:	68d3      	ldr	r3, [r2, #12]
 8002bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bde:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f013 0f20 	tst.w	r3, #32
 8002be8:	d022      	beq.n	8002c30 <HAL_RTC_SetTime+0xdc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	22ff      	movs	r2, #255	; 0xff
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8002bf8:	e029      	b.n	8002c4e <HAL_RTC_SetTime+0xfa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002bfa:	6803      	ldr	r3, [r0, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002c02:	d101      	bne.n	8002c08 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c08:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002c0a:	7870      	ldrb	r0, [r6, #1]
 8002c0c:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8002c12:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002c14:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8002c16:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c18:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8002c1c:	e7bd      	b.n	8002b9a <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	22ff      	movs	r2, #255	; 0xff
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c24:	2304      	movs	r3, #4
 8002c26:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002c28:	2300      	movs	r3, #0
 8002c2a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002c2c:	2701      	movs	r7, #1
 8002c2e:	e00e      	b.n	8002c4e <HAL_RTC_SetTime+0xfa>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c30:	4620      	mov	r0, r4
 8002c32:	f7ff feeb 	bl	8002a0c <HAL_RTC_WaitForSynchro>
 8002c36:	2800      	cmp	r0, #0
 8002c38:	d0d7      	beq.n	8002bea <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	22ff      	movs	r2, #255	; 0xff
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c40:	2304      	movs	r3, #4
 8002c42:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002c44:	2300      	movs	r3, #0
 8002c46:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002c48:	2701      	movs	r7, #1
 8002c4a:	e000      	b.n	8002c4e <HAL_RTC_SetTime+0xfa>
  __HAL_LOCK(hrtc);
 8002c4c:	2702      	movs	r7, #2
}
 8002c4e:	4638      	mov	r0, r7
 8002c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c52 <HAL_RTC_SetDate>:
{
 8002c52:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8002c54:	7f03      	ldrb	r3, [r0, #28]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d065      	beq.n	8002d26 <HAL_RTC_SetDate+0xd4>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002c5e:	2302      	movs	r3, #2
 8002c60:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c62:	b93a      	cbnz	r2, 8002c74 <HAL_RTC_SetDate+0x22>
 8002c64:	784b      	ldrb	r3, [r1, #1]
 8002c66:	f013 0f10 	tst.w	r3, #16
 8002c6a:	d003      	beq.n	8002c74 <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c6c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002c70:	330a      	adds	r3, #10
 8002c72:	704b      	strb	r3, [r1, #1]
 8002c74:	460e      	mov	r6, r1
 8002c76:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8002c78:	2a00      	cmp	r2, #0
 8002c7a:	d132      	bne.n	8002ce2 <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c7c:	78c8      	ldrb	r0, [r1, #3]
 8002c7e:	f7ff ff5e 	bl	8002b3e <RTC_ByteToBcd2>
 8002c82:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002c84:	7870      	ldrb	r0, [r6, #1]
 8002c86:	f7ff ff5a 	bl	8002b3e <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c8a:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002c8e:	78b0      	ldrb	r0, [r6, #2]
 8002c90:	f7ff ff55 	bl	8002b3e <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002c94:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));   
 8002c96:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c98:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	22ca      	movs	r2, #202	; 0xca
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	2253      	movs	r2, #83	; 0x53
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f7ff fec8 	bl	8002a3e <RTC_EnterInitMode>
 8002cae:	4606      	mov	r6, r0
 8002cb0:	bb10      	cbnz	r0, 8002cf8 <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8002cb8:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8002cbc:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002cbe:	6822      	ldr	r2, [r4, #0]
 8002cc0:	68d3      	ldr	r3, [r2, #12]
 8002cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cc6:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f013 0f20 	tst.w	r3, #32
 8002cd0:	d01b      	beq.n	8002d0a <HAL_RTC_SetDate+0xb8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	22ff      	movs	r2, #255	; 0xff
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8002ce0:	e022      	b.n	8002d28 <HAL_RTC_SetDate+0xd6>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8002ce2:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8002ce4:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002ce6:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002ce8:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002cea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002cee:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8002cf0:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002cf2:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8002cf6:	e7d1      	b.n	8002c9c <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	22ff      	movs	r2, #255	; 0xff
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002cfe:	2304      	movs	r3, #4
 8002d00:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002d02:	2300      	movs	r3, #0
 8002d04:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002d06:	2601      	movs	r6, #1
 8002d08:	e00e      	b.n	8002d28 <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f7ff fe7e 	bl	8002a0c <HAL_RTC_WaitForSynchro>
 8002d10:	2800      	cmp	r0, #0
 8002d12:	d0de      	beq.n	8002cd2 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	22ff      	movs	r2, #255	; 0xff
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d1a:	2304      	movs	r3, #4
 8002d1c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002d1e:	2300      	movs	r3, #0
 8002d20:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002d22:	2601      	movs	r6, #1
 8002d24:	e000      	b.n	8002d28 <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 8002d26:	2602      	movs	r6, #2
}
 8002d28:	4630      	mov	r0, r6
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}

08002d2c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002d2c:	0903      	lsrs	r3, r0, #4
 8002d2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002d32:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 8002d34:	f000 000f 	and.w	r0, r0, #15
 8002d38:	4410      	add	r0, r2
}
 8002d3a:	b2c0      	uxtb	r0, r0
 8002d3c:	4770      	bx	lr

08002d3e <HAL_RTC_GetTime>:
{
 8002d3e:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d40:	6803      	ldr	r3, [r0, #0]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d46:	6803      	ldr	r3, [r0, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002d4e:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002d50:	6803      	ldr	r3, [r0, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002d58:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002d5c:	0c1d      	lsrs	r5, r3, #16
 8002d5e:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8002d62:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8002d64:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8002d68:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002d6a:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8002d6e:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002d70:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8002d74:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8002d76:	b95a      	cbnz	r2, 8002d90 <HAL_RTC_GetTime+0x52>
 8002d78:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002d7a:	f7ff ffd7 	bl	8002d2c <RTC_Bcd2ToByte>
 8002d7e:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002d80:	4630      	mov	r0, r6
 8002d82:	f7ff ffd3 	bl	8002d2c <RTC_Bcd2ToByte>
 8002d86:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f7ff ffcf 	bl	8002d2c <RTC_Bcd2ToByte>
 8002d8e:	70a8      	strb	r0, [r5, #2]
}
 8002d90:	2000      	movs	r0, #0
 8002d92:	bd70      	pop	{r4, r5, r6, pc}

08002d94 <HAL_RTC_GetDate>:
{
 8002d94:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8002d96:	6803      	ldr	r3, [r0, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d9e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002da2:	0c18      	lsrs	r0, r3, #16
 8002da4:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002da6:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8002daa:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002dac:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8002db0:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8002db2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002db6:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8002db8:	b95a      	cbnz	r2, 8002dd2 <HAL_RTC_GetDate+0x3e>
 8002dba:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002dbc:	f7ff ffb6 	bl	8002d2c <RTC_Bcd2ToByte>
 8002dc0:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	f7ff ffb2 	bl	8002d2c <RTC_Bcd2ToByte>
 8002dc8:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8002dca:	4628      	mov	r0, r5
 8002dcc:	f7ff ffae 	bl	8002d2c <RTC_Bcd2ToByte>
 8002dd0:	70a0      	strb	r0, [r4, #2]
}
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002dd8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dda:	7f03      	ldrb	r3, [r0, #28]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d06d      	beq.n	8002ebc <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 8002de0:	4615      	mov	r5, r2
 8002de2:	460e      	mov	r6, r1
 8002de4:	4604      	mov	r4, r0
 8002de6:	2301      	movs	r3, #1
 8002de8:	7703      	strb	r3, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002dea:	2302      	movs	r3, #2
 8002dec:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dee:	6803      	ldr	r3, [r0, #0]
 8002df0:	22ca      	movs	r2, #202	; 0xca
 8002df2:	625a      	str	r2, [r3, #36]	; 0x24
 8002df4:	6803      	ldr	r3, [r0, #0]
 8002df6:	2253      	movs	r2, #83	; 0x53
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
 8002dfa:	6803      	ldr	r3, [r0, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002e02:	d015      	beq.n	8002e30 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
    tickstart = HAL_GetTick();
 8002e04:	f7fd ff04 	bl	8000c10 <HAL_GetTick>
 8002e08:	4607      	mov	r7, r0
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f013 0f04 	tst.w	r3, #4
 8002e12:	d00d      	beq.n	8002e30 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e14:	f7fd fefc 	bl	8000c10 <HAL_GetTick>
 8002e18:	1bc0      	subs	r0, r0, r7
 8002e1a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e1e:	d9f4      	bls.n	8002e0a <HAL_RTCEx_SetWakeUpTimer_IT+0x32>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	22ff      	movs	r2, #255	; 0xff
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e26:	2003      	movs	r0, #3
 8002e28:	7760      	strb	r0, [r4, #29]

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	7723      	strb	r3, [r4, #28]

       return HAL_TIMEOUT;
 8002e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002e30:	6822      	ldr	r2, [r4, #0]
 8002e32:	6893      	ldr	r3, [r2, #8]
 8002e34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e38:	6093      	str	r3, [r2, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002e3a:	6822      	ldr	r2, [r4, #0]
 8002e3c:	68d3      	ldr	r3, [r2, #12]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002e44:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002e46:	f7fd fee3 	bl	8000c10 <HAL_GetTick>
 8002e4a:	4607      	mov	r7, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	68d8      	ldr	r0, [r3, #12]
 8002e50:	f010 0f04 	tst.w	r0, #4
 8002e54:	d10d      	bne.n	8002e72 <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002e56:	f7fd fedb 	bl	8000c10 <HAL_GetTick>
 8002e5a:	1bc0      	subs	r0, r0, r7
 8002e5c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e60:	d9f4      	bls.n	8002e4c <HAL_RTCEx_SetWakeUpTimer_IT+0x74>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	22ff      	movs	r2, #255	; 0xff
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e68:	2003      	movs	r0, #3
 8002e6a:	7760      	strb	r0, [r4, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	7723      	strb	r3, [r4, #28]

      return HAL_TIMEOUT;
 8002e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002e72:	615e      	str	r6, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002e74:	6822      	ldr	r2, [r4, #0]
 8002e76:	6893      	ldr	r3, [r2, #8]
 8002e78:	f023 0307 	bic.w	r3, r3, #7
 8002e7c:	6093      	str	r3, [r2, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002e7e:	6822      	ldr	r2, [r4, #0]
 8002e80:	6893      	ldr	r3, [r2, #8]
 8002e82:	431d      	orrs	r5, r3
 8002e84:	6095      	str	r5, [r2, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e8e:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e96:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	6893      	ldr	r3, [r2, #8]
 8002e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea0:	6093      	str	r3, [r2, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002ea2:	6822      	ldr	r2, [r4, #0]
 8002ea4:	6893      	ldr	r3, [r2, #8]
 8002ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eaa:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	22ff      	movs	r2, #255	; 0xff
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	7763      	strb	r3, [r4, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	7720      	strb	r0, [r4, #28]

  return HAL_OK;
 8002eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8002ebc:	2002      	movs	r0, #2
}
 8002ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ec0:	40010400 	.word	0x40010400

08002ec4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002ec4:	4770      	bx	lr
	...

08002ec8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
{
 8002ec8:	b510      	push	{r4, lr}
 8002eca:	4604      	mov	r4, r0
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8002ecc:	6803      	ldr	r3, [r0, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002ed6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8002edc:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	7763      	strb	r3, [r4, #29]
 8002ee2:	bd10      	pop	{r4, pc}
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002ee4:	f7ff ffee 	bl	8002ec4 <HAL_RTCEx_WakeUpTimerEventCallback>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002ee8:	6822      	ldr	r2, [r4, #0]
 8002eea:	68d3      	ldr	r3, [r2, #12]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002ef2:	60d3      	str	r3, [r2, #12]
 8002ef4:	e7ef      	b.n	8002ed6 <HAL_RTCEx_WakeUpTimerIRQHandler+0xe>
 8002ef6:	bf00      	nop
 8002ef8:	40010400 	.word	0x40010400

08002efc <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002efc:	6803      	ldr	r3, [r0, #0]
 8002efe:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002f00:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002f04:	4770      	bx	lr

08002f06 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002f06:	6803      	ldr	r3, [r0, #0]
 8002f08:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002f0a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8002f0e:	4770      	bx	lr

08002f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f10:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f12:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f14:	6a04      	ldr	r4, [r0, #32]
 8002f16:	f024 0401 	bic.w	r4, r4, #1
 8002f1a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002f1c:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f1e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f22:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f26:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002f2a:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f2c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f2e:	6203      	str	r3, [r0, #32]
}
 8002f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f36:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f38:	6a03      	ldr	r3, [r0, #32]
 8002f3a:	f023 0310 	bic.w	r3, r3, #16
 8002f3e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f40:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002f42:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f44:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f48:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f50:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f54:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f56:	6203      	str	r3, [r0, #32]
}
 8002f58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002f5e:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002f64:	f041 0107 	orr.w	r1, r1, #7
 8002f68:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002f6a:	6083      	str	r3, [r0, #8]
 8002f6c:	4770      	bx	lr

08002f6e <HAL_TIM_OC_DelayElapsedCallback>:
{
 8002f6e:	4770      	bx	lr

08002f70 <HAL_TIM_IC_CaptureCallback>:
{
 8002f70:	4770      	bx	lr

08002f72 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8002f72:	4770      	bx	lr

08002f74 <HAL_TIM_TriggerCallback>:
{
 8002f74:	4770      	bx	lr

08002f76 <HAL_TIM_IRQHandler>:
{
 8002f76:	b510      	push	{r4, lr}
 8002f78:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f7a:	6803      	ldr	r3, [r0, #0]
 8002f7c:	691a      	ldr	r2, [r3, #16]
 8002f7e:	f012 0f02 	tst.w	r2, #2
 8002f82:	d011      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	f012 0f02 	tst.w	r2, #2
 8002f8a:	d00d      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f8c:	f06f 0202 	mvn.w	r2, #2
 8002f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f92:	2301      	movs	r3, #1
 8002f94:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f96:	6803      	ldr	r3, [r0, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f013 0f03 	tst.w	r3, #3
 8002f9e:	d079      	beq.n	8003094 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002fa0:	f7ff ffe6 	bl	8002f70 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	f012 0f04 	tst.w	r2, #4
 8002fb0:	d012      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	f012 0f04 	tst.w	r2, #4
 8002fb8:	d00e      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fba:	f06f 0204 	mvn.w	r2, #4
 8002fbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002fcc:	d068      	beq.n	80030a0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f7ff ffce 	bl	8002f70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	f012 0f08 	tst.w	r2, #8
 8002fe0:	d012      	beq.n	8003008 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	f012 0f08 	tst.w	r2, #8
 8002fe8:	d00e      	beq.n	8003008 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fea:	f06f 0208 	mvn.w	r2, #8
 8002fee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ff4:	6823      	ldr	r3, [r4, #0]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	f013 0f03 	tst.w	r3, #3
 8002ffc:	d057      	beq.n	80030ae <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffe:	4620      	mov	r0, r4
 8003000:	f7ff ffb6 	bl	8002f70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003004:	2300      	movs	r3, #0
 8003006:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	f012 0f10 	tst.w	r2, #16
 8003010:	d012      	beq.n	8003038 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	f012 0f10 	tst.w	r2, #16
 8003018:	d00e      	beq.n	8003038 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800301a:	f06f 0210 	mvn.w	r2, #16
 800301e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003020:	2308      	movs	r3, #8
 8003022:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f413 7f40 	tst.w	r3, #768	; 0x300
 800302c:	d046      	beq.n	80030bc <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800302e:	4620      	mov	r0, r4
 8003030:	f7ff ff9e 	bl	8002f70 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003034:	2300      	movs	r3, #0
 8003036:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003038:	6823      	ldr	r3, [r4, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	f012 0f01 	tst.w	r2, #1
 8003040:	d003      	beq.n	800304a <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	f012 0f01 	tst.w	r2, #1
 8003048:	d13f      	bne.n	80030ca <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003052:	d003      	beq.n	800305c <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	f012 0f80 	tst.w	r2, #128	; 0x80
 800305a:	d13d      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003064:	d003      	beq.n	800306e <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	f012 0f80 	tst.w	r2, #128	; 0x80
 800306c:	d13b      	bne.n	80030e6 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003076:	d003      	beq.n	8003080 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800307e:	d139      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	f012 0f20 	tst.w	r2, #32
 8003088:	d003      	beq.n	8003092 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	f012 0f20 	tst.w	r2, #32
 8003090:	d137      	bne.n	8003102 <HAL_TIM_IRQHandler+0x18c>
 8003092:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003094:	f7ff ff6b 	bl	8002f6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003098:	4620      	mov	r0, r4
 800309a:	f7ff ff6a 	bl	8002f72 <HAL_TIM_PWM_PulseFinishedCallback>
 800309e:	e781      	b.n	8002fa4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a0:	4620      	mov	r0, r4
 80030a2:	f7ff ff64 	bl	8002f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a6:	4620      	mov	r0, r4
 80030a8:	f7ff ff63 	bl	8002f72 <HAL_TIM_PWM_PulseFinishedCallback>
 80030ac:	e792      	b.n	8002fd4 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ae:	4620      	mov	r0, r4
 80030b0:	f7ff ff5d 	bl	8002f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80030b4:	4620      	mov	r0, r4
 80030b6:	f7ff ff5c 	bl	8002f72 <HAL_TIM_PWM_PulseFinishedCallback>
 80030ba:	e7a3      	b.n	8003004 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030bc:	4620      	mov	r0, r4
 80030be:	f7ff ff56 	bl	8002f6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c2:	4620      	mov	r0, r4
 80030c4:	f7ff ff55 	bl	8002f72 <HAL_TIM_PWM_PulseFinishedCallback>
 80030c8:	e7b4      	b.n	8003034 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030ca:	f06f 0201 	mvn.w	r2, #1
 80030ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80030d0:	4620      	mov	r0, r4
 80030d2:	f000 feaf 	bl	8003e34 <HAL_TIM_PeriodElapsedCallback>
 80030d6:	e7b8      	b.n	800304a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80030de:	4620      	mov	r0, r4
 80030e0:	f000 f93b 	bl	800335a <HAL_TIMEx_BreakCallback>
 80030e4:	e7ba      	b.n	800305c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030ea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80030ec:	4620      	mov	r0, r4
 80030ee:	f000 f935 	bl	800335c <HAL_TIMEx_Break2Callback>
 80030f2:	e7bc      	b.n	800306e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030f8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80030fa:	4620      	mov	r0, r4
 80030fc:	f7ff ff3a 	bl	8002f74 <HAL_TIM_TriggerCallback>
 8003100:	e7be      	b.n	8003080 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003102:	f06f 0220 	mvn.w	r2, #32
 8003106:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003108:	4620      	mov	r0, r4
 800310a:	f000 f925 	bl	8003358 <HAL_TIMEx_CommutationCallback>
}
 800310e:	e7c0      	b.n	8003092 <HAL_TIM_IRQHandler+0x11c>

08003110 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003110:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003112:	4a23      	ldr	r2, [pc, #140]	; (80031a0 <TIM_Base_SetConfig+0x90>)
 8003114:	4290      	cmp	r0, r2
 8003116:	d03d      	beq.n	8003194 <TIM_Base_SetConfig+0x84>
 8003118:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800311c:	d03a      	beq.n	8003194 <TIM_Base_SetConfig+0x84>
 800311e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003122:	4290      	cmp	r0, r2
 8003124:	d036      	beq.n	8003194 <TIM_Base_SetConfig+0x84>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003126:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <TIM_Base_SetConfig+0x90>)
 8003128:	4290      	cmp	r0, r2
 800312a:	d012      	beq.n	8003152 <TIM_Base_SetConfig+0x42>
 800312c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003130:	d00f      	beq.n	8003152 <TIM_Base_SetConfig+0x42>
 8003132:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003136:	4290      	cmp	r0, r2
 8003138:	d00b      	beq.n	8003152 <TIM_Base_SetConfig+0x42>
 800313a:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 800313e:	4290      	cmp	r0, r2
 8003140:	d007      	beq.n	8003152 <TIM_Base_SetConfig+0x42>
 8003142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003146:	4290      	cmp	r0, r2
 8003148:	d003      	beq.n	8003152 <TIM_Base_SetConfig+0x42>
 800314a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800314e:	4290      	cmp	r0, r2
 8003150:	d103      	bne.n	800315a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003156:	68ca      	ldr	r2, [r1, #12]
 8003158:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800315a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800315e:	694a      	ldr	r2, [r1, #20]
 8003160:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003162:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003164:	688b      	ldr	r3, [r1, #8]
 8003166:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003168:	680b      	ldr	r3, [r1, #0]
 800316a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <TIM_Base_SetConfig+0x90>)
 800316e:	4298      	cmp	r0, r3
 8003170:	d00b      	beq.n	800318a <TIM_Base_SetConfig+0x7a>
 8003172:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8003176:	4298      	cmp	r0, r3
 8003178:	d007      	beq.n	800318a <TIM_Base_SetConfig+0x7a>
 800317a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800317e:	4298      	cmp	r0, r3
 8003180:	d003      	beq.n	800318a <TIM_Base_SetConfig+0x7a>
 8003182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003186:	4298      	cmp	r0, r3
 8003188:	d101      	bne.n	800318e <TIM_Base_SetConfig+0x7e>
    TIMx->RCR = Structure->RepetitionCounter;
 800318a:	690b      	ldr	r3, [r1, #16]
 800318c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800318e:	2301      	movs	r3, #1
 8003190:	6143      	str	r3, [r0, #20]
 8003192:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003198:	684a      	ldr	r2, [r1, #4]
 800319a:	4313      	orrs	r3, r2
 800319c:	e7c3      	b.n	8003126 <TIM_Base_SetConfig+0x16>
 800319e:	bf00      	nop
 80031a0:	40012c00 	.word	0x40012c00

080031a4 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80031a4:	b1a8      	cbz	r0, 80031d2 <HAL_TIM_Base_Init+0x2e>
{ 
 80031a6:	b510      	push	{r4, lr}
 80031a8:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80031aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80031ae:	b15b      	cbz	r3, 80031c8 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80031b0:	2302      	movs	r3, #2
 80031b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80031b6:	1d21      	adds	r1, r4, #4
 80031b8:	6820      	ldr	r0, [r4, #0]
 80031ba:	f7ff ffa9 	bl	8003110 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80031be:	2301      	movs	r3, #1
 80031c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80031c4:	2000      	movs	r0, #0
 80031c6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80031c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80031cc:	f001 f972 	bl	80044b4 <HAL_TIM_Base_MspInit>
 80031d0:	e7ee      	b.n	80031b0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80031d2:	2001      	movs	r0, #1
 80031d4:	4770      	bx	lr

080031d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031d6:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80031d8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031da:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031de:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80031e2:	4319      	orrs	r1, r3
 80031e4:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e6:	6084      	str	r4, [r0, #8]
} 
 80031e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80031f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	f000 8082 	beq.w	80032fe <HAL_TIM_ConfigClockSource+0x10e>
{
 80031fa:	b510      	push	{r4, lr}
 80031fc:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80031fe:	2301      	movs	r3, #1
 8003200:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	2302      	movs	r3, #2
 8003206:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800320a:	6802      	ldr	r2, [r0, #0]
 800320c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800320e:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <HAL_TIM_ConfigClockSource+0x114>)
 8003210:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8003212:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003214:	680b      	ldr	r3, [r1, #0]
 8003216:	2b40      	cmp	r3, #64	; 0x40
 8003218:	d05d      	beq.n	80032d6 <HAL_TIM_ConfigClockSource+0xe6>
 800321a:	d910      	bls.n	800323e <HAL_TIM_ConfigClockSource+0x4e>
 800321c:	2b70      	cmp	r3, #112	; 0x70
 800321e:	d040      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0xb2>
 8003220:	d81f      	bhi.n	8003262 <HAL_TIM_ConfigClockSource+0x72>
 8003222:	2b50      	cmp	r3, #80	; 0x50
 8003224:	d04d      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0xd2>
 8003226:	2b60      	cmp	r3, #96	; 0x60
 8003228:	d134      	bne.n	8003294 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800322a:	68ca      	ldr	r2, [r1, #12]
 800322c:	6849      	ldr	r1, [r1, #4]
 800322e:	6820      	ldr	r0, [r4, #0]
 8003230:	f7ff fe81 	bl	8002f36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003234:	2160      	movs	r1, #96	; 0x60
 8003236:	6820      	ldr	r0, [r4, #0]
 8003238:	f7ff fe91 	bl	8002f5e <TIM_ITRx_SetConfig>
    break;
 800323c:	e02a      	b.n	8003294 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 800323e:	2b10      	cmp	r3, #16
 8003240:	d053      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0xfa>
 8003242:	d908      	bls.n	8003256 <HAL_TIM_ConfigClockSource+0x66>
 8003244:	2b20      	cmp	r3, #32
 8003246:	d055      	beq.n	80032f4 <HAL_TIM_ConfigClockSource+0x104>
 8003248:	2b30      	cmp	r3, #48	; 0x30
 800324a:	d123      	bne.n	8003294 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800324c:	2130      	movs	r1, #48	; 0x30
 800324e:	6820      	ldr	r0, [r4, #0]
 8003250:	f7ff fe85 	bl	8002f5e <TIM_ITRx_SetConfig>
    break;
 8003254:	e01e      	b.n	8003294 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8003256:	b9eb      	cbnz	r3, 8003294 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8003258:	2100      	movs	r1, #0
 800325a:	6820      	ldr	r0, [r4, #0]
 800325c:	f7ff fe7f 	bl	8002f5e <TIM_ITRx_SetConfig>
    break;
 8003260:	e018      	b.n	8003294 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8003262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003266:	d00e      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x96>
 8003268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800326c:	d112      	bne.n	8003294 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance, 
 800326e:	68cb      	ldr	r3, [r1, #12]
 8003270:	684a      	ldr	r2, [r1, #4]
 8003272:	6889      	ldr	r1, [r1, #8]
 8003274:	6820      	ldr	r0, [r4, #0]
 8003276:	f7ff ffae 	bl	80031d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800327a:	6822      	ldr	r2, [r4, #0]
 800327c:	6893      	ldr	r3, [r2, #8]
 800327e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003282:	6093      	str	r3, [r2, #8]
    break;
 8003284:	e006      	b.n	8003294 <HAL_TIM_ConfigClockSource+0xa4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	6893      	ldr	r3, [r2, #8]
 800328a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328e:	f023 0307 	bic.w	r3, r3, #7
 8003292:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003294:	2301      	movs	r3, #1
 8003296:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800329a:	2000      	movs	r0, #0
 800329c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80032a0:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 80032a2:	68cb      	ldr	r3, [r1, #12]
 80032a4:	684a      	ldr	r2, [r1, #4]
 80032a6:	6889      	ldr	r1, [r1, #8]
 80032a8:	6820      	ldr	r0, [r4, #0]
 80032aa:	f7ff ff94 	bl	80031d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032ae:	6822      	ldr	r2, [r4, #0]
 80032b0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80032be:	6093      	str	r3, [r2, #8]
    break;
 80032c0:	e7e8      	b.n	8003294 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80032c2:	68ca      	ldr	r2, [r1, #12]
 80032c4:	6849      	ldr	r1, [r1, #4]
 80032c6:	6820      	ldr	r0, [r4, #0]
 80032c8:	f7ff fe22 	bl	8002f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032cc:	2150      	movs	r1, #80	; 0x50
 80032ce:	6820      	ldr	r0, [r4, #0]
 80032d0:	f7ff fe45 	bl	8002f5e <TIM_ITRx_SetConfig>
    break;
 80032d4:	e7de      	b.n	8003294 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80032d6:	68ca      	ldr	r2, [r1, #12]
 80032d8:	6849      	ldr	r1, [r1, #4]
 80032da:	6820      	ldr	r0, [r4, #0]
 80032dc:	f7ff fe18 	bl	8002f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032e0:	2140      	movs	r1, #64	; 0x40
 80032e2:	6820      	ldr	r0, [r4, #0]
 80032e4:	f7ff fe3b 	bl	8002f5e <TIM_ITRx_SetConfig>
    break;
 80032e8:	e7d4      	b.n	8003294 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80032ea:	2110      	movs	r1, #16
 80032ec:	6820      	ldr	r0, [r4, #0]
 80032ee:	f7ff fe36 	bl	8002f5e <TIM_ITRx_SetConfig>
    break;
 80032f2:	e7cf      	b.n	8003294 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80032f4:	2120      	movs	r1, #32
 80032f6:	6820      	ldr	r0, [r4, #0]
 80032f8:	f7ff fe31 	bl	8002f5e <TIM_ITRx_SetConfig>
    break;
 80032fc:	e7ca      	b.n	8003294 <HAL_TIM_ConfigClockSource+0xa4>
  __HAL_LOCK(htim);
 80032fe:	2002      	movs	r0, #2
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	fffe0088 	.word	0xfffe0088

08003308 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003308:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800330c:	2b01      	cmp	r3, #1
 800330e:	d01f      	beq.n	8003350 <HAL_TIMEx_MasterConfigSynchronization+0x48>
{
 8003310:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003312:	2301      	movs	r3, #1
 8003314:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003318:	6804      	ldr	r4, [r0, #0]
 800331a:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800331c:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800331e:	4d0d      	ldr	r5, [pc, #52]	; (8003354 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 8003320:	42ac      	cmp	r4, r5
 8003322:	d010      	beq.n	8003346 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003328:	680d      	ldr	r5, [r1, #0]
 800332a:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800332c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003330:	6889      	ldr	r1, [r1, #8]
 8003332:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003334:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003336:	6803      	ldr	r3, [r0, #0]
 8003338:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800333a:	2300      	movs	r3, #0
 800333c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8003340:	4618      	mov	r0, r3
} 
 8003342:	bc30      	pop	{r4, r5}
 8003344:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003346:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800334a:	684d      	ldr	r5, [r1, #4]
 800334c:	432b      	orrs	r3, r5
 800334e:	e7e9      	b.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
  __HAL_LOCK(htim);
 8003350:	2002      	movs	r0, #2
 8003352:	4770      	bx	lr
 8003354:	40012c00 	.word	0x40012c00

08003358 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003358:	4770      	bx	lr

0800335a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800335a:	4770      	bx	lr

0800335c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800335c:	4770      	bx	lr

0800335e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800335e:	6802      	ldr	r2, [r0, #0]
 8003360:	6813      	ldr	r3, [r2, #0]
 8003362:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003366:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003368:	6802      	ldr	r2, [r0, #0]
 800336a:	6893      	ldr	r3, [r2, #8]
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003372:	2320      	movs	r3, #32
 8003374:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8003378:	4770      	bx	lr

0800337a <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 800337a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b20      	cmp	r3, #32
 8003382:	d001      	beq.n	8003388 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8003384:	2002      	movs	r0, #2
 8003386:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8003388:	2900      	cmp	r1, #0
 800338a:	d047      	beq.n	800341c <HAL_UART_Receive_IT+0xa2>
 800338c:	2a00      	cmp	r2, #0
 800338e:	d047      	beq.n	8003420 <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 8003390:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003394:	2b01      	cmp	r3, #1
 8003396:	d045      	beq.n	8003424 <HAL_UART_Receive_IT+0xaa>
 8003398:	2301      	movs	r3, #1
 800339a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 800339e:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80033a0:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 80033a4:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80033a8:	6883      	ldr	r3, [r0, #8]
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ae:	d006      	beq.n	80033be <HAL_UART_Receive_IT+0x44>
 80033b0:	b9a3      	cbnz	r3, 80033dc <HAL_UART_Receive_IT+0x62>
 80033b2:	6903      	ldr	r3, [r0, #16]
 80033b4:	b973      	cbnz	r3, 80033d4 <HAL_UART_Receive_IT+0x5a>
 80033b6:	23ff      	movs	r3, #255	; 0xff
 80033b8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80033bc:	e011      	b.n	80033e2 <HAL_UART_Receive_IT+0x68>
 80033be:	6903      	ldr	r3, [r0, #16]
 80033c0:	b923      	cbnz	r3, 80033cc <HAL_UART_Receive_IT+0x52>
 80033c2:	f240 13ff 	movw	r3, #511	; 0x1ff
 80033c6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80033ca:	e00a      	b.n	80033e2 <HAL_UART_Receive_IT+0x68>
 80033cc:	23ff      	movs	r3, #255	; 0xff
 80033ce:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80033d2:	e006      	b.n	80033e2 <HAL_UART_Receive_IT+0x68>
 80033d4:	237f      	movs	r3, #127	; 0x7f
 80033d6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80033da:	e002      	b.n	80033e2 <HAL_UART_Receive_IT+0x68>
 80033dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033e0:	d012      	beq.n	8003408 <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033e6:	2222      	movs	r2, #34	; 0x22
 80033e8:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 80033ec:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f0:	6801      	ldr	r1, [r0, #0]
 80033f2:	688a      	ldr	r2, [r1, #8]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80033fa:	6801      	ldr	r1, [r0, #0]
 80033fc:	680a      	ldr	r2, [r1, #0]
 80033fe:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003402:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8003404:	4618      	mov	r0, r3
 8003406:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8003408:	6903      	ldr	r3, [r0, #16]
 800340a:	b91b      	cbnz	r3, 8003414 <HAL_UART_Receive_IT+0x9a>
 800340c:	237f      	movs	r3, #127	; 0x7f
 800340e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003412:	e7e6      	b.n	80033e2 <HAL_UART_Receive_IT+0x68>
 8003414:	233f      	movs	r3, #63	; 0x3f
 8003416:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800341a:	e7e2      	b.n	80033e2 <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 800341c:	2001      	movs	r0, #1
 800341e:	4770      	bx	lr
 8003420:	2001      	movs	r0, #1
 8003422:	4770      	bx	lr
    __HAL_LOCK(huart);
 8003424:	2002      	movs	r0, #2
}
 8003426:	4770      	bx	lr

08003428 <HAL_UART_TxCpltCallback>:
{
 8003428:	4770      	bx	lr

0800342a <HAL_UART_ErrorCallback>:
{
 800342a:	4770      	bx	lr

0800342c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800342c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800342e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003436:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 800343a:	f7ff fff6 	bl	800342a <HAL_UART_ErrorCallback>
 800343e:	bd08      	pop	{r3, pc}

08003440 <UART_SetConfig>:
{
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003444:	6883      	ldr	r3, [r0, #8]
 8003446:	6902      	ldr	r2, [r0, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	6942      	ldr	r2, [r0, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	69c2      	ldr	r2, [r0, #28]
 8003450:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003452:	6801      	ldr	r1, [r0, #0]
 8003454:	6808      	ldr	r0, [r1, #0]
 8003456:	4a64      	ldr	r2, [pc, #400]	; (80035e8 <UART_SetConfig+0x1a8>)
 8003458:	4002      	ands	r2, r0
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800345e:	6822      	ldr	r2, [r4, #0]
 8003460:	6853      	ldr	r3, [r2, #4]
 8003462:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003466:	68e1      	ldr	r1, [r4, #12]
 8003468:	430b      	orrs	r3, r1
 800346a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800346c:	69a3      	ldr	r3, [r4, #24]
 800346e:	6a22      	ldr	r2, [r4, #32]
 8003470:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003472:	6821      	ldr	r1, [r4, #0]
 8003474:	688a      	ldr	r2, [r1, #8]
 8003476:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800347a:	4313      	orrs	r3, r2
 800347c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800347e:	6825      	ldr	r5, [r4, #0]
 8003480:	4b5a      	ldr	r3, [pc, #360]	; (80035ec <UART_SetConfig+0x1ac>)
 8003482:	429d      	cmp	r5, r3
 8003484:	d015      	beq.n	80034b2 <UART_SetConfig+0x72>
 8003486:	4b5a      	ldr	r3, [pc, #360]	; (80035f0 <UART_SetConfig+0x1b0>)
 8003488:	429d      	cmp	r5, r3
 800348a:	d029      	beq.n	80034e0 <UART_SetConfig+0xa0>
 800348c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003490:	429d      	cmp	r5, r3
 8003492:	d021      	beq.n	80034d8 <UART_SetConfig+0x98>
 8003494:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003496:	69e2      	ldr	r2, [r4, #28]
 8003498:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800349c:	d022      	beq.n	80034e4 <UART_SetConfig+0xa4>
    switch (clocksource)
 800349e:	2b08      	cmp	r3, #8
 80034a0:	f200 809f 	bhi.w	80035e2 <UART_SetConfig+0x1a2>
 80034a4:	e8df f003 	tbb	[pc, r3]
 80034a8:	9d7c7166 	.word	0x9d7c7166
 80034ac:	9d9d9d88 	.word	0x9d9d9d88
 80034b0:	93          	.byte	0x93
 80034b1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034b2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d809      	bhi.n	80034d4 <UART_SetConfig+0x94>
 80034c0:	e8df f003 	tbb	[pc, r3]
 80034c4:	0c060402 	.word	0x0c060402
 80034c8:	2300      	movs	r3, #0
 80034ca:	e7e4      	b.n	8003496 <UART_SetConfig+0x56>
 80034cc:	2304      	movs	r3, #4
 80034ce:	e7e2      	b.n	8003496 <UART_SetConfig+0x56>
 80034d0:	2308      	movs	r3, #8
 80034d2:	e7e0      	b.n	8003496 <UART_SetConfig+0x56>
 80034d4:	2310      	movs	r3, #16
 80034d6:	e7de      	b.n	8003496 <UART_SetConfig+0x56>
 80034d8:	2300      	movs	r3, #0
 80034da:	e7dc      	b.n	8003496 <UART_SetConfig+0x56>
 80034dc:	2302      	movs	r3, #2
 80034de:	e7da      	b.n	8003496 <UART_SetConfig+0x56>
 80034e0:	2300      	movs	r3, #0
 80034e2:	e7d8      	b.n	8003496 <UART_SetConfig+0x56>
    switch (clocksource)
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d842      	bhi.n	800356e <UART_SetConfig+0x12e>
 80034e8:	e8df f003 	tbb	[pc, r3]
 80034ec:	41221705 	.word	0x41221705
 80034f0:	4141412d 	.word	0x4141412d
 80034f4:	38          	.byte	0x38
 80034f5:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80034f6:	f7ff f987 	bl	8002808 <HAL_RCC_GetPCLK1Freq>
 80034fa:	6862      	ldr	r2, [r4, #4]
 80034fc:	0853      	lsrs	r3, r2, #1
 80034fe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003502:	fbb3 f3f2 	udiv	r3, r3, r2
 8003506:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003508:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 800350a:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800350e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003512:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8003514:	6822      	ldr	r2, [r4, #0]
 8003516:	60d3      	str	r3, [r2, #12]
 8003518:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800351a:	f7ff f98b 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 800351e:	6862      	ldr	r2, [r4, #4]
 8003520:	0853      	lsrs	r3, r2, #1
 8003522:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003526:	fbb3 f3f2 	udiv	r3, r3, r2
 800352a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800352c:	2000      	movs	r0, #0
        break;
 800352e:	e7ec      	b.n	800350a <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003530:	6862      	ldr	r2, [r4, #4]
 8003532:	0853      	lsrs	r3, r2, #1
 8003534:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003538:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800353c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003540:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003542:	2000      	movs	r0, #0
        break;
 8003544:	e7e1      	b.n	800350a <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003546:	f7ff f837 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 800354a:	6862      	ldr	r2, [r4, #4]
 800354c:	0853      	lsrs	r3, r2, #1
 800354e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003552:	fbb3 f3f2 	udiv	r3, r3, r2
 8003556:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003558:	2000      	movs	r0, #0
        break;
 800355a:	e7d6      	b.n	800350a <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800355c:	6862      	ldr	r2, [r4, #4]
 800355e:	0853      	lsrs	r3, r2, #1
 8003560:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003564:	fbb3 f3f2 	udiv	r3, r3, r2
 8003568:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800356a:	2000      	movs	r0, #0
        break;
 800356c:	e7cd      	b.n	800350a <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 800356e:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8003570:	2300      	movs	r3, #0
 8003572:	e7ca      	b.n	800350a <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003574:	f7ff f948 	bl	8002808 <HAL_RCC_GetPCLK1Freq>
 8003578:	6863      	ldr	r3, [r4, #4]
 800357a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800357e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003582:	b280      	uxth	r0, r0
 8003584:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003586:	2000      	movs	r0, #0
        break;
 8003588:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800358a:	f7ff f953 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 800358e:	6863      	ldr	r3, [r4, #4]
 8003590:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003594:	fbb0 f0f3 	udiv	r0, r0, r3
 8003598:	b280      	uxth	r0, r0
 800359a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800359c:	2000      	movs	r0, #0
        break;
 800359e:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80035a0:	6862      	ldr	r2, [r4, #4]
 80035a2:	0853      	lsrs	r3, r2, #1
 80035a4:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80035a8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80035ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80035b4:	2000      	movs	r0, #0
        break;
 80035b6:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80035b8:	f7fe fffe 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 80035bc:	6863      	ldr	r3, [r4, #4]
 80035be:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80035c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80035c6:	b280      	uxth	r0, r0
 80035c8:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80035ca:	2000      	movs	r0, #0
        break;
 80035cc:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80035ce:	6862      	ldr	r2, [r4, #4]
 80035d0:	0853      	lsrs	r3, r2, #1
 80035d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80035d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80035da:	b29b      	uxth	r3, r3
 80035dc:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80035de:	2000      	movs	r0, #0
        break;
 80035e0:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 80035e2:	2001      	movs	r0, #1
}
 80035e4:	bd38      	pop	{r3, r4, r5, pc}
 80035e6:	bf00      	nop
 80035e8:	efff69f3 	.word	0xefff69f3
 80035ec:	40013800 	.word	0x40013800
 80035f0:	40004400 	.word	0x40004400

080035f4 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035f6:	f013 0f01 	tst.w	r3, #1
 80035fa:	d006      	beq.n	800360a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035fc:	6802      	ldr	r2, [r0, #0]
 80035fe:	6853      	ldr	r3, [r2, #4]
 8003600:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003604:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003606:	430b      	orrs	r3, r1
 8003608:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800360a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800360c:	f013 0f02 	tst.w	r3, #2
 8003610:	d006      	beq.n	8003620 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003612:	6802      	ldr	r2, [r0, #0]
 8003614:	6853      	ldr	r3, [r2, #4]
 8003616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800361c:	430b      	orrs	r3, r1
 800361e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003620:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003622:	f013 0f04 	tst.w	r3, #4
 8003626:	d006      	beq.n	8003636 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003628:	6802      	ldr	r2, [r0, #0]
 800362a:	6853      	ldr	r3, [r2, #4]
 800362c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003630:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003632:	430b      	orrs	r3, r1
 8003634:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003636:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003638:	f013 0f08 	tst.w	r3, #8
 800363c:	d006      	beq.n	800364c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800363e:	6802      	ldr	r2, [r0, #0]
 8003640:	6853      	ldr	r3, [r2, #4]
 8003642:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003646:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003648:	430b      	orrs	r3, r1
 800364a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800364c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800364e:	f013 0f10 	tst.w	r3, #16
 8003652:	d006      	beq.n	8003662 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003654:	6802      	ldr	r2, [r0, #0]
 8003656:	6893      	ldr	r3, [r2, #8]
 8003658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800365c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800365e:	430b      	orrs	r3, r1
 8003660:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003662:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003664:	f013 0f20 	tst.w	r3, #32
 8003668:	d006      	beq.n	8003678 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800366a:	6802      	ldr	r2, [r0, #0]
 800366c:	6893      	ldr	r3, [r2, #8]
 800366e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003672:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003674:	430b      	orrs	r3, r1
 8003676:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003678:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800367a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800367e:	d00a      	beq.n	8003696 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003680:	6802      	ldr	r2, [r0, #0]
 8003682:	6853      	ldr	r3, [r2, #4]
 8003684:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003688:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800368a:	430b      	orrs	r3, r1
 800368c:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800368e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003694:	d00b      	beq.n	80036ae <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003696:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003698:	f013 0f80 	tst.w	r3, #128	; 0x80
 800369c:	d006      	beq.n	80036ac <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800369e:	6802      	ldr	r2, [r0, #0]
 80036a0:	6853      	ldr	r3, [r2, #4]
 80036a2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80036a6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6053      	str	r3, [r2, #4]
 80036ac:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036ae:	6802      	ldr	r2, [r0, #0]
 80036b0:	6853      	ldr	r3, [r2, #4]
 80036b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036b6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80036b8:	430b      	orrs	r3, r1
 80036ba:	6053      	str	r3, [r2, #4]
 80036bc:	e7eb      	b.n	8003696 <UART_AdvFeatureConfig+0xa2>

080036be <UART_WaitOnFlagUntilTimeout>:
{
 80036be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036c2:	4605      	mov	r5, r0
 80036c4:	460f      	mov	r7, r1
 80036c6:	4616      	mov	r6, r2
 80036c8:	4698      	mov	r8, r3
 80036ca:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	ea37 0303 	bics.w	r3, r7, r3
 80036d4:	bf0c      	ite	eq
 80036d6:	2301      	moveq	r3, #1
 80036d8:	2300      	movne	r3, #0
 80036da:	42b3      	cmp	r3, r6
 80036dc:	d11e      	bne.n	800371c <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80036de:	f1b4 3fff 	cmp.w	r4, #4294967295
 80036e2:	d0f3      	beq.n	80036cc <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80036e4:	b12c      	cbz	r4, 80036f2 <UART_WaitOnFlagUntilTimeout+0x34>
 80036e6:	f7fd fa93 	bl	8000c10 <HAL_GetTick>
 80036ea:	eba0 0008 	sub.w	r0, r0, r8
 80036ee:	4284      	cmp	r4, r0
 80036f0:	d2ec      	bcs.n	80036cc <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f2:	682a      	ldr	r2, [r5, #0]
 80036f4:	6813      	ldr	r3, [r2, #0]
 80036f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036fa:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fc:	682a      	ldr	r2, [r5, #0]
 80036fe:	6893      	ldr	r3, [r2, #8]
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8003706:	2320      	movs	r3, #32
 8003708:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800370c:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8003710:	2300      	movs	r3, #0
 8003712:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8003716:	2003      	movs	r0, #3
 8003718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 800371c:	2000      	movs	r0, #0
}
 800371e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003722 <HAL_UART_Transmit>:
{
 8003722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800372a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b20      	cmp	r3, #32
 8003732:	d004      	beq.n	800373e <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
}
 8003736:	4618      	mov	r0, r3
 8003738:	b002      	add	sp, #8
 800373a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800373e:	4604      	mov	r4, r0
 8003740:	460d      	mov	r5, r1
 8003742:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8003744:	2900      	cmp	r1, #0
 8003746:	d04e      	beq.n	80037e6 <HAL_UART_Transmit+0xc4>
 8003748:	2a00      	cmp	r2, #0
 800374a:	d04e      	beq.n	80037ea <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 800374c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_UART_Transmit+0x36>
 8003754:	2302      	movs	r3, #2
 8003756:	e7ee      	b.n	8003736 <HAL_UART_Transmit+0x14>
 8003758:	2301      	movs	r3, #1
 800375a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375e:	2300      	movs	r3, #0
 8003760:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003762:	2321      	movs	r3, #33	; 0x21
 8003764:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8003768:	f7fd fa52 	bl	8000c10 <HAL_GetTick>
 800376c:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800376e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8003772:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8003776:	e003      	b.n	8003780 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	782a      	ldrb	r2, [r5, #0]
 800377c:	851a      	strh	r2, [r3, #40]	; 0x28
 800377e:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 8003780:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003784:	b29b      	uxth	r3, r3
 8003786:	b1e3      	cbz	r3, 80037c2 <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 8003788:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29b      	uxth	r3, r3
 8003792:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003796:	9600      	str	r6, [sp, #0]
 8003798:	463b      	mov	r3, r7
 800379a:	2200      	movs	r2, #0
 800379c:	2180      	movs	r1, #128	; 0x80
 800379e:	4620      	mov	r0, r4
 80037a0:	f7ff ff8d 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 80037a4:	bb18      	cbnz	r0, 80037ee <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a6:	68a3      	ldr	r3, [r4, #8]
 80037a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ac:	d1e4      	bne.n	8003778 <HAL_UART_Transmit+0x56>
 80037ae:	6923      	ldr	r3, [r4, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e1      	bne.n	8003778 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80037b4:	6822      	ldr	r2, [r4, #0]
 80037b6:	f835 3b02 	ldrh.w	r3, [r5], #2
 80037ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037be:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 80037c0:	e7de      	b.n	8003780 <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037c2:	9600      	str	r6, [sp, #0]
 80037c4:	463b      	mov	r3, r7
 80037c6:	2200      	movs	r2, #0
 80037c8:	2140      	movs	r1, #64	; 0x40
 80037ca:	4620      	mov	r0, r4
 80037cc:	f7ff ff77 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	b108      	cbz	r0, 80037d8 <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e7ae      	b.n	8003736 <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 80037d8:	2220      	movs	r2, #32
 80037da:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80037de:	2200      	movs	r2, #0
 80037e0:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    return HAL_OK;
 80037e4:	e7a7      	b.n	8003736 <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e7a5      	b.n	8003736 <HAL_UART_Transmit+0x14>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e7a3      	b.n	8003736 <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e7a1      	b.n	8003736 <HAL_UART_Transmit+0x14>

080037f2 <UART_CheckIdleState>:
{
 80037f2:	b530      	push	{r4, r5, lr}
 80037f4:	b083      	sub	sp, #12
 80037f6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80037fc:	f7fd fa08 	bl	8000c10 <HAL_GetTick>
 8003800:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f013 0f08 	tst.w	r3, #8
 800380a:	d10e      	bne.n	800382a <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f013 0f04 	tst.w	r3, #4
 8003814:	d117      	bne.n	8003846 <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 8003816:	2320      	movs	r3, #32
 8003818:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 800381c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8003820:	2000      	movs	r0, #0
 8003822:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 8003826:	b003      	add	sp, #12
 8003828:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800382a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	4603      	mov	r3, r0
 8003832:	2200      	movs	r2, #0
 8003834:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003838:	4620      	mov	r0, r4
 800383a:	f7ff ff40 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 800383e:	2800      	cmp	r0, #0
 8003840:	d0e4      	beq.n	800380c <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003842:	2003      	movs	r0, #3
 8003844:	e7ef      	b.n	8003826 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003846:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	462b      	mov	r3, r5
 800384e:	2200      	movs	r2, #0
 8003850:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003854:	4620      	mov	r0, r4
 8003856:	f7ff ff32 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 800385a:	2800      	cmp	r0, #0
 800385c:	d0db      	beq.n	8003816 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 800385e:	2003      	movs	r0, #3
 8003860:	e7e1      	b.n	8003826 <UART_CheckIdleState+0x34>

08003862 <HAL_UART_Init>:
  if(huart == NULL)
 8003862:	b378      	cbz	r0, 80038c4 <HAL_UART_Init+0x62>
{
 8003864:	b510      	push	{r4, lr}
 8003866:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8003868:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800386c:	b30b      	cbz	r3, 80038b2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800386e:	2324      	movs	r3, #36	; 0x24
 8003870:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	6813      	ldr	r3, [r2, #0]
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800387e:	4620      	mov	r0, r4
 8003880:	f7ff fdde 	bl	8003440 <UART_SetConfig>
 8003884:	2801      	cmp	r0, #1
 8003886:	d01f      	beq.n	80038c8 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800388a:	b9bb      	cbnz	r3, 80038bc <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800388c:	6822      	ldr	r2, [r4, #0]
 800388e:	6853      	ldr	r3, [r2, #4]
 8003890:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003894:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003896:	6822      	ldr	r2, [r4, #0]
 8003898:	6893      	ldr	r3, [r2, #8]
 800389a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800389e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80038a0:	6822      	ldr	r2, [r4, #0]
 80038a2:	6813      	ldr	r3, [r2, #0]
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80038aa:	4620      	mov	r0, r4
 80038ac:	f7ff ffa1 	bl	80037f2 <UART_CheckIdleState>
 80038b0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80038b2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80038b6:	f000 fe1b 	bl	80044f0 <HAL_UART_MspInit>
 80038ba:	e7d8      	b.n	800386e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80038bc:	4620      	mov	r0, r4
 80038be:	f7ff fe99 	bl	80035f4 <UART_AdvFeatureConfig>
 80038c2:	e7e3      	b.n	800388c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80038c4:	2001      	movs	r0, #1
 80038c6:	4770      	bx	lr
}
 80038c8:	bd10      	pop	{r4, pc}

080038ca <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038ca:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b21      	cmp	r3, #33	; 0x21
 80038d2:	d001      	beq.n	80038d8 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80038d4:	2002      	movs	r0, #2
  }
}
 80038d6:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 80038d8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80038dc:	b29b      	uxth	r3, r3
 80038de:	b193      	cbz	r3, 8003906 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e0:	6883      	ldr	r3, [r0, #8]
 80038e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e6:	d01a      	beq.n	800391e <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80038e8:	6802      	ldr	r2, [r0, #0]
 80038ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80038ec:	1c59      	adds	r1, r3, #1
 80038ee:	64c1      	str	r1, [r0, #76]	; 0x4c
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80038f4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8003902:	2000      	movs	r0, #0
 8003904:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003906:	6802      	ldr	r2, [r0, #0]
 8003908:	6813      	ldr	r3, [r2, #0]
 800390a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800390e:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003910:	6802      	ldr	r2, [r0, #0]
 8003912:	6813      	ldr	r3, [r2, #0]
 8003914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003918:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 800391a:	2000      	movs	r0, #0
 800391c:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391e:	6903      	ldr	r3, [r0, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e1      	bne.n	80038e8 <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8003924:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003926:	6802      	ldr	r2, [r0, #0]
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392e:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003930:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003932:	3302      	adds	r3, #2
 8003934:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003936:	e7dd      	b.n	80038f4 <UART_Transmit_IT+0x2a>

08003938 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003938:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800393a:	6801      	ldr	r1, [r0, #0]
 800393c:	680b      	ldr	r3, [r1, #0]
 800393e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003942:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003944:	2320      	movs	r3, #32
 8003946:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800394a:	f7ff fd6d 	bl	8003428 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 800394e:	2000      	movs	r0, #0
 8003950:	bd08      	pop	{r3, pc}

08003952 <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8003952:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003956:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b22      	cmp	r3, #34	; 0x22
 800395e:	d006      	beq.n	800396e <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003960:	6802      	ldr	r2, [r0, #0]
 8003962:	6993      	ldr	r3, [r2, #24]
 8003964:	f043 0308 	orr.w	r3, r3, #8
 8003968:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 800396a:	2002      	movs	r0, #2
 800396c:	4770      	bx	lr
{
 800396e:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003970:	6803      	ldr	r3, [r0, #0]
 8003972:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003974:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003976:	6881      	ldr	r1, [r0, #8]
 8003978:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800397c:	d00f      	beq.n	800399e <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800397e:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8003980:	1c4c      	adds	r4, r1, #1
 8003982:	6544      	str	r4, [r0, #84]	; 0x54
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	401a      	ands	r2, r3
 8003988:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 800398a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29b      	uxth	r3, r3
 8003994:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8003998:	b15b      	cbz	r3, 80039b2 <UART_Receive_IT+0x60>
    return HAL_OK;
 800399a:	2000      	movs	r0, #0
  }
}
 800399c:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800399e:	6901      	ldr	r1, [r0, #16]
 80039a0:	2900      	cmp	r1, #0
 80039a2:	d1ec      	bne.n	800397e <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80039a4:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 80039a6:	401a      	ands	r2, r3
 80039a8:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 80039aa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80039ac:	3302      	adds	r3, #2
 80039ae:	6543      	str	r3, [r0, #84]	; 0x54
 80039b0:	e7eb      	b.n	800398a <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b2:	6802      	ldr	r2, [r0, #0]
 80039b4:	6813      	ldr	r3, [r2, #0]
 80039b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039ba:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039bc:	6802      	ldr	r2, [r0, #0]
 80039be:	6893      	ldr	r3, [r2, #8]
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80039c6:	2320      	movs	r3, #32
 80039c8:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80039cc:	f000 fa2c 	bl	8003e28 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80039d0:	2000      	movs	r0, #0
 80039d2:	bd10      	pop	{r4, pc}

080039d4 <HAL_UART_IRQHandler>:
{
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039d8:	6802      	ldr	r2, [r0, #0]
 80039da:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039dc:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 80039de:	f013 050f 	ands.w	r5, r3, #15
 80039e2:	d105      	bne.n	80039f0 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039e4:	f013 0f20 	tst.w	r3, #32
 80039e8:	d002      	beq.n	80039f0 <HAL_UART_IRQHandler+0x1c>
 80039ea:	f011 0f20 	tst.w	r1, #32
 80039ee:	d160      	bne.n	8003ab2 <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 80039f0:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 80039f2:	2d00      	cmp	r5, #0
 80039f4:	d072      	beq.n	8003adc <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80039f6:	f010 0501 	ands.w	r5, r0, #1
 80039fa:	d102      	bne.n	8003a02 <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80039fc:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003a00:	d06c      	beq.n	8003adc <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a02:	f013 0f01 	tst.w	r3, #1
 8003a06:	d007      	beq.n	8003a18 <HAL_UART_IRQHandler+0x44>
 8003a08:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003a0c:	d004      	beq.n	8003a18 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003a0e:	2001      	movs	r0, #1
 8003a10:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a12:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a14:	4302      	orrs	r2, r0
 8003a16:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a18:	f013 0f02 	tst.w	r3, #2
 8003a1c:	d007      	beq.n	8003a2e <HAL_UART_IRQHandler+0x5a>
 8003a1e:	b135      	cbz	r5, 8003a2e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003a20:	6822      	ldr	r2, [r4, #0]
 8003a22:	2002      	movs	r0, #2
 8003a24:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a26:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a28:	f042 0204 	orr.w	r2, r2, #4
 8003a2c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a2e:	f013 0f04 	tst.w	r3, #4
 8003a32:	d007      	beq.n	8003a44 <HAL_UART_IRQHandler+0x70>
 8003a34:	b135      	cbz	r5, 8003a44 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003a36:	6822      	ldr	r2, [r4, #0]
 8003a38:	2004      	movs	r0, #4
 8003a3a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a3c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a3e:	f042 0202 	orr.w	r2, r2, #2
 8003a42:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003a44:	f013 0f08 	tst.w	r3, #8
 8003a48:	d009      	beq.n	8003a5e <HAL_UART_IRQHandler+0x8a>
 8003a4a:	f011 0f20 	tst.w	r1, #32
 8003a4e:	d100      	bne.n	8003a52 <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a50:	b12d      	cbz	r5, 8003a5e <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003a52:	6822      	ldr	r2, [r4, #0]
 8003a54:	2008      	movs	r0, #8
 8003a56:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a58:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a5a:	4302      	orrs	r2, r0
 8003a5c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a5e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003a60:	2a00      	cmp	r2, #0
 8003a62:	d04d      	beq.n	8003b00 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a64:	f013 0f20 	tst.w	r3, #32
 8003a68:	d002      	beq.n	8003a70 <HAL_UART_IRQHandler+0x9c>
 8003a6a:	f011 0f20 	tst.w	r1, #32
 8003a6e:	d123      	bne.n	8003ab8 <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003a70:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003a72:	f013 0f08 	tst.w	r3, #8
 8003a76:	d104      	bne.n	8003a82 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003a7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a80:	d026      	beq.n	8003ad0 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 8003a82:	4620      	mov	r0, r4
 8003a84:	f7ff fc6b 	bl	800335e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003a90:	d01a      	beq.n	8003ac8 <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a98:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003a9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a9c:	b183      	cbz	r3, 8003ac0 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a9e:	4a23      	ldr	r2, [pc, #140]	; (8003b2c <HAL_UART_IRQHandler+0x158>)
 8003aa0:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aa2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003aa4:	f7fd fdaf 	bl	8001606 <HAL_DMA_Abort_IT>
 8003aa8:	b350      	cbz	r0, 8003b00 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aaa:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003aac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003aae:	4798      	blx	r3
 8003ab0:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8003ab2:	f7ff ff4e 	bl	8003952 <UART_Receive_IT>
      return;
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f7ff ff4a 	bl	8003952 <UART_Receive_IT>
 8003abe:	e7d7      	b.n	8003a70 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f7ff fcb2 	bl	800342a <HAL_UART_ErrorCallback>
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7ff fcae 	bl	800342a <HAL_UART_ErrorCallback>
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f7ff fcaa 	bl	800342a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	66e3      	str	r3, [r4, #108]	; 0x6c
 8003ada:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003adc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003ae0:	d002      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x114>
 8003ae2:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003ae6:	d10c      	bne.n	8003b02 <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ae8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003aec:	d002      	beq.n	8003af4 <HAL_UART_IRQHandler+0x120>
 8003aee:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003af2:	d112      	bne.n	8003b1a <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003af4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003af8:	d002      	beq.n	8003b00 <HAL_UART_IRQHandler+0x12c>
 8003afa:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003afe:	d110      	bne.n	8003b22 <HAL_UART_IRQHandler+0x14e>
 8003b00:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003b02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b06:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8003b08:	2320      	movs	r3, #32
 8003b0a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8003b0e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8003b12:	4620      	mov	r0, r4
 8003b14:	f000 f80c 	bl	8003b30 <HAL_UARTEx_WakeupCallback>
    return;
 8003b18:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f7ff fed5 	bl	80038ca <UART_Transmit_IT>
    return;
 8003b20:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8003b22:	4620      	mov	r0, r4
 8003b24:	f7ff ff08 	bl	8003938 <UART_EndTransmit_IT>
    return;
 8003b28:	e7ea      	b.n	8003b00 <HAL_UART_IRQHandler+0x12c>
 8003b2a:	bf00      	nop
 8003b2c:	0800342d 	.word	0x0800342d

08003b30 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b30:	4770      	bx	lr
	...

08003b34 <TempConv>:
uint32_t TempConv(uint32_t tempVal)
{
	uint32_t temp = 0;
	uint32_t scale = 0;

	temp = ((100*tempVal)>>7)+((100*tempVal)>>12);
 8003b34:	2364      	movs	r3, #100	; 0x64
 8003b36:	fb03 f300 	mul.w	r3, r3, r0
 8003b3a:	0b18      	lsrs	r0, r3, #12
 8003b3c:	eb00 10d3 	add.w	r0, r0, r3, lsr #7
	scale = (temp-500)/10;
 8003b40:	f5a0 70fa 	sub.w	r0, r0, #500	; 0x1f4
 8003b44:	4b02      	ldr	r3, [pc, #8]	; (8003b50 <TempConv+0x1c>)
 8003b46:	fba3 3000 	umull	r3, r0, r3, r0

	return scale;
}
 8003b4a:	08c0      	lsrs	r0, r0, #3
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	cccccccd 	.word	0xcccccccd

08003b54 <switchHeater>:

void switchHeater(void)
{
 8003b54:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12,heaterState);
 8003b56:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <switchHeater+0x14>)
 8003b58:	881a      	ldrh	r2, [r3, #0]
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b60:	4802      	ldr	r0, [pc, #8]	; (8003b6c <switchHeater+0x18>)
 8003b62:	f7fd fe3f 	bl	80017e4 <HAL_GPIO_WritePin>
 8003b66:	bd08      	pop	{r3, pc}
 8003b68:	200002ac 	.word	0x200002ac
 8003b6c:	48000800 	.word	0x48000800

08003b70 <switchValve>:
}

void switchValve(void)
{
 8003b70:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,valveState);
 8003b72:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <switchValve+0x14>)
 8003b74:	881a      	ldrh	r2, [r3, #0]
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b7c:	4802      	ldr	r0, [pc, #8]	; (8003b88 <switchValve+0x18>)
 8003b7e:	f7fd fe31 	bl	80017e4 <HAL_GPIO_WritePin>
 8003b82:	bd08      	pop	{r3, pc}
 8003b84:	200002ae 	.word	0x200002ae
 8003b88:	48000800 	.word	0x48000800

08003b8c <StringTime2Int>:
}

uint8_t StringTime2Int(char* inputTimeString, uint8_t* outputTimeInt)
{
	int returnValue = 0;
	timeL += 1;
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <StringTime2Int+0x54>)
 8003b8e:	7813      	ldrb	r3, [r2, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	7013      	strb	r3, [r2, #0]

	if (*inputTimeString == ',')
 8003b96:	7803      	ldrb	r3, [r0, #0]
 8003b98:	2b2c      	cmp	r3, #44	; 0x2c
 8003b9a:	d01d      	beq.n	8003bd8 <StringTime2Int+0x4c>
{
 8003b9c:	b410      	push	{r4}
 8003b9e:	2300      	movs	r3, #0
		return 0;

	while ((*inputTimeString >= '0') && (*inputTimeString <= '9'))
 8003ba0:	7802      	ldrb	r2, [r0, #0]
 8003ba2:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8003ba6:	b2e4      	uxtb	r4, r4
 8003ba8:	2c09      	cmp	r4, #9
 8003baa:	d80e      	bhi.n	8003bca <StringTime2Int+0x3e>
	{
		returnValue *= 10;
 8003bac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003bb0:	005c      	lsls	r4, r3, #1
		returnValue += (*inputTimeString - 48);
 8003bb2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003bb6:	4423      	add	r3, r4

		if (returnValue >= 128)
 8003bb8:	2b7f      	cmp	r3, #127	; 0x7f
 8003bba:	dc0f      	bgt.n	8003bdc <StringTime2Int+0x50>
			return 0;

		inputTimeString++;
 8003bbc:	3001      	adds	r0, #1
		timeL++;
 8003bbe:	4c08      	ldr	r4, [pc, #32]	; (8003be0 <StringTime2Int+0x54>)
 8003bc0:	7822      	ldrb	r2, [r4, #0]
 8003bc2:	3201      	adds	r2, #1
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	7022      	strb	r2, [r4, #0]
 8003bc8:	e7ea      	b.n	8003ba0 <StringTime2Int+0x14>
	}
	*outputTimeInt = (int8_t)(returnValue);
 8003bca:	700b      	strb	r3, [r1, #0]
	return timeL;
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <StringTime2Int+0x54>)
 8003bce:	7818      	ldrb	r0, [r3, #0]
 8003bd0:	b2c0      	uxtb	r0, r0
}
 8003bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bd6:	4770      	bx	lr
		return 0;
 8003bd8:	2000      	movs	r0, #0
 8003bda:	4770      	bx	lr
			return 0;
 8003bdc:	2000      	movs	r0, #0
 8003bde:	e7f8      	b.n	8003bd2 <StringTime2Int+0x46>
 8003be0:	2000027c 	.word	0x2000027c

08003be4 <String2Int>:
uint8_t String2Int(char* inputString, int16_t* outputInt)
{
	int returnValue = 0;
	int sign = 1;

	if (*inputString == '\0')
 8003be4:	7803      	ldrb	r3, [r0, #0]
 8003be6:	b353      	cbz	r3, 8003c3e <String2Int+0x5a>
{
 8003be8:	b430      	push	{r4, r5}
		return 0;

	if (*inputString == '-')
 8003bea:	2b2d      	cmp	r3, #45	; 0x2d
 8003bec:	d002      	beq.n	8003bf4 <String2Int+0x10>
	int sign = 1;
 8003bee:	2501      	movs	r5, #1
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e009      	b.n	8003c08 <String2Int+0x24>
	{
		sign = -1;
		inputString++;
 8003bf4:	3001      	adds	r0, #1
		sign = -1;
 8003bf6:	f04f 35ff 	mov.w	r5, #4294967295
 8003bfa:	e7f9      	b.n	8003bf0 <String2Int+0xc>
	while ((*inputString >= '0') && (*inputString <= '9'))
	{
		returnValue *= 10;
		returnValue += (*inputString - 48);

		if (((sign == 1) && (returnValue >= 32768)) ||
 8003bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c00:	db0f      	blt.n	8003c22 <String2Int+0x3e>
				((sign == -1) && (returnValue >= 32769)))
			return 0;
 8003c02:	2000      	movs	r0, #0
 8003c04:	e019      	b.n	8003c3a <String2Int+0x56>

		inputString++;
 8003c06:	3001      	adds	r0, #1
	while ((*inputString >= '0') && (*inputString <= '9'))
 8003c08:	7802      	ldrb	r2, [r0, #0]
 8003c0a:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8003c0e:	b2e4      	uxtb	r4, r4
 8003c10:	2c09      	cmp	r4, #9
 8003c12:	d80e      	bhi.n	8003c32 <String2Int+0x4e>
		returnValue *= 10;
 8003c14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c18:	005c      	lsls	r4, r3, #1
		returnValue += (*inputString - 48);
 8003c1a:	3a30      	subs	r2, #48	; 0x30
 8003c1c:	18a3      	adds	r3, r4, r2
		if (((sign == 1) && (returnValue >= 32768)) ||
 8003c1e:	2d01      	cmp	r5, #1
 8003c20:	d0ec      	beq.n	8003bfc <String2Int+0x18>
 8003c22:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003c26:	d1ee      	bne.n	8003c06 <String2Int+0x22>
				((sign == -1) && (returnValue >= 32769)))
 8003c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c2c:	ddeb      	ble.n	8003c06 <String2Int+0x22>
			return 0;
 8003c2e:	2000      	movs	r0, #0
 8003c30:	e003      	b.n	8003c3a <String2Int+0x56>
	}
	*outputInt = (int16_t)(sign * returnValue);
 8003c32:	fb15 f303 	smulbb	r3, r5, r3
 8003c36:	800b      	strh	r3, [r1, #0]
	return 1;
 8003c38:	2001      	movs	r0, #1
}
 8003c3a:	bc30      	pop	{r4, r5}
 8003c3c:	4770      	bx	lr
		return 0;
 8003c3e:	2000      	movs	r0, #0
 8003c40:	4770      	bx	lr
	...

08003c44 <Int2String>:
{
	int numWritten = 0;
	int writePosition = 0;
	uint8_t digits = 0;

	if (maxL == 0)
 8003c44:	2a00      	cmp	r2, #0
 8003c46:	d044      	beq.n	8003cd2 <Int2String+0x8e>
{
 8003c48:	b470      	push	{r4, r5, r6}
 8003c4a:	4614      	mov	r4, r2
		return 0;

	if (value < 0)
 8003c4c:	2900      	cmp	r1, #0
 8003c4e:	db13      	blt.n	8003c78 <Int2String+0x34>
	int numWritten = 0;
 8003c50:	2500      	movs	r5, #0
		maxL--;
		value = -value;
		numWritten = 1;
	}

	if (value < 10)
 8003c52:	2909      	cmp	r1, #9
 8003c54:	dd18      	ble.n	8003c88 <Int2String+0x44>
		digits = 1;
	else if (value < 100)
 8003c56:	2963      	cmp	r1, #99	; 0x63
 8003c58:	dd1b      	ble.n	8003c92 <Int2String+0x4e>
		digits = 2;
	else if (value < 1000)
 8003c5a:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8003c5e:	db1a      	blt.n	8003c96 <Int2String+0x52>
		digits = 3;
	else if (value < 10000)
 8003c60:	f242 730f 	movw	r3, #9999	; 0x270f
 8003c64:	4299      	cmp	r1, r3
 8003c66:	dd18      	ble.n	8003c9a <Int2String+0x56>
		digits = 4;
	else if (value < 100000)
 8003c68:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <Int2String+0x94>)
 8003c6a:	4299      	cmp	r1, r3
 8003c6c:	dd17      	ble.n	8003c9e <Int2String+0x5a>
		digits = 5;
	else if (value < 1000000)
 8003c6e:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <Int2String+0x98>)
 8003c70:	4299      	cmp	r1, r3
 8003c72:	dc16      	bgt.n	8003ca2 <Int2String+0x5e>
		digits = 6;
 8003c74:	2306      	movs	r3, #6
 8003c76:	e008      	b.n	8003c8a <Int2String+0x46>
		outputString[0] = '-';
 8003c78:	232d      	movs	r3, #45	; 0x2d
 8003c7a:	f800 3b01 	strb.w	r3, [r0], #1
		maxL--;
 8003c7e:	1e54      	subs	r4, r2, #1
 8003c80:	b2e4      	uxtb	r4, r4
		value = -value;
 8003c82:	4249      	negs	r1, r1
		numWritten = 1;
 8003c84:	2501      	movs	r5, #1
 8003c86:	e7e4      	b.n	8003c52 <Int2String+0xe>
		digits = 1;
 8003c88:	2301      	movs	r3, #1
	else
		digits = 7;

	if (digits > maxL)
 8003c8a:	429c      	cmp	r4, r3
 8003c8c:	d21c      	bcs.n	8003cc8 <Int2String+0x84>
		return 0; // error - not enough space in output string!
 8003c8e:	2000      	movs	r0, #0
 8003c90:	e01d      	b.n	8003cce <Int2String+0x8a>
		digits = 2;
 8003c92:	2302      	movs	r3, #2
 8003c94:	e7f9      	b.n	8003c8a <Int2String+0x46>
		digits = 3;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e7f7      	b.n	8003c8a <Int2String+0x46>
		digits = 4;
 8003c9a:	2304      	movs	r3, #4
 8003c9c:	e7f5      	b.n	8003c8a <Int2String+0x46>
		digits = 5;
 8003c9e:	2305      	movs	r3, #5
 8003ca0:	e7f3      	b.n	8003c8a <Int2String+0x46>
		digits = 7;
 8003ca2:	2307      	movs	r3, #7
 8003ca4:	e7f1      	b.n	8003c8a <Int2String+0x46>

	writePosition = digits;
	while (writePosition > 0)
	{
		outputString[writePosition-1] = (char) ((value % 10) + 48);
 8003ca6:	1e5a      	subs	r2, r3, #1
 8003ca8:	4c0d      	ldr	r4, [pc, #52]	; (8003ce0 <Int2String+0x9c>)
 8003caa:	fb84 3401 	smull	r3, r4, r4, r1
 8003cae:	17cb      	asrs	r3, r1, #31
 8003cb0:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
 8003cb4:	461e      	mov	r6, r3
 8003cb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003cba:	005c      	lsls	r4, r3, #1
 8003cbc:	1b0b      	subs	r3, r1, r4
 8003cbe:	3330      	adds	r3, #48	; 0x30
 8003cc0:	5483      	strb	r3, [r0, r2]
		value /= 10;
 8003cc2:	4631      	mov	r1, r6
		writePosition--;
 8003cc4:	4613      	mov	r3, r2
		numWritten++;
 8003cc6:	3501      	adds	r5, #1
	while (writePosition > 0)
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	dcec      	bgt.n	8003ca6 <Int2String+0x62>
	}

	return numWritten;
 8003ccc:	4628      	mov	r0, r5
}
 8003cce:	bc70      	pop	{r4, r5, r6}
 8003cd0:	4770      	bx	lr
		return 0;
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	0001869f 	.word	0x0001869f
 8003cdc:	000f423f 	.word	0x000f423f
 8003ce0:	66666667 	.word	0x66666667

08003ce4 <writeToPins>:

void writeToPins(uint8_t segments[], uint8_t pins[], int segmentsL, uint8_t i)
{
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	4607      	mov	r7, r0
 8003ce8:	460d      	mov	r5, r1
 8003cea:	461c      	mov	r4, r3
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segments[i] >> 0) & 0b00000001)); //1
 8003cec:	5cc2      	ldrb	r2, [r0, r3]
 8003cee:	f082 0201 	eor.w	r2, r2, #1
 8003cf2:	4e39      	ldr	r6, [pc, #228]	; (8003dd8 <writeToPins+0xf4>)
 8003cf4:	f002 0201 	and.w	r2, r2, #1
 8003cf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f7fd fd71 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segments[i] >> 1) & 0b00000001)); //2
 8003d02:	5d3a      	ldrb	r2, [r7, r4]
 8003d04:	0852      	lsrs	r2, r2, #1
 8003d06:	f082 0201 	eor.w	r2, r2, #1
 8003d0a:	f002 0201 	and.w	r2, r2, #1
 8003d0e:	2110      	movs	r1, #16
 8003d10:	4630      	mov	r0, r6
 8003d12:	f7fd fd67 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segments[i] >> 2) & 0b00000001)); //3
 8003d16:	5d3a      	ldrb	r2, [r7, r4]
 8003d18:	0892      	lsrs	r2, r2, #2
 8003d1a:	f082 0201 	eor.w	r2, r2, #1
 8003d1e:	f002 0201 	and.w	r2, r2, #1
 8003d22:	2120      	movs	r1, #32
 8003d24:	4630      	mov	r0, r6
 8003d26:	f7fd fd5d 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segments[i] >> 3) & 0b00000001)); //4
 8003d2a:	5d3a      	ldrb	r2, [r7, r4]
 8003d2c:	08d2      	lsrs	r2, r2, #3
 8003d2e:	f082 0201 	eor.w	r2, r2, #1
 8003d32:	f002 0201 	and.w	r2, r2, #1
 8003d36:	2108      	movs	r1, #8
 8003d38:	4630      	mov	r0, r6
 8003d3a:	f7fd fd53 	bl	80017e4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, (~(pins[i] >> 0) & 0b00000001)); //a
 8003d3e:	5d2a      	ldrb	r2, [r5, r4]
 8003d40:	f082 0201 	eor.w	r2, r2, #1
 8003d44:	f002 0201 	and.w	r2, r2, #1
 8003d48:	2120      	movs	r1, #32
 8003d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d4e:	f7fd fd49 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6, (~(pins[i] >> 1) & 0b00000001)); //b
 8003d52:	5d2a      	ldrb	r2, [r5, r4]
 8003d54:	0852      	lsrs	r2, r2, #1
 8003d56:	f082 0201 	eor.w	r2, r2, #1
 8003d5a:	f002 0201 	and.w	r2, r2, #1
 8003d5e:	2140      	movs	r1, #64	; 0x40
 8003d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d64:	f7fd fd3e 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, (~(pins[i] >> 2) & 0b00000001)); //c
 8003d68:	5d2a      	ldrb	r2, [r5, r4]
 8003d6a:	0892      	lsrs	r2, r2, #2
 8003d6c:	f082 0201 	eor.w	r2, r2, #1
 8003d70:	f002 0201 	and.w	r2, r2, #1
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d7a:	f7fd fd33 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6, (~(pins[i] >> 3) & 0b00000001)); //d
 8003d7e:	5d2a      	ldrb	r2, [r5, r4]
 8003d80:	08d2      	lsrs	r2, r2, #3
 8003d82:	f082 0201 	eor.w	r2, r2, #1
 8003d86:	f002 0201 	and.w	r2, r2, #1
 8003d8a:	2140      	movs	r1, #64	; 0x40
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f7fd fd29 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7, (~(pins[i] >> 4) & 0b00000001)); //e
 8003d92:	5d2a      	ldrb	r2, [r5, r4]
 8003d94:	0912      	lsrs	r2, r2, #4
 8003d96:	f082 0201 	eor.w	r2, r2, #1
 8003d9a:	f002 0201 	and.w	r2, r2, #1
 8003d9e:	2180      	movs	r1, #128	; 0x80
 8003da0:	480e      	ldr	r0, [pc, #56]	; (8003ddc <writeToPins+0xf8>)
 8003da2:	f7fd fd1f 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, (~(pins[i] >> 5) & 0b00000001)); //f
 8003da6:	5d2a      	ldrb	r2, [r5, r4]
 8003da8:	0952      	lsrs	r2, r2, #5
 8003daa:	f082 0201 	eor.w	r2, r2, #1
 8003dae:	f002 0201 	and.w	r2, r2, #1
 8003db2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dba:	f7fd fd13 	bl	80017e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, (~(pins[i] >> 6) & 0b00000001)); //g
 8003dbe:	5d2a      	ldrb	r2, [r5, r4]
 8003dc0:	0992      	lsrs	r2, r2, #6
 8003dc2:	f082 0201 	eor.w	r2, r2, #1
 8003dc6:	f002 0201 	and.w	r2, r2, #1
 8003dca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dd2:	f7fd fd07 	bl	80017e4 <HAL_GPIO_WritePin>
 8003dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dd8:	48000400 	.word	0x48000400
 8003ddc:	48000800 	.word	0x48000800

08003de0 <timeToEpoch>:

}

time_t timeToEpoch(RTC_DateTypeDef dateLive, RTC_TimeTypeDef timeLive)
{
 8003de0:	b084      	sub	sp, #16
 8003de2:	b510      	push	{r4, lr}
 8003de4:	b08c      	sub	sp, #48	; 0x30
 8003de6:	9001      	str	r0, [sp, #4]
 8003de8:	ac0f      	add	r4, sp, #60	; 0x3c
 8003dea:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	//-----------------------------------------------------------------------possibly hardcode date protion

	time_t epoch;
	struct tm time;

	time.tm_year = dateLive.Year - 1900;
 8003dee:	0e03      	lsrs	r3, r0, #24
 8003df0:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8003df4:	9308      	str	r3, [sp, #32]
	time.tm_mon = dateLive.Month;
 8003df6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003dfa:	9307      	str	r3, [sp, #28]
	time.tm_mday = dateLive.Date;
 8003dfc:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8003e00:	9006      	str	r0, [sp, #24]
	time.tm_hour = timeLive.Hours;
 8003e02:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8003e06:	9305      	str	r3, [sp, #20]
	time.tm_min = timeLive.Minutes;
 8003e08:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 8003e0c:	9304      	str	r3, [sp, #16]
	time.tm_sec = timeLive.Seconds;
 8003e0e:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8003e12:	9303      	str	r3, [sp, #12]
	time.tm_isdst = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	930b      	str	r3, [sp, #44]	; 0x2c

	return epoch = mktime(&time);
 8003e18:	a803      	add	r0, sp, #12
 8003e1a:	f001 fb73 	bl	8005504 <mktime>
}
 8003e1e:	b00c      	add	sp, #48	; 0x30
 8003e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e24:	b004      	add	sp, #16
 8003e26:	4770      	bx	lr

08003e28 <HAL_UART_RxCpltCallback>:
// This function will execute whenever a character is received from the UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
	// the interrupt handler will automatically put the received character in the uartRXChar variable (no need to write any code for that).
	// so all we do it set flag to indicate character was received, and then process the received character further in the main loop
	uartRxFlag = true;
 8003e28:	2201      	movs	r2, #1
 8003e2a:	4b01      	ldr	r3, [pc, #4]	; (8003e30 <HAL_UART_RxCpltCallback+0x8>)
 8003e2c:	701a      	strb	r2, [r3, #0]
 8003e2e:	4770      	bx	lr
 8003e30:	200002b1 	.word	0x200002b1

08003e34 <HAL_TIM_PeriodElapsedCallback>:
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //every 250 ns
{
	if (htim == &htim2)
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003e36:	4283      	cmp	r3, r0
 8003e38:	d000      	beq.n	8003e3c <HAL_TIM_PeriodElapsedCallback+0x8>
 8003e3a:	4770      	bx	lr
		adcFlag = true;
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	4b02      	ldr	r3, [pc, #8]	; (8003e48 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8003e40:	701a      	strb	r2, [r3, #0]

}
 8003e42:	e7fa      	b.n	8003e3a <HAL_TIM_PeriodElapsedCallback+0x6>
 8003e44:	200003f4 	.word	0x200003f4
 8003e48:	200002c0 	.word	0x200002c0

08003e4c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	flowHighFlag = 1;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	4a02      	ldr	r2, [pc, #8]	; (8003e58 <HAL_GPIO_EXTI_Callback+0xc>)
 8003e50:	7013      	strb	r3, [r2, #0]
	firstHighFlag = 1;
 8003e52:	4a02      	ldr	r2, [pc, #8]	; (8003e5c <HAL_GPIO_EXTI_Callback+0x10>)
 8003e54:	7013      	strb	r3, [r2, #0]
 8003e56:	4770      	bx	lr
 8003e58:	200002b0 	.word	0x200002b0
 8003e5c:	20000294 	.word	0x20000294

08003e60 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
static void MX_GPIO_Init(void)
{
 8003e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e64:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e66:	4b56      	ldr	r3, [pc, #344]	; (8003fc0 <MX_GPIO_Init+0x160>)
 8003e68:	695a      	ldr	r2, [r3, #20]
 8003e6a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003e6e:	615a      	str	r2, [r3, #20]
 8003e70:	695a      	ldr	r2, [r3, #20]
 8003e72:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8003e76:	9201      	str	r2, [sp, #4]
 8003e78:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003e80:	615a      	str	r2, [r3, #20]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003e88:	9202      	str	r2, [sp, #8]
 8003e8a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003e92:	615a      	str	r2, [r3, #20]
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003e9a:	9203      	str	r2, [sp, #12]
 8003e9c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003ea4:	615a      	str	r2, [r3, #20]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eac:	9304      	str	r3, [sp, #16]
 8003eae:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_SET);
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	2113      	movs	r1, #19
 8003eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eb8:	f7fd fc94 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8003ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ec6:	f7fd fc8d 	bl	80017e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8003eca:	4f3e      	ldr	r7, [pc, #248]	; (8003fc4 <MX_GPIO_Init+0x164>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	f7fd fc86 	bl	80017e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8003ed8:	4d3b      	ldr	r5, [pc, #236]	; (8003fc8 <MX_GPIO_Init+0x168>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f7fd fc7f 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003eec:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <MX_GPIO_Init+0x16c>)
 8003eee:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef0:	2400      	movs	r4, #0
 8003ef2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003ef4:	a905      	add	r1, sp, #20
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f7fd fbaa 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003efc:	f04f 0803 	mov.w	r8, #3
 8003f00:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f04:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f08:	a905      	add	r1, sp, #20
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	f7fd fba0 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8003f10:	2313      	movs	r3, #19
 8003f12:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003f14:	2311      	movs	r3, #17
 8003f16:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f18:	2601      	movs	r6, #1
 8003f1a:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f1e:	a905      	add	r1, sp, #20
 8003f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f24:	f7fd fb94 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003f28:	230c      	movs	r3, #12
 8003f2a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f30:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f32:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f36:	2307      	movs	r3, #7
 8003f38:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f3a:	a905      	add	r1, sp, #20
 8003f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f40:	f7fd fb86 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8003f44:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8003f48:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f4a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f4e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f50:	a905      	add	r1, sp, #20
 8003f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f56:	f7fd fb7b 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8003f5a:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8003f5e:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f60:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f62:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f64:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f66:	a905      	add	r1, sp, #20
 8003f68:	4638      	mov	r0, r7
 8003f6a:	f7fd fb71 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8003f6e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003f72:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f74:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f76:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f78:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f7a:	a905      	add	r1, sp, #20
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f7fd fb67 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f86:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <MX_GPIO_Init+0x170>)
 8003f8a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8e:	a905      	add	r1, sp, #20
 8003f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f94:	f7fd fb5c 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f9c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f9e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa2:	a905      	add	r1, sp, #20
 8003fa4:	4638      	mov	r0, r7
 8003fa6:	f7fd fb53 	bl	8001650 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003faa:	4622      	mov	r2, r4
 8003fac:	4621      	mov	r1, r4
 8003fae:	2028      	movs	r0, #40	; 0x28
 8003fb0:	f7fd fac0 	bl	8001534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003fb4:	2028      	movs	r0, #40	; 0x28
 8003fb6:	f7fd faef 	bl	8001598 <HAL_NVIC_EnableIRQ>

}
 8003fba:	b00a      	add	sp, #40	; 0x28
 8003fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	48000400 	.word	0x48000400
 8003fc8:	48000800 	.word	0x48000800
 8003fcc:	10210000 	.word	0x10210000
 8003fd0:	10310000 	.word	0x10310000

08003fd4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003fd4:	e7fe      	b.n	8003fd4 <_Error_Handler>
	...

08003fd8 <MX_USART1_UART_Init>:
{
 8003fd8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8003fda:	480c      	ldr	r0, [pc, #48]	; (800400c <MX_USART1_UART_Init+0x34>)
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <MX_USART1_UART_Init+0x38>)
 8003fde:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003fe0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003fe4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fea:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fec:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fee:	220c      	movs	r2, #12
 8003ff0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ff2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ff4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ff6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ff8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ffa:	f7ff fc32 	bl	8003862 <HAL_UART_Init>
 8003ffe:	b900      	cbnz	r0, 8004002 <MX_USART1_UART_Init+0x2a>
 8004000:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8004002:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8004006:	4803      	ldr	r0, [pc, #12]	; (8004014 <MX_USART1_UART_Init+0x3c>)
 8004008:	f7ff ffe4 	bl	8003fd4 <_Error_Handler>
 800400c:	20000364 	.word	0x20000364
 8004010:	40013800 	.word	0x40013800
 8004014:	08006be8 	.word	0x08006be8

08004018 <MX_ADC1_Init>:
{
 8004018:	b500      	push	{lr}
 800401a:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Instance = ADC1;
 800401c:	481d      	ldr	r0, [pc, #116]	; (8004094 <MX_ADC1_Init+0x7c>)
 800401e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004022:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004024:	2300      	movs	r3, #0
 8004026:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004028:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800402a:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800402c:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800402e:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004030:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004032:	2201      	movs	r2, #1
 8004034:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004036:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004038:	6202      	str	r2, [r0, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800403a:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800403c:	2204      	movs	r2, #4
 800403e:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004040:	6183      	str	r3, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004042:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004044:	f7fc fe70 	bl	8000d28 <HAL_ADC_Init>
 8004048:	b9c0      	cbnz	r0, 800407c <MX_ADC1_Init+0x64>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800404a:	a90a      	add	r1, sp, #40	; 0x28
 800404c:	2300      	movs	r3, #0
 800404e:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004052:	4810      	ldr	r0, [pc, #64]	; (8004094 <MX_ADC1_Init+0x7c>)
 8004054:	f7fd f9be 	bl	80013d4 <HAL_ADCEx_MultiModeConfigChannel>
 8004058:	b9a0      	cbnz	r0, 8004084 <MX_ADC1_Init+0x6c>
  sConfig.Channel = ADC_CHANNEL_9;
 800405a:	2309      	movs	r3, #9
 800405c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800405e:	2301      	movs	r3, #1
 8004060:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004062:	2300      	movs	r3, #0
 8004064:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004066:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004068:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 800406a:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800406c:	a901      	add	r1, sp, #4
 800406e:	4809      	ldr	r0, [pc, #36]	; (8004094 <MX_ADC1_Init+0x7c>)
 8004070:	f7fc ffee 	bl	8001050 <HAL_ADC_ConfigChannel>
 8004074:	b950      	cbnz	r0, 800408c <MX_ADC1_Init+0x74>
}
 8004076:	b00b      	add	sp, #44	; 0x2c
 8004078:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800407c:	21dd      	movs	r1, #221	; 0xdd
 800407e:	4806      	ldr	r0, [pc, #24]	; (8004098 <MX_ADC1_Init+0x80>)
 8004080:	f7ff ffa8 	bl	8003fd4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004084:	21e5      	movs	r1, #229	; 0xe5
 8004086:	4804      	ldr	r0, [pc, #16]	; (8004098 <MX_ADC1_Init+0x80>)
 8004088:	f7ff ffa4 	bl	8003fd4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800408c:	21f2      	movs	r1, #242	; 0xf2
 800408e:	4802      	ldr	r0, [pc, #8]	; (8004098 <MX_ADC1_Init+0x80>)
 8004090:	f7ff ffa0 	bl	8003fd4 <_Error_Handler>
 8004094:	20000310 	.word	0x20000310
 8004098:	08006be8 	.word	0x08006be8

0800409c <MX_I2C1_Init>:
{
 800409c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800409e:	4815      	ldr	r0, [pc, #84]	; (80040f4 <MX_I2C1_Init+0x58>)
 80040a0:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <MX_I2C1_Init+0x5c>)
 80040a2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80040a4:	4b15      	ldr	r3, [pc, #84]	; (80040fc <MX_I2C1_Init+0x60>)
 80040a6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040ac:	2201      	movs	r2, #1
 80040ae:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040b0:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80040b2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80040b4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040b6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040b8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040ba:	f7fd fbf7 	bl	80018ac <HAL_I2C_Init>
 80040be:	b950      	cbnz	r0, 80040d6 <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040c0:	2100      	movs	r1, #0
 80040c2:	480c      	ldr	r0, [pc, #48]	; (80040f4 <MX_I2C1_Init+0x58>)
 80040c4:	f7fd ff17 	bl	8001ef6 <HAL_I2CEx_ConfigAnalogFilter>
 80040c8:	b950      	cbnz	r0, 80040e0 <MX_I2C1_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80040ca:	2100      	movs	r1, #0
 80040cc:	4809      	ldr	r0, [pc, #36]	; (80040f4 <MX_I2C1_Init+0x58>)
 80040ce:	f7fd ff40 	bl	8001f52 <HAL_I2CEx_ConfigDigitalFilter>
 80040d2:	b950      	cbnz	r0, 80040ea <MX_I2C1_Init+0x4e>
 80040d4:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80040d6:	f44f 7183 	mov.w	r1, #262	; 0x106
 80040da:	4809      	ldr	r0, [pc, #36]	; (8004100 <MX_I2C1_Init+0x64>)
 80040dc:	f7ff ff7a 	bl	8003fd4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80040e0:	f240 110d 	movw	r1, #269	; 0x10d
 80040e4:	4806      	ldr	r0, [pc, #24]	; (8004100 <MX_I2C1_Init+0x64>)
 80040e6:	f7ff ff75 	bl	8003fd4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80040ea:	f44f 718a 	mov.w	r1, #276	; 0x114
 80040ee:	4804      	ldr	r0, [pc, #16]	; (8004100 <MX_I2C1_Init+0x64>)
 80040f0:	f7ff ff70 	bl	8003fd4 <_Error_Handler>
 80040f4:	200002c4 	.word	0x200002c4
 80040f8:	40005400 	.word	0x40005400
 80040fc:	2000090e 	.word	0x2000090e
 8004100:	08006be8 	.word	0x08006be8

08004104 <MX_RTC_Init>:
{
 8004104:	b500      	push	{lr}
 8004106:	b087      	sub	sp, #28
  hrtc.Instance = RTC;
 8004108:	482b      	ldr	r0, [pc, #172]	; (80041b8 <MX_RTC_Init+0xb4>)
 800410a:	4b2c      	ldr	r3, [pc, #176]	; (80041bc <MX_RTC_Init+0xb8>)
 800410c:	6003      	str	r3, [r0, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 800410e:	2100      	movs	r1, #0
 8004110:	f7fe fef9 	bl	8002f06 <HAL_RTCEx_BKUPRead>
 8004114:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8004118:	4298      	cmp	r0, r3
 800411a:	d036      	beq.n	800418a <MX_RTC_Init+0x86>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800411c:	4826      	ldr	r0, [pc, #152]	; (80041b8 <MX_RTC_Init+0xb4>)
 800411e:	2300      	movs	r3, #0
 8004120:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004122:	227f      	movs	r2, #127	; 0x7f
 8004124:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8004126:	22ff      	movs	r2, #255	; 0xff
 8004128:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800412a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800412c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800412e:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004130:	f7fe fca3 	bl	8002a7a <HAL_RTC_Init>
 8004134:	bb60      	cbnz	r0, 8004190 <MX_RTC_Init+0x8c>
  sTime.Hours = 0x0;
 8004136:	2300      	movs	r3, #0
 8004138:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 800413c:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8004140:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004144:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004146:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004148:	2201      	movs	r2, #1
 800414a:	a901      	add	r1, sp, #4
 800414c:	481a      	ldr	r0, [pc, #104]	; (80041b8 <MX_RTC_Init+0xb4>)
 800414e:	f7fe fd01 	bl	8002b54 <HAL_RTC_SetTime>
 8004152:	bb10      	cbnz	r0, 800419a <MX_RTC_Init+0x96>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004154:	2201      	movs	r2, #1
 8004156:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 800415a:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 800415e:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 8004162:	2300      	movs	r3, #0
 8004164:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004168:	4669      	mov	r1, sp
 800416a:	4813      	ldr	r0, [pc, #76]	; (80041b8 <MX_RTC_Init+0xb4>)
 800416c:	f7fe fd71 	bl	8002c52 <HAL_RTC_SetDate>
 8004170:	b9c0      	cbnz	r0, 80041a4 <MX_RTC_Init+0xa0>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8004172:	2204      	movs	r2, #4
 8004174:	2100      	movs	r1, #0
 8004176:	4810      	ldr	r0, [pc, #64]	; (80041b8 <MX_RTC_Init+0xb4>)
 8004178:	f7fe fe2e 	bl	8002dd8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800417c:	b9b8      	cbnz	r0, 80041ae <MX_RTC_Init+0xaa>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 800417e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8004182:	2100      	movs	r1, #0
 8004184:	480c      	ldr	r0, [pc, #48]	; (80041b8 <MX_RTC_Init+0xb4>)
 8004186:	f7fe feb9 	bl	8002efc <HAL_RTCEx_BKUPWrite>
}
 800418a:	b007      	add	sp, #28
 800418c:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004190:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004194:	480a      	ldr	r0, [pc, #40]	; (80041c0 <MX_RTC_Init+0xbc>)
 8004196:	f7ff ff1d 	bl	8003fd4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800419a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800419e:	4808      	ldr	r0, [pc, #32]	; (80041c0 <MX_RTC_Init+0xbc>)
 80041a0:	f7ff ff18 	bl	8003fd4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80041a4:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80041a8:	4805      	ldr	r0, [pc, #20]	; (80041c0 <MX_RTC_Init+0xbc>)
 80041aa:	f7ff ff13 	bl	8003fd4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80041ae:	f240 1149 	movw	r1, #329	; 0x149
 80041b2:	4803      	ldr	r0, [pc, #12]	; (80041c0 <MX_RTC_Init+0xbc>)
 80041b4:	f7ff ff0e 	bl	8003fd4 <_Error_Handler>
 80041b8:	200003d4 	.word	0x200003d4
 80041bc:	40002800 	.word	0x40002800
 80041c0:	08006be8 	.word	0x08006be8

080041c4 <MX_TIM2_Init>:
{
 80041c4:	b500      	push	{lr}
 80041c6:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 80041c8:	4819      	ldr	r0, [pc, #100]	; (8004230 <MX_TIM2_Init+0x6c>)
 80041ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041ce:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80041d4:	2210      	movs	r2, #16
 80041d6:	6082      	str	r2, [r0, #8]
  htim2.Init.Period = 16000;
 80041d8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80041dc:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041de:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80041e4:	f7fe ffde 	bl	80031a4 <HAL_TIM_Base_Init>
 80041e8:	b998      	cbnz	r0, 8004212 <MX_TIM2_Init+0x4e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041ea:	a908      	add	r1, sp, #32
 80041ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041f0:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80041f4:	480e      	ldr	r0, [pc, #56]	; (8004230 <MX_TIM2_Init+0x6c>)
 80041f6:	f7fe fffb 	bl	80031f0 <HAL_TIM_ConfigClockSource>
 80041fa:	b978      	cbnz	r0, 800421c <MX_TIM2_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041fc:	2300      	movs	r3, #0
 80041fe:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004200:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004202:	a901      	add	r1, sp, #4
 8004204:	480a      	ldr	r0, [pc, #40]	; (8004230 <MX_TIM2_Init+0x6c>)
 8004206:	f7ff f87f 	bl	8003308 <HAL_TIMEx_MasterConfigSynchronization>
 800420a:	b960      	cbnz	r0, 8004226 <MX_TIM2_Init+0x62>
}
 800420c:	b009      	add	sp, #36	; 0x24
 800420e:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004212:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8004216:	4807      	ldr	r0, [pc, #28]	; (8004234 <MX_TIM2_Init+0x70>)
 8004218:	f7ff fedc 	bl	8003fd4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800421c:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8004220:	4804      	ldr	r0, [pc, #16]	; (8004234 <MX_TIM2_Init+0x70>)
 8004222:	f7ff fed7 	bl	8003fd4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004226:	f240 116d 	movw	r1, #365	; 0x16d
 800422a:	4802      	ldr	r0, [pc, #8]	; (8004234 <MX_TIM2_Init+0x70>)
 800422c:	f7ff fed2 	bl	8003fd4 <_Error_Handler>
 8004230:	200003f4 	.word	0x200003f4
 8004234:	08006be8 	.word	0x08006be8

08004238 <SystemClock_Config>:
{
 8004238:	b500      	push	{lr}
 800423a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800423c:	230a      	movs	r3, #10
 800423e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004240:	2301      	movs	r3, #1
 8004242:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004244:	2210      	movs	r2, #16
 8004246:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004248:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800424a:	2302      	movs	r3, #2
 800424c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800424e:	2300      	movs	r3, #0
 8004250:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004252:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004256:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004258:	a80c      	add	r0, sp, #48	; 0x30
 800425a:	f7fd fea7 	bl	8001fac <HAL_RCC_OscConfig>
 800425e:	bb80      	cbnz	r0, 80042c2 <SystemClock_Config+0x8a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004260:	230f      	movs	r3, #15
 8004262:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004264:	2102      	movs	r1, #2
 8004266:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004268:	2300      	movs	r3, #0
 800426a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800426c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004270:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004272:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004274:	a807      	add	r0, sp, #28
 8004276:	f7fe f9d7 	bl	8002628 <HAL_RCC_ClockConfig>
 800427a:	bb30      	cbnz	r0, 80042ca <SystemClock_Config+0x92>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800427c:	4b17      	ldr	r3, [pc, #92]	; (80042dc <SystemClock_Config+0xa4>)
 800427e:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004280:	2300      	movs	r3, #0
 8004282:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8004284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004288:	9204      	str	r2, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800428a:	9303      	str	r3, [sp, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800428c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004290:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004292:	4668      	mov	r0, sp
 8004294:	f7fe fae4 	bl	8002860 <HAL_RCCEx_PeriphCLKConfig>
 8004298:	b9d8      	cbnz	r0, 80042d2 <SystemClock_Config+0x9a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800429a:	f7fe faaf 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 800429e:	4b10      	ldr	r3, [pc, #64]	; (80042e0 <SystemClock_Config+0xa8>)
 80042a0:	fba3 3000 	umull	r3, r0, r3, r0
 80042a4:	0980      	lsrs	r0, r0, #6
 80042a6:	f7fd f983 	bl	80015b0 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80042aa:	2004      	movs	r0, #4
 80042ac:	f7fd f996 	bl	80015dc <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80042b0:	2200      	movs	r2, #0
 80042b2:	4611      	mov	r1, r2
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295
 80042b8:	f7fd f93c 	bl	8001534 <HAL_NVIC_SetPriority>
}
 80042bc:	b017      	add	sp, #92	; 0x5c
 80042be:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80042c2:	219c      	movs	r1, #156	; 0x9c
 80042c4:	4807      	ldr	r0, [pc, #28]	; (80042e4 <SystemClock_Config+0xac>)
 80042c6:	f7ff fe85 	bl	8003fd4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80042ca:	21aa      	movs	r1, #170	; 0xaa
 80042cc:	4805      	ldr	r0, [pc, #20]	; (80042e4 <SystemClock_Config+0xac>)
 80042ce:	f7ff fe81 	bl	8003fd4 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80042d2:	21b5      	movs	r1, #181	; 0xb5
 80042d4:	4803      	ldr	r0, [pc, #12]	; (80042e4 <SystemClock_Config+0xac>)
 80042d6:	f7ff fe7d 	bl	8003fd4 <_Error_Handler>
 80042da:	bf00      	nop
 80042dc:	000100a1 	.word	0x000100a1
 80042e0:	10624dd3 	.word	0x10624dd3
 80042e4:	08006be8 	.word	0x08006be8

080042e8 <main>:
{
 80042e8:	b508      	push	{r3, lr}
  HAL_Init();
 80042ea:	f7fc fc77 	bl	8000bdc <HAL_Init>
  SystemClock_Config();
 80042ee:	f7ff ffa3 	bl	8004238 <SystemClock_Config>
  MX_GPIO_Init();
 80042f2:	f7ff fdb5 	bl	8003e60 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80042f6:	f7ff fe6f 	bl	8003fd8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80042fa:	f7ff fe8d 	bl	8004018 <MX_ADC1_Init>
  MX_I2C1_Init();
 80042fe:	f7ff fecd 	bl	800409c <MX_I2C1_Init>
  MX_RTC_Init();
 8004302:	f7ff feff 	bl	8004104 <MX_RTC_Init>
  MX_TIM2_Init();
 8004306:	f7ff ff5d 	bl	80041c4 <MX_TIM2_Init>
  UserInitialise();
 800430a:	f000 f98d 	bl	8004628 <UserInitialise>
	  Flags();
 800430e:	f000 fd3b 	bl	8004d88 <Flags>
 8004312:	e7fc      	b.n	800430e <main+0x26>

08004314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004314:	b500      	push	{lr}
 8004316:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004318:	4b1c      	ldr	r3, [pc, #112]	; (800438c <HAL_MspInit+0x78>)
 800431a:	699a      	ldr	r2, [r3, #24]
 800431c:	f042 0201 	orr.w	r2, r2, #1
 8004320:	619a      	str	r2, [r3, #24]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800432c:	2007      	movs	r0, #7
 800432e:	f7fd f8ef 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004332:	2200      	movs	r2, #0
 8004334:	4611      	mov	r1, r2
 8004336:	f06f 000b 	mvn.w	r0, #11
 800433a:	f7fd f8fb 	bl	8001534 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800433e:	2200      	movs	r2, #0
 8004340:	4611      	mov	r1, r2
 8004342:	f06f 000a 	mvn.w	r0, #10
 8004346:	f7fd f8f5 	bl	8001534 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800434a:	2200      	movs	r2, #0
 800434c:	4611      	mov	r1, r2
 800434e:	f06f 0009 	mvn.w	r0, #9
 8004352:	f7fd f8ef 	bl	8001534 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004356:	2200      	movs	r2, #0
 8004358:	4611      	mov	r1, r2
 800435a:	f06f 0004 	mvn.w	r0, #4
 800435e:	f7fd f8e9 	bl	8001534 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004362:	2200      	movs	r2, #0
 8004364:	4611      	mov	r1, r2
 8004366:	f06f 0003 	mvn.w	r0, #3
 800436a:	f7fd f8e3 	bl	8001534 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800436e:	2200      	movs	r2, #0
 8004370:	4611      	mov	r1, r2
 8004372:	f06f 0001 	mvn.w	r0, #1
 8004376:	f7fd f8dd 	bl	8001534 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800437a:	2200      	movs	r2, #0
 800437c:	4611      	mov	r1, r2
 800437e:	f04f 30ff 	mov.w	r0, #4294967295
 8004382:	f7fd f8d7 	bl	8001534 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004386:	b003      	add	sp, #12
 8004388:	f85d fb04 	ldr.w	pc, [sp], #4
 800438c:	40021000 	.word	0x40021000

08004390 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8004390:	6803      	ldr	r3, [r0, #0]
 8004392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004396:	d000      	beq.n	800439a <HAL_ADC_MspInit+0xa>
 8004398:	4770      	bx	lr
{
 800439a:	b530      	push	{r4, r5, lr}
 800439c:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800439e:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80043a2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043ac:	615a      	str	r2, [r3, #20]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	9b00      	ldr	r3, [sp, #0]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PB1     ------> ADC1_IN12
    PB13     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80043b8:	230c      	movs	r3, #12
 80043ba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043bc:	2503      	movs	r5, #3
 80043be:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c0:	2400      	movs	r4, #0
 80043c2:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043c4:	a901      	add	r1, sp, #4
 80043c6:	4807      	ldr	r0, [pc, #28]	; (80043e4 <HAL_ADC_MspInit+0x54>)
 80043c8:	f7fd f942 	bl	8001650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 80043cc:	f242 0302 	movw	r3, #8194	; 0x2002
 80043d0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043d2:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d4:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d6:	a901      	add	r1, sp, #4
 80043d8:	4803      	ldr	r0, [pc, #12]	; (80043e8 <HAL_ADC_MspInit+0x58>)
 80043da:	f7fd f939 	bl	8001650 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80043de:	b007      	add	sp, #28
 80043e0:	bd30      	pop	{r4, r5, pc}
 80043e2:	bf00      	nop
 80043e4:	48000800 	.word	0x48000800
 80043e8:	48000400 	.word	0x48000400

080043ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80043ec:	6802      	ldr	r2, [r0, #0]
 80043ee:	4b1f      	ldr	r3, [pc, #124]	; (800446c <HAL_I2C_MspInit+0x80>)
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d000      	beq.n	80043f6 <HAL_I2C_MspInit+0xa>
 80043f4:	4770      	bx	lr
{
 80043f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f8:	b087      	sub	sp, #28
  
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80043fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043fe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004400:	2712      	movs	r7, #18
 8004402:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004404:	2601      	movs	r6, #1
 8004406:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004408:	2503      	movs	r5, #3
 800440a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800440c:	2404      	movs	r4, #4
 800440e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004410:	eb0d 0104 	add.w	r1, sp, r4
 8004414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004418:	f7fd f91a 	bl	8001650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800441c:	2380      	movs	r3, #128	; 0x80
 800441e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004420:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004422:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004424:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004426:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004428:	eb0d 0104 	add.w	r1, sp, r4
 800442c:	4810      	ldr	r0, [pc, #64]	; (8004470 <HAL_I2C_MspInit+0x84>)
 800442e:	f7fd f90f 	bl	8001650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <HAL_I2C_MspInit+0x88>)
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800443a:	61da      	str	r2, [r3, #28]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	9b00      	ldr	r3, [sp, #0]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004446:	2200      	movs	r2, #0
 8004448:	4611      	mov	r1, r2
 800444a:	201f      	movs	r0, #31
 800444c:	f7fd f872 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004450:	201f      	movs	r0, #31
 8004452:	f7fd f8a1 	bl	8001598 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004456:	2200      	movs	r2, #0
 8004458:	4611      	mov	r1, r2
 800445a:	2020      	movs	r0, #32
 800445c:	f7fd f86a 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004460:	2020      	movs	r0, #32
 8004462:	f7fd f899 	bl	8001598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004466:	b007      	add	sp, #28
 8004468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800446a:	bf00      	nop
 800446c:	40005400 	.word	0x40005400
 8004470:	48000400 	.word	0x48000400
 8004474:	40021000 	.word	0x40021000

08004478 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004478:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 800447a:	6802      	ldr	r2, [r0, #0]
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_RTC_MspInit+0x34>)
 800447e:	429a      	cmp	r2, r3
 8004480:	d000      	beq.n	8004484 <HAL_RTC_MspInit+0xc>
 8004482:	bd08      	pop	{r3, pc}
 8004484:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004488:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800448c:	fab2 f282 	clz	r2, r2
 8004490:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <HAL_RTC_MspInit+0x38>)
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800449a:	2200      	movs	r2, #0
 800449c:	4611      	mov	r1, r2
 800449e:	2003      	movs	r0, #3
 80044a0:	f7fd f848 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80044a4:	2003      	movs	r0, #3
 80044a6:	f7fd f877 	bl	8001598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80044aa:	e7ea      	b.n	8004482 <HAL_RTC_MspInit+0xa>
 80044ac:	40002800 	.word	0x40002800
 80044b0:	10908100 	.word	0x10908100

080044b4 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80044b4:	6803      	ldr	r3, [r0, #0]
 80044b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ba:	d000      	beq.n	80044be <HAL_TIM_Base_MspInit+0xa>
 80044bc:	4770      	bx	lr
{
 80044be:	b500      	push	{lr}
 80044c0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044c2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	f042 0201 	orr.w	r2, r2, #1
 80044cc:	61da      	str	r2, [r3, #28]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	9301      	str	r3, [sp, #4]
 80044d6:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80044d8:	2200      	movs	r2, #0
 80044da:	4611      	mov	r1, r2
 80044dc:	201c      	movs	r0, #28
 80044de:	f7fd f829 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80044e2:	201c      	movs	r0, #28
 80044e4:	f7fd f858 	bl	8001598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80044e8:	b003      	add	sp, #12
 80044ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080044f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80044f0:	6802      	ldr	r2, [r0, #0]
 80044f2:	4b15      	ldr	r3, [pc, #84]	; (8004548 <HAL_UART_MspInit+0x58>)
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d000      	beq.n	80044fa <HAL_UART_MspInit+0xa>
 80044f8:	4770      	bx	lr
{
 80044fa:	b500      	push	{lr}
 80044fc:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80044fe:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8004502:	699a      	ldr	r2, [r3, #24]
 8004504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004508:	619a      	str	r2, [r3, #24]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004514:	2330      	movs	r3, #48	; 0x30
 8004516:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004518:	2302      	movs	r3, #2
 800451a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800451c:	2301      	movs	r3, #1
 800451e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004520:	2303      	movs	r3, #3
 8004522:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004524:	2307      	movs	r3, #7
 8004526:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004528:	a901      	add	r1, sp, #4
 800452a:	4808      	ldr	r0, [pc, #32]	; (800454c <HAL_UART_MspInit+0x5c>)
 800452c:	f7fd f890 	bl	8001650 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004530:	2200      	movs	r2, #0
 8004532:	4611      	mov	r1, r2
 8004534:	2025      	movs	r0, #37	; 0x25
 8004536:	f7fc fffd 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800453a:	2025      	movs	r0, #37	; 0x25
 800453c:	f7fd f82c 	bl	8001598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004540:	b007      	add	sp, #28
 8004542:	f85d fb04 	ldr.w	pc, [sp], #4
 8004546:	bf00      	nop
 8004548:	40013800 	.word	0x40013800
 800454c:	48000800 	.word	0x48000800

08004550 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004550:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004552:	f7fc fb55 	bl	8000c00 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8004556:	f7fd f852 	bl	80015fe <HAL_SYSTICK_IRQHandler>
 800455a:	bd08      	pop	{r3, pc}

0800455c <RTC_WKUP_IRQHandler>:

/**
* @brief This function handles RTC wake-up interrupt through EXTI line 20.
*/
void RTC_WKUP_IRQHandler(void)
{
 800455c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800455e:	4802      	ldr	r0, [pc, #8]	; (8004568 <RTC_WKUP_IRQHandler+0xc>)
 8004560:	f7fe fcb2 	bl	8002ec8 <HAL_RTCEx_WakeUpTimerIRQHandler>
 8004564:	bd08      	pop	{r3, pc}
 8004566:	bf00      	nop
 8004568:	200003d4 	.word	0x200003d4

0800456c <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 800456c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800456e:	4802      	ldr	r0, [pc, #8]	; (8004578 <TIM2_IRQHandler+0xc>)
 8004570:	f7fe fd01 	bl	8002f76 <HAL_TIM_IRQHandler>
 8004574:	bd08      	pop	{r3, pc}
 8004576:	bf00      	nop
 8004578:	200003f4 	.word	0x200003f4

0800457c <I2C1_EV_IRQHandler>:

/**
* @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
*/
void I2C1_EV_IRQHandler(void)
{
 800457c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800457e:	4802      	ldr	r0, [pc, #8]	; (8004588 <I2C1_EV_IRQHandler+0xc>)
 8004580:	f7fd f9f2 	bl	8001968 <HAL_I2C_EV_IRQHandler>
 8004584:	bd08      	pop	{r3, pc}
 8004586:	bf00      	nop
 8004588:	200002c4 	.word	0x200002c4

0800458c <I2C1_ER_IRQHandler>:

/**
* @brief This function handles I2C1 error interrupt.
*/
void I2C1_ER_IRQHandler(void)
{
 800458c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800458e:	4802      	ldr	r0, [pc, #8]	; (8004598 <I2C1_ER_IRQHandler+0xc>)
 8004590:	f7fd fc61 	bl	8001e56 <HAL_I2C_ER_IRQHandler>
 8004594:	bd08      	pop	{r3, pc}
 8004596:	bf00      	nop
 8004598:	200002c4 	.word	0x200002c4

0800459c <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 800459c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800459e:	4802      	ldr	r0, [pc, #8]	; (80045a8 <USART1_IRQHandler+0xc>)
 80045a0:	f7ff fa18 	bl	80039d4 <HAL_UART_IRQHandler>
 80045a4:	bd08      	pop	{r3, pc}
 80045a6:	bf00      	nop
 80045a8:	20000364 	.word	0x20000364

080045ac <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 80045ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80045ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80045b2:	f7fd f91d 	bl	80017f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80045b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80045ba:	f7fd f919 	bl	80017f0 <HAL_GPIO_EXTI_IRQHandler>
 80045be:	bd08      	pop	{r3, pc}

080045c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045c0:	4915      	ldr	r1, [pc, #84]	; (8004618 <SystemInit+0x58>)
 80045c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80045c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80045ce:	4b13      	ldr	r3, [pc, #76]	; (800461c <SystemInit+0x5c>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80045d8:	6858      	ldr	r0, [r3, #4]
 80045da:	4a11      	ldr	r2, [pc, #68]	; (8004620 <SystemInit+0x60>)
 80045dc:	4002      	ands	r2, r0
 80045de:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80045e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045ea:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80045fa:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80045fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fe:	f022 020f 	bic.w	r2, r2, #15
 8004602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004604:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004606:	4a07      	ldr	r2, [pc, #28]	; (8004624 <SystemInit+0x64>)
 8004608:	4002      	ands	r2, r0
 800460a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800460c:	2200      	movs	r2, #0
 800460e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004610:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004614:	608b      	str	r3, [r1, #8]
 8004616:	4770      	bx	lr
 8004618:	e000ed00 	.word	0xe000ed00
 800461c:	40021000 	.word	0x40021000
 8004620:	f87fc00c 	.word	0xf87fc00c
 8004624:	ff00fccc 	.word	0xff00fccc

08004628 <UserInitialise>:
bool heaterFlag;
uint8_t iCurrent;


void UserInitialise(void)
{
 8004628:	b510      	push	{r4, lr}
	uartRxFlag = false;
 800462a:	2300      	movs	r3, #0
 800462c:	4a26      	ldr	r2, [pc, #152]	; (80046c8 <UserInitialise+0xa0>)
 800462e:	7013      	strb	r3, [r2, #0]
	tempSetpoint = 60;		// initial value
 8004630:	213c      	movs	r1, #60	; 0x3c
 8004632:	4a26      	ldr	r2, [pc, #152]	; (80046cc <UserInitialise+0xa4>)
 8004634:	8011      	strh	r1, [r2, #0]

	//---------------------Prof code--------------------------//
	adcFlag = false;
 8004636:	4a26      	ldr	r2, [pc, #152]	; (80046d0 <UserInitialise+0xa8>)
 8004638:	7013      	strb	r3, [r2, #0]
	adcCh = 0;
 800463a:	4a26      	ldr	r2, [pc, #152]	; (80046d4 <UserInitialise+0xac>)
 800463c:	7013      	strb	r3, [r2, #0]
	sampleCntr = 0;
 800463e:	4a26      	ldr	r2, [pc, #152]	; (80046d8 <UserInitialise+0xb0>)
 8004640:	7013      	strb	r3, [r2, #0]
	irmsSum = 0;
 8004642:	2200      	movs	r2, #0
 8004644:	4925      	ldr	r1, [pc, #148]	; (80046dc <UserInitialise+0xb4>)
 8004646:	600a      	str	r2, [r1, #0]
	vrmsSum = 0;
 8004648:	4925      	ldr	r1, [pc, #148]	; (80046e0 <UserInitialise+0xb8>)
 800464a:	600a      	str	r2, [r1, #0]

	//digit = 0;
	//---------------------Prof code--------------------------//

	valveState = 0;
 800464c:	4a25      	ldr	r2, [pc, #148]	; (80046e4 <UserInitialise+0xbc>)
 800464e:	8013      	strh	r3, [r2, #0]
	heaterState = 0;
 8004650:	4a25      	ldr	r2, [pc, #148]	; (80046e8 <UserInitialise+0xc0>)
 8004652:	8013      	strh	r3, [r2, #0]
	scheduleState = 0;
 8004654:	4a25      	ldr	r2, [pc, #148]	; (80046ec <UserInitialise+0xc4>)
 8004656:	8013      	strh	r3, [r2, #0]

	numberMap[0] = 0b00111111;
 8004658:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <UserInitialise+0xc8>)
 800465a:	223f      	movs	r2, #63	; 0x3f
 800465c:	701a      	strb	r2, [r3, #0]
	numberMap[1] = 0b00000110;
 800465e:	2206      	movs	r2, #6
 8004660:	705a      	strb	r2, [r3, #1]
	numberMap[2] = 0b01011011;
 8004662:	225b      	movs	r2, #91	; 0x5b
 8004664:	709a      	strb	r2, [r3, #2]
	numberMap[3] = 0b01001111;
 8004666:	224f      	movs	r2, #79	; 0x4f
 8004668:	70da      	strb	r2, [r3, #3]
	numberMap[4] = 0b01100110;
 800466a:	2266      	movs	r2, #102	; 0x66
 800466c:	711a      	strb	r2, [r3, #4]
	numberMap[5] = 0b01101101;
 800466e:	226d      	movs	r2, #109	; 0x6d
 8004670:	715a      	strb	r2, [r3, #5]
	numberMap[6] = 0b01111101;
 8004672:	227d      	movs	r2, #125	; 0x7d
 8004674:	719a      	strb	r2, [r3, #6]
	numberMap[7] = 0b00000111;
 8004676:	2207      	movs	r2, #7
 8004678:	71da      	strb	r2, [r3, #7]
	numberMap[8] = 0b01111111;
 800467a:	217f      	movs	r1, #127	; 0x7f
 800467c:	7219      	strb	r1, [r3, #8]
	numberMap[9] = 0b01100111;
 800467e:	2267      	movs	r2, #103	; 0x67
 8004680:	725a      	strb	r2, [r3, #9]

	segementsSet[0] = 0b0001;
 8004682:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <UserInitialise+0xcc>)
 8004684:	2201      	movs	r2, #1
 8004686:	701a      	strb	r2, [r3, #0]
	segementsSet[1] = 0b0010;
 8004688:	2002      	movs	r0, #2
 800468a:	7058      	strb	r0, [r3, #1]
	segementsSet[2] = 0b0100;
 800468c:	2004      	movs	r0, #4
 800468e:	7098      	strb	r0, [r3, #2]
	segementsSet[3] = 0b1000;
 8004690:	2408      	movs	r4, #8
 8004692:	70dc      	strb	r4, [r3, #3]

	pinsValue[0] = numberMap[8];
 8004694:	4b18      	ldr	r3, [pc, #96]	; (80046f8 <UserInitialise+0xd0>)
 8004696:	7019      	strb	r1, [r3, #0]
	pinsValue[1] = numberMap[8];
 8004698:	7059      	strb	r1, [r3, #1]
	pinsValue[2] = numberMap[8];
 800469a:	7099      	strb	r1, [r3, #2]
	pinsValue[3] = numberMap[8];
 800469c:	70d9      	strb	r1, [r3, #3]

	segmentsL = 4;
 800469e:	4b17      	ldr	r3, [pc, #92]	; (80046fc <UserInitialise+0xd4>)
 80046a0:	7018      	strb	r0, [r3, #0]

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 80046a2:	4917      	ldr	r1, [pc, #92]	; (8004700 <UserInitialise+0xd8>)
 80046a4:	4817      	ldr	r0, [pc, #92]	; (8004704 <UserInitialise+0xdc>)
 80046a6:	f7fe fe68 	bl	800337a <HAL_UART_Receive_IT>


	// start timer 2 for ADC sampling
	__HAL_TIM_ENABLE(&htim2);
 80046aa:	4a17      	ldr	r2, [pc, #92]	; (8004708 <UserInitialise+0xe0>)
 80046ac:	6811      	ldr	r1, [r2, #0]
 80046ae:	680b      	ldr	r3, [r1, #0]
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	600b      	str	r3, [r1, #0]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	68d3      	ldr	r3, [r2, #12]
 80046ba:	f043 0301 	orr.w	r3, r3, #1
 80046be:	60d3      	str	r3, [r2, #12]

	HAL_I2C_Init(&hi2c1);
 80046c0:	4812      	ldr	r0, [pc, #72]	; (800470c <UserInitialise+0xe4>)
 80046c2:	f7fd f8f3 	bl	80018ac <HAL_I2C_Init>
 80046c6:	bd10      	pop	{r4, pc}
 80046c8:	200002b1 	.word	0x200002b1
 80046cc:	2000029c 	.word	0x2000029c
 80046d0:	200002c0 	.word	0x200002c0
 80046d4:	200007bd 	.word	0x200007bd
 80046d8:	2000043c 	.word	0x2000043c
 80046dc:	200006e4 	.word	0x200006e4
 80046e0:	200007c0 	.word	0x200007c0
 80046e4:	200002ae 	.word	0x200002ae
 80046e8:	200002ac 	.word	0x200002ac
 80046ec:	200002c2 	.word	0x200002c2
 80046f0:	20000440 	.word	0x20000440
 80046f4:	20000298 	.word	0x20000298
 80046f8:	20000798 	.word	0x20000798
 80046fc:	20000244 	.word	0x20000244
 8004700:	2000063c 	.word	0x2000063c
 8004704:	20000364 	.word	0x20000364
 8004708:	200003f4 	.word	0x200003f4
 800470c:	200002c4 	.word	0x200002c4

08004710 <DecodeCmd>:
	//HAL_I2C_Master_Transmit(&hi2c1, 0x45<<1, &buffer[0], 1, 100);

}

void DecodeCmd()
{
 8004710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004714:	b083      	sub	sp, #12
	//uint8_t charsL;

	switch (cmdBuf[1])
 8004716:	4bb6      	ldr	r3, [pc, #728]	; (80049f0 <DecodeCmd+0x2e0>)
 8004718:	785b      	ldrb	r3, [r3, #1]
 800471a:	3b41      	subs	r3, #65	; 0x41
 800471c:	2b0b      	cmp	r3, #11
 800471e:	d815      	bhi.n	800474c <DecodeCmd+0x3c>
 8004720:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004724:	0017000c 	.word	0x0017000c
 8004728:	0041002d 	.word	0x0041002d
 800472c:	006b0057 	.word	0x006b0057
 8004730:	00d100b2 	.word	0x00d100b2
 8004734:	019e0120 	.word	0x019e0120
 8004738:	02ec0228 	.word	0x02ec0228
	{
	case 'A' : //Student number
		//flowCounter = 0;	//-----------------------------------------------------------------------------------------------------------------flow counter remove
		HAL_UART_Transmit(&huart1, (uint8_t*)txStudentNo, 13, 1000);
 800473c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004740:	220d      	movs	r2, #13
 8004742:	49ac      	ldr	r1, [pc, #688]	; (80049f4 <DecodeCmd+0x2e4>)
 8004744:	6809      	ldr	r1, [r1, #0]
 8004746:	48ac      	ldr	r0, [pc, #688]	; (80049f8 <DecodeCmd+0x2e8>)
 8004748:	f7fe ffeb 	bl	8003722 <HAL_UART_Transmit>
		txBuf[0] = '$';	txBuf[1] = 'B';
		txBuf[2] = '\r'; txBuf[3] = '\n';
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
		break;
	}
}
 800474c:	b003      	add	sp, #12
 800474e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		String2Int(cmdBuf+3, (int16_t*) &valveState);
 8004752:	49aa      	ldr	r1, [pc, #680]	; (80049fc <DecodeCmd+0x2ec>)
 8004754:	48aa      	ldr	r0, [pc, #680]	; (8004a00 <DecodeCmd+0x2f0>)
 8004756:	f7ff fa45 	bl	8003be4 <String2Int>
		switchValve();//----------------------------------------------------------default values
 800475a:	f7ff fa09 	bl	8003b70 <switchValve>
		txBuf[0] = '$';	txBuf[1] = 'B';
 800475e:	49a9      	ldr	r1, [pc, #676]	; (8004a04 <DecodeCmd+0x2f4>)
 8004760:	2324      	movs	r3, #36	; 0x24
 8004762:	700b      	strb	r3, [r1, #0]
 8004764:	2342      	movs	r3, #66	; 0x42
 8004766:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8004768:	230d      	movs	r3, #13
 800476a:	708b      	strb	r3, [r1, #2]
 800476c:	230a      	movs	r3, #10
 800476e:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8004770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004774:	2204      	movs	r2, #4
 8004776:	48a0      	ldr	r0, [pc, #640]	; (80049f8 <DecodeCmd+0x2e8>)
 8004778:	f7fe ffd3 	bl	8003722 <HAL_UART_Transmit>
		break;
 800477c:	e7e6      	b.n	800474c <DecodeCmd+0x3c>
		String2Int(cmdBuf+3, (int16_t*) &scheduleState);//----------------------------------------------------------default values OFF
 800477e:	49a2      	ldr	r1, [pc, #648]	; (8004a08 <DecodeCmd+0x2f8>)
 8004780:	489f      	ldr	r0, [pc, #636]	; (8004a00 <DecodeCmd+0x2f0>)
 8004782:	f7ff fa2f 	bl	8003be4 <String2Int>
		txBuf[0] = '$';	txBuf[1] = 'C';
 8004786:	499f      	ldr	r1, [pc, #636]	; (8004a04 <DecodeCmd+0x2f4>)
 8004788:	2324      	movs	r3, #36	; 0x24
 800478a:	700b      	strb	r3, [r1, #0]
 800478c:	2343      	movs	r3, #67	; 0x43
 800478e:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8004790:	230d      	movs	r3, #13
 8004792:	708b      	strb	r3, [r1, #2]
 8004794:	230a      	movs	r3, #10
 8004796:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8004798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800479c:	2204      	movs	r2, #4
 800479e:	4896      	ldr	r0, [pc, #600]	; (80049f8 <DecodeCmd+0x2e8>)
 80047a0:	f7fe ffbf 	bl	8003722 <HAL_UART_Transmit>
		break;
 80047a4:	e7d2      	b.n	800474c <DecodeCmd+0x3c>
		String2Int(cmdBuf+3, (int16_t*) &heaterState);
 80047a6:	4999      	ldr	r1, [pc, #612]	; (8004a0c <DecodeCmd+0x2fc>)
 80047a8:	4895      	ldr	r0, [pc, #596]	; (8004a00 <DecodeCmd+0x2f0>)
 80047aa:	f7ff fa1b 	bl	8003be4 <String2Int>
		switchHeater();
 80047ae:	f7ff f9d1 	bl	8003b54 <switchHeater>
		txBuf[0] = '$';	txBuf[1] = 'D';
 80047b2:	4994      	ldr	r1, [pc, #592]	; (8004a04 <DecodeCmd+0x2f4>)
 80047b4:	2324      	movs	r3, #36	; 0x24
 80047b6:	700b      	strb	r3, [r1, #0]
 80047b8:	2344      	movs	r3, #68	; 0x44
 80047ba:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 80047bc:	230d      	movs	r3, #13
 80047be:	708b      	strb	r3, [r1, #2]
 80047c0:	230a      	movs	r3, #10
 80047c2:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 80047c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047c8:	2204      	movs	r2, #4
 80047ca:	488b      	ldr	r0, [pc, #556]	; (80049f8 <DecodeCmd+0x2e8>)
 80047cc:	f7fe ffa9 	bl	8003722 <HAL_UART_Transmit>
		break;
 80047d0:	e7bc      	b.n	800474c <DecodeCmd+0x3c>
		String2Int(cmdBuf+3, (int16_t*) &valveState);
 80047d2:	498a      	ldr	r1, [pc, #552]	; (80049fc <DecodeCmd+0x2ec>)
 80047d4:	488a      	ldr	r0, [pc, #552]	; (8004a00 <DecodeCmd+0x2f0>)
 80047d6:	f7ff fa05 	bl	8003be4 <String2Int>
		txBuf[0] = '$';	txBuf[1] = 'E';
 80047da:	498a      	ldr	r1, [pc, #552]	; (8004a04 <DecodeCmd+0x2f4>)
 80047dc:	2324      	movs	r3, #36	; 0x24
 80047de:	700b      	strb	r3, [r1, #0]
 80047e0:	2345      	movs	r3, #69	; 0x45
 80047e2:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 80047e4:	230d      	movs	r3, #13
 80047e6:	708b      	strb	r3, [r1, #2]
 80047e8:	230a      	movs	r3, #10
 80047ea:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 80047ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047f0:	2204      	movs	r2, #4
 80047f2:	4881      	ldr	r0, [pc, #516]	; (80049f8 <DecodeCmd+0x2e8>)
 80047f4:	f7fe ff95 	bl	8003722 <HAL_UART_Transmit>
		break;
 80047f8:	e7a8      	b.n	800474c <DecodeCmd+0x3c>
		String2Int(cmdBuf+3, (int16_t*) &tempSetpoint);
 80047fa:	4c85      	ldr	r4, [pc, #532]	; (8004a10 <DecodeCmd+0x300>)
 80047fc:	4621      	mov	r1, r4
 80047fe:	4880      	ldr	r0, [pc, #512]	; (8004a00 <DecodeCmd+0x2f0>)
 8004800:	f7ff f9f0 	bl	8003be4 <String2Int>
		txBuf[0] = '$'; txBuf[1] = 'F';	txBuf[2] = '\r'; txBuf[3] = '\n';
 8004804:	497f      	ldr	r1, [pc, #508]	; (8004a04 <DecodeCmd+0x2f4>)
 8004806:	2324      	movs	r3, #36	; 0x24
 8004808:	700b      	strb	r3, [r1, #0]
 800480a:	2346      	movs	r3, #70	; 0x46
 800480c:	704b      	strb	r3, [r1, #1]
 800480e:	230d      	movs	r3, #13
 8004810:	708b      	strb	r3, [r1, #2]
 8004812:	230a      	movs	r3, #10
 8004814:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8004816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800481a:	2204      	movs	r2, #4
 800481c:	4876      	ldr	r0, [pc, #472]	; (80049f8 <DecodeCmd+0x2e8>)
 800481e:	f7fe ff80 	bl	8003722 <HAL_UART_Transmit>
		i = 0;
 8004822:	2200      	movs	r2, #0
 8004824:	4b7b      	ldr	r3, [pc, #492]	; (8004a14 <DecodeCmd+0x304>)
 8004826:	601a      	str	r2, [r3, #0]
		charsL = Int2String(tempF, tempSetpoint, 4);
 8004828:	8821      	ldrh	r1, [r4, #0]
 800482a:	2204      	movs	r2, #4
 800482c:	b209      	sxth	r1, r1
 800482e:	487a      	ldr	r0, [pc, #488]	; (8004a18 <DecodeCmd+0x308>)
 8004830:	f7ff fa08 	bl	8003c44 <Int2String>
 8004834:	b2c0      	uxtb	r0, r0
 8004836:	4b79      	ldr	r3, [pc, #484]	; (8004a1c <DecodeCmd+0x30c>)
 8004838:	7018      	strb	r0, [r3, #0]
		while (i < charsL)
 800483a:	e018      	b.n	800486e <DecodeCmd+0x15e>
			for (j=0; j <10; j++)
 800483c:	4a78      	ldr	r2, [pc, #480]	; (8004a20 <DecodeCmd+0x310>)
 800483e:	6813      	ldr	r3, [r2, #0]
 8004840:	3301      	adds	r3, #1
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	4b76      	ldr	r3, [pc, #472]	; (8004a20 <DecodeCmd+0x310>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b09      	cmp	r3, #9
 800484a:	dc0d      	bgt.n	8004868 <DecodeCmd+0x158>
				if (tempF[i] == (j+0x30))
 800484c:	4a72      	ldr	r2, [pc, #456]	; (8004a18 <DecodeCmd+0x308>)
 800484e:	5d11      	ldrb	r1, [r2, r4]
 8004850:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004854:	4291      	cmp	r1, r2
 8004856:	d1f1      	bne.n	800483c <DecodeCmd+0x12c>
					pinsValue[i] = numberMap[j];
 8004858:	4a72      	ldr	r2, [pc, #456]	; (8004a24 <DecodeCmd+0x314>)
 800485a:	5cd2      	ldrb	r2, [r2, r3]
 800485c:	4b72      	ldr	r3, [pc, #456]	; (8004a28 <DecodeCmd+0x318>)
 800485e:	551a      	strb	r2, [r3, r4]
					j = 10;
 8004860:	220a      	movs	r2, #10
 8004862:	4b6f      	ldr	r3, [pc, #444]	; (8004a20 <DecodeCmd+0x310>)
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e7e9      	b.n	800483c <DecodeCmd+0x12c>
			i++;
 8004868:	3401      	adds	r4, #1
 800486a:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <DecodeCmd+0x304>)
 800486c:	601c      	str	r4, [r3, #0]
		while (i < charsL)
 800486e:	4b69      	ldr	r3, [pc, #420]	; (8004a14 <DecodeCmd+0x304>)
 8004870:	681c      	ldr	r4, [r3, #0]
 8004872:	42a0      	cmp	r0, r4
 8004874:	dd03      	ble.n	800487e <DecodeCmd+0x16e>
			for (j=0; j <10; j++)
 8004876:	2200      	movs	r2, #0
 8004878:	4b69      	ldr	r3, [pc, #420]	; (8004a20 <DecodeCmd+0x310>)
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	e7e2      	b.n	8004844 <DecodeCmd+0x134>
		i = 0;
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
		segmentsL = charsL;
 8004882:	4b6a      	ldr	r3, [pc, #424]	; (8004a2c <DecodeCmd+0x31c>)
 8004884:	7018      	strb	r0, [r3, #0]
		break;
 8004886:	e761      	b.n	800474c <DecodeCmd+0x3c>
		txBuf[0] = '$';	txBuf[1] = 'G';	txBuf[2] = ',';
 8004888:	4c5e      	ldr	r4, [pc, #376]	; (8004a04 <DecodeCmd+0x2f4>)
 800488a:	2324      	movs	r3, #36	; 0x24
 800488c:	7023      	strb	r3, [r4, #0]
 800488e:	2347      	movs	r3, #71	; 0x47
 8004890:	7063      	strb	r3, [r4, #1]
 8004892:	232c      	movs	r3, #44	; 0x2c
 8004894:	70a3      	strb	r3, [r4, #2]
		charsL = Int2String(txBuf+3, tempSetpoint, 4);
 8004896:	4b5e      	ldr	r3, [pc, #376]	; (8004a10 <DecodeCmd+0x300>)
 8004898:	8819      	ldrh	r1, [r3, #0]
 800489a:	2204      	movs	r2, #4
 800489c:	b209      	sxth	r1, r1
 800489e:	1ce0      	adds	r0, r4, #3
 80048a0:	f7ff f9d0 	bl	8003c44 <Int2String>
 80048a4:	b2c2      	uxtb	r2, r0
 80048a6:	4b5d      	ldr	r3, [pc, #372]	; (8004a1c <DecodeCmd+0x30c>)
 80048a8:	701a      	strb	r2, [r3, #0]
		txBuf[3 + charsL] = '\r'; txBuf[4 + charsL] = '\n';
 80048aa:	1cd3      	adds	r3, r2, #3
 80048ac:	210d      	movs	r1, #13
 80048ae:	54e1      	strb	r1, [r4, r3]
 80048b0:	1d13      	adds	r3, r2, #4
 80048b2:	210a      	movs	r1, #10
 80048b4:	54e1      	strb	r1, [r4, r3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL+5, 1000);
 80048b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048ba:	3205      	adds	r2, #5
 80048bc:	4621      	mov	r1, r4
 80048be:	484e      	ldr	r0, [pc, #312]	; (80049f8 <DecodeCmd+0x2e8>)
 80048c0:	f7fe ff2f 	bl	8003722 <HAL_UART_Transmit>
		break;
 80048c4:	e742      	b.n	800474c <DecodeCmd+0x3c>
		timeL = 0;
 80048c6:	4c5a      	ldr	r4, [pc, #360]	; (8004a30 <DecodeCmd+0x320>)
 80048c8:	2300      	movs	r3, #0
 80048ca:	7023      	strb	r3, [r4, #0]
		timeL = StringTime2Int(cmdBuf+3+timeL, &HH_set);
 80048cc:	7820      	ldrb	r0, [r4, #0]
 80048ce:	3003      	adds	r0, #3
 80048d0:	4e58      	ldr	r6, [pc, #352]	; (8004a34 <DecodeCmd+0x324>)
 80048d2:	4d47      	ldr	r5, [pc, #284]	; (80049f0 <DecodeCmd+0x2e0>)
 80048d4:	4631      	mov	r1, r6
 80048d6:	4428      	add	r0, r5
 80048d8:	f7ff f958 	bl	8003b8c <StringTime2Int>
 80048dc:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+3+timeL, &mm_set);
 80048de:	7820      	ldrb	r0, [r4, #0]
 80048e0:	3003      	adds	r0, #3
 80048e2:	4f55      	ldr	r7, [pc, #340]	; (8004a38 <DecodeCmd+0x328>)
 80048e4:	4639      	mov	r1, r7
 80048e6:	4428      	add	r0, r5
 80048e8:	f7ff f950 	bl	8003b8c <StringTime2Int>
 80048ec:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+3+timeL, &ss_set);
 80048ee:	7820      	ldrb	r0, [r4, #0]
 80048f0:	3003      	adds	r0, #3
 80048f2:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8004a5c <DecodeCmd+0x34c>
 80048f6:	4641      	mov	r1, r8
 80048f8:	4428      	add	r0, r5
 80048fa:	f7ff f947 	bl	8003b8c <StringTime2Int>
 80048fe:	7020      	strb	r0, [r4, #0]
		setTime.Hours = HH_set;
 8004900:	4d4e      	ldr	r5, [pc, #312]	; (8004a3c <DecodeCmd+0x32c>)
 8004902:	7833      	ldrb	r3, [r6, #0]
 8004904:	702b      	strb	r3, [r5, #0]
		setTime.Minutes = mm_set;
 8004906:	783b      	ldrb	r3, [r7, #0]
 8004908:	706b      	strb	r3, [r5, #1]
		setTime.Seconds = ss_set;
 800490a:	f898 3000 	ldrb.w	r3, [r8]
 800490e:	70ab      	strb	r3, [r5, #2]
		__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8004910:	4c4b      	ldr	r4, [pc, #300]	; (8004a40 <DecodeCmd+0x330>)
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	22ca      	movs	r2, #202	; 0xca
 8004916:	625a      	str	r2, [r3, #36]	; 0x24
 8004918:	2253      	movs	r2, #83	; 0x53
 800491a:	625a      	str	r2, [r3, #36]	; 0x24
		halStatus = RTC_EnterInitMode(&hrtc); // Enter init mode
 800491c:	4620      	mov	r0, r4
 800491e:	f7fe f88e 	bl	8002a3e <RTC_EnterInitMode>
 8004922:	4e48      	ldr	r6, [pc, #288]	; (8004a44 <DecodeCmd+0x334>)
 8004924:	7030      	strb	r0, [r6, #0]
		halStatus = HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BCD);
 8004926:	2201      	movs	r2, #1
 8004928:	4629      	mov	r1, r5
 800492a:	4620      	mov	r0, r4
 800492c:	f7fe f912 	bl	8002b54 <HAL_RTC_SetTime>
 8004930:	7030      	strb	r0, [r6, #0]
		halStatus = HAL_RTC_SetDate(&hrtc, &setDate, RTC_FORMAT_BCD);
 8004932:	2201      	movs	r2, #1
 8004934:	4944      	ldr	r1, [pc, #272]	; (8004a48 <DecodeCmd+0x338>)
 8004936:	4620      	mov	r0, r4
 8004938:	f7fe f98b 	bl	8002c52 <HAL_RTC_SetDate>
 800493c:	7030      	strb	r0, [r6, #0]
		__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	22ff      	movs	r2, #255	; 0xff
 8004942:	625a      	str	r2, [r3, #36]	; 0x24
		txBuf[0] = '$';	txBuf[1] = 'H';
 8004944:	492f      	ldr	r1, [pc, #188]	; (8004a04 <DecodeCmd+0x2f4>)
 8004946:	2324      	movs	r3, #36	; 0x24
 8004948:	700b      	strb	r3, [r1, #0]
 800494a:	2348      	movs	r3, #72	; 0x48
 800494c:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 800494e:	230d      	movs	r3, #13
 8004950:	708b      	strb	r3, [r1, #2]
 8004952:	230a      	movs	r3, #10
 8004954:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8004956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800495a:	2204      	movs	r2, #4
 800495c:	4826      	ldr	r0, [pc, #152]	; (80049f8 <DecodeCmd+0x2e8>)
 800495e:	f7fe fee0 	bl	8003722 <HAL_UART_Transmit>
		break;
 8004962:	e6f3      	b.n	800474c <DecodeCmd+0x3c>
		getTime = getTimeLive;
 8004964:	4e39      	ldr	r6, [pc, #228]	; (8004a4c <DecodeCmd+0x33c>)
 8004966:	4634      	mov	r4, r6
 8004968:	4d39      	ldr	r5, [pc, #228]	; (8004a50 <DecodeCmd+0x340>)
 800496a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800496c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800496e:	682b      	ldr	r3, [r5, #0]
 8004970:	6023      	str	r3, [r4, #0]
		getDate = getDateLive;
 8004972:	4b38      	ldr	r3, [pc, #224]	; (8004a54 <DecodeCmd+0x344>)
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4b38      	ldr	r3, [pc, #224]	; (8004a58 <DecodeCmd+0x348>)
 8004978:	601a      	str	r2, [r3, #0]
		txBuf[0] = '$';	txBuf[1] = 'I';
 800497a:	4c22      	ldr	r4, [pc, #136]	; (8004a04 <DecodeCmd+0x2f4>)
 800497c:	2324      	movs	r3, #36	; 0x24
 800497e:	7023      	strb	r3, [r4, #0]
 8004980:	2349      	movs	r3, #73	; 0x49
 8004982:	7063      	strb	r3, [r4, #1]
		txBuf[2] = ',';
 8004984:	272c      	movs	r7, #44	; 0x2c
 8004986:	70a7      	strb	r7, [r4, #2]
		charsL = 3;
 8004988:	4d24      	ldr	r5, [pc, #144]	; (8004a1c <DecodeCmd+0x30c>)
 800498a:	2303      	movs	r3, #3
 800498c:	702b      	strb	r3, [r5, #0]
		charsL += Int2String(txBuf+charsL, (uint32_t) getTime.Hours, 2);
 800498e:	2202      	movs	r2, #2
 8004990:	7831      	ldrb	r1, [r6, #0]
 8004992:	18e0      	adds	r0, r4, r3
 8004994:	f7ff f956 	bl	8003c44 <Int2String>
 8004998:	782b      	ldrb	r3, [r5, #0]
 800499a:	4403      	add	r3, r0
 800499c:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 800499e:	54e7      	strb	r7, [r4, r3]
 80049a0:	3301      	adds	r3, #1
 80049a2:	b2d8      	uxtb	r0, r3
 80049a4:	7028      	strb	r0, [r5, #0]
		charsL += Int2String(txBuf+charsL, (uint32_t) getTime.Minutes, 2);
 80049a6:	2202      	movs	r2, #2
 80049a8:	7871      	ldrb	r1, [r6, #1]
 80049aa:	4420      	add	r0, r4
 80049ac:	f7ff f94a 	bl	8003c44 <Int2String>
 80049b0:	782b      	ldrb	r3, [r5, #0]
 80049b2:	4403      	add	r3, r0
 80049b4:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 80049b6:	54e7      	strb	r7, [r4, r3]
 80049b8:	3301      	adds	r3, #1
 80049ba:	b2d8      	uxtb	r0, r3
 80049bc:	7028      	strb	r0, [r5, #0]
		charsL += Int2String(txBuf+charsL, (uint32_t) getTime.Seconds, 2);
 80049be:	2202      	movs	r2, #2
 80049c0:	78b1      	ldrb	r1, [r6, #2]
 80049c2:	4420      	add	r0, r4
 80049c4:	f7ff f93e 	bl	8003c44 <Int2String>
 80049c8:	782b      	ldrb	r3, [r5, #0]
 80049ca:	4403      	add	r3, r0
 80049cc:	b2db      	uxtb	r3, r3
		txBuf[charsL] = '\r'; charsL++; txBuf[charsL] = '\n'; charsL++;
 80049ce:	220d      	movs	r2, #13
 80049d0:	54e2      	strb	r2, [r4, r3]
 80049d2:	3301      	adds	r3, #1
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	220a      	movs	r2, #10
 80049d8:	54e2      	strb	r2, [r4, r3]
 80049da:	3301      	adds	r3, #1
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	702a      	strb	r2, [r5, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL, 1000);
 80049e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049e4:	4621      	mov	r1, r4
 80049e6:	4804      	ldr	r0, [pc, #16]	; (80049f8 <DecodeCmd+0x2e8>)
 80049e8:	f7fe fe9b 	bl	8003722 <HAL_UART_Transmit>
		break;
 80049ec:	e6ae      	b.n	800474c <DecodeCmd+0x3c>
 80049ee:	bf00      	nop
 80049f0:	20000758 	.word	0x20000758
 80049f4:	20000004 	.word	0x20000004
 80049f8:	20000364 	.word	0x20000364
 80049fc:	200002ae 	.word	0x200002ae
 8004a00:	2000075b 	.word	0x2000075b
 8004a04:	20000598 	.word	0x20000598
 8004a08:	200002c2 	.word	0x200002c2
 8004a0c:	200002ac 	.word	0x200002ac
 8004a10:	2000029c 	.word	0x2000029c
 8004a14:	200002a0 	.word	0x200002a0
 8004a18:	200007b8 	.word	0x200007b8
 8004a1c:	200002a4 	.word	0x200002a4
 8004a20:	20000280 	.word	0x20000280
 8004a24:	20000440 	.word	0x20000440
 8004a28:	20000798 	.word	0x20000798
 8004a2c:	20000244 	.word	0x20000244
 8004a30:	2000027c 	.word	0x2000027c
 8004a34:	200004a1 	.word	0x200004a1
 8004a38:	200007b4 	.word	0x200007b4
 8004a3c:	200006ec 	.word	0x200006ec
 8004a40:	200003d4 	.word	0x200003d4
 8004a44:	20000496 	.word	0x20000496
 8004a48:	20000634 	.word	0x20000634
 8004a4c:	200007a0 	.word	0x200007a0
 8004a50:	200004a4 	.word	0x200004a4
 8004a54:	200007dc 	.word	0x200007dc
 8004a58:	20000498 	.word	0x20000498
 8004a5c:	20000494 	.word	0x20000494
		String2Int(cmdBuf+3, &heatingWindow);
 8004a60:	4eb1      	ldr	r6, [pc, #708]	; (8004d28 <DecodeCmd+0x618>)
 8004a62:	4db2      	ldr	r5, [pc, #712]	; (8004d2c <DecodeCmd+0x61c>)
 8004a64:	4631      	mov	r1, r6
 8004a66:	4628      	mov	r0, r5
 8004a68:	f7ff f8bc 	bl	8003be4 <String2Int>
		timeL = 0;
 8004a6c:	4cb0      	ldr	r4, [pc, #704]	; (8004d30 <DecodeCmd+0x620>)
 8004a6e:	2300      	movs	r3, #0
 8004a70:	7023      	strb	r3, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5, &HH_on);
 8004a72:	f8df b304 	ldr.w	fp, [pc, #772]	; 8004d78 <DecodeCmd+0x668>
 8004a76:	4659      	mov	r1, fp
 8004a78:	1ca8      	adds	r0, r5, #2
 8004a7a:	f7ff f887 	bl	8003b8c <StringTime2Int>
 8004a7e:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &mm_on);
 8004a80:	7820      	ldrb	r0, [r4, #0]
 8004a82:	3005      	adds	r0, #5
 8004a84:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 8004d7c <DecodeCmd+0x66c>
 8004a88:	3d03      	subs	r5, #3
 8004a8a:	4651      	mov	r1, sl
 8004a8c:	4428      	add	r0, r5
 8004a8e:	f7ff f87d 	bl	8003b8c <StringTime2Int>
 8004a92:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &ss_on);
 8004a94:	7820      	ldrb	r0, [r4, #0]
 8004a96:	3005      	adds	r0, #5
 8004a98:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 8004d80 <DecodeCmd+0x670>
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	4428      	add	r0, r5
 8004aa0:	f7ff f874 	bl	8003b8c <StringTime2Int>
 8004aa4:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &HH_off);
 8004aa6:	7820      	ldrb	r0, [r4, #0]
 8004aa8:	3005      	adds	r0, #5
 8004aaa:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 8004d84 <DecodeCmd+0x674>
 8004aae:	4641      	mov	r1, r8
 8004ab0:	4428      	add	r0, r5
 8004ab2:	f7ff f86b 	bl	8003b8c <StringTime2Int>
 8004ab6:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &mm_off);
 8004ab8:	7820      	ldrb	r0, [r4, #0]
 8004aba:	3005      	adds	r0, #5
 8004abc:	4f9d      	ldr	r7, [pc, #628]	; (8004d34 <DecodeCmd+0x624>)
 8004abe:	4639      	mov	r1, r7
 8004ac0:	4428      	add	r0, r5
 8004ac2:	f7ff f863 	bl	8003b8c <StringTime2Int>
 8004ac6:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &ss_off);
 8004ac8:	7820      	ldrb	r0, [r4, #0]
 8004aca:	3005      	adds	r0, #5
 8004acc:	499a      	ldr	r1, [pc, #616]	; (8004d38 <DecodeCmd+0x628>)
 8004ace:	4428      	add	r0, r5
 8004ad0:	f7ff f85c 	bl	8003b8c <StringTime2Int>
 8004ad4:	7020      	strb	r0, [r4, #0]
		onTime[heatingWindow-1].Hours = HH_on;
 8004ad6:	f9b6 4000 	ldrsh.w	r4, [r6]
 8004ada:	3c01      	subs	r4, #1
 8004adc:	4997      	ldr	r1, [pc, #604]	; (8004d3c <DecodeCmd+0x62c>)
 8004ade:	00a3      	lsls	r3, r4, #2
 8004ae0:	4423      	add	r3, r4
 8004ae2:	009a      	lsls	r2, r3, #2
 8004ae4:	188b      	adds	r3, r1, r2
 8004ae6:	f89b 0000 	ldrb.w	r0, [fp]
 8004aea:	5488      	strb	r0, [r1, r2]
		onTime[heatingWindow-1].Minutes = mm_on;
 8004aec:	f89a 2000 	ldrb.w	r2, [sl]
 8004af0:	705a      	strb	r2, [r3, #1]
		onTime[heatingWindow-1].Seconds = ss_on;
 8004af2:	f899 2000 	ldrb.w	r2, [r9]
 8004af6:	709a      	strb	r2, [r3, #2]
		onEpoch[heatingWindow-1] = timeToEpoch(getDateLive, onTime[heatingWindow-1]);
 8004af8:	4d91      	ldr	r5, [pc, #580]	; (8004d40 <DecodeCmd+0x630>)
 8004afa:	f8d5 e000 	ldr.w	lr, [r5]
 8004afe:	f103 020c 	add.w	r2, r3, #12
 8004b02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b06:	e88d 0003 	stmia.w	sp, {r0, r1}
 8004b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b0c:	4670      	mov	r0, lr
 8004b0e:	f7ff f967 	bl	8003de0 <timeToEpoch>
 8004b12:	4b8c      	ldr	r3, [pc, #560]	; (8004d44 <DecodeCmd+0x634>)
 8004b14:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		offTime[heatingWindow-1].Hours = HH_off;
 8004b18:	f9b6 4000 	ldrsh.w	r4, [r6]
 8004b1c:	3c01      	subs	r4, #1
 8004b1e:	498a      	ldr	r1, [pc, #552]	; (8004d48 <DecodeCmd+0x638>)
 8004b20:	00a3      	lsls	r3, r4, #2
 8004b22:	4423      	add	r3, r4
 8004b24:	009a      	lsls	r2, r3, #2
 8004b26:	188b      	adds	r3, r1, r2
 8004b28:	f898 0000 	ldrb.w	r0, [r8]
 8004b2c:	5488      	strb	r0, [r1, r2]
		offTime[heatingWindow-1].Minutes = mm_off;
 8004b2e:	783a      	ldrb	r2, [r7, #0]
 8004b30:	705a      	strb	r2, [r3, #1]
		offTime[heatingWindow-1].Seconds = ss_off;
 8004b32:	4a81      	ldr	r2, [pc, #516]	; (8004d38 <DecodeCmd+0x628>)
 8004b34:	7812      	ldrb	r2, [r2, #0]
 8004b36:	709a      	strb	r2, [r3, #2]
		offEpoch[heatingWindow-1] = timeToEpoch(getDateLive, offTime[heatingWindow-1]);
 8004b38:	682d      	ldr	r5, [r5, #0]
 8004b3a:	f103 020c 	add.w	r2, r3, #12
 8004b3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b42:	e88d 0003 	stmia.w	sp, {r0, r1}
 8004b46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f7ff f949 	bl	8003de0 <timeToEpoch>
 8004b4e:	4b7f      	ldr	r3, [pc, #508]	; (8004d4c <DecodeCmd+0x63c>)
 8004b50:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		txBuf[0] = '$';	txBuf[1] = 'J';
 8004b54:	497e      	ldr	r1, [pc, #504]	; (8004d50 <DecodeCmd+0x640>)
 8004b56:	2324      	movs	r3, #36	; 0x24
 8004b58:	700b      	strb	r3, [r1, #0]
 8004b5a:	234a      	movs	r3, #74	; 0x4a
 8004b5c:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8004b5e:	230d      	movs	r3, #13
 8004b60:	708b      	strb	r3, [r1, #2]
 8004b62:	230a      	movs	r3, #10
 8004b64:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8004b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	4879      	ldr	r0, [pc, #484]	; (8004d54 <DecodeCmd+0x644>)
 8004b6e:	f7fe fdd8 	bl	8003722 <HAL_UART_Transmit>
		break;
 8004b72:	e5eb      	b.n	800474c <DecodeCmd+0x3c>
		txBuf[0] = '$'; txBuf[1] = 'K'; txBuf[2] = ',';
 8004b74:	4c76      	ldr	r4, [pc, #472]	; (8004d50 <DecodeCmd+0x640>)
 8004b76:	2324      	movs	r3, #36	; 0x24
 8004b78:	7023      	strb	r3, [r4, #0]
 8004b7a:	234b      	movs	r3, #75	; 0x4b
 8004b7c:	7063      	strb	r3, [r4, #1]
 8004b7e:	262c      	movs	r6, #44	; 0x2c
 8004b80:	70a6      	strb	r6, [r4, #2]
		charsL = 3;
 8004b82:	4d75      	ldr	r5, [pc, #468]	; (8004d58 <DecodeCmd+0x648>)
 8004b84:	2303      	movs	r3, #3
 8004b86:	702b      	strb	r3, [r5, #0]
		charsL += Int2String(txBuf+charsL, irmsA, 10);
 8004b88:	220a      	movs	r2, #10
 8004b8a:	4b74      	ldr	r3, [pc, #464]	; (8004d5c <DecodeCmd+0x64c>)
 8004b8c:	6819      	ldr	r1, [r3, #0]
 8004b8e:	1ce0      	adds	r0, r4, #3
 8004b90:	f7ff f858 	bl	8003c44 <Int2String>
 8004b94:	782b      	ldrb	r3, [r5, #0]
 8004b96:	4403      	add	r3, r0
 8004b98:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004b9a:	54e6      	strb	r6, [r4, r3]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	b2d8      	uxtb	r0, r3
 8004ba0:	7028      	strb	r0, [r5, #0]
		charsL += Int2String(txBuf+charsL, vrmsV, 10);
 8004ba2:	220a      	movs	r2, #10
 8004ba4:	4b6e      	ldr	r3, [pc, #440]	; (8004d60 <DecodeCmd+0x650>)
 8004ba6:	6819      	ldr	r1, [r3, #0]
 8004ba8:	4420      	add	r0, r4
 8004baa:	f7ff f84b 	bl	8003c44 <Int2String>
 8004bae:	782b      	ldrb	r3, [r5, #0]
 8004bb0:	4403      	add	r3, r0
 8004bb2:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004bb4:	54e6      	strb	r6, [r4, r3]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	b2df      	uxtb	r7, r3
 8004bba:	702f      	strb	r7, [r5, #0]
		charsL += Int2String(txBuf+charsL, TempConv(ambientTavg), 10);    // temp ambient
 8004bbc:	4b69      	ldr	r3, [pc, #420]	; (8004d64 <DecodeCmd+0x654>)
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	f7fe ffb8 	bl	8003b34 <TempConv>
 8004bc4:	220a      	movs	r2, #10
 8004bc6:	4601      	mov	r1, r0
 8004bc8:	19e0      	adds	r0, r4, r7
 8004bca:	f7ff f83b 	bl	8003c44 <Int2String>
 8004bce:	782b      	ldrb	r3, [r5, #0]
 8004bd0:	4403      	add	r3, r0
 8004bd2:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004bd4:	54e6      	strb	r6, [r4, r3]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	b2df      	uxtb	r7, r3
 8004bda:	702f      	strb	r7, [r5, #0]
		charsL += Int2String(txBuf+charsL, TempConv(waterTavg), 10);    // temp water
 8004bdc:	4b62      	ldr	r3, [pc, #392]	; (8004d68 <DecodeCmd+0x658>)
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	f7fe ffa8 	bl	8003b34 <TempConv>
 8004be4:	220a      	movs	r2, #10
 8004be6:	4601      	mov	r1, r0
 8004be8:	19e0      	adds	r0, r4, r7
 8004bea:	f7ff f82b 	bl	8003c44 <Int2String>
 8004bee:	782b      	ldrb	r3, [r5, #0]
 8004bf0:	4403      	add	r3, r0
 8004bf2:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004bf4:	54e6      	strb	r6, [r4, r3]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	b2d8      	uxtb	r0, r3
 8004bfa:	7028      	strb	r0, [r5, #0]
		charsL += Int2String(txBuf+charsL, totalFlow, 10);    // flow totalFlow
 8004bfc:	220a      	movs	r2, #10
 8004bfe:	4b5b      	ldr	r3, [pc, #364]	; (8004d6c <DecodeCmd+0x65c>)
 8004c00:	6819      	ldr	r1, [r3, #0]
 8004c02:	4420      	add	r0, r4
 8004c04:	f7ff f81e 	bl	8003c44 <Int2String>
 8004c08:	782b      	ldrb	r3, [r5, #0]
 8004c0a:	4403      	add	r3, r0
 8004c0c:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004c0e:	54e6      	strb	r6, [r4, r3]
 8004c10:	3301      	adds	r3, #1
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	702b      	strb	r3, [r5, #0]
		if (heaterState == 0U)
 8004c16:	4a56      	ldr	r2, [pc, #344]	; (8004d70 <DecodeCmd+0x660>)
 8004c18:	8812      	ldrh	r2, [r2, #0]
 8004c1a:	b212      	sxth	r2, r2
 8004c1c:	2a00      	cmp	r2, #0
 8004c1e:	d140      	bne.n	8004ca2 <DecodeCmd+0x592>
			txBuf[charsL] = 'O'; charsL++;
 8004c20:	4622      	mov	r2, r4
 8004c22:	214f      	movs	r1, #79	; 0x4f
 8004c24:	54e1      	strb	r1, [r4, r3]
 8004c26:	3301      	adds	r3, #1
 8004c28:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'F'; charsL++;
 8004c2a:	2146      	movs	r1, #70	; 0x46
 8004c2c:	54e1      	strb	r1, [r4, r3]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'F'; charsL++;
 8004c32:	54e1      	strb	r1, [r4, r3]
 8004c34:	3301      	adds	r3, #1
 8004c36:	b2db      	uxtb	r3, r3
			txBuf[charsL] = ','; charsL++;
 8004c38:	54d6      	strb	r6, [r2, r3]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	702b      	strb	r3, [r5, #0]
		if(valveState==0U)
 8004c3e:	4b4d      	ldr	r3, [pc, #308]	; (8004d74 <DecodeCmd+0x664>)
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	b21b      	sxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d140      	bne.n	8004cca <DecodeCmd+0x5ba>
			txBuf[charsL] = 'C'; charsL++;
 8004c48:	4943      	ldr	r1, [pc, #268]	; (8004d58 <DecodeCmd+0x648>)
 8004c4a:	780b      	ldrb	r3, [r1, #0]
 8004c4c:	4a40      	ldr	r2, [pc, #256]	; (8004d50 <DecodeCmd+0x640>)
 8004c4e:	2043      	movs	r0, #67	; 0x43
 8004c50:	54d0      	strb	r0, [r2, r3]
 8004c52:	3301      	adds	r3, #1
 8004c54:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'L'; charsL++;
 8004c56:	204c      	movs	r0, #76	; 0x4c
 8004c58:	54d0      	strb	r0, [r2, r3]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'O'; charsL++;
 8004c5e:	204f      	movs	r0, #79	; 0x4f
 8004c60:	54d0      	strb	r0, [r2, r3]
 8004c62:	3301      	adds	r3, #1
 8004c64:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'S'; charsL++;
 8004c66:	2053      	movs	r0, #83	; 0x53
 8004c68:	54d0      	strb	r0, [r2, r3]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'E'; charsL++;
 8004c6e:	2045      	movs	r0, #69	; 0x45
 8004c70:	54d0      	strb	r0, [r2, r3]
 8004c72:	3301      	adds	r3, #1
 8004c74:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'D'; charsL++;
 8004c76:	2044      	movs	r0, #68	; 0x44
 8004c78:	54d0      	strb	r0, [r2, r3]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	700b      	strb	r3, [r1, #0]
		txBuf[charsL] = '\r'; charsL++; txBuf[charsL] = '\n'; charsL++;
 8004c7e:	4836      	ldr	r0, [pc, #216]	; (8004d58 <DecodeCmd+0x648>)
 8004c80:	7803      	ldrb	r3, [r0, #0]
 8004c82:	4933      	ldr	r1, [pc, #204]	; (8004d50 <DecodeCmd+0x640>)
 8004c84:	220d      	movs	r2, #13
 8004c86:	54ca      	strb	r2, [r1, r3]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	220a      	movs	r2, #10
 8004c8e:	54ca      	strb	r2, [r1, r3]
 8004c90:	3301      	adds	r3, #1
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	7002      	strb	r2, [r0, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL, 1000);
 8004c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c9a:	482e      	ldr	r0, [pc, #184]	; (8004d54 <DecodeCmd+0x644>)
 8004c9c:	f7fe fd41 	bl	8003722 <HAL_UART_Transmit>
		break;
 8004ca0:	e554      	b.n	800474c <DecodeCmd+0x3c>
		else if(heaterState==1U)
 8004ca2:	4a33      	ldr	r2, [pc, #204]	; (8004d70 <DecodeCmd+0x660>)
 8004ca4:	8812      	ldrh	r2, [r2, #0]
 8004ca6:	b212      	sxth	r2, r2
 8004ca8:	2a01      	cmp	r2, #1
 8004caa:	d1c8      	bne.n	8004c3e <DecodeCmd+0x52e>
			txBuf[charsL] = 'O'; charsL++;
 8004cac:	4a28      	ldr	r2, [pc, #160]	; (8004d50 <DecodeCmd+0x640>)
 8004cae:	214f      	movs	r1, #79	; 0x4f
 8004cb0:	54d1      	strb	r1, [r2, r3]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'N'; charsL++;
 8004cb6:	214e      	movs	r1, #78	; 0x4e
 8004cb8:	54d1      	strb	r1, [r2, r3]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	b2db      	uxtb	r3, r3
			txBuf[charsL] = ','; charsL++;
 8004cbe:	212c      	movs	r1, #44	; 0x2c
 8004cc0:	54d1      	strb	r1, [r2, r3]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	4a24      	ldr	r2, [pc, #144]	; (8004d58 <DecodeCmd+0x648>)
 8004cc6:	7013      	strb	r3, [r2, #0]
 8004cc8:	e7b9      	b.n	8004c3e <DecodeCmd+0x52e>
		else if(valveState==1U)
 8004cca:	4b2a      	ldr	r3, [pc, #168]	; (8004d74 <DecodeCmd+0x664>)
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	b21b      	sxth	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d1d4      	bne.n	8004c7e <DecodeCmd+0x56e>
			txBuf[charsL] = 'O'; charsL++;
 8004cd4:	4920      	ldr	r1, [pc, #128]	; (8004d58 <DecodeCmd+0x648>)
 8004cd6:	780b      	ldrb	r3, [r1, #0]
 8004cd8:	4a1d      	ldr	r2, [pc, #116]	; (8004d50 <DecodeCmd+0x640>)
 8004cda:	204f      	movs	r0, #79	; 0x4f
 8004cdc:	54d0      	strb	r0, [r2, r3]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'P'; charsL++;
 8004ce2:	2050      	movs	r0, #80	; 0x50
 8004ce4:	54d0      	strb	r0, [r2, r3]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'E'; charsL++;
 8004cea:	2045      	movs	r0, #69	; 0x45
 8004cec:	54d0      	strb	r0, [r2, r3]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'N'; charsL++;
 8004cf2:	204e      	movs	r0, #78	; 0x4e
 8004cf4:	54d0      	strb	r0, [r2, r3]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	700b      	strb	r3, [r1, #0]
 8004cfa:	e7c0      	b.n	8004c7e <DecodeCmd+0x56e>
		String2Int(cmdBuf+3, (int16_t*) &valveState);
 8004cfc:	491d      	ldr	r1, [pc, #116]	; (8004d74 <DecodeCmd+0x664>)
 8004cfe:	480b      	ldr	r0, [pc, #44]	; (8004d2c <DecodeCmd+0x61c>)
 8004d00:	f7fe ff70 	bl	8003be4 <String2Int>
		switchValve();
 8004d04:	f7fe ff34 	bl	8003b70 <switchValve>
		txBuf[0] = '$';	txBuf[1] = 'B';
 8004d08:	4911      	ldr	r1, [pc, #68]	; (8004d50 <DecodeCmd+0x640>)
 8004d0a:	2324      	movs	r3, #36	; 0x24
 8004d0c:	700b      	strb	r3, [r1, #0]
 8004d0e:	2342      	movs	r3, #66	; 0x42
 8004d10:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8004d12:	230d      	movs	r3, #13
 8004d14:	708b      	strb	r3, [r1, #2]
 8004d16:	230a      	movs	r3, #10
 8004d18:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8004d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d1e:	2204      	movs	r2, #4
 8004d20:	480c      	ldr	r0, [pc, #48]	; (8004d54 <DecodeCmd+0x644>)
 8004d22:	f7fe fcfe 	bl	8003722 <HAL_UART_Transmit>
}
 8004d26:	e511      	b.n	800474c <DecodeCmd+0x3c>
 8004d28:	200007d0 	.word	0x200007d0
 8004d2c:	2000075b 	.word	0x2000075b
 8004d30:	2000027c 	.word	0x2000027c
 8004d34:	200007be 	.word	0x200007be
 8004d38:	200006e0 	.word	0x200006e0
 8004d3c:	2000055c 	.word	0x2000055c
 8004d40:	200007dc 	.word	0x200007dc
 8004d44:	20000288 	.word	0x20000288
 8004d48:	20000450 	.word	0x20000450
 8004d4c:	200002b4 	.word	0x200002b4
 8004d50:	20000598 	.word	0x20000598
 8004d54:	20000364 	.word	0x20000364
 8004d58:	200002a4 	.word	0x200002a4
 8004d5c:	2000049c 	.word	0x2000049c
 8004d60:	2000044c 	.word	0x2000044c
 8004d64:	20000438 	.word	0x20000438
 8004d68:	2000062c 	.word	0x2000062c
 8004d6c:	200007d4 	.word	0x200007d4
 8004d70:	200002ac 	.word	0x200002ac
 8004d74:	200002ae 	.word	0x200002ae
 8004d78:	200004a0 	.word	0x200004a0
 8004d7c:	200006e8 	.word	0x200006e8
 8004d80:	200007d8 	.word	0x200007d8
 8004d84:	2000079f 	.word	0x2000079f

08004d88 <Flags>:

void Flags(void)
{
 8004d88:	b530      	push	{r4, r5, lr}
 8004d8a:	ed2d 8b02 	vpush	{d8}
 8004d8e:	b089      	sub	sp, #36	; 0x24
	//halStatus = HAL_I2C_Master_Transmit_IT(&hi2c1, 0x44<<1, &pData, 1);	// I2C write call

	if (uartRxFlag)
 8004d90:	4b9f      	ldr	r3, [pc, #636]	; (8005010 <Flags+0x288>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	b1eb      	cbz	r3, 8004dd2 <Flags+0x4a>
	{
		if (uartRxChar == '$')
 8004d96:	4b9f      	ldr	r3, [pc, #636]	; (8005014 <Flags+0x28c>)
 8004d98:	781a      	ldrb	r2, [r3, #0]
 8004d9a:	2a24      	cmp	r2, #36	; 0x24
 8004d9c:	f000 8087 	beq.w	8004eae <Flags+0x126>
			cmdBufPos = 0;

		// add character to command buffer, but only if there is more space in the command buffer
		if (cmdBufPos < cmdBufL)
 8004da0:	4b9d      	ldr	r3, [pc, #628]	; (8005018 <Flags+0x290>)
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	2b3b      	cmp	r3, #59	; 0x3b
 8004da6:	d804      	bhi.n	8004db2 <Flags+0x2a>
			cmdBuf[cmdBufPos++] = uartRxChar;
 8004da8:	1c58      	adds	r0, r3, #1
 8004daa:	499b      	ldr	r1, [pc, #620]	; (8005018 <Flags+0x290>)
 8004dac:	8008      	strh	r0, [r1, #0]
 8004dae:	499b      	ldr	r1, [pc, #620]	; (800501c <Flags+0x294>)
 8004db0:	54ca      	strb	r2, [r1, r3]

		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 8004db2:	4b99      	ldr	r3, [pc, #612]	; (8005018 <Flags+0x290>)
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d903      	bls.n	8004dc2 <Flags+0x3a>
 8004dba:	4a98      	ldr	r2, [pc, #608]	; (800501c <Flags+0x294>)
 8004dbc:	7812      	ldrb	r2, [r2, #0]
 8004dbe:	2a24      	cmp	r2, #36	; 0x24
 8004dc0:	d079      	beq.n	8004eb6 <Flags+0x12e>
		{
			DecodeCmd();
			cmdBufPos = 0;	// clear buffer
		}
		uartRxFlag = false;  // clear the flag - the 'receive character' event has been handled.
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	4b92      	ldr	r3, [pc, #584]	; (8005010 <Flags+0x288>)
 8004dc6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 8004dc8:	2201      	movs	r2, #1
 8004dca:	4992      	ldr	r1, [pc, #584]	; (8005014 <Flags+0x28c>)
 8004dcc:	4894      	ldr	r0, [pc, #592]	; (8005020 <Flags+0x298>)
 8004dce:	f7fe fad4 	bl	800337a <HAL_UART_Receive_IT>
	}
	if(adcFlag == 1U)
 8004dd2:	4b94      	ldr	r3, [pc, #592]	; (8005024 <Flags+0x29c>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 8163 	beq.w	80050a2 <Flags+0x31a>
		// 3. change the ADC channel
		// 4. start a new ADC sampling iteration
		//
		// the result is that all ADC 4 channels are sampled every 1ms

		if (adcCh == 0)
 8004ddc:	4b92      	ldr	r3, [pc, #584]	; (8005028 <Flags+0x2a0>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d078      	beq.n	8004ed6 <Flags+0x14e>
		{
			vsample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
		}
		else if (adcCh == 1)
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d07f      	beq.n	8004ee8 <Flags+0x160>
		{
			isample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
		}
		else if (adcCh == 2)
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	f000 8086 	beq.w	8004efa <Flags+0x172>
		{
			//--------------------------------------------------------------------------------------------------sample time
			ambientTSample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
		}
		else if (adcCh == 3)
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	f000 808c 	beq.w	8004f0c <Flags+0x184>
		{
			waterTSample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
		}

		adcCh++;
 8004df4:	4a8c      	ldr	r2, [pc, #560]	; (8005028 <Flags+0x2a0>)
 8004df6:	7813      	ldrb	r3, [r2, #0]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	7013      	strb	r3, [r2, #0]
		if (adcCh >= 4)
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d94a      	bls.n	8004e98 <Flags+0x110>
		{
			adcCh = 0;
 8004e02:	2200      	movs	r2, #0
 8004e04:	4b88      	ldr	r3, [pc, #544]	; (8005028 <Flags+0x2a0>)
 8004e06:	701a      	strb	r2, [r3, #0]
			sampleCntr++;
 8004e08:	4b88      	ldr	r3, [pc, #544]	; (800502c <Flags+0x2a4>)
 8004e0a:	781a      	ldrb	r2, [r3, #0]
 8004e0c:	3201      	adds	r2, #1
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]

			vrms = vsample[sampleCntr-1] * vsample[sampleCntr-1];
 8004e12:	1e50      	subs	r0, r2, #1
 8004e14:	4b86      	ldr	r3, [pc, #536]	; (8005030 <Flags+0x2a8>)
 8004e16:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8004e1a:	fb03 f303 	mul.w	r3, r3, r3
 8004e1e:	4985      	ldr	r1, [pc, #532]	; (8005034 <Flags+0x2ac>)
 8004e20:	600b      	str	r3, [r1, #0]
			vrmsSum += vrms;
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2a:	4b83      	ldr	r3, [pc, #524]	; (8005038 <Flags+0x2b0>)
 8004e2c:	ed93 7a00 	vldr	s14, [r3]
 8004e30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e34:	edc3 7a00 	vstr	s15, [r3]
			irms = isample[sampleCntr-1] * isample[sampleCntr-1];
 8004e38:	4b80      	ldr	r3, [pc, #512]	; (800503c <Flags+0x2b4>)
 8004e3a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8004e3e:	fb03 f303 	mul.w	r3, r3, r3
 8004e42:	497f      	ldr	r1, [pc, #508]	; (8005040 <Flags+0x2b8>)
 8004e44:	600b      	str	r3, [r1, #0]
			irmsSum += irms;
 8004e46:	497f      	ldr	r1, [pc, #508]	; (8005044 <Flags+0x2bc>)
 8004e48:	ee07 3a10 	vmov	s14, r3
 8004e4c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004e50:	edd1 6a00 	vldr	s13, [r1]
 8004e54:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004e58:	ed81 7a00 	vstr	s14, [r1]

			ambientTSum += ambientTSample[sampleCntr-1];
 8004e5c:	4b7a      	ldr	r3, [pc, #488]	; (8005048 <Flags+0x2c0>)
 8004e5e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004e62:	ee07 3a10 	vmov	s14, r3
 8004e66:	4b79      	ldr	r3, [pc, #484]	; (800504c <Flags+0x2c4>)
 8004e68:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004e6c:	edd3 6a00 	vldr	s13, [r3]
 8004e70:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004e74:	ed83 7a00 	vstr	s14, [r3]
			waterTSum += waterTSample[sampleCntr-1];
 8004e78:	4b75      	ldr	r3, [pc, #468]	; (8005050 <Flags+0x2c8>)
 8004e7a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004e7e:	ee07 3a10 	vmov	s14, r3
 8004e82:	4b74      	ldr	r3, [pc, #464]	; (8005054 <Flags+0x2cc>)
 8004e84:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004e88:	edd3 6a00 	vldr	s13, [r3]
 8004e8c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004e90:	ed83 7a00 	vstr	s14, [r3]

			if (sampleCntr >= RMS_WINDOW)
 8004e94:	2a27      	cmp	r2, #39	; 0x27
 8004e96:	d842      	bhi.n	8004f1e <Flags+0x196>
				waterTavg = waterTSum;
			}
		}

		ADC_ChannelConfTypeDef chdef;
		switch (adcCh)
 8004e98:	4b63      	ldr	r3, [pc, #396]	; (8005028 <Flags+0x2a0>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	f200 80ef 	bhi.w	8005080 <Flags+0x2f8>
 8004ea2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004ea6:	00eb      	.short	0x00eb
 8004ea8:	01590156 	.word	0x01590156
 8004eac:	015c      	.short	0x015c
			cmdBufPos = 0;
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4b59      	ldr	r3, [pc, #356]	; (8005018 <Flags+0x290>)
 8004eb2:	8019      	strh	r1, [r3, #0]
 8004eb4:	e774      	b.n	8004da0 <Flags+0x18>
		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 8004eb6:	1e9a      	subs	r2, r3, #2
 8004eb8:	4958      	ldr	r1, [pc, #352]	; (800501c <Flags+0x294>)
 8004eba:	5c8a      	ldrb	r2, [r1, r2]
 8004ebc:	2a0d      	cmp	r2, #13
 8004ebe:	d180      	bne.n	8004dc2 <Flags+0x3a>
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	5ccb      	ldrb	r3, [r1, r3]
 8004ec4:	2b0a      	cmp	r3, #10
 8004ec6:	f47f af7c 	bne.w	8004dc2 <Flags+0x3a>
			DecodeCmd();
 8004eca:	f7ff fc21 	bl	8004710 <DecodeCmd>
			cmdBufPos = 0;	// clear buffer
 8004ece:	2200      	movs	r2, #0
 8004ed0:	4b51      	ldr	r3, [pc, #324]	; (8005018 <Flags+0x290>)
 8004ed2:	801a      	strh	r2, [r3, #0]
 8004ed4:	e775      	b.n	8004dc2 <Flags+0x3a>
			vsample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
 8004ed6:	4b55      	ldr	r3, [pc, #340]	; (800502c <Flags+0x2a4>)
 8004ed8:	781c      	ldrb	r4, [r3, #0]
 8004eda:	485f      	ldr	r0, [pc, #380]	; (8005058 <Flags+0x2d0>)
 8004edc:	f7fc f8b4 	bl	8001048 <HAL_ADC_GetValue>
 8004ee0:	4b53      	ldr	r3, [pc, #332]	; (8005030 <Flags+0x2a8>)
 8004ee2:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 8004ee6:	e785      	b.n	8004df4 <Flags+0x6c>
			isample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
 8004ee8:	4b50      	ldr	r3, [pc, #320]	; (800502c <Flags+0x2a4>)
 8004eea:	781c      	ldrb	r4, [r3, #0]
 8004eec:	485a      	ldr	r0, [pc, #360]	; (8005058 <Flags+0x2d0>)
 8004eee:	f7fc f8ab 	bl	8001048 <HAL_ADC_GetValue>
 8004ef2:	4b52      	ldr	r3, [pc, #328]	; (800503c <Flags+0x2b4>)
 8004ef4:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 8004ef8:	e77c      	b.n	8004df4 <Flags+0x6c>
			ambientTSample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
 8004efa:	4b4c      	ldr	r3, [pc, #304]	; (800502c <Flags+0x2a4>)
 8004efc:	781c      	ldrb	r4, [r3, #0]
 8004efe:	4856      	ldr	r0, [pc, #344]	; (8005058 <Flags+0x2d0>)
 8004f00:	f7fc f8a2 	bl	8001048 <HAL_ADC_GetValue>
 8004f04:	4b50      	ldr	r3, [pc, #320]	; (8005048 <Flags+0x2c0>)
 8004f06:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004f0a:	e773      	b.n	8004df4 <Flags+0x6c>
			waterTSample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
 8004f0c:	4b47      	ldr	r3, [pc, #284]	; (800502c <Flags+0x2a4>)
 8004f0e:	781c      	ldrb	r4, [r3, #0]
 8004f10:	4851      	ldr	r0, [pc, #324]	; (8005058 <Flags+0x2d0>)
 8004f12:	f7fc f899 	bl	8001048 <HAL_ADC_GetValue>
 8004f16:	4b4e      	ldr	r3, [pc, #312]	; (8005050 <Flags+0x2c8>)
 8004f18:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004f1c:	e76a      	b.n	8004df4 <Flags+0x6c>
				sampleCntr = 0;
 8004f1e:	2200      	movs	r2, #0
 8004f20:	4b42      	ldr	r3, [pc, #264]	; (800502c <Flags+0x2a4>)
 8004f22:	701a      	strb	r2, [r3, #0]
				vrmsSum /= RMS_WINDOW;
 8004f24:	ed9f 8a4d 	vldr	s16, [pc, #308]	; 800505c <Flags+0x2d4>
 8004f28:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8004f2c:	4b42      	ldr	r3, [pc, #264]	; (8005038 <Flags+0x2b0>)
 8004f2e:	ed83 7a00 	vstr	s14, [r3]
				vrms_avg = sqrt(vrmsSum);
 8004f32:	ee17 0a10 	vmov	r0, s14
 8004f36:	f7fb fb17 	bl	8000568 <__aeabi_f2d>
 8004f3a:	ec41 0b10 	vmov	d0, r0, r1
 8004f3e:	f001 fd11 	bl	8006964 <sqrt>
 8004f42:	ec51 0b10 	vmov	r0, r1, d0
 8004f46:	f7fb fe13 	bl	8000b70 <__aeabi_d2uiz>
				vrms_avg *= 3350;
 8004f4a:	f640 5516 	movw	r5, #3350	; 0xd16
 8004f4e:	fb05 f000 	mul.w	r0, r5, r0
				vrms_avg /= 4095;
 8004f52:	4c43      	ldr	r4, [pc, #268]	; (8005060 <Flags+0x2d8>)
 8004f54:	fba4 2300 	umull	r2, r3, r4, r0
 8004f58:	1ac0      	subs	r0, r0, r3
 8004f5a:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 8004f5e:	0ac0      	lsrs	r0, r0, #11
 8004f60:	4b40      	ldr	r3, [pc, #256]	; (8005064 <Flags+0x2dc>)
 8004f62:	6018      	str	r0, [r3, #0]
				vrmsV = vrms_avg*84.97807018;
 8004f64:	f7fb fade 	bl	8000524 <__aeabi_ui2d>
 8004f68:	a325      	add	r3, pc, #148	; (adr r3, 8005000 <Flags+0x278>)
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f7fb fb4f 	bl	8000610 <__aeabi_dmul>
 8004f72:	f7fb fdfd 	bl	8000b70 <__aeabi_d2uiz>
 8004f76:	4b3c      	ldr	r3, [pc, #240]	; (8005068 <Flags+0x2e0>)
 8004f78:	6018      	str	r0, [r3, #0]
				irmsSum /= RMS_WINDOW;
 8004f7a:	4b32      	ldr	r3, [pc, #200]	; (8005044 <Flags+0x2bc>)
 8004f7c:	ed93 7a00 	vldr	s14, [r3]
 8004f80:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8004f84:	edc3 7a00 	vstr	s15, [r3]
				irms_avg = sqrt(irmsSum);
 8004f88:	ee17 0a90 	vmov	r0, s15
 8004f8c:	f7fb faec 	bl	8000568 <__aeabi_f2d>
 8004f90:	ec41 0b10 	vmov	d0, r0, r1
 8004f94:	f001 fce6 	bl	8006964 <sqrt>
 8004f98:	ec51 0b10 	vmov	r0, r1, d0
 8004f9c:	f7fb fde8 	bl	8000b70 <__aeabi_d2uiz>
				irms_avg *= 3350;
 8004fa0:	fb05 f000 	mul.w	r0, r5, r0
				irms_avg /= 4095;
 8004fa4:	fba4 3400 	umull	r3, r4, r4, r0
 8004fa8:	1b00      	subs	r0, r0, r4
 8004faa:	eb04 0450 	add.w	r4, r4, r0, lsr #1
 8004fae:	0ae0      	lsrs	r0, r4, #11
 8004fb0:	4b2e      	ldr	r3, [pc, #184]	; (800506c <Flags+0x2e4>)
 8004fb2:	6018      	str	r0, [r3, #0]
				irmsA = irms_avg*4.679287305;
 8004fb4:	f7fb fab6 	bl	8000524 <__aeabi_ui2d>
 8004fb8:	a313      	add	r3, pc, #76	; (adr r3, 8005008 <Flags+0x280>)
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	f7fb fb27 	bl	8000610 <__aeabi_dmul>
 8004fc2:	f7fb fdd5 	bl	8000b70 <__aeabi_d2uiz>
 8004fc6:	4b2a      	ldr	r3, [pc, #168]	; (8005070 <Flags+0x2e8>)
 8004fc8:	6018      	str	r0, [r3, #0]
				ambientTSum /= RMS_WINDOW;
 8004fca:	4b20      	ldr	r3, [pc, #128]	; (800504c <Flags+0x2c4>)
 8004fcc:	ed93 7a00 	vldr	s14, [r3]
 8004fd0:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8004fd4:	edc3 7a00 	vstr	s15, [r3]
				ambientTavg = ambientTSum;
 8004fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fdc:	4b25      	ldr	r3, [pc, #148]	; (8005074 <Flags+0x2ec>)
 8004fde:	edc3 7a00 	vstr	s15, [r3]
				waterTSum /= RMS_WINDOW;
 8004fe2:	4b1c      	ldr	r3, [pc, #112]	; (8005054 <Flags+0x2cc>)
 8004fe4:	ed93 7a00 	vldr	s14, [r3]
 8004fe8:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8004fec:	edc3 7a00 	vstr	s15, [r3]
				waterTavg = waterTSum;
 8004ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ff4:	4b20      	ldr	r3, [pc, #128]	; (8005078 <Flags+0x2f0>)
 8004ff6:	edc3 7a00 	vstr	s15, [r3]
 8004ffa:	e74d      	b.n	8004e98 <Flags+0x110>
 8004ffc:	f3af 8000 	nop.w
 8005000:	b3ab12be 	.word	0xb3ab12be
 8005004:	40553e98 	.word	0x40553e98
 8005008:	175e407d 	.word	0x175e407d
 800500c:	4012b797 	.word	0x4012b797
 8005010:	200002b1 	.word	0x200002b1
 8005014:	2000063c 	.word	0x2000063c
 8005018:	200007da 	.word	0x200007da
 800501c:	20000758 	.word	0x20000758
 8005020:	20000364 	.word	0x20000364
 8005024:	200002c0 	.word	0x200002c0
 8005028:	200007bd 	.word	0x200007bd
 800502c:	2000043c 	.word	0x2000043c
 8005030:	200005d4 	.word	0x200005d4
 8005034:	200007cc 	.word	0x200007cc
 8005038:	200007c0 	.word	0x200007c0
 800503c:	20000700 	.word	0x20000700
 8005040:	20000750 	.word	0x20000750
 8005044:	200006e4 	.word	0x200006e4
 8005048:	200004b8 	.word	0x200004b8
 800504c:	20000638 	.word	0x20000638
 8005050:	20000640 	.word	0x20000640
 8005054:	200007c8 	.word	0x200007c8
 8005058:	20000310 	.word	0x20000310
 800505c:	42200000 	.word	0x42200000
 8005060:	00100101 	.word	0x00100101
 8005064:	20000490 	.word	0x20000490
 8005068:	2000044c 	.word	0x2000044c
 800506c:	20000628 	.word	0x20000628
 8005070:	2000049c 	.word	0x2000049c
 8005074:	20000438 	.word	0x20000438
 8005078:	2000062c 	.word	0x2000062c
		{
		case 0: chdef.Channel = ADC_CHANNEL_12; break;  //V				//PB1
 800507c:	230c      	movs	r3, #12
 800507e:	9302      	str	r3, [sp, #8]
		case 1: chdef.Channel = ADC_CHANNEL_13; break;  //I				//PB13
		case 2: chdef.Channel = ADC_CHANNEL_8; break; //temp ambient	//PC2
		case 3: chdef.Channel = ADC_CHANNEL_9; break; //temp water		//PC3
		}

		chdef.Rank = 1;
 8005080:	2301      	movs	r3, #1
 8005082:	9303      	str	r3, [sp, #12]
		chdef.SingleDiff = ADC_SINGLE_ENDED;
 8005084:	2400      	movs	r4, #0
 8005086:	9405      	str	r4, [sp, #20]
		chdef.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005088:	9404      	str	r4, [sp, #16]
		chdef.OffsetNumber = ADC_OFFSET_NONE;
 800508a:	9406      	str	r4, [sp, #24]
		chdef.Offset = 0;
 800508c:	9407      	str	r4, [sp, #28]
		HAL_ADC_ConfigChannel(&hadc1, &chdef);
 800508e:	4d6a      	ldr	r5, [pc, #424]	; (8005238 <Flags+0x4b0>)
 8005090:	a902      	add	r1, sp, #8
 8005092:	4628      	mov	r0, r5
 8005094:	f7fb ffdc 	bl	8001050 <HAL_ADC_ConfigChannel>

		HAL_ADC_Start(&hadc1);
 8005098:	4628      	mov	r0, r5
 800509a:	f7fb ff53 	bl	8000f44 <HAL_ADC_Start>

		adcFlag = 0;
 800509e:	4b67      	ldr	r3, [pc, #412]	; (800523c <Flags+0x4b4>)
 80050a0:	701c      	strb	r4, [r3, #0]
	}

	if (flowHighFlag == 1)
 80050a2:	4b67      	ldr	r3, [pc, #412]	; (8005240 <Flags+0x4b8>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	b1c3      	cbz	r3, 80050da <Flags+0x352>
	{
		if (firstHighFlag == 1)
 80050a8:	4b66      	ldr	r3, [pc, #408]	; (8005244 <Flags+0x4bc>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	b143      	cbz	r3, 80050c0 <Flags+0x338>
		{
			firstHighFlag = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	4a64      	ldr	r2, [pc, #400]	; (8005244 <Flags+0x4bc>)
 80050b2:	7013      	strb	r3, [r2, #0]
			ms5Counter = 0;
 80050b4:	4a64      	ldr	r2, [pc, #400]	; (8005248 <Flags+0x4c0>)
 80050b6:	7013      	strb	r3, [r2, #0]
			ms5Flag = 0;
 80050b8:	4a64      	ldr	r2, [pc, #400]	; (800524c <Flags+0x4c4>)
 80050ba:	7013      	strb	r3, [r2, #0]
			flowPulse = 0;
 80050bc:	4a64      	ldr	r2, [pc, #400]	; (8005250 <Flags+0x4c8>)
 80050be:	7013      	strb	r3, [r2, #0]
		}
		if (ms5Flag == 1)
 80050c0:	4b62      	ldr	r3, [pc, #392]	; (800524c <Flags+0x4c4>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	b14b      	cbz	r3, 80050da <Flags+0x352>
		{
			ms5Flag = 0;
 80050c6:	2200      	movs	r2, #0
 80050c8:	4b60      	ldr	r3, [pc, #384]	; (800524c <Flags+0x4c4>)
 80050ca:	701a      	strb	r2, [r3, #0]

			flowPulse++;
 80050cc:	4a60      	ldr	r2, [pc, #384]	; (8005250 <Flags+0x4c8>)
 80050ce:	7813      	ldrb	r3, [r2, #0]
 80050d0:	3301      	adds	r3, #1
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	7013      	strb	r3, [r2, #0]
			if (flowPulse == 1)
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d044      	beq.n	8005164 <Flags+0x3dc>
			}
		}
	}

	// 1ms timer
	uint32_t tick = HAL_GetTick();
 80050da:	f7fb fd99 	bl	8000c10 <HAL_GetTick>
	if (tick != lasttick)
 80050de:	4b5d      	ldr	r3, [pc, #372]	; (8005254 <Flags+0x4cc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4298      	cmp	r0, r3
 80050e4:	d02b      	beq.n	800513e <Flags+0x3b6>
	{
		lasttick = tick;
 80050e6:	4b5b      	ldr	r3, [pc, #364]	; (8005254 <Flags+0x4cc>)
 80050e8:	6018      	str	r0, [r3, #0]

		ms5Counter++;
 80050ea:	4a57      	ldr	r2, [pc, #348]	; (8005248 <Flags+0x4c0>)
 80050ec:	7813      	ldrb	r3, [r2, #0]
 80050ee:	3301      	adds	r3, #1
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	7013      	strb	r3, [r2, #0]
		if (ms5Counter >= 5)
 80050f4:	7813      	ldrb	r3, [r2, #0]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d905      	bls.n	8005108 <Flags+0x380>
		{
			ms5Counter = 0;
 80050fc:	2200      	movs	r2, #0
 80050fe:	4b52      	ldr	r3, [pc, #328]	; (8005248 <Flags+0x4c0>)
 8005100:	701a      	strb	r2, [r3, #0]
			ms5Flag = 1;
 8005102:	2201      	movs	r2, #1
 8005104:	4b51      	ldr	r3, [pc, #324]	; (800524c <Flags+0x4c4>)
 8005106:	701a      	strb	r2, [r3, #0]
		}

		s1Counter++;
 8005108:	4a53      	ldr	r2, [pc, #332]	; (8005258 <Flags+0x4d0>)
 800510a:	8813      	ldrh	r3, [r2, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	3301      	adds	r3, #1
 8005110:	b29b      	uxth	r3, r3
 8005112:	8013      	strh	r3, [r2, #0]
		if (s1Counter >= 1000)
 8005114:	8813      	ldrh	r3, [r2, #0]
 8005116:	b29b      	uxth	r3, r3
 8005118:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800511c:	d22c      	bcs.n	8005178 <Flags+0x3f0>
				}
				switchHeater();
			}
		}

		writeToPins(segementsSet, pinsValue, segmentsL, j);
 800511e:	4c4f      	ldr	r4, [pc, #316]	; (800525c <Flags+0x4d4>)
 8005120:	4d4f      	ldr	r5, [pc, #316]	; (8005260 <Flags+0x4d8>)
 8005122:	7823      	ldrb	r3, [r4, #0]
 8005124:	782a      	ldrb	r2, [r5, #0]
 8005126:	494f      	ldr	r1, [pc, #316]	; (8005264 <Flags+0x4dc>)
 8005128:	484f      	ldr	r0, [pc, #316]	; (8005268 <Flags+0x4e0>)
 800512a:	f7fe fddb 	bl	8003ce4 <writeToPins>
		j++;
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	6023      	str	r3, [r4, #0]

		if (j >= segmentsL)
 8005134:	782a      	ldrb	r2, [r5, #0]
 8005136:	4293      	cmp	r3, r2
 8005138:	db01      	blt.n	800513e <Flags+0x3b6>
			j = 0;
 800513a:	2200      	movs	r2, #0
 800513c:	6022      	str	r2, [r4, #0]
	//HAL_I2C_Master_Receive(&hi2c1, 0x45<<1, &buffer[1], 3, 100);
	//HAL_I2C_Master_Transmit(&hi2c1, 0x45<<1, buffer, 4, 100); //45 rotary slider
	//HAL_I2C_Master_Receive(&hi2c1, 0x45<<1, &buffer[0], 1, 100);


	if (i2cTxFlag)	//Now process the interrupt call-back
 800513e:	4b4b      	ldr	r3, [pc, #300]	; (800526c <Flags+0x4e4>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	b113      	cbz	r3, 800514a <Flags+0x3c2>
	{
		i2cTxFlag = 0;
 8005144:	2200      	movs	r2, #0
 8005146:	4b49      	ldr	r3, [pc, #292]	; (800526c <Flags+0x4e4>)
 8005148:	701a      	strb	r2, [r3, #0]
		//float value = buffer[0]<<8 | buffer[1]; //combine 2 8-bit into 1 16-bit

		//HAL_Delay(100);
		//HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
	}
}
 800514a:	b009      	add	sp, #36	; 0x24
 800514c:	ecbd 8b02 	vpop	{d8}
 8005150:	bd30      	pop	{r4, r5, pc}
		case 1: chdef.Channel = ADC_CHANNEL_13; break;  //I				//PB13
 8005152:	230d      	movs	r3, #13
 8005154:	9302      	str	r3, [sp, #8]
 8005156:	e793      	b.n	8005080 <Flags+0x2f8>
		case 2: chdef.Channel = ADC_CHANNEL_8; break; //temp ambient	//PC2
 8005158:	2308      	movs	r3, #8
 800515a:	9302      	str	r3, [sp, #8]
 800515c:	e790      	b.n	8005080 <Flags+0x2f8>
		case 3: chdef.Channel = ADC_CHANNEL_9; break; //temp water		//PC3
 800515e:	2309      	movs	r3, #9
 8005160:	9302      	str	r3, [sp, #8]
 8005162:	e78d      	b.n	8005080 <Flags+0x2f8>
				flowCounter++;
 8005164:	4a42      	ldr	r2, [pc, #264]	; (8005270 <Flags+0x4e8>)
 8005166:	6813      	ldr	r3, [r2, #0]
 8005168:	3301      	adds	r3, #1
 800516a:	6013      	str	r3, [r2, #0]
				totalFlow = 100*flowCounter;
 800516c:	2264      	movs	r2, #100	; 0x64
 800516e:	fb02 f303 	mul.w	r3, r2, r3
 8005172:	4a40      	ldr	r2, [pc, #256]	; (8005274 <Flags+0x4ec>)
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	e7b0      	b.n	80050da <Flags+0x352>
			s1Counter = 0;
 8005178:	2200      	movs	r2, #0
 800517a:	4b37      	ldr	r3, [pc, #220]	; (8005258 <Flags+0x4d0>)
 800517c:	801a      	strh	r2, [r3, #0]
			halStatus = HAL_RTC_GetTime(&hrtc, &getTimeLive, RTC_FORMAT_BCD);
 800517e:	4d3e      	ldr	r5, [pc, #248]	; (8005278 <Flags+0x4f0>)
 8005180:	2201      	movs	r2, #1
 8005182:	493e      	ldr	r1, [pc, #248]	; (800527c <Flags+0x4f4>)
 8005184:	4628      	mov	r0, r5
 8005186:	f7fd fdda 	bl	8002d3e <HAL_RTC_GetTime>
 800518a:	4c3d      	ldr	r4, [pc, #244]	; (8005280 <Flags+0x4f8>)
 800518c:	7020      	strb	r0, [r4, #0]
			halStatus = HAL_RTC_GetDate(&hrtc, &getDateLive, RTC_FORMAT_BCD);
 800518e:	2201      	movs	r2, #1
 8005190:	493c      	ldr	r1, [pc, #240]	; (8005284 <Flags+0x4fc>)
 8005192:	4628      	mov	r0, r5
 8005194:	f7fd fdfe 	bl	8002d94 <HAL_RTC_GetDate>
 8005198:	7020      	strb	r0, [r4, #0]
			if (scheduleState == 1)
 800519a:	4b3b      	ldr	r3, [pc, #236]	; (8005288 <Flags+0x500>)
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	b21b      	sxth	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d1bc      	bne.n	800511e <Flags+0x396>
				tNow = timeToEpoch(getDateLive, getTimeLive);
 80051a4:	4b35      	ldr	r3, [pc, #212]	; (800527c <Flags+0x4f4>)
 80051a6:	4a37      	ldr	r2, [pc, #220]	; (8005284 <Flags+0x4fc>)
 80051a8:	6814      	ldr	r4, [r2, #0]
 80051aa:	f103 020c 	add.w	r2, r3, #12
 80051ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051b2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80051b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051b8:	4620      	mov	r0, r4
 80051ba:	f7fe fe11 	bl	8003de0 <timeToEpoch>
 80051be:	4b33      	ldr	r3, [pc, #204]	; (800528c <Flags+0x504>)
 80051c0:	6018      	str	r0, [r3, #0]
				i = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	4a32      	ldr	r2, [pc, #200]	; (8005290 <Flags+0x508>)
 80051c6:	6013      	str	r3, [r2, #0]
				heaterFlag = 0;
 80051c8:	4a32      	ldr	r2, [pc, #200]	; (8005294 <Flags+0x50c>)
 80051ca:	7013      	strb	r3, [r2, #0]
				while (i < 3)
 80051cc:	e013      	b.n	80051f6 <Flags+0x46e>
					if (tNow >= offEpoch[iCurrent] && heaterFlag == 1)
 80051ce:	4a32      	ldr	r2, [pc, #200]	; (8005298 <Flags+0x510>)
 80051d0:	7811      	ldrb	r1, [r2, #0]
 80051d2:	4a32      	ldr	r2, [pc, #200]	; (800529c <Flags+0x514>)
 80051d4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80051d8:	4a2c      	ldr	r2, [pc, #176]	; (800528c <Flags+0x504>)
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	4291      	cmp	r1, r2
 80051de:	dc07      	bgt.n	80051f0 <Flags+0x468>
 80051e0:	4a2c      	ldr	r2, [pc, #176]	; (8005294 <Flags+0x50c>)
 80051e2:	7812      	ldrb	r2, [r2, #0]
 80051e4:	b122      	cbz	r2, 80051f0 <Flags+0x468>
						heaterState = 0;
 80051e6:	2200      	movs	r2, #0
 80051e8:	492d      	ldr	r1, [pc, #180]	; (80052a0 <Flags+0x518>)
 80051ea:	800a      	strh	r2, [r1, #0]
						heaterFlag = 0;
 80051ec:	4929      	ldr	r1, [pc, #164]	; (8005294 <Flags+0x50c>)
 80051ee:	700a      	strb	r2, [r1, #0]
					i++;
 80051f0:	3301      	adds	r3, #1
 80051f2:	4a27      	ldr	r2, [pc, #156]	; (8005290 <Flags+0x508>)
 80051f4:	6013      	str	r3, [r2, #0]
				while (i < 3)
 80051f6:	4b26      	ldr	r3, [pc, #152]	; (8005290 <Flags+0x508>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	dc19      	bgt.n	8005232 <Flags+0x4aa>
					if (tNow >= onEpoch[i] && tNow <= offEpoch[i] && heaterFlag == 0)
 80051fe:	4a29      	ldr	r2, [pc, #164]	; (80052a4 <Flags+0x51c>)
 8005200:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005204:	4a21      	ldr	r2, [pc, #132]	; (800528c <Flags+0x504>)
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	4291      	cmp	r1, r2
 800520a:	dce0      	bgt.n	80051ce <Flags+0x446>
 800520c:	4a23      	ldr	r2, [pc, #140]	; (800529c <Flags+0x514>)
 800520e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005212:	4a1e      	ldr	r2, [pc, #120]	; (800528c <Flags+0x504>)
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	4291      	cmp	r1, r2
 8005218:	dbd9      	blt.n	80051ce <Flags+0x446>
 800521a:	4a1e      	ldr	r2, [pc, #120]	; (8005294 <Flags+0x50c>)
 800521c:	7812      	ldrb	r2, [r2, #0]
 800521e:	2a00      	cmp	r2, #0
 8005220:	d1d5      	bne.n	80051ce <Flags+0x446>
						heaterState = 1;
 8005222:	2201      	movs	r2, #1
 8005224:	491e      	ldr	r1, [pc, #120]	; (80052a0 <Flags+0x518>)
 8005226:	800a      	strh	r2, [r1, #0]
						iCurrent = i;
 8005228:	491b      	ldr	r1, [pc, #108]	; (8005298 <Flags+0x510>)
 800522a:	700b      	strb	r3, [r1, #0]
						heaterFlag = 1;
 800522c:	4919      	ldr	r1, [pc, #100]	; (8005294 <Flags+0x50c>)
 800522e:	700a      	strb	r2, [r1, #0]
 8005230:	e7cd      	b.n	80051ce <Flags+0x446>
				switchHeater();
 8005232:	f7fe fc8f 	bl	8003b54 <switchHeater>
 8005236:	e772      	b.n	800511e <Flags+0x396>
 8005238:	20000310 	.word	0x20000310
 800523c:	200002c0 	.word	0x200002c0
 8005240:	200002b0 	.word	0x200002b0
 8005244:	20000294 	.word	0x20000294
 8005248:	20000794 	.word	0x20000794
 800524c:	20000495 	.word	0x20000495
 8005250:	200007bb 	.word	0x200007bb
 8005254:	20000558 	.word	0x20000558
 8005258:	2000079c 	.word	0x2000079c
 800525c:	20000280 	.word	0x20000280
 8005260:	20000244 	.word	0x20000244
 8005264:	20000798 	.word	0x20000798
 8005268:	20000298 	.word	0x20000298
 800526c:	200002b3 	.word	0x200002b3
 8005270:	200007c4 	.word	0x200007c4
 8005274:	200007d4 	.word	0x200007d4
 8005278:	200003d4 	.word	0x200003d4
 800527c:	200004a4 	.word	0x200004a4
 8005280:	20000496 	.word	0x20000496
 8005284:	200007dc 	.word	0x200007dc
 8005288:	200002c2 	.word	0x200002c2
 800528c:	200002a8 	.word	0x200002a8
 8005290:	200002a0 	.word	0x200002a0
 8005294:	200007b5 	.word	0x200007b5
 8005298:	20000624 	.word	0x20000624
 800529c:	200002b4 	.word	0x200002b4
 80052a0:	200002ac 	.word	0x200002ac
 80052a4:	20000288 	.word	0x20000288

080052a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80052a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80052ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80052ae:	e003      	b.n	80052b8 <LoopCopyDataInit>

080052b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80052b0:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80052b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80052b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80052b6:	3104      	adds	r1, #4

080052b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80052b8:	480b      	ldr	r0, [pc, #44]	; (80052e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80052ba:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80052bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80052be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80052c0:	d3f6      	bcc.n	80052b0 <CopyDataInit>
	ldr	r2, =_sbss
 80052c2:	4a0b      	ldr	r2, [pc, #44]	; (80052f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80052c4:	e002      	b.n	80052cc <LoopFillZerobss>

080052c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80052c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80052c8:	f842 3b04 	str.w	r3, [r2], #4

080052cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <LoopForever+0x16>)
	cmp	r2, r3
 80052ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80052d0:	d3f9      	bcc.n	80052c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80052d2:	f7ff f975 	bl	80045c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052d6:	f000 f811 	bl	80052fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80052da:	f7ff f805 	bl	80042e8 <main>

080052de <LoopForever>:

LoopForever:
    b LoopForever
 80052de:	e7fe      	b.n	80052de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80052e0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80052e4:	08006eb8 	.word	0x08006eb8
	ldr	r0, =_sdata
 80052e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80052ec:	20000228 	.word	0x20000228
	ldr	r2, =_sbss
 80052f0:	20000228 	.word	0x20000228
	ldr	r3, = _ebss
 80052f4:	200007e8 	.word	0x200007e8

080052f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80052f8:	e7fe      	b.n	80052f8 <ADC1_2_IRQHandler>
	...

080052fc <__libc_init_array>:
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	4e0d      	ldr	r6, [pc, #52]	; (8005334 <__libc_init_array+0x38>)
 8005300:	4c0d      	ldr	r4, [pc, #52]	; (8005338 <__libc_init_array+0x3c>)
 8005302:	1ba4      	subs	r4, r4, r6
 8005304:	10a4      	asrs	r4, r4, #2
 8005306:	2500      	movs	r5, #0
 8005308:	42a5      	cmp	r5, r4
 800530a:	d109      	bne.n	8005320 <__libc_init_array+0x24>
 800530c:	4e0b      	ldr	r6, [pc, #44]	; (800533c <__libc_init_array+0x40>)
 800530e:	4c0c      	ldr	r4, [pc, #48]	; (8005340 <__libc_init_array+0x44>)
 8005310:	f001 fc48 	bl	8006ba4 <_init>
 8005314:	1ba4      	subs	r4, r4, r6
 8005316:	10a4      	asrs	r4, r4, #2
 8005318:	2500      	movs	r5, #0
 800531a:	42a5      	cmp	r5, r4
 800531c:	d105      	bne.n	800532a <__libc_init_array+0x2e>
 800531e:	bd70      	pop	{r4, r5, r6, pc}
 8005320:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005324:	4798      	blx	r3
 8005326:	3501      	adds	r5, #1
 8005328:	e7ee      	b.n	8005308 <__libc_init_array+0xc>
 800532a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800532e:	4798      	blx	r3
 8005330:	3501      	adds	r5, #1
 8005332:	e7f2      	b.n	800531a <__libc_init_array+0x1e>
 8005334:	08006eb0 	.word	0x08006eb0
 8005338:	08006eb0 	.word	0x08006eb0
 800533c:	08006eb0 	.word	0x08006eb0
 8005340:	08006eb4 	.word	0x08006eb4

08005344 <validate_structure>:
 8005344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005346:	6801      	ldr	r1, [r0, #0]
 8005348:	293b      	cmp	r1, #59	; 0x3b
 800534a:	4604      	mov	r4, r0
 800534c:	d911      	bls.n	8005372 <validate_structure+0x2e>
 800534e:	223c      	movs	r2, #60	; 0x3c
 8005350:	4668      	mov	r0, sp
 8005352:	f000 fc85 	bl	8005c60 <div>
 8005356:	9a01      	ldr	r2, [sp, #4]
 8005358:	6863      	ldr	r3, [r4, #4]
 800535a:	9900      	ldr	r1, [sp, #0]
 800535c:	2a00      	cmp	r2, #0
 800535e:	440b      	add	r3, r1
 8005360:	6063      	str	r3, [r4, #4]
 8005362:	bfbb      	ittet	lt
 8005364:	323c      	addlt	r2, #60	; 0x3c
 8005366:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800536a:	6022      	strge	r2, [r4, #0]
 800536c:	6022      	strlt	r2, [r4, #0]
 800536e:	bfb8      	it	lt
 8005370:	6063      	strlt	r3, [r4, #4]
 8005372:	6861      	ldr	r1, [r4, #4]
 8005374:	293b      	cmp	r1, #59	; 0x3b
 8005376:	d911      	bls.n	800539c <validate_structure+0x58>
 8005378:	223c      	movs	r2, #60	; 0x3c
 800537a:	4668      	mov	r0, sp
 800537c:	f000 fc70 	bl	8005c60 <div>
 8005380:	9a01      	ldr	r2, [sp, #4]
 8005382:	68a3      	ldr	r3, [r4, #8]
 8005384:	9900      	ldr	r1, [sp, #0]
 8005386:	2a00      	cmp	r2, #0
 8005388:	440b      	add	r3, r1
 800538a:	60a3      	str	r3, [r4, #8]
 800538c:	bfbb      	ittet	lt
 800538e:	323c      	addlt	r2, #60	; 0x3c
 8005390:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8005394:	6062      	strge	r2, [r4, #4]
 8005396:	6062      	strlt	r2, [r4, #4]
 8005398:	bfb8      	it	lt
 800539a:	60a3      	strlt	r3, [r4, #8]
 800539c:	68a1      	ldr	r1, [r4, #8]
 800539e:	2917      	cmp	r1, #23
 80053a0:	d911      	bls.n	80053c6 <validate_structure+0x82>
 80053a2:	2218      	movs	r2, #24
 80053a4:	4668      	mov	r0, sp
 80053a6:	f000 fc5b 	bl	8005c60 <div>
 80053aa:	9a01      	ldr	r2, [sp, #4]
 80053ac:	68e3      	ldr	r3, [r4, #12]
 80053ae:	9900      	ldr	r1, [sp, #0]
 80053b0:	2a00      	cmp	r2, #0
 80053b2:	440b      	add	r3, r1
 80053b4:	60e3      	str	r3, [r4, #12]
 80053b6:	bfbb      	ittet	lt
 80053b8:	3218      	addlt	r2, #24
 80053ba:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80053be:	60a2      	strge	r2, [r4, #8]
 80053c0:	60a2      	strlt	r2, [r4, #8]
 80053c2:	bfb8      	it	lt
 80053c4:	60e3      	strlt	r3, [r4, #12]
 80053c6:	6921      	ldr	r1, [r4, #16]
 80053c8:	290b      	cmp	r1, #11
 80053ca:	d911      	bls.n	80053f0 <validate_structure+0xac>
 80053cc:	220c      	movs	r2, #12
 80053ce:	4668      	mov	r0, sp
 80053d0:	f000 fc46 	bl	8005c60 <div>
 80053d4:	9a01      	ldr	r2, [sp, #4]
 80053d6:	6963      	ldr	r3, [r4, #20]
 80053d8:	9900      	ldr	r1, [sp, #0]
 80053da:	2a00      	cmp	r2, #0
 80053dc:	440b      	add	r3, r1
 80053de:	6163      	str	r3, [r4, #20]
 80053e0:	bfbb      	ittet	lt
 80053e2:	320c      	addlt	r2, #12
 80053e4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80053e8:	6122      	strge	r2, [r4, #16]
 80053ea:	6122      	strlt	r2, [r4, #16]
 80053ec:	bfb8      	it	lt
 80053ee:	6163      	strlt	r3, [r4, #20]
 80053f0:	6963      	ldr	r3, [r4, #20]
 80053f2:	0799      	lsls	r1, r3, #30
 80053f4:	d143      	bne.n	800547e <validate_structure+0x13a>
 80053f6:	2164      	movs	r1, #100	; 0x64
 80053f8:	fb93 f2f1 	sdiv	r2, r3, r1
 80053fc:	fb01 3212 	mls	r2, r1, r2, r3
 8005400:	2a00      	cmp	r2, #0
 8005402:	d13e      	bne.n	8005482 <validate_structure+0x13e>
 8005404:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8005408:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800540c:	fb93 f2f1 	sdiv	r2, r3, r1
 8005410:	fb01 3312 	mls	r3, r1, r2, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	bf14      	ite	ne
 8005418:	231c      	movne	r3, #28
 800541a:	231d      	moveq	r3, #29
 800541c:	68e2      	ldr	r2, [r4, #12]
 800541e:	2a00      	cmp	r2, #0
 8005420:	dd31      	ble.n	8005486 <validate_structure+0x142>
 8005422:	4f37      	ldr	r7, [pc, #220]	; (8005500 <validate_structure+0x1bc>)
 8005424:	2602      	movs	r6, #2
 8005426:	f04f 0e00 	mov.w	lr, #0
 800542a:	2064      	movs	r0, #100	; 0x64
 800542c:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8005430:	6921      	ldr	r1, [r4, #16]
 8005432:	68e2      	ldr	r2, [r4, #12]
 8005434:	2901      	cmp	r1, #1
 8005436:	d05d      	beq.n	80054f4 <validate_structure+0x1b0>
 8005438:	f857 c021 	ldr.w	ip, [r7, r1, lsl #2]
 800543c:	4562      	cmp	r2, ip
 800543e:	dd2c      	ble.n	800549a <validate_structure+0x156>
 8005440:	3101      	adds	r1, #1
 8005442:	eba2 020c 	sub.w	r2, r2, ip
 8005446:	290c      	cmp	r1, #12
 8005448:	60e2      	str	r2, [r4, #12]
 800544a:	6121      	str	r1, [r4, #16]
 800544c:	d1f0      	bne.n	8005430 <validate_structure+0xec>
 800544e:	6963      	ldr	r3, [r4, #20]
 8005450:	f8c4 e010 	str.w	lr, [r4, #16]
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	0791      	lsls	r1, r2, #30
 8005458:	6162      	str	r2, [r4, #20]
 800545a:	d147      	bne.n	80054ec <validate_structure+0x1a8>
 800545c:	fb92 f1f0 	sdiv	r1, r2, r0
 8005460:	fb00 2211 	mls	r2, r0, r1, r2
 8005464:	2a00      	cmp	r2, #0
 8005466:	d143      	bne.n	80054f0 <validate_structure+0x1ac>
 8005468:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800546c:	fb93 f2f5 	sdiv	r2, r3, r5
 8005470:	fb05 3312 	mls	r3, r5, r2, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	bf14      	ite	ne
 8005478:	231c      	movne	r3, #28
 800547a:	231d      	moveq	r3, #29
 800547c:	e7d8      	b.n	8005430 <validate_structure+0xec>
 800547e:	231c      	movs	r3, #28
 8005480:	e7cc      	b.n	800541c <validate_structure+0xd8>
 8005482:	231d      	movs	r3, #29
 8005484:	e7ca      	b.n	800541c <validate_structure+0xd8>
 8005486:	4f1e      	ldr	r7, [pc, #120]	; (8005500 <validate_structure+0x1bc>)
 8005488:	260b      	movs	r6, #11
 800548a:	2064      	movs	r0, #100	; 0x64
 800548c:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8005490:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8005494:	f1be 0f00 	cmp.w	lr, #0
 8005498:	dd01      	ble.n	800549e <validate_structure+0x15a>
 800549a:	b003      	add	sp, #12
 800549c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800549e:	6921      	ldr	r1, [r4, #16]
 80054a0:	3901      	subs	r1, #1
 80054a2:	6121      	str	r1, [r4, #16]
 80054a4:	3101      	adds	r1, #1
 80054a6:	d114      	bne.n	80054d2 <validate_structure+0x18e>
 80054a8:	6963      	ldr	r3, [r4, #20]
 80054aa:	6126      	str	r6, [r4, #16]
 80054ac:	1e59      	subs	r1, r3, #1
 80054ae:	078a      	lsls	r2, r1, #30
 80054b0:	6161      	str	r1, [r4, #20]
 80054b2:	d117      	bne.n	80054e4 <validate_structure+0x1a0>
 80054b4:	fb91 f2f0 	sdiv	r2, r1, r0
 80054b8:	fb00 1112 	mls	r1, r0, r2, r1
 80054bc:	b9a1      	cbnz	r1, 80054e8 <validate_structure+0x1a4>
 80054be:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80054c2:	fb93 f2f5 	sdiv	r2, r3, r5
 80054c6:	fb05 3312 	mls	r3, r5, r2, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf14      	ite	ne
 80054ce:	231c      	movne	r3, #28
 80054d0:	231d      	moveq	r3, #29
 80054d2:	6922      	ldr	r2, [r4, #16]
 80054d4:	2a01      	cmp	r2, #1
 80054d6:	bf14      	ite	ne
 80054d8:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80054dc:	461a      	moveq	r2, r3
 80054de:	4472      	add	r2, lr
 80054e0:	60e2      	str	r2, [r4, #12]
 80054e2:	e7d5      	b.n	8005490 <validate_structure+0x14c>
 80054e4:	231c      	movs	r3, #28
 80054e6:	e7f4      	b.n	80054d2 <validate_structure+0x18e>
 80054e8:	231d      	movs	r3, #29
 80054ea:	e7f2      	b.n	80054d2 <validate_structure+0x18e>
 80054ec:	231c      	movs	r3, #28
 80054ee:	e79f      	b.n	8005430 <validate_structure+0xec>
 80054f0:	231d      	movs	r3, #29
 80054f2:	e79d      	b.n	8005430 <validate_structure+0xec>
 80054f4:	4293      	cmp	r3, r2
 80054f6:	dad0      	bge.n	800549a <validate_structure+0x156>
 80054f8:	1ad2      	subs	r2, r2, r3
 80054fa:	60e2      	str	r2, [r4, #12]
 80054fc:	6126      	str	r6, [r4, #16]
 80054fe:	e797      	b.n	8005430 <validate_structure+0xec>
 8005500:	08006c20 	.word	0x08006c20

08005504 <mktime>:
 8005504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005508:	4681      	mov	r9, r0
 800550a:	f000 fc05 	bl	8005d18 <__gettzinfo>
 800550e:	4680      	mov	r8, r0
 8005510:	4648      	mov	r0, r9
 8005512:	f7ff ff17 	bl	8005344 <validate_structure>
 8005516:	e899 0081 	ldmia.w	r9, {r0, r7}
 800551a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800551e:	4ab4      	ldr	r2, [pc, #720]	; (80057f0 <mktime+0x2ec>)
 8005520:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8005524:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005528:	253c      	movs	r5, #60	; 0x3c
 800552a:	fb05 0707 	mla	r7, r5, r7, r0
 800552e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8005532:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 8005536:	3c01      	subs	r4, #1
 8005538:	2b01      	cmp	r3, #1
 800553a:	fb05 7000 	mla	r0, r5, r0, r7
 800553e:	4414      	add	r4, r2
 8005540:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005544:	dd11      	ble.n	800556a <mktime+0x66>
 8005546:	0799      	lsls	r1, r3, #30
 8005548:	d10f      	bne.n	800556a <mktime+0x66>
 800554a:	2164      	movs	r1, #100	; 0x64
 800554c:	fb93 f2f1 	sdiv	r2, r3, r1
 8005550:	fb01 3212 	mls	r2, r1, r2, r3
 8005554:	b942      	cbnz	r2, 8005568 <mktime+0x64>
 8005556:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 800555a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800555e:	fb95 f2f1 	sdiv	r2, r5, r1
 8005562:	fb01 5212 	mls	r2, r1, r2, r5
 8005566:	b902      	cbnz	r2, 800556a <mktime+0x66>
 8005568:	3401      	adds	r4, #1
 800556a:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 800556e:	3210      	adds	r2, #16
 8005570:	f644 6120 	movw	r1, #20000	; 0x4e20
 8005574:	428a      	cmp	r2, r1
 8005576:	f8c9 401c 	str.w	r4, [r9, #28]
 800557a:	f200 812d 	bhi.w	80057d8 <mktime+0x2d4>
 800557e:	2b46      	cmp	r3, #70	; 0x46
 8005580:	dd70      	ble.n	8005664 <mktime+0x160>
 8005582:	2546      	movs	r5, #70	; 0x46
 8005584:	f240 176d 	movw	r7, #365	; 0x16d
 8005588:	2164      	movs	r1, #100	; 0x64
 800558a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800558e:	07aa      	lsls	r2, r5, #30
 8005590:	d162      	bne.n	8005658 <mktime+0x154>
 8005592:	fb95 f2f1 	sdiv	r2, r5, r1
 8005596:	fb01 5212 	mls	r2, r1, r2, r5
 800559a:	2a00      	cmp	r2, #0
 800559c:	d15f      	bne.n	800565e <mktime+0x15a>
 800559e:	f205 7e6c 	addw	lr, r5, #1900	; 0x76c
 80055a2:	fb9e f2f6 	sdiv	r2, lr, r6
 80055a6:	fb06 e212 	mls	r2, r6, r2, lr
 80055aa:	2a00      	cmp	r2, #0
 80055ac:	bf14      	ite	ne
 80055ae:	463a      	movne	r2, r7
 80055b0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80055b4:	3501      	adds	r5, #1
 80055b6:	42ab      	cmp	r3, r5
 80055b8:	4414      	add	r4, r2
 80055ba:	d1e8      	bne.n	800558e <mktime+0x8a>
 80055bc:	4f8d      	ldr	r7, [pc, #564]	; (80057f4 <mktime+0x2f0>)
 80055be:	fb07 0704 	mla	r7, r7, r4, r0
 80055c2:	f000 f9c3 	bl	800594c <__tz_lock>
 80055c6:	f000 f9c3 	bl	8005950 <_tzset_unlocked>
 80055ca:	4b8b      	ldr	r3, [pc, #556]	; (80057f8 <mktime+0x2f4>)
 80055cc:	681e      	ldr	r6, [r3, #0]
 80055ce:	2e00      	cmp	r6, #0
 80055d0:	f000 810a 	beq.w	80057e8 <mktime+0x2e4>
 80055d4:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80055d8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	bfa8      	it	ge
 80055e0:	2301      	movge	r3, #1
 80055e2:	469a      	mov	sl, r3
 80055e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80055e8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80055ec:	4298      	cmp	r0, r3
 80055ee:	d17c      	bne.n	80056ea <mktime+0x1e6>
 80055f0:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 80055f4:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80055f8:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 80055fc:	f8d8 101c 	ldr.w	r1, [r8, #28]
 8005600:	1ad6      	subs	r6, r2, r3
 8005602:	42b7      	cmp	r7, r6
 8005604:	eba1 0100 	sub.w	r1, r1, r0
 8005608:	da76      	bge.n	80056f8 <mktime+0x1f4>
 800560a:	f8d8 2000 	ldr.w	r2, [r8]
 800560e:	2a00      	cmp	r2, #0
 8005610:	d076      	beq.n	8005700 <mktime+0x1fc>
 8005612:	428f      	cmp	r7, r1
 8005614:	f2c0 80e3 	blt.w	80057de <mktime+0x2da>
 8005618:	42b7      	cmp	r7, r6
 800561a:	bfac      	ite	ge
 800561c:	2600      	movge	r6, #0
 800561e:	2601      	movlt	r6, #1
 8005620:	f1ba 0f00 	cmp.w	sl, #0
 8005624:	da72      	bge.n	800570c <mktime+0x208>
 8005626:	2e01      	cmp	r6, #1
 8005628:	f040 80de 	bne.w	80057e8 <mktime+0x2e4>
 800562c:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 8005630:	2601      	movs	r6, #1
 8005632:	443d      	add	r5, r7
 8005634:	f000 f98b 	bl	800594e <__tz_unlock>
 8005638:	3404      	adds	r4, #4
 800563a:	2307      	movs	r3, #7
 800563c:	fb94 f3f3 	sdiv	r3, r4, r3
 8005640:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005644:	1ae4      	subs	r4, r4, r3
 8005646:	bf48      	it	mi
 8005648:	3407      	addmi	r4, #7
 800564a:	f8c9 6020 	str.w	r6, [r9, #32]
 800564e:	f8c9 4018 	str.w	r4, [r9, #24]
 8005652:	4628      	mov	r0, r5
 8005654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005658:	f240 126d 	movw	r2, #365	; 0x16d
 800565c:	e7aa      	b.n	80055b4 <mktime+0xb0>
 800565e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8005662:	e7a7      	b.n	80055b4 <mktime+0xb0>
 8005664:	d01e      	beq.n	80056a4 <mktime+0x1a0>
 8005666:	2245      	movs	r2, #69	; 0x45
 8005668:	f240 176d 	movw	r7, #365	; 0x16d
 800566c:	2564      	movs	r5, #100	; 0x64
 800566e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8005672:	429a      	cmp	r2, r3
 8005674:	dc18      	bgt.n	80056a8 <mktime+0x1a4>
 8005676:	079d      	lsls	r5, r3, #30
 8005678:	d131      	bne.n	80056de <mktime+0x1da>
 800567a:	2164      	movs	r1, #100	; 0x64
 800567c:	fb93 f2f1 	sdiv	r2, r3, r1
 8005680:	fb01 3212 	mls	r2, r1, r2, r3
 8005684:	bb72      	cbnz	r2, 80056e4 <mktime+0x1e0>
 8005686:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 800568a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800568e:	fb95 f2f1 	sdiv	r2, r5, r1
 8005692:	fb01 5212 	mls	r2, r1, r2, r5
 8005696:	2a00      	cmp	r2, #0
 8005698:	f240 126d 	movw	r2, #365	; 0x16d
 800569c:	bf08      	it	eq
 800569e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80056a2:	1aa4      	subs	r4, r4, r2
 80056a4:	461d      	mov	r5, r3
 80056a6:	e789      	b.n	80055bc <mktime+0xb8>
 80056a8:	0791      	lsls	r1, r2, #30
 80056aa:	d112      	bne.n	80056d2 <mktime+0x1ce>
 80056ac:	fb92 f1f5 	sdiv	r1, r2, r5
 80056b0:	fb05 2111 	mls	r1, r5, r1, r2
 80056b4:	b981      	cbnz	r1, 80056d8 <mktime+0x1d4>
 80056b6:	f202 7e6c 	addw	lr, r2, #1900	; 0x76c
 80056ba:	fb9e f1f6 	sdiv	r1, lr, r6
 80056be:	fb06 e111 	mls	r1, r6, r1, lr
 80056c2:	2900      	cmp	r1, #0
 80056c4:	bf14      	ite	ne
 80056c6:	4639      	movne	r1, r7
 80056c8:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
 80056cc:	1a64      	subs	r4, r4, r1
 80056ce:	3a01      	subs	r2, #1
 80056d0:	e7cf      	b.n	8005672 <mktime+0x16e>
 80056d2:	f240 116d 	movw	r1, #365	; 0x16d
 80056d6:	e7f9      	b.n	80056cc <mktime+0x1c8>
 80056d8:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80056dc:	e7f6      	b.n	80056cc <mktime+0x1c8>
 80056de:	f240 126d 	movw	r2, #365	; 0x16d
 80056e2:	e7de      	b.n	80056a2 <mktime+0x19e>
 80056e4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80056e8:	e7db      	b.n	80056a2 <mktime+0x19e>
 80056ea:	f000 f887 	bl	80057fc <__tzcalc_limits>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	f47f af7e 	bne.w	80055f0 <mktime+0xec>
 80056f4:	4656      	mov	r6, sl
 80056f6:	e796      	b.n	8005626 <mktime+0x122>
 80056f8:	1a12      	subs	r2, r2, r0
 80056fa:	4297      	cmp	r7, r2
 80056fc:	dbfa      	blt.n	80056f4 <mktime+0x1f0>
 80056fe:	e784      	b.n	800560a <mktime+0x106>
 8005700:	428f      	cmp	r7, r1
 8005702:	db89      	blt.n	8005618 <mktime+0x114>
 8005704:	f1ba 0f00 	cmp.w	sl, #0
 8005708:	db90      	blt.n	800562c <mktime+0x128>
 800570a:	2601      	movs	r6, #1
 800570c:	ea8a 0a06 	eor.w	sl, sl, r6
 8005710:	f1ba 0f01 	cmp.w	sl, #1
 8005714:	d187      	bne.n	8005626 <mktime+0x122>
 8005716:	1a1b      	subs	r3, r3, r0
 8005718:	b906      	cbnz	r6, 800571c <mktime+0x218>
 800571a:	425b      	negs	r3, r3
 800571c:	f8d9 2000 	ldr.w	r2, [r9]
 8005720:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8005724:	441a      	add	r2, r3
 8005726:	f8c9 2000 	str.w	r2, [r9]
 800572a:	4648      	mov	r0, r9
 800572c:	441f      	add	r7, r3
 800572e:	f7ff fe09 	bl	8005344 <validate_structure>
 8005732:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8005736:	ebb3 030a 	subs.w	r3, r3, sl
 800573a:	f43f af74 	beq.w	8005626 <mktime+0x122>
 800573e:	2b01      	cmp	r3, #1
 8005740:	dc21      	bgt.n	8005786 <mktime+0x282>
 8005742:	1c98      	adds	r0, r3, #2
 8005744:	bfd8      	it	le
 8005746:	2301      	movle	r3, #1
 8005748:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800574c:	441c      	add	r4, r3
 800574e:	189b      	adds	r3, r3, r2
 8005750:	d522      	bpl.n	8005798 <mktime+0x294>
 8005752:	1e6a      	subs	r2, r5, #1
 8005754:	0791      	lsls	r1, r2, #30
 8005756:	d119      	bne.n	800578c <mktime+0x288>
 8005758:	2164      	movs	r1, #100	; 0x64
 800575a:	fb92 f3f1 	sdiv	r3, r2, r1
 800575e:	fb01 2313 	mls	r3, r1, r3, r2
 8005762:	b9b3      	cbnz	r3, 8005792 <mktime+0x28e>
 8005764:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 8005768:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800576c:	fb95 f3f2 	sdiv	r3, r5, r2
 8005770:	fb02 5513 	mls	r5, r2, r3, r5
 8005774:	2d00      	cmp	r5, #0
 8005776:	f240 136d 	movw	r3, #365	; 0x16d
 800577a:	bf18      	it	ne
 800577c:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8005780:	f8c9 301c 	str.w	r3, [r9, #28]
 8005784:	e74f      	b.n	8005626 <mktime+0x122>
 8005786:	f04f 33ff 	mov.w	r3, #4294967295
 800578a:	e7dd      	b.n	8005748 <mktime+0x244>
 800578c:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8005790:	e7f6      	b.n	8005780 <mktime+0x27c>
 8005792:	f240 136d 	movw	r3, #365	; 0x16d
 8005796:	e7f3      	b.n	8005780 <mktime+0x27c>
 8005798:	07aa      	lsls	r2, r5, #30
 800579a:	d117      	bne.n	80057cc <mktime+0x2c8>
 800579c:	2164      	movs	r1, #100	; 0x64
 800579e:	fb95 f2f1 	sdiv	r2, r5, r1
 80057a2:	fb01 5212 	mls	r2, r1, r2, r5
 80057a6:	b9a2      	cbnz	r2, 80057d2 <mktime+0x2ce>
 80057a8:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 80057ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80057b0:	fb95 f2f1 	sdiv	r2, r5, r1
 80057b4:	fb01 5512 	mls	r5, r1, r2, r5
 80057b8:	2d00      	cmp	r5, #0
 80057ba:	f240 126d 	movw	r2, #365	; 0x16d
 80057be:	bf08      	it	eq
 80057c0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80057c4:	429a      	cmp	r2, r3
 80057c6:	bfd8      	it	le
 80057c8:	1a9b      	suble	r3, r3, r2
 80057ca:	e7d9      	b.n	8005780 <mktime+0x27c>
 80057cc:	f240 126d 	movw	r2, #365	; 0x16d
 80057d0:	e7f8      	b.n	80057c4 <mktime+0x2c0>
 80057d2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80057d6:	e7f5      	b.n	80057c4 <mktime+0x2c0>
 80057d8:	f04f 35ff 	mov.w	r5, #4294967295
 80057dc:	e739      	b.n	8005652 <mktime+0x14e>
 80057de:	f1ba 0f00 	cmp.w	sl, #0
 80057e2:	f04f 0600 	mov.w	r6, #0
 80057e6:	da91      	bge.n	800570c <mktime+0x208>
 80057e8:	f8d8 5020 	ldr.w	r5, [r8, #32]
 80057ec:	443d      	add	r5, r7
 80057ee:	e721      	b.n	8005634 <mktime+0x130>
 80057f0:	08006c50 	.word	0x08006c50
 80057f4:	00015180 	.word	0x00015180
 80057f8:	20000260 	.word	0x20000260

080057fc <__tzcalc_limits>:
 80057fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005800:	4604      	mov	r4, r0
 8005802:	f000 fa89 	bl	8005d18 <__gettzinfo>
 8005806:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800580a:	429c      	cmp	r4, r3
 800580c:	f340 8098 	ble.w	8005940 <__tzcalc_limits+0x144>
 8005810:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8005814:	18e3      	adds	r3, r4, r3
 8005816:	109b      	asrs	r3, r3, #2
 8005818:	f240 126d 	movw	r2, #365	; 0x16d
 800581c:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 8005820:	fb02 3505 	mla	r5, r2, r5, r3
 8005824:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8005828:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 800582c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005830:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8005834:	441d      	add	r5, r3
 8005836:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800583a:	18a2      	adds	r2, r4, r2
 800583c:	fb94 f7f3 	sdiv	r7, r4, r3
 8005840:	fb92 f2f3 	sdiv	r2, r2, r3
 8005844:	fb03 4717 	mls	r7, r3, r7, r4
 8005848:	f100 0338 	add.w	r3, r0, #56	; 0x38
 800584c:	4415      	add	r5, r2
 800584e:	fab7 fe87 	clz	lr, r7
 8005852:	2264      	movs	r2, #100	; 0x64
 8005854:	9301      	str	r3, [sp, #4]
 8005856:	f004 0303 	and.w	r3, r4, #3
 800585a:	fb94 f6f2 	sdiv	r6, r4, r2
 800585e:	6044      	str	r4, [r0, #4]
 8005860:	fb02 4616 	mls	r6, r2, r6, r4
 8005864:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8005868:	4601      	mov	r1, r0
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 8005870:	7a0b      	ldrb	r3, [r1, #8]
 8005872:	2b4a      	cmp	r3, #74	; 0x4a
 8005874:	d123      	bne.n	80058be <__tzcalc_limits+0xc2>
 8005876:	694c      	ldr	r4, [r1, #20]
 8005878:	9a00      	ldr	r2, [sp, #0]
 800587a:	192b      	adds	r3, r5, r4
 800587c:	b902      	cbnz	r2, 8005880 <__tzcalc_limits+0x84>
 800587e:	b906      	cbnz	r6, 8005882 <__tzcalc_limits+0x86>
 8005880:	b9df      	cbnz	r7, 80058ba <__tzcalc_limits+0xbe>
 8005882:	2c3b      	cmp	r4, #59	; 0x3b
 8005884:	bfd4      	ite	le
 8005886:	2400      	movle	r4, #0
 8005888:	2401      	movgt	r4, #1
 800588a:	441c      	add	r4, r3
 800588c:	3c01      	subs	r4, #1
 800588e:	4b2d      	ldr	r3, [pc, #180]	; (8005944 <__tzcalc_limits+0x148>)
 8005890:	698a      	ldr	r2, [r1, #24]
 8005892:	fb03 2404 	mla	r4, r3, r4, r2
 8005896:	6a0b      	ldr	r3, [r1, #32]
 8005898:	441c      	add	r4, r3
 800589a:	f841 4f1c 	str.w	r4, [r1, #28]!
 800589e:	9b01      	ldr	r3, [sp, #4]
 80058a0:	428b      	cmp	r3, r1
 80058a2:	d1e5      	bne.n	8005870 <__tzcalc_limits+0x74>
 80058a4:	69c3      	ldr	r3, [r0, #28]
 80058a6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80058a8:	4293      	cmp	r3, r2
 80058aa:	bfac      	ite	ge
 80058ac:	2300      	movge	r3, #0
 80058ae:	2301      	movlt	r3, #1
 80058b0:	6003      	str	r3, [r0, #0]
 80058b2:	2001      	movs	r0, #1
 80058b4:	b003      	add	sp, #12
 80058b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ba:	2400      	movs	r4, #0
 80058bc:	e7e5      	b.n	800588a <__tzcalc_limits+0x8e>
 80058be:	2b44      	cmp	r3, #68	; 0x44
 80058c0:	d102      	bne.n	80058c8 <__tzcalc_limits+0xcc>
 80058c2:	694b      	ldr	r3, [r1, #20]
 80058c4:	18ec      	adds	r4, r5, r3
 80058c6:	e7e2      	b.n	800588e <__tzcalc_limits+0x92>
 80058c8:	9b00      	ldr	r3, [sp, #0]
 80058ca:	bb7b      	cbnz	r3, 800592c <__tzcalc_limits+0x130>
 80058cc:	2e00      	cmp	r6, #0
 80058ce:	bf0c      	ite	eq
 80058d0:	46f0      	moveq	r8, lr
 80058d2:	f04f 0801 	movne.w	r8, #1
 80058d6:	4b1c      	ldr	r3, [pc, #112]	; (8005948 <__tzcalc_limits+0x14c>)
 80058d8:	68cc      	ldr	r4, [r1, #12]
 80058da:	2230      	movs	r2, #48	; 0x30
 80058dc:	fb02 3808 	mla	r8, r2, r8, r3
 80058e0:	f1a8 0a04 	sub.w	sl, r8, #4
 80058e4:	462b      	mov	r3, r5
 80058e6:	f04f 0901 	mov.w	r9, #1
 80058ea:	45a1      	cmp	r9, r4
 80058ec:	db20      	blt.n	8005930 <__tzcalc_limits+0x134>
 80058ee:	2c01      	cmp	r4, #1
 80058f0:	bfb8      	it	lt
 80058f2:	2401      	movlt	r4, #1
 80058f4:	46a1      	mov	r9, r4
 80058f6:	f103 0b04 	add.w	fp, r3, #4
 80058fa:	2207      	movs	r2, #7
 80058fc:	694c      	ldr	r4, [r1, #20]
 80058fe:	fb9b faf2 	sdiv	sl, fp, r2
 8005902:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8005906:	ebab 0a0a 	sub.w	sl, fp, sl
 800590a:	ebb4 0a0a 	subs.w	sl, r4, sl
 800590e:	690c      	ldr	r4, [r1, #16]
 8005910:	44e1      	add	r9, ip
 8005912:	f104 34ff 	add.w	r4, r4, #4294967295
 8005916:	bf48      	it	mi
 8005918:	4492      	addmi	sl, r2
 800591a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800591e:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 8005922:	4454      	add	r4, sl
 8005924:	4544      	cmp	r4, r8
 8005926:	da09      	bge.n	800593c <__tzcalc_limits+0x140>
 8005928:	441c      	add	r4, r3
 800592a:	e7b0      	b.n	800588e <__tzcalc_limits+0x92>
 800592c:	46f0      	mov	r8, lr
 800592e:	e7d2      	b.n	80058d6 <__tzcalc_limits+0xda>
 8005930:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8005934:	f109 0901 	add.w	r9, r9, #1
 8005938:	445b      	add	r3, fp
 800593a:	e7d6      	b.n	80058ea <__tzcalc_limits+0xee>
 800593c:	3c07      	subs	r4, #7
 800593e:	e7f1      	b.n	8005924 <__tzcalc_limits+0x128>
 8005940:	2000      	movs	r0, #0
 8005942:	e7b7      	b.n	80058b4 <__tzcalc_limits+0xb8>
 8005944:	00015180 	.word	0x00015180
 8005948:	08006cbc 	.word	0x08006cbc

0800594c <__tz_lock>:
 800594c:	4770      	bx	lr

0800594e <__tz_unlock>:
 800594e:	4770      	bx	lr

08005950 <_tzset_unlocked>:
 8005950:	4b01      	ldr	r3, [pc, #4]	; (8005958 <_tzset_unlocked+0x8>)
 8005952:	6818      	ldr	r0, [r3, #0]
 8005954:	f000 b802 	b.w	800595c <_tzset_unlocked_r>
 8005958:	20000050 	.word	0x20000050

0800595c <_tzset_unlocked_r>:
 800595c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005960:	b08d      	sub	sp, #52	; 0x34
 8005962:	4607      	mov	r7, r0
 8005964:	f000 f9d8 	bl	8005d18 <__gettzinfo>
 8005968:	49b1      	ldr	r1, [pc, #708]	; (8005c30 <_tzset_unlocked_r+0x2d4>)
 800596a:	4eb2      	ldr	r6, [pc, #712]	; (8005c34 <_tzset_unlocked_r+0x2d8>)
 800596c:	4605      	mov	r5, r0
 800596e:	4638      	mov	r0, r7
 8005970:	f000 f9ca 	bl	8005d08 <_getenv_r>
 8005974:	4604      	mov	r4, r0
 8005976:	b970      	cbnz	r0, 8005996 <_tzset_unlocked_r+0x3a>
 8005978:	4baf      	ldr	r3, [pc, #700]	; (8005c38 <_tzset_unlocked_r+0x2dc>)
 800597a:	4ab0      	ldr	r2, [pc, #704]	; (8005c3c <_tzset_unlocked_r+0x2e0>)
 800597c:	6018      	str	r0, [r3, #0]
 800597e:	4bb0      	ldr	r3, [pc, #704]	; (8005c40 <_tzset_unlocked_r+0x2e4>)
 8005980:	6018      	str	r0, [r3, #0]
 8005982:	4bb0      	ldr	r3, [pc, #704]	; (8005c44 <_tzset_unlocked_r+0x2e8>)
 8005984:	6830      	ldr	r0, [r6, #0]
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	605a      	str	r2, [r3, #4]
 800598a:	f000 f9c9 	bl	8005d20 <free>
 800598e:	6034      	str	r4, [r6, #0]
 8005990:	b00d      	add	sp, #52	; 0x34
 8005992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005996:	6831      	ldr	r1, [r6, #0]
 8005998:	2900      	cmp	r1, #0
 800599a:	d160      	bne.n	8005a5e <_tzset_unlocked_r+0x102>
 800599c:	6830      	ldr	r0, [r6, #0]
 800599e:	f000 f9bf 	bl	8005d20 <free>
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7fa fc1e 	bl	80001e4 <strlen>
 80059a8:	1c41      	adds	r1, r0, #1
 80059aa:	4638      	mov	r0, r7
 80059ac:	f000 fa0e 	bl	8005dcc <_malloc_r>
 80059b0:	6030      	str	r0, [r6, #0]
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d158      	bne.n	8005a68 <_tzset_unlocked_r+0x10c>
 80059b6:	7823      	ldrb	r3, [r4, #0]
 80059b8:	4aa3      	ldr	r2, [pc, #652]	; (8005c48 <_tzset_unlocked_r+0x2ec>)
 80059ba:	49a4      	ldr	r1, [pc, #656]	; (8005c4c <_tzset_unlocked_r+0x2f0>)
 80059bc:	2b3a      	cmp	r3, #58	; 0x3a
 80059be:	bf08      	it	eq
 80059c0:	3401      	addeq	r4, #1
 80059c2:	ae0a      	add	r6, sp, #40	; 0x28
 80059c4:	4633      	mov	r3, r6
 80059c6:	4620      	mov	r0, r4
 80059c8:	f000 fa6e 	bl	8005ea8 <siscanf>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	dddf      	ble.n	8005990 <_tzset_unlocked_r+0x34>
 80059d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d2:	18e7      	adds	r7, r4, r3
 80059d4:	5ce3      	ldrb	r3, [r4, r3]
 80059d6:	2b2d      	cmp	r3, #45	; 0x2d
 80059d8:	d14a      	bne.n	8005a70 <_tzset_unlocked_r+0x114>
 80059da:	3701      	adds	r7, #1
 80059dc:	f04f 34ff 	mov.w	r4, #4294967295
 80059e0:	f10d 0a20 	add.w	sl, sp, #32
 80059e4:	f10d 0b1e 	add.w	fp, sp, #30
 80059e8:	f04f 0800 	mov.w	r8, #0
 80059ec:	9603      	str	r6, [sp, #12]
 80059ee:	f8cd a008 	str.w	sl, [sp, #8]
 80059f2:	9601      	str	r6, [sp, #4]
 80059f4:	f8cd b000 	str.w	fp, [sp]
 80059f8:	4633      	mov	r3, r6
 80059fa:	aa07      	add	r2, sp, #28
 80059fc:	4994      	ldr	r1, [pc, #592]	; (8005c50 <_tzset_unlocked_r+0x2f4>)
 80059fe:	f8ad 801e 	strh.w	r8, [sp, #30]
 8005a02:	4638      	mov	r0, r7
 8005a04:	f8ad 8020 	strh.w	r8, [sp, #32]
 8005a08:	f000 fa4e 	bl	8005ea8 <siscanf>
 8005a0c:	4540      	cmp	r0, r8
 8005a0e:	ddbf      	ble.n	8005990 <_tzset_unlocked_r+0x34>
 8005a10:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005a14:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005a18:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8005c5c <_tzset_unlocked_r+0x300>
 8005a1c:	213c      	movs	r1, #60	; 0x3c
 8005a1e:	fb01 2203 	mla	r2, r1, r3, r2
 8005a22:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8005a26:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005a2a:	fb01 2303 	mla	r3, r1, r3, r2
 8005a2e:	435c      	muls	r4, r3
 8005a30:	622c      	str	r4, [r5, #32]
 8005a32:	4c84      	ldr	r4, [pc, #528]	; (8005c44 <_tzset_unlocked_r+0x2e8>)
 8005a34:	4b84      	ldr	r3, [pc, #528]	; (8005c48 <_tzset_unlocked_r+0x2ec>)
 8005a36:	6023      	str	r3, [r4, #0]
 8005a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a3a:	4984      	ldr	r1, [pc, #528]	; (8005c4c <_tzset_unlocked_r+0x2f0>)
 8005a3c:	441f      	add	r7, r3
 8005a3e:	464a      	mov	r2, r9
 8005a40:	4633      	mov	r3, r6
 8005a42:	4638      	mov	r0, r7
 8005a44:	f000 fa30 	bl	8005ea8 <siscanf>
 8005a48:	4540      	cmp	r0, r8
 8005a4a:	dc16      	bgt.n	8005a7a <_tzset_unlocked_r+0x11e>
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	6063      	str	r3, [r4, #4]
 8005a50:	4b79      	ldr	r3, [pc, #484]	; (8005c38 <_tzset_unlocked_r+0x2dc>)
 8005a52:	6a2a      	ldr	r2, [r5, #32]
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	4b7a      	ldr	r3, [pc, #488]	; (8005c40 <_tzset_unlocked_r+0x2e4>)
 8005a58:	f8c3 8000 	str.w	r8, [r3]
 8005a5c:	e798      	b.n	8005990 <_tzset_unlocked_r+0x34>
 8005a5e:	f7fa fbb7 	bl	80001d0 <strcmp>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d094      	beq.n	8005990 <_tzset_unlocked_r+0x34>
 8005a66:	e799      	b.n	800599c <_tzset_unlocked_r+0x40>
 8005a68:	4621      	mov	r1, r4
 8005a6a:	f000 fa49 	bl	8005f00 <strcpy>
 8005a6e:	e7a2      	b.n	80059b6 <_tzset_unlocked_r+0x5a>
 8005a70:	2b2b      	cmp	r3, #43	; 0x2b
 8005a72:	bf08      	it	eq
 8005a74:	3701      	addeq	r7, #1
 8005a76:	2401      	movs	r4, #1
 8005a78:	e7b2      	b.n	80059e0 <_tzset_unlocked_r+0x84>
 8005a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a7c:	f8c4 9004 	str.w	r9, [r4, #4]
 8005a80:	18fc      	adds	r4, r7, r3
 8005a82:	5cfb      	ldrb	r3, [r7, r3]
 8005a84:	2b2d      	cmp	r3, #45	; 0x2d
 8005a86:	f040 8092 	bne.w	8005bae <_tzset_unlocked_r+0x252>
 8005a8a:	3401      	adds	r4, #1
 8005a8c:	f04f 37ff 	mov.w	r7, #4294967295
 8005a90:	2300      	movs	r3, #0
 8005a92:	f8ad 301c 	strh.w	r3, [sp, #28]
 8005a96:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005a9a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8005a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8005aa0:	9603      	str	r6, [sp, #12]
 8005aa2:	f8cd a008 	str.w	sl, [sp, #8]
 8005aa6:	9601      	str	r6, [sp, #4]
 8005aa8:	f8cd b000 	str.w	fp, [sp]
 8005aac:	4633      	mov	r3, r6
 8005aae:	aa07      	add	r2, sp, #28
 8005ab0:	4967      	ldr	r1, [pc, #412]	; (8005c50 <_tzset_unlocked_r+0x2f4>)
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 f9f8 	bl	8005ea8 <siscanf>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	dc7d      	bgt.n	8005bb8 <_tzset_unlocked_r+0x25c>
 8005abc:	6a2b      	ldr	r3, [r5, #32]
 8005abe:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8005ac2:	63eb      	str	r3, [r5, #60]	; 0x3c
 8005ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac6:	462f      	mov	r7, r5
 8005ac8:	441c      	add	r4, r3
 8005aca:	f04f 0900 	mov.w	r9, #0
 8005ace:	7823      	ldrb	r3, [r4, #0]
 8005ad0:	2b2c      	cmp	r3, #44	; 0x2c
 8005ad2:	bf08      	it	eq
 8005ad4:	3401      	addeq	r4, #1
 8005ad6:	f894 8000 	ldrb.w	r8, [r4]
 8005ada:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8005ade:	d17b      	bne.n	8005bd8 <_tzset_unlocked_r+0x27c>
 8005ae0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8005ae4:	9302      	str	r3, [sp, #8]
 8005ae6:	ab09      	add	r3, sp, #36	; 0x24
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	9603      	str	r6, [sp, #12]
 8005aec:	9601      	str	r6, [sp, #4]
 8005aee:	4633      	mov	r3, r6
 8005af0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8005af4:	4957      	ldr	r1, [pc, #348]	; (8005c54 <_tzset_unlocked_r+0x2f8>)
 8005af6:	4620      	mov	r0, r4
 8005af8:	f000 f9d6 	bl	8005ea8 <siscanf>
 8005afc:	2803      	cmp	r0, #3
 8005afe:	f47f af47 	bne.w	8005990 <_tzset_unlocked_r+0x34>
 8005b02:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8005b06:	1e4b      	subs	r3, r1, #1
 8005b08:	2b0b      	cmp	r3, #11
 8005b0a:	f63f af41 	bhi.w	8005990 <_tzset_unlocked_r+0x34>
 8005b0e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8005b12:	1e53      	subs	r3, r2, #1
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	f63f af3b 	bhi.w	8005990 <_tzset_unlocked_r+0x34>
 8005b1a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8005b1e:	2b06      	cmp	r3, #6
 8005b20:	f63f af36 	bhi.w	8005990 <_tzset_unlocked_r+0x34>
 8005b24:	f887 8008 	strb.w	r8, [r7, #8]
 8005b28:	60f9      	str	r1, [r7, #12]
 8005b2a:	613a      	str	r2, [r7, #16]
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b30:	eb04 0803 	add.w	r8, r4, r3
 8005b34:	2302      	movs	r3, #2
 8005b36:	f8ad 301c 	strh.w	r3, [sp, #28]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005b40:	f8ad 3020 	strh.w	r3, [sp, #32]
 8005b44:	930a      	str	r3, [sp, #40]	; 0x28
 8005b46:	f898 3000 	ldrb.w	r3, [r8]
 8005b4a:	2b2f      	cmp	r3, #47	; 0x2f
 8005b4c:	d10b      	bne.n	8005b66 <_tzset_unlocked_r+0x20a>
 8005b4e:	9603      	str	r6, [sp, #12]
 8005b50:	f8cd a008 	str.w	sl, [sp, #8]
 8005b54:	9601      	str	r6, [sp, #4]
 8005b56:	f8cd b000 	str.w	fp, [sp]
 8005b5a:	4633      	mov	r3, r6
 8005b5c:	aa07      	add	r2, sp, #28
 8005b5e:	493e      	ldr	r1, [pc, #248]	; (8005c58 <_tzset_unlocked_r+0x2fc>)
 8005b60:	4640      	mov	r0, r8
 8005b62:	f000 f9a1 	bl	8005ea8 <siscanf>
 8005b66:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005b6a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005b6e:	213c      	movs	r1, #60	; 0x3c
 8005b70:	fb01 2203 	mla	r2, r1, r3, r2
 8005b74:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8005b78:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005b7c:	fb01 2303 	mla	r3, r1, r3, r2
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b84:	f109 0901 	add.w	r9, r9, #1
 8005b88:	f1b9 0f02 	cmp.w	r9, #2
 8005b8c:	4444      	add	r4, r8
 8005b8e:	f107 071c 	add.w	r7, r7, #28
 8005b92:	d19c      	bne.n	8005ace <_tzset_unlocked_r+0x172>
 8005b94:	6868      	ldr	r0, [r5, #4]
 8005b96:	f7ff fe31 	bl	80057fc <__tzcalc_limits>
 8005b9a:	4b27      	ldr	r3, [pc, #156]	; (8005c38 <_tzset_unlocked_r+0x2dc>)
 8005b9c:	6a2a      	ldr	r2, [r5, #32]
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	4a26      	ldr	r2, [pc, #152]	; (8005c40 <_tzset_unlocked_r+0x2e4>)
 8005ba6:	bf18      	it	ne
 8005ba8:	2301      	movne	r3, #1
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	e6f0      	b.n	8005990 <_tzset_unlocked_r+0x34>
 8005bae:	2b2b      	cmp	r3, #43	; 0x2b
 8005bb0:	bf08      	it	eq
 8005bb2:	3401      	addeq	r4, #1
 8005bb4:	2701      	movs	r7, #1
 8005bb6:	e76b      	b.n	8005a90 <_tzset_unlocked_r+0x134>
 8005bb8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005bbc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8005bc0:	213c      	movs	r1, #60	; 0x3c
 8005bc2:	fb01 2203 	mla	r2, r1, r3, r2
 8005bc6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8005bca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005bce:	fb01 2303 	mla	r3, r1, r3, r2
 8005bd2:	435f      	muls	r7, r3
 8005bd4:	63ef      	str	r7, [r5, #60]	; 0x3c
 8005bd6:	e775      	b.n	8005ac4 <_tzset_unlocked_r+0x168>
 8005bd8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8005bdc:	bf06      	itte	eq
 8005bde:	3401      	addeq	r4, #1
 8005be0:	4643      	moveq	r3, r8
 8005be2:	2344      	movne	r3, #68	; 0x44
 8005be4:	220a      	movs	r2, #10
 8005be6:	a90b      	add	r1, sp, #44	; 0x2c
 8005be8:	4620      	mov	r0, r4
 8005bea:	9305      	str	r3, [sp, #20]
 8005bec:	f000 fa32 	bl	8006054 <strtoul>
 8005bf0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005bf4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8005bf8:	4544      	cmp	r4, r8
 8005bfa:	9b05      	ldr	r3, [sp, #20]
 8005bfc:	d114      	bne.n	8005c28 <_tzset_unlocked_r+0x2cc>
 8005bfe:	234d      	movs	r3, #77	; 0x4d
 8005c00:	f1b9 0f00 	cmp.w	r9, #0
 8005c04:	d107      	bne.n	8005c16 <_tzset_unlocked_r+0x2ba>
 8005c06:	722b      	strb	r3, [r5, #8]
 8005c08:	2303      	movs	r3, #3
 8005c0a:	60eb      	str	r3, [r5, #12]
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	612b      	str	r3, [r5, #16]
 8005c10:	f8c5 9014 	str.w	r9, [r5, #20]
 8005c14:	e78e      	b.n	8005b34 <_tzset_unlocked_r+0x1d8>
 8005c16:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8005c1a:	230b      	movs	r3, #11
 8005c1c:	62ab      	str	r3, [r5, #40]	; 0x28
 8005c1e:	2301      	movs	r3, #1
 8005c20:	62eb      	str	r3, [r5, #44]	; 0x2c
 8005c22:	2300      	movs	r3, #0
 8005c24:	632b      	str	r3, [r5, #48]	; 0x30
 8005c26:	e785      	b.n	8005b34 <_tzset_unlocked_r+0x1d8>
 8005c28:	b280      	uxth	r0, r0
 8005c2a:	723b      	strb	r3, [r7, #8]
 8005c2c:	6178      	str	r0, [r7, #20]
 8005c2e:	e781      	b.n	8005b34 <_tzset_unlocked_r+0x1d8>
 8005c30:	08006c80 	.word	0x08006c80
 8005c34:	2000025c 	.word	0x2000025c
 8005c38:	20000264 	.word	0x20000264
 8005c3c:	08006c83 	.word	0x08006c83
 8005c40:	20000260 	.word	0x20000260
 8005c44:	20000008 	.word	0x20000008
 8005c48:	20000250 	.word	0x20000250
 8005c4c:	08006c87 	.word	0x08006c87
 8005c50:	08006caa 	.word	0x08006caa
 8005c54:	08006c96 	.word	0x08006c96
 8005c58:	08006ca9 	.word	0x08006ca9
 8005c5c:	20000245 	.word	0x20000245

08005c60 <div>:
 8005c60:	2900      	cmp	r1, #0
 8005c62:	b510      	push	{r4, lr}
 8005c64:	fb91 f4f2 	sdiv	r4, r1, r2
 8005c68:	fb02 1314 	mls	r3, r2, r4, r1
 8005c6c:	db06      	blt.n	8005c7c <div+0x1c>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	da01      	bge.n	8005c76 <div+0x16>
 8005c72:	3401      	adds	r4, #1
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	6004      	str	r4, [r0, #0]
 8005c78:	6043      	str	r3, [r0, #4]
 8005c7a:	bd10      	pop	{r4, pc}
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	bfc4      	itt	gt
 8005c80:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8005c84:	189b      	addgt	r3, r3, r2
 8005c86:	e7f6      	b.n	8005c76 <div+0x16>

08005c88 <_findenv_r>:
 8005c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	468a      	mov	sl, r1
 8005c90:	4617      	mov	r7, r2
 8005c92:	f000 f9f5 	bl	8006080 <__env_lock>
 8005c96:	4b1b      	ldr	r3, [pc, #108]	; (8005d04 <_findenv_r+0x7c>)
 8005c98:	f8d3 8000 	ldr.w	r8, [r3]
 8005c9c:	4699      	mov	r9, r3
 8005c9e:	f1b8 0f00 	cmp.w	r8, #0
 8005ca2:	d007      	beq.n	8005cb4 <_findenv_r+0x2c>
 8005ca4:	4654      	mov	r4, sl
 8005ca6:	4623      	mov	r3, r4
 8005ca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cac:	b332      	cbz	r2, 8005cfc <_findenv_r+0x74>
 8005cae:	2a3d      	cmp	r2, #61	; 0x3d
 8005cb0:	461c      	mov	r4, r3
 8005cb2:	d1f8      	bne.n	8005ca6 <_findenv_r+0x1e>
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	f000 f9e4 	bl	8006082 <__env_unlock>
 8005cba:	2000      	movs	r0, #0
 8005cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc0:	f108 0804 	add.w	r8, r8, #4
 8005cc4:	f8d8 0000 	ldr.w	r0, [r8]
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d0f3      	beq.n	8005cb4 <_findenv_r+0x2c>
 8005ccc:	4622      	mov	r2, r4
 8005cce:	4651      	mov	r1, sl
 8005cd0:	f000 f91e 	bl	8005f10 <strncmp>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d1f3      	bne.n	8005cc0 <_findenv_r+0x38>
 8005cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8005cdc:	191d      	adds	r5, r3, r4
 8005cde:	5d1b      	ldrb	r3, [r3, r4]
 8005ce0:	2b3d      	cmp	r3, #61	; 0x3d
 8005ce2:	d1ed      	bne.n	8005cc0 <_findenv_r+0x38>
 8005ce4:	f8d9 3000 	ldr.w	r3, [r9]
 8005ce8:	eba8 0303 	sub.w	r3, r8, r3
 8005cec:	109b      	asrs	r3, r3, #2
 8005cee:	4630      	mov	r0, r6
 8005cf0:	603b      	str	r3, [r7, #0]
 8005cf2:	f000 f9c6 	bl	8006082 <__env_unlock>
 8005cf6:	1c68      	adds	r0, r5, #1
 8005cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfc:	eba4 040a 	sub.w	r4, r4, sl
 8005d00:	e7e0      	b.n	8005cc4 <_findenv_r+0x3c>
 8005d02:	bf00      	nop
 8005d04:	200000b4 	.word	0x200000b4

08005d08 <_getenv_r>:
 8005d08:	b507      	push	{r0, r1, r2, lr}
 8005d0a:	aa01      	add	r2, sp, #4
 8005d0c:	f7ff ffbc 	bl	8005c88 <_findenv_r>
 8005d10:	b003      	add	sp, #12
 8005d12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005d18 <__gettzinfo>:
 8005d18:	4800      	ldr	r0, [pc, #0]	; (8005d1c <__gettzinfo+0x4>)
 8005d1a:	4770      	bx	lr
 8005d1c:	20000010 	.word	0x20000010

08005d20 <free>:
 8005d20:	4b02      	ldr	r3, [pc, #8]	; (8005d2c <free+0xc>)
 8005d22:	4601      	mov	r1, r0
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	f000 b803 	b.w	8005d30 <_free_r>
 8005d2a:	bf00      	nop
 8005d2c:	20000050 	.word	0x20000050

08005d30 <_free_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4605      	mov	r5, r0
 8005d34:	2900      	cmp	r1, #0
 8005d36:	d045      	beq.n	8005dc4 <_free_r+0x94>
 8005d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d3c:	1f0c      	subs	r4, r1, #4
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	bfb8      	it	lt
 8005d42:	18e4      	addlt	r4, r4, r3
 8005d44:	f000 f9c2 	bl	80060cc <__malloc_lock>
 8005d48:	4a1f      	ldr	r2, [pc, #124]	; (8005dc8 <_free_r+0x98>)
 8005d4a:	6813      	ldr	r3, [r2, #0]
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	b933      	cbnz	r3, 8005d5e <_free_r+0x2e>
 8005d50:	6063      	str	r3, [r4, #4]
 8005d52:	6014      	str	r4, [r2, #0]
 8005d54:	4628      	mov	r0, r5
 8005d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d5a:	f000 b9b8 	b.w	80060ce <__malloc_unlock>
 8005d5e:	42a3      	cmp	r3, r4
 8005d60:	d90c      	bls.n	8005d7c <_free_r+0x4c>
 8005d62:	6821      	ldr	r1, [r4, #0]
 8005d64:	1862      	adds	r2, r4, r1
 8005d66:	4293      	cmp	r3, r2
 8005d68:	bf04      	itt	eq
 8005d6a:	681a      	ldreq	r2, [r3, #0]
 8005d6c:	685b      	ldreq	r3, [r3, #4]
 8005d6e:	6063      	str	r3, [r4, #4]
 8005d70:	bf04      	itt	eq
 8005d72:	1852      	addeq	r2, r2, r1
 8005d74:	6022      	streq	r2, [r4, #0]
 8005d76:	6004      	str	r4, [r0, #0]
 8005d78:	e7ec      	b.n	8005d54 <_free_r+0x24>
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	b10a      	cbz	r2, 8005d84 <_free_r+0x54>
 8005d80:	42a2      	cmp	r2, r4
 8005d82:	d9fa      	bls.n	8005d7a <_free_r+0x4a>
 8005d84:	6819      	ldr	r1, [r3, #0]
 8005d86:	1858      	adds	r0, r3, r1
 8005d88:	42a0      	cmp	r0, r4
 8005d8a:	d10b      	bne.n	8005da4 <_free_r+0x74>
 8005d8c:	6820      	ldr	r0, [r4, #0]
 8005d8e:	4401      	add	r1, r0
 8005d90:	1858      	adds	r0, r3, r1
 8005d92:	4282      	cmp	r2, r0
 8005d94:	6019      	str	r1, [r3, #0]
 8005d96:	d1dd      	bne.n	8005d54 <_free_r+0x24>
 8005d98:	6810      	ldr	r0, [r2, #0]
 8005d9a:	6852      	ldr	r2, [r2, #4]
 8005d9c:	605a      	str	r2, [r3, #4]
 8005d9e:	4401      	add	r1, r0
 8005da0:	6019      	str	r1, [r3, #0]
 8005da2:	e7d7      	b.n	8005d54 <_free_r+0x24>
 8005da4:	d902      	bls.n	8005dac <_free_r+0x7c>
 8005da6:	230c      	movs	r3, #12
 8005da8:	602b      	str	r3, [r5, #0]
 8005daa:	e7d3      	b.n	8005d54 <_free_r+0x24>
 8005dac:	6820      	ldr	r0, [r4, #0]
 8005dae:	1821      	adds	r1, r4, r0
 8005db0:	428a      	cmp	r2, r1
 8005db2:	bf04      	itt	eq
 8005db4:	6811      	ldreq	r1, [r2, #0]
 8005db6:	6852      	ldreq	r2, [r2, #4]
 8005db8:	6062      	str	r2, [r4, #4]
 8005dba:	bf04      	itt	eq
 8005dbc:	1809      	addeq	r1, r1, r0
 8005dbe:	6021      	streq	r1, [r4, #0]
 8005dc0:	605c      	str	r4, [r3, #4]
 8005dc2:	e7c7      	b.n	8005d54 <_free_r+0x24>
 8005dc4:	bd38      	pop	{r3, r4, r5, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000268 	.word	0x20000268

08005dcc <_malloc_r>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	1ccd      	adds	r5, r1, #3
 8005dd0:	f025 0503 	bic.w	r5, r5, #3
 8005dd4:	3508      	adds	r5, #8
 8005dd6:	2d0c      	cmp	r5, #12
 8005dd8:	bf38      	it	cc
 8005dda:	250c      	movcc	r5, #12
 8005ddc:	2d00      	cmp	r5, #0
 8005dde:	4606      	mov	r6, r0
 8005de0:	db01      	blt.n	8005de6 <_malloc_r+0x1a>
 8005de2:	42a9      	cmp	r1, r5
 8005de4:	d903      	bls.n	8005dee <_malloc_r+0x22>
 8005de6:	230c      	movs	r3, #12
 8005de8:	6033      	str	r3, [r6, #0]
 8005dea:	2000      	movs	r0, #0
 8005dec:	bd70      	pop	{r4, r5, r6, pc}
 8005dee:	f000 f96d 	bl	80060cc <__malloc_lock>
 8005df2:	4a23      	ldr	r2, [pc, #140]	; (8005e80 <_malloc_r+0xb4>)
 8005df4:	6814      	ldr	r4, [r2, #0]
 8005df6:	4621      	mov	r1, r4
 8005df8:	b991      	cbnz	r1, 8005e20 <_malloc_r+0x54>
 8005dfa:	4c22      	ldr	r4, [pc, #136]	; (8005e84 <_malloc_r+0xb8>)
 8005dfc:	6823      	ldr	r3, [r4, #0]
 8005dfe:	b91b      	cbnz	r3, 8005e08 <_malloc_r+0x3c>
 8005e00:	4630      	mov	r0, r6
 8005e02:	f000 f841 	bl	8005e88 <_sbrk_r>
 8005e06:	6020      	str	r0, [r4, #0]
 8005e08:	4629      	mov	r1, r5
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f000 f83c 	bl	8005e88 <_sbrk_r>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d126      	bne.n	8005e62 <_malloc_r+0x96>
 8005e14:	230c      	movs	r3, #12
 8005e16:	6033      	str	r3, [r6, #0]
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f000 f958 	bl	80060ce <__malloc_unlock>
 8005e1e:	e7e4      	b.n	8005dea <_malloc_r+0x1e>
 8005e20:	680b      	ldr	r3, [r1, #0]
 8005e22:	1b5b      	subs	r3, r3, r5
 8005e24:	d41a      	bmi.n	8005e5c <_malloc_r+0x90>
 8005e26:	2b0b      	cmp	r3, #11
 8005e28:	d90f      	bls.n	8005e4a <_malloc_r+0x7e>
 8005e2a:	600b      	str	r3, [r1, #0]
 8005e2c:	50cd      	str	r5, [r1, r3]
 8005e2e:	18cc      	adds	r4, r1, r3
 8005e30:	4630      	mov	r0, r6
 8005e32:	f000 f94c 	bl	80060ce <__malloc_unlock>
 8005e36:	f104 000b 	add.w	r0, r4, #11
 8005e3a:	1d23      	adds	r3, r4, #4
 8005e3c:	f020 0007 	bic.w	r0, r0, #7
 8005e40:	1ac3      	subs	r3, r0, r3
 8005e42:	d01b      	beq.n	8005e7c <_malloc_r+0xb0>
 8005e44:	425a      	negs	r2, r3
 8005e46:	50e2      	str	r2, [r4, r3]
 8005e48:	bd70      	pop	{r4, r5, r6, pc}
 8005e4a:	428c      	cmp	r4, r1
 8005e4c:	bf0d      	iteet	eq
 8005e4e:	6863      	ldreq	r3, [r4, #4]
 8005e50:	684b      	ldrne	r3, [r1, #4]
 8005e52:	6063      	strne	r3, [r4, #4]
 8005e54:	6013      	streq	r3, [r2, #0]
 8005e56:	bf18      	it	ne
 8005e58:	460c      	movne	r4, r1
 8005e5a:	e7e9      	b.n	8005e30 <_malloc_r+0x64>
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	6849      	ldr	r1, [r1, #4]
 8005e60:	e7ca      	b.n	8005df8 <_malloc_r+0x2c>
 8005e62:	1cc4      	adds	r4, r0, #3
 8005e64:	f024 0403 	bic.w	r4, r4, #3
 8005e68:	42a0      	cmp	r0, r4
 8005e6a:	d005      	beq.n	8005e78 <_malloc_r+0xac>
 8005e6c:	1a21      	subs	r1, r4, r0
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f000 f80a 	bl	8005e88 <_sbrk_r>
 8005e74:	3001      	adds	r0, #1
 8005e76:	d0cd      	beq.n	8005e14 <_malloc_r+0x48>
 8005e78:	6025      	str	r5, [r4, #0]
 8005e7a:	e7d9      	b.n	8005e30 <_malloc_r+0x64>
 8005e7c:	bd70      	pop	{r4, r5, r6, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000268 	.word	0x20000268
 8005e84:	2000026c 	.word	0x2000026c

08005e88 <_sbrk_r>:
 8005e88:	b538      	push	{r3, r4, r5, lr}
 8005e8a:	4c06      	ldr	r4, [pc, #24]	; (8005ea4 <_sbrk_r+0x1c>)
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	4605      	mov	r5, r0
 8005e90:	4608      	mov	r0, r1
 8005e92:	6023      	str	r3, [r4, #0]
 8005e94:	f000 fe78 	bl	8006b88 <_sbrk>
 8005e98:	1c43      	adds	r3, r0, #1
 8005e9a:	d102      	bne.n	8005ea2 <_sbrk_r+0x1a>
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	b103      	cbz	r3, 8005ea2 <_sbrk_r+0x1a>
 8005ea0:	602b      	str	r3, [r5, #0]
 8005ea2:	bd38      	pop	{r3, r4, r5, pc}
 8005ea4:	200007e4 	.word	0x200007e4

08005ea8 <siscanf>:
 8005ea8:	b40e      	push	{r1, r2, r3}
 8005eaa:	b530      	push	{r4, r5, lr}
 8005eac:	b09c      	sub	sp, #112	; 0x70
 8005eae:	ac1f      	add	r4, sp, #124	; 0x7c
 8005eb0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005eb4:	f854 5b04 	ldr.w	r5, [r4], #4
 8005eb8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005ebc:	9002      	str	r0, [sp, #8]
 8005ebe:	9006      	str	r0, [sp, #24]
 8005ec0:	f7fa f990 	bl	80001e4 <strlen>
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <siscanf+0x4c>)
 8005ec6:	9003      	str	r0, [sp, #12]
 8005ec8:	9007      	str	r0, [sp, #28]
 8005eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ecc:	480a      	ldr	r0, [pc, #40]	; (8005ef8 <siscanf+0x50>)
 8005ece:	9401      	str	r4, [sp, #4]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ed4:	9314      	str	r3, [sp, #80]	; 0x50
 8005ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005eda:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ede:	462a      	mov	r2, r5
 8005ee0:	4623      	mov	r3, r4
 8005ee2:	a902      	add	r1, sp, #8
 8005ee4:	6800      	ldr	r0, [r0, #0]
 8005ee6:	f000 f94d 	bl	8006184 <__ssvfiscanf_r>
 8005eea:	b01c      	add	sp, #112	; 0x70
 8005eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ef0:	b003      	add	sp, #12
 8005ef2:	4770      	bx	lr
 8005ef4:	08005efd 	.word	0x08005efd
 8005ef8:	20000050 	.word	0x20000050

08005efc <__seofread>:
 8005efc:	2000      	movs	r0, #0
 8005efe:	4770      	bx	lr

08005f00 <strcpy>:
 8005f00:	4603      	mov	r3, r0
 8005f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f06:	f803 2b01 	strb.w	r2, [r3], #1
 8005f0a:	2a00      	cmp	r2, #0
 8005f0c:	d1f9      	bne.n	8005f02 <strcpy+0x2>
 8005f0e:	4770      	bx	lr

08005f10 <strncmp>:
 8005f10:	b510      	push	{r4, lr}
 8005f12:	b16a      	cbz	r2, 8005f30 <strncmp+0x20>
 8005f14:	3901      	subs	r1, #1
 8005f16:	1884      	adds	r4, r0, r2
 8005f18:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005f1c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d103      	bne.n	8005f2c <strncmp+0x1c>
 8005f24:	42a0      	cmp	r0, r4
 8005f26:	d001      	beq.n	8005f2c <strncmp+0x1c>
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1f5      	bne.n	8005f18 <strncmp+0x8>
 8005f2c:	1a98      	subs	r0, r3, r2
 8005f2e:	bd10      	pop	{r4, pc}
 8005f30:	4610      	mov	r0, r2
 8005f32:	bd10      	pop	{r4, pc}

08005f34 <_strtoul_l.isra.0>:
 8005f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f38:	4680      	mov	r8, r0
 8005f3a:	4689      	mov	r9, r1
 8005f3c:	4692      	mov	sl, r2
 8005f3e:	461e      	mov	r6, r3
 8005f40:	460f      	mov	r7, r1
 8005f42:	463d      	mov	r5, r7
 8005f44:	9808      	ldr	r0, [sp, #32]
 8005f46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f4a:	f000 f89b 	bl	8006084 <__locale_ctype_ptr_l>
 8005f4e:	4420      	add	r0, r4
 8005f50:	7843      	ldrb	r3, [r0, #1]
 8005f52:	f013 0308 	ands.w	r3, r3, #8
 8005f56:	d10a      	bne.n	8005f6e <_strtoul_l.isra.0+0x3a>
 8005f58:	2c2d      	cmp	r4, #45	; 0x2d
 8005f5a:	d10a      	bne.n	8005f72 <_strtoul_l.isra.0+0x3e>
 8005f5c:	782c      	ldrb	r4, [r5, #0]
 8005f5e:	2301      	movs	r3, #1
 8005f60:	1cbd      	adds	r5, r7, #2
 8005f62:	b15e      	cbz	r6, 8005f7c <_strtoul_l.isra.0+0x48>
 8005f64:	2e10      	cmp	r6, #16
 8005f66:	d113      	bne.n	8005f90 <_strtoul_l.isra.0+0x5c>
 8005f68:	2c30      	cmp	r4, #48	; 0x30
 8005f6a:	d009      	beq.n	8005f80 <_strtoul_l.isra.0+0x4c>
 8005f6c:	e010      	b.n	8005f90 <_strtoul_l.isra.0+0x5c>
 8005f6e:	462f      	mov	r7, r5
 8005f70:	e7e7      	b.n	8005f42 <_strtoul_l.isra.0+0xe>
 8005f72:	2c2b      	cmp	r4, #43	; 0x2b
 8005f74:	bf04      	itt	eq
 8005f76:	782c      	ldrbeq	r4, [r5, #0]
 8005f78:	1cbd      	addeq	r5, r7, #2
 8005f7a:	e7f2      	b.n	8005f62 <_strtoul_l.isra.0+0x2e>
 8005f7c:	2c30      	cmp	r4, #48	; 0x30
 8005f7e:	d125      	bne.n	8005fcc <_strtoul_l.isra.0+0x98>
 8005f80:	782a      	ldrb	r2, [r5, #0]
 8005f82:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005f86:	2a58      	cmp	r2, #88	; 0x58
 8005f88:	d14a      	bne.n	8006020 <_strtoul_l.isra.0+0xec>
 8005f8a:	786c      	ldrb	r4, [r5, #1]
 8005f8c:	2610      	movs	r6, #16
 8005f8e:	3502      	adds	r5, #2
 8005f90:	f04f 31ff 	mov.w	r1, #4294967295
 8005f94:	2700      	movs	r7, #0
 8005f96:	fbb1 f1f6 	udiv	r1, r1, r6
 8005f9a:	fb06 fe01 	mul.w	lr, r6, r1
 8005f9e:	ea6f 0e0e 	mvn.w	lr, lr
 8005fa2:	4638      	mov	r0, r7
 8005fa4:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8005fa8:	2a09      	cmp	r2, #9
 8005faa:	d811      	bhi.n	8005fd0 <_strtoul_l.isra.0+0x9c>
 8005fac:	4614      	mov	r4, r2
 8005fae:	42a6      	cmp	r6, r4
 8005fb0:	dd1d      	ble.n	8005fee <_strtoul_l.isra.0+0xba>
 8005fb2:	2f00      	cmp	r7, #0
 8005fb4:	db18      	blt.n	8005fe8 <_strtoul_l.isra.0+0xb4>
 8005fb6:	4281      	cmp	r1, r0
 8005fb8:	d316      	bcc.n	8005fe8 <_strtoul_l.isra.0+0xb4>
 8005fba:	d101      	bne.n	8005fc0 <_strtoul_l.isra.0+0x8c>
 8005fbc:	45a6      	cmp	lr, r4
 8005fbe:	db13      	blt.n	8005fe8 <_strtoul_l.isra.0+0xb4>
 8005fc0:	fb00 4006 	mla	r0, r0, r6, r4
 8005fc4:	2701      	movs	r7, #1
 8005fc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fca:	e7eb      	b.n	8005fa4 <_strtoul_l.isra.0+0x70>
 8005fcc:	260a      	movs	r6, #10
 8005fce:	e7df      	b.n	8005f90 <_strtoul_l.isra.0+0x5c>
 8005fd0:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8005fd4:	2a19      	cmp	r2, #25
 8005fd6:	d801      	bhi.n	8005fdc <_strtoul_l.isra.0+0xa8>
 8005fd8:	3c37      	subs	r4, #55	; 0x37
 8005fda:	e7e8      	b.n	8005fae <_strtoul_l.isra.0+0x7a>
 8005fdc:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8005fe0:	2a19      	cmp	r2, #25
 8005fe2:	d804      	bhi.n	8005fee <_strtoul_l.isra.0+0xba>
 8005fe4:	3c57      	subs	r4, #87	; 0x57
 8005fe6:	e7e2      	b.n	8005fae <_strtoul_l.isra.0+0x7a>
 8005fe8:	f04f 37ff 	mov.w	r7, #4294967295
 8005fec:	e7eb      	b.n	8005fc6 <_strtoul_l.isra.0+0x92>
 8005fee:	2f00      	cmp	r7, #0
 8005ff0:	da09      	bge.n	8006006 <_strtoul_l.isra.0+0xd2>
 8005ff2:	2322      	movs	r3, #34	; 0x22
 8005ff4:	f8c8 3000 	str.w	r3, [r8]
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffc:	f1ba 0f00 	cmp.w	sl, #0
 8006000:	d107      	bne.n	8006012 <_strtoul_l.isra.0+0xde>
 8006002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006006:	b103      	cbz	r3, 800600a <_strtoul_l.isra.0+0xd6>
 8006008:	4240      	negs	r0, r0
 800600a:	f1ba 0f00 	cmp.w	sl, #0
 800600e:	d00c      	beq.n	800602a <_strtoul_l.isra.0+0xf6>
 8006010:	b127      	cbz	r7, 800601c <_strtoul_l.isra.0+0xe8>
 8006012:	3d01      	subs	r5, #1
 8006014:	f8ca 5000 	str.w	r5, [sl]
 8006018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601c:	464d      	mov	r5, r9
 800601e:	e7f9      	b.n	8006014 <_strtoul_l.isra.0+0xe0>
 8006020:	2430      	movs	r4, #48	; 0x30
 8006022:	2e00      	cmp	r6, #0
 8006024:	d1b4      	bne.n	8005f90 <_strtoul_l.isra.0+0x5c>
 8006026:	2608      	movs	r6, #8
 8006028:	e7b2      	b.n	8005f90 <_strtoul_l.isra.0+0x5c>
 800602a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006030 <_strtoul_r>:
 8006030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006032:	4c06      	ldr	r4, [pc, #24]	; (800604c <_strtoul_r+0x1c>)
 8006034:	4d06      	ldr	r5, [pc, #24]	; (8006050 <_strtoul_r+0x20>)
 8006036:	6824      	ldr	r4, [r4, #0]
 8006038:	6a24      	ldr	r4, [r4, #32]
 800603a:	2c00      	cmp	r4, #0
 800603c:	bf08      	it	eq
 800603e:	462c      	moveq	r4, r5
 8006040:	9400      	str	r4, [sp, #0]
 8006042:	f7ff ff77 	bl	8005f34 <_strtoul_l.isra.0>
 8006046:	b003      	add	sp, #12
 8006048:	bd30      	pop	{r4, r5, pc}
 800604a:	bf00      	nop
 800604c:	20000050 	.word	0x20000050
 8006050:	200000b8 	.word	0x200000b8

08006054 <strtoul>:
 8006054:	4b08      	ldr	r3, [pc, #32]	; (8006078 <strtoul+0x24>)
 8006056:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006058:	681c      	ldr	r4, [r3, #0]
 800605a:	4d08      	ldr	r5, [pc, #32]	; (800607c <strtoul+0x28>)
 800605c:	6a23      	ldr	r3, [r4, #32]
 800605e:	2b00      	cmp	r3, #0
 8006060:	bf08      	it	eq
 8006062:	462b      	moveq	r3, r5
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	4613      	mov	r3, r2
 8006068:	460a      	mov	r2, r1
 800606a:	4601      	mov	r1, r0
 800606c:	4620      	mov	r0, r4
 800606e:	f7ff ff61 	bl	8005f34 <_strtoul_l.isra.0>
 8006072:	b003      	add	sp, #12
 8006074:	bd30      	pop	{r4, r5, pc}
 8006076:	bf00      	nop
 8006078:	20000050 	.word	0x20000050
 800607c:	200000b8 	.word	0x200000b8

08006080 <__env_lock>:
 8006080:	4770      	bx	lr

08006082 <__env_unlock>:
 8006082:	4770      	bx	lr

08006084 <__locale_ctype_ptr_l>:
 8006084:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006088:	4770      	bx	lr
	...

0800608c <__locale_ctype_ptr>:
 800608c:	4b04      	ldr	r3, [pc, #16]	; (80060a0 <__locale_ctype_ptr+0x14>)
 800608e:	4a05      	ldr	r2, [pc, #20]	; (80060a4 <__locale_ctype_ptr+0x18>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	2b00      	cmp	r3, #0
 8006096:	bf08      	it	eq
 8006098:	4613      	moveq	r3, r2
 800609a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800609e:	4770      	bx	lr
 80060a0:	20000050 	.word	0x20000050
 80060a4:	200000b8 	.word	0x200000b8

080060a8 <__ascii_mbtowc>:
 80060a8:	b082      	sub	sp, #8
 80060aa:	b901      	cbnz	r1, 80060ae <__ascii_mbtowc+0x6>
 80060ac:	a901      	add	r1, sp, #4
 80060ae:	b142      	cbz	r2, 80060c2 <__ascii_mbtowc+0x1a>
 80060b0:	b14b      	cbz	r3, 80060c6 <__ascii_mbtowc+0x1e>
 80060b2:	7813      	ldrb	r3, [r2, #0]
 80060b4:	600b      	str	r3, [r1, #0]
 80060b6:	7812      	ldrb	r2, [r2, #0]
 80060b8:	1c10      	adds	r0, r2, #0
 80060ba:	bf18      	it	ne
 80060bc:	2001      	movne	r0, #1
 80060be:	b002      	add	sp, #8
 80060c0:	4770      	bx	lr
 80060c2:	4610      	mov	r0, r2
 80060c4:	e7fb      	b.n	80060be <__ascii_mbtowc+0x16>
 80060c6:	f06f 0001 	mvn.w	r0, #1
 80060ca:	e7f8      	b.n	80060be <__ascii_mbtowc+0x16>

080060cc <__malloc_lock>:
 80060cc:	4770      	bx	lr

080060ce <__malloc_unlock>:
 80060ce:	4770      	bx	lr

080060d0 <_sungetc_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	1c4b      	adds	r3, r1, #1
 80060d4:	4614      	mov	r4, r2
 80060d6:	d103      	bne.n	80060e0 <_sungetc_r+0x10>
 80060d8:	f04f 35ff 	mov.w	r5, #4294967295
 80060dc:	4628      	mov	r0, r5
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	8993      	ldrh	r3, [r2, #12]
 80060e2:	f023 0320 	bic.w	r3, r3, #32
 80060e6:	8193      	strh	r3, [r2, #12]
 80060e8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80060ea:	6852      	ldr	r2, [r2, #4]
 80060ec:	b2cd      	uxtb	r5, r1
 80060ee:	b18b      	cbz	r3, 8006114 <_sungetc_r+0x44>
 80060f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80060f2:	429a      	cmp	r2, r3
 80060f4:	da08      	bge.n	8006108 <_sungetc_r+0x38>
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	1e5a      	subs	r2, r3, #1
 80060fa:	6022      	str	r2, [r4, #0]
 80060fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006100:	6863      	ldr	r3, [r4, #4]
 8006102:	3301      	adds	r3, #1
 8006104:	6063      	str	r3, [r4, #4]
 8006106:	e7e9      	b.n	80060dc <_sungetc_r+0xc>
 8006108:	4621      	mov	r1, r4
 800610a:	f000 fba9 	bl	8006860 <__submore>
 800610e:	2800      	cmp	r0, #0
 8006110:	d0f1      	beq.n	80060f6 <_sungetc_r+0x26>
 8006112:	e7e1      	b.n	80060d8 <_sungetc_r+0x8>
 8006114:	6921      	ldr	r1, [r4, #16]
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	b151      	cbz	r1, 8006130 <_sungetc_r+0x60>
 800611a:	4299      	cmp	r1, r3
 800611c:	d208      	bcs.n	8006130 <_sungetc_r+0x60>
 800611e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006122:	428d      	cmp	r5, r1
 8006124:	d104      	bne.n	8006130 <_sungetc_r+0x60>
 8006126:	3b01      	subs	r3, #1
 8006128:	3201      	adds	r2, #1
 800612a:	6023      	str	r3, [r4, #0]
 800612c:	6062      	str	r2, [r4, #4]
 800612e:	e7d5      	b.n	80060dc <_sungetc_r+0xc>
 8006130:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006132:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006136:	6363      	str	r3, [r4, #52]	; 0x34
 8006138:	2303      	movs	r3, #3
 800613a:	63a3      	str	r3, [r4, #56]	; 0x38
 800613c:	4623      	mov	r3, r4
 800613e:	6422      	str	r2, [r4, #64]	; 0x40
 8006140:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	2301      	movs	r3, #1
 8006148:	e7dc      	b.n	8006104 <_sungetc_r+0x34>

0800614a <__ssrefill_r>:
 800614a:	b510      	push	{r4, lr}
 800614c:	460c      	mov	r4, r1
 800614e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006150:	b169      	cbz	r1, 800616e <__ssrefill_r+0x24>
 8006152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006156:	4299      	cmp	r1, r3
 8006158:	d001      	beq.n	800615e <__ssrefill_r+0x14>
 800615a:	f7ff fde9 	bl	8005d30 <_free_r>
 800615e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006160:	6063      	str	r3, [r4, #4]
 8006162:	2000      	movs	r0, #0
 8006164:	6360      	str	r0, [r4, #52]	; 0x34
 8006166:	b113      	cbz	r3, 800616e <__ssrefill_r+0x24>
 8006168:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800616a:	6023      	str	r3, [r4, #0]
 800616c:	bd10      	pop	{r4, pc}
 800616e:	6923      	ldr	r3, [r4, #16]
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	2300      	movs	r3, #0
 8006174:	6063      	str	r3, [r4, #4]
 8006176:	89a3      	ldrh	r3, [r4, #12]
 8006178:	f043 0320 	orr.w	r3, r3, #32
 800617c:	81a3      	strh	r3, [r4, #12]
 800617e:	f04f 30ff 	mov.w	r0, #4294967295
 8006182:	bd10      	pop	{r4, pc}

08006184 <__ssvfiscanf_r>:
 8006184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006188:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800618c:	f10d 080c 	add.w	r8, sp, #12
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	2300      	movs	r3, #0
 8006194:	9346      	str	r3, [sp, #280]	; 0x118
 8006196:	9347      	str	r3, [sp, #284]	; 0x11c
 8006198:	4ba0      	ldr	r3, [pc, #640]	; (800641c <__ssvfiscanf_r+0x298>)
 800619a:	93a2      	str	r3, [sp, #648]	; 0x288
 800619c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8006424 <__ssvfiscanf_r+0x2a0>
 80061a0:	4b9f      	ldr	r3, [pc, #636]	; (8006420 <__ssvfiscanf_r+0x29c>)
 80061a2:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 80061a6:	4606      	mov	r6, r0
 80061a8:	460c      	mov	r4, r1
 80061aa:	93a3      	str	r3, [sp, #652]	; 0x28c
 80061ac:	4692      	mov	sl, r2
 80061ae:	270a      	movs	r7, #10
 80061b0:	f89a 3000 	ldrb.w	r3, [sl]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 812f 	beq.w	8006418 <__ssvfiscanf_r+0x294>
 80061ba:	f7ff ff67 	bl	800608c <__locale_ctype_ptr>
 80061be:	f89a b000 	ldrb.w	fp, [sl]
 80061c2:	4458      	add	r0, fp
 80061c4:	7843      	ldrb	r3, [r0, #1]
 80061c6:	f013 0308 	ands.w	r3, r3, #8
 80061ca:	d143      	bne.n	8006254 <__ssvfiscanf_r+0xd0>
 80061cc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80061d0:	f10a 0501 	add.w	r5, sl, #1
 80061d4:	f040 8099 	bne.w	800630a <__ssvfiscanf_r+0x186>
 80061d8:	9345      	str	r3, [sp, #276]	; 0x114
 80061da:	9343      	str	r3, [sp, #268]	; 0x10c
 80061dc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80061e0:	2b2a      	cmp	r3, #42	; 0x2a
 80061e2:	d103      	bne.n	80061ec <__ssvfiscanf_r+0x68>
 80061e4:	2310      	movs	r3, #16
 80061e6:	9343      	str	r3, [sp, #268]	; 0x10c
 80061e8:	f10a 0502 	add.w	r5, sl, #2
 80061ec:	7829      	ldrb	r1, [r5, #0]
 80061ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80061f2:	2a09      	cmp	r2, #9
 80061f4:	46aa      	mov	sl, r5
 80061f6:	f105 0501 	add.w	r5, r5, #1
 80061fa:	d941      	bls.n	8006280 <__ssvfiscanf_r+0xfc>
 80061fc:	2203      	movs	r2, #3
 80061fe:	4889      	ldr	r0, [pc, #548]	; (8006424 <__ssvfiscanf_r+0x2a0>)
 8006200:	f7f9 fffe 	bl	8000200 <memchr>
 8006204:	b138      	cbz	r0, 8006216 <__ssvfiscanf_r+0x92>
 8006206:	eba0 0309 	sub.w	r3, r0, r9
 800620a:	2001      	movs	r0, #1
 800620c:	4098      	lsls	r0, r3
 800620e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006210:	4318      	orrs	r0, r3
 8006212:	9043      	str	r0, [sp, #268]	; 0x10c
 8006214:	46aa      	mov	sl, r5
 8006216:	f89a 3000 	ldrb.w	r3, [sl]
 800621a:	2b67      	cmp	r3, #103	; 0x67
 800621c:	f10a 0501 	add.w	r5, sl, #1
 8006220:	d84a      	bhi.n	80062b8 <__ssvfiscanf_r+0x134>
 8006222:	2b65      	cmp	r3, #101	; 0x65
 8006224:	f080 80b7 	bcs.w	8006396 <__ssvfiscanf_r+0x212>
 8006228:	2b47      	cmp	r3, #71	; 0x47
 800622a:	d82f      	bhi.n	800628c <__ssvfiscanf_r+0x108>
 800622c:	2b45      	cmp	r3, #69	; 0x45
 800622e:	f080 80b2 	bcs.w	8006396 <__ssvfiscanf_r+0x212>
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 8082 	beq.w	800633c <__ssvfiscanf_r+0x1b8>
 8006238:	2b25      	cmp	r3, #37	; 0x25
 800623a:	d066      	beq.n	800630a <__ssvfiscanf_r+0x186>
 800623c:	2303      	movs	r3, #3
 800623e:	9349      	str	r3, [sp, #292]	; 0x124
 8006240:	9744      	str	r7, [sp, #272]	; 0x110
 8006242:	e045      	b.n	80062d0 <__ssvfiscanf_r+0x14c>
 8006244:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8006246:	3101      	adds	r1, #1
 8006248:	9147      	str	r1, [sp, #284]	; 0x11c
 800624a:	6861      	ldr	r1, [r4, #4]
 800624c:	3301      	adds	r3, #1
 800624e:	3901      	subs	r1, #1
 8006250:	6061      	str	r1, [r4, #4]
 8006252:	6023      	str	r3, [r4, #0]
 8006254:	6863      	ldr	r3, [r4, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	dd0b      	ble.n	8006272 <__ssvfiscanf_r+0xee>
 800625a:	f7ff ff17 	bl	800608c <__locale_ctype_ptr>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	7819      	ldrb	r1, [r3, #0]
 8006262:	4408      	add	r0, r1
 8006264:	7841      	ldrb	r1, [r0, #1]
 8006266:	070d      	lsls	r5, r1, #28
 8006268:	d4ec      	bmi.n	8006244 <__ssvfiscanf_r+0xc0>
 800626a:	f10a 0501 	add.w	r5, sl, #1
 800626e:	46aa      	mov	sl, r5
 8006270:	e79e      	b.n	80061b0 <__ssvfiscanf_r+0x2c>
 8006272:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006274:	4621      	mov	r1, r4
 8006276:	4630      	mov	r0, r6
 8006278:	4798      	blx	r3
 800627a:	2800      	cmp	r0, #0
 800627c:	d0ed      	beq.n	800625a <__ssvfiscanf_r+0xd6>
 800627e:	e7f4      	b.n	800626a <__ssvfiscanf_r+0xe6>
 8006280:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006282:	fb07 1303 	mla	r3, r7, r3, r1
 8006286:	3b30      	subs	r3, #48	; 0x30
 8006288:	9345      	str	r3, [sp, #276]	; 0x114
 800628a:	e7af      	b.n	80061ec <__ssvfiscanf_r+0x68>
 800628c:	2b5b      	cmp	r3, #91	; 0x5b
 800628e:	d061      	beq.n	8006354 <__ssvfiscanf_r+0x1d0>
 8006290:	d80c      	bhi.n	80062ac <__ssvfiscanf_r+0x128>
 8006292:	2b58      	cmp	r3, #88	; 0x58
 8006294:	d1d2      	bne.n	800623c <__ssvfiscanf_r+0xb8>
 8006296:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8006298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629c:	9243      	str	r2, [sp, #268]	; 0x10c
 800629e:	2210      	movs	r2, #16
 80062a0:	9244      	str	r2, [sp, #272]	; 0x110
 80062a2:	2b6f      	cmp	r3, #111	; 0x6f
 80062a4:	bfb4      	ite	lt
 80062a6:	2303      	movlt	r3, #3
 80062a8:	2304      	movge	r3, #4
 80062aa:	e010      	b.n	80062ce <__ssvfiscanf_r+0x14a>
 80062ac:	2b63      	cmp	r3, #99	; 0x63
 80062ae:	d05c      	beq.n	800636a <__ssvfiscanf_r+0x1e6>
 80062b0:	2b64      	cmp	r3, #100	; 0x64
 80062b2:	d1c3      	bne.n	800623c <__ssvfiscanf_r+0xb8>
 80062b4:	9744      	str	r7, [sp, #272]	; 0x110
 80062b6:	e7f4      	b.n	80062a2 <__ssvfiscanf_r+0x11e>
 80062b8:	2b70      	cmp	r3, #112	; 0x70
 80062ba:	d042      	beq.n	8006342 <__ssvfiscanf_r+0x1be>
 80062bc:	d81d      	bhi.n	80062fa <__ssvfiscanf_r+0x176>
 80062be:	2b6e      	cmp	r3, #110	; 0x6e
 80062c0:	d059      	beq.n	8006376 <__ssvfiscanf_r+0x1f2>
 80062c2:	d843      	bhi.n	800634c <__ssvfiscanf_r+0x1c8>
 80062c4:	2b69      	cmp	r3, #105	; 0x69
 80062c6:	d1b9      	bne.n	800623c <__ssvfiscanf_r+0xb8>
 80062c8:	2300      	movs	r3, #0
 80062ca:	9344      	str	r3, [sp, #272]	; 0x110
 80062cc:	2303      	movs	r3, #3
 80062ce:	9349      	str	r3, [sp, #292]	; 0x124
 80062d0:	6863      	ldr	r3, [r4, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	dd61      	ble.n	800639a <__ssvfiscanf_r+0x216>
 80062d6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80062d8:	0659      	lsls	r1, r3, #25
 80062da:	d56f      	bpl.n	80063bc <__ssvfiscanf_r+0x238>
 80062dc:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80062de:	2b02      	cmp	r3, #2
 80062e0:	dc7c      	bgt.n	80063dc <__ssvfiscanf_r+0x258>
 80062e2:	ab01      	add	r3, sp, #4
 80062e4:	4622      	mov	r2, r4
 80062e6:	a943      	add	r1, sp, #268	; 0x10c
 80062e8:	4630      	mov	r0, r6
 80062ea:	f000 f89f 	bl	800642c <_scanf_chars>
 80062ee:	2801      	cmp	r0, #1
 80062f0:	f000 8092 	beq.w	8006418 <__ssvfiscanf_r+0x294>
 80062f4:	2802      	cmp	r0, #2
 80062f6:	d1ba      	bne.n	800626e <__ssvfiscanf_r+0xea>
 80062f8:	e01d      	b.n	8006336 <__ssvfiscanf_r+0x1b2>
 80062fa:	2b75      	cmp	r3, #117	; 0x75
 80062fc:	d0da      	beq.n	80062b4 <__ssvfiscanf_r+0x130>
 80062fe:	2b78      	cmp	r3, #120	; 0x78
 8006300:	d0c9      	beq.n	8006296 <__ssvfiscanf_r+0x112>
 8006302:	2b73      	cmp	r3, #115	; 0x73
 8006304:	d19a      	bne.n	800623c <__ssvfiscanf_r+0xb8>
 8006306:	2302      	movs	r3, #2
 8006308:	e7e1      	b.n	80062ce <__ssvfiscanf_r+0x14a>
 800630a:	6863      	ldr	r3, [r4, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	dd0c      	ble.n	800632a <__ssvfiscanf_r+0x1a6>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	781a      	ldrb	r2, [r3, #0]
 8006314:	4593      	cmp	fp, r2
 8006316:	d17f      	bne.n	8006418 <__ssvfiscanf_r+0x294>
 8006318:	3301      	adds	r3, #1
 800631a:	6862      	ldr	r2, [r4, #4]
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006320:	3a01      	subs	r2, #1
 8006322:	3301      	adds	r3, #1
 8006324:	6062      	str	r2, [r4, #4]
 8006326:	9347      	str	r3, [sp, #284]	; 0x11c
 8006328:	e7a1      	b.n	800626e <__ssvfiscanf_r+0xea>
 800632a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800632c:	4621      	mov	r1, r4
 800632e:	4630      	mov	r0, r6
 8006330:	4798      	blx	r3
 8006332:	2800      	cmp	r0, #0
 8006334:	d0ec      	beq.n	8006310 <__ssvfiscanf_r+0x18c>
 8006336:	9846      	ldr	r0, [sp, #280]	; 0x118
 8006338:	2800      	cmp	r0, #0
 800633a:	d163      	bne.n	8006404 <__ssvfiscanf_r+0x280>
 800633c:	f04f 30ff 	mov.w	r0, #4294967295
 8006340:	e066      	b.n	8006410 <__ssvfiscanf_r+0x28c>
 8006342:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8006344:	f042 0220 	orr.w	r2, r2, #32
 8006348:	9243      	str	r2, [sp, #268]	; 0x10c
 800634a:	e7a4      	b.n	8006296 <__ssvfiscanf_r+0x112>
 800634c:	2308      	movs	r3, #8
 800634e:	9344      	str	r3, [sp, #272]	; 0x110
 8006350:	2304      	movs	r3, #4
 8006352:	e7bc      	b.n	80062ce <__ssvfiscanf_r+0x14a>
 8006354:	4629      	mov	r1, r5
 8006356:	4640      	mov	r0, r8
 8006358:	f000 f9c0 	bl	80066dc <__sccl>
 800635c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800635e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006362:	9343      	str	r3, [sp, #268]	; 0x10c
 8006364:	4605      	mov	r5, r0
 8006366:	2301      	movs	r3, #1
 8006368:	e7b1      	b.n	80062ce <__ssvfiscanf_r+0x14a>
 800636a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800636c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006370:	9343      	str	r3, [sp, #268]	; 0x10c
 8006372:	2300      	movs	r3, #0
 8006374:	e7ab      	b.n	80062ce <__ssvfiscanf_r+0x14a>
 8006376:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8006378:	06d0      	lsls	r0, r2, #27
 800637a:	f53f af78 	bmi.w	800626e <__ssvfiscanf_r+0xea>
 800637e:	f012 0f01 	tst.w	r2, #1
 8006382:	9a01      	ldr	r2, [sp, #4]
 8006384:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006386:	f102 0104 	add.w	r1, r2, #4
 800638a:	9101      	str	r1, [sp, #4]
 800638c:	6812      	ldr	r2, [r2, #0]
 800638e:	bf14      	ite	ne
 8006390:	8013      	strhne	r3, [r2, #0]
 8006392:	6013      	streq	r3, [r2, #0]
 8006394:	e76b      	b.n	800626e <__ssvfiscanf_r+0xea>
 8006396:	2305      	movs	r3, #5
 8006398:	e799      	b.n	80062ce <__ssvfiscanf_r+0x14a>
 800639a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800639c:	4621      	mov	r1, r4
 800639e:	4630      	mov	r0, r6
 80063a0:	4798      	blx	r3
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d097      	beq.n	80062d6 <__ssvfiscanf_r+0x152>
 80063a6:	e7c6      	b.n	8006336 <__ssvfiscanf_r+0x1b2>
 80063a8:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80063aa:	3201      	adds	r2, #1
 80063ac:	9247      	str	r2, [sp, #284]	; 0x11c
 80063ae:	6862      	ldr	r2, [r4, #4]
 80063b0:	3a01      	subs	r2, #1
 80063b2:	2a00      	cmp	r2, #0
 80063b4:	6062      	str	r2, [r4, #4]
 80063b6:	dd0a      	ble.n	80063ce <__ssvfiscanf_r+0x24a>
 80063b8:	3301      	adds	r3, #1
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	f7ff fe66 	bl	800608c <__locale_ctype_ptr>
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	781a      	ldrb	r2, [r3, #0]
 80063c4:	4410      	add	r0, r2
 80063c6:	7842      	ldrb	r2, [r0, #1]
 80063c8:	0712      	lsls	r2, r2, #28
 80063ca:	d4ed      	bmi.n	80063a8 <__ssvfiscanf_r+0x224>
 80063cc:	e786      	b.n	80062dc <__ssvfiscanf_r+0x158>
 80063ce:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80063d0:	4621      	mov	r1, r4
 80063d2:	4630      	mov	r0, r6
 80063d4:	4798      	blx	r3
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d0f0      	beq.n	80063bc <__ssvfiscanf_r+0x238>
 80063da:	e7ac      	b.n	8006336 <__ssvfiscanf_r+0x1b2>
 80063dc:	2b04      	cmp	r3, #4
 80063de:	dc06      	bgt.n	80063ee <__ssvfiscanf_r+0x26a>
 80063e0:	ab01      	add	r3, sp, #4
 80063e2:	4622      	mov	r2, r4
 80063e4:	a943      	add	r1, sp, #268	; 0x10c
 80063e6:	4630      	mov	r0, r6
 80063e8:	f000 f884 	bl	80064f4 <_scanf_i>
 80063ec:	e77f      	b.n	80062ee <__ssvfiscanf_r+0x16a>
 80063ee:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <__ssvfiscanf_r+0x2a4>)
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f43f af3c 	beq.w	800626e <__ssvfiscanf_r+0xea>
 80063f6:	ab01      	add	r3, sp, #4
 80063f8:	4622      	mov	r2, r4
 80063fa:	a943      	add	r1, sp, #268	; 0x10c
 80063fc:	4630      	mov	r0, r6
 80063fe:	f3af 8000 	nop.w
 8006402:	e774      	b.n	80062ee <__ssvfiscanf_r+0x16a>
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	f013 0f40 	tst.w	r3, #64	; 0x40
 800640a:	bf18      	it	ne
 800640c:	f04f 30ff 	movne.w	r0, #4294967295
 8006410:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8006414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006418:	9846      	ldr	r0, [sp, #280]	; 0x118
 800641a:	e7f9      	b.n	8006410 <__ssvfiscanf_r+0x28c>
 800641c:	080060d1 	.word	0x080060d1
 8006420:	0800614b 	.word	0x0800614b
 8006424:	08006d26 	.word	0x08006d26
 8006428:	00000000 	.word	0x00000000

0800642c <_scanf_chars>:
 800642c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006430:	4615      	mov	r5, r2
 8006432:	688a      	ldr	r2, [r1, #8]
 8006434:	4680      	mov	r8, r0
 8006436:	460c      	mov	r4, r1
 8006438:	b932      	cbnz	r2, 8006448 <_scanf_chars+0x1c>
 800643a:	698a      	ldr	r2, [r1, #24]
 800643c:	2a00      	cmp	r2, #0
 800643e:	bf0c      	ite	eq
 8006440:	2201      	moveq	r2, #1
 8006442:	f04f 32ff 	movne.w	r2, #4294967295
 8006446:	608a      	str	r2, [r1, #8]
 8006448:	6822      	ldr	r2, [r4, #0]
 800644a:	06d1      	lsls	r1, r2, #27
 800644c:	bf5f      	itttt	pl
 800644e:	681a      	ldrpl	r2, [r3, #0]
 8006450:	1d11      	addpl	r1, r2, #4
 8006452:	6019      	strpl	r1, [r3, #0]
 8006454:	6817      	ldrpl	r7, [r2, #0]
 8006456:	2600      	movs	r6, #0
 8006458:	69a3      	ldr	r3, [r4, #24]
 800645a:	b1db      	cbz	r3, 8006494 <_scanf_chars+0x68>
 800645c:	2b01      	cmp	r3, #1
 800645e:	d107      	bne.n	8006470 <_scanf_chars+0x44>
 8006460:	682b      	ldr	r3, [r5, #0]
 8006462:	6962      	ldr	r2, [r4, #20]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	5cd3      	ldrb	r3, [r2, r3]
 8006468:	b9a3      	cbnz	r3, 8006494 <_scanf_chars+0x68>
 800646a:	2e00      	cmp	r6, #0
 800646c:	d132      	bne.n	80064d4 <_scanf_chars+0xa8>
 800646e:	e006      	b.n	800647e <_scanf_chars+0x52>
 8006470:	2b02      	cmp	r3, #2
 8006472:	d007      	beq.n	8006484 <_scanf_chars+0x58>
 8006474:	2e00      	cmp	r6, #0
 8006476:	d12d      	bne.n	80064d4 <_scanf_chars+0xa8>
 8006478:	69a3      	ldr	r3, [r4, #24]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d12a      	bne.n	80064d4 <_scanf_chars+0xa8>
 800647e:	2001      	movs	r0, #1
 8006480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006484:	f7ff fe02 	bl	800608c <__locale_ctype_ptr>
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	4418      	add	r0, r3
 800648e:	7843      	ldrb	r3, [r0, #1]
 8006490:	071b      	lsls	r3, r3, #28
 8006492:	d4ef      	bmi.n	8006474 <_scanf_chars+0x48>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	06da      	lsls	r2, r3, #27
 8006498:	bf5e      	ittt	pl
 800649a:	682b      	ldrpl	r3, [r5, #0]
 800649c:	781b      	ldrbpl	r3, [r3, #0]
 800649e:	703b      	strbpl	r3, [r7, #0]
 80064a0:	682a      	ldr	r2, [r5, #0]
 80064a2:	686b      	ldr	r3, [r5, #4]
 80064a4:	f102 0201 	add.w	r2, r2, #1
 80064a8:	602a      	str	r2, [r5, #0]
 80064aa:	68a2      	ldr	r2, [r4, #8]
 80064ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80064b0:	f102 32ff 	add.w	r2, r2, #4294967295
 80064b4:	606b      	str	r3, [r5, #4]
 80064b6:	f106 0601 	add.w	r6, r6, #1
 80064ba:	bf58      	it	pl
 80064bc:	3701      	addpl	r7, #1
 80064be:	60a2      	str	r2, [r4, #8]
 80064c0:	b142      	cbz	r2, 80064d4 <_scanf_chars+0xa8>
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	dcc8      	bgt.n	8006458 <_scanf_chars+0x2c>
 80064c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80064ca:	4629      	mov	r1, r5
 80064cc:	4640      	mov	r0, r8
 80064ce:	4798      	blx	r3
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d0c1      	beq.n	8006458 <_scanf_chars+0x2c>
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	f013 0310 	ands.w	r3, r3, #16
 80064da:	d105      	bne.n	80064e8 <_scanf_chars+0xbc>
 80064dc:	68e2      	ldr	r2, [r4, #12]
 80064de:	3201      	adds	r2, #1
 80064e0:	60e2      	str	r2, [r4, #12]
 80064e2:	69a2      	ldr	r2, [r4, #24]
 80064e4:	b102      	cbz	r2, 80064e8 <_scanf_chars+0xbc>
 80064e6:	703b      	strb	r3, [r7, #0]
 80064e8:	6923      	ldr	r3, [r4, #16]
 80064ea:	441e      	add	r6, r3
 80064ec:	6126      	str	r6, [r4, #16]
 80064ee:	2000      	movs	r0, #0
 80064f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080064f4 <_scanf_i>:
 80064f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f8:	469a      	mov	sl, r3
 80064fa:	4b74      	ldr	r3, [pc, #464]	; (80066cc <_scanf_i+0x1d8>)
 80064fc:	460c      	mov	r4, r1
 80064fe:	4683      	mov	fp, r0
 8006500:	4616      	mov	r6, r2
 8006502:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006506:	b087      	sub	sp, #28
 8006508:	ab03      	add	r3, sp, #12
 800650a:	68a7      	ldr	r7, [r4, #8]
 800650c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006510:	4b6f      	ldr	r3, [pc, #444]	; (80066d0 <_scanf_i+0x1dc>)
 8006512:	69a1      	ldr	r1, [r4, #24]
 8006514:	4a6f      	ldr	r2, [pc, #444]	; (80066d4 <_scanf_i+0x1e0>)
 8006516:	2903      	cmp	r1, #3
 8006518:	bf18      	it	ne
 800651a:	461a      	movne	r2, r3
 800651c:	1e7b      	subs	r3, r7, #1
 800651e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8006522:	bf84      	itt	hi
 8006524:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006528:	60a3      	strhi	r3, [r4, #8]
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	9200      	str	r2, [sp, #0]
 800652e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006532:	bf88      	it	hi
 8006534:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006538:	f104 091c 	add.w	r9, r4, #28
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	bf8c      	ite	hi
 8006540:	197f      	addhi	r7, r7, r5
 8006542:	2700      	movls	r7, #0
 8006544:	464b      	mov	r3, r9
 8006546:	f04f 0800 	mov.w	r8, #0
 800654a:	9301      	str	r3, [sp, #4]
 800654c:	6831      	ldr	r1, [r6, #0]
 800654e:	ab03      	add	r3, sp, #12
 8006550:	2202      	movs	r2, #2
 8006552:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006556:	7809      	ldrb	r1, [r1, #0]
 8006558:	f7f9 fe52 	bl	8000200 <memchr>
 800655c:	9b01      	ldr	r3, [sp, #4]
 800655e:	b328      	cbz	r0, 80065ac <_scanf_i+0xb8>
 8006560:	f1b8 0f01 	cmp.w	r8, #1
 8006564:	d156      	bne.n	8006614 <_scanf_i+0x120>
 8006566:	6862      	ldr	r2, [r4, #4]
 8006568:	b92a      	cbnz	r2, 8006576 <_scanf_i+0x82>
 800656a:	2208      	movs	r2, #8
 800656c:	6062      	str	r2, [r4, #4]
 800656e:	6822      	ldr	r2, [r4, #0]
 8006570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006574:	6022      	str	r2, [r4, #0]
 8006576:	6822      	ldr	r2, [r4, #0]
 8006578:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800657c:	6022      	str	r2, [r4, #0]
 800657e:	68a2      	ldr	r2, [r4, #8]
 8006580:	1e51      	subs	r1, r2, #1
 8006582:	60a1      	str	r1, [r4, #8]
 8006584:	b192      	cbz	r2, 80065ac <_scanf_i+0xb8>
 8006586:	6832      	ldr	r2, [r6, #0]
 8006588:	1c51      	adds	r1, r2, #1
 800658a:	6031      	str	r1, [r6, #0]
 800658c:	7812      	ldrb	r2, [r2, #0]
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	1c5d      	adds	r5, r3, #1
 8006592:	6873      	ldr	r3, [r6, #4]
 8006594:	3b01      	subs	r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	6073      	str	r3, [r6, #4]
 800659a:	dc06      	bgt.n	80065aa <_scanf_i+0xb6>
 800659c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80065a0:	4631      	mov	r1, r6
 80065a2:	4658      	mov	r0, fp
 80065a4:	4798      	blx	r3
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d176      	bne.n	8006698 <_scanf_i+0x1a4>
 80065aa:	462b      	mov	r3, r5
 80065ac:	f108 0801 	add.w	r8, r8, #1
 80065b0:	f1b8 0f03 	cmp.w	r8, #3
 80065b4:	d1c9      	bne.n	800654a <_scanf_i+0x56>
 80065b6:	6862      	ldr	r2, [r4, #4]
 80065b8:	b90a      	cbnz	r2, 80065be <_scanf_i+0xca>
 80065ba:	220a      	movs	r2, #10
 80065bc:	6062      	str	r2, [r4, #4]
 80065be:	6862      	ldr	r2, [r4, #4]
 80065c0:	4945      	ldr	r1, [pc, #276]	; (80066d8 <_scanf_i+0x1e4>)
 80065c2:	6960      	ldr	r0, [r4, #20]
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	1a89      	subs	r1, r1, r2
 80065c8:	f000 f888 	bl	80066dc <__sccl>
 80065cc:	9b01      	ldr	r3, [sp, #4]
 80065ce:	f04f 0800 	mov.w	r8, #0
 80065d2:	461d      	mov	r5, r3
 80065d4:	68a3      	ldr	r3, [r4, #8]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d038      	beq.n	800664c <_scanf_i+0x158>
 80065da:	6831      	ldr	r1, [r6, #0]
 80065dc:	6960      	ldr	r0, [r4, #20]
 80065de:	780a      	ldrb	r2, [r1, #0]
 80065e0:	5c80      	ldrb	r0, [r0, r2]
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d032      	beq.n	800664c <_scanf_i+0x158>
 80065e6:	2a30      	cmp	r2, #48	; 0x30
 80065e8:	6822      	ldr	r2, [r4, #0]
 80065ea:	d121      	bne.n	8006630 <_scanf_i+0x13c>
 80065ec:	0510      	lsls	r0, r2, #20
 80065ee:	d51f      	bpl.n	8006630 <_scanf_i+0x13c>
 80065f0:	f108 0801 	add.w	r8, r8, #1
 80065f4:	b117      	cbz	r7, 80065fc <_scanf_i+0x108>
 80065f6:	3301      	adds	r3, #1
 80065f8:	3f01      	subs	r7, #1
 80065fa:	60a3      	str	r3, [r4, #8]
 80065fc:	6873      	ldr	r3, [r6, #4]
 80065fe:	3b01      	subs	r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	6073      	str	r3, [r6, #4]
 8006604:	dd1b      	ble.n	800663e <_scanf_i+0x14a>
 8006606:	6833      	ldr	r3, [r6, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	6033      	str	r3, [r6, #0]
 800660c:	68a3      	ldr	r3, [r4, #8]
 800660e:	3b01      	subs	r3, #1
 8006610:	60a3      	str	r3, [r4, #8]
 8006612:	e7df      	b.n	80065d4 <_scanf_i+0xe0>
 8006614:	f1b8 0f02 	cmp.w	r8, #2
 8006618:	d1b1      	bne.n	800657e <_scanf_i+0x8a>
 800661a:	6822      	ldr	r2, [r4, #0]
 800661c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006620:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006624:	d1c2      	bne.n	80065ac <_scanf_i+0xb8>
 8006626:	2110      	movs	r1, #16
 8006628:	6061      	str	r1, [r4, #4]
 800662a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800662e:	e7a5      	b.n	800657c <_scanf_i+0x88>
 8006630:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006634:	6022      	str	r2, [r4, #0]
 8006636:	780b      	ldrb	r3, [r1, #0]
 8006638:	702b      	strb	r3, [r5, #0]
 800663a:	3501      	adds	r5, #1
 800663c:	e7de      	b.n	80065fc <_scanf_i+0x108>
 800663e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006642:	4631      	mov	r1, r6
 8006644:	4658      	mov	r0, fp
 8006646:	4798      	blx	r3
 8006648:	2800      	cmp	r0, #0
 800664a:	d0df      	beq.n	800660c <_scanf_i+0x118>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	05d9      	lsls	r1, r3, #23
 8006650:	d50c      	bpl.n	800666c <_scanf_i+0x178>
 8006652:	454d      	cmp	r5, r9
 8006654:	d908      	bls.n	8006668 <_scanf_i+0x174>
 8006656:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800665a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800665e:	4632      	mov	r2, r6
 8006660:	4658      	mov	r0, fp
 8006662:	4798      	blx	r3
 8006664:	1e6f      	subs	r7, r5, #1
 8006666:	463d      	mov	r5, r7
 8006668:	454d      	cmp	r5, r9
 800666a:	d02c      	beq.n	80066c6 <_scanf_i+0x1d2>
 800666c:	6822      	ldr	r2, [r4, #0]
 800666e:	f012 0210 	ands.w	r2, r2, #16
 8006672:	d11e      	bne.n	80066b2 <_scanf_i+0x1be>
 8006674:	702a      	strb	r2, [r5, #0]
 8006676:	6863      	ldr	r3, [r4, #4]
 8006678:	9e00      	ldr	r6, [sp, #0]
 800667a:	4649      	mov	r1, r9
 800667c:	4658      	mov	r0, fp
 800667e:	47b0      	blx	r6
 8006680:	6822      	ldr	r2, [r4, #0]
 8006682:	f8da 3000 	ldr.w	r3, [sl]
 8006686:	f012 0f20 	tst.w	r2, #32
 800668a:	d008      	beq.n	800669e <_scanf_i+0x1aa>
 800668c:	1d1a      	adds	r2, r3, #4
 800668e:	f8ca 2000 	str.w	r2, [sl]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6018      	str	r0, [r3, #0]
 8006696:	e009      	b.n	80066ac <_scanf_i+0x1b8>
 8006698:	f04f 0800 	mov.w	r8, #0
 800669c:	e7d6      	b.n	800664c <_scanf_i+0x158>
 800669e:	07d2      	lsls	r2, r2, #31
 80066a0:	d5f4      	bpl.n	800668c <_scanf_i+0x198>
 80066a2:	1d1a      	adds	r2, r3, #4
 80066a4:	f8ca 2000 	str.w	r2, [sl]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	8018      	strh	r0, [r3, #0]
 80066ac:	68e3      	ldr	r3, [r4, #12]
 80066ae:	3301      	adds	r3, #1
 80066b0:	60e3      	str	r3, [r4, #12]
 80066b2:	eba5 0509 	sub.w	r5, r5, r9
 80066b6:	44a8      	add	r8, r5
 80066b8:	6925      	ldr	r5, [r4, #16]
 80066ba:	4445      	add	r5, r8
 80066bc:	6125      	str	r5, [r4, #16]
 80066be:	2000      	movs	r0, #0
 80066c0:	b007      	add	sp, #28
 80066c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c6:	2001      	movs	r0, #1
 80066c8:	e7fa      	b.n	80066c0 <_scanf_i+0x1cc>
 80066ca:	bf00      	nop
 80066cc:	08006bbc 	.word	0x08006bbc
 80066d0:	08006031 	.word	0x08006031
 80066d4:	0800683d 	.word	0x0800683d
 80066d8:	08006d3a 	.word	0x08006d3a

080066dc <__sccl>:
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	780b      	ldrb	r3, [r1, #0]
 80066e0:	2b5e      	cmp	r3, #94	; 0x5e
 80066e2:	bf13      	iteet	ne
 80066e4:	1c4a      	addne	r2, r1, #1
 80066e6:	1c8a      	addeq	r2, r1, #2
 80066e8:	784b      	ldrbeq	r3, [r1, #1]
 80066ea:	2100      	movne	r1, #0
 80066ec:	bf08      	it	eq
 80066ee:	2101      	moveq	r1, #1
 80066f0:	1e44      	subs	r4, r0, #1
 80066f2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80066f6:	f804 1f01 	strb.w	r1, [r4, #1]!
 80066fa:	42a5      	cmp	r5, r4
 80066fc:	d1fb      	bne.n	80066f6 <__sccl+0x1a>
 80066fe:	b913      	cbnz	r3, 8006706 <__sccl+0x2a>
 8006700:	3a01      	subs	r2, #1
 8006702:	4610      	mov	r0, r2
 8006704:	bd70      	pop	{r4, r5, r6, pc}
 8006706:	f081 0401 	eor.w	r4, r1, #1
 800670a:	54c4      	strb	r4, [r0, r3]
 800670c:	4611      	mov	r1, r2
 800670e:	780d      	ldrb	r5, [r1, #0]
 8006710:	2d2d      	cmp	r5, #45	; 0x2d
 8006712:	f101 0201 	add.w	r2, r1, #1
 8006716:	d006      	beq.n	8006726 <__sccl+0x4a>
 8006718:	2d5d      	cmp	r5, #93	; 0x5d
 800671a:	d0f2      	beq.n	8006702 <__sccl+0x26>
 800671c:	b90d      	cbnz	r5, 8006722 <__sccl+0x46>
 800671e:	460a      	mov	r2, r1
 8006720:	e7ef      	b.n	8006702 <__sccl+0x26>
 8006722:	462b      	mov	r3, r5
 8006724:	e7f1      	b.n	800670a <__sccl+0x2e>
 8006726:	784e      	ldrb	r6, [r1, #1]
 8006728:	2e5d      	cmp	r6, #93	; 0x5d
 800672a:	d0fa      	beq.n	8006722 <__sccl+0x46>
 800672c:	42b3      	cmp	r3, r6
 800672e:	dcf8      	bgt.n	8006722 <__sccl+0x46>
 8006730:	3102      	adds	r1, #2
 8006732:	3301      	adds	r3, #1
 8006734:	429e      	cmp	r6, r3
 8006736:	54c4      	strb	r4, [r0, r3]
 8006738:	dcfb      	bgt.n	8006732 <__sccl+0x56>
 800673a:	e7e8      	b.n	800670e <__sccl+0x32>

0800673c <_strtol_l.isra.0>:
 800673c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006740:	4680      	mov	r8, r0
 8006742:	4689      	mov	r9, r1
 8006744:	4692      	mov	sl, r2
 8006746:	461f      	mov	r7, r3
 8006748:	468b      	mov	fp, r1
 800674a:	465d      	mov	r5, fp
 800674c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800674e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006752:	f7ff fc97 	bl	8006084 <__locale_ctype_ptr_l>
 8006756:	4420      	add	r0, r4
 8006758:	7846      	ldrb	r6, [r0, #1]
 800675a:	f016 0608 	ands.w	r6, r6, #8
 800675e:	d10b      	bne.n	8006778 <_strtol_l.isra.0+0x3c>
 8006760:	2c2d      	cmp	r4, #45	; 0x2d
 8006762:	d10b      	bne.n	800677c <_strtol_l.isra.0+0x40>
 8006764:	782c      	ldrb	r4, [r5, #0]
 8006766:	2601      	movs	r6, #1
 8006768:	f10b 0502 	add.w	r5, fp, #2
 800676c:	b167      	cbz	r7, 8006788 <_strtol_l.isra.0+0x4c>
 800676e:	2f10      	cmp	r7, #16
 8006770:	d114      	bne.n	800679c <_strtol_l.isra.0+0x60>
 8006772:	2c30      	cmp	r4, #48	; 0x30
 8006774:	d00a      	beq.n	800678c <_strtol_l.isra.0+0x50>
 8006776:	e011      	b.n	800679c <_strtol_l.isra.0+0x60>
 8006778:	46ab      	mov	fp, r5
 800677a:	e7e6      	b.n	800674a <_strtol_l.isra.0+0xe>
 800677c:	2c2b      	cmp	r4, #43	; 0x2b
 800677e:	bf04      	itt	eq
 8006780:	782c      	ldrbeq	r4, [r5, #0]
 8006782:	f10b 0502 	addeq.w	r5, fp, #2
 8006786:	e7f1      	b.n	800676c <_strtol_l.isra.0+0x30>
 8006788:	2c30      	cmp	r4, #48	; 0x30
 800678a:	d127      	bne.n	80067dc <_strtol_l.isra.0+0xa0>
 800678c:	782b      	ldrb	r3, [r5, #0]
 800678e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006792:	2b58      	cmp	r3, #88	; 0x58
 8006794:	d14b      	bne.n	800682e <_strtol_l.isra.0+0xf2>
 8006796:	786c      	ldrb	r4, [r5, #1]
 8006798:	2710      	movs	r7, #16
 800679a:	3502      	adds	r5, #2
 800679c:	2e00      	cmp	r6, #0
 800679e:	bf0c      	ite	eq
 80067a0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80067a4:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80067a8:	2200      	movs	r2, #0
 80067aa:	fbb1 fef7 	udiv	lr, r1, r7
 80067ae:	4610      	mov	r0, r2
 80067b0:	fb07 1c1e 	mls	ip, r7, lr, r1
 80067b4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80067b8:	2b09      	cmp	r3, #9
 80067ba:	d811      	bhi.n	80067e0 <_strtol_l.isra.0+0xa4>
 80067bc:	461c      	mov	r4, r3
 80067be:	42a7      	cmp	r7, r4
 80067c0:	dd1d      	ble.n	80067fe <_strtol_l.isra.0+0xc2>
 80067c2:	1c53      	adds	r3, r2, #1
 80067c4:	d007      	beq.n	80067d6 <_strtol_l.isra.0+0x9a>
 80067c6:	4586      	cmp	lr, r0
 80067c8:	d316      	bcc.n	80067f8 <_strtol_l.isra.0+0xbc>
 80067ca:	d101      	bne.n	80067d0 <_strtol_l.isra.0+0x94>
 80067cc:	45a4      	cmp	ip, r4
 80067ce:	db13      	blt.n	80067f8 <_strtol_l.isra.0+0xbc>
 80067d0:	fb00 4007 	mla	r0, r0, r7, r4
 80067d4:	2201      	movs	r2, #1
 80067d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067da:	e7eb      	b.n	80067b4 <_strtol_l.isra.0+0x78>
 80067dc:	270a      	movs	r7, #10
 80067de:	e7dd      	b.n	800679c <_strtol_l.isra.0+0x60>
 80067e0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80067e4:	2b19      	cmp	r3, #25
 80067e6:	d801      	bhi.n	80067ec <_strtol_l.isra.0+0xb0>
 80067e8:	3c37      	subs	r4, #55	; 0x37
 80067ea:	e7e8      	b.n	80067be <_strtol_l.isra.0+0x82>
 80067ec:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80067f0:	2b19      	cmp	r3, #25
 80067f2:	d804      	bhi.n	80067fe <_strtol_l.isra.0+0xc2>
 80067f4:	3c57      	subs	r4, #87	; 0x57
 80067f6:	e7e2      	b.n	80067be <_strtol_l.isra.0+0x82>
 80067f8:	f04f 32ff 	mov.w	r2, #4294967295
 80067fc:	e7eb      	b.n	80067d6 <_strtol_l.isra.0+0x9a>
 80067fe:	1c53      	adds	r3, r2, #1
 8006800:	d108      	bne.n	8006814 <_strtol_l.isra.0+0xd8>
 8006802:	2322      	movs	r3, #34	; 0x22
 8006804:	f8c8 3000 	str.w	r3, [r8]
 8006808:	4608      	mov	r0, r1
 800680a:	f1ba 0f00 	cmp.w	sl, #0
 800680e:	d107      	bne.n	8006820 <_strtol_l.isra.0+0xe4>
 8006810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006814:	b106      	cbz	r6, 8006818 <_strtol_l.isra.0+0xdc>
 8006816:	4240      	negs	r0, r0
 8006818:	f1ba 0f00 	cmp.w	sl, #0
 800681c:	d00c      	beq.n	8006838 <_strtol_l.isra.0+0xfc>
 800681e:	b122      	cbz	r2, 800682a <_strtol_l.isra.0+0xee>
 8006820:	3d01      	subs	r5, #1
 8006822:	f8ca 5000 	str.w	r5, [sl]
 8006826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800682a:	464d      	mov	r5, r9
 800682c:	e7f9      	b.n	8006822 <_strtol_l.isra.0+0xe6>
 800682e:	2430      	movs	r4, #48	; 0x30
 8006830:	2f00      	cmp	r7, #0
 8006832:	d1b3      	bne.n	800679c <_strtol_l.isra.0+0x60>
 8006834:	2708      	movs	r7, #8
 8006836:	e7b1      	b.n	800679c <_strtol_l.isra.0+0x60>
 8006838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800683c <_strtol_r>:
 800683c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800683e:	4c06      	ldr	r4, [pc, #24]	; (8006858 <_strtol_r+0x1c>)
 8006840:	4d06      	ldr	r5, [pc, #24]	; (800685c <_strtol_r+0x20>)
 8006842:	6824      	ldr	r4, [r4, #0]
 8006844:	6a24      	ldr	r4, [r4, #32]
 8006846:	2c00      	cmp	r4, #0
 8006848:	bf08      	it	eq
 800684a:	462c      	moveq	r4, r5
 800684c:	9400      	str	r4, [sp, #0]
 800684e:	f7ff ff75 	bl	800673c <_strtol_l.isra.0>
 8006852:	b003      	add	sp, #12
 8006854:	bd30      	pop	{r4, r5, pc}
 8006856:	bf00      	nop
 8006858:	20000050 	.word	0x20000050
 800685c:	200000b8 	.word	0x200000b8

08006860 <__submore>:
 8006860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006864:	460c      	mov	r4, r1
 8006866:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800686c:	4299      	cmp	r1, r3
 800686e:	d11e      	bne.n	80068ae <__submore+0x4e>
 8006870:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006874:	f7ff faaa 	bl	8005dcc <_malloc_r>
 8006878:	b918      	cbnz	r0, 8006882 <__submore+0x22>
 800687a:	f04f 30ff 	mov.w	r0, #4294967295
 800687e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006886:	63a3      	str	r3, [r4, #56]	; 0x38
 8006888:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800688c:	6360      	str	r0, [r4, #52]	; 0x34
 800688e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006892:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006896:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800689a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800689e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80068a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80068a6:	6020      	str	r0, [r4, #0]
 80068a8:	2000      	movs	r0, #0
 80068aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ae:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80068b0:	0077      	lsls	r7, r6, #1
 80068b2:	463a      	mov	r2, r7
 80068b4:	f000 f827 	bl	8006906 <_realloc_r>
 80068b8:	4605      	mov	r5, r0
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d0dd      	beq.n	800687a <__submore+0x1a>
 80068be:	eb00 0806 	add.w	r8, r0, r6
 80068c2:	4601      	mov	r1, r0
 80068c4:	4632      	mov	r2, r6
 80068c6:	4640      	mov	r0, r8
 80068c8:	f000 f812 	bl	80068f0 <memcpy>
 80068cc:	f8c4 8000 	str.w	r8, [r4]
 80068d0:	6365      	str	r5, [r4, #52]	; 0x34
 80068d2:	63a7      	str	r7, [r4, #56]	; 0x38
 80068d4:	e7e8      	b.n	80068a8 <__submore+0x48>

080068d6 <__ascii_wctomb>:
 80068d6:	b149      	cbz	r1, 80068ec <__ascii_wctomb+0x16>
 80068d8:	2aff      	cmp	r2, #255	; 0xff
 80068da:	bf85      	ittet	hi
 80068dc:	238a      	movhi	r3, #138	; 0x8a
 80068de:	6003      	strhi	r3, [r0, #0]
 80068e0:	700a      	strbls	r2, [r1, #0]
 80068e2:	f04f 30ff 	movhi.w	r0, #4294967295
 80068e6:	bf98      	it	ls
 80068e8:	2001      	movls	r0, #1
 80068ea:	4770      	bx	lr
 80068ec:	4608      	mov	r0, r1
 80068ee:	4770      	bx	lr

080068f0 <memcpy>:
 80068f0:	b510      	push	{r4, lr}
 80068f2:	1e43      	subs	r3, r0, #1
 80068f4:	440a      	add	r2, r1
 80068f6:	4291      	cmp	r1, r2
 80068f8:	d100      	bne.n	80068fc <memcpy+0xc>
 80068fa:	bd10      	pop	{r4, pc}
 80068fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006900:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006904:	e7f7      	b.n	80068f6 <memcpy+0x6>

08006906 <_realloc_r>:
 8006906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006908:	4607      	mov	r7, r0
 800690a:	4614      	mov	r4, r2
 800690c:	460e      	mov	r6, r1
 800690e:	b921      	cbnz	r1, 800691a <_realloc_r+0x14>
 8006910:	4611      	mov	r1, r2
 8006912:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006916:	f7ff ba59 	b.w	8005dcc <_malloc_r>
 800691a:	b922      	cbnz	r2, 8006926 <_realloc_r+0x20>
 800691c:	f7ff fa08 	bl	8005d30 <_free_r>
 8006920:	4625      	mov	r5, r4
 8006922:	4628      	mov	r0, r5
 8006924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006926:	f000 f814 	bl	8006952 <_malloc_usable_size_r>
 800692a:	4284      	cmp	r4, r0
 800692c:	d90f      	bls.n	800694e <_realloc_r+0x48>
 800692e:	4621      	mov	r1, r4
 8006930:	4638      	mov	r0, r7
 8006932:	f7ff fa4b 	bl	8005dcc <_malloc_r>
 8006936:	4605      	mov	r5, r0
 8006938:	2800      	cmp	r0, #0
 800693a:	d0f2      	beq.n	8006922 <_realloc_r+0x1c>
 800693c:	4631      	mov	r1, r6
 800693e:	4622      	mov	r2, r4
 8006940:	f7ff ffd6 	bl	80068f0 <memcpy>
 8006944:	4631      	mov	r1, r6
 8006946:	4638      	mov	r0, r7
 8006948:	f7ff f9f2 	bl	8005d30 <_free_r>
 800694c:	e7e9      	b.n	8006922 <_realloc_r+0x1c>
 800694e:	4635      	mov	r5, r6
 8006950:	e7e7      	b.n	8006922 <_realloc_r+0x1c>

08006952 <_malloc_usable_size_r>:
 8006952:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006956:	2800      	cmp	r0, #0
 8006958:	f1a0 0004 	sub.w	r0, r0, #4
 800695c:	bfbc      	itt	lt
 800695e:	580b      	ldrlt	r3, [r1, r0]
 8006960:	18c0      	addlt	r0, r0, r3
 8006962:	4770      	bx	lr

08006964 <sqrt>:
 8006964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006968:	ed2d 8b02 	vpush	{d8}
 800696c:	b08b      	sub	sp, #44	; 0x2c
 800696e:	ec55 4b10 	vmov	r4, r5, d0
 8006972:	f000 f851 	bl	8006a18 <__ieee754_sqrt>
 8006976:	4b26      	ldr	r3, [pc, #152]	; (8006a10 <sqrt+0xac>)
 8006978:	eeb0 8a40 	vmov.f32	s16, s0
 800697c:	eef0 8a60 	vmov.f32	s17, s1
 8006980:	f993 6000 	ldrsb.w	r6, [r3]
 8006984:	1c73      	adds	r3, r6, #1
 8006986:	d02a      	beq.n	80069de <sqrt+0x7a>
 8006988:	4622      	mov	r2, r4
 800698a:	462b      	mov	r3, r5
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	f7fa f8d8 	bl	8000b44 <__aeabi_dcmpun>
 8006994:	4607      	mov	r7, r0
 8006996:	bb10      	cbnz	r0, 80069de <sqrt+0x7a>
 8006998:	f04f 0800 	mov.w	r8, #0
 800699c:	f04f 0900 	mov.w	r9, #0
 80069a0:	4642      	mov	r2, r8
 80069a2:	464b      	mov	r3, r9
 80069a4:	4620      	mov	r0, r4
 80069a6:	4629      	mov	r1, r5
 80069a8:	f7fa f8a4 	bl	8000af4 <__aeabi_dcmplt>
 80069ac:	b1b8      	cbz	r0, 80069de <sqrt+0x7a>
 80069ae:	2301      	movs	r3, #1
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	4b18      	ldr	r3, [pc, #96]	; (8006a14 <sqrt+0xb0>)
 80069b4:	9301      	str	r3, [sp, #4]
 80069b6:	9708      	str	r7, [sp, #32]
 80069b8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80069bc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80069c0:	b9b6      	cbnz	r6, 80069f0 <sqrt+0x8c>
 80069c2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80069c6:	4668      	mov	r0, sp
 80069c8:	f000 f8d6 	bl	8006b78 <matherr>
 80069cc:	b1d0      	cbz	r0, 8006a04 <sqrt+0xa0>
 80069ce:	9b08      	ldr	r3, [sp, #32]
 80069d0:	b11b      	cbz	r3, 80069da <sqrt+0x76>
 80069d2:	f000 f8d3 	bl	8006b7c <__errno>
 80069d6:	9b08      	ldr	r3, [sp, #32]
 80069d8:	6003      	str	r3, [r0, #0]
 80069da:	ed9d 8b06 	vldr	d8, [sp, #24]
 80069de:	eeb0 0a48 	vmov.f32	s0, s16
 80069e2:	eef0 0a68 	vmov.f32	s1, s17
 80069e6:	b00b      	add	sp, #44	; 0x2c
 80069e8:	ecbd 8b02 	vpop	{d8}
 80069ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069f0:	4642      	mov	r2, r8
 80069f2:	464b      	mov	r3, r9
 80069f4:	4640      	mov	r0, r8
 80069f6:	4649      	mov	r1, r9
 80069f8:	f7f9 ff34 	bl	8000864 <__aeabi_ddiv>
 80069fc:	2e02      	cmp	r6, #2
 80069fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a02:	d1e0      	bne.n	80069c6 <sqrt+0x62>
 8006a04:	f000 f8ba 	bl	8006b7c <__errno>
 8006a08:	2321      	movs	r3, #33	; 0x21
 8006a0a:	6003      	str	r3, [r0, #0]
 8006a0c:	e7df      	b.n	80069ce <sqrt+0x6a>
 8006a0e:	bf00      	nop
 8006a10:	20000224 	.word	0x20000224
 8006a14:	08006ea8 	.word	0x08006ea8

08006a18 <__ieee754_sqrt>:
 8006a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a1c:	ec55 4b10 	vmov	r4, r5, d0
 8006a20:	4e54      	ldr	r6, [pc, #336]	; (8006b74 <__ieee754_sqrt+0x15c>)
 8006a22:	43ae      	bics	r6, r5
 8006a24:	ee10 0a10 	vmov	r0, s0
 8006a28:	462b      	mov	r3, r5
 8006a2a:	462a      	mov	r2, r5
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	d113      	bne.n	8006a58 <__ieee754_sqrt+0x40>
 8006a30:	ee10 2a10 	vmov	r2, s0
 8006a34:	462b      	mov	r3, r5
 8006a36:	ee10 0a10 	vmov	r0, s0
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	f7f9 fde8 	bl	8000610 <__aeabi_dmul>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	4620      	mov	r0, r4
 8006a46:	4629      	mov	r1, r5
 8006a48:	f7f9 fc30 	bl	80002ac <__adddf3>
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	460d      	mov	r5, r1
 8006a50:	ec45 4b10 	vmov	d0, r4, r5
 8006a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a58:	2d00      	cmp	r5, #0
 8006a5a:	dc10      	bgt.n	8006a7e <__ieee754_sqrt+0x66>
 8006a5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006a60:	4330      	orrs	r0, r6
 8006a62:	d0f5      	beq.n	8006a50 <__ieee754_sqrt+0x38>
 8006a64:	b15d      	cbz	r5, 8006a7e <__ieee754_sqrt+0x66>
 8006a66:	ee10 2a10 	vmov	r2, s0
 8006a6a:	462b      	mov	r3, r5
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	4629      	mov	r1, r5
 8006a70:	f7f9 fc1a 	bl	80002a8 <__aeabi_dsub>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	f7f9 fef4 	bl	8000864 <__aeabi_ddiv>
 8006a7c:	e7e6      	b.n	8006a4c <__ieee754_sqrt+0x34>
 8006a7e:	151b      	asrs	r3, r3, #20
 8006a80:	d10c      	bne.n	8006a9c <__ieee754_sqrt+0x84>
 8006a82:	2a00      	cmp	r2, #0
 8006a84:	d06d      	beq.n	8006b62 <__ieee754_sqrt+0x14a>
 8006a86:	2000      	movs	r0, #0
 8006a88:	02d6      	lsls	r6, r2, #11
 8006a8a:	d56e      	bpl.n	8006b6a <__ieee754_sqrt+0x152>
 8006a8c:	1e44      	subs	r4, r0, #1
 8006a8e:	1b1b      	subs	r3, r3, r4
 8006a90:	f1c0 0420 	rsb	r4, r0, #32
 8006a94:	fa21 f404 	lsr.w	r4, r1, r4
 8006a98:	4322      	orrs	r2, r4
 8006a9a:	4081      	lsls	r1, r0
 8006a9c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006aa0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006aa4:	07dd      	lsls	r5, r3, #31
 8006aa6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006aaa:	bf42      	ittt	mi
 8006aac:	0052      	lslmi	r2, r2, #1
 8006aae:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8006ab2:	0049      	lslmi	r1, r1, #1
 8006ab4:	1058      	asrs	r0, r3, #1
 8006ab6:	2500      	movs	r5, #0
 8006ab8:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8006abc:	441a      	add	r2, r3
 8006abe:	0049      	lsls	r1, r1, #1
 8006ac0:	2316      	movs	r3, #22
 8006ac2:	462c      	mov	r4, r5
 8006ac4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006ac8:	19a7      	adds	r7, r4, r6
 8006aca:	4297      	cmp	r7, r2
 8006acc:	bfde      	ittt	le
 8006ace:	1bd2      	suble	r2, r2, r7
 8006ad0:	19bc      	addle	r4, r7, r6
 8006ad2:	19ad      	addle	r5, r5, r6
 8006ad4:	0052      	lsls	r2, r2, #1
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006adc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006ae0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006ae4:	d1f0      	bne.n	8006ac8 <__ieee754_sqrt+0xb0>
 8006ae6:	f04f 0e20 	mov.w	lr, #32
 8006aea:	469c      	mov	ip, r3
 8006aec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006af0:	42a2      	cmp	r2, r4
 8006af2:	eb06 070c 	add.w	r7, r6, ip
 8006af6:	dc02      	bgt.n	8006afe <__ieee754_sqrt+0xe6>
 8006af8:	d112      	bne.n	8006b20 <__ieee754_sqrt+0x108>
 8006afa:	428f      	cmp	r7, r1
 8006afc:	d810      	bhi.n	8006b20 <__ieee754_sqrt+0x108>
 8006afe:	2f00      	cmp	r7, #0
 8006b00:	eb07 0c06 	add.w	ip, r7, r6
 8006b04:	da34      	bge.n	8006b70 <__ieee754_sqrt+0x158>
 8006b06:	f1bc 0f00 	cmp.w	ip, #0
 8006b0a:	db31      	blt.n	8006b70 <__ieee754_sqrt+0x158>
 8006b0c:	f104 0801 	add.w	r8, r4, #1
 8006b10:	1b12      	subs	r2, r2, r4
 8006b12:	428f      	cmp	r7, r1
 8006b14:	bf88      	it	hi
 8006b16:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006b1a:	1bc9      	subs	r1, r1, r7
 8006b1c:	4433      	add	r3, r6
 8006b1e:	4644      	mov	r4, r8
 8006b20:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8006b24:	f1be 0e01 	subs.w	lr, lr, #1
 8006b28:	443a      	add	r2, r7
 8006b2a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006b2e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006b32:	d1dd      	bne.n	8006af0 <__ieee754_sqrt+0xd8>
 8006b34:	430a      	orrs	r2, r1
 8006b36:	d006      	beq.n	8006b46 <__ieee754_sqrt+0x12e>
 8006b38:	1c5c      	adds	r4, r3, #1
 8006b3a:	bf13      	iteet	ne
 8006b3c:	3301      	addne	r3, #1
 8006b3e:	3501      	addeq	r5, #1
 8006b40:	4673      	moveq	r3, lr
 8006b42:	f023 0301 	bicne.w	r3, r3, #1
 8006b46:	106a      	asrs	r2, r5, #1
 8006b48:	085b      	lsrs	r3, r3, #1
 8006b4a:	07e9      	lsls	r1, r5, #31
 8006b4c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006b50:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006b54:	bf48      	it	mi
 8006b56:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006b5a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006b5e:	461c      	mov	r4, r3
 8006b60:	e776      	b.n	8006a50 <__ieee754_sqrt+0x38>
 8006b62:	0aca      	lsrs	r2, r1, #11
 8006b64:	3b15      	subs	r3, #21
 8006b66:	0549      	lsls	r1, r1, #21
 8006b68:	e78b      	b.n	8006a82 <__ieee754_sqrt+0x6a>
 8006b6a:	0052      	lsls	r2, r2, #1
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	e78b      	b.n	8006a88 <__ieee754_sqrt+0x70>
 8006b70:	46a0      	mov	r8, r4
 8006b72:	e7cd      	b.n	8006b10 <__ieee754_sqrt+0xf8>
 8006b74:	7ff00000 	.word	0x7ff00000

08006b78 <matherr>:
 8006b78:	2000      	movs	r0, #0
 8006b7a:	4770      	bx	lr

08006b7c <__errno>:
 8006b7c:	4b01      	ldr	r3, [pc, #4]	; (8006b84 <__errno+0x8>)
 8006b7e:	6818      	ldr	r0, [r3, #0]
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000050 	.word	0x20000050

08006b88 <_sbrk>:
 8006b88:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <_sbrk+0x14>)
 8006b8a:	6819      	ldr	r1, [r3, #0]
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	b909      	cbnz	r1, 8006b94 <_sbrk+0xc>
 8006b90:	4903      	ldr	r1, [pc, #12]	; (8006ba0 <_sbrk+0x18>)
 8006b92:	6019      	str	r1, [r3, #0]
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	4402      	add	r2, r0
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	4770      	bx	lr
 8006b9c:	20000274 	.word	0x20000274
 8006ba0:	200007e8 	.word	0x200007e8

08006ba4 <_init>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	bf00      	nop
 8006ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006baa:	bc08      	pop	{r3}
 8006bac:	469e      	mov	lr, r3
 8006bae:	4770      	bx	lr

08006bb0 <_fini>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	bf00      	nop
 8006bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb6:	bc08      	pop	{r3}
 8006bb8:	469e      	mov	lr, r3
 8006bba:	4770      	bx	lr
