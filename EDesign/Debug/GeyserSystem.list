
F:\EDesign\V5.7\GeyserSystem\Debug\GeyserSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08007a34  08007a34  00017a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007e18  08007e18  00017e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007e1c  08007e1c  00017e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000228  20000000  08007e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020228  2**0
                  CONTENTS
  7 .bss          00000614  20000228  20000228  00020228  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2000083c  2000083c  00020228  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028881  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000040b0  00000000  00000000  00048ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001069a  00000000  00000000  0004cb89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000013d0  00000000  00000000  0005d228  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000012f0  00000000  00000000  0005e5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00020f88  00000000  00000000  0005f8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000119de  00000000  00000000  00080870  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000b2e95  00000000  00000000  0009224e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  001450e3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000044bc  00000000  00000000  00145160  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000df  00000000  00000000  0014961c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a1c 	.word	0x08007a1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08007a1c 	.word	0x08007a1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2uiz>:
 8000b70:	004a      	lsls	r2, r1, #1
 8000b72:	d211      	bcs.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d211      	bcs.n	8000b9e <__aeabi_d2uiz+0x2e>
 8000b7a:	d50d      	bpl.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d40e      	bmi.n	8000ba4 <__aeabi_d2uiz+0x34>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_d2uiz+0x3a>
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0000 	mov.w	r0, #0
 8000bae:	4770      	bx	lr

08000bb0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b510      	push	{r4, lr}
 8000bb2:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <HAL_InitTick+0x24>)
 8000bb6:	6818      	ldr	r0, [r3, #0]
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <HAL_InitTick+0x28>)
 8000bba:	fba3 3000 	umull	r3, r0, r3, r0
 8000bbe:	0980      	lsrs	r0, r0, #6
 8000bc0:	f000 fcf6 	bl	80015b0 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4621      	mov	r1, r4
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 fcb2 	bl	8001534 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	bd10      	pop	{r4, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	10624dd3 	.word	0x10624dd3

08000bdc <HAL_Init>:
{
 8000bdc:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bde:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <HAL_Init+0x20>)
 8000be0:	6813      	ldr	r3, [r2, #0]
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 fc91 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff ffde 	bl	8000bb0 <HAL_InitTick>
  HAL_MspInit();
 8000bf4:	f003 fc80 	bl	80044f8 <HAL_MspInit>
}
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	bd08      	pop	{r3, pc}
 8000bfc:	40022000 	.word	0x40022000

08000c00 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000c00:	4a02      	ldr	r2, [pc, #8]	; (8000c0c <HAL_IncTick+0xc>)
 8000c02:	6813      	ldr	r3, [r2, #0]
 8000c04:	3301      	adds	r3, #1
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000278 	.word	0x20000278

08000c10 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000c10:	4b01      	ldr	r3, [pc, #4]	; (8000c18 <HAL_GetTick+0x8>)
 8000c12:	6818      	ldr	r0, [r3, #0]
}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000278 	.word	0x20000278

08000c1c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000c1e:	6802      	ldr	r2, [r0, #0]
 8000c20:	6893      	ldr	r3, [r2, #8]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d011      	beq.n	8000c4e <ADC_Disable+0x32>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d037      	beq.n	8000ca0 <ADC_Disable+0x84>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000c30:	6893      	ldr	r3, [r2, #8]
 8000c32:	f003 030d 	and.w	r3, r3, #13
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d011      	beq.n	8000c5e <ADC_Disable+0x42>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c3a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000c3c:	f043 0310 	orr.w	r3, r3, #16
 8000c40:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c42:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000c4e:	6813      	ldr	r3, [r2, #0]
 8000c50:	f013 0f01 	tst.w	r3, #1
 8000c54:	d101      	bne.n	8000c5a <ADC_Disable+0x3e>
 8000c56:	2300      	movs	r3, #0
 8000c58:	e7e8      	b.n	8000c2c <ADC_Disable+0x10>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e7e6      	b.n	8000c2c <ADC_Disable+0x10>
 8000c5e:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8000c60:	6893      	ldr	r3, [r2, #8]
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	6093      	str	r3, [r2, #8]
 8000c68:	6803      	ldr	r3, [r0, #0]
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	601a      	str	r2, [r3, #0]
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000c6e:	f7ff ffcf 	bl	8000c10 <HAL_GetTick>
 8000c72:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f013 0f01 	tst.w	r3, #1
 8000c7c:	d00e      	beq.n	8000c9c <ADC_Disable+0x80>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000c7e:	f7ff ffc7 	bl	8000c10 <HAL_GetTick>
 8000c82:	1b40      	subs	r0, r0, r5
 8000c84:	2802      	cmp	r0, #2
 8000c86:	d9f5      	bls.n	8000c74 <ADC_Disable+0x58>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c8a:	f043 0310 	orr.w	r3, r3, #16
 8000c8e:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 8000c98:	2001      	movs	r0, #1
 8000c9a:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	bd38      	pop	{r3, r4, r5, pc}
 8000ca0:	2000      	movs	r0, #0
}
 8000ca2:	bd38      	pop	{r3, r4, r5, pc}

08000ca4 <ADC_Enable>:
{
 8000ca4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ca6:	6802      	ldr	r2, [r0, #0]
 8000ca8:	6893      	ldr	r3, [r2, #8]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d010      	beq.n	8000cd4 <ADC_Enable+0x30>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d133      	bne.n	8000d20 <ADC_Enable+0x7c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000cb8:	6891      	ldr	r1, [r2, #8]
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <ADC_Enable+0x80>)
 8000cbc:	4219      	tst	r1, r3
 8000cbe:	d011      	beq.n	8000ce4 <ADC_Enable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cc0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000cc2:	f043 0310 	orr.w	r3, r3, #16
 8000cc6:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000cd4:	6813      	ldr	r3, [r2, #0]
 8000cd6:	f013 0f01 	tst.w	r3, #1
 8000cda:	d101      	bne.n	8000ce0 <ADC_Enable+0x3c>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e7e9      	b.n	8000cb4 <ADC_Enable+0x10>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e7e7      	b.n	8000cb4 <ADC_Enable+0x10>
 8000ce4:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8000ce6:	6893      	ldr	r3, [r2, #8]
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8000cee:	f7ff ff8f 	bl	8000c10 <HAL_GetTick>
 8000cf2:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000cf4:	6823      	ldr	r3, [r4, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f013 0f01 	tst.w	r3, #1
 8000cfc:	d10e      	bne.n	8000d1c <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000cfe:	f7ff ff87 	bl	8000c10 <HAL_GetTick>
 8000d02:	1b40      	subs	r0, r0, r5
 8000d04:	2802      	cmp	r0, #2
 8000d06:	d9f5      	bls.n	8000cf4 <ADC_Enable+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000d18:	2001      	movs	r0, #1
 8000d1a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	bd38      	pop	{r3, r4, r5, pc}
 8000d20:	2000      	movs	r0, #0
}
 8000d22:	bd38      	pop	{r3, r4, r5, pc}
 8000d24:	8000003f 	.word	0x8000003f

08000d28 <HAL_ADC_Init>:
{
 8000d28:	b530      	push	{r4, r5, lr}
 8000d2a:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000d30:	2800      	cmp	r0, #0
 8000d32:	f000 80fb 	beq.w	8000f2c <HAL_ADC_Init+0x204>
 8000d36:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d38:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000d3a:	f013 0f10 	tst.w	r3, #16
 8000d3e:	d151      	bne.n	8000de4 <HAL_ADC_Init+0xbc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d40:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000d42:	b1ab      	cbz	r3, 8000d70 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d44:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000d4e:	d003      	beq.n	8000d58 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d50:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d52:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8000d56:	d046      	beq.n	8000de6 <HAL_ADC_Init+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 8000d58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d5a:	f023 0312 	bic.w	r3, r3, #18
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	e03a      	b.n	8000de6 <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 8000d70:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000d72:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000d74:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000d76:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000d7a:	f003 fbfb 	bl	8004574 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d86:	d001      	beq.n	8000d8c <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e7dc      	b.n	8000d46 <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f7ff ff45 	bl	8000c1c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d94:	f013 0f10 	tst.w	r3, #16
 8000d98:	d1d5      	bne.n	8000d46 <HAL_ADC_Init+0x1e>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d1d3      	bne.n	8000d46 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8000d9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000da0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000da4:	f023 0302 	bic.w	r3, r3, #2
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000dae:	6822      	ldr	r2, [r4, #0]
 8000db0:	6893      	ldr	r3, [r2, #8]
 8000db2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000db6:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000db8:	6822      	ldr	r2, [r4, #0]
 8000dba:	6893      	ldr	r3, [r2, #8]
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dc2:	4b5b      	ldr	r3, [pc, #364]	; (8000f30 <HAL_ADC_Init+0x208>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a5b      	ldr	r2, [pc, #364]	; (8000f34 <HAL_ADC_Init+0x20c>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	0c9b      	lsrs	r3, r3, #18
 8000dce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000dd2:	005a      	lsls	r2, r3, #1
 8000dd4:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000dd6:	9b00      	ldr	r3, [sp, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0b4      	beq.n	8000d46 <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 8000ddc:	9b00      	ldr	r3, [sp, #0]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	e7f8      	b.n	8000dd6 <HAL_ADC_Init+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de4:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000de6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000de8:	f013 0f10 	tst.w	r3, #16
 8000dec:	f040 8095 	bne.w	8000f1a <HAL_ADC_Init+0x1f2>
 8000df0:	2800      	cmp	r0, #0
 8000df2:	f040 8092 	bne.w	8000f1a <HAL_ADC_Init+0x1f2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000df6:	6822      	ldr	r2, [r4, #0]
 8000df8:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000dfa:	f013 0304 	ands.w	r3, r3, #4
 8000dfe:	f040 808c 	bne.w	8000f1a <HAL_ADC_Init+0x1f2>
    ADC_STATE_CLR_SET(hadc->State,
 8000e02:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000e04:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8000e08:	f041 0102 	orr.w	r1, r1, #2
 8000e0c:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e0e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000e12:	d055      	beq.n	8000ec0 <HAL_ADC_Init+0x198>
 8000e14:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000e18:	9101      	str	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e1a:	6891      	ldr	r1, [r2, #8]
 8000e1c:	f001 0103 	and.w	r1, r1, #3
 8000e20:	2901      	cmp	r1, #1
 8000e22:	d050      	beq.n	8000ec6 <HAL_ADC_Init+0x19e>
 8000e24:	2200      	movs	r2, #0
 8000e26:	b972      	cbnz	r2, 8000e46 <HAL_ADC_Init+0x11e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e28:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e2a:	b12d      	cbz	r5, 8000e38 <HAL_ADC_Init+0x110>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e2c:	68a9      	ldr	r1, [r5, #8]
 8000e2e:	f001 0103 	and.w	r1, r1, #3
 8000e32:	2901      	cmp	r1, #1
 8000e34:	d04f      	beq.n	8000ed6 <HAL_ADC_Init+0x1ae>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e36:	b932      	cbnz	r2, 8000e46 <HAL_ADC_Init+0x11e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e38:	493f      	ldr	r1, [pc, #252]	; (8000f38 <HAL_ADC_Init+0x210>)
 8000e3a:	688a      	ldr	r2, [r1, #8]
 8000e3c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000e40:	6865      	ldr	r5, [r4, #4]
 8000e42:	432a      	orrs	r2, r5
 8000e44:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000e46:	69e2      	ldr	r2, [r4, #28]
 8000e48:	0351      	lsls	r1, r2, #13
 8000e4a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000e4c:	2d01      	cmp	r5, #1
 8000e4e:	d001      	beq.n	8000e54 <HAL_ADC_Init+0x12c>
 8000e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e54:	430b      	orrs	r3, r1
 8000e56:	68e1      	ldr	r1, [r4, #12]
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	68a1      	ldr	r1, [r4, #8]
 8000e5c:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e60:	2901      	cmp	r1, #1
 8000e62:	d03e      	beq.n	8000ee2 <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e66:	2a01      	cmp	r2, #1
 8000e68:	d002      	beq.n	8000e70 <HAL_ADC_Init+0x148>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e70:	6822      	ldr	r2, [r4, #0]
 8000e72:	6891      	ldr	r1, [r2, #8]
 8000e74:	f011 0f0c 	tst.w	r1, #12
 8000e78:	d10b      	bne.n	8000e92 <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e7a:	68d1      	ldr	r1, [r2, #12]
 8000e7c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000e80:	f021 0102 	bic.w	r1, r1, #2
 8000e84:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000e86:	69a1      	ldr	r1, [r4, #24]
 8000e88:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000e8a:	0052      	lsls	r2, r2, #1
 8000e8c:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8000e90:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 8000e92:	6821      	ldr	r1, [r4, #0]
 8000e94:	68cd      	ldr	r5, [r1, #12]
 8000e96:	4a29      	ldr	r2, [pc, #164]	; (8000f3c <HAL_ADC_Init+0x214>)
 8000e98:	402a      	ands	r2, r5
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e9e:	6923      	ldr	r3, [r4, #16]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d031      	beq.n	8000f08 <HAL_ADC_Init+0x1e0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ea4:	6822      	ldr	r2, [r4, #0]
 8000ea6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ea8:	f023 030f 	bic.w	r3, r3, #15
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000eae:	2300      	movs	r3, #0
 8000eb0:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000eb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000eb4:	f023 0303 	bic.w	r3, r3, #3
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6463      	str	r3, [r4, #68]	; 0x44
 8000ebe:	e033      	b.n	8000f28 <HAL_ADC_Init+0x200>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ec0:	491f      	ldr	r1, [pc, #124]	; (8000f40 <HAL_ADC_Init+0x218>)
 8000ec2:	9101      	str	r1, [sp, #4]
 8000ec4:	e7a9      	b.n	8000e1a <HAL_ADC_Init+0xf2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ec6:	6812      	ldr	r2, [r2, #0]
 8000ec8:	f012 0f01 	tst.w	r2, #1
 8000ecc:	d101      	bne.n	8000ed2 <HAL_ADC_Init+0x1aa>
 8000ece:	2200      	movs	r2, #0
 8000ed0:	e7a9      	b.n	8000e26 <HAL_ADC_Init+0xfe>
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	e7a7      	b.n	8000e26 <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ed6:	6829      	ldr	r1, [r5, #0]
 8000ed8:	f011 0f01 	tst.w	r1, #1
 8000edc:	d0ab      	beq.n	8000e36 <HAL_ADC_Init+0x10e>
 8000ede:	2201      	movs	r2, #1
 8000ee0:	e7a9      	b.n	8000e36 <HAL_ADC_Init+0x10e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ee2:	b932      	cbnz	r2, 8000ef2 <HAL_ADC_Init+0x1ca>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000ee4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ee6:	3a01      	subs	r2, #1
 8000ee8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef0:	e7b8      	b.n	8000e64 <HAL_ADC_Init+0x13c>
        ADC_STATE_CLR_SET(hadc->State,
 8000ef2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000ef4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8000ef8:	f042 0220 	orr.w	r2, r2, #32
 8000efc:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000efe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000f00:	f042 0201 	orr.w	r2, r2, #1
 8000f04:	64a2      	str	r2, [r4, #72]	; 0x48
 8000f06:	e7ad      	b.n	8000e64 <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f08:	6821      	ldr	r1, [r4, #0]
 8000f0a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000f0c:	f023 030f 	bic.w	r3, r3, #15
 8000f10:	6a22      	ldr	r2, [r4, #32]
 8000f12:	3a01      	subs	r2, #1
 8000f14:	4313      	orrs	r3, r2
 8000f16:	630b      	str	r3, [r1, #48]	; 0x30
 8000f18:	e7c9      	b.n	8000eae <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 8000f1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f1c:	f023 0312 	bic.w	r3, r3, #18
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 8000f26:	2001      	movs	r0, #1
}
 8000f28:	b017      	add	sp, #92	; 0x5c
 8000f2a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	e7fb      	b.n	8000f28 <HAL_ADC_Init+0x200>
 8000f30:	20000000 	.word	0x20000000
 8000f34:	431bde83 	.word	0x431bde83
 8000f38:	50000300 	.word	0x50000300
 8000f3c:	fff0c007 	.word	0xfff0c007
 8000f40:	50000100 	.word	0x50000100

08000f44 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f44:	6803      	ldr	r3, [r0, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f013 0f04 	tst.w	r3, #4
 8000f4c:	d002      	beq.n	8000f54 <HAL_ADC_Start+0x10>
    tmp_hal_status = HAL_BUSY;
 8000f4e:	2302      	movs	r3, #2
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8000f54:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_ADC_Start+0x1c>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e7f7      	b.n	8000f50 <HAL_ADC_Start+0xc>
{
 8000f60:	b510      	push	{r4, lr}
 8000f62:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8000f64:	2301      	movs	r3, #1
 8000f66:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 8000f6a:	f7ff fe9b 	bl	8000ca4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d160      	bne.n	8001036 <HAL_ADC_Start+0xf2>
      ADC_STATE_CLR_SET(hadc->State,
 8000f74:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f76:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000f7a:	f022 0201 	bic.w	r2, r2, #1
 8000f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f82:	6462      	str	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f84:	4a2e      	ldr	r2, [pc, #184]	; (8001040 <HAL_ADC_Start+0xfc>)
 8000f86:	6892      	ldr	r2, [r2, #8]
 8000f88:	f012 0f1f 	tst.w	r2, #31
 8000f8c:	d033      	beq.n	8000ff6 <HAL_ADC_Start+0xb2>
 8000f8e:	6821      	ldr	r1, [r4, #0]
 8000f90:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8000f94:	d02f      	beq.n	8000ff6 <HAL_ADC_Start+0xb2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f96:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000f98:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f9c:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f9e:	4a29      	ldr	r2, [pc, #164]	; (8001044 <HAL_ADC_Start+0x100>)
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d038      	beq.n	8001016 <HAL_ADC_Start+0xd2>
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fa4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000fa6:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000faa:	d041      	beq.n	8001030 <HAL_ADC_Start+0xec>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000fae:	f022 0206 	bic.w	r2, r2, #6
 8000fb2:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fba:	6822      	ldr	r2, [r4, #0]
 8000fbc:	211c      	movs	r1, #28
 8000fbe:	6011      	str	r1, [r2, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000fc0:	4a1f      	ldr	r2, [pc, #124]	; (8001040 <HAL_ADC_Start+0xfc>)
 8000fc2:	6892      	ldr	r2, [r2, #8]
 8000fc4:	f012 0f1f 	tst.w	r2, #31
 8000fc8:	d00f      	beq.n	8000fea <HAL_ADC_Start+0xa6>
 8000fca:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <HAL_ADC_Start+0xfc>)
 8000fcc:	6892      	ldr	r2, [r2, #8]
 8000fce:	f002 021f 	and.w	r2, r2, #31
 8000fd2:	2a05      	cmp	r2, #5
 8000fd4:	d009      	beq.n	8000fea <HAL_ADC_Start+0xa6>
 8000fd6:	4a1a      	ldr	r2, [pc, #104]	; (8001040 <HAL_ADC_Start+0xfc>)
 8000fd8:	6892      	ldr	r2, [r2, #8]
 8000fda:	f002 021f 	and.w	r2, r2, #31
 8000fde:	2a09      	cmp	r2, #9
 8000fe0:	d003      	beq.n	8000fea <HAL_ADC_Start+0xa6>
 8000fe2:	6822      	ldr	r2, [r4, #0]
 8000fe4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000fe8:	d128      	bne.n	800103c <HAL_ADC_Start+0xf8>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000fea:	6821      	ldr	r1, [r4, #0]
 8000fec:	688a      	ldr	r2, [r1, #8]
 8000fee:	f042 0204 	orr.w	r2, r2, #4
 8000ff2:	608a      	str	r2, [r1, #8]
 8000ff4:	e022      	b.n	800103c <HAL_ADC_Start+0xf8>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ff6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000ff8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000ffc:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ffe:	6822      	ldr	r2, [r4, #0]
 8001000:	68d2      	ldr	r2, [r2, #12]
 8001002:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001006:	d0cd      	beq.n	8000fa4 <HAL_ADC_Start+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001008:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800100a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800100e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001012:	6462      	str	r2, [r4, #68]	; 0x44
 8001014:	e7c6      	b.n	8000fa4 <HAL_ADC_Start+0x60>
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001016:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800101a:	68d2      	ldr	r2, [r2, #12]
 800101c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001020:	d0c0      	beq.n	8000fa4 <HAL_ADC_Start+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001022:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001024:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001028:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800102c:	6462      	str	r2, [r4, #68]	; 0x44
 800102e:	e7b9      	b.n	8000fa4 <HAL_ADC_Start+0x60>
        ADC_CLEAR_ERRORCODE(hadc);
 8001030:	2200      	movs	r2, #0
 8001032:	64a2      	str	r2, [r4, #72]	; 0x48
 8001034:	e7be      	b.n	8000fb4 <HAL_ADC_Start+0x70>
      __HAL_UNLOCK(hadc);
 8001036:	2200      	movs	r2, #0
 8001038:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
}
 800103c:	4618      	mov	r0, r3
 800103e:	bd10      	pop	{r4, pc}
 8001040:	50000300 	.word	0x50000300
 8001044:	50000100 	.word	0x50000100

08001048 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001048:	6803      	ldr	r3, [r0, #0]
 800104a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800104c:	4770      	bx	lr
	...

08001050 <HAL_ADC_ConfigChannel>:
{
 8001050:	b470      	push	{r4, r5, r6}
 8001052:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8001054:	2200      	movs	r2, #0
 8001056:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hadc);
 8001058:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800105c:	2a01      	cmp	r2, #1
 800105e:	f000 81ad 	beq.w	80013bc <HAL_ADC_ConfigChannel+0x36c>
 8001062:	4603      	mov	r3, r0
 8001064:	2201      	movs	r2, #1
 8001066:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800106a:	6800      	ldr	r0, [r0, #0]
 800106c:	6882      	ldr	r2, [r0, #8]
 800106e:	f012 0f04 	tst.w	r2, #4
 8001072:	f040 8196 	bne.w	80013a2 <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank < 5U)
 8001076:	684a      	ldr	r2, [r1, #4]
 8001078:	2a04      	cmp	r2, #4
 800107a:	d831      	bhi.n	80010e0 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 800107c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800107e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001082:	0055      	lsls	r5, r2, #1
 8001084:	221f      	movs	r2, #31
 8001086:	40aa      	lsls	r2, r5
 8001088:	ea24 0202 	bic.w	r2, r4, r2
 800108c:	680c      	ldr	r4, [r1, #0]
 800108e:	40ac      	lsls	r4, r5
 8001090:	4322      	orrs	r2, r4
 8001092:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	6882      	ldr	r2, [r0, #8]
 8001098:	f012 0f0c 	tst.w	r2, #12
 800109c:	d168      	bne.n	8001170 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800109e:	680a      	ldr	r2, [r1, #0]
 80010a0:	2a09      	cmp	r2, #9
 80010a2:	d94e      	bls.n	8001142 <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010a4:	6984      	ldr	r4, [r0, #24]
 80010a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80010aa:	3a1e      	subs	r2, #30
 80010ac:	2507      	movs	r5, #7
 80010ae:	4095      	lsls	r5, r2
 80010b0:	ea24 0405 	bic.w	r4, r4, r5
 80010b4:	688d      	ldr	r5, [r1, #8]
 80010b6:	fa05 f202 	lsl.w	r2, r5, r2
 80010ba:	4322      	orrs	r2, r4
 80010bc:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80010be:	6948      	ldr	r0, [r1, #20]
 80010c0:	681c      	ldr	r4, [r3, #0]
 80010c2:	68e2      	ldr	r2, [r4, #12]
 80010c4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80010c8:	0052      	lsls	r2, r2, #1
 80010ca:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 80010ce:	6908      	ldr	r0, [r1, #16]
 80010d0:	3801      	subs	r0, #1
 80010d2:	2803      	cmp	r0, #3
 80010d4:	f200 808f 	bhi.w	80011f6 <HAL_ADC_ConfigChannel+0x1a6>
 80010d8:	e8df f000 	tbb	[pc, r0]
 80010dc:	82776c40 	.word	0x82776c40
    else if (sConfig->Rank < 10U)
 80010e0:	2a09      	cmp	r2, #9
 80010e2:	d80e      	bhi.n	8001102 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 80010e4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80010e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80010ea:	0055      	lsls	r5, r2, #1
 80010ec:	3d1e      	subs	r5, #30
 80010ee:	221f      	movs	r2, #31
 80010f0:	40aa      	lsls	r2, r5
 80010f2:	ea24 0202 	bic.w	r2, r4, r2
 80010f6:	680c      	ldr	r4, [r1, #0]
 80010f8:	fa04 f505 	lsl.w	r5, r4, r5
 80010fc:	432a      	orrs	r2, r5
 80010fe:	6342      	str	r2, [r0, #52]	; 0x34
 8001100:	e7c8      	b.n	8001094 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8001102:	2a0e      	cmp	r2, #14
 8001104:	d80e      	bhi.n	8001124 <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001106:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001108:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800110c:	0055      	lsls	r5, r2, #1
 800110e:	3d3c      	subs	r5, #60	; 0x3c
 8001110:	221f      	movs	r2, #31
 8001112:	40aa      	lsls	r2, r5
 8001114:	ea24 0202 	bic.w	r2, r4, r2
 8001118:	680c      	ldr	r4, [r1, #0]
 800111a:	fa04 f505 	lsl.w	r5, r4, r5
 800111e:	432a      	orrs	r2, r5
 8001120:	6382      	str	r2, [r0, #56]	; 0x38
 8001122:	e7b7      	b.n	8001094 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001124:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001126:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800112a:	0055      	lsls	r5, r2, #1
 800112c:	3d5a      	subs	r5, #90	; 0x5a
 800112e:	221f      	movs	r2, #31
 8001130:	40aa      	lsls	r2, r5
 8001132:	ea24 0202 	bic.w	r2, r4, r2
 8001136:	680c      	ldr	r4, [r1, #0]
 8001138:	fa04 f505 	lsl.w	r5, r4, r5
 800113c:	432a      	orrs	r2, r5
 800113e:	63c2      	str	r2, [r0, #60]	; 0x3c
 8001140:	e7a8      	b.n	8001094 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001142:	6944      	ldr	r4, [r0, #20]
 8001144:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001148:	2507      	movs	r5, #7
 800114a:	4095      	lsls	r5, r2
 800114c:	ea24 0405 	bic.w	r4, r4, r5
 8001150:	688d      	ldr	r5, [r1, #8]
 8001152:	fa05 f202 	lsl.w	r2, r5, r2
 8001156:	4322      	orrs	r2, r4
 8001158:	6142      	str	r2, [r0, #20]
 800115a:	e7b0      	b.n	80010be <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 800115c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800115e:	4d98      	ldr	r5, [pc, #608]	; (80013c0 <HAL_ADC_ConfigChannel+0x370>)
 8001160:	4005      	ands	r5, r0
 8001162:	6808      	ldr	r0, [r1, #0]
 8001164:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8001168:	4315      	orrs	r5, r2
 800116a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800116e:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	6882      	ldr	r2, [r0, #8]
 8001174:	f002 0203 	and.w	r2, r2, #3
 8001178:	2a01      	cmp	r2, #1
 800117a:	d06f      	beq.n	800125c <HAL_ADC_ConfigChannel+0x20c>
 800117c:	2200      	movs	r2, #0
 800117e:	2a00      	cmp	r2, #0
 8001180:	f040 811a 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0x368>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001184:	68cc      	ldr	r4, [r1, #12]
 8001186:	2c01      	cmp	r4, #1
 8001188:	d070      	beq.n	800126c <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800118a:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 800118e:	680e      	ldr	r6, [r1, #0]
 8001190:	2501      	movs	r5, #1
 8001192:	40b5      	lsls	r5, r6
 8001194:	ea24 0405 	bic.w	r4, r4, r5
 8001198:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800119c:	6809      	ldr	r1, [r1, #0]
 800119e:	2910      	cmp	r1, #16
 80011a0:	f000 808d 	beq.w	80012be <HAL_ADC_ConfigChannel+0x26e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80011a4:	2911      	cmp	r1, #17
 80011a6:	f000 80af 	beq.w	8001308 <HAL_ADC_ConfigChannel+0x2b8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80011aa:	2912      	cmp	r1, #18
 80011ac:	f000 80b2 	beq.w	8001314 <HAL_ADC_ConfigChannel+0x2c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b0:	2000      	movs	r0, #0
 80011b2:	e0fb      	b.n	80013ac <HAL_ADC_ConfigChannel+0x35c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80011b4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80011b6:	4d82      	ldr	r5, [pc, #520]	; (80013c0 <HAL_ADC_ConfigChannel+0x370>)
 80011b8:	4005      	ands	r5, r0
 80011ba:	6808      	ldr	r0, [r1, #0]
 80011bc:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80011c0:	4315      	orrs	r5, r2
 80011c2:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80011c6:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 80011c8:	e7d2      	b.n	8001170 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80011ca:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80011cc:	4d7c      	ldr	r5, [pc, #496]	; (80013c0 <HAL_ADC_ConfigChannel+0x370>)
 80011ce:	4005      	ands	r5, r0
 80011d0:	6808      	ldr	r0, [r1, #0]
 80011d2:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80011d6:	4315      	orrs	r5, r2
 80011d8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80011dc:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 80011de:	e7c7      	b.n	8001170 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80011e0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80011e2:	4877      	ldr	r0, [pc, #476]	; (80013c0 <HAL_ADC_ConfigChannel+0x370>)
 80011e4:	4028      	ands	r0, r5
 80011e6:	680d      	ldr	r5, [r1, #0]
 80011e8:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 80011ec:	4302      	orrs	r2, r0
 80011ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011f2:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 80011f4:	e7bc      	b.n	8001170 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011f6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80011f8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80011fc:	6808      	ldr	r0, [r1, #0]
 80011fe:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 8001202:	d01c      	beq.n	800123e <HAL_ADC_ConfigChannel+0x1ee>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001208:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800120c:	680c      	ldr	r4, [r1, #0]
 800120e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001212:	d019      	beq.n	8001248 <HAL_ADC_ConfigChannel+0x1f8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001218:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800121c:	680c      	ldr	r4, [r1, #0]
 800121e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001222:	d016      	beq.n	8001252 <HAL_ADC_ConfigChannel+0x202>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001228:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800122c:	680c      	ldr	r4, [r1, #0]
 800122e:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 8001232:	d19d      	bne.n	8001170 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001234:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8001236:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800123a:	66c2      	str	r2, [r0, #108]	; 0x6c
 800123c:	e798      	b.n	8001170 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800123e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001240:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001244:	6622      	str	r2, [r4, #96]	; 0x60
 8001246:	e7dd      	b.n	8001204 <HAL_ADC_ConfigChannel+0x1b4>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001248:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800124a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800124e:	6642      	str	r2, [r0, #100]	; 0x64
 8001250:	e7e0      	b.n	8001214 <HAL_ADC_ConfigChannel+0x1c4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001252:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001254:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001258:	6682      	str	r2, [r0, #104]	; 0x68
 800125a:	e7e3      	b.n	8001224 <HAL_ADC_ConfigChannel+0x1d4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800125c:	6802      	ldr	r2, [r0, #0]
 800125e:	f012 0f01 	tst.w	r2, #1
 8001262:	d101      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x218>
 8001264:	2200      	movs	r2, #0
 8001266:	e78a      	b.n	800117e <HAL_ADC_ConfigChannel+0x12e>
 8001268:	2201      	movs	r2, #1
 800126a:	e788      	b.n	800117e <HAL_ADC_ConfigChannel+0x12e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800126c:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8001270:	680e      	ldr	r6, [r1, #0]
 8001272:	2501      	movs	r5, #1
 8001274:	40b5      	lsls	r5, r6
 8001276:	432c      	orrs	r4, r5
 8001278:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800127c:	6808      	ldr	r0, [r1, #0]
 800127e:	2809      	cmp	r0, #9
 8001280:	d90e      	bls.n	80012a0 <HAL_ADC_ConfigChannel+0x250>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001282:	681e      	ldr	r6, [r3, #0]
 8001284:	69b4      	ldr	r4, [r6, #24]
 8001286:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800128a:	381b      	subs	r0, #27
 800128c:	2507      	movs	r5, #7
 800128e:	4085      	lsls	r5, r0
 8001290:	ea24 0405 	bic.w	r4, r4, r5
 8001294:	688d      	ldr	r5, [r1, #8]
 8001296:	fa05 f000 	lsl.w	r0, r5, r0
 800129a:	4320      	orrs	r0, r4
 800129c:	61b0      	str	r0, [r6, #24]
 800129e:	e77d      	b.n	800119c <HAL_ADC_ConfigChannel+0x14c>
        MODIFY_REG(hadc->Instance->SMPR1,
 80012a0:	681e      	ldr	r6, [r3, #0]
 80012a2:	6974      	ldr	r4, [r6, #20]
 80012a4:	3001      	adds	r0, #1
 80012a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80012aa:	2507      	movs	r5, #7
 80012ac:	4085      	lsls	r5, r0
 80012ae:	ea24 0405 	bic.w	r4, r4, r5
 80012b2:	688d      	ldr	r5, [r1, #8]
 80012b4:	fa05 f000 	lsl.w	r0, r5, r0
 80012b8:	4320      	orrs	r0, r4
 80012ba:	6170      	str	r0, [r6, #20]
 80012bc:	e76e      	b.n	800119c <HAL_ADC_ConfigChannel+0x14c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80012be:	4841      	ldr	r0, [pc, #260]	; (80013c4 <HAL_ADC_ConfigChannel+0x374>)
 80012c0:	6880      	ldr	r0, [r0, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012c2:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80012c6:	f47f af6d 	bne.w	80011a4 <HAL_ADC_ConfigChannel+0x154>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012ca:	681c      	ldr	r4, [r3, #0]
 80012cc:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80012d0:	d027      	beq.n	8001322 <HAL_ADC_ConfigChannel+0x2d2>
 80012d2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012d6:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012d8:	68a0      	ldr	r0, [r4, #8]
 80012da:	f000 0003 	and.w	r0, r0, #3
 80012de:	2801      	cmp	r0, #1
 80012e0:	d022      	beq.n	8001328 <HAL_ADC_ConfigChannel+0x2d8>
 80012e2:	2a00      	cmp	r2, #0
 80012e4:	d157      	bne.n	8001396 <HAL_ADC_ConfigChannel+0x346>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012e6:	9d01      	ldr	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012e8:	b135      	cbz	r5, 80012f8 <HAL_ADC_ConfigChannel+0x2a8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012ea:	68a8      	ldr	r0, [r5, #8]
 80012ec:	f000 0003 	and.w	r0, r0, #3
 80012f0:	2801      	cmp	r0, #1
 80012f2:	d01f      	beq.n	8001334 <HAL_ADC_ConfigChannel+0x2e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012f4:	2a00      	cmp	r2, #0
 80012f6:	d14e      	bne.n	8001396 <HAL_ADC_ConfigChannel+0x346>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012f8:	2910      	cmp	r1, #16
 80012fa:	d021      	beq.n	8001340 <HAL_ADC_ConfigChannel+0x2f0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80012fc:	2911      	cmp	r1, #17
 80012fe:	d039      	beq.n	8001374 <HAL_ADC_ConfigChannel+0x324>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001300:	2912      	cmp	r1, #18
 8001302:	d041      	beq.n	8001388 <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001304:	2000      	movs	r0, #0
 8001306:	e051      	b.n	80013ac <HAL_ADC_ConfigChannel+0x35c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001308:	482e      	ldr	r0, [pc, #184]	; (80013c4 <HAL_ADC_ConfigChannel+0x374>)
 800130a:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800130c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8001310:	d0db      	beq.n	80012ca <HAL_ADC_ConfigChannel+0x27a>
 8001312:	e74a      	b.n	80011aa <HAL_ADC_ConfigChannel+0x15a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001314:	482b      	ldr	r0, [pc, #172]	; (80013c4 <HAL_ADC_ConfigChannel+0x374>)
 8001316:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001318:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800131c:	d0d5      	beq.n	80012ca <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800131e:	2000      	movs	r0, #0
 8001320:	e044      	b.n	80013ac <HAL_ADC_ConfigChannel+0x35c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001322:	4829      	ldr	r0, [pc, #164]	; (80013c8 <HAL_ADC_ConfigChannel+0x378>)
 8001324:	9001      	str	r0, [sp, #4]
 8001326:	e7d7      	b.n	80012d8 <HAL_ADC_ConfigChannel+0x288>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001328:	6820      	ldr	r0, [r4, #0]
 800132a:	f010 0f01 	tst.w	r0, #1
 800132e:	d0d8      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0x292>
 8001330:	2201      	movs	r2, #1
 8001332:	e7d6      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x292>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001334:	6828      	ldr	r0, [r5, #0]
 8001336:	f010 0f01 	tst.w	r0, #1
 800133a:	d0db      	beq.n	80012f4 <HAL_ADC_ConfigChannel+0x2a4>
 800133c:	2201      	movs	r2, #1
 800133e:	e7d9      	b.n	80012f4 <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001340:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001344:	d1da      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x2ac>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001346:	491f      	ldr	r1, [pc, #124]	; (80013c4 <HAL_ADC_ConfigChannel+0x374>)
 8001348:	688a      	ldr	r2, [r1, #8]
 800134a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800134e:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001350:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <HAL_ADC_ConfigChannel+0x37c>)
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	491e      	ldr	r1, [pc, #120]	; (80013d0 <HAL_ADC_ConfigChannel+0x380>)
 8001356:	fbb2 f1f1 	udiv	r1, r2, r1
 800135a:	220a      	movs	r2, #10
 800135c:	fb02 f201 	mul.w	r2, r2, r1
 8001360:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8001362:	e002      	b.n	800136a <HAL_ADC_ConfigChannel+0x31a>
            wait_loop_index--;
 8001364:	9a00      	ldr	r2, [sp, #0]
 8001366:	3a01      	subs	r2, #1
 8001368:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 800136a:	9a00      	ldr	r2, [sp, #0]
 800136c:	2a00      	cmp	r2, #0
 800136e:	d1f9      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x314>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001370:	2000      	movs	r0, #0
 8001372:	e01b      	b.n	80013ac <HAL_ADC_ConfigChannel+0x35c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001374:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001378:	d1c2      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x2b0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800137a:	4912      	ldr	r1, [pc, #72]	; (80013c4 <HAL_ADC_ConfigChannel+0x374>)
 800137c:	688a      	ldr	r2, [r1, #8]
 800137e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001382:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001384:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001386:	e011      	b.n	80013ac <HAL_ADC_ConfigChannel+0x35c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001388:	490e      	ldr	r1, [pc, #56]	; (80013c4 <HAL_ADC_ConfigChannel+0x374>)
 800138a:	688a      	ldr	r2, [r1, #8]
 800138c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001390:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001392:	2000      	movs	r0, #0
 8001394:	e00a      	b.n	80013ac <HAL_ADC_ConfigChannel+0x35c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001396:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001398:	f042 0220 	orr.w	r2, r2, #32
 800139c:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 800139e:	2001      	movs	r0, #1
 80013a0:	e004      	b.n	80013ac <HAL_ADC_ConfigChannel+0x35c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013a4:	f042 0220 	orr.w	r2, r2, #32
 80013a8:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80013aa:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80013b2:	b017      	add	sp, #92	; 0x5c
 80013b4:	bc70      	pop	{r4, r5, r6}
 80013b6:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b8:	2000      	movs	r0, #0
 80013ba:	e7f7      	b.n	80013ac <HAL_ADC_ConfigChannel+0x35c>
  __HAL_LOCK(hadc);
 80013bc:	2002      	movs	r0, #2
 80013be:	e7f8      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x362>
 80013c0:	83fff000 	.word	0x83fff000
 80013c4:	50000300 	.word	0x50000300
 80013c8:	50000100 	.word	0x50000100
 80013cc:	20000000 	.word	0x20000000
 80013d0:	000f4240 	.word	0x000f4240

080013d4 <HAL_ADCEx_MultiModeConfigChannel>:
{
 80013d4:	b470      	push	{r4, r5, r6}
 80013d6:	b097      	sub	sp, #92	; 0x5c
 80013d8:	4603      	mov	r3, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013da:	6802      	ldr	r2, [r0, #0]
 80013dc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80013e0:	d040      	beq.n	8001464 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80013e2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80013e6:	9001      	str	r0, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80013e8:	9801      	ldr	r0, [sp, #4]
 80013ea:	2800      	cmp	r0, #0
 80013ec:	f000 8088 	beq.w	8001500 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
  __HAL_LOCK(hadc);
 80013f0:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
 80013f4:	2c01      	cmp	r4, #1
 80013f6:	f000 8085 	beq.w	8001504 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 80013fa:	2401      	movs	r4, #1
 80013fc:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001400:	6892      	ldr	r2, [r2, #8]
 8001402:	f012 0f04 	tst.w	r2, #4
 8001406:	d168      	bne.n	80014da <HAL_ADCEx_MultiModeConfigChannel+0x106>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001408:	6882      	ldr	r2, [r0, #8]
 800140a:	f012 0f04 	tst.w	r2, #4
 800140e:	d164      	bne.n	80014da <HAL_ADCEx_MultiModeConfigChannel+0x106>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001410:	680a      	ldr	r2, [r1, #0]
 8001412:	2a00      	cmp	r2, #0
 8001414:	d037      	beq.n	8001486 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001416:	4d3c      	ldr	r5, [pc, #240]	; (8001508 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8001418:	68aa      	ldr	r2, [r5, #8]
 800141a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800141e:	684c      	ldr	r4, [r1, #4]
 8001420:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8001422:	ea44 3446 	orr.w	r4, r4, r6, lsl #13
 8001426:	4322      	orrs	r2, r4
 8001428:	60aa      	str	r2, [r5, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800142a:	681c      	ldr	r4, [r3, #0]
 800142c:	68a2      	ldr	r2, [r4, #8]
 800142e:	f002 0203 	and.w	r2, r2, #3
 8001432:	2a01      	cmp	r2, #1
 8001434:	d019      	beq.n	800146a <HAL_ADCEx_MultiModeConfigChannel+0x96>
 8001436:	2200      	movs	r2, #0
 8001438:	2a00      	cmp	r2, #0
 800143a:	d159      	bne.n	80014f0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800143c:	6884      	ldr	r4, [r0, #8]
 800143e:	f004 0403 	and.w	r4, r4, #3
 8001442:	2c01      	cmp	r4, #1
 8001444:	d019      	beq.n	800147a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001446:	2a00      	cmp	r2, #0
 8001448:	d154      	bne.n	80014f4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800144a:	4c2f      	ldr	r4, [pc, #188]	; (8001508 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800144c:	68a2      	ldr	r2, [r4, #8]
 800144e:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001452:	f022 020f 	bic.w	r2, r2, #15
 8001456:	6808      	ldr	r0, [r1, #0]
 8001458:	6889      	ldr	r1, [r1, #8]
 800145a:	4301      	orrs	r1, r0
 800145c:	430a      	orrs	r2, r1
 800145e:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001460:	2000      	movs	r0, #0
 8001462:	e03f      	b.n	80014e4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001464:	4829      	ldr	r0, [pc, #164]	; (800150c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001466:	9001      	str	r0, [sp, #4]
 8001468:	e7be      	b.n	80013e8 <HAL_ADCEx_MultiModeConfigChannel+0x14>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800146a:	6822      	ldr	r2, [r4, #0]
 800146c:	f012 0f01 	tst.w	r2, #1
 8001470:	d101      	bne.n	8001476 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8001472:	2200      	movs	r2, #0
 8001474:	e7e0      	b.n	8001438 <HAL_ADCEx_MultiModeConfigChannel+0x64>
 8001476:	2201      	movs	r2, #1
 8001478:	e7de      	b.n	8001438 <HAL_ADCEx_MultiModeConfigChannel+0x64>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800147a:	6800      	ldr	r0, [r0, #0]
 800147c:	f010 0f01 	tst.w	r0, #1
 8001480:	d0e1      	beq.n	8001446 <HAL_ADCEx_MultiModeConfigChannel+0x72>
 8001482:	2201      	movs	r2, #1
 8001484:	e7df      	b.n	8001446 <HAL_ADCEx_MultiModeConfigChannel+0x72>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001486:	4920      	ldr	r1, [pc, #128]	; (8001508 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8001488:	688a      	ldr	r2, [r1, #8]
 800148a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800148e:	608a      	str	r2, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	688a      	ldr	r2, [r1, #8]
 8001494:	f002 0203 	and.w	r2, r2, #3
 8001498:	2a01      	cmp	r2, #1
 800149a:	d010      	beq.n	80014be <HAL_ADCEx_MultiModeConfigChannel+0xea>
 800149c:	2200      	movs	r2, #0
 800149e:	bb5a      	cbnz	r2, 80014f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014a0:	6881      	ldr	r1, [r0, #8]
 80014a2:	f001 0103 	and.w	r1, r1, #3
 80014a6:	2901      	cmp	r1, #1
 80014a8:	d011      	beq.n	80014ce <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014aa:	bb3a      	cbnz	r2, 80014fc <HAL_ADCEx_MultiModeConfigChannel+0x128>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80014ac:	4916      	ldr	r1, [pc, #88]	; (8001508 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80014ae:	688a      	ldr	r2, [r1, #8]
 80014b0:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80014b4:	f022 020f 	bic.w	r2, r2, #15
 80014b8:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ba:	2000      	movs	r0, #0
 80014bc:	e012      	b.n	80014e4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014be:	680a      	ldr	r2, [r1, #0]
 80014c0:	f012 0f01 	tst.w	r2, #1
 80014c4:	d101      	bne.n	80014ca <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80014c6:	2200      	movs	r2, #0
 80014c8:	e7e9      	b.n	800149e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80014ca:	2201      	movs	r2, #1
 80014cc:	e7e7      	b.n	800149e <HAL_ADCEx_MultiModeConfigChannel+0xca>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014ce:	6801      	ldr	r1, [r0, #0]
 80014d0:	f011 0f01 	tst.w	r1, #1
 80014d4:	d0e9      	beq.n	80014aa <HAL_ADCEx_MultiModeConfigChannel+0xd6>
 80014d6:	2201      	movs	r2, #1
 80014d8:	e7e7      	b.n	80014aa <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014dc:	f042 0220 	orr.w	r2, r2, #32
 80014e0:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80014e2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 80014ea:	b017      	add	sp, #92	; 0x5c
 80014ec:	bc70      	pop	{r4, r5, r6}
 80014ee:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f0:	2000      	movs	r0, #0
 80014f2:	e7f7      	b.n	80014e4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 80014f4:	2000      	movs	r0, #0
 80014f6:	e7f5      	b.n	80014e4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 80014f8:	2000      	movs	r0, #0
 80014fa:	e7f3      	b.n	80014e4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 80014fc:	2000      	movs	r0, #0
 80014fe:	e7f1      	b.n	80014e4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    return HAL_ERROR;
 8001500:	2001      	movs	r0, #1
 8001502:	e7f2      	b.n	80014ea <HAL_ADCEx_MultiModeConfigChannel+0x116>
  __HAL_LOCK(hadc);
 8001504:	2002      	movs	r0, #2
 8001506:	e7f0      	b.n	80014ea <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001508:	50000300 	.word	0x50000300
 800150c:	50000100 	.word	0x50000100

08001510 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001512:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001514:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001518:	041b      	lsls	r3, r3, #16
 800151a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800151c:	0200      	lsls	r0, r0, #8
 800151e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001522:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001524:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001528:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800152c:	60d0      	str	r0, [r2, #12]
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_NVIC_SetPriority+0x5c>)
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800153e:	f1c3 0407 	rsb	r4, r3, #7
 8001542:	2c04      	cmp	r4, #4
 8001544:	bf28      	it	cs
 8001546:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001548:	1d1d      	adds	r5, r3, #4
 800154a:	2d06      	cmp	r5, #6
 800154c:	d917      	bls.n	800157e <HAL_NVIC_SetPriority+0x4a>
 800154e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	2501      	movs	r5, #1
 8001552:	fa05 f404 	lsl.w	r4, r5, r4
 8001556:	3c01      	subs	r4, #1
 8001558:	4021      	ands	r1, r4
 800155a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	fa05 f303 	lsl.w	r3, r5, r3
 8001560:	3b01      	subs	r3, #1
 8001562:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8001566:	2800      	cmp	r0, #0
 8001568:	db0b      	blt.n	8001582 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	0109      	lsls	r1, r1, #4
 800156c:	b2c9      	uxtb	r1, r1
 800156e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001572:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001576:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800157a:	bc30      	pop	{r4, r5}
 800157c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	2300      	movs	r3, #0
 8001580:	e7e6      	b.n	8001550 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	f000 000f 	and.w	r0, r0, #15
 8001586:	0109      	lsls	r1, r1, #4
 8001588:	b2c9      	uxtb	r1, r1
 800158a:	4b02      	ldr	r3, [pc, #8]	; (8001594 <HAL_NVIC_SetPriority+0x60>)
 800158c:	5419      	strb	r1, [r3, r0]
 800158e:	e7f4      	b.n	800157a <HAL_NVIC_SetPriority+0x46>
 8001590:	e000ed00 	.word	0xe000ed00
 8001594:	e000ed14 	.word	0xe000ed14

08001598 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001598:	0942      	lsrs	r2, r0, #5
 800159a:	f000 001f 	and.w	r0, r0, #31
 800159e:	2301      	movs	r3, #1
 80015a0:	fa03 f000 	lsl.w	r0, r3, r0
 80015a4:	4b01      	ldr	r3, [pc, #4]	; (80015ac <HAL_NVIC_EnableIRQ+0x14>)
 80015a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80015aa:	4770      	bx	lr
 80015ac:	e000e100 	.word	0xe000e100

080015b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	3801      	subs	r0, #1
 80015b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015b6:	d20a      	bcs.n	80015ce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_SYSTICK_Config+0x24>)
 80015ba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	21f0      	movs	r1, #240	; 0xf0
 80015be:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <HAL_SYSTICK_Config+0x28>)
 80015c0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c4:	2000      	movs	r0, #0
 80015c6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c8:	2207      	movs	r2, #7
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015ce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80015dc:	2804      	cmp	r0, #4
 80015de:	d005      	beq.n	80015ec <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80015e0:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80015e2:	6813      	ldr	r3, [r2, #0]
 80015e4:	f023 0304 	bic.w	r3, r3, #4
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80015ec:	4a02      	ldr	r2, [pc, #8]	; (80015f8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80015ee:	6813      	ldr	r3, [r2, #0]
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	4770      	bx	lr
 80015f8:	e000e010 	.word	0xe000e010

080015fc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80015fc:	4770      	bx	lr

080015fe <HAL_SYSTICK_IRQHandler>:
{
 80015fe:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001600:	f7ff fffc 	bl	80015fc <HAL_SYSTICK_Callback>
 8001604:	bd08      	pop	{r3, pc}

08001606 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001606:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001608:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800160c:	2b02      	cmp	r3, #2
 800160e:	d003      	beq.n	8001618 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001610:	2304      	movs	r3, #4
 8001612:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001614:	2001      	movs	r0, #1
 8001616:	bd08      	pop	{r3, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001618:	6802      	ldr	r2, [r0, #0]
 800161a:	6813      	ldr	r3, [r2, #0]
 800161c:	f023 030e 	bic.w	r3, r3, #14
 8001620:	6013      	str	r3, [r2, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001622:	6802      	ldr	r2, [r0, #0]
 8001624:	6813      	ldr	r3, [r2, #0]
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	6013      	str	r3, [r2, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800162c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800162e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001630:	2201      	movs	r2, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	604b      	str	r3, [r1, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001638:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163c:	2300      	movs	r3, #0
 800163e:	f880 3020 	strb.w	r3, [r0, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001642:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001644:	b113      	cbz	r3, 800164c <HAL_DMA_Abort_IT+0x46>
    {
      hdma->XferAbortCallback(hdma);
 8001646:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001648:	2000      	movs	r0, #0
 800164a:	bd08      	pop	{r3, pc}
 800164c:	2000      	movs	r0, #0
    } 
  }
  return status;
}
 800164e:	bd08      	pop	{r3, pc}

08001650 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001650:	2200      	movs	r2, #0
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <FLASH_Program_HalfWord+0x14>)
 8001654:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001656:	4a04      	ldr	r2, [pc, #16]	; (8001668 <FLASH_Program_HalfWord+0x18>)
 8001658:	6913      	ldr	r3, [r2, #16]
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001660:	8001      	strh	r1, [r0, #0]
 8001662:	4770      	bx	lr
 8001664:	20000280 	.word	0x20000280
 8001668:	40022000 	.word	0x40022000

0800166c <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <FLASH_SetErrorCode+0x38>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f013 0f10 	tst.w	r3, #16
 8001674:	d014      	beq.n	80016a0 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001676:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <FLASH_SetErrorCode+0x3c>)
 8001678:	69d3      	ldr	r3, [r2, #28]
 800167a:	f043 0302 	orr.w	r3, r3, #2
 800167e:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001680:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001682:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <FLASH_SetErrorCode+0x38>)
 8001684:	68d2      	ldr	r2, [r2, #12]
 8001686:	f012 0f04 	tst.w	r2, #4
 800168a:	d006      	beq.n	800169a <FLASH_SetErrorCode+0x2e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800168c:	4906      	ldr	r1, [pc, #24]	; (80016a8 <FLASH_SetErrorCode+0x3c>)
 800168e:	69ca      	ldr	r2, [r1, #28]
 8001690:	f042 0201 	orr.w	r2, r2, #1
 8001694:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 8001696:	f043 0304 	orr.w	r3, r3, #4
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800169a:	4a02      	ldr	r2, [pc, #8]	; (80016a4 <FLASH_SetErrorCode+0x38>)
 800169c:	60d3      	str	r3, [r2, #12]
 800169e:	4770      	bx	lr
  uint32_t flags = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	e7ee      	b.n	8001682 <FLASH_SetErrorCode+0x16>
 80016a4:	40022000 	.word	0x40022000
 80016a8:	20000280 	.word	0x20000280

080016ac <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <HAL_FLASH_Unlock+0x20>)
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80016b4:	d007      	beq.n	80016c6 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_FLASH_Unlock+0x20>)
 80016b8:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <HAL_FLASH_Unlock+0x24>)
 80016ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80016bc:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80016c0:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 80016c2:	2000      	movs	r0, #0
 80016c4:	4770      	bx	lr
    return HAL_ERROR;
 80016c6:	2001      	movs	r0, #1
}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40022000 	.word	0x40022000
 80016d0:	45670123 	.word	0x45670123

080016d4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80016d4:	4a03      	ldr	r2, [pc, #12]	; (80016e4 <HAL_FLASH_Lock+0x10>)
 80016d6:	6913      	ldr	r3, [r2, #16]
 80016d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016dc:	6113      	str	r3, [r2, #16]
}
 80016de:	2000      	movs	r0, #0
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40022000 	.word	0x40022000

080016e8 <FLASH_WaitForLastOperation>:
{
 80016e8:	b538      	push	{r3, r4, r5, lr}
 80016ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff fa90 	bl	8000c10 <HAL_GetTick>
 80016f0:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <FLASH_WaitForLastOperation+0x60>)
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	f013 0f01 	tst.w	r3, #1
 80016fa:	d00a      	beq.n	8001712 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 80016fc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001700:	d0f7      	beq.n	80016f2 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001702:	b1e4      	cbz	r4, 800173e <FLASH_WaitForLastOperation+0x56>
 8001704:	f7ff fa84 	bl	8000c10 <HAL_GetTick>
 8001708:	1b40      	subs	r0, r0, r5
 800170a:	4284      	cmp	r4, r0
 800170c:	d2f1      	bcs.n	80016f2 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 800170e:	2003      	movs	r0, #3
 8001710:	bd38      	pop	{r3, r4, r5, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <FLASH_WaitForLastOperation+0x60>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f013 0f20 	tst.w	r3, #32
 800171a:	d002      	beq.n	8001722 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800171c:	2220      	movs	r2, #32
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <FLASH_WaitForLastOperation+0x60>)
 8001720:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <FLASH_WaitForLastOperation+0x60>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	f013 0f10 	tst.w	r3, #16
 800172a:	d104      	bne.n	8001736 <FLASH_WaitForLastOperation+0x4e>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <FLASH_WaitForLastOperation+0x60>)
 800172e:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001730:	f013 0f04 	tst.w	r3, #4
 8001734:	d005      	beq.n	8001742 <FLASH_WaitForLastOperation+0x5a>
    FLASH_SetErrorCode();
 8001736:	f7ff ff99 	bl	800166c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800173a:	2001      	movs	r0, #1
 800173c:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 800173e:	2003      	movs	r0, #3
 8001740:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001742:	2000      	movs	r0, #0
}
 8001744:	bd38      	pop	{r3, r4, r5, pc}
 8001746:	bf00      	nop
 8001748:	40022000 	.word	0x40022000

0800174c <HAL_FLASH_Program>:
{
 800174c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8001750:	4c23      	ldr	r4, [pc, #140]	; (80017e0 <HAL_FLASH_Program+0x94>)
 8001752:	7e24      	ldrb	r4, [r4, #24]
 8001754:	2c01      	cmp	r4, #1
 8001756:	d103      	bne.n	8001760 <HAL_FLASH_Program+0x14>
 8001758:	2302      	movs	r3, #2
}
 800175a:	4618      	mov	r0, r3
 800175c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001760:	461e      	mov	r6, r3
 8001762:	4690      	mov	r8, r2
 8001764:	460f      	mov	r7, r1
 8001766:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8001768:	2201      	movs	r2, #1
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <HAL_FLASH_Program+0x94>)
 800176c:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800176e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001772:	f7ff ffb9 	bl	80016e8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001776:	4603      	mov	r3, r0
 8001778:	bb70      	cbnz	r0, 80017d8 <HAL_FLASH_Program+0x8c>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800177a:	2c01      	cmp	r4, #1
 800177c:	d029      	beq.n	80017d2 <HAL_FLASH_Program+0x86>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800177e:	2c02      	cmp	r4, #2
 8001780:	d024      	beq.n	80017cc <HAL_FLASH_Program+0x80>
      nbiterations = 4U;
 8001782:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 8001786:	2400      	movs	r4, #0
 8001788:	454c      	cmp	r4, r9
 800178a:	d225      	bcs.n	80017d8 <HAL_FLASH_Program+0x8c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800178c:	0121      	lsls	r1, r4, #4
 800178e:	f1c1 0220 	rsb	r2, r1, #32
 8001792:	f1a1 0320 	sub.w	r3, r1, #32
 8001796:	fa28 f101 	lsr.w	r1, r8, r1
 800179a:	fa06 f202 	lsl.w	r2, r6, r2
 800179e:	4311      	orrs	r1, r2
 80017a0:	fa26 f303 	lsr.w	r3, r6, r3
 80017a4:	4319      	orrs	r1, r3
 80017a6:	b289      	uxth	r1, r1
 80017a8:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 80017ac:	f7ff ff50 	bl	8001650 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80017b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017b4:	f7ff ff98 	bl	80016e8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_FLASH_Program+0x98>)
 80017ba:	691d      	ldr	r5, [r3, #16]
 80017bc:	f025 0501 	bic.w	r5, r5, #1
 80017c0:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 80017c2:	4603      	mov	r3, r0
 80017c4:	b940      	cbnz	r0, 80017d8 <HAL_FLASH_Program+0x8c>
    for (index = 0U; index < nbiterations; index++)
 80017c6:	3401      	adds	r4, #1
 80017c8:	b2e4      	uxtb	r4, r4
 80017ca:	e7dd      	b.n	8001788 <HAL_FLASH_Program+0x3c>
      nbiterations = 2U;
 80017cc:	f04f 0902 	mov.w	r9, #2
 80017d0:	e7d9      	b.n	8001786 <HAL_FLASH_Program+0x3a>
      nbiterations = 1U;
 80017d2:	f04f 0901 	mov.w	r9, #1
 80017d6:	e7d6      	b.n	8001786 <HAL_FLASH_Program+0x3a>
  __HAL_UNLOCK(&pFlash);
 80017d8:	2100      	movs	r1, #0
 80017da:	4a01      	ldr	r2, [pc, #4]	; (80017e0 <HAL_FLASH_Program+0x94>)
 80017dc:	7611      	strb	r1, [r2, #24]
  return status;
 80017de:	e7bc      	b.n	800175a <HAL_FLASH_Program+0xe>
 80017e0:	20000280 	.word	0x20000280
 80017e4:	40022000 	.word	0x40022000

080017e8 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017e8:	2200      	movs	r2, #0
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <FLASH_PageErase+0x1c>)
 80017ec:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <FLASH_PageErase+0x20>)
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	f042 0202 	orr.w	r2, r2, #2
 80017f6:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80017f8:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001800:	611a      	str	r2, [r3, #16]
 8001802:	4770      	bx	lr
 8001804:	20000280 	.word	0x20000280
 8001808:	40022000 	.word	0x40022000

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8001810:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001812:	e088      	b.n	8001926 <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001814:	08de      	lsrs	r6, r3, #3
 8001816:	3608      	adds	r6, #8
 8001818:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800181c:	f003 0e07 	and.w	lr, r3, #7
 8001820:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001824:	270f      	movs	r7, #15
 8001826:	fa07 f70e 	lsl.w	r7, r7, lr
 800182a:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800182e:	690f      	ldr	r7, [r1, #16]
 8001830:	fa07 f70e 	lsl.w	r7, r7, lr
 8001834:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8001836:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 800183a:	e083      	b.n	8001944 <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800183c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800183e:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001840:	68cf      	ldr	r7, [r1, #12]
 8001842:	fa07 f70e 	lsl.w	r7, r7, lr
 8001846:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001848:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800184c:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001850:	684e      	ldr	r6, [r1, #4]
 8001852:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001856:	409e      	lsls	r6, r3
 8001858:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800185a:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800185c:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800185e:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001860:	688d      	ldr	r5, [r1, #8]
 8001862:	fa05 f50e 	lsl.w	r5, r5, lr
 8001866:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001868:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800186a:	684c      	ldr	r4, [r1, #4]
 800186c:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001870:	d058      	beq.n	8001924 <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	4c47      	ldr	r4, [pc, #284]	; (8001990 <HAL_GPIO_Init+0x184>)
 8001874:	69a5      	ldr	r5, [r4, #24]
 8001876:	f045 0501 	orr.w	r5, r5, #1
 800187a:	61a5      	str	r5, [r4, #24]
 800187c:	69a4      	ldr	r4, [r4, #24]
 800187e:	f004 0401 	and.w	r4, r4, #1
 8001882:	9401      	str	r4, [sp, #4]
 8001884:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8001886:	089d      	lsrs	r5, r3, #2
 8001888:	1cae      	adds	r6, r5, #2
 800188a:	4c42      	ldr	r4, [pc, #264]	; (8001994 <HAL_GPIO_Init+0x188>)
 800188c:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001890:	f003 0603 	and.w	r6, r3, #3
 8001894:	00b6      	lsls	r6, r6, #2
 8001896:	270f      	movs	r7, #15
 8001898:	40b7      	lsls	r7, r6
 800189a:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800189e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80018a2:	d06c      	beq.n	800197e <HAL_GPIO_Init+0x172>
 80018a4:	4f3c      	ldr	r7, [pc, #240]	; (8001998 <HAL_GPIO_Init+0x18c>)
 80018a6:	42b8      	cmp	r0, r7
 80018a8:	d06b      	beq.n	8001982 <HAL_GPIO_Init+0x176>
 80018aa:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80018ae:	42b8      	cmp	r0, r7
 80018b0:	d069      	beq.n	8001986 <HAL_GPIO_Init+0x17a>
 80018b2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80018b6:	42b8      	cmp	r0, r7
 80018b8:	d05f      	beq.n	800197a <HAL_GPIO_Init+0x16e>
 80018ba:	2705      	movs	r7, #5
 80018bc:	fa07 f606 	lsl.w	r6, r7, r6
 80018c0:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 80018c2:	3502      	adds	r5, #2
 80018c4:	4e33      	ldr	r6, [pc, #204]	; (8001994 <HAL_GPIO_Init+0x188>)
 80018c6:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ca:	4c34      	ldr	r4, [pc, #208]	; (800199c <HAL_GPIO_Init+0x190>)
 80018cc:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80018ce:	43d4      	mvns	r4, r2
 80018d0:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d4:	684f      	ldr	r7, [r1, #4]
 80018d6:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80018da:	d001      	beq.n	80018e0 <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 80018dc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 80018e0:	4d2e      	ldr	r5, [pc, #184]	; (800199c <HAL_GPIO_Init+0x190>)
 80018e2:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80018e4:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 80018e6:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ea:	684f      	ldr	r7, [r1, #4]
 80018ec:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80018f0:	d001      	beq.n	80018f6 <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 80018f2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 80018f6:	4d29      	ldr	r5, [pc, #164]	; (800199c <HAL_GPIO_Init+0x190>)
 80018f8:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018fa:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 80018fc:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001900:	684f      	ldr	r7, [r1, #4]
 8001902:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001906:	d001      	beq.n	800190c <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 8001908:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 800190c:	4d23      	ldr	r5, [pc, #140]	; (800199c <HAL_GPIO_Init+0x190>)
 800190e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001910:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8001912:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001914:	684e      	ldr	r6, [r1, #4]
 8001916:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800191a:	d001      	beq.n	8001920 <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 800191c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8001920:	4a1e      	ldr	r2, [pc, #120]	; (800199c <HAL_GPIO_Init+0x190>)
 8001922:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8001924:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001926:	680a      	ldr	r2, [r1, #0]
 8001928:	fa32 f403 	lsrs.w	r4, r2, r3
 800192c:	d02d      	beq.n	800198a <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800192e:	2501      	movs	r5, #1
 8001930:	409d      	lsls	r5, r3
    if(iocurrent)
 8001932:	402a      	ands	r2, r5
 8001934:	d0f6      	beq.n	8001924 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001936:	684c      	ldr	r4, [r1, #4]
 8001938:	2c02      	cmp	r4, #2
 800193a:	f43f af6b 	beq.w	8001814 <HAL_GPIO_Init+0x8>
 800193e:	2c12      	cmp	r4, #18
 8001940:	f43f af68 	beq.w	8001814 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8001944:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001946:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800194a:	2403      	movs	r4, #3
 800194c:	fa04 f40e 	lsl.w	r4, r4, lr
 8001950:	43e4      	mvns	r4, r4
 8001952:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001954:	684f      	ldr	r7, [r1, #4]
 8001956:	f007 0703 	and.w	r7, r7, #3
 800195a:	fa07 f70e 	lsl.w	r7, r7, lr
 800195e:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001960:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001962:	684e      	ldr	r6, [r1, #4]
 8001964:	1e77      	subs	r7, r6, #1
 8001966:	2f01      	cmp	r7, #1
 8001968:	f67f af68 	bls.w	800183c <HAL_GPIO_Init+0x30>
 800196c:	2e11      	cmp	r6, #17
 800196e:	f43f af65 	beq.w	800183c <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001972:	2e12      	cmp	r6, #18
 8001974:	f47f af72 	bne.w	800185c <HAL_GPIO_Init+0x50>
 8001978:	e760      	b.n	800183c <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800197a:	2703      	movs	r7, #3
 800197c:	e79e      	b.n	80018bc <HAL_GPIO_Init+0xb0>
 800197e:	2700      	movs	r7, #0
 8001980:	e79c      	b.n	80018bc <HAL_GPIO_Init+0xb0>
 8001982:	2701      	movs	r7, #1
 8001984:	e79a      	b.n	80018bc <HAL_GPIO_Init+0xb0>
 8001986:	2702      	movs	r7, #2
 8001988:	e798      	b.n	80018bc <HAL_GPIO_Init+0xb0>
  }
}
 800198a:	b003      	add	sp, #12
 800198c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	40010000 	.word	0x40010000
 8001998:	48000400 	.word	0x48000400
 800199c:	40010400 	.word	0x40010400

080019a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a0:	b90a      	cbnz	r2, 80019a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019a2:	6281      	str	r1, [r0, #40]	; 0x28
 80019a4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019a6:	6181      	str	r1, [r0, #24]
 80019a8:	4770      	bx	lr
	...

080019ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019ac:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	4203      	tst	r3, r0
 80019b4:	d100      	bne.n	80019b8 <HAL_GPIO_EXTI_IRQHandler+0xc>
 80019b6:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019b8:	4b02      	ldr	r3, [pc, #8]	; (80019c4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80019ba:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019bc:	f002 fb32 	bl	8004024 <HAL_GPIO_EXTI_Callback>
  }
}
 80019c0:	e7f9      	b.n	80019b6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80019c2:	bf00      	nop
 80019c4:	40010400 	.word	0x40010400

080019c8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019c8:	6803      	ldr	r3, [r0, #0]
 80019ca:	699a      	ldr	r2, [r3, #24]
 80019cc:	f012 0f02 	tst.w	r2, #2
 80019d0:	d001      	beq.n	80019d6 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019d2:	2200      	movs	r2, #0
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019d6:	6803      	ldr	r3, [r0, #0]
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	f012 0f01 	tst.w	r2, #1
 80019de:	d103      	bne.n	80019e8 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019e0:	699a      	ldr	r2, [r3, #24]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	619a      	str	r2, [r3, #24]
 80019e8:	4770      	bx	lr

080019ea <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80019ea:	b410      	push	{r4}
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80019ec:	f011 0f01 	tst.w	r1, #1
 80019f0:	d009      	beq.n	8001a06 <I2C_Disable_IRQ+0x1c>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 80019f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80019f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80019fa:	2b28      	cmp	r3, #40	; 0x28
 80019fc:	d001      	beq.n	8001a02 <I2C_Disable_IRQ+0x18>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80019fe:	23f2      	movs	r3, #242	; 0xf2
 8001a00:	e002      	b.n	8001a08 <I2C_Disable_IRQ+0x1e>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001a02:	2342      	movs	r3, #66	; 0x42
 8001a04:	e000      	b.n	8001a08 <I2C_Disable_IRQ+0x1e>
  uint32_t tmpisr = 0U;
 8001a06:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001a08:	f011 0f02 	tst.w	r1, #2
 8001a0c:	d009      	beq.n	8001a22 <I2C_Disable_IRQ+0x38>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001a0e:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8001a12:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001a16:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001a1a:	2a28      	cmp	r2, #40	; 0x28
 8001a1c:	d019      	beq.n	8001a52 <I2C_Disable_IRQ+0x68>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001a1e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001a22:	f011 0f04 	tst.w	r1, #4
 8001a26:	d001      	beq.n	8001a2c <I2C_Disable_IRQ+0x42>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001a28:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8001a2c:	f001 0211 	and.w	r2, r1, #17
 8001a30:	2a11      	cmp	r2, #17
 8001a32:	d010      	beq.n	8001a56 <I2C_Disable_IRQ+0x6c>
 8001a34:	f001 0112 	and.w	r1, r1, #18
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8001a38:	2912      	cmp	r1, #18
 8001a3a:	d00f      	beq.n	8001a5c <I2C_Disable_IRQ+0x72>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8001a3c:	2912      	cmp	r1, #18
 8001a3e:	d010      	beq.n	8001a62 <I2C_Disable_IRQ+0x78>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001a40:	6801      	ldr	r1, [r0, #0]
 8001a42:	680a      	ldr	r2, [r1, #0]
 8001a44:	ea22 0303 	bic.w	r3, r2, r3
 8001a48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
}
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a50:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001a52:	4623      	mov	r3, r4
 8001a54:	e7e5      	b.n	8001a22 <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001a56:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8001a5a:	e7eb      	b.n	8001a34 <I2C_Disable_IRQ+0x4a>
    tmpisr |= I2C_IT_STOPI;
 8001a5c:	f043 0320 	orr.w	r3, r3, #32
 8001a60:	e7ec      	b.n	8001a3c <I2C_Disable_IRQ+0x52>
    tmpisr |= I2C_IT_TCI;
 8001a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a66:	e7eb      	b.n	8001a40 <I2C_Disable_IRQ+0x56>

08001a68 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	d059      	beq.n	8001b20 <HAL_I2C_Init+0xb8>
{
 8001a6c:	b510      	push	{r4, lr}
 8001a6e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a70:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d043      	beq.n	8001b00 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a78:	2324      	movs	r3, #36	; 0x24
 8001a7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001a7e:	6822      	ldr	r2, [r4, #0]
 8001a80:	6813      	ldr	r3, [r2, #0]
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a88:	6822      	ldr	r2, [r4, #0]
 8001a8a:	6863      	ldr	r3, [r4, #4]
 8001a8c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001a90:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a92:	6822      	ldr	r2, [r4, #0]
 8001a94:	6893      	ldr	r3, [r2, #8]
 8001a96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a9a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a9c:	68e3      	ldr	r3, [r4, #12]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d033      	beq.n	8001b0a <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aa2:	6822      	ldr	r2, [r4, #0]
 8001aa4:	68a3      	ldr	r3, [r4, #8]
 8001aa6:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001aaa:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001aac:	68e3      	ldr	r3, [r4, #12]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d031      	beq.n	8001b16 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ab2:	6822      	ldr	r2, [r4, #0]
 8001ab4:	6853      	ldr	r3, [r2, #4]
 8001ab6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001abe:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ac0:	6822      	ldr	r2, [r4, #0]
 8001ac2:	68d3      	ldr	r3, [r2, #12]
 8001ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ac8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001aca:	6822      	ldr	r2, [r4, #0]
 8001acc:	6923      	ldr	r3, [r4, #16]
 8001ace:	6961      	ldr	r1, [r4, #20]
 8001ad0:	430b      	orrs	r3, r1
 8001ad2:	69a1      	ldr	r1, [r4, #24]
 8001ad4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ad8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ada:	6822      	ldr	r2, [r4, #0]
 8001adc:	69e3      	ldr	r3, [r4, #28]
 8001ade:	6a21      	ldr	r1, [r4, #32]
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001ae4:	6822      	ldr	r2, [r4, #0]
 8001ae6:	6813      	ldr	r3, [r2, #0]
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aee:	2000      	movs	r0, #0
 8001af0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001af2:	2320      	movs	r3, #32
 8001af4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001af8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001afe:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001b00:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001b04:	f002 fd64 	bl	80045d0 <HAL_I2C_MspInit>
 8001b08:	e7b6      	b.n	8001a78 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b0a:	6822      	ldr	r2, [r4, #0]
 8001b0c:	68a3      	ldr	r3, [r4, #8]
 8001b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b12:	6093      	str	r3, [r2, #8]
 8001b14:	e7ca      	b.n	8001aac <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	e7c8      	b.n	8001ab2 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001b20:	2001      	movs	r0, #1
 8001b22:	4770      	bx	lr

08001b24 <HAL_I2C_EV_IRQHandler>:
{
 8001b24:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001b26:	6803      	ldr	r3, [r0, #0]
 8001b28:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001b2a:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8001b2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b2e:	b103      	cbz	r3, 8001b32 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8001b30:	4798      	blx	r3
 8001b32:	bd08      	pop	{r3, pc}

08001b34 <HAL_I2C_SlaveTxCpltCallback>:
{
 8001b34:	4770      	bx	lr

08001b36 <HAL_I2C_SlaveRxCpltCallback>:
{
 8001b36:	4770      	bx	lr

08001b38 <I2C_ITSlaveSequentialCplt>:
{
 8001b38:	b510      	push	{r4, lr}
 8001b3a:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001b42:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b29      	cmp	r3, #41	; 0x29
 8001b4a:	d005      	beq.n	8001b58 <I2C_ITSlaveSequentialCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001b4c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b2a      	cmp	r3, #42	; 0x2a
 8001b54:	d00f      	beq.n	8001b76 <I2C_ITSlaveSequentialCplt+0x3e>
 8001b56:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b58:	2328      	movs	r3, #40	; 0x28
 8001b5a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b5e:	2321      	movs	r3, #33	; 0x21
 8001b60:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b62:	2101      	movs	r1, #1
 8001b64:	f7ff ff41 	bl	80019ea <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f7ff ffe0 	bl	8001b34 <HAL_I2C_SlaveTxCpltCallback>
 8001b74:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b76:	2328      	movs	r3, #40	; 0x28
 8001b78:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b7c:	2322      	movs	r3, #34	; 0x22
 8001b7e:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b80:	2102      	movs	r1, #2
 8001b82:	f7ff ff32 	bl	80019ea <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001b86:	2300      	movs	r3, #0
 8001b88:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	f7ff ffd2 	bl	8001b36 <HAL_I2C_SlaveRxCpltCallback>
}
 8001b92:	e7e0      	b.n	8001b56 <I2C_ITSlaveSequentialCplt+0x1e>

08001b94 <HAL_I2C_AddrCallback>:
{
 8001b94:	4770      	bx	lr

08001b96 <I2C_ITAddrCplt>:
{
 8001b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 8001b98:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001b9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001ba0:	2b28      	cmp	r3, #40	; 0x28
 8001ba2:	d006      	beq.n	8001bb2 <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ba4:	6803      	ldr	r3, [r0, #0]
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001baa:	2300      	movs	r3, #0
 8001bac:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8001bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bb2:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8001bb4:	6803      	ldr	r3, [r0, #0]
 8001bb6:	699e      	ldr	r6, [r3, #24]
 8001bb8:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	0c12      	lsrs	r2, r2, #16
 8001bc0:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001bca:	68df      	ldr	r7, [r3, #12]
 8001bcc:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bd0:	68c1      	ldr	r1, [r0, #12]
 8001bd2:	2902      	cmp	r1, #2
 8001bd4:	d121      	bne.n	8001c1a <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001bd6:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8001bda:	f015 0f06 	tst.w	r5, #6
 8001bde:	d110      	bne.n	8001c02 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8001be0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001be2:	3101      	adds	r1, #1
 8001be4:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001be6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001be8:	2902      	cmp	r1, #2
 8001bea:	d1e1      	bne.n	8001bb0 <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 8001bec:	2100      	movs	r1, #0
 8001bee:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bf0:	2008      	movs	r0, #8
 8001bf2:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8001bf4:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001bf8:	4631      	mov	r1, r6
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f7ff ffca 	bl	8001b94 <HAL_I2C_AddrCallback>
 8001c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c02:	2104      	movs	r1, #4
 8001c04:	f7ff fef1 	bl	80019ea <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c0e:	463a      	mov	r2, r7
 8001c10:	4631      	mov	r1, r6
 8001c12:	4620      	mov	r0, r4
 8001c14:	f7ff ffbe 	bl	8001b94 <HAL_I2C_AddrCallback>
 8001c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	f7ff fee5 	bl	80019ea <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001c20:	2300      	movs	r3, #0
 8001c22:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c26:	462a      	mov	r2, r5
 8001c28:	4631      	mov	r1, r6
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f7ff ffb2 	bl	8001b94 <HAL_I2C_AddrCallback>
 8001c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c32 <HAL_I2C_ListenCpltCallback>:
{
 8001c32:	4770      	bx	lr

08001c34 <I2C_ITListenCplt>:
{
 8001c34:	b510      	push	{r4, lr}
 8001c36:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <I2C_ITListenCplt+0x60>)
 8001c3a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001c40:	2220      	movs	r2, #32
 8001c42:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c46:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001c4a:	6343      	str	r3, [r0, #52]	; 0x34
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8001c4c:	f011 0f04 	tst.w	r1, #4
 8001c50:	d012      	beq.n	8001c78 <I2C_ITListenCplt+0x44>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001c52:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	6242      	str	r2, [r0, #36]	; 0x24
 8001c58:	6802      	ldr	r2, [r0, #0]
 8001c5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c5c:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8001c5e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8001c60:	b153      	cbz	r3, 8001c78 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8001c62:	3b01      	subs	r3, #1
 8001c64:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8001c66:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c70:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001c78:	2107      	movs	r1, #7
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f7ff feb5 	bl	80019ea <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	2210      	movs	r2, #16
 8001c84:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8001c86:	2300      	movs	r3, #0
 8001c88:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7ff ffd0 	bl	8001c32 <HAL_I2C_ListenCpltCallback>
 8001c92:	bd10      	pop	{r4, pc}
 8001c94:	ffff0000 	.word	0xffff0000

08001c98 <HAL_I2C_ErrorCallback>:
{
 8001c98:	4770      	bx	lr

08001c9a <HAL_I2C_AbortCpltCallback>:
{
 8001c9a:	4770      	bx	lr

08001c9c <I2C_ITError>:
{
 8001c9c:	b510      	push	{r4, lr}
 8001c9e:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001ca6:	4a3a      	ldr	r2, [pc, #232]	; (8001d90 <I2C_ITError+0xf4>)
 8001ca8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001caa:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8001cac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001cae:	4319      	orrs	r1, r3
 8001cb0:	6441      	str	r1, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8001cb2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b28      	cmp	r3, #40	; 0x28
 8001cba:	d018      	beq.n	8001cee <I2C_ITError+0x52>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001cbc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cc0:	b2db      	uxtb	r3, r3
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 8001cc2:	2b29      	cmp	r3, #41	; 0x29
 8001cc4:	d013      	beq.n	8001cee <I2C_ITError+0x52>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001cc6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cca:	b2db      	uxtb	r3, r3
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8001cce:	d00e      	beq.n	8001cee <I2C_ITError+0x52>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001cd0:	2107      	movs	r1, #7
 8001cd2:	f7ff fe8a 	bl	80019ea <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001cd6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b60      	cmp	r3, #96	; 0x60
 8001cde:	d002      	beq.n	8001ce6 <I2C_ITError+0x4a>
      hi2c->State         = HAL_I2C_STATE_READY;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001cea:	6363      	str	r3, [r4, #52]	; 0x34
 8001cec:	e00a      	b.n	8001d04 <I2C_ITError+0x68>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001cee:	2103      	movs	r1, #3
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff fe7a 	bl	80019ea <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001cf6:	2328      	movs	r3, #40	; 0x28
 8001cf8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001d00:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <I2C_ITError+0xf8>)
 8001d02:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8001d0c:	d10f      	bne.n	8001d2e <I2C_ITError+0x92>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001d14:	d11e      	bne.n	8001d54 <I2C_ITError+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001d16:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b60      	cmp	r3, #96	; 0x60
 8001d1e:	d02c      	beq.n	8001d7a <I2C_ITError+0xde>
    __HAL_UNLOCK(hi2c);
 8001d20:	2300      	movs	r3, #0
 8001d22:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7ff ffb6 	bl	8001c98 <HAL_I2C_ErrorCallback>
 8001d2c:	bd10      	pop	{r4, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d34:	601a      	str	r2, [r3, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001d36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d38:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <I2C_ITError+0xfc>)
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001d42:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d44:	f7ff fc5f 	bl	8001606 <HAL_DMA_Abort_IT>
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	d0ef      	beq.n	8001d2c <I2C_ITError+0x90>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001d4c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d50:	4798      	blx	r3
 8001d52:	bd10      	pop	{r4, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d5a:	601a      	str	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001d5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <I2C_ITError+0xfc>)
 8001d60:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8001d62:	2300      	movs	r3, #0
 8001d64:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001d68:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001d6a:	f7ff fc4c 	bl	8001606 <HAL_DMA_Abort_IT>
 8001d6e:	2800      	cmp	r0, #0
 8001d70:	d0dc      	beq.n	8001d2c <I2C_ITError+0x90>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001d72:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001d74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d76:	4798      	blx	r3
 8001d78:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001d7a:	2320      	movs	r3, #32
 8001d7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001d80:	2300      	movs	r3, #0
 8001d82:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001d86:	4620      	mov	r0, r4
 8001d88:	f7ff ff87 	bl	8001c9a <HAL_I2C_AbortCpltCallback>
 8001d8c:	bd10      	pop	{r4, pc}
 8001d8e:	bf00      	nop
 8001d90:	ffff0000 	.word	0xffff0000
 8001d94:	08001ec5 	.word	0x08001ec5
 8001d98:	0800207f 	.word	0x0800207f

08001d9c <I2C_ITSlaveCplt>:
{
 8001d9c:	b538      	push	{r3, r4, r5, lr}
 8001d9e:	4604      	mov	r4, r0
 8001da0:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001da2:	6803      	ldr	r3, [r0, #0]
 8001da4:	2220      	movs	r2, #32
 8001da6:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001da8:	6803      	ldr	r3, [r0, #0]
 8001daa:	2208      	movs	r2, #8
 8001dac:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001dae:	2107      	movs	r1, #7
 8001db0:	f7ff fe1b 	bl	80019ea <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001db4:	6822      	ldr	r2, [r4, #0]
 8001db6:	6853      	ldr	r3, [r2, #4]
 8001db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dbc:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8001dbe:	6822      	ldr	r2, [r4, #0]
 8001dc0:	6853      	ldr	r3, [r2, #4]
 8001dc2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001dc6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001dca:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001dce:	f023 0301 	bic.w	r3, r3, #1
 8001dd2:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f7ff fdf7 	bl	80019c8 <I2C_Flush_TXDR>
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8001dda:	6822      	ldr	r2, [r4, #0]
 8001ddc:	6813      	ldr	r3, [r2, #0]
 8001dde:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001de2:	d103      	bne.n	8001dec <I2C_ITSlaveCplt+0x50>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8001de4:	6813      	ldr	r3, [r2, #0]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8001de6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001dea:	d009      	beq.n	8001e00 <I2C_ITSlaveCplt+0x64>
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8001dec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b21      	cmp	r3, #33	; 0x21
 8001df4:	d03a      	beq.n	8001e6c <I2C_ITSlaveCplt+0xd0>
 8001df6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8001e00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	b11b      	cbz	r3, 8001e0e <I2C_ITSlaveCplt+0x72>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	6463      	str	r3, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 8001e0e:	f015 0f04 	tst.w	r5, #4
 8001e12:	d011      	beq.n	8001e38 <I2C_ITSlaveCplt+0x9c>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001e14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e16:	1c59      	adds	r1, r3, #1
 8001e18:	6261      	str	r1, [r4, #36]	; 0x24
 8001e1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e1c:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 8001e1e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e20:	b153      	cbz	r3, 8001e38 <I2C_ITSlaveCplt+0x9c>
      hi2c->XferSize--;
 8001e22:	3b01      	subs	r3, #1
 8001e24:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001e26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e32:	f043 0304 	orr.w	r3, r3, #4
 8001e36:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001e40:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e44:	b9bb      	cbnz	r3, 8001e76 <I2C_ITSlaveCplt+0xda>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e4c:	d121      	bne.n	8001e92 <I2C_ITSlaveCplt+0xf6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e4e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b22      	cmp	r3, #34	; 0x22
 8001e56:	d028      	beq.n	8001eaa <I2C_ITSlaveCplt+0x10e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e58:	2320      	movs	r3, #32
 8001e5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e64:	4620      	mov	r0, r4
 8001e66:	f7ff fe65 	bl	8001b34 <HAL_I2C_SlaveTxCpltCallback>
 8001e6a:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8001e6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	e7c3      	b.n	8001dfe <I2C_ITSlaveCplt+0x62>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e76:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7ff ff0f 	bl	8001c9c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001e7e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b28      	cmp	r3, #40	; 0x28
 8001e86:	d1f0      	bne.n	8001e6a <I2C_ITSlaveCplt+0xce>
      I2C_ITListenCplt(hi2c, ITFlags);
 8001e88:	4629      	mov	r1, r5
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f7ff fed2 	bl	8001c34 <I2C_ITListenCplt>
 8001e90:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <I2C_ITSlaveCplt+0x124>)
 8001e94:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001e96:	2320      	movs	r3, #32
 8001e98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f7ff fec5 	bl	8001c32 <HAL_I2C_ListenCpltCallback>
 8001ea8:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001eaa:	2320      	movs	r3, #32
 8001eac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f7ff fe3d 	bl	8001b36 <HAL_I2C_SlaveRxCpltCallback>
 8001ebc:	bd38      	pop	{r3, r4, r5, pc}
 8001ebe:	bf00      	nop
 8001ec0:	ffff0000 	.word	0xffff0000

08001ec4 <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 8001ec4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	f000 80a0 	beq.w	800200e <I2C_Slave_ISR_IT+0x14a>
{
 8001ece:	b570      	push	{r4, r5, r6, lr}
 8001ed0:	4616      	mov	r6, r2
 8001ed2:	460d      	mov	r5, r1
 8001ed4:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8001edc:	f011 0f10 	tst.w	r1, #16
 8001ee0:	d03f      	beq.n	8001f62 <I2C_Slave_ISR_IT+0x9e>
 8001ee2:	f012 0f10 	tst.w	r2, #16
 8001ee6:	d03c      	beq.n	8001f62 <I2C_Slave_ISR_IT+0x9e>
    if (hi2c->XferCount == 0U)
 8001ee8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	bb43      	cbnz	r3, 8001f40 <I2C_Slave_ISR_IT+0x7c>
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8001eee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ef4:	d010      	beq.n	8001f18 <I2C_Slave_ISR_IT+0x54>
 8001ef6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001efc:	d00c      	beq.n	8001f18 <I2C_Slave_ISR_IT+0x54>
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001efe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f04:	d004      	beq.n	8001f10 <I2C_Slave_ISR_IT+0x4c>
 8001f06:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b29      	cmp	r3, #41	; 0x29
 8001f0e:	d00d      	beq.n	8001f2c <I2C_Slave_ISR_IT+0x68>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	2210      	movs	r2, #16
 8001f14:	61da      	str	r2, [r3, #28]
 8001f16:	e01a      	b.n	8001f4e <I2C_Slave_ISR_IT+0x8a>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8001f18:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001f1c:	b2db      	uxtb	r3, r3
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 8001f1e:	2b28      	cmp	r3, #40	; 0x28
 8001f20:	d1ed      	bne.n	8001efe <I2C_Slave_ISR_IT+0x3a>
        I2C_ITListenCplt(hi2c, ITFlags);
 8001f22:	4629      	mov	r1, r5
 8001f24:	4620      	mov	r0, r4
 8001f26:	f7ff fe85 	bl	8001c34 <I2C_ITListenCplt>
 8001f2a:	e010      	b.n	8001f4e <I2C_Slave_ISR_IT+0x8a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	2210      	movs	r2, #16
 8001f30:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8001f32:	4620      	mov	r0, r4
 8001f34:	f7ff fd48 	bl	80019c8 <I2C_Flush_TXDR>
        I2C_ITSlaveSequentialCplt(hi2c);
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f7ff fdfd 	bl	8001b38 <I2C_ITSlaveSequentialCplt>
 8001f3e:	e006      	b.n	8001f4e <I2C_Slave_ISR_IT+0x8a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f40:	6803      	ldr	r3, [r0, #0]
 8001f42:	2210      	movs	r2, #16
 8001f44:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f46:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6443      	str	r3, [r0, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 8001f4e:	f015 0f20 	tst.w	r5, #32
 8001f52:	d002      	beq.n	8001f5a <I2C_Slave_ISR_IT+0x96>
 8001f54:	f016 0f20 	tst.w	r6, #32
 8001f58:	d154      	bne.n	8002004 <I2C_Slave_ISR_IT+0x140>
  __HAL_UNLOCK(hi2c);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8001f60:	bd70      	pop	{r4, r5, r6, pc}
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 8001f62:	f015 0f04 	tst.w	r5, #4
 8001f66:	d01f      	beq.n	8001fa8 <I2C_Slave_ISR_IT+0xe4>
 8001f68:	f016 0f04 	tst.w	r6, #4
 8001f6c:	d01c      	beq.n	8001fa8 <I2C_Slave_ISR_IT+0xe4>
    if (hi2c->XferCount > 0U)
 8001f6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b16b      	cbz	r3, 8001f90 <I2C_Slave_ISR_IT+0xcc>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	6262      	str	r2, [r4, #36]	; 0x24
 8001f7a:	6822      	ldr	r2, [r4, #0]
 8001f7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f7e:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001f80:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f82:	3b01      	subs	r3, #1
 8001f84:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001f86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8001f90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1da      	bne.n	8001f4e <I2C_Slave_ISR_IT+0x8a>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 8001f98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 8001f9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f9e:	d0d6      	beq.n	8001f4e <I2C_Slave_ISR_IT+0x8a>
      I2C_ITSlaveSequentialCplt(hi2c);
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f7ff fdc9 	bl	8001b38 <I2C_ITSlaveSequentialCplt>
 8001fa6:	e7d2      	b.n	8001f4e <I2C_Slave_ISR_IT+0x8a>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8001fa8:	f015 0f08 	tst.w	r5, #8
 8001fac:	d002      	beq.n	8001fb4 <I2C_Slave_ISR_IT+0xf0>
 8001fae:	f016 0f08 	tst.w	r6, #8
 8001fb2:	d117      	bne.n	8001fe4 <I2C_Slave_ISR_IT+0x120>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8001fb4:	f015 0f02 	tst.w	r5, #2
 8001fb8:	d0c9      	beq.n	8001f4e <I2C_Slave_ISR_IT+0x8a>
 8001fba:	f016 0f02 	tst.w	r6, #2
 8001fbe:	d0c6      	beq.n	8001f4e <I2C_Slave_ISR_IT+0x8a>
    if (hi2c->XferCount > 0U)
 8001fc0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	b19b      	cbz	r3, 8001fee <I2C_Slave_ISR_IT+0x12a>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001fc6:	6822      	ldr	r2, [r4, #0]
 8001fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fca:	1c59      	adds	r1, r3, #1
 8001fcc:	6261      	str	r1, [r4, #36]	; 0x24
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001fd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001fdc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	8523      	strh	r3, [r4, #40]	; 0x28
 8001fe2:	e7b4      	b.n	8001f4e <I2C_Slave_ISR_IT+0x8a>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f7ff fdd5 	bl	8001b96 <I2C_ITAddrCplt>
 8001fec:	e7af      	b.n	8001f4e <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 8001fee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff4:	d002      	beq.n	8001ffc <I2C_Slave_ISR_IT+0x138>
 8001ff6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1a8      	bne.n	8001f4e <I2C_Slave_ISR_IT+0x8a>
        I2C_ITSlaveSequentialCplt(hi2c);
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f7ff fd9b 	bl	8001b38 <I2C_ITSlaveSequentialCplt>
 8002002:	e7a4      	b.n	8001f4e <I2C_Slave_ISR_IT+0x8a>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002004:	4629      	mov	r1, r5
 8002006:	4620      	mov	r0, r4
 8002008:	f7ff fec8 	bl	8001d9c <I2C_ITSlaveCplt>
 800200c:	e7a5      	b.n	8001f5a <I2C_Slave_ISR_IT+0x96>
  __HAL_LOCK(hi2c);
 800200e:	2002      	movs	r0, #2
 8002010:	4770      	bx	lr

08002012 <HAL_I2C_ER_IRQHandler>:
{
 8002012:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002014:	6802      	ldr	r2, [r0, #0]
 8002016:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002018:	6811      	ldr	r1, [r2, #0]
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 800201a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800201e:	d009      	beq.n	8002034 <HAL_I2C_ER_IRQHandler+0x22>
 8002020:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002024:	d006      	beq.n	8002034 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002026:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002028:	f044 0401 	orr.w	r4, r4, #1
 800202c:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800202e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002032:	61d4      	str	r4, [r2, #28]
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002034:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002038:	d00a      	beq.n	8002050 <HAL_I2C_ER_IRQHandler+0x3e>
 800203a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800203e:	d007      	beq.n	8002050 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002040:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002042:	f042 0208 	orr.w	r2, r2, #8
 8002046:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002048:	6802      	ldr	r2, [r0, #0]
 800204a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800204e:	61d4      	str	r4, [r2, #28]
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8002050:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002054:	d00a      	beq.n	800206c <HAL_I2C_ER_IRQHandler+0x5a>
 8002056:	f011 0f80 	tst.w	r1, #128	; 0x80
 800205a:	d007      	beq.n	800206c <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800205c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800205e:	f043 0302 	orr.w	r3, r3, #2
 8002062:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002064:	6803      	ldr	r3, [r0, #0]
 8002066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800206a:	61da      	str	r2, [r3, #28]
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800206c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800206e:	f013 0f0b 	tst.w	r3, #11
 8002072:	d100      	bne.n	8002076 <HAL_I2C_ER_IRQHandler+0x64>
 8002074:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002076:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002078:	f7ff fe10 	bl	8001c9c <I2C_ITError>
}
 800207c:	e7fa      	b.n	8002074 <HAL_I2C_ER_IRQHandler+0x62>

0800207e <I2C_DMAAbort>:
{
 800207e:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002080:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002082:	6802      	ldr	r2, [r0, #0]
 8002084:	6853      	ldr	r3, [r2, #4]
 8002086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800208a:	6053      	str	r3, [r2, #4]
  hi2c->hdmatx->XferAbortCallback = NULL;
 800208c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800208e:	2300      	movs	r3, #0
 8002090:	6353      	str	r3, [r2, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002092:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002094:	6353      	str	r3, [r2, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002096:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b60      	cmp	r3, #96	; 0x60
 800209e:	d002      	beq.n	80020a6 <I2C_DMAAbort+0x28>
    HAL_I2C_ErrorCallback(hi2c);
 80020a0:	f7ff fdfa 	bl	8001c98 <HAL_I2C_ErrorCallback>
 80020a4:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80020a6:	2320      	movs	r3, #32
 80020a8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 80020ac:	f7ff fdf5 	bl	8001c9a <HAL_I2C_AbortCpltCallback>
 80020b0:	bd08      	pop	{r3, pc}

080020b2 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d001      	beq.n	80020c0 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80020bc:	2002      	movs	r0, #2
 80020be:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80020c0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d020      	beq.n	800210a <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80020c8:	2301      	movs	r3, #1
 80020ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020ce:	2324      	movs	r3, #36	; 0x24
 80020d0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80020d4:	6802      	ldr	r2, [r0, #0]
 80020d6:	6813      	ldr	r3, [r2, #0]
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020de:	6802      	ldr	r2, [r0, #0]
 80020e0:	6813      	ldr	r3, [r2, #0]
 80020e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020e6:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80020e8:	6802      	ldr	r2, [r0, #0]
 80020ea:	6813      	ldr	r3, [r2, #0]
 80020ec:	4319      	orrs	r1, r3
 80020ee:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80020f0:	6802      	ldr	r2, [r0, #0]
 80020f2:	6813      	ldr	r3, [r2, #0]
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80020fa:	2320      	movs	r3, #32
 80020fc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002100:	2300      	movs	r3, #0
 8002102:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8002106:	4618      	mov	r0, r3
 8002108:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800210a:	2002      	movs	r0, #2
  }
}
 800210c:	4770      	bx	lr

0800210e <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b20      	cmp	r3, #32
 8002116:	d001      	beq.n	800211c <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002118:	2002      	movs	r0, #2
 800211a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800211c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002120:	2b01      	cmp	r3, #1
 8002122:	d01e      	beq.n	8002162 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002124:	2301      	movs	r3, #1
 8002126:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800212a:	2324      	movs	r3, #36	; 0x24
 800212c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8002130:	6802      	ldr	r2, [r0, #0]
 8002132:	6813      	ldr	r3, [r2, #0]
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800213a:	6802      	ldr	r2, [r0, #0]
 800213c:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800213e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8002142:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8002146:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002148:	6802      	ldr	r2, [r0, #0]
 800214a:	6813      	ldr	r3, [r2, #0]
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002152:	2320      	movs	r3, #32
 8002154:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002158:	2300      	movs	r3, #0
 800215a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 800215e:	4618      	mov	r0, r3
 8002160:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002162:	2002      	movs	r0, #2
  }
}
 8002164:	4770      	bx	lr
	...

08002168 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8002168:	4a02      	ldr	r2, [pc, #8]	; (8002174 <HAL_PWR_EnableBkUpAccess+0xc>)
 800216a:	6813      	ldr	r3, [r2, #0]
 800216c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4770      	bx	lr
 8002174:	40007000 	.word	0x40007000

08002178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002178:	b570      	push	{r4, r5, r6, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217e:	6803      	ldr	r3, [r0, #0]
 8002180:	f013 0f01 	tst.w	r3, #1
 8002184:	d063      	beq.n	800224e <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002186:	4bb5      	ldr	r3, [pc, #724]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b04      	cmp	r3, #4
 8002190:	d046      	beq.n	8002220 <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002192:	4bb2      	ldr	r3, [pc, #712]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b08      	cmp	r3, #8
 800219c:	d03b      	beq.n	8002216 <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219e:	6863      	ldr	r3, [r4, #4]
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a4:	f000 808e 	beq.w	80022c4 <HAL_RCC_OscConfig+0x14c>
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f040 8091 	bne.w	80022d0 <HAL_RCC_OscConfig+0x158>
 80021ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021b2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021c4:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021c6:	4aa5      	ldr	r2, [pc, #660]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 80021c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021ca:	f023 030f 	bic.w	r3, r3, #15
 80021ce:	68a1      	ldr	r1, [r4, #8]
 80021d0:	430b      	orrs	r3, r1
 80021d2:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d4:	6863      	ldr	r3, [r4, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8094 	beq.w	8002304 <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7fe fd18 	bl	8000c10 <HAL_GetTick>
 80021e0:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e6:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	4b9c      	ldr	r3, [pc, #624]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	2201      	movs	r2, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	4219      	tst	r1, r3
 8002206:	d122      	bne.n	800224e <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002208:	f7fe fd02 	bl	8000c10 <HAL_GetTick>
 800220c:	1b40      	subs	r0, r0, r5
 800220e:	2864      	cmp	r0, #100	; 0x64
 8002210:	d9e7      	bls.n	80021e2 <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 8002212:	2003      	movs	r0, #3
 8002214:	e2ab      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002216:	4b91      	ldr	r3, [pc, #580]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800221e:	d0be      	beq.n	800219e <HAL_RCC_OscConfig+0x26>
 8002220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002224:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	4b8c      	ldr	r3, [pc, #560]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 800222a:	6819      	ldr	r1, [r3, #0]
 800222c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002230:	fa93 f3a3 	rbit	r3, r3
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	2201      	movs	r2, #1
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	4219      	tst	r1, r3
 8002244:	d003      	beq.n	800224e <HAL_RCC_OscConfig+0xd6>
 8002246:	6863      	ldr	r3, [r4, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 8289 	beq.w	8002760 <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	f013 0f02 	tst.w	r3, #2
 8002254:	f000 809c 	beq.w	8002390 <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002258:	4b80      	ldr	r3, [pc, #512]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f013 0f0c 	tst.w	r3, #12
 8002260:	d072      	beq.n	8002348 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002262:	4b7e      	ldr	r3, [pc, #504]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b08      	cmp	r3, #8
 800226c:	d067      	beq.n	800233e <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800226e:	6923      	ldr	r3, [r4, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80cb 	beq.w	800240c <HAL_RCC_OscConfig+0x294>
 8002276:	2201      	movs	r2, #1
 8002278:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002284:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe fcc0 	bl	8000c10 <HAL_GetTick>
 8002290:	4605      	mov	r5, r0
 8002292:	2302      	movs	r3, #2
 8002294:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	4b70      	ldr	r3, [pc, #448]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 800229a:	6819      	ldr	r1, [r3, #0]
 800229c:	2302      	movs	r3, #2
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	2201      	movs	r2, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	4219      	tst	r1, r3
 80022b2:	f040 809c 	bne.w	80023ee <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b6:	f7fe fcab 	bl	8000c10 <HAL_GetTick>
 80022ba:	1b40      	subs	r0, r0, r5
 80022bc:	2802      	cmp	r0, #2
 80022be:	d9e8      	bls.n	8002292 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80022c0:	2003      	movs	r0, #3
 80022c2:	e254      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c4:	4a65      	ldr	r2, [pc, #404]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 80022c6:	6813      	ldr	r3, [r2, #0]
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e77a      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e>
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d4:	d009      	beq.n	80022ea <HAL_RCC_OscConfig+0x172>
 80022d6:	4b61      	ldr	r3, [pc, #388]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	e76d      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e>
 80022ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022ee:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	e760      	b.n	80021c6 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8002304:	f7fe fc84 	bl	8000c10 <HAL_GetTick>
 8002308:	4605      	mov	r5, r0
 800230a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800230e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002312:	4b52      	ldr	r3, [pc, #328]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 8002314:	6819      	ldr	r1, [r3, #0]
 8002316:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	2201      	movs	r2, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	4219      	tst	r1, r3
 800232e:	d08e      	beq.n	800224e <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002330:	f7fe fc6e 	bl	8000c10 <HAL_GetTick>
 8002334:	1b40      	subs	r0, r0, r5
 8002336:	2864      	cmp	r0, #100	; 0x64
 8002338:	d9e7      	bls.n	800230a <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 800233a:	2003      	movs	r0, #3
 800233c:	e217      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002346:	d192      	bne.n	800226e <HAL_RCC_OscConfig+0xf6>
 8002348:	2302      	movs	r3, #2
 800234a:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	4b43      	ldr	r3, [pc, #268]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 8002350:	6819      	ldr	r1, [r3, #0]
 8002352:	2302      	movs	r3, #2
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	2201      	movs	r2, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	4219      	tst	r1, r3
 8002368:	d004      	beq.n	8002374 <HAL_RCC_OscConfig+0x1fc>
 800236a:	6923      	ldr	r3, [r4, #16]
 800236c:	4293      	cmp	r3, r2
 800236e:	d001      	beq.n	8002374 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 8002370:	2001      	movs	r0, #1
 8002372:	e1fc      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4839      	ldr	r0, [pc, #228]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 8002376:	6803      	ldr	r3, [r0, #0]
 8002378:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800237c:	6961      	ldr	r1, [r4, #20]
 800237e:	22f8      	movs	r2, #248	; 0xf8
 8002380:	fa92 f2a2 	rbit	r2, r2
 8002384:	fab2 f282 	clz	r2, r2
 8002388:	fa01 f202 	lsl.w	r2, r1, r2
 800238c:	4313      	orrs	r3, r2
 800238e:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	f013 0f08 	tst.w	r3, #8
 8002396:	f000 808d 	beq.w	80024b4 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800239a:	69a3      	ldr	r3, [r4, #24]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d061      	beq.n	8002464 <HAL_RCC_OscConfig+0x2ec>
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a6:	fab2 f282 	clz	r2, r2
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <HAL_RCC_OscConfig+0x2e8>)
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7fe fc2d 	bl	8000c10 <HAL_GetTick>
 80023b6:	4605      	mov	r5, r0
 80023b8:	2302      	movs	r3, #2
 80023ba:	fa93 f2a3 	rbit	r2, r3
 80023be:	fa93 f2a3 	rbit	r2, r3
 80023c2:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c6:	4a25      	ldr	r2, [pc, #148]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 80023c8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	2201      	movs	r2, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	4219      	tst	r1, r3
 80023de:	d169      	bne.n	80024b4 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e0:	f7fe fc16 	bl	8000c10 <HAL_GetTick>
 80023e4:	1b40      	subs	r0, r0, r5
 80023e6:	2802      	cmp	r0, #2
 80023e8:	d9e6      	bls.n	80023b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023ea:	2003      	movs	r0, #3
 80023ec:	e1bf      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ee:	481b      	ldr	r0, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 80023f0:	6803      	ldr	r3, [r0, #0]
 80023f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023f6:	6961      	ldr	r1, [r4, #20]
 80023f8:	22f8      	movs	r2, #248	; 0xf8
 80023fa:	fa92 f2a2 	rbit	r2, r2
 80023fe:	fab2 f282 	clz	r2, r2
 8002402:	fa01 f202 	lsl.w	r2, r1, r2
 8002406:	4313      	orrs	r3, r2
 8002408:	6003      	str	r3, [r0, #0]
 800240a:	e7c1      	b.n	8002390 <HAL_RCC_OscConfig+0x218>
 800240c:	2301      	movs	r3, #1
 800240e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800241a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002424:	f7fe fbf4 	bl	8000c10 <HAL_GetTick>
 8002428:	4605      	mov	r5, r0
 800242a:	2302      	movs	r3, #2
 800242c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_RCC_OscConfig+0x2e4>)
 8002432:	6819      	ldr	r1, [r3, #0]
 8002434:	2302      	movs	r3, #2
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	2201      	movs	r2, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	4219      	tst	r1, r3
 800244a:	d0a1      	beq.n	8002390 <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800244c:	f7fe fbe0 	bl	8000c10 <HAL_GetTick>
 8002450:	1b40      	subs	r0, r0, r5
 8002452:	2802      	cmp	r0, #2
 8002454:	d9e9      	bls.n	800242a <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8002456:	2003      	movs	r0, #3
 8002458:	e189      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000
 8002460:	10908120 	.word	0x10908120
 8002464:	2201      	movs	r2, #1
 8002466:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246a:	fab2 f282 	clz	r2, r2
 800246e:	4bc1      	ldr	r3, [pc, #772]	; (8002774 <HAL_RCC_OscConfig+0x5fc>)
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002478:	f7fe fbca 	bl	8000c10 <HAL_GetTick>
 800247c:	4605      	mov	r5, r0
 800247e:	2302      	movs	r3, #2
 8002480:	fa93 f2a3 	rbit	r2, r3
 8002484:	fa93 f2a3 	rbit	r2, r3
 8002488:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248c:	4aba      	ldr	r2, [pc, #744]	; (8002778 <HAL_RCC_OscConfig+0x600>)
 800248e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2201      	movs	r2, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	4219      	tst	r1, r3
 80024a4:	d006      	beq.n	80024b4 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a6:	f7fe fbb3 	bl	8000c10 <HAL_GetTick>
 80024aa:	1b40      	subs	r0, r0, r5
 80024ac:	2802      	cmp	r0, #2
 80024ae:	d9e6      	bls.n	800247e <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 80024b0:	2003      	movs	r0, #3
 80024b2:	e15c      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	f013 0f04 	tst.w	r3, #4
 80024ba:	f000 80b3 	beq.w	8002624 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024be:	4bae      	ldr	r3, [pc, #696]	; (8002778 <HAL_RCC_OscConfig+0x600>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80024c6:	d126      	bne.n	8002516 <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c8:	4bab      	ldr	r3, [pc, #684]	; (8002778 <HAL_RCC_OscConfig+0x600>)
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024d0:	61da      	str	r2, [r3, #28]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80024dc:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4ba7      	ldr	r3, [pc, #668]	; (800277c <HAL_RCC_OscConfig+0x604>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80024e6:	d018      	beq.n	800251a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e8:	68e3      	ldr	r3, [r4, #12]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d029      	beq.n	8002542 <HAL_RCC_OscConfig+0x3ca>
 80024ee:	bb73      	cbnz	r3, 800254e <HAL_RCC_OscConfig+0x3d6>
 80024f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024f4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80024f8:	6a1a      	ldr	r2, [r3, #32]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	621a      	str	r2, [r3, #32]
 8002500:	6a1a      	ldr	r2, [r3, #32]
 8002502:	f022 0204 	bic.w	r2, r2, #4
 8002506:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002508:	68e3      	ldr	r3, [r4, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d05d      	beq.n	80025ca <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7fe fb7f 	bl	8000c10 <HAL_GetTick>
 8002512:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	e047      	b.n	80025a6 <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 8002516:	2500      	movs	r5, #0
 8002518:	e7e1      	b.n	80024de <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800251a:	4a98      	ldr	r2, [pc, #608]	; (800277c <HAL_RCC_OscConfig+0x604>)
 800251c:	6813      	ldr	r3, [r2, #0]
 800251e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002522:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002524:	f7fe fb74 	bl	8000c10 <HAL_GetTick>
 8002528:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252a:	4b94      	ldr	r3, [pc, #592]	; (800277c <HAL_RCC_OscConfig+0x604>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002532:	d1d9      	bne.n	80024e8 <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002534:	f7fe fb6c 	bl	8000c10 <HAL_GetTick>
 8002538:	1b80      	subs	r0, r0, r6
 800253a:	2864      	cmp	r0, #100	; 0x64
 800253c:	d9f5      	bls.n	800252a <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 800253e:	2003      	movs	r0, #3
 8002540:	e115      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002542:	4a8d      	ldr	r2, [pc, #564]	; (8002778 <HAL_RCC_OscConfig+0x600>)
 8002544:	6a13      	ldr	r3, [r2, #32]
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	e7dc      	b.n	8002508 <HAL_RCC_OscConfig+0x390>
 800254e:	2b05      	cmp	r3, #5
 8002550:	d009      	beq.n	8002566 <HAL_RCC_OscConfig+0x3ee>
 8002552:	4b89      	ldr	r3, [pc, #548]	; (8002778 <HAL_RCC_OscConfig+0x600>)
 8002554:	6a1a      	ldr	r2, [r3, #32]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	621a      	str	r2, [r3, #32]
 800255c:	6a1a      	ldr	r2, [r3, #32]
 800255e:	f022 0204 	bic.w	r2, r2, #4
 8002562:	621a      	str	r2, [r3, #32]
 8002564:	e7d0      	b.n	8002508 <HAL_RCC_OscConfig+0x390>
 8002566:	4b84      	ldr	r3, [pc, #528]	; (8002778 <HAL_RCC_OscConfig+0x600>)
 8002568:	6a1a      	ldr	r2, [r3, #32]
 800256a:	f042 0204 	orr.w	r2, r2, #4
 800256e:	621a      	str	r2, [r3, #32]
 8002570:	6a1a      	ldr	r2, [r3, #32]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	621a      	str	r2, [r3, #32]
 8002578:	e7c6      	b.n	8002508 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	4b7f      	ldr	r3, [pc, #508]	; (8002778 <HAL_RCC_OscConfig+0x600>)
 800257c:	6a19      	ldr	r1, [r3, #32]
 800257e:	2302      	movs	r3, #2
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2201      	movs	r2, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	4219      	tst	r1, r3
 8002594:	d145      	bne.n	8002622 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7fe fb3b 	bl	8000c10 <HAL_GetTick>
 800259a:	1b80      	subs	r0, r0, r6
 800259c:	f241 3388 	movw	r3, #5000	; 0x1388
 80025a0:	4298      	cmp	r0, r3
 80025a2:	f200 80df 	bhi.w	8002764 <HAL_RCC_OscConfig+0x5ec>
 80025a6:	2302      	movs	r3, #2
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b0:	fab3 f383 	clz	r3, r3
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	f043 0302 	orr.w	r3, r3, #2
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d0dd      	beq.n	800257a <HAL_RCC_OscConfig+0x402>
 80025be:	2302      	movs	r3, #2
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	4b6c      	ldr	r3, [pc, #432]	; (8002778 <HAL_RCC_OscConfig+0x600>)
 80025c6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025c8:	e7d9      	b.n	800257e <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ca:	f7fe fb21 	bl	8000c10 <HAL_GetTick>
 80025ce:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	e015      	b.n	80025fe <HAL_RCC_OscConfig+0x486>
 80025d2:	4b69      	ldr	r3, [pc, #420]	; (8002778 <HAL_RCC_OscConfig+0x600>)
 80025d4:	6a19      	ldr	r1, [r3, #32]
 80025d6:	2302      	movs	r3, #2
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	2201      	movs	r2, #1
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	4219      	tst	r1, r3
 80025ec:	d019      	beq.n	8002622 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7fe fb0f 	bl	8000c10 <HAL_GetTick>
 80025f2:	1b80      	subs	r0, r0, r6
 80025f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80025f8:	4298      	cmp	r0, r3
 80025fa:	f200 80b5 	bhi.w	8002768 <HAL_RCC_OscConfig+0x5f0>
 80025fe:	2302      	movs	r3, #2
 8002600:	fa93 f2a3 	rbit	r2, r3
 8002604:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	f043 0302 	orr.w	r3, r3, #2
 8002612:	2b02      	cmp	r3, #2
 8002614:	d0dd      	beq.n	80025d2 <HAL_RCC_OscConfig+0x45a>
 8002616:	2302      	movs	r3, #2
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	4b56      	ldr	r3, [pc, #344]	; (8002778 <HAL_RCC_OscConfig+0x600>)
 800261e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002620:	e7d9      	b.n	80025d6 <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002622:	bbb5      	cbnz	r5, 8002692 <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002624:	69e3      	ldr	r3, [r4, #28]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80a0 	beq.w	800276c <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800262c:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_RCC_OscConfig+0x600>)
 800262e:	6852      	ldr	r2, [r2, #4]
 8002630:	f002 020c 	and.w	r2, r2, #12
 8002634:	2a08      	cmp	r2, #8
 8002636:	f000 80a3 	beq.w	8002780 <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263a:	2b02      	cmp	r3, #2
 800263c:	d02f      	beq.n	800269e <HAL_RCC_OscConfig+0x526>
 800263e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002642:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800264e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe fada 	bl	8000c10 <HAL_GetTick>
 800265c:	4604      	mov	r4, r0
 800265e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002662:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002666:	4b44      	ldr	r3, [pc, #272]	; (8002778 <HAL_RCC_OscConfig+0x600>)
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	2201      	movs	r2, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	4219      	tst	r1, r3
 8002682:	d06b      	beq.n	800275c <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fac4 	bl	8000c10 <HAL_GetTick>
 8002688:	1b00      	subs	r0, r0, r4
 800268a:	2802      	cmp	r0, #2
 800268c:	d9e7      	bls.n	800265e <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 800268e:	2003      	movs	r0, #3
 8002690:	e06d      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002692:	4a39      	ldr	r2, [pc, #228]	; (8002778 <HAL_RCC_OscConfig+0x600>)
 8002694:	69d3      	ldr	r3, [r2, #28]
 8002696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269a:	61d3      	str	r3, [r2, #28]
 800269c:	e7c2      	b.n	8002624 <HAL_RCC_OscConfig+0x4ac>
 800269e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026a2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80026b8:	f7fe faaa 	bl	8000c10 <HAL_GetTick>
 80026bc:	4605      	mov	r5, r0
 80026be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c2:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c6:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <HAL_RCC_OscConfig+0x600>)
 80026c8:	6819      	ldr	r1, [r3, #0]
 80026ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2201      	movs	r2, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	4219      	tst	r1, r3
 80026e2:	d006      	beq.n	80026f2 <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e4:	f7fe fa94 	bl	8000c10 <HAL_GetTick>
 80026e8:	1b40      	subs	r0, r0, r5
 80026ea:	2802      	cmp	r0, #2
 80026ec:	d9e7      	bls.n	80026be <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 80026ee:	2003      	movs	r0, #3
 80026f0:	e03d      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f2:	4921      	ldr	r1, [pc, #132]	; (8002778 <HAL_RCC_OscConfig+0x600>)
 80026f4:	684b      	ldr	r3, [r1, #4]
 80026f6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80026fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026fc:	6a20      	ldr	r0, [r4, #32]
 80026fe:	4302      	orrs	r2, r0
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
 8002704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002708:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002714:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800271e:	f7fe fa77 	bl	8000c10 <HAL_GetTick>
 8002722:	4604      	mov	r4, r0
 8002724:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002728:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_RCC_OscConfig+0x600>)
 800272e:	6819      	ldr	r1, [r3, #0]
 8002730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	fab3 f383 	clz	r3, r3
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	2201      	movs	r2, #1
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	4219      	tst	r1, r3
 8002748:	d106      	bne.n	8002758 <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274a:	f7fe fa61 	bl	8000c10 <HAL_GetTick>
 800274e:	1b00      	subs	r0, r0, r4
 8002750:	2802      	cmp	r0, #2
 8002752:	d9e7      	bls.n	8002724 <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 8002754:	2003      	movs	r0, #3
 8002756:	e00a      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002758:	2000      	movs	r0, #0
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>
 800275c:	2000      	movs	r0, #0
 800275e:	e006      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 8002760:	2001      	movs	r0, #1
 8002762:	e004      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8002764:	2003      	movs	r0, #3
 8002766:	e002      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8002768:	2003      	movs	r0, #3
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 800276c:	2000      	movs	r0, #0
}
 800276e:	b002      	add	sp, #8
 8002770:	bd70      	pop	{r4, r5, r6, pc}
 8002772:	bf00      	nop
 8002774:	10908120 	.word	0x10908120
 8002778:	40021000 	.word	0x40021000
 800277c:	40007000 	.word	0x40007000
      return HAL_ERROR;
 8002780:	2001      	movs	r0, #1
 8002782:	e7f4      	b.n	800276e <HAL_RCC_OscConfig+0x5f6>

08002784 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002784:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002786:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002788:	f003 020c 	and.w	r2, r3, #12
 800278c:	2a08      	cmp	r2, #8
 800278e:	d124      	bne.n	80027da <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002790:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8002794:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002798:	fa92 f2a2 	rbit	r2, r2
 800279c:	fab2 f282 	clz	r2, r2
 80027a0:	fa21 f202 	lsr.w	r2, r1, r2
 80027a4:	490f      	ldr	r1, [pc, #60]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x60>)
 80027a6:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027a8:	4a0d      	ldr	r2, [pc, #52]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x5c>)
 80027aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027ac:	f002 020f 	and.w	r2, r2, #15
 80027b0:	210f      	movs	r1, #15
 80027b2:	fa91 f1a1 	rbit	r1, r1
 80027b6:	fab1 f181 	clz	r1, r1
 80027ba:	40ca      	lsrs	r2, r1
 80027bc:	490a      	ldr	r1, [pc, #40]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x64>)
 80027be:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80027c4:	d103      	bne.n	80027ce <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_GetSysClockFreq+0x68>)
 80027c8:	fb03 f000 	mul.w	r0, r3, r0
 80027cc:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x6c>)
 80027d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80027d4:	fb03 f000 	mul.w	r0, r3, r0
 80027d8:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80027da:	4805      	ldr	r0, [pc, #20]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08007a40 	.word	0x08007a40
 80027e8:	08007a50 	.word	0x08007a50
 80027ec:	003d0900 	.word	0x003d0900
 80027f0:	007a1200 	.word	0x007a1200

080027f4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80027f4:	4b70      	ldr	r3, [pc, #448]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	428b      	cmp	r3, r1
 80027fe:	d20c      	bcs.n	800281a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002800:	4a6d      	ldr	r2, [pc, #436]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	6813      	ldr	r3, [r2, #0]
 8002804:	f023 0307 	bic.w	r3, r3, #7
 8002808:	430b      	orrs	r3, r1
 800280a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800280c:	6813      	ldr	r3, [r2, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	4299      	cmp	r1, r3
 8002814:	d001      	beq.n	800281a <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8002816:	2001      	movs	r0, #1
 8002818:	4770      	bx	lr
{
 800281a:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281c:	6803      	ldr	r3, [r0, #0]
 800281e:	f013 0f02 	tst.w	r3, #2
 8002822:	d006      	beq.n	8002832 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002824:	4a65      	ldr	r2, [pc, #404]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002826:	6853      	ldr	r3, [r2, #4]
 8002828:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800282c:	6884      	ldr	r4, [r0, #8]
 800282e:	4323      	orrs	r3, r4
 8002830:	6053      	str	r3, [r2, #4]
 8002832:	460d      	mov	r5, r1
 8002834:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002836:	6803      	ldr	r3, [r0, #0]
 8002838:	f013 0f01 	tst.w	r3, #1
 800283c:	d07a      	beq.n	8002934 <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283e:	6843      	ldr	r3, [r0, #4]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d02f      	beq.n	80028a4 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002844:	2b02      	cmp	r3, #2
 8002846:	d042      	beq.n	80028ce <HAL_RCC_ClockConfig+0xda>
 8002848:	2202      	movs	r2, #2
 800284a:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	4a5b      	ldr	r2, [pc, #364]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002850:	6810      	ldr	r0, [r2, #0]
 8002852:	2202      	movs	r2, #2
 8002854:	fa92 f2a2 	rbit	r2, r2
 8002858:	fab2 f282 	clz	r2, r2
 800285c:	f002 021f 	and.w	r2, r2, #31
 8002860:	2101      	movs	r1, #1
 8002862:	fa01 f202 	lsl.w	r2, r1, r2
 8002866:	4210      	tst	r0, r2
 8002868:	f000 80a4 	beq.w	80029b4 <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286c:	4953      	ldr	r1, [pc, #332]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800286e:	684a      	ldr	r2, [r1, #4]
 8002870:	f022 0203 	bic.w	r2, r2, #3
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002878:	f7fe f9ca 	bl	8000c10 <HAL_GetTick>
 800287c:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287e:	6863      	ldr	r3, [r4, #4]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d039      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002884:	2b02      	cmp	r3, #2
 8002886:	d046      	beq.n	8002916 <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002888:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f013 0f0c 	tst.w	r3, #12
 8002890:	d050      	beq.n	8002934 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002892:	f7fe f9bd 	bl	8000c10 <HAL_GetTick>
 8002896:	1b80      	subs	r0, r0, r6
 8002898:	f241 3388 	movw	r3, #5000	; 0x1388
 800289c:	4298      	cmp	r0, r3
 800289e:	d9f3      	bls.n	8002888 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 80028a0:	2003      	movs	r0, #3
 80028a2:	bd70      	pop	{r4, r5, r6, pc}
 80028a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028a8:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ac:	4a43      	ldr	r2, [pc, #268]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028ae:	6810      	ldr	r0, [r2, #0]
 80028b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028b4:	fa92 f2a2 	rbit	r2, r2
 80028b8:	fab2 f282 	clz	r2, r2
 80028bc:	f002 021f 	and.w	r2, r2, #31
 80028c0:	2101      	movs	r1, #1
 80028c2:	fa01 f202 	lsl.w	r2, r1, r2
 80028c6:	4210      	tst	r0, r2
 80028c8:	d1d0      	bne.n	800286c <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 80028ca:	2001      	movs	r0, #1
 80028cc:	bd70      	pop	{r4, r5, r6, pc}
 80028ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028d2:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d6:	4a39      	ldr	r2, [pc, #228]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	6810      	ldr	r0, [r2, #0]
 80028da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028de:	fa92 f2a2 	rbit	r2, r2
 80028e2:	fab2 f282 	clz	r2, r2
 80028e6:	f002 021f 	and.w	r2, r2, #31
 80028ea:	2101      	movs	r1, #1
 80028ec:	fa01 f202 	lsl.w	r2, r1, r2
 80028f0:	4210      	tst	r0, r2
 80028f2:	d1bb      	bne.n	800286c <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 80028f4:	2001      	movs	r0, #1
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028f8:	4b30      	ldr	r3, [pc, #192]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b04      	cmp	r3, #4
 8002902:	d017      	beq.n	8002934 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002904:	f7fe f984 	bl	8000c10 <HAL_GetTick>
 8002908:	1b80      	subs	r0, r0, r6
 800290a:	f241 3388 	movw	r3, #5000	; 0x1388
 800290e:	4298      	cmp	r0, r3
 8002910:	d9f2      	bls.n	80028f8 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 8002912:	2003      	movs	r0, #3
 8002914:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002916:	4b29      	ldr	r3, [pc, #164]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b08      	cmp	r3, #8
 8002920:	d008      	beq.n	8002934 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002922:	f7fe f975 	bl	8000c10 <HAL_GetTick>
 8002926:	1b80      	subs	r0, r0, r6
 8002928:	f241 3388 	movw	r3, #5000	; 0x1388
 800292c:	4298      	cmp	r0, r3
 800292e:	d9f2      	bls.n	8002916 <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 8002930:	2003      	movs	r0, #3
 8002932:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002934:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	429d      	cmp	r5, r3
 800293e:	d20c      	bcs.n	800295a <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002940:	4a1d      	ldr	r2, [pc, #116]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	6813      	ldr	r3, [r2, #0]
 8002944:	f023 0307 	bic.w	r3, r3, #7
 8002948:	432b      	orrs	r3, r5
 800294a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800294c:	6813      	ldr	r3, [r2, #0]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	429d      	cmp	r5, r3
 8002954:	d001      	beq.n	800295a <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 8002956:	2001      	movs	r0, #1
}
 8002958:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	f013 0f04 	tst.w	r3, #4
 8002960:	d006      	beq.n	8002970 <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002962:	4a16      	ldr	r2, [pc, #88]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002964:	6853      	ldr	r3, [r2, #4]
 8002966:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800296a:	68e1      	ldr	r1, [r4, #12]
 800296c:	430b      	orrs	r3, r1
 800296e:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	f013 0f08 	tst.w	r3, #8
 8002976:	d007      	beq.n	8002988 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002978:	4a10      	ldr	r2, [pc, #64]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800297a:	6853      	ldr	r3, [r2, #4]
 800297c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002980:	6921      	ldr	r1, [r4, #16]
 8002982:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002986:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002988:	f7ff fefc 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002994:	22f0      	movs	r2, #240	; 0xf0
 8002996:	fa92 f2a2 	rbit	r2, r2
 800299a:	fab2 f282 	clz	r2, r2
 800299e:	40d3      	lsrs	r3, r2
 80029a0:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <HAL_RCC_ClockConfig+0x1cc>)
 80029a2:	5cd3      	ldrb	r3, [r2, r3]
 80029a4:	40d8      	lsrs	r0, r3
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <HAL_RCC_ClockConfig+0x1d0>)
 80029a8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80029aa:	2000      	movs	r0, #0
 80029ac:	f7fe f900 	bl	8000bb0 <HAL_InitTick>
  return HAL_OK;
 80029b0:	2000      	movs	r0, #0
 80029b2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80029b4:	2001      	movs	r0, #1
 80029b6:	bd70      	pop	{r4, r5, r6, pc}
 80029b8:	40022000 	.word	0x40022000
 80029bc:	40021000 	.word	0x40021000
 80029c0:	08007a70 	.word	0x08007a70
 80029c4:	20000000 	.word	0x20000000

080029c8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80029c8:	4b01      	ldr	r3, [pc, #4]	; (80029d0 <HAL_RCC_GetHCLKFreq+0x8>)
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000000 	.word	0x20000000

080029d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029d6:	f7ff fff7 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029e6:	fa92 f2a2 	rbit	r2, r2
 80029ea:	fab2 f282 	clz	r2, r2
 80029ee:	40d3      	lsrs	r3, r2
 80029f0:	4a02      	ldr	r2, [pc, #8]	; (80029fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80029f2:	5cd3      	ldrb	r3, [r2, r3]
}    
 80029f4:	40d8      	lsrs	r0, r3
 80029f6:	bd08      	pop	{r3, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	08007a80 	.word	0x08007a80

08002a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a00:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a02:	f7ff ffe1 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a0e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a12:	fa92 f2a2 	rbit	r2, r2
 8002a16:	fab2 f282 	clz	r2, r2
 8002a1a:	40d3      	lsrs	r3, r2
 8002a1c:	4a02      	ldr	r2, [pc, #8]	; (8002a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a1e:	5cd3      	ldrb	r3, [r2, r3]
} 
 8002a20:	40d8      	lsrs	r0, r3
 8002a22:	bd08      	pop	{r3, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	08007a80 	.word	0x08007a80

08002a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a32:	6803      	ldr	r3, [r0, #0]
 8002a34:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002a38:	d044      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3a:	4b64      	ldr	r3, [pc, #400]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002a42:	d179      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a44:	4b61      	ldr	r3, [pc, #388]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002a46:	69da      	ldr	r2, [r3, #28]
 8002a48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a4c:	61da      	str	r2, [r3, #28]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a58:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5a:	4b5d      	ldr	r3, [pc, #372]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a62:	d06b      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a64:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a68:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002a6c:	d021      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8002a6e:	6862      	ldr	r2, [r4, #4]
 8002a70:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d01c      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a78:	4854      	ldr	r0, [pc, #336]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002a7a:	6a01      	ldr	r1, [r0, #32]
 8002a7c:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8002a80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a84:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a88:	fab2 f282 	clz	r2, r2
 8002a8c:	4f51      	ldr	r7, [pc, #324]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a8e:	443a      	add	r2, r7
 8002a90:	0092      	lsls	r2, r2, #2
 8002a92:	f04f 0e01 	mov.w	lr, #1
 8002a96:	f8c2 e000 	str.w	lr, [r2]
 8002a9a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	443b      	add	r3, r7
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002aaa:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002aac:	f011 0f01 	tst.w	r1, #1
 8002ab0:	d158      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ab2:	4a46      	ldr	r2, [pc, #280]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002ab4:	6a13      	ldr	r3, [r2, #32]
 8002ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aba:	6861      	ldr	r1, [r4, #4]
 8002abc:	430b      	orrs	r3, r1
 8002abe:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ac0:	2d00      	cmp	r5, #0
 8002ac2:	d17a      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	f013 0f01 	tst.w	r3, #1
 8002aca:	d006      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002acc:	4a3f      	ldr	r2, [pc, #252]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002ace:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002ad0:	f023 0303 	bic.w	r3, r3, #3
 8002ad4:	68a1      	ldr	r1, [r4, #8]
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	f013 0f20 	tst.w	r3, #32
 8002ae0:	d006      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ae2:	4a3a      	ldr	r2, [pc, #232]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002ae4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002ae6:	f023 0310 	bic.w	r3, r3, #16
 8002aea:	68e1      	ldr	r1, [r4, #12]
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002af6:	d006      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002af8:	4a34      	ldr	r2, [pc, #208]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002afa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002afc:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002b00:	6921      	ldr	r1, [r4, #16]
 8002b02:	430b      	orrs	r3, r1
 8002b04:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002b0c:	d006      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b0e:	4a2f      	ldr	r2, [pc, #188]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002b10:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002b12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b16:	6961      	ldr	r1, [r4, #20]
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002b1c:	6823      	ldr	r3, [r4, #0]
 8002b1e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002b22:	d051      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002b24:	4a29      	ldr	r2, [pc, #164]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002b26:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002b28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b2c:	69a1      	ldr	r1, [r4, #24]
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b32:	2000      	movs	r0, #0
}
 8002b34:	b003      	add	sp, #12
 8002b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002b38:	2500      	movs	r5, #0
 8002b3a:	e78e      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3c:	4a24      	ldr	r2, [pc, #144]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b3e:	6813      	ldr	r3, [r2, #0]
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002b46:	f7fe f863 	bl	8000c10 <HAL_GetTick>
 8002b4a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b54:	d186      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b56:	f7fe f85b 	bl	8000c10 <HAL_GetTick>
 8002b5a:	1b80      	subs	r0, r0, r6
 8002b5c:	2864      	cmp	r0, #100	; 0x64
 8002b5e:	d9f5      	bls.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8002b60:	2003      	movs	r0, #3
 8002b62:	e7e7      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8002b64:	f7fe f854 	bl	8000c10 <HAL_GetTick>
 8002b68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6a:	e014      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002b6e:	6a19      	ldr	r1, [r3, #32]
 8002b70:	2302      	movs	r3, #2
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	2201      	movs	r2, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	4219      	tst	r1, r3
 8002b86:	d194      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b88:	f7fe f842 	bl	8000c10 <HAL_GetTick>
 8002b8c:	1b80      	subs	r0, r0, r6
 8002b8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b92:	4298      	cmp	r0, r3
 8002b94:	d816      	bhi.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b96:	2302      	movs	r3, #2
 8002b98:	fa93 f2a3 	rbit	r2, r3
 8002b9c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba0:	fab3 f383 	clz	r3, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	f043 0302 	orr.w	r3, r3, #2
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d0de      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002bb6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002bb8:	e7da      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bba:	69d3      	ldr	r3, [r2, #28]
 8002bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	61d3      	str	r3, [r2, #28]
 8002bc2:	e77f      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8002bc4:	2003      	movs	r0, #3
 8002bc6:	e7b5      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 8002bc8:	2000      	movs	r0, #0
 8002bca:	e7b3      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	10908100 	.word	0x10908100

08002bd8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002bd8:	b538      	push	{r3, r4, r5, lr}
 8002bda:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002bdc:	6802      	ldr	r2, [r0, #0]
 8002bde:	68d3      	ldr	r3, [r2, #12]
 8002be0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002be4:	60d3      	str	r3, [r2, #12]
  
  tickstart = HAL_GetTick();
 8002be6:	f7fe f813 	bl	8000c10 <HAL_GetTick>
 8002bea:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f013 0f20 	tst.w	r3, #32
 8002bf4:	d107      	bne.n	8002c06 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002bf6:	f7fe f80b 	bl	8000c10 <HAL_GetTick>
 8002bfa:	1b40      	subs	r0, r0, r5
 8002bfc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002c00:	d9f4      	bls.n	8002bec <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 8002c02:	2003      	movs	r0, #3
    } 
  }

  return HAL_OK;
}
 8002c04:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002c06:	2000      	movs	r0, #0
 8002c08:	bd38      	pop	{r3, r4, r5, pc}

08002c0a <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002c0a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c0c:	6803      	ldr	r3, [r0, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002c14:	d001      	beq.n	8002c1a <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8002c16:	2000      	movs	r0, #0
 8002c18:	bd38      	pop	{r3, r4, r5, pc}
 8002c1a:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c20:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002c22:	f7fd fff5 	bl	8000c10 <HAL_GetTick>
 8002c26:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c28:	6823      	ldr	r3, [r4, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002c30:	d107      	bne.n	8002c42 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002c32:	f7fd ffed 	bl	8000c10 <HAL_GetTick>
 8002c36:	1b40      	subs	r0, r0, r5
 8002c38:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002c3c:	d9f4      	bls.n	8002c28 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8002c3e:	2003      	movs	r0, #3
}
 8002c40:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;  
 8002c42:	2000      	movs	r0, #0
 8002c44:	bd38      	pop	{r3, r4, r5, pc}

08002c46 <HAL_RTC_Init>:
{
 8002c46:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	d05c      	beq.n	8002d06 <HAL_RTC_Init+0xc0>
 8002c4c:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c4e:	7f43      	ldrb	r3, [r0, #29]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d041      	beq.n	8002cd8 <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002c54:	2302      	movs	r3, #2
 8002c56:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	22ca      	movs	r2, #202	; 0xca
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	2253      	movs	r2, #83	; 0x53
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c64:	4620      	mov	r0, r4
 8002c66:	f7ff ffd0 	bl	8002c0a <RTC_EnterInitMode>
 8002c6a:	4605      	mov	r5, r0
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d137      	bne.n	8002ce0 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c70:	6822      	ldr	r2, [r4, #0]
 8002c72:	6893      	ldr	r3, [r2, #8]
 8002c74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c7c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c7e:	6821      	ldr	r1, [r4, #0]
 8002c80:	688a      	ldr	r2, [r1, #8]
 8002c82:	6863      	ldr	r3, [r4, #4]
 8002c84:	6920      	ldr	r0, [r4, #16]
 8002c86:	4303      	orrs	r3, r0
 8002c88:	6960      	ldr	r0, [r4, #20]
 8002c8a:	4303      	orrs	r3, r0
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	68e2      	ldr	r2, [r4, #12]
 8002c94:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002c96:	6822      	ldr	r2, [r4, #0]
 8002c98:	6913      	ldr	r3, [r2, #16]
 8002c9a:	68a1      	ldr	r1, [r4, #8]
 8002c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002ca0:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	68d3      	ldr	r3, [r2, #12]
 8002ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002caa:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f013 0f20 	tst.w	r3, #32
 8002cb4:	d01b      	beq.n	8002cee <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002cb6:	6822      	ldr	r2, [r4, #0]
 8002cb8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cbe:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002cc0:	6822      	ldr	r2, [r4, #0]
 8002cc2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002cc4:	69a1      	ldr	r1, [r4, #24]
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	22ff      	movs	r2, #255	; 0xff
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	7763      	strb	r3, [r4, #29]
}
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002cd8:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002cda:	f001 fcbf 	bl	800465c <HAL_RTC_MspInit>
 8002cde:	e7b9      	b.n	8002c54 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	22ff      	movs	r2, #255	; 0xff
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8002cea:	2501      	movs	r5, #1
 8002cec:	e7f2      	b.n	8002cd4 <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f7ff ff72 	bl	8002bd8 <HAL_RTC_WaitForSynchro>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	d0de      	beq.n	8002cb6 <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	22ff      	movs	r2, #255	; 0xff
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002cfe:	2304      	movs	r3, #4
 8002d00:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8002d02:	2501      	movs	r5, #1
 8002d04:	e7e6      	b.n	8002cd4 <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 8002d06:	2501      	movs	r5, #1
 8002d08:	e7e4      	b.n	8002cd4 <HAL_RTC_Init+0x8e>

08002d0a <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002d0a:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8002d0c:	e002      	b.n	8002d14 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8002d0e:	3301      	adds	r3, #1
    Value -= 10U;
 8002d10:	380a      	subs	r0, #10
 8002d12:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002d14:	2809      	cmp	r0, #9
 8002d16:	d8fa      	bhi.n	8002d0e <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	b2db      	uxtb	r3, r3
}
 8002d1c:	4318      	orrs	r0, r3
 8002d1e:	4770      	bx	lr

08002d20 <HAL_RTC_SetTime>:
{
 8002d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002d22:	7f03      	ldrb	r3, [r0, #28]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d077      	beq.n	8002e18 <HAL_RTC_SetTime+0xf8>
 8002d28:	460e      	mov	r6, r1
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d30:	2302      	movs	r3, #2
 8002d32:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8002d34:	2a00      	cmp	r2, #0
 8002d36:	d146      	bne.n	8002dc6 <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d38:	6803      	ldr	r3, [r0, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d40:	d101      	bne.n	8002d46 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d46:	7830      	ldrb	r0, [r6, #0]
 8002d48:	f7ff ffdf 	bl	8002d0a <RTC_ByteToBcd2>
 8002d4c:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002d4e:	7870      	ldrb	r0, [r6, #1]
 8002d50:	f7ff ffdb 	bl	8002d0a <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d54:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002d58:	78b0      	ldrb	r0, [r6, #2]
 8002d5a:	f7ff ffd6 	bl	8002d0a <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002d5e:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8002d60:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d62:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	22ca      	movs	r2, #202	; 0xca
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	2253      	movs	r2, #83	; 0x53
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d72:	4620      	mov	r0, r4
 8002d74:	f7ff ff49 	bl	8002c0a <RTC_EnterInitMode>
 8002d78:	4607      	mov	r7, r0
 8002d7a:	2800      	cmp	r0, #0
 8002d7c:	d135      	bne.n	8002dea <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8002d84:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8002d88:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002d8a:	6822      	ldr	r2, [r4, #0]
 8002d8c:	6893      	ldr	r3, [r2, #8]
 8002d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d92:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002d94:	6821      	ldr	r1, [r4, #0]
 8002d96:	688b      	ldr	r3, [r1, #8]
 8002d98:	68f2      	ldr	r2, [r6, #12]
 8002d9a:	6930      	ldr	r0, [r6, #16]
 8002d9c:	4302      	orrs	r2, r0
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002da2:	6822      	ldr	r2, [r4, #0]
 8002da4:	68d3      	ldr	r3, [r2, #12]
 8002da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002daa:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f013 0f20 	tst.w	r3, #32
 8002db4:	d022      	beq.n	8002dfc <HAL_RTC_SetTime+0xdc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	22ff      	movs	r2, #255	; 0xff
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8002dc4:	e029      	b.n	8002e1a <HAL_RTC_SetTime+0xfa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002dc6:	6803      	ldr	r3, [r0, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002dce:	d101      	bne.n	8002dd4 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002dd4:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002dd6:	7870      	ldrb	r0, [r6, #1]
 8002dd8:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8002dde:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002de0:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8002de2:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002de4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8002de8:	e7bd      	b.n	8002d66 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	22ff      	movs	r2, #255	; 0xff
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002df0:	2304      	movs	r3, #4
 8002df2:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002df4:	2300      	movs	r3, #0
 8002df6:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002df8:	2701      	movs	r7, #1
 8002dfa:	e00e      	b.n	8002e1a <HAL_RTC_SetTime+0xfa>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	f7ff feeb 	bl	8002bd8 <HAL_RTC_WaitForSynchro>
 8002e02:	2800      	cmp	r0, #0
 8002e04:	d0d7      	beq.n	8002db6 <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	22ff      	movs	r2, #255	; 0xff
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002e10:	2300      	movs	r3, #0
 8002e12:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002e14:	2701      	movs	r7, #1
 8002e16:	e000      	b.n	8002e1a <HAL_RTC_SetTime+0xfa>
  __HAL_LOCK(hrtc);
 8002e18:	2702      	movs	r7, #2
}
 8002e1a:	4638      	mov	r0, r7
 8002e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002e1e <HAL_RTC_SetDate>:
{
 8002e1e:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8002e20:	7f03      	ldrb	r3, [r0, #28]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d065      	beq.n	8002ef2 <HAL_RTC_SetDate+0xd4>
 8002e26:	2301      	movs	r3, #1
 8002e28:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e2e:	b93a      	cbnz	r2, 8002e40 <HAL_RTC_SetDate+0x22>
 8002e30:	784b      	ldrb	r3, [r1, #1]
 8002e32:	f013 0f10 	tst.w	r3, #16
 8002e36:	d003      	beq.n	8002e40 <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e38:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002e3c:	330a      	adds	r3, #10
 8002e3e:	704b      	strb	r3, [r1, #1]
 8002e40:	460e      	mov	r6, r1
 8002e42:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8002e44:	2a00      	cmp	r2, #0
 8002e46:	d132      	bne.n	8002eae <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e48:	78c8      	ldrb	r0, [r1, #3]
 8002e4a:	f7ff ff5e 	bl	8002d0a <RTC_ByteToBcd2>
 8002e4e:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002e50:	7870      	ldrb	r0, [r6, #1]
 8002e52:	f7ff ff5a 	bl	8002d0a <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e56:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002e5a:	78b0      	ldrb	r0, [r6, #2]
 8002e5c:	f7ff ff55 	bl	8002d0a <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002e60:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));   
 8002e62:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e64:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	22ca      	movs	r2, #202	; 0xca
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	2253      	movs	r2, #83	; 0x53
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e74:	4620      	mov	r0, r4
 8002e76:	f7ff fec8 	bl	8002c0a <RTC_EnterInitMode>
 8002e7a:	4606      	mov	r6, r0
 8002e7c:	bb10      	cbnz	r0, 8002ec4 <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8002e84:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8002e88:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002e8a:	6822      	ldr	r2, [r4, #0]
 8002e8c:	68d3      	ldr	r3, [r2, #12]
 8002e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e92:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f013 0f20 	tst.w	r3, #32
 8002e9c:	d01b      	beq.n	8002ed6 <HAL_RTC_SetDate+0xb8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	22ff      	movs	r2, #255	; 0xff
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8002eac:	e022      	b.n	8002ef4 <HAL_RTC_SetDate+0xd6>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8002eae:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8002eb0:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002eb2:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002eb4:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002eb6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002eba:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8002ebc:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002ebe:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8002ec2:	e7d1      	b.n	8002e68 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	22ff      	movs	r2, #255	; 0xff
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002eca:	2304      	movs	r3, #4
 8002ecc:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002ed2:	2601      	movs	r6, #1
 8002ed4:	e00e      	b.n	8002ef4 <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	f7ff fe7e 	bl	8002bd8 <HAL_RTC_WaitForSynchro>
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d0de      	beq.n	8002e9e <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	22ff      	movs	r2, #255	; 0xff
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ee6:	2304      	movs	r3, #4
 8002ee8:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002eea:	2300      	movs	r3, #0
 8002eec:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002eee:	2601      	movs	r6, #1
 8002ef0:	e000      	b.n	8002ef4 <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 8002ef2:	2602      	movs	r6, #2
}
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	bd70      	pop	{r4, r5, r6, pc}

08002ef8 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002ef8:	0903      	lsrs	r3, r0, #4
 8002efa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002efe:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 8002f00:	f000 000f 	and.w	r0, r0, #15
 8002f04:	4410      	add	r0, r2
}
 8002f06:	b2c0      	uxtb	r0, r0
 8002f08:	4770      	bx	lr

08002f0a <HAL_RTC_GetTime>:
{
 8002f0a:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002f0c:	6803      	ldr	r3, [r0, #0]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002f12:	6803      	ldr	r3, [r0, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002f1a:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002f1c:	6803      	ldr	r3, [r0, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002f24:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002f28:	0c1d      	lsrs	r5, r3, #16
 8002f2a:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8002f2e:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8002f30:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8002f34:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002f36:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8002f3a:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002f3c:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8002f40:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8002f42:	b95a      	cbnz	r2, 8002f5c <HAL_RTC_GetTime+0x52>
 8002f44:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002f46:	f7ff ffd7 	bl	8002ef8 <RTC_Bcd2ToByte>
 8002f4a:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002f4c:	4630      	mov	r0, r6
 8002f4e:	f7ff ffd3 	bl	8002ef8 <RTC_Bcd2ToByte>
 8002f52:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8002f54:	4620      	mov	r0, r4
 8002f56:	f7ff ffcf 	bl	8002ef8 <RTC_Bcd2ToByte>
 8002f5a:	70a8      	strb	r0, [r5, #2]
}
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}

08002f60 <HAL_RTC_GetDate>:
{
 8002f60:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8002f62:	6803      	ldr	r3, [r0, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f6a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002f6e:	0c18      	lsrs	r0, r3, #16
 8002f70:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002f72:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8002f76:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002f78:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8002f7c:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8002f7e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002f82:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8002f84:	b95a      	cbnz	r2, 8002f9e <HAL_RTC_GetDate+0x3e>
 8002f86:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f88:	f7ff ffb6 	bl	8002ef8 <RTC_Bcd2ToByte>
 8002f8c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f8e:	4630      	mov	r0, r6
 8002f90:	f7ff ffb2 	bl	8002ef8 <RTC_Bcd2ToByte>
 8002f94:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8002f96:	4628      	mov	r0, r5
 8002f98:	f7ff ffae 	bl	8002ef8 <RTC_Bcd2ToByte>
 8002f9c:	70a0      	strb	r0, [r4, #2]
}
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fa4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fa6:	7f03      	ldrb	r3, [r0, #28]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d06d      	beq.n	8003088 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 8002fac:	4615      	mov	r5, r2
 8002fae:	460e      	mov	r6, r1
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	7703      	strb	r3, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fba:	6803      	ldr	r3, [r0, #0]
 8002fbc:	22ca      	movs	r2, #202	; 0xca
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24
 8002fc0:	6803      	ldr	r3, [r0, #0]
 8002fc2:	2253      	movs	r2, #83	; 0x53
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
 8002fc6:	6803      	ldr	r3, [r0, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002fce:	d015      	beq.n	8002ffc <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
    tickstart = HAL_GetTick();
 8002fd0:	f7fd fe1e 	bl	8000c10 <HAL_GetTick>
 8002fd4:	4607      	mov	r7, r0
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f013 0f04 	tst.w	r3, #4
 8002fde:	d00d      	beq.n	8002ffc <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002fe0:	f7fd fe16 	bl	8000c10 <HAL_GetTick>
 8002fe4:	1bc0      	subs	r0, r0, r7
 8002fe6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002fea:	d9f4      	bls.n	8002fd6 <HAL_RTCEx_SetWakeUpTimer_IT+0x32>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	22ff      	movs	r2, #255	; 0xff
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ff2:	2003      	movs	r0, #3
 8002ff4:	7760      	strb	r0, [r4, #29]

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	7723      	strb	r3, [r4, #28]

       return HAL_TIMEOUT;
 8002ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002ffc:	6822      	ldr	r2, [r4, #0]
 8002ffe:	6893      	ldr	r3, [r2, #8]
 8003000:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003004:	6093      	str	r3, [r2, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003006:	6822      	ldr	r2, [r4, #0]
 8003008:	68d3      	ldr	r3, [r2, #12]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8003010:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003012:	f7fd fdfd 	bl	8000c10 <HAL_GetTick>
 8003016:	4607      	mov	r7, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	68d8      	ldr	r0, [r3, #12]
 800301c:	f010 0f04 	tst.w	r0, #4
 8003020:	d10d      	bne.n	800303e <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8003022:	f7fd fdf5 	bl	8000c10 <HAL_GetTick>
 8003026:	1bc0      	subs	r0, r0, r7
 8003028:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800302c:	d9f4      	bls.n	8003018 <HAL_RTCEx_SetWakeUpTimer_IT+0x74>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	22ff      	movs	r2, #255	; 0xff
 8003032:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003034:	2003      	movs	r0, #3
 8003036:	7760      	strb	r0, [r4, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003038:	2300      	movs	r3, #0
 800303a:	7723      	strb	r3, [r4, #28]

      return HAL_TIMEOUT;
 800303c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800303e:	615e      	str	r6, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003040:	6822      	ldr	r2, [r4, #0]
 8003042:	6893      	ldr	r3, [r2, #8]
 8003044:	f023 0307 	bic.w	r3, r3, #7
 8003048:	6093      	str	r3, [r2, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800304a:	6822      	ldr	r2, [r4, #0]
 800304c:	6893      	ldr	r3, [r2, #8]
 800304e:	431d      	orrs	r5, r3
 8003050:	6095      	str	r5, [r2, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800305a:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003062:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8003064:	6822      	ldr	r2, [r4, #0]
 8003066:	6893      	ldr	r3, [r2, #8]
 8003068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800306c:	6093      	str	r3, [r2, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800306e:	6822      	ldr	r2, [r4, #0]
 8003070:	6893      	ldr	r3, [r2, #8]
 8003072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003076:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	22ff      	movs	r2, #255	; 0xff
 800307c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800307e:	2301      	movs	r3, #1
 8003080:	7763      	strb	r3, [r4, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003082:	2000      	movs	r0, #0
 8003084:	7720      	strb	r0, [r4, #28]

  return HAL_OK;
 8003086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8003088:	2002      	movs	r0, #2
}
 800308a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800308c:	40010400 	.word	0x40010400

08003090 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003090:	4770      	bx	lr
	...

08003094 <HAL_RTCEx_WakeUpTimerIRQHandler>:
{
 8003094:	b510      	push	{r4, lr}
 8003096:	4604      	mov	r4, r0
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8003098:	6803      	ldr	r3, [r0, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80030a0:	d106      	bne.n	80030b0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80030a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030a6:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80030a8:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY;
 80030aa:	2301      	movs	r3, #1
 80030ac:	7763      	strb	r3, [r4, #29]
 80030ae:	bd10      	pop	{r4, pc}
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80030b0:	f7ff ffee 	bl	8003090 <HAL_RTCEx_WakeUpTimerEventCallback>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80030b4:	6822      	ldr	r2, [r4, #0]
 80030b6:	68d3      	ldr	r3, [r2, #12]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f463 6390 	orn	r3, r3, #1152	; 0x480
 80030be:	60d3      	str	r3, [r2, #12]
 80030c0:	e7ef      	b.n	80030a2 <HAL_RTCEx_WakeUpTimerIRQHandler+0xe>
 80030c2:	bf00      	nop
 80030c4:	40010400 	.word	0x40010400

080030c8 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80030c8:	6803      	ldr	r3, [r0, #0]
 80030ca:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80030cc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80030d0:	4770      	bx	lr

080030d2 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80030d2:	6803      	ldr	r3, [r0, #0]
 80030d4:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80030d6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 80030da:	4770      	bx	lr

080030dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030dc:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030de:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030e0:	6a04      	ldr	r4, [r0, #32]
 80030e2:	f024 0401 	bic.w	r4, r4, #1
 80030e6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80030e8:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030ea:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030ee:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030f2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80030f6:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030f8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80030fa:	6203      	str	r3, [r0, #32]
}
 80030fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003100:	4770      	bx	lr

08003102 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003102:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003104:	6a03      	ldr	r3, [r0, #32]
 8003106:	f023 0310 	bic.w	r3, r3, #16
 800310a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800310c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800310e:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003110:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003114:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003118:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800311c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003120:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003122:	6203      	str	r3, [r0, #32]
}
 8003124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003128:	4770      	bx	lr

0800312a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800312a:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800312c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003130:	f041 0107 	orr.w	r1, r1, #7
 8003134:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8003136:	6083      	str	r3, [r0, #8]
 8003138:	4770      	bx	lr

0800313a <HAL_TIM_OC_DelayElapsedCallback>:
{
 800313a:	4770      	bx	lr

0800313c <HAL_TIM_IC_CaptureCallback>:
{
 800313c:	4770      	bx	lr

0800313e <HAL_TIM_PWM_PulseFinishedCallback>:
{
 800313e:	4770      	bx	lr

08003140 <HAL_TIM_TriggerCallback>:
{
 8003140:	4770      	bx	lr

08003142 <HAL_TIM_IRQHandler>:
{
 8003142:	b510      	push	{r4, lr}
 8003144:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003146:	6803      	ldr	r3, [r0, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	f012 0f02 	tst.w	r2, #2
 800314e:	d011      	beq.n	8003174 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	f012 0f02 	tst.w	r2, #2
 8003156:	d00d      	beq.n	8003174 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003158:	f06f 0202 	mvn.w	r2, #2
 800315c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800315e:	2301      	movs	r3, #1
 8003160:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003162:	6803      	ldr	r3, [r0, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f013 0f03 	tst.w	r3, #3
 800316a:	d079      	beq.n	8003260 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800316c:	f7ff ffe6 	bl	800313c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003170:	2300      	movs	r3, #0
 8003172:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	f012 0f04 	tst.w	r2, #4
 800317c:	d012      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	f012 0f04 	tst.w	r2, #4
 8003184:	d00e      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003186:	f06f 0204 	mvn.w	r2, #4
 800318a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800318c:	2302      	movs	r3, #2
 800318e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003198:	d068      	beq.n	800326c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800319a:	4620      	mov	r0, r4
 800319c:	f7ff ffce 	bl	800313c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a0:	2300      	movs	r3, #0
 80031a2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	f012 0f08 	tst.w	r2, #8
 80031ac:	d012      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	f012 0f08 	tst.w	r2, #8
 80031b4:	d00e      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031b6:	f06f 0208 	mvn.w	r2, #8
 80031ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031bc:	2304      	movs	r3, #4
 80031be:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	f013 0f03 	tst.w	r3, #3
 80031c8:	d057      	beq.n	800327a <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80031ca:	4620      	mov	r0, r4
 80031cc:	f7ff ffb6 	bl	800313c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d0:	2300      	movs	r3, #0
 80031d2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	f012 0f10 	tst.w	r2, #16
 80031dc:	d012      	beq.n	8003204 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	f012 0f10 	tst.w	r2, #16
 80031e4:	d00e      	beq.n	8003204 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031e6:	f06f 0210 	mvn.w	r2, #16
 80031ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ec:	2308      	movs	r3, #8
 80031ee:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80031f8:	d046      	beq.n	8003288 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	4620      	mov	r0, r4
 80031fc:	f7ff ff9e 	bl	800313c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003200:	2300      	movs	r3, #0
 8003202:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	f012 0f01 	tst.w	r2, #1
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	f012 0f01 	tst.w	r2, #1
 8003214:	d13f      	bne.n	8003296 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800321e:	d003      	beq.n	8003228 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003226:	d13d      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003230:	d003      	beq.n	800323a <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003238:	d13b      	bne.n	80032b2 <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003242:	d003      	beq.n	800324c <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	f012 0f40 	tst.w	r2, #64	; 0x40
 800324a:	d139      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	f012 0f20 	tst.w	r2, #32
 8003254:	d003      	beq.n	800325e <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	f012 0f20 	tst.w	r2, #32
 800325c:	d137      	bne.n	80032ce <HAL_TIM_IRQHandler+0x18c>
 800325e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003260:	f7ff ff6b 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003264:	4620      	mov	r0, r4
 8003266:	f7ff ff6a 	bl	800313e <HAL_TIM_PWM_PulseFinishedCallback>
 800326a:	e781      	b.n	8003170 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326c:	4620      	mov	r0, r4
 800326e:	f7ff ff64 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003272:	4620      	mov	r0, r4
 8003274:	f7ff ff63 	bl	800313e <HAL_TIM_PWM_PulseFinishedCallback>
 8003278:	e792      	b.n	80031a0 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800327a:	4620      	mov	r0, r4
 800327c:	f7ff ff5d 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003280:	4620      	mov	r0, r4
 8003282:	f7ff ff5c 	bl	800313e <HAL_TIM_PWM_PulseFinishedCallback>
 8003286:	e7a3      	b.n	80031d0 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003288:	4620      	mov	r0, r4
 800328a:	f7ff ff56 	bl	800313a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800328e:	4620      	mov	r0, r4
 8003290:	f7ff ff55 	bl	800313e <HAL_TIM_PWM_PulseFinishedCallback>
 8003294:	e7b4      	b.n	8003200 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003296:	f06f 0201 	mvn.w	r2, #1
 800329a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800329c:	4620      	mov	r0, r4
 800329e:	f000 feb5 	bl	800400c <HAL_TIM_PeriodElapsedCallback>
 80032a2:	e7b8      	b.n	8003216 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80032aa:	4620      	mov	r0, r4
 80032ac:	f000 f93b 	bl	8003526 <HAL_TIMEx_BreakCallback>
 80032b0:	e7ba      	b.n	8003228 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80032b8:	4620      	mov	r0, r4
 80032ba:	f000 f935 	bl	8003528 <HAL_TIMEx_Break2Callback>
 80032be:	e7bc      	b.n	800323a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80032c6:	4620      	mov	r0, r4
 80032c8:	f7ff ff3a 	bl	8003140 <HAL_TIM_TriggerCallback>
 80032cc:	e7be      	b.n	800324c <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032ce:	f06f 0220 	mvn.w	r2, #32
 80032d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80032d4:	4620      	mov	r0, r4
 80032d6:	f000 f925 	bl	8003524 <HAL_TIMEx_CommutationCallback>
}
 80032da:	e7c0      	b.n	800325e <HAL_TIM_IRQHandler+0x11c>

080032dc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80032dc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032de:	4a23      	ldr	r2, [pc, #140]	; (800336c <TIM_Base_SetConfig+0x90>)
 80032e0:	4290      	cmp	r0, r2
 80032e2:	d03d      	beq.n	8003360 <TIM_Base_SetConfig+0x84>
 80032e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032e8:	d03a      	beq.n	8003360 <TIM_Base_SetConfig+0x84>
 80032ea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80032ee:	4290      	cmp	r0, r2
 80032f0:	d036      	beq.n	8003360 <TIM_Base_SetConfig+0x84>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032f2:	4a1e      	ldr	r2, [pc, #120]	; (800336c <TIM_Base_SetConfig+0x90>)
 80032f4:	4290      	cmp	r0, r2
 80032f6:	d012      	beq.n	800331e <TIM_Base_SetConfig+0x42>
 80032f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032fc:	d00f      	beq.n	800331e <TIM_Base_SetConfig+0x42>
 80032fe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003302:	4290      	cmp	r0, r2
 8003304:	d00b      	beq.n	800331e <TIM_Base_SetConfig+0x42>
 8003306:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 800330a:	4290      	cmp	r0, r2
 800330c:	d007      	beq.n	800331e <TIM_Base_SetConfig+0x42>
 800330e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003312:	4290      	cmp	r0, r2
 8003314:	d003      	beq.n	800331e <TIM_Base_SetConfig+0x42>
 8003316:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800331a:	4290      	cmp	r0, r2
 800331c:	d103      	bne.n	8003326 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800331e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003322:	68ca      	ldr	r2, [r1, #12]
 8003324:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800332a:	694a      	ldr	r2, [r1, #20]
 800332c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800332e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003330:	688b      	ldr	r3, [r1, #8]
 8003332:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003334:	680b      	ldr	r3, [r1, #0]
 8003336:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <TIM_Base_SetConfig+0x90>)
 800333a:	4298      	cmp	r0, r3
 800333c:	d00b      	beq.n	8003356 <TIM_Base_SetConfig+0x7a>
 800333e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8003342:	4298      	cmp	r0, r3
 8003344:	d007      	beq.n	8003356 <TIM_Base_SetConfig+0x7a>
 8003346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800334a:	4298      	cmp	r0, r3
 800334c:	d003      	beq.n	8003356 <TIM_Base_SetConfig+0x7a>
 800334e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003352:	4298      	cmp	r0, r3
 8003354:	d101      	bne.n	800335a <TIM_Base_SetConfig+0x7e>
    TIMx->RCR = Structure->RepetitionCounter;
 8003356:	690b      	ldr	r3, [r1, #16]
 8003358:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800335a:	2301      	movs	r3, #1
 800335c:	6143      	str	r3, [r0, #20]
 800335e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003364:	684a      	ldr	r2, [r1, #4]
 8003366:	4313      	orrs	r3, r2
 8003368:	e7c3      	b.n	80032f2 <TIM_Base_SetConfig+0x16>
 800336a:	bf00      	nop
 800336c:	40012c00 	.word	0x40012c00

08003370 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8003370:	b1a8      	cbz	r0, 800339e <HAL_TIM_Base_Init+0x2e>
{ 
 8003372:	b510      	push	{r4, lr}
 8003374:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8003376:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800337a:	b15b      	cbz	r3, 8003394 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 800337c:	2302      	movs	r3, #2
 800337e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003382:	1d21      	adds	r1, r4, #4
 8003384:	6820      	ldr	r0, [r4, #0]
 8003386:	f7ff ffa9 	bl	80032dc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800338a:	2301      	movs	r3, #1
 800338c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003390:	2000      	movs	r0, #0
 8003392:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003394:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003398:	f001 f97e 	bl	8004698 <HAL_TIM_Base_MspInit>
 800339c:	e7ee      	b.n	800337c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800339e:	2001      	movs	r0, #1
 80033a0:	4770      	bx	lr

080033a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033a2:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80033a4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033a6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033aa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80033ae:	4319      	orrs	r1, r3
 80033b0:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b2:	6084      	str	r4, [r0, #8]
} 
 80033b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80033bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	f000 8082 	beq.w	80034ca <HAL_TIM_ConfigClockSource+0x10e>
{
 80033c6:	b510      	push	{r4, lr}
 80033c8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80033ca:	2301      	movs	r3, #1
 80033cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	2302      	movs	r3, #2
 80033d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80033d6:	6802      	ldr	r2, [r0, #0]
 80033d8:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033da:	4b3d      	ldr	r3, [pc, #244]	; (80034d0 <HAL_TIM_ConfigClockSource+0x114>)
 80033dc:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80033de:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80033e0:	680b      	ldr	r3, [r1, #0]
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	d05d      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0xe6>
 80033e6:	d910      	bls.n	800340a <HAL_TIM_ConfigClockSource+0x4e>
 80033e8:	2b70      	cmp	r3, #112	; 0x70
 80033ea:	d040      	beq.n	800346e <HAL_TIM_ConfigClockSource+0xb2>
 80033ec:	d81f      	bhi.n	800342e <HAL_TIM_ConfigClockSource+0x72>
 80033ee:	2b50      	cmp	r3, #80	; 0x50
 80033f0:	d04d      	beq.n	800348e <HAL_TIM_ConfigClockSource+0xd2>
 80033f2:	2b60      	cmp	r3, #96	; 0x60
 80033f4:	d134      	bne.n	8003460 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80033f6:	68ca      	ldr	r2, [r1, #12]
 80033f8:	6849      	ldr	r1, [r1, #4]
 80033fa:	6820      	ldr	r0, [r4, #0]
 80033fc:	f7ff fe81 	bl	8003102 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003400:	2160      	movs	r1, #96	; 0x60
 8003402:	6820      	ldr	r0, [r4, #0]
 8003404:	f7ff fe91 	bl	800312a <TIM_ITRx_SetConfig>
    break;
 8003408:	e02a      	b.n	8003460 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 800340a:	2b10      	cmp	r3, #16
 800340c:	d053      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0xfa>
 800340e:	d908      	bls.n	8003422 <HAL_TIM_ConfigClockSource+0x66>
 8003410:	2b20      	cmp	r3, #32
 8003412:	d055      	beq.n	80034c0 <HAL_TIM_ConfigClockSource+0x104>
 8003414:	2b30      	cmp	r3, #48	; 0x30
 8003416:	d123      	bne.n	8003460 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003418:	2130      	movs	r1, #48	; 0x30
 800341a:	6820      	ldr	r0, [r4, #0]
 800341c:	f7ff fe85 	bl	800312a <TIM_ITRx_SetConfig>
    break;
 8003420:	e01e      	b.n	8003460 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8003422:	b9eb      	cbnz	r3, 8003460 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8003424:	2100      	movs	r1, #0
 8003426:	6820      	ldr	r0, [r4, #0]
 8003428:	f7ff fe7f 	bl	800312a <TIM_ITRx_SetConfig>
    break;
 800342c:	e018      	b.n	8003460 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003432:	d00e      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x96>
 8003434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003438:	d112      	bne.n	8003460 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance, 
 800343a:	68cb      	ldr	r3, [r1, #12]
 800343c:	684a      	ldr	r2, [r1, #4]
 800343e:	6889      	ldr	r1, [r1, #8]
 8003440:	6820      	ldr	r0, [r4, #0]
 8003442:	f7ff ffae 	bl	80033a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003446:	6822      	ldr	r2, [r4, #0]
 8003448:	6893      	ldr	r3, [r2, #8]
 800344a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800344e:	6093      	str	r3, [r2, #8]
    break;
 8003450:	e006      	b.n	8003460 <HAL_TIM_ConfigClockSource+0xa4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	6893      	ldr	r3, [r2, #8]
 8003456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345a:	f023 0307 	bic.w	r3, r3, #7
 800345e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003460:	2301      	movs	r3, #1
 8003462:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003466:	2000      	movs	r0, #0
 8003468:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800346c:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 800346e:	68cb      	ldr	r3, [r1, #12]
 8003470:	684a      	ldr	r2, [r1, #4]
 8003472:	6889      	ldr	r1, [r1, #8]
 8003474:	6820      	ldr	r0, [r4, #0]
 8003476:	f7ff ff94 	bl	80033a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800347a:	6822      	ldr	r2, [r4, #0]
 800347c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800347e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003482:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003486:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800348a:	6093      	str	r3, [r2, #8]
    break;
 800348c:	e7e8      	b.n	8003460 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800348e:	68ca      	ldr	r2, [r1, #12]
 8003490:	6849      	ldr	r1, [r1, #4]
 8003492:	6820      	ldr	r0, [r4, #0]
 8003494:	f7ff fe22 	bl	80030dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003498:	2150      	movs	r1, #80	; 0x50
 800349a:	6820      	ldr	r0, [r4, #0]
 800349c:	f7ff fe45 	bl	800312a <TIM_ITRx_SetConfig>
    break;
 80034a0:	e7de      	b.n	8003460 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80034a2:	68ca      	ldr	r2, [r1, #12]
 80034a4:	6849      	ldr	r1, [r1, #4]
 80034a6:	6820      	ldr	r0, [r4, #0]
 80034a8:	f7ff fe18 	bl	80030dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034ac:	2140      	movs	r1, #64	; 0x40
 80034ae:	6820      	ldr	r0, [r4, #0]
 80034b0:	f7ff fe3b 	bl	800312a <TIM_ITRx_SetConfig>
    break;
 80034b4:	e7d4      	b.n	8003460 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80034b6:	2110      	movs	r1, #16
 80034b8:	6820      	ldr	r0, [r4, #0]
 80034ba:	f7ff fe36 	bl	800312a <TIM_ITRx_SetConfig>
    break;
 80034be:	e7cf      	b.n	8003460 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80034c0:	2120      	movs	r1, #32
 80034c2:	6820      	ldr	r0, [r4, #0]
 80034c4:	f7ff fe31 	bl	800312a <TIM_ITRx_SetConfig>
    break;
 80034c8:	e7ca      	b.n	8003460 <HAL_TIM_ConfigClockSource+0xa4>
  __HAL_LOCK(htim);
 80034ca:	2002      	movs	r0, #2
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	fffe0088 	.word	0xfffe0088

080034d4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80034d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d01f      	beq.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0x48>
{
 80034dc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80034de:	2301      	movs	r3, #1
 80034e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e4:	6804      	ldr	r4, [r0, #0]
 80034e6:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034e8:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034ea:	4d0d      	ldr	r5, [pc, #52]	; (8003520 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 80034ec:	42ac      	cmp	r4, r5
 80034ee:	d010      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034f4:	680d      	ldr	r5, [r1, #0]
 80034f6:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80034f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034fc:	6889      	ldr	r1, [r1, #8]
 80034fe:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003500:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003502:	6803      	ldr	r3, [r0, #0]
 8003504:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8003506:	2300      	movs	r3, #0
 8003508:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 800350c:	4618      	mov	r0, r3
} 
 800350e:	bc30      	pop	{r4, r5}
 8003510:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003512:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003516:	684d      	ldr	r5, [r1, #4]
 8003518:	432b      	orrs	r3, r5
 800351a:	e7e9      	b.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
  __HAL_LOCK(htim);
 800351c:	2002      	movs	r0, #2
 800351e:	4770      	bx	lr
 8003520:	40012c00 	.word	0x40012c00

08003524 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003524:	4770      	bx	lr

08003526 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003526:	4770      	bx	lr

08003528 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003528:	4770      	bx	lr

0800352a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800352a:	6802      	ldr	r2, [r0, #0]
 800352c:	6813      	ldr	r3, [r2, #0]
 800352e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003532:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003534:	6802      	ldr	r2, [r0, #0]
 8003536:	6893      	ldr	r3, [r2, #8]
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800353e:	2320      	movs	r3, #32
 8003540:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8003544:	4770      	bx	lr

08003546 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8003546:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b20      	cmp	r3, #32
 800354e:	d001      	beq.n	8003554 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8003550:	2002      	movs	r0, #2
 8003552:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8003554:	2900      	cmp	r1, #0
 8003556:	d047      	beq.n	80035e8 <HAL_UART_Receive_IT+0xa2>
 8003558:	2a00      	cmp	r2, #0
 800355a:	d047      	beq.n	80035ec <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 800355c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003560:	2b01      	cmp	r3, #1
 8003562:	d045      	beq.n	80035f0 <HAL_UART_Receive_IT+0xaa>
 8003564:	2301      	movs	r3, #1
 8003566:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 800356a:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 800356c:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8003570:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8003574:	6883      	ldr	r3, [r0, #8]
 8003576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357a:	d006      	beq.n	800358a <HAL_UART_Receive_IT+0x44>
 800357c:	b9a3      	cbnz	r3, 80035a8 <HAL_UART_Receive_IT+0x62>
 800357e:	6903      	ldr	r3, [r0, #16]
 8003580:	b973      	cbnz	r3, 80035a0 <HAL_UART_Receive_IT+0x5a>
 8003582:	23ff      	movs	r3, #255	; 0xff
 8003584:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003588:	e011      	b.n	80035ae <HAL_UART_Receive_IT+0x68>
 800358a:	6903      	ldr	r3, [r0, #16]
 800358c:	b923      	cbnz	r3, 8003598 <HAL_UART_Receive_IT+0x52>
 800358e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003592:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003596:	e00a      	b.n	80035ae <HAL_UART_Receive_IT+0x68>
 8003598:	23ff      	movs	r3, #255	; 0xff
 800359a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800359e:	e006      	b.n	80035ae <HAL_UART_Receive_IT+0x68>
 80035a0:	237f      	movs	r3, #127	; 0x7f
 80035a2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80035a6:	e002      	b.n	80035ae <HAL_UART_Receive_IT+0x68>
 80035a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ac:	d012      	beq.n	80035d4 <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ae:	2300      	movs	r3, #0
 80035b0:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035b2:	2222      	movs	r2, #34	; 0x22
 80035b4:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 80035b8:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035bc:	6801      	ldr	r1, [r0, #0]
 80035be:	688a      	ldr	r2, [r1, #8]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80035c6:	6801      	ldr	r1, [r0, #0]
 80035c8:	680a      	ldr	r2, [r1, #0]
 80035ca:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80035ce:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80035d0:	4618      	mov	r0, r3
 80035d2:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80035d4:	6903      	ldr	r3, [r0, #16]
 80035d6:	b91b      	cbnz	r3, 80035e0 <HAL_UART_Receive_IT+0x9a>
 80035d8:	237f      	movs	r3, #127	; 0x7f
 80035da:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80035de:	e7e6      	b.n	80035ae <HAL_UART_Receive_IT+0x68>
 80035e0:	233f      	movs	r3, #63	; 0x3f
 80035e2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80035e6:	e7e2      	b.n	80035ae <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 80035e8:	2001      	movs	r0, #1
 80035ea:	4770      	bx	lr
 80035ec:	2001      	movs	r0, #1
 80035ee:	4770      	bx	lr
    __HAL_LOCK(huart);
 80035f0:	2002      	movs	r0, #2
}
 80035f2:	4770      	bx	lr

080035f4 <HAL_UART_TxCpltCallback>:
{
 80035f4:	4770      	bx	lr

080035f6 <HAL_UART_ErrorCallback>:
{
 80035f6:	4770      	bx	lr

080035f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035f8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80035fa:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003602:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8003606:	f7ff fff6 	bl	80035f6 <HAL_UART_ErrorCallback>
 800360a:	bd08      	pop	{r3, pc}

0800360c <UART_SetConfig>:
{
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003610:	6883      	ldr	r3, [r0, #8]
 8003612:	6902      	ldr	r2, [r0, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	6942      	ldr	r2, [r0, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	69c2      	ldr	r2, [r0, #28]
 800361c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800361e:	6801      	ldr	r1, [r0, #0]
 8003620:	6808      	ldr	r0, [r1, #0]
 8003622:	4a64      	ldr	r2, [pc, #400]	; (80037b4 <UART_SetConfig+0x1a8>)
 8003624:	4002      	ands	r2, r0
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800362a:	6822      	ldr	r2, [r4, #0]
 800362c:	6853      	ldr	r3, [r2, #4]
 800362e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003632:	68e1      	ldr	r1, [r4, #12]
 8003634:	430b      	orrs	r3, r1
 8003636:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003638:	69a3      	ldr	r3, [r4, #24]
 800363a:	6a22      	ldr	r2, [r4, #32]
 800363c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800363e:	6821      	ldr	r1, [r4, #0]
 8003640:	688a      	ldr	r2, [r1, #8]
 8003642:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800364a:	6825      	ldr	r5, [r4, #0]
 800364c:	4b5a      	ldr	r3, [pc, #360]	; (80037b8 <UART_SetConfig+0x1ac>)
 800364e:	429d      	cmp	r5, r3
 8003650:	d015      	beq.n	800367e <UART_SetConfig+0x72>
 8003652:	4b5a      	ldr	r3, [pc, #360]	; (80037bc <UART_SetConfig+0x1b0>)
 8003654:	429d      	cmp	r5, r3
 8003656:	d029      	beq.n	80036ac <UART_SetConfig+0xa0>
 8003658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800365c:	429d      	cmp	r5, r3
 800365e:	d021      	beq.n	80036a4 <UART_SetConfig+0x98>
 8003660:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003662:	69e2      	ldr	r2, [r4, #28]
 8003664:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003668:	d022      	beq.n	80036b0 <UART_SetConfig+0xa4>
    switch (clocksource)
 800366a:	2b08      	cmp	r3, #8
 800366c:	f200 809f 	bhi.w	80037ae <UART_SetConfig+0x1a2>
 8003670:	e8df f003 	tbb	[pc, r3]
 8003674:	9d7c7166 	.word	0x9d7c7166
 8003678:	9d9d9d88 	.word	0x9d9d9d88
 800367c:	93          	.byte	0x93
 800367d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800367e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	2b03      	cmp	r3, #3
 800368a:	d809      	bhi.n	80036a0 <UART_SetConfig+0x94>
 800368c:	e8df f003 	tbb	[pc, r3]
 8003690:	0c060402 	.word	0x0c060402
 8003694:	2300      	movs	r3, #0
 8003696:	e7e4      	b.n	8003662 <UART_SetConfig+0x56>
 8003698:	2304      	movs	r3, #4
 800369a:	e7e2      	b.n	8003662 <UART_SetConfig+0x56>
 800369c:	2308      	movs	r3, #8
 800369e:	e7e0      	b.n	8003662 <UART_SetConfig+0x56>
 80036a0:	2310      	movs	r3, #16
 80036a2:	e7de      	b.n	8003662 <UART_SetConfig+0x56>
 80036a4:	2300      	movs	r3, #0
 80036a6:	e7dc      	b.n	8003662 <UART_SetConfig+0x56>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e7da      	b.n	8003662 <UART_SetConfig+0x56>
 80036ac:	2300      	movs	r3, #0
 80036ae:	e7d8      	b.n	8003662 <UART_SetConfig+0x56>
    switch (clocksource)
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d842      	bhi.n	800373a <UART_SetConfig+0x12e>
 80036b4:	e8df f003 	tbb	[pc, r3]
 80036b8:	41221705 	.word	0x41221705
 80036bc:	4141412d 	.word	0x4141412d
 80036c0:	38          	.byte	0x38
 80036c1:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80036c2:	f7ff f987 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 80036c6:	6862      	ldr	r2, [r4, #4]
 80036c8:	0853      	lsrs	r3, r2, #1
 80036ca:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80036ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80036d2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80036d4:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80036d6:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036da:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80036de:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 80036e0:	6822      	ldr	r2, [r4, #0]
 80036e2:	60d3      	str	r3, [r2, #12]
 80036e4:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80036e6:	f7ff f98b 	bl	8002a00 <HAL_RCC_GetPCLK2Freq>
 80036ea:	6862      	ldr	r2, [r4, #4]
 80036ec:	0853      	lsrs	r3, r2, #1
 80036ee:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80036f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80036f6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80036f8:	2000      	movs	r0, #0
        break;
 80036fa:	e7ec      	b.n	80036d6 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80036fc:	6862      	ldr	r2, [r4, #4]
 80036fe:	0853      	lsrs	r3, r2, #1
 8003700:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003704:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003708:	fbb3 f3f2 	udiv	r3, r3, r2
 800370c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800370e:	2000      	movs	r0, #0
        break;
 8003710:	e7e1      	b.n	80036d6 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003712:	f7ff f837 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8003716:	6862      	ldr	r2, [r4, #4]
 8003718:	0853      	lsrs	r3, r2, #1
 800371a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800371e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003722:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003724:	2000      	movs	r0, #0
        break;
 8003726:	e7d6      	b.n	80036d6 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003728:	6862      	ldr	r2, [r4, #4]
 800372a:	0853      	lsrs	r3, r2, #1
 800372c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003730:	fbb3 f3f2 	udiv	r3, r3, r2
 8003734:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003736:	2000      	movs	r0, #0
        break;
 8003738:	e7cd      	b.n	80036d6 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 800373a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800373c:	2300      	movs	r3, #0
 800373e:	e7ca      	b.n	80036d6 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003740:	f7ff f948 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 8003744:	6863      	ldr	r3, [r4, #4]
 8003746:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800374a:	fbb0 f0f3 	udiv	r0, r0, r3
 800374e:	b280      	uxth	r0, r0
 8003750:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003752:	2000      	movs	r0, #0
        break;
 8003754:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003756:	f7ff f953 	bl	8002a00 <HAL_RCC_GetPCLK2Freq>
 800375a:	6863      	ldr	r3, [r4, #4]
 800375c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003760:	fbb0 f0f3 	udiv	r0, r0, r3
 8003764:	b280      	uxth	r0, r0
 8003766:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003768:	2000      	movs	r0, #0
        break;
 800376a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800376c:	6862      	ldr	r2, [r4, #4]
 800376e:	0853      	lsrs	r3, r2, #1
 8003770:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003774:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003778:	fbb3 f3f2 	udiv	r3, r3, r2
 800377c:	b29b      	uxth	r3, r3
 800377e:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003780:	2000      	movs	r0, #0
        break;
 8003782:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003784:	f7fe fffe 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8003788:	6863      	ldr	r3, [r4, #4]
 800378a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800378e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003792:	b280      	uxth	r0, r0
 8003794:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003796:	2000      	movs	r0, #0
        break;
 8003798:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800379a:	6862      	ldr	r2, [r4, #4]
 800379c:	0853      	lsrs	r3, r2, #1
 800379e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80037a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80037aa:	2000      	movs	r0, #0
        break;
 80037ac:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 80037ae:	2001      	movs	r0, #1
}
 80037b0:	bd38      	pop	{r3, r4, r5, pc}
 80037b2:	bf00      	nop
 80037b4:	efff69f3 	.word	0xefff69f3
 80037b8:	40013800 	.word	0x40013800
 80037bc:	40004400 	.word	0x40004400

080037c0 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80037c2:	f013 0f01 	tst.w	r3, #1
 80037c6:	d006      	beq.n	80037d6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037c8:	6802      	ldr	r2, [r0, #0]
 80037ca:	6853      	ldr	r3, [r2, #4]
 80037cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80037d0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80037d2:	430b      	orrs	r3, r1
 80037d4:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80037d8:	f013 0f02 	tst.w	r3, #2
 80037dc:	d006      	beq.n	80037ec <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037de:	6802      	ldr	r2, [r0, #0]
 80037e0:	6853      	ldr	r3, [r2, #4]
 80037e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80037e8:	430b      	orrs	r3, r1
 80037ea:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80037ee:	f013 0f04 	tst.w	r3, #4
 80037f2:	d006      	beq.n	8003802 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037f4:	6802      	ldr	r2, [r0, #0]
 80037f6:	6853      	ldr	r3, [r2, #4]
 80037f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037fc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80037fe:	430b      	orrs	r3, r1
 8003800:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003802:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003804:	f013 0f08 	tst.w	r3, #8
 8003808:	d006      	beq.n	8003818 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800380a:	6802      	ldr	r2, [r0, #0]
 800380c:	6853      	ldr	r3, [r2, #4]
 800380e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003812:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003814:	430b      	orrs	r3, r1
 8003816:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003818:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800381a:	f013 0f10 	tst.w	r3, #16
 800381e:	d006      	beq.n	800382e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003820:	6802      	ldr	r2, [r0, #0]
 8003822:	6893      	ldr	r3, [r2, #8]
 8003824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003828:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800382a:	430b      	orrs	r3, r1
 800382c:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800382e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003830:	f013 0f20 	tst.w	r3, #32
 8003834:	d006      	beq.n	8003844 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003836:	6802      	ldr	r2, [r0, #0]
 8003838:	6893      	ldr	r3, [r2, #8]
 800383a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800383e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003840:	430b      	orrs	r3, r1
 8003842:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003844:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003846:	f013 0f40 	tst.w	r3, #64	; 0x40
 800384a:	d00a      	beq.n	8003862 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800384c:	6802      	ldr	r2, [r0, #0]
 800384e:	6853      	ldr	r3, [r2, #4]
 8003850:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003854:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003856:	430b      	orrs	r3, r1
 8003858:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800385a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800385c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003860:	d00b      	beq.n	800387a <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003862:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003864:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003868:	d006      	beq.n	8003878 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800386a:	6802      	ldr	r2, [r0, #0]
 800386c:	6853      	ldr	r3, [r2, #4]
 800386e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003872:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003874:	430b      	orrs	r3, r1
 8003876:	6053      	str	r3, [r2, #4]
 8003878:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800387a:	6802      	ldr	r2, [r0, #0]
 800387c:	6853      	ldr	r3, [r2, #4]
 800387e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003882:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003884:	430b      	orrs	r3, r1
 8003886:	6053      	str	r3, [r2, #4]
 8003888:	e7eb      	b.n	8003862 <UART_AdvFeatureConfig+0xa2>

0800388a <UART_WaitOnFlagUntilTimeout>:
{
 800388a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800388e:	4605      	mov	r5, r0
 8003890:	460f      	mov	r7, r1
 8003892:	4616      	mov	r6, r2
 8003894:	4698      	mov	r8, r3
 8003896:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	ea37 0303 	bics.w	r3, r7, r3
 80038a0:	bf0c      	ite	eq
 80038a2:	2301      	moveq	r3, #1
 80038a4:	2300      	movne	r3, #0
 80038a6:	42b3      	cmp	r3, r6
 80038a8:	d11e      	bne.n	80038e8 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80038aa:	f1b4 3fff 	cmp.w	r4, #4294967295
 80038ae:	d0f3      	beq.n	8003898 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80038b0:	b12c      	cbz	r4, 80038be <UART_WaitOnFlagUntilTimeout+0x34>
 80038b2:	f7fd f9ad 	bl	8000c10 <HAL_GetTick>
 80038b6:	eba0 0008 	sub.w	r0, r0, r8
 80038ba:	4284      	cmp	r4, r0
 80038bc:	d2ec      	bcs.n	8003898 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038be:	682a      	ldr	r2, [r5, #0]
 80038c0:	6813      	ldr	r3, [r2, #0]
 80038c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038c6:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c8:	682a      	ldr	r2, [r5, #0]
 80038ca:	6893      	ldr	r3, [r2, #8]
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80038d2:	2320      	movs	r3, #32
 80038d4:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80038d8:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80038dc:	2300      	movs	r3, #0
 80038de:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 80038e2:	2003      	movs	r0, #3
 80038e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80038e8:	2000      	movs	r0, #0
}
 80038ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080038ee <HAL_UART_Transmit>:
{
 80038ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80038f6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	d004      	beq.n	800390a <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8003900:	2302      	movs	r3, #2
}
 8003902:	4618      	mov	r0, r3
 8003904:	b002      	add	sp, #8
 8003906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800390a:	4604      	mov	r4, r0
 800390c:	460d      	mov	r5, r1
 800390e:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8003910:	2900      	cmp	r1, #0
 8003912:	d04e      	beq.n	80039b2 <HAL_UART_Transmit+0xc4>
 8003914:	2a00      	cmp	r2, #0
 8003916:	d04e      	beq.n	80039b6 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8003918:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_UART_Transmit+0x36>
 8003920:	2302      	movs	r3, #2
 8003922:	e7ee      	b.n	8003902 <HAL_UART_Transmit+0x14>
 8003924:	2301      	movs	r3, #1
 8003926:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392a:	2300      	movs	r3, #0
 800392c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800392e:	2321      	movs	r3, #33	; 0x21
 8003930:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8003934:	f7fd f96c 	bl	8000c10 <HAL_GetTick>
 8003938:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800393a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800393e:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8003942:	e003      	b.n	800394c <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	782a      	ldrb	r2, [r5, #0]
 8003948:	851a      	strh	r2, [r3, #40]	; 0x28
 800394a:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 800394c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003950:	b29b      	uxth	r3, r3
 8003952:	b1e3      	cbz	r3, 800398e <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 8003954:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29b      	uxth	r3, r3
 800395e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003962:	9600      	str	r6, [sp, #0]
 8003964:	463b      	mov	r3, r7
 8003966:	2200      	movs	r2, #0
 8003968:	2180      	movs	r1, #128	; 0x80
 800396a:	4620      	mov	r0, r4
 800396c:	f7ff ff8d 	bl	800388a <UART_WaitOnFlagUntilTimeout>
 8003970:	bb18      	cbnz	r0, 80039ba <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003972:	68a3      	ldr	r3, [r4, #8]
 8003974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003978:	d1e4      	bne.n	8003944 <HAL_UART_Transmit+0x56>
 800397a:	6923      	ldr	r3, [r4, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e1      	bne.n	8003944 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003980:	6822      	ldr	r2, [r4, #0]
 8003982:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398a:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 800398c:	e7de      	b.n	800394c <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800398e:	9600      	str	r6, [sp, #0]
 8003990:	463b      	mov	r3, r7
 8003992:	2200      	movs	r2, #0
 8003994:	2140      	movs	r1, #64	; 0x40
 8003996:	4620      	mov	r0, r4
 8003998:	f7ff ff77 	bl	800388a <UART_WaitOnFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	b108      	cbz	r0, 80039a4 <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e7ae      	b.n	8003902 <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 80039a4:	2220      	movs	r2, #32
 80039a6:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80039aa:	2200      	movs	r2, #0
 80039ac:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    return HAL_OK;
 80039b0:	e7a7      	b.n	8003902 <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e7a5      	b.n	8003902 <HAL_UART_Transmit+0x14>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e7a3      	b.n	8003902 <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e7a1      	b.n	8003902 <HAL_UART_Transmit+0x14>

080039be <UART_CheckIdleState>:
{
 80039be:	b530      	push	{r4, r5, lr}
 80039c0:	b083      	sub	sp, #12
 80039c2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c4:	2300      	movs	r3, #0
 80039c6:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80039c8:	f7fd f922 	bl	8000c10 <HAL_GetTick>
 80039cc:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f013 0f08 	tst.w	r3, #8
 80039d6:	d10e      	bne.n	80039f6 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f013 0f04 	tst.w	r3, #4
 80039e0:	d117      	bne.n	8003a12 <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 80039e2:	2320      	movs	r3, #32
 80039e4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80039e8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 80039ec:	2000      	movs	r0, #0
 80039ee:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 80039f2:	b003      	add	sp, #12
 80039f4:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	4603      	mov	r3, r0
 80039fe:	2200      	movs	r2, #0
 8003a00:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a04:	4620      	mov	r0, r4
 8003a06:	f7ff ff40 	bl	800388a <UART_WaitOnFlagUntilTimeout>
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d0e4      	beq.n	80039d8 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003a0e:	2003      	movs	r0, #3
 8003a10:	e7ef      	b.n	80039f2 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	462b      	mov	r3, r5
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a20:	4620      	mov	r0, r4
 8003a22:	f7ff ff32 	bl	800388a <UART_WaitOnFlagUntilTimeout>
 8003a26:	2800      	cmp	r0, #0
 8003a28:	d0db      	beq.n	80039e2 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8003a2a:	2003      	movs	r0, #3
 8003a2c:	e7e1      	b.n	80039f2 <UART_CheckIdleState+0x34>

08003a2e <HAL_UART_Init>:
  if(huart == NULL)
 8003a2e:	b378      	cbz	r0, 8003a90 <HAL_UART_Init+0x62>
{
 8003a30:	b510      	push	{r4, lr}
 8003a32:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8003a34:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003a38:	b30b      	cbz	r3, 8003a7e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003a3a:	2324      	movs	r3, #36	; 0x24
 8003a3c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8003a40:	6822      	ldr	r2, [r4, #0]
 8003a42:	6813      	ldr	r3, [r2, #0]
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f7ff fdde 	bl	800360c <UART_SetConfig>
 8003a50:	2801      	cmp	r0, #1
 8003a52:	d01f      	beq.n	8003a94 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a56:	b9bb      	cbnz	r3, 8003a88 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a58:	6822      	ldr	r2, [r4, #0]
 8003a5a:	6853      	ldr	r3, [r2, #4]
 8003a5c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003a60:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a62:	6822      	ldr	r2, [r4, #0]
 8003a64:	6893      	ldr	r3, [r2, #8]
 8003a66:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003a6a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003a6c:	6822      	ldr	r2, [r4, #0]
 8003a6e:	6813      	ldr	r3, [r2, #0]
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003a76:	4620      	mov	r0, r4
 8003a78:	f7ff ffa1 	bl	80039be <UART_CheckIdleState>
 8003a7c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003a7e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8003a82:	f000 fe27 	bl	80046d4 <HAL_UART_MspInit>
 8003a86:	e7d8      	b.n	8003a3a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7ff fe99 	bl	80037c0 <UART_AdvFeatureConfig>
 8003a8e:	e7e3      	b.n	8003a58 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8003a90:	2001      	movs	r0, #1
 8003a92:	4770      	bx	lr
}
 8003a94:	bd10      	pop	{r4, pc}

08003a96 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a96:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b21      	cmp	r3, #33	; 0x21
 8003a9e:	d001      	beq.n	8003aa4 <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8003aa0:	2002      	movs	r0, #2
  }
}
 8003aa2:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8003aa4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	b193      	cbz	r3, 8003ad2 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aac:	6883      	ldr	r3, [r0, #8]
 8003aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab2:	d01a      	beq.n	8003aea <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003ab4:	6802      	ldr	r2, [r0, #0]
 8003ab6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003ab8:	1c59      	adds	r1, r3, #1
 8003aba:	64c1      	str	r1, [r0, #76]	; 0x4c
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003ac0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8003ace:	2000      	movs	r0, #0
 8003ad0:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003ad2:	6802      	ldr	r2, [r0, #0]
 8003ad4:	6813      	ldr	r3, [r2, #0]
 8003ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ada:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003adc:	6802      	ldr	r2, [r0, #0]
 8003ade:	6813      	ldr	r3, [r2, #0]
 8003ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ae4:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aea:	6903      	ldr	r3, [r0, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e1      	bne.n	8003ab4 <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8003af0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003af2:	6802      	ldr	r2, [r0, #0]
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afa:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003afc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003afe:	3302      	adds	r3, #2
 8003b00:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003b02:	e7dd      	b.n	8003ac0 <UART_Transmit_IT+0x2a>

08003b04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b04:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b06:	6801      	ldr	r1, [r0, #0]
 8003b08:	680b      	ldr	r3, [r1, #0]
 8003b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b0e:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b10:	2320      	movs	r3, #32
 8003b12:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8003b16:	f7ff fd6d 	bl	80035f4 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	bd08      	pop	{r3, pc}

08003b1e <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8003b1e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b22:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b22      	cmp	r3, #34	; 0x22
 8003b2a:	d006      	beq.n	8003b3a <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b2c:	6802      	ldr	r2, [r0, #0]
 8003b2e:	6993      	ldr	r3, [r2, #24]
 8003b30:	f043 0308 	orr.w	r3, r3, #8
 8003b34:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8003b36:	2002      	movs	r0, #2
 8003b38:	4770      	bx	lr
{
 8003b3a:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b3c:	6803      	ldr	r3, [r0, #0]
 8003b3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b40:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b42:	6881      	ldr	r1, [r0, #8]
 8003b44:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003b48:	d00f      	beq.n	8003b6a <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b4a:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8003b4c:	1c4c      	adds	r4, r1, #1
 8003b4e:	6544      	str	r4, [r0, #84]	; 0x54
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	401a      	ands	r2, r3
 8003b54:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 8003b56:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8003b64:	b15b      	cbz	r3, 8003b7e <UART_Receive_IT+0x60>
    return HAL_OK;
 8003b66:	2000      	movs	r0, #0
  }
}
 8003b68:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b6a:	6901      	ldr	r1, [r0, #16]
 8003b6c:	2900      	cmp	r1, #0
 8003b6e:	d1ec      	bne.n	8003b4a <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8003b70:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 8003b72:	401a      	ands	r2, r3
 8003b74:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 8003b76:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003b78:	3302      	adds	r3, #2
 8003b7a:	6543      	str	r3, [r0, #84]	; 0x54
 8003b7c:	e7eb      	b.n	8003b56 <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b7e:	6802      	ldr	r2, [r0, #0]
 8003b80:	6813      	ldr	r3, [r2, #0]
 8003b82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b86:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b88:	6802      	ldr	r2, [r0, #0]
 8003b8a:	6893      	ldr	r3, [r2, #8]
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003b92:	2320      	movs	r3, #32
 8003b94:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8003b98:	f000 fa32 	bl	8004000 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	bd10      	pop	{r4, pc}

08003ba0 <HAL_UART_IRQHandler>:
{
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ba4:	6802      	ldr	r2, [r0, #0]
 8003ba6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ba8:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 8003baa:	f013 050f 	ands.w	r5, r3, #15
 8003bae:	d105      	bne.n	8003bbc <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb0:	f013 0f20 	tst.w	r3, #32
 8003bb4:	d002      	beq.n	8003bbc <HAL_UART_IRQHandler+0x1c>
 8003bb6:	f011 0f20 	tst.w	r1, #32
 8003bba:	d160      	bne.n	8003c7e <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 8003bbc:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8003bbe:	2d00      	cmp	r5, #0
 8003bc0:	d072      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003bc2:	f010 0501 	ands.w	r5, r0, #1
 8003bc6:	d102      	bne.n	8003bce <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003bc8:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003bcc:	d06c      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bce:	f013 0f01 	tst.w	r3, #1
 8003bd2:	d007      	beq.n	8003be4 <HAL_UART_IRQHandler+0x44>
 8003bd4:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003bd8:	d004      	beq.n	8003be4 <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003bda:	2001      	movs	r0, #1
 8003bdc:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bde:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003be0:	4302      	orrs	r2, r0
 8003be2:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003be4:	f013 0f02 	tst.w	r3, #2
 8003be8:	d007      	beq.n	8003bfa <HAL_UART_IRQHandler+0x5a>
 8003bea:	b135      	cbz	r5, 8003bfa <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003bec:	6822      	ldr	r2, [r4, #0]
 8003bee:	2002      	movs	r0, #2
 8003bf0:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bf2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003bf4:	f042 0204 	orr.w	r2, r2, #4
 8003bf8:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bfa:	f013 0f04 	tst.w	r3, #4
 8003bfe:	d007      	beq.n	8003c10 <HAL_UART_IRQHandler+0x70>
 8003c00:	b135      	cbz	r5, 8003c10 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003c02:	6822      	ldr	r2, [r4, #0]
 8003c04:	2004      	movs	r0, #4
 8003c06:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c08:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003c0a:	f042 0202 	orr.w	r2, r2, #2
 8003c0e:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003c10:	f013 0f08 	tst.w	r3, #8
 8003c14:	d009      	beq.n	8003c2a <HAL_UART_IRQHandler+0x8a>
 8003c16:	f011 0f20 	tst.w	r1, #32
 8003c1a:	d100      	bne.n	8003c1e <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c1c:	b12d      	cbz	r5, 8003c2a <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003c1e:	6822      	ldr	r2, [r4, #0]
 8003c20:	2008      	movs	r0, #8
 8003c22:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c24:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003c26:	4302      	orrs	r2, r0
 8003c28:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c2a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003c2c:	2a00      	cmp	r2, #0
 8003c2e:	d04d      	beq.n	8003ccc <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c30:	f013 0f20 	tst.w	r3, #32
 8003c34:	d002      	beq.n	8003c3c <HAL_UART_IRQHandler+0x9c>
 8003c36:	f011 0f20 	tst.w	r1, #32
 8003c3a:	d123      	bne.n	8003c84 <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003c3c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003c3e:	f013 0f08 	tst.w	r3, #8
 8003c42:	d104      	bne.n	8003c4e <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003c48:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c4c:	d026      	beq.n	8003c9c <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 8003c4e:	4620      	mov	r0, r4
 8003c50:	f7ff fc6b 	bl	800352a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003c5c:	d01a      	beq.n	8003c94 <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c64:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003c66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c68:	b183      	cbz	r3, 8003c8c <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c6a:	4a23      	ldr	r2, [pc, #140]	; (8003cf8 <HAL_UART_IRQHandler+0x158>)
 8003c6c:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c6e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003c70:	f7fd fcc9 	bl	8001606 <HAL_DMA_Abort_IT>
 8003c74:	b350      	cbz	r0, 8003ccc <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c76:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003c78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003c7a:	4798      	blx	r3
 8003c7c:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 8003c7e:	f7ff ff4e 	bl	8003b1e <UART_Receive_IT>
      return;
 8003c82:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 8003c84:	4620      	mov	r0, r4
 8003c86:	f7ff ff4a 	bl	8003b1e <UART_Receive_IT>
 8003c8a:	e7d7      	b.n	8003c3c <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f7ff fcb2 	bl	80035f6 <HAL_UART_ErrorCallback>
 8003c92:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8003c94:	4620      	mov	r0, r4
 8003c96:	f7ff fcae 	bl	80035f6 <HAL_UART_ErrorCallback>
 8003c9a:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f7ff fcaa 	bl	80035f6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	66e3      	str	r3, [r4, #108]	; 0x6c
 8003ca6:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003ca8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003cac:	d002      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x114>
 8003cae:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003cb2:	d10c      	bne.n	8003cce <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003cb8:	d002      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x120>
 8003cba:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003cbe:	d112      	bne.n	8003ce6 <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cc0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003cc4:	d002      	beq.n	8003ccc <HAL_UART_IRQHandler+0x12c>
 8003cc6:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003cca:	d110      	bne.n	8003cee <HAL_UART_IRQHandler+0x14e>
 8003ccc:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003cce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003cd2:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8003cd4:	2320      	movs	r3, #32
 8003cd6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8003cda:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8003cde:	4620      	mov	r0, r4
 8003ce0:	f000 f80c 	bl	8003cfc <HAL_UARTEx_WakeupCallback>
    return;
 8003ce4:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f7ff fed5 	bl	8003a96 <UART_Transmit_IT>
    return;
 8003cec:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8003cee:	4620      	mov	r0, r4
 8003cf0:	f7ff ff08 	bl	8003b04 <UART_EndTransmit_IT>
    return;
 8003cf4:	e7ea      	b.n	8003ccc <HAL_UART_IRQHandler+0x12c>
 8003cf6:	bf00      	nop
 8003cf8:	080035f9 	.word	0x080035f9

08003cfc <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cfc:	4770      	bx	lr
	...

08003d00 <TempConv>:
	//uint32_t scale = 0;

//	temp = ((100*tempVal)>>7)+((100*tempVal)>>12);
//	scale = (temp-500)/10;

	tempVal = tempVal*3300;
 8003d00:	f640 43e4 	movw	r3, #3300	; 0xce4
 8003d04:	fb03 f000 	mul.w	r0, r3, r0
	tempVal = tempVal/4095;
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <TempConv+0x24>)
 8003d0a:	fba3 2300 	umull	r2, r3, r3, r0
 8003d0e:	1ac0      	subs	r0, r0, r3
 8003d10:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 8003d14:	0ac0      	lsrs	r0, r0, #11
	tempVal = (tempVal - 500)/10;
 8003d16:	f5a0 70fa 	sub.w	r0, r0, #500	; 0x1f4
 8003d1a:	4b03      	ldr	r3, [pc, #12]	; (8003d28 <TempConv+0x28>)
 8003d1c:	fba3 3000 	umull	r3, r0, r3, r0
	//Twatter = tempVal;

//	return scale;
	return tempVal;
}
 8003d20:	08c0      	lsrs	r0, r0, #3
 8003d22:	4770      	bx	lr
 8003d24:	00100101 	.word	0x00100101
 8003d28:	cccccccd 	.word	0xcccccccd

08003d2c <switchHeater>:

void switchHeater(void)
{
 8003d2c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12,heaterState);
 8003d2e:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <switchHeater+0x14>)
 8003d30:	881a      	ldrh	r2, [r3, #0]
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d38:	4802      	ldr	r0, [pc, #8]	; (8003d44 <switchHeater+0x18>)
 8003d3a:	f7fd fe31 	bl	80019a0 <HAL_GPIO_WritePin>
 8003d3e:	bd08      	pop	{r3, pc}
 8003d40:	200002d0 	.word	0x200002d0
 8003d44:	48000800 	.word	0x48000800

08003d48 <switchValve>:
}

void switchValve(void)
{
 8003d48:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,valveState);
 8003d4a:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <switchValve+0x14>)
 8003d4c:	881a      	ldrh	r2, [r3, #0]
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d54:	4802      	ldr	r0, [pc, #8]	; (8003d60 <switchValve+0x18>)
 8003d56:	f7fd fe23 	bl	80019a0 <HAL_GPIO_WritePin>
 8003d5a:	bd08      	pop	{r3, pc}
 8003d5c:	200002d4 	.word	0x200002d4
 8003d60:	48000800 	.word	0x48000800

08003d64 <StringTime2Int>:
}

uint8_t StringTime2Int(char* inputTimeString, uint8_t* outputTimeInt)
{
	int returnValue = 0;
	timeL += 1;
 8003d64:	4a14      	ldr	r2, [pc, #80]	; (8003db8 <StringTime2Int+0x54>)
 8003d66:	7813      	ldrb	r3, [r2, #0]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	7013      	strb	r3, [r2, #0]

	if (*inputTimeString == ',')
 8003d6e:	7803      	ldrb	r3, [r0, #0]
 8003d70:	2b2c      	cmp	r3, #44	; 0x2c
 8003d72:	d01d      	beq.n	8003db0 <StringTime2Int+0x4c>
{
 8003d74:	b410      	push	{r4}
 8003d76:	2300      	movs	r3, #0
		return 0;

	while ((*inputTimeString >= '0') && (*inputTimeString <= '9'))
 8003d78:	7802      	ldrb	r2, [r0, #0]
 8003d7a:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8003d7e:	b2e4      	uxtb	r4, r4
 8003d80:	2c09      	cmp	r4, #9
 8003d82:	d80e      	bhi.n	8003da2 <StringTime2Int+0x3e>
	{
		returnValue *= 10;
 8003d84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d88:	005c      	lsls	r4, r3, #1
		returnValue += (*inputTimeString - 48);
 8003d8a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003d8e:	4423      	add	r3, r4

		if (returnValue >= 128)
 8003d90:	2b7f      	cmp	r3, #127	; 0x7f
 8003d92:	dc0f      	bgt.n	8003db4 <StringTime2Int+0x50>
			return 0;

		inputTimeString++;
 8003d94:	3001      	adds	r0, #1
		timeL++;
 8003d96:	4c08      	ldr	r4, [pc, #32]	; (8003db8 <StringTime2Int+0x54>)
 8003d98:	7822      	ldrb	r2, [r4, #0]
 8003d9a:	3201      	adds	r2, #1
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	7022      	strb	r2, [r4, #0]
 8003da0:	e7ea      	b.n	8003d78 <StringTime2Int+0x14>
	}
	*outputTimeInt = (int8_t)(returnValue);
 8003da2:	700b      	strb	r3, [r1, #0]
	return timeL;
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <StringTime2Int+0x54>)
 8003da6:	7818      	ldrb	r0, [r3, #0]
 8003da8:	b2c0      	uxtb	r0, r0
}
 8003daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dae:	4770      	bx	lr
		return 0;
 8003db0:	2000      	movs	r0, #0
 8003db2:	4770      	bx	lr
			return 0;
 8003db4:	2000      	movs	r0, #0
 8003db6:	e7f8      	b.n	8003daa <StringTime2Int+0x46>
 8003db8:	200002a0 	.word	0x200002a0

08003dbc <String2Int>:
uint8_t String2Int(char* inputString, int16_t* outputInt)
{
	int returnValue = 0;
	int sign = 1;

	if (*inputString == '\0')
 8003dbc:	7803      	ldrb	r3, [r0, #0]
 8003dbe:	b353      	cbz	r3, 8003e16 <String2Int+0x5a>
{
 8003dc0:	b430      	push	{r4, r5}
		return 0;

	if (*inputString == '-')
 8003dc2:	2b2d      	cmp	r3, #45	; 0x2d
 8003dc4:	d002      	beq.n	8003dcc <String2Int+0x10>
	int sign = 1;
 8003dc6:	2501      	movs	r5, #1
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e009      	b.n	8003de0 <String2Int+0x24>
	{
		sign = -1;
		inputString++;
 8003dcc:	3001      	adds	r0, #1
		sign = -1;
 8003dce:	f04f 35ff 	mov.w	r5, #4294967295
 8003dd2:	e7f9      	b.n	8003dc8 <String2Int+0xc>
	while ((*inputString >= '0') && (*inputString <= '9'))
	{
		returnValue *= 10;
		returnValue += (*inputString - 48);

		if (((sign == 1) && (returnValue >= 32768)) ||
 8003dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd8:	db0f      	blt.n	8003dfa <String2Int+0x3e>
				((sign == -1) && (returnValue >= 32769)))
			return 0;
 8003dda:	2000      	movs	r0, #0
 8003ddc:	e019      	b.n	8003e12 <String2Int+0x56>

		inputString++;
 8003dde:	3001      	adds	r0, #1
	while ((*inputString >= '0') && (*inputString <= '9'))
 8003de0:	7802      	ldrb	r2, [r0, #0]
 8003de2:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8003de6:	b2e4      	uxtb	r4, r4
 8003de8:	2c09      	cmp	r4, #9
 8003dea:	d80e      	bhi.n	8003e0a <String2Int+0x4e>
		returnValue *= 10;
 8003dec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003df0:	005c      	lsls	r4, r3, #1
		returnValue += (*inputString - 48);
 8003df2:	3a30      	subs	r2, #48	; 0x30
 8003df4:	18a3      	adds	r3, r4, r2
		if (((sign == 1) && (returnValue >= 32768)) ||
 8003df6:	2d01      	cmp	r5, #1
 8003df8:	d0ec      	beq.n	8003dd4 <String2Int+0x18>
 8003dfa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003dfe:	d1ee      	bne.n	8003dde <String2Int+0x22>
				((sign == -1) && (returnValue >= 32769)))
 8003e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e04:	ddeb      	ble.n	8003dde <String2Int+0x22>
			return 0;
 8003e06:	2000      	movs	r0, #0
 8003e08:	e003      	b.n	8003e12 <String2Int+0x56>
	}
	*outputInt = (int16_t)(sign * returnValue);
 8003e0a:	fb15 f303 	smulbb	r3, r5, r3
 8003e0e:	800b      	strh	r3, [r1, #0]
	return 1;
 8003e10:	2001      	movs	r0, #1
}
 8003e12:	bc30      	pop	{r4, r5}
 8003e14:	4770      	bx	lr
		return 0;
 8003e16:	2000      	movs	r0, #0
 8003e18:	4770      	bx	lr
	...

08003e1c <Int2String>:
{
	int numWritten = 0;
	int writePosition = 0;
	uint8_t digits = 0;

	if (maxL == 0)
 8003e1c:	2a00      	cmp	r2, #0
 8003e1e:	d044      	beq.n	8003eaa <Int2String+0x8e>
{
 8003e20:	b470      	push	{r4, r5, r6}
 8003e22:	4614      	mov	r4, r2
		return 0;

	if (value < 0)
 8003e24:	2900      	cmp	r1, #0
 8003e26:	db13      	blt.n	8003e50 <Int2String+0x34>
	int numWritten = 0;
 8003e28:	2500      	movs	r5, #0
		maxL--;
		value = -value;
		numWritten = 1;
	}

	if (value < 10)
 8003e2a:	2909      	cmp	r1, #9
 8003e2c:	dd18      	ble.n	8003e60 <Int2String+0x44>
		digits = 1;
	else if (value < 100)
 8003e2e:	2963      	cmp	r1, #99	; 0x63
 8003e30:	dd1b      	ble.n	8003e6a <Int2String+0x4e>
		digits = 2;
	else if (value < 1000)
 8003e32:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8003e36:	db1a      	blt.n	8003e6e <Int2String+0x52>
		digits = 3;
	else if (value < 10000)
 8003e38:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e3c:	4299      	cmp	r1, r3
 8003e3e:	dd18      	ble.n	8003e72 <Int2String+0x56>
		digits = 4;
	else if (value < 100000)
 8003e40:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <Int2String+0x94>)
 8003e42:	4299      	cmp	r1, r3
 8003e44:	dd17      	ble.n	8003e76 <Int2String+0x5a>
		digits = 5;
	else if (value < 1000000)
 8003e46:	4b1b      	ldr	r3, [pc, #108]	; (8003eb4 <Int2String+0x98>)
 8003e48:	4299      	cmp	r1, r3
 8003e4a:	dc16      	bgt.n	8003e7a <Int2String+0x5e>
		digits = 6;
 8003e4c:	2306      	movs	r3, #6
 8003e4e:	e008      	b.n	8003e62 <Int2String+0x46>
		outputString[0] = '-';
 8003e50:	232d      	movs	r3, #45	; 0x2d
 8003e52:	f800 3b01 	strb.w	r3, [r0], #1
		maxL--;
 8003e56:	1e54      	subs	r4, r2, #1
 8003e58:	b2e4      	uxtb	r4, r4
		value = -value;
 8003e5a:	4249      	negs	r1, r1
		numWritten = 1;
 8003e5c:	2501      	movs	r5, #1
 8003e5e:	e7e4      	b.n	8003e2a <Int2String+0xe>
		digits = 1;
 8003e60:	2301      	movs	r3, #1
	else
		digits = 7;

	if (digits > maxL)
 8003e62:	429c      	cmp	r4, r3
 8003e64:	d21c      	bcs.n	8003ea0 <Int2String+0x84>
		return 0; // error - not enough space in output string!
 8003e66:	2000      	movs	r0, #0
 8003e68:	e01d      	b.n	8003ea6 <Int2String+0x8a>
		digits = 2;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e7f9      	b.n	8003e62 <Int2String+0x46>
		digits = 3;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e7f7      	b.n	8003e62 <Int2String+0x46>
		digits = 4;
 8003e72:	2304      	movs	r3, #4
 8003e74:	e7f5      	b.n	8003e62 <Int2String+0x46>
		digits = 5;
 8003e76:	2305      	movs	r3, #5
 8003e78:	e7f3      	b.n	8003e62 <Int2String+0x46>
		digits = 7;
 8003e7a:	2307      	movs	r3, #7
 8003e7c:	e7f1      	b.n	8003e62 <Int2String+0x46>

	writePosition = digits;
	while (writePosition > 0)
	{
		outputString[writePosition-1] = (char) ((value % 10) + 48);
 8003e7e:	1e5a      	subs	r2, r3, #1
 8003e80:	4c0d      	ldr	r4, [pc, #52]	; (8003eb8 <Int2String+0x9c>)
 8003e82:	fb84 3401 	smull	r3, r4, r4, r1
 8003e86:	17cb      	asrs	r3, r1, #31
 8003e88:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
 8003e8c:	461e      	mov	r6, r3
 8003e8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e92:	005c      	lsls	r4, r3, #1
 8003e94:	1b0b      	subs	r3, r1, r4
 8003e96:	3330      	adds	r3, #48	; 0x30
 8003e98:	5483      	strb	r3, [r0, r2]
		value /= 10;
 8003e9a:	4631      	mov	r1, r6
		writePosition--;
 8003e9c:	4613      	mov	r3, r2
		numWritten++;
 8003e9e:	3501      	adds	r5, #1
	while (writePosition > 0)
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	dcec      	bgt.n	8003e7e <Int2String+0x62>
	}

	return numWritten;
 8003ea4:	4628      	mov	r0, r5
}
 8003ea6:	bc70      	pop	{r4, r5, r6}
 8003ea8:	4770      	bx	lr
		return 0;
 8003eaa:	2000      	movs	r0, #0
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	0001869f 	.word	0x0001869f
 8003eb4:	000f423f 	.word	0x000f423f
 8003eb8:	66666667 	.word	0x66666667

08003ebc <writeToPins>:

void writeToPins(uint8_t segments[], uint8_t pins[], int segmentsL, uint8_t i)
{
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	4607      	mov	r7, r0
 8003ec0:	460d      	mov	r5, r1
 8003ec2:	461c      	mov	r4, r3
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segments[i] >> 0) & 0b00000001)); //1
 8003ec4:	5cc2      	ldrb	r2, [r0, r3]
 8003ec6:	f082 0201 	eor.w	r2, r2, #1
 8003eca:	4e39      	ldr	r6, [pc, #228]	; (8003fb0 <writeToPins+0xf4>)
 8003ecc:	f002 0201 	and.w	r2, r2, #1
 8003ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	f7fd fd63 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segments[i] >> 1) & 0b00000001)); //2
 8003eda:	5d3a      	ldrb	r2, [r7, r4]
 8003edc:	0852      	lsrs	r2, r2, #1
 8003ede:	f082 0201 	eor.w	r2, r2, #1
 8003ee2:	f002 0201 	and.w	r2, r2, #1
 8003ee6:	2110      	movs	r1, #16
 8003ee8:	4630      	mov	r0, r6
 8003eea:	f7fd fd59 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segments[i] >> 2) & 0b00000001)); //3
 8003eee:	5d3a      	ldrb	r2, [r7, r4]
 8003ef0:	0892      	lsrs	r2, r2, #2
 8003ef2:	f082 0201 	eor.w	r2, r2, #1
 8003ef6:	f002 0201 	and.w	r2, r2, #1
 8003efa:	2120      	movs	r1, #32
 8003efc:	4630      	mov	r0, r6
 8003efe:	f7fd fd4f 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segments[i] >> 3) & 0b00000001)); //4
 8003f02:	5d3a      	ldrb	r2, [r7, r4]
 8003f04:	08d2      	lsrs	r2, r2, #3
 8003f06:	f082 0201 	eor.w	r2, r2, #1
 8003f0a:	f002 0201 	and.w	r2, r2, #1
 8003f0e:	2108      	movs	r1, #8
 8003f10:	4630      	mov	r0, r6
 8003f12:	f7fd fd45 	bl	80019a0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, (~(pins[i] >> 0) & 0b00000001)); //a
 8003f16:	5d2a      	ldrb	r2, [r5, r4]
 8003f18:	f082 0201 	eor.w	r2, r2, #1
 8003f1c:	f002 0201 	and.w	r2, r2, #1
 8003f20:	2120      	movs	r1, #32
 8003f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f26:	f7fd fd3b 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6, (~(pins[i] >> 1) & 0b00000001)); //b
 8003f2a:	5d2a      	ldrb	r2, [r5, r4]
 8003f2c:	0852      	lsrs	r2, r2, #1
 8003f2e:	f082 0201 	eor.w	r2, r2, #1
 8003f32:	f002 0201 	and.w	r2, r2, #1
 8003f36:	2140      	movs	r1, #64	; 0x40
 8003f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f3c:	f7fd fd30 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, (~(pins[i] >> 2) & 0b00000001)); //c
 8003f40:	5d2a      	ldrb	r2, [r5, r4]
 8003f42:	0892      	lsrs	r2, r2, #2
 8003f44:	f082 0201 	eor.w	r2, r2, #1
 8003f48:	f002 0201 	and.w	r2, r2, #1
 8003f4c:	2180      	movs	r1, #128	; 0x80
 8003f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f52:	f7fd fd25 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6, (~(pins[i] >> 3) & 0b00000001)); //d
 8003f56:	5d2a      	ldrb	r2, [r5, r4]
 8003f58:	08d2      	lsrs	r2, r2, #3
 8003f5a:	f082 0201 	eor.w	r2, r2, #1
 8003f5e:	f002 0201 	and.w	r2, r2, #1
 8003f62:	2140      	movs	r1, #64	; 0x40
 8003f64:	4630      	mov	r0, r6
 8003f66:	f7fd fd1b 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7, (~(pins[i] >> 4) & 0b00000001)); //e
 8003f6a:	5d2a      	ldrb	r2, [r5, r4]
 8003f6c:	0912      	lsrs	r2, r2, #4
 8003f6e:	f082 0201 	eor.w	r2, r2, #1
 8003f72:	f002 0201 	and.w	r2, r2, #1
 8003f76:	2180      	movs	r1, #128	; 0x80
 8003f78:	480e      	ldr	r0, [pc, #56]	; (8003fb4 <writeToPins+0xf8>)
 8003f7a:	f7fd fd11 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, (~(pins[i] >> 5) & 0b00000001)); //f
 8003f7e:	5d2a      	ldrb	r2, [r5, r4]
 8003f80:	0952      	lsrs	r2, r2, #5
 8003f82:	f082 0201 	eor.w	r2, r2, #1
 8003f86:	f002 0201 	and.w	r2, r2, #1
 8003f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f92:	f7fd fd05 	bl	80019a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, (~(pins[i] >> 6) & 0b00000001)); //g
 8003f96:	5d2a      	ldrb	r2, [r5, r4]
 8003f98:	0992      	lsrs	r2, r2, #6
 8003f9a:	f082 0201 	eor.w	r2, r2, #1
 8003f9e:	f002 0201 	and.w	r2, r2, #1
 8003fa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003faa:	f7fd fcf9 	bl	80019a0 <HAL_GPIO_WritePin>
 8003fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fb0:	48000400 	.word	0x48000400
 8003fb4:	48000800 	.word	0x48000800

08003fb8 <timeToEpoch>:

}

time_t timeToEpoch(RTC_DateTypeDef dateLive, RTC_TimeTypeDef timeLive)
{
 8003fb8:	b084      	sub	sp, #16
 8003fba:	b510      	push	{r4, lr}
 8003fbc:	b08c      	sub	sp, #48	; 0x30
 8003fbe:	9001      	str	r0, [sp, #4]
 8003fc0:	ac0f      	add	r4, sp, #60	; 0x3c
 8003fc2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	//-----------------------------------------------------------------------possibly hardcode date protion

	time_t epoch;
	struct tm time;

	time.tm_year = dateLive.Year - 1900;
 8003fc6:	0e03      	lsrs	r3, r0, #24
 8003fc8:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8003fcc:	9308      	str	r3, [sp, #32]
	time.tm_mon = dateLive.Month;
 8003fce:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003fd2:	9307      	str	r3, [sp, #28]
	time.tm_mday = dateLive.Date;
 8003fd4:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8003fd8:	9006      	str	r0, [sp, #24]
	time.tm_hour = timeLive.Hours;
 8003fda:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8003fde:	9305      	str	r3, [sp, #20]
	time.tm_min = timeLive.Minutes;
 8003fe0:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 8003fe4:	9304      	str	r3, [sp, #16]
	time.tm_sec = timeLive.Seconds;
 8003fe6:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8003fea:	9303      	str	r3, [sp, #12]
	time.tm_isdst = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	930b      	str	r3, [sp, #44]	; 0x2c

	return epoch = mktime(&time);
 8003ff0:	a803      	add	r0, sp, #12
 8003ff2:	f001 fe9d 	bl	8005d30 <mktime>
}
 8003ff6:	b00c      	add	sp, #48	; 0x30
 8003ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ffc:	b004      	add	sp, #16
 8003ffe:	4770      	bx	lr

08004000 <HAL_UART_RxCpltCallback>:
// This function will execute whenever a character is received from the UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
	// the interrupt handler will automatically put the received character in the uartRXChar variable (no need to write any code for that).
	// so all we do it set flag to indicate character was received, and then process the received character further in the main loop
	uartRxFlag = true;
 8004000:	2201      	movs	r2, #1
 8004002:	4b01      	ldr	r3, [pc, #4]	; (8004008 <HAL_UART_RxCpltCallback+0x8>)
 8004004:	701a      	strb	r2, [r3, #0]
 8004006:	4770      	bx	lr
 8004008:	200002d7 	.word	0x200002d7

0800400c <HAL_TIM_PeriodElapsedCallback>:
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //every 250 ns
{
	if (htim == &htim2)
 800400c:	4b03      	ldr	r3, [pc, #12]	; (800401c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800400e:	4283      	cmp	r3, r0
 8004010:	d000      	beq.n	8004014 <HAL_TIM_PeriodElapsedCallback+0x8>
 8004012:	4770      	bx	lr
		adcFlag = true;
 8004014:	2201      	movs	r2, #1
 8004016:	4b02      	ldr	r3, [pc, #8]	; (8004020 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8004018:	701a      	strb	r2, [r3, #0]

}
 800401a:	e7fa      	b.n	8004012 <HAL_TIM_PeriodElapsedCallback+0x6>
 800401c:	2000041c 	.word	0x2000041c
 8004020:	200002e8 	.word	0x200002e8

08004024 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	flowHighFlag = 1;
 8004024:	2301      	movs	r3, #1
 8004026:	4a02      	ldr	r2, [pc, #8]	; (8004030 <HAL_GPIO_EXTI_Callback+0xc>)
 8004028:	7013      	strb	r3, [r2, #0]
	firstHighFlag = 1;
 800402a:	4a02      	ldr	r2, [pc, #8]	; (8004034 <HAL_GPIO_EXTI_Callback+0x10>)
 800402c:	7013      	strb	r3, [r2, #0]
 800402e:	4770      	bx	lr
 8004030:	200002d6 	.word	0x200002d6
 8004034:	200002b8 	.word	0x200002b8

08004038 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
static void MX_GPIO_Init(void)
{
 8004038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800403c:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800403e:	4b56      	ldr	r3, [pc, #344]	; (8004198 <MX_GPIO_Init+0x160>)
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004046:	615a      	str	r2, [r3, #20]
 8004048:	695a      	ldr	r2, [r3, #20]
 800404a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800404e:	9201      	str	r2, [sp, #4]
 8004050:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004058:	615a      	str	r2, [r3, #20]
 800405a:	695a      	ldr	r2, [r3, #20]
 800405c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8004060:	9202      	str	r2, [sp, #8]
 8004062:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800406a:	615a      	str	r2, [r3, #20]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004072:	9203      	str	r2, [sp, #12]
 8004074:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800407c:	615a      	str	r2, [r3, #20]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004084:	9304      	str	r3, [sp, #16]
 8004086:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_SET);
 8004088:	2201      	movs	r2, #1
 800408a:	2113      	movs	r1, #19
 800408c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004090:	f7fd fc86 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8004094:	2200      	movs	r2, #0
 8004096:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800409a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800409e:	f7fd fc7f 	bl	80019a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80040a2:	4f3e      	ldr	r7, [pc, #248]	; (800419c <MX_GPIO_Init+0x164>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80040aa:	4638      	mov	r0, r7
 80040ac:	f7fd fc78 	bl	80019a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 80040b0:	4d3b      	ldr	r5, [pc, #236]	; (80041a0 <MX_GPIO_Init+0x168>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 80040b8:	4628      	mov	r0, r5
 80040ba:	f7fd fc71 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80040be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040c2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80040c4:	4b37      	ldr	r3, [pc, #220]	; (80041a4 <MX_GPIO_Init+0x16c>)
 80040c6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c8:	2400      	movs	r4, #0
 80040ca:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80040cc:	a905      	add	r1, sp, #20
 80040ce:	4628      	mov	r0, r5
 80040d0:	f7fd fb9c 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80040d4:	f04f 0803 	mov.w	r8, #3
 80040d8:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040dc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040de:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040e0:	a905      	add	r1, sp, #20
 80040e2:	4628      	mov	r0, r5
 80040e4:	f7fd fb92 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80040e8:	2313      	movs	r3, #19
 80040ea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80040ec:	2311      	movs	r3, #17
 80040ee:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040f0:	2601      	movs	r6, #1
 80040f2:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f6:	a905      	add	r1, sp, #20
 80040f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040fc:	f7fd fb86 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004100:	230c      	movs	r3, #12
 8004102:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004104:	2302      	movs	r3, #2
 8004106:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004108:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800410a:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800410e:	2307      	movs	r3, #7
 8004110:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004112:	a905      	add	r1, sp, #20
 8004114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004118:	f7fd fb78 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 800411c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004120:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004122:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004124:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004126:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004128:	a905      	add	r1, sp, #20
 800412a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800412e:	f7fd fb6d 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8004132:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8004136:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004138:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800413c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800413e:	a905      	add	r1, sp, #20
 8004140:	4638      	mov	r0, r7
 8004142:	f7fd fb63 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8004146:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800414a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800414c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004150:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004152:	a905      	add	r1, sp, #20
 8004154:	4628      	mov	r0, r5
 8004156:	f7fd fb59 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800415a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800415e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <MX_GPIO_Init+0x170>)
 8004162:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004166:	a905      	add	r1, sp, #20
 8004168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800416c:	f7fd fb4e 	bl	800180c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004170:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004174:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004176:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004178:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800417a:	a905      	add	r1, sp, #20
 800417c:	4638      	mov	r0, r7
 800417e:	f7fd fb45 	bl	800180c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004182:	4622      	mov	r2, r4
 8004184:	4621      	mov	r1, r4
 8004186:	2028      	movs	r0, #40	; 0x28
 8004188:	f7fd f9d4 	bl	8001534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800418c:	2028      	movs	r0, #40	; 0x28
 800418e:	f7fd fa03 	bl	8001598 <HAL_NVIC_EnableIRQ>

}
 8004192:	b00a      	add	sp, #40	; 0x28
 8004194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004198:	40021000 	.word	0x40021000
 800419c:	48000400 	.word	0x48000400
 80041a0:	48000800 	.word	0x48000800
 80041a4:	10210000 	.word	0x10210000
 80041a8:	10310000 	.word	0x10310000

080041ac <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80041ac:	e7fe      	b.n	80041ac <_Error_Handler>
	...

080041b0 <MX_USART1_UART_Init>:
{
 80041b0:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80041b2:	480c      	ldr	r0, [pc, #48]	; (80041e4 <MX_USART1_UART_Init+0x34>)
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <MX_USART1_UART_Init+0x38>)
 80041b6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80041b8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80041bc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041be:	2300      	movs	r3, #0
 80041c0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041c2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041c4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041c6:	220c      	movs	r2, #12
 80041c8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ca:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041cc:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041ce:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041d0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041d2:	f7ff fc2c 	bl	8003a2e <HAL_UART_Init>
 80041d6:	b900      	cbnz	r0, 80041da <MX_USART1_UART_Init+0x2a>
 80041d8:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80041da:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80041de:	4803      	ldr	r0, [pc, #12]	; (80041ec <MX_USART1_UART_Init+0x3c>)
 80041e0:	f7ff ffe4 	bl	80041ac <_Error_Handler>
 80041e4:	2000038c 	.word	0x2000038c
 80041e8:	40013800 	.word	0x40013800
 80041ec:	08007a60 	.word	0x08007a60

080041f0 <MX_ADC1_Init>:
{
 80041f0:	b500      	push	{lr}
 80041f2:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Instance = ADC1;
 80041f4:	481d      	ldr	r0, [pc, #116]	; (800426c <MX_ADC1_Init+0x7c>)
 80041f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80041fa:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80041fc:	2300      	movs	r3, #0
 80041fe:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004200:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004202:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004204:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004206:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004208:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800420a:	2201      	movs	r2, #1
 800420c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800420e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004210:	6202      	str	r2, [r0, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004212:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004214:	2204      	movs	r2, #4
 8004216:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004218:	6183      	str	r3, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800421a:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800421c:	f7fc fd84 	bl	8000d28 <HAL_ADC_Init>
 8004220:	b9c0      	cbnz	r0, 8004254 <MX_ADC1_Init+0x64>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004222:	a90a      	add	r1, sp, #40	; 0x28
 8004224:	2300      	movs	r3, #0
 8004226:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800422a:	4810      	ldr	r0, [pc, #64]	; (800426c <MX_ADC1_Init+0x7c>)
 800422c:	f7fd f8d2 	bl	80013d4 <HAL_ADCEx_MultiModeConfigChannel>
 8004230:	b9a0      	cbnz	r0, 800425c <MX_ADC1_Init+0x6c>
  sConfig.Channel = ADC_CHANNEL_9;
 8004232:	2309      	movs	r3, #9
 8004234:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004236:	2301      	movs	r3, #1
 8004238:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800423a:	2300      	movs	r3, #0
 800423c:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800423e:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004240:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 8004242:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004244:	a901      	add	r1, sp, #4
 8004246:	4809      	ldr	r0, [pc, #36]	; (800426c <MX_ADC1_Init+0x7c>)
 8004248:	f7fc ff02 	bl	8001050 <HAL_ADC_ConfigChannel>
 800424c:	b950      	cbnz	r0, 8004264 <MX_ADC1_Init+0x74>
}
 800424e:	b00b      	add	sp, #44	; 0x2c
 8004250:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004254:	21e3      	movs	r1, #227	; 0xe3
 8004256:	4806      	ldr	r0, [pc, #24]	; (8004270 <MX_ADC1_Init+0x80>)
 8004258:	f7ff ffa8 	bl	80041ac <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800425c:	21eb      	movs	r1, #235	; 0xeb
 800425e:	4804      	ldr	r0, [pc, #16]	; (8004270 <MX_ADC1_Init+0x80>)
 8004260:	f7ff ffa4 	bl	80041ac <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004264:	21f8      	movs	r1, #248	; 0xf8
 8004266:	4802      	ldr	r0, [pc, #8]	; (8004270 <MX_ADC1_Init+0x80>)
 8004268:	f7ff ffa0 	bl	80041ac <_Error_Handler>
 800426c:	20000338 	.word	0x20000338
 8004270:	08007a60 	.word	0x08007a60

08004274 <MX_I2C1_Init>:
{
 8004274:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8004276:	4815      	ldr	r0, [pc, #84]	; (80042cc <MX_I2C1_Init+0x58>)
 8004278:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <MX_I2C1_Init+0x5c>)
 800427a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800427c:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <MX_I2C1_Init+0x60>)
 800427e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004284:	2201      	movs	r2, #1
 8004286:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004288:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800428a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800428c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800428e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004290:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004292:	f7fd fbe9 	bl	8001a68 <HAL_I2C_Init>
 8004296:	b950      	cbnz	r0, 80042ae <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004298:	2100      	movs	r1, #0
 800429a:	480c      	ldr	r0, [pc, #48]	; (80042cc <MX_I2C1_Init+0x58>)
 800429c:	f7fd ff09 	bl	80020b2 <HAL_I2CEx_ConfigAnalogFilter>
 80042a0:	b950      	cbnz	r0, 80042b8 <MX_I2C1_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80042a2:	2100      	movs	r1, #0
 80042a4:	4809      	ldr	r0, [pc, #36]	; (80042cc <MX_I2C1_Init+0x58>)
 80042a6:	f7fd ff32 	bl	800210e <HAL_I2CEx_ConfigDigitalFilter>
 80042aa:	b950      	cbnz	r0, 80042c2 <MX_I2C1_Init+0x4e>
 80042ac:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80042ae:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80042b2:	4809      	ldr	r0, [pc, #36]	; (80042d8 <MX_I2C1_Init+0x64>)
 80042b4:	f7ff ff7a 	bl	80041ac <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80042b8:	f240 1113 	movw	r1, #275	; 0x113
 80042bc:	4806      	ldr	r0, [pc, #24]	; (80042d8 <MX_I2C1_Init+0x64>)
 80042be:	f7ff ff75 	bl	80041ac <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80042c2:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80042c6:	4804      	ldr	r0, [pc, #16]	; (80042d8 <MX_I2C1_Init+0x64>)
 80042c8:	f7ff ff70 	bl	80041ac <_Error_Handler>
 80042cc:	200002ec 	.word	0x200002ec
 80042d0:	40005400 	.word	0x40005400
 80042d4:	2000090e 	.word	0x2000090e
 80042d8:	08007a60 	.word	0x08007a60

080042dc <MX_RTC_Init>:
{
 80042dc:	b500      	push	{lr}
 80042de:	b087      	sub	sp, #28
  hrtc.Instance = RTC;
 80042e0:	482b      	ldr	r0, [pc, #172]	; (8004390 <MX_RTC_Init+0xb4>)
 80042e2:	4b2c      	ldr	r3, [pc, #176]	; (8004394 <MX_RTC_Init+0xb8>)
 80042e4:	6003      	str	r3, [r0, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 80042e6:	2100      	movs	r1, #0
 80042e8:	f7fe fef3 	bl	80030d2 <HAL_RTCEx_BKUPRead>
 80042ec:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80042f0:	4298      	cmp	r0, r3
 80042f2:	d036      	beq.n	8004362 <MX_RTC_Init+0x86>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80042f4:	4826      	ldr	r0, [pc, #152]	; (8004390 <MX_RTC_Init+0xb4>)
 80042f6:	2300      	movs	r3, #0
 80042f8:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80042fa:	227f      	movs	r2, #127	; 0x7f
 80042fc:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80042fe:	22ff      	movs	r2, #255	; 0xff
 8004300:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004302:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004304:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004306:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004308:	f7fe fc9d 	bl	8002c46 <HAL_RTC_Init>
 800430c:	bb60      	cbnz	r0, 8004368 <MX_RTC_Init+0x8c>
  sTime.Hours = 0x0;
 800430e:	2300      	movs	r3, #0
 8004310:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8004314:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8004318:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800431c:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800431e:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004320:	2201      	movs	r2, #1
 8004322:	a901      	add	r1, sp, #4
 8004324:	481a      	ldr	r0, [pc, #104]	; (8004390 <MX_RTC_Init+0xb4>)
 8004326:	f7fe fcfb 	bl	8002d20 <HAL_RTC_SetTime>
 800432a:	bb10      	cbnz	r0, 8004372 <MX_RTC_Init+0x96>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800432c:	2201      	movs	r2, #1
 800432e:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8004332:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8004336:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 800433a:	2300      	movs	r3, #0
 800433c:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004340:	4669      	mov	r1, sp
 8004342:	4813      	ldr	r0, [pc, #76]	; (8004390 <MX_RTC_Init+0xb4>)
 8004344:	f7fe fd6b 	bl	8002e1e <HAL_RTC_SetDate>
 8004348:	b9c0      	cbnz	r0, 800437c <MX_RTC_Init+0xa0>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800434a:	2204      	movs	r2, #4
 800434c:	2100      	movs	r1, #0
 800434e:	4810      	ldr	r0, [pc, #64]	; (8004390 <MX_RTC_Init+0xb4>)
 8004350:	f7fe fe28 	bl	8002fa4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004354:	b9b8      	cbnz	r0, 8004386 <MX_RTC_Init+0xaa>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8004356:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800435a:	2100      	movs	r1, #0
 800435c:	480c      	ldr	r0, [pc, #48]	; (8004390 <MX_RTC_Init+0xb4>)
 800435e:	f7fe feb3 	bl	80030c8 <HAL_RTCEx_BKUPWrite>
}
 8004362:	b007      	add	sp, #28
 8004364:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8004368:	f44f 7199 	mov.w	r1, #306	; 0x132
 800436c:	480a      	ldr	r0, [pc, #40]	; (8004398 <MX_RTC_Init+0xbc>)
 800436e:	f7ff ff1d 	bl	80041ac <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004372:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004376:	4808      	ldr	r0, [pc, #32]	; (8004398 <MX_RTC_Init+0xbc>)
 8004378:	f7ff ff18 	bl	80041ac <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800437c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004380:	4805      	ldr	r0, [pc, #20]	; (8004398 <MX_RTC_Init+0xbc>)
 8004382:	f7ff ff13 	bl	80041ac <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004386:	f240 114f 	movw	r1, #335	; 0x14f
 800438a:	4803      	ldr	r0, [pc, #12]	; (8004398 <MX_RTC_Init+0xbc>)
 800438c:	f7ff ff0e 	bl	80041ac <_Error_Handler>
 8004390:	200003fc 	.word	0x200003fc
 8004394:	40002800 	.word	0x40002800
 8004398:	08007a60 	.word	0x08007a60

0800439c <MX_TIM2_Init>:
{
 800439c:	b500      	push	{lr}
 800439e:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 80043a0:	4819      	ldr	r0, [pc, #100]	; (8004408 <MX_TIM2_Init+0x6c>)
 80043a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043a6:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80043ac:	2210      	movs	r2, #16
 80043ae:	6082      	str	r2, [r0, #8]
  htim2.Init.Period = 16000;
 80043b0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80043b4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043b6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80043bc:	f7fe ffd8 	bl	8003370 <HAL_TIM_Base_Init>
 80043c0:	b998      	cbnz	r0, 80043ea <MX_TIM2_Init+0x4e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043c2:	a908      	add	r1, sp, #32
 80043c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043c8:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80043cc:	480e      	ldr	r0, [pc, #56]	; (8004408 <MX_TIM2_Init+0x6c>)
 80043ce:	f7fe fff5 	bl	80033bc <HAL_TIM_ConfigClockSource>
 80043d2:	b978      	cbnz	r0, 80043f4 <MX_TIM2_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043d4:	2300      	movs	r3, #0
 80043d6:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043d8:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80043da:	a901      	add	r1, sp, #4
 80043dc:	480a      	ldr	r0, [pc, #40]	; (8004408 <MX_TIM2_Init+0x6c>)
 80043de:	f7ff f879 	bl	80034d4 <HAL_TIMEx_MasterConfigSynchronization>
 80043e2:	b960      	cbnz	r0, 80043fe <MX_TIM2_Init+0x62>
}
 80043e4:	b009      	add	sp, #36	; 0x24
 80043e6:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80043ea:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80043ee:	4807      	ldr	r0, [pc, #28]	; (800440c <MX_TIM2_Init+0x70>)
 80043f0:	f7ff fedc 	bl	80041ac <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80043f4:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80043f8:	4804      	ldr	r0, [pc, #16]	; (800440c <MX_TIM2_Init+0x70>)
 80043fa:	f7ff fed7 	bl	80041ac <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80043fe:	f240 1173 	movw	r1, #371	; 0x173
 8004402:	4802      	ldr	r0, [pc, #8]	; (800440c <MX_TIM2_Init+0x70>)
 8004404:	f7ff fed2 	bl	80041ac <_Error_Handler>
 8004408:	2000041c 	.word	0x2000041c
 800440c:	08007a60 	.word	0x08007a60

08004410 <SystemClock_Config>:
{
 8004410:	b500      	push	{lr}
 8004412:	b097      	sub	sp, #92	; 0x5c
  HAL_PWR_EnableBkUpAccess();
 8004414:	f7fd fea8 	bl	8002168 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004418:	4a28      	ldr	r2, [pc, #160]	; (80044bc <SystemClock_Config+0xac>)
 800441a:	6a13      	ldr	r3, [r2, #32]
 800441c:	f023 0318 	bic.w	r3, r3, #24
 8004420:	6213      	str	r3, [r2, #32]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004422:	2306      	movs	r3, #6
 8004424:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004426:	2301      	movs	r3, #1
 8004428:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800442a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800442c:	2310      	movs	r3, #16
 800442e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004430:	2302      	movs	r3, #2
 8004432:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004434:	2300      	movs	r3, #0
 8004436:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004438:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800443c:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800443e:	a80c      	add	r0, sp, #48	; 0x30
 8004440:	f7fd fe9a 	bl	8002178 <HAL_RCC_OscConfig>
 8004444:	bb70      	cbnz	r0, 80044a4 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004446:	230f      	movs	r3, #15
 8004448:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800444a:	2102      	movs	r1, #2
 800444c:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800444e:	2300      	movs	r3, #0
 8004450:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004456:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004458:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800445a:	a807      	add	r0, sp, #28
 800445c:	f7fe f9ca 	bl	80027f4 <HAL_RCC_ClockConfig>
 8004460:	bb20      	cbnz	r0, 80044ac <SystemClock_Config+0x9c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8004462:	4b17      	ldr	r3, [pc, #92]	; (80044c0 <SystemClock_Config+0xb0>)
 8004464:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004466:	2200      	movs	r2, #0
 8004468:	9202      	str	r2, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800446a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800446e:	9304      	str	r3, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004470:	9203      	str	r2, [sp, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004472:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004474:	4668      	mov	r0, sp
 8004476:	f7fe fad9 	bl	8002a2c <HAL_RCCEx_PeriphCLKConfig>
 800447a:	b9d8      	cbnz	r0, 80044b4 <SystemClock_Config+0xa4>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800447c:	f7fe faa4 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <SystemClock_Config+0xb4>)
 8004482:	fba3 3000 	umull	r3, r0, r3, r0
 8004486:	0980      	lsrs	r0, r0, #6
 8004488:	f7fd f892 	bl	80015b0 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800448c:	2004      	movs	r0, #4
 800448e:	f7fd f8a5 	bl	80015dc <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004492:	2200      	movs	r2, #0
 8004494:	4611      	mov	r1, r2
 8004496:	f04f 30ff 	mov.w	r0, #4294967295
 800449a:	f7fd f84b 	bl	8001534 <HAL_NVIC_SetPriority>
}
 800449e:	b017      	add	sp, #92	; 0x5c
 80044a0:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80044a4:	21a2      	movs	r1, #162	; 0xa2
 80044a6:	4808      	ldr	r0, [pc, #32]	; (80044c8 <SystemClock_Config+0xb8>)
 80044a8:	f7ff fe80 	bl	80041ac <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80044ac:	21b0      	movs	r1, #176	; 0xb0
 80044ae:	4806      	ldr	r0, [pc, #24]	; (80044c8 <SystemClock_Config+0xb8>)
 80044b0:	f7ff fe7c 	bl	80041ac <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80044b4:	21bb      	movs	r1, #187	; 0xbb
 80044b6:	4804      	ldr	r0, [pc, #16]	; (80044c8 <SystemClock_Config+0xb8>)
 80044b8:	f7ff fe78 	bl	80041ac <_Error_Handler>
 80044bc:	40021000 	.word	0x40021000
 80044c0:	000100a1 	.word	0x000100a1
 80044c4:	10624dd3 	.word	0x10624dd3
 80044c8:	08007a60 	.word	0x08007a60

080044cc <main>:
{
 80044cc:	b508      	push	{r3, lr}
  HAL_Init();
 80044ce:	f7fc fb85 	bl	8000bdc <HAL_Init>
  SystemClock_Config();
 80044d2:	f7ff ff9d 	bl	8004410 <SystemClock_Config>
  MX_GPIO_Init();
 80044d6:	f7ff fdaf 	bl	8004038 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80044da:	f7ff fe69 	bl	80041b0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80044de:	f7ff fe87 	bl	80041f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80044e2:	f7ff fec7 	bl	8004274 <MX_I2C1_Init>
  MX_RTC_Init();
 80044e6:	f7ff fef9 	bl	80042dc <MX_RTC_Init>
  MX_TIM2_Init();
 80044ea:	f7ff ff57 	bl	800439c <MX_TIM2_Init>
  UserInitialise();
 80044ee:	f000 f98d 	bl	800480c <UserInitialise>
	  Flags();
 80044f2:	f000 ffc3 	bl	800547c <Flags>
 80044f6:	e7fc      	b.n	80044f2 <main+0x26>

080044f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044f8:	b500      	push	{lr}
 80044fa:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044fc:	4b1c      	ldr	r3, [pc, #112]	; (8004570 <HAL_MspInit+0x78>)
 80044fe:	699a      	ldr	r2, [r3, #24]
 8004500:	f042 0201 	orr.w	r2, r2, #1
 8004504:	619a      	str	r2, [r3, #24]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004510:	2007      	movs	r0, #7
 8004512:	f7fc fffd 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004516:	2200      	movs	r2, #0
 8004518:	4611      	mov	r1, r2
 800451a:	f06f 000b 	mvn.w	r0, #11
 800451e:	f7fd f809 	bl	8001534 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004522:	2200      	movs	r2, #0
 8004524:	4611      	mov	r1, r2
 8004526:	f06f 000a 	mvn.w	r0, #10
 800452a:	f7fd f803 	bl	8001534 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800452e:	2200      	movs	r2, #0
 8004530:	4611      	mov	r1, r2
 8004532:	f06f 0009 	mvn.w	r0, #9
 8004536:	f7fc fffd 	bl	8001534 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800453a:	2200      	movs	r2, #0
 800453c:	4611      	mov	r1, r2
 800453e:	f06f 0004 	mvn.w	r0, #4
 8004542:	f7fc fff7 	bl	8001534 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004546:	2200      	movs	r2, #0
 8004548:	4611      	mov	r1, r2
 800454a:	f06f 0003 	mvn.w	r0, #3
 800454e:	f7fc fff1 	bl	8001534 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004552:	2200      	movs	r2, #0
 8004554:	4611      	mov	r1, r2
 8004556:	f06f 0001 	mvn.w	r0, #1
 800455a:	f7fc ffeb 	bl	8001534 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800455e:	2200      	movs	r2, #0
 8004560:	4611      	mov	r1, r2
 8004562:	f04f 30ff 	mov.w	r0, #4294967295
 8004566:	f7fc ffe5 	bl	8001534 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800456a:	b003      	add	sp, #12
 800456c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004570:	40021000 	.word	0x40021000

08004574 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8004574:	6803      	ldr	r3, [r0, #0]
 8004576:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800457a:	d000      	beq.n	800457e <HAL_ADC_MspInit+0xa>
 800457c:	4770      	bx	lr
{
 800457e:	b530      	push	{r4, r5, lr}
 8004580:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004582:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8004586:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004590:	615a      	str	r2, [r3, #20]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	9b00      	ldr	r3, [sp, #0]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PB1     ------> ADC1_IN12
    PB13     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800459c:	230c      	movs	r3, #12
 800459e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045a0:	2503      	movs	r5, #3
 80045a2:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	2400      	movs	r4, #0
 80045a6:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045a8:	a901      	add	r1, sp, #4
 80045aa:	4807      	ldr	r0, [pc, #28]	; (80045c8 <HAL_ADC_MspInit+0x54>)
 80045ac:	f7fd f92e 	bl	800180c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 80045b0:	f242 0302 	movw	r3, #8194	; 0x2002
 80045b4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045b6:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b8:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ba:	a901      	add	r1, sp, #4
 80045bc:	4803      	ldr	r0, [pc, #12]	; (80045cc <HAL_ADC_MspInit+0x58>)
 80045be:	f7fd f925 	bl	800180c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80045c2:	b007      	add	sp, #28
 80045c4:	bd30      	pop	{r4, r5, pc}
 80045c6:	bf00      	nop
 80045c8:	48000800 	.word	0x48000800
 80045cc:	48000400 	.word	0x48000400

080045d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80045d0:	6802      	ldr	r2, [r0, #0]
 80045d2:	4b1f      	ldr	r3, [pc, #124]	; (8004650 <HAL_I2C_MspInit+0x80>)
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d000      	beq.n	80045da <HAL_I2C_MspInit+0xa>
 80045d8:	4770      	bx	lr
{
 80045da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045dc:	b087      	sub	sp, #28
  
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80045de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045e4:	2712      	movs	r7, #18
 80045e6:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045e8:	2601      	movs	r6, #1
 80045ea:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045ec:	2503      	movs	r5, #3
 80045ee:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045f0:	2404      	movs	r4, #4
 80045f2:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f4:	eb0d 0104 	add.w	r1, sp, r4
 80045f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045fc:	f7fd f906 	bl	800180c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004600:	2380      	movs	r3, #128	; 0x80
 8004602:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004604:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004606:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004608:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800460a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800460c:	eb0d 0104 	add.w	r1, sp, r4
 8004610:	4810      	ldr	r0, [pc, #64]	; (8004654 <HAL_I2C_MspInit+0x84>)
 8004612:	f7fd f8fb 	bl	800180c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004616:	4b10      	ldr	r3, [pc, #64]	; (8004658 <HAL_I2C_MspInit+0x88>)
 8004618:	69da      	ldr	r2, [r3, #28]
 800461a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800461e:	61da      	str	r2, [r3, #28]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	9b00      	ldr	r3, [sp, #0]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800462a:	2200      	movs	r2, #0
 800462c:	4611      	mov	r1, r2
 800462e:	201f      	movs	r0, #31
 8004630:	f7fc ff80 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004634:	201f      	movs	r0, #31
 8004636:	f7fc ffaf 	bl	8001598 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800463a:	2200      	movs	r2, #0
 800463c:	4611      	mov	r1, r2
 800463e:	2020      	movs	r0, #32
 8004640:	f7fc ff78 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004644:	2020      	movs	r0, #32
 8004646:	f7fc ffa7 	bl	8001598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800464a:	b007      	add	sp, #28
 800464c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800464e:	bf00      	nop
 8004650:	40005400 	.word	0x40005400
 8004654:	48000400 	.word	0x48000400
 8004658:	40021000 	.word	0x40021000

0800465c <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800465c:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 800465e:	6802      	ldr	r2, [r0, #0]
 8004660:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_RTC_MspInit+0x34>)
 8004662:	429a      	cmp	r2, r3
 8004664:	d000      	beq.n	8004668 <HAL_RTC_MspInit+0xc>
 8004666:	bd08      	pop	{r3, pc}
 8004668:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800466c:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004670:	fab2 f282 	clz	r2, r2
 8004674:	4b07      	ldr	r3, [pc, #28]	; (8004694 <HAL_RTC_MspInit+0x38>)
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	2201      	movs	r2, #1
 800467c:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800467e:	2200      	movs	r2, #0
 8004680:	4611      	mov	r1, r2
 8004682:	2003      	movs	r0, #3
 8004684:	f7fc ff56 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8004688:	2003      	movs	r0, #3
 800468a:	f7fc ff85 	bl	8001598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800468e:	e7ea      	b.n	8004666 <HAL_RTC_MspInit+0xa>
 8004690:	40002800 	.word	0x40002800
 8004694:	10908100 	.word	0x10908100

08004698 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8004698:	6803      	ldr	r3, [r0, #0]
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469e:	d000      	beq.n	80046a2 <HAL_TIM_Base_MspInit+0xa>
 80046a0:	4770      	bx	lr
{
 80046a2:	b500      	push	{lr}
 80046a4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046a6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	f042 0201 	orr.w	r2, r2, #1
 80046b0:	61da      	str	r2, [r3, #28]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80046bc:	2200      	movs	r2, #0
 80046be:	4611      	mov	r1, r2
 80046c0:	201c      	movs	r0, #28
 80046c2:	f7fc ff37 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80046c6:	201c      	movs	r0, #28
 80046c8:	f7fc ff66 	bl	8001598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80046cc:	b003      	add	sp, #12
 80046ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080046d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80046d4:	6802      	ldr	r2, [r0, #0]
 80046d6:	4b15      	ldr	r3, [pc, #84]	; (800472c <HAL_UART_MspInit+0x58>)
 80046d8:	429a      	cmp	r2, r3
 80046da:	d000      	beq.n	80046de <HAL_UART_MspInit+0xa>
 80046dc:	4770      	bx	lr
{
 80046de:	b500      	push	{lr}
 80046e0:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046e2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80046e6:	699a      	ldr	r2, [r3, #24]
 80046e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ec:	619a      	str	r2, [r3, #24]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80046f8:	2330      	movs	r3, #48	; 0x30
 80046fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fc:	2302      	movs	r3, #2
 80046fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004700:	2301      	movs	r3, #1
 8004702:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004704:	2303      	movs	r3, #3
 8004706:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004708:	2307      	movs	r3, #7
 800470a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800470c:	a901      	add	r1, sp, #4
 800470e:	4808      	ldr	r0, [pc, #32]	; (8004730 <HAL_UART_MspInit+0x5c>)
 8004710:	f7fd f87c 	bl	800180c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004714:	2200      	movs	r2, #0
 8004716:	4611      	mov	r1, r2
 8004718:	2025      	movs	r0, #37	; 0x25
 800471a:	f7fc ff0b 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800471e:	2025      	movs	r0, #37	; 0x25
 8004720:	f7fc ff3a 	bl	8001598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004724:	b007      	add	sp, #28
 8004726:	f85d fb04 	ldr.w	pc, [sp], #4
 800472a:	bf00      	nop
 800472c:	40013800 	.word	0x40013800
 8004730:	48000800 	.word	0x48000800

08004734 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004734:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004736:	f7fc fa63 	bl	8000c00 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800473a:	f7fc ff60 	bl	80015fe <HAL_SYSTICK_IRQHandler>
 800473e:	bd08      	pop	{r3, pc}

08004740 <RTC_WKUP_IRQHandler>:

/**
* @brief This function handles RTC wake-up interrupt through EXTI line 20.
*/
void RTC_WKUP_IRQHandler(void)
{
 8004740:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004742:	4802      	ldr	r0, [pc, #8]	; (800474c <RTC_WKUP_IRQHandler+0xc>)
 8004744:	f7fe fca6 	bl	8003094 <HAL_RTCEx_WakeUpTimerIRQHandler>
 8004748:	bd08      	pop	{r3, pc}
 800474a:	bf00      	nop
 800474c:	200003fc 	.word	0x200003fc

08004750 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8004750:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004752:	4802      	ldr	r0, [pc, #8]	; (800475c <TIM2_IRQHandler+0xc>)
 8004754:	f7fe fcf5 	bl	8003142 <HAL_TIM_IRQHandler>
 8004758:	bd08      	pop	{r3, pc}
 800475a:	bf00      	nop
 800475c:	2000041c 	.word	0x2000041c

08004760 <I2C1_EV_IRQHandler>:

/**
* @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
*/
void I2C1_EV_IRQHandler(void)
{
 8004760:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004762:	4802      	ldr	r0, [pc, #8]	; (800476c <I2C1_EV_IRQHandler+0xc>)
 8004764:	f7fd f9de 	bl	8001b24 <HAL_I2C_EV_IRQHandler>
 8004768:	bd08      	pop	{r3, pc}
 800476a:	bf00      	nop
 800476c:	200002ec 	.word	0x200002ec

08004770 <I2C1_ER_IRQHandler>:

/**
* @brief This function handles I2C1 error interrupt.
*/
void I2C1_ER_IRQHandler(void)
{
 8004770:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004772:	4802      	ldr	r0, [pc, #8]	; (800477c <I2C1_ER_IRQHandler+0xc>)
 8004774:	f7fd fc4d 	bl	8002012 <HAL_I2C_ER_IRQHandler>
 8004778:	bd08      	pop	{r3, pc}
 800477a:	bf00      	nop
 800477c:	200002ec 	.word	0x200002ec

08004780 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 8004780:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004782:	4802      	ldr	r0, [pc, #8]	; (800478c <USART1_IRQHandler+0xc>)
 8004784:	f7ff fa0c 	bl	8003ba0 <HAL_UART_IRQHandler>
 8004788:	bd08      	pop	{r3, pc}
 800478a:	bf00      	nop
 800478c:	2000038c 	.word	0x2000038c

08004790 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8004790:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004792:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004796:	f7fd f909 	bl	80019ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800479a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800479e:	f7fd f905 	bl	80019ac <HAL_GPIO_EXTI_IRQHandler>
 80047a2:	bd08      	pop	{r3, pc}

080047a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047a4:	4915      	ldr	r1, [pc, #84]	; (80047fc <SystemInit+0x58>)
 80047a6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80047aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80047b2:	4b13      	ldr	r3, [pc, #76]	; (8004800 <SystemInit+0x5c>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80047bc:	6858      	ldr	r0, [r3, #4]
 80047be:	4a11      	ldr	r2, [pc, #68]	; (8004804 <SystemInit+0x60>)
 80047c0:	4002      	ands	r2, r0
 80047c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80047ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80047ce:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80047de:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80047e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e2:	f022 020f 	bic.w	r2, r2, #15
 80047e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80047e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80047ea:	4a07      	ldr	r2, [pc, #28]	; (8004808 <SystemInit+0x64>)
 80047ec:	4002      	ands	r2, r0
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80047f0:	2200      	movs	r2, #0
 80047f2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047f8:	608b      	str	r3, [r1, #8]
 80047fa:	4770      	bx	lr
 80047fc:	e000ed00 	.word	0xe000ed00
 8004800:	40021000 	.word	0x40021000
 8004804:	f87fc00c 	.word	0xf87fc00c
 8004808:	ff00fccc 	.word	0xff00fccc

0800480c <UserInitialise>:
uint32_t addressIndex;

extern void FLASH_PageErase(uint32_t PageAddress);

void UserInitialise(void)
{
 800480c:	b510      	push	{r4, lr}
	uartRxFlag = false;
 800480e:	2300      	movs	r3, #0
 8004810:	4a27      	ldr	r2, [pc, #156]	; (80048b0 <UserInitialise+0xa4>)
 8004812:	7013      	strb	r3, [r2, #0]
	tempSetpoint = 60;		// initial value
 8004814:	213c      	movs	r1, #60	; 0x3c
 8004816:	4a27      	ldr	r2, [pc, #156]	; (80048b4 <UserInitialise+0xa8>)
 8004818:	8011      	strh	r1, [r2, #0]

	adcFlag = false;
 800481a:	4a27      	ldr	r2, [pc, #156]	; (80048b8 <UserInitialise+0xac>)
 800481c:	7013      	strb	r3, [r2, #0]
	adcCh = 0;
 800481e:	4a27      	ldr	r2, [pc, #156]	; (80048bc <UserInitialise+0xb0>)
 8004820:	7013      	strb	r3, [r2, #0]
	sampleCntr = 0;
 8004822:	4a27      	ldr	r2, [pc, #156]	; (80048c0 <UserInitialise+0xb4>)
 8004824:	7013      	strb	r3, [r2, #0]
	irmsSum = 0;
 8004826:	2200      	movs	r2, #0
 8004828:	4926      	ldr	r1, [pc, #152]	; (80048c4 <UserInitialise+0xb8>)
 800482a:	600a      	str	r2, [r1, #0]
	vrmsSum = 0;
 800482c:	4926      	ldr	r1, [pc, #152]	; (80048c8 <UserInitialise+0xbc>)
 800482e:	600a      	str	r2, [r1, #0]

# define startAddress  0x08009000
	addressIndex = 0;
 8004830:	4a26      	ldr	r2, [pc, #152]	; (80048cc <UserInitialise+0xc0>)
 8004832:	6013      	str	r3, [r2, #0]

	valveState = 0;
 8004834:	4a26      	ldr	r2, [pc, #152]	; (80048d0 <UserInitialise+0xc4>)
 8004836:	8013      	strh	r3, [r2, #0]
	heaterState = 0;
 8004838:	4a26      	ldr	r2, [pc, #152]	; (80048d4 <UserInitialise+0xc8>)
 800483a:	8013      	strh	r3, [r2, #0]
	scheduleState = 0;
 800483c:	4a26      	ldr	r2, [pc, #152]	; (80048d8 <UserInitialise+0xcc>)
 800483e:	8013      	strh	r3, [r2, #0]

	numberMap[0] = 0b00111111;
 8004840:	4b26      	ldr	r3, [pc, #152]	; (80048dc <UserInitialise+0xd0>)
 8004842:	223f      	movs	r2, #63	; 0x3f
 8004844:	701a      	strb	r2, [r3, #0]
	numberMap[1] = 0b00000110;
 8004846:	2206      	movs	r2, #6
 8004848:	705a      	strb	r2, [r3, #1]
	numberMap[2] = 0b01011011;
 800484a:	225b      	movs	r2, #91	; 0x5b
 800484c:	709a      	strb	r2, [r3, #2]
	numberMap[3] = 0b01001111;
 800484e:	224f      	movs	r2, #79	; 0x4f
 8004850:	70da      	strb	r2, [r3, #3]
	numberMap[4] = 0b01100110;
 8004852:	2266      	movs	r2, #102	; 0x66
 8004854:	711a      	strb	r2, [r3, #4]
	numberMap[5] = 0b01101101;
 8004856:	226d      	movs	r2, #109	; 0x6d
 8004858:	715a      	strb	r2, [r3, #5]
	numberMap[6] = 0b01111101;
 800485a:	227d      	movs	r2, #125	; 0x7d
 800485c:	719a      	strb	r2, [r3, #6]
	numberMap[7] = 0b00000111;
 800485e:	2207      	movs	r2, #7
 8004860:	71da      	strb	r2, [r3, #7]
	numberMap[8] = 0b01111111;
 8004862:	217f      	movs	r1, #127	; 0x7f
 8004864:	7219      	strb	r1, [r3, #8]
	numberMap[9] = 0b01100111;
 8004866:	2267      	movs	r2, #103	; 0x67
 8004868:	725a      	strb	r2, [r3, #9]

	segementsSet[0] = 0b0001;
 800486a:	4b1d      	ldr	r3, [pc, #116]	; (80048e0 <UserInitialise+0xd4>)
 800486c:	2201      	movs	r2, #1
 800486e:	701a      	strb	r2, [r3, #0]
	segementsSet[1] = 0b0010;
 8004870:	2002      	movs	r0, #2
 8004872:	7058      	strb	r0, [r3, #1]
	segementsSet[2] = 0b0100;
 8004874:	2004      	movs	r0, #4
 8004876:	7098      	strb	r0, [r3, #2]
	segementsSet[3] = 0b1000;
 8004878:	2408      	movs	r4, #8
 800487a:	70dc      	strb	r4, [r3, #3]

	pinsValue[0] = numberMap[8];
 800487c:	4b19      	ldr	r3, [pc, #100]	; (80048e4 <UserInitialise+0xd8>)
 800487e:	7019      	strb	r1, [r3, #0]
	pinsValue[1] = numberMap[8];
 8004880:	7059      	strb	r1, [r3, #1]
	pinsValue[2] = numberMap[8];
 8004882:	7099      	strb	r1, [r3, #2]
	pinsValue[3] = numberMap[8];
 8004884:	70d9      	strb	r1, [r3, #3]

	segmentsL = 4;
 8004886:	4b18      	ldr	r3, [pc, #96]	; (80048e8 <UserInitialise+0xdc>)
 8004888:	7018      	strb	r0, [r3, #0]

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 800488a:	4918      	ldr	r1, [pc, #96]	; (80048ec <UserInitialise+0xe0>)
 800488c:	4818      	ldr	r0, [pc, #96]	; (80048f0 <UserInitialise+0xe4>)
 800488e:	f7fe fe5a 	bl	8003546 <HAL_UART_Receive_IT>


	// start timer 2 for ADC sampling
	__HAL_TIM_ENABLE(&htim2);
 8004892:	4a18      	ldr	r2, [pc, #96]	; (80048f4 <UserInitialise+0xe8>)
 8004894:	6811      	ldr	r1, [r2, #0]
 8004896:	680b      	ldr	r3, [r1, #0]
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	600b      	str	r3, [r1, #0]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	68d3      	ldr	r3, [r2, #12]
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	60d3      	str	r3, [r2, #12]

	HAL_I2C_Init(&hi2c1);
 80048a8:	4813      	ldr	r0, [pc, #76]	; (80048f8 <UserInitialise+0xec>)
 80048aa:	f7fd f8dd 	bl	8001a68 <HAL_I2C_Init>
 80048ae:	bd10      	pop	{r4, pc}
 80048b0:	200002d7 	.word	0x200002d7
 80048b4:	200002c0 	.word	0x200002c0
 80048b8:	200002e8 	.word	0x200002e8
 80048bc:	200007f9 	.word	0x200007f9
 80048c0:	20000468 	.word	0x20000468
 80048c4:	2000071c 	.word	0x2000071c
 80048c8:	20000804 	.word	0x20000804
 80048cc:	20000464 	.word	0x20000464
 80048d0:	200002d4 	.word	0x200002d4
 80048d4:	200002d0 	.word	0x200002d0
 80048d8:	200002ea 	.word	0x200002ea
 80048dc:	2000046c 	.word	0x2000046c
 80048e0:	200002bc 	.word	0x200002bc
 80048e4:	200007d4 	.word	0x200007d4
 80048e8:	20000244 	.word	0x20000244
 80048ec:	20000674 	.word	0x20000674
 80048f0:	2000038c 	.word	0x2000038c
 80048f4:	2000041c 	.word	0x2000041c
 80048f8:	200002ec 	.word	0x200002ec

080048fc <DecodeCmd>:
	//HAL_I2C_Master_Transmit(&hi2c1, 0x45<<1, &buffer[0], 1, 100);

}

void DecodeCmd()
{
 80048fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004900:	b087      	sub	sp, #28
	//uint8_t charsL;

	switch (cmdBuf[1])
 8004902:	4ba2      	ldr	r3, [pc, #648]	; (8004b8c <DecodeCmd+0x290>)
 8004904:	785b      	ldrb	r3, [r3, #1]
 8004906:	3b41      	subs	r3, #65	; 0x41
 8004908:	2b19      	cmp	r3, #25
 800490a:	d823      	bhi.n	8004954 <DecodeCmd+0x58>
 800490c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004910:	0025001a 	.word	0x0025001a
 8004914:	004f003b 	.word	0x004f003b
 8004918:	00840065 	.word	0x00840065
 800491c:	00ea00cb 	.word	0x00ea00cb
 8004920:	01c90176 	.word	0x01c90176
 8004924:	035b0253 	.word	0x035b0253
 8004928:	00220022 	.word	0x00220022
 800492c:	00220022 	.word	0x00220022
 8004930:	00220022 	.word	0x00220022
 8004934:	00220022 	.word	0x00220022
 8004938:	00220022 	.word	0x00220022
 800493c:	00220022 	.word	0x00220022
 8004940:	04b00022 	.word	0x04b00022
	{
	case 'A' : //Student number
		//flowCounter = 0;	//-----------------------------------------------------------------------------------------------------------------flow counter remove
		HAL_UART_Transmit(&huart1, (uint8_t*)txStudentNo, 13, 1000);
 8004944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004948:	220d      	movs	r2, #13
 800494a:	4991      	ldr	r1, [pc, #580]	; (8004b90 <DecodeCmd+0x294>)
 800494c:	6809      	ldr	r1, [r1, #0]
 800494e:	4891      	ldr	r0, [pc, #580]	; (8004b94 <DecodeCmd+0x298>)
 8004950:	f7fe ffcd 	bl	80038ee <HAL_UART_Transmit>
		txBuf[0] = '$';	txBuf[1] = 'Z';
		txBuf[2] = '\r'; txBuf[3] = '\n';
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
		break;
	}
}
 8004954:	b007      	add	sp, #28
 8004956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		String2Int(cmdBuf+3, (int16_t*) &valveState);
 800495a:	498f      	ldr	r1, [pc, #572]	; (8004b98 <DecodeCmd+0x29c>)
 800495c:	488f      	ldr	r0, [pc, #572]	; (8004b9c <DecodeCmd+0x2a0>)
 800495e:	f7ff fa2d 	bl	8003dbc <String2Int>
		switchValve();//----------------------------------------------------------default values
 8004962:	f7ff f9f1 	bl	8003d48 <switchValve>
		txBuf[0] = '$';	txBuf[1] = 'B';
 8004966:	498e      	ldr	r1, [pc, #568]	; (8004ba0 <DecodeCmd+0x2a4>)
 8004968:	2324      	movs	r3, #36	; 0x24
 800496a:	700b      	strb	r3, [r1, #0]
 800496c:	2342      	movs	r3, #66	; 0x42
 800496e:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8004970:	230d      	movs	r3, #13
 8004972:	708b      	strb	r3, [r1, #2]
 8004974:	230a      	movs	r3, #10
 8004976:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8004978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800497c:	2204      	movs	r2, #4
 800497e:	4885      	ldr	r0, [pc, #532]	; (8004b94 <DecodeCmd+0x298>)
 8004980:	f7fe ffb5 	bl	80038ee <HAL_UART_Transmit>
		break;
 8004984:	e7e6      	b.n	8004954 <DecodeCmd+0x58>
		String2Int(cmdBuf+3, (int16_t*) &scheduleState);//----------------------------------------------------------default values OFF
 8004986:	4987      	ldr	r1, [pc, #540]	; (8004ba4 <DecodeCmd+0x2a8>)
 8004988:	4884      	ldr	r0, [pc, #528]	; (8004b9c <DecodeCmd+0x2a0>)
 800498a:	f7ff fa17 	bl	8003dbc <String2Int>
		txBuf[0] = '$';	txBuf[1] = 'C';
 800498e:	4984      	ldr	r1, [pc, #528]	; (8004ba0 <DecodeCmd+0x2a4>)
 8004990:	2324      	movs	r3, #36	; 0x24
 8004992:	700b      	strb	r3, [r1, #0]
 8004994:	2343      	movs	r3, #67	; 0x43
 8004996:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8004998:	230d      	movs	r3, #13
 800499a:	708b      	strb	r3, [r1, #2]
 800499c:	230a      	movs	r3, #10
 800499e:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 80049a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049a4:	2204      	movs	r2, #4
 80049a6:	487b      	ldr	r0, [pc, #492]	; (8004b94 <DecodeCmd+0x298>)
 80049a8:	f7fe ffa1 	bl	80038ee <HAL_UART_Transmit>
		break;
 80049ac:	e7d2      	b.n	8004954 <DecodeCmd+0x58>
		String2Int(cmdBuf+3, (int16_t*) &heaterState);
 80049ae:	497e      	ldr	r1, [pc, #504]	; (8004ba8 <DecodeCmd+0x2ac>)
 80049b0:	487a      	ldr	r0, [pc, #488]	; (8004b9c <DecodeCmd+0x2a0>)
 80049b2:	f7ff fa03 	bl	8003dbc <String2Int>
		switchHeater();
 80049b6:	f7ff f9b9 	bl	8003d2c <switchHeater>
		txBuf[0] = '$';	txBuf[1] = 'D';
 80049ba:	4979      	ldr	r1, [pc, #484]	; (8004ba0 <DecodeCmd+0x2a4>)
 80049bc:	2324      	movs	r3, #36	; 0x24
 80049be:	700b      	strb	r3, [r1, #0]
 80049c0:	2344      	movs	r3, #68	; 0x44
 80049c2:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 80049c4:	230d      	movs	r3, #13
 80049c6:	708b      	strb	r3, [r1, #2]
 80049c8:	230a      	movs	r3, #10
 80049ca:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 80049cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049d0:	2204      	movs	r2, #4
 80049d2:	4870      	ldr	r0, [pc, #448]	; (8004b94 <DecodeCmd+0x298>)
 80049d4:	f7fe ff8b 	bl	80038ee <HAL_UART_Transmit>
		break;
 80049d8:	e7bc      	b.n	8004954 <DecodeCmd+0x58>
		String2Int(cmdBuf+3, (int16_t*) &logState);
 80049da:	4c74      	ldr	r4, [pc, #464]	; (8004bac <DecodeCmd+0x2b0>)
 80049dc:	4621      	mov	r1, r4
 80049de:	486f      	ldr	r0, [pc, #444]	; (8004b9c <DecodeCmd+0x2a0>)
 80049e0:	f7ff f9ec 	bl	8003dbc <String2Int>
		LoggerFlag = logState;
 80049e4:	8823      	ldrh	r3, [r4, #0]
 80049e6:	b21b      	sxth	r3, r3
 80049e8:	3300      	adds	r3, #0
 80049ea:	bf18      	it	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	4a70      	ldr	r2, [pc, #448]	; (8004bb0 <DecodeCmd+0x2b4>)
 80049f0:	7013      	strb	r3, [r2, #0]
		s10Counter = 0;
 80049f2:	2200      	movs	r2, #0
 80049f4:	4b6f      	ldr	r3, [pc, #444]	; (8004bb4 <DecodeCmd+0x2b8>)
 80049f6:	601a      	str	r2, [r3, #0]
		txBuf[0] = '$';	txBuf[1] = 'E';
 80049f8:	4969      	ldr	r1, [pc, #420]	; (8004ba0 <DecodeCmd+0x2a4>)
 80049fa:	2324      	movs	r3, #36	; 0x24
 80049fc:	700b      	strb	r3, [r1, #0]
 80049fe:	2345      	movs	r3, #69	; 0x45
 8004a00:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8004a02:	230d      	movs	r3, #13
 8004a04:	708b      	strb	r3, [r1, #2]
 8004a06:	230a      	movs	r3, #10
 8004a08:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8004a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a0e:	2204      	movs	r2, #4
 8004a10:	4860      	ldr	r0, [pc, #384]	; (8004b94 <DecodeCmd+0x298>)
 8004a12:	f7fe ff6c 	bl	80038ee <HAL_UART_Transmit>
		break;
 8004a16:	e79d      	b.n	8004954 <DecodeCmd+0x58>
		String2Int(cmdBuf+3, (int16_t*) &tempSetpoint);
 8004a18:	4c67      	ldr	r4, [pc, #412]	; (8004bb8 <DecodeCmd+0x2bc>)
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	485f      	ldr	r0, [pc, #380]	; (8004b9c <DecodeCmd+0x2a0>)
 8004a1e:	f7ff f9cd 	bl	8003dbc <String2Int>
		txBuf[0] = '$'; txBuf[1] = 'F';	txBuf[2] = '\r'; txBuf[3] = '\n';
 8004a22:	495f      	ldr	r1, [pc, #380]	; (8004ba0 <DecodeCmd+0x2a4>)
 8004a24:	2324      	movs	r3, #36	; 0x24
 8004a26:	700b      	strb	r3, [r1, #0]
 8004a28:	2346      	movs	r3, #70	; 0x46
 8004a2a:	704b      	strb	r3, [r1, #1]
 8004a2c:	230d      	movs	r3, #13
 8004a2e:	708b      	strb	r3, [r1, #2]
 8004a30:	230a      	movs	r3, #10
 8004a32:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8004a34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a38:	2204      	movs	r2, #4
 8004a3a:	4856      	ldr	r0, [pc, #344]	; (8004b94 <DecodeCmd+0x298>)
 8004a3c:	f7fe ff57 	bl	80038ee <HAL_UART_Transmit>
		i = 0;
 8004a40:	2200      	movs	r2, #0
 8004a42:	4b5e      	ldr	r3, [pc, #376]	; (8004bbc <DecodeCmd+0x2c0>)
 8004a44:	601a      	str	r2, [r3, #0]
		charsL = Int2String(tempF, tempSetpoint, 4);
 8004a46:	8821      	ldrh	r1, [r4, #0]
 8004a48:	2204      	movs	r2, #4
 8004a4a:	b209      	sxth	r1, r1
 8004a4c:	485c      	ldr	r0, [pc, #368]	; (8004bc0 <DecodeCmd+0x2c4>)
 8004a4e:	f7ff f9e5 	bl	8003e1c <Int2String>
 8004a52:	b2c0      	uxtb	r0, r0
 8004a54:	4b5b      	ldr	r3, [pc, #364]	; (8004bc4 <DecodeCmd+0x2c8>)
 8004a56:	7018      	strb	r0, [r3, #0]
		while (i < charsL)
 8004a58:	e018      	b.n	8004a8c <DecodeCmd+0x190>
			for (j=0; j <10; j++)
 8004a5a:	4a5b      	ldr	r2, [pc, #364]	; (8004bc8 <DecodeCmd+0x2cc>)
 8004a5c:	6813      	ldr	r3, [r2, #0]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	4b59      	ldr	r3, [pc, #356]	; (8004bc8 <DecodeCmd+0x2cc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b09      	cmp	r3, #9
 8004a68:	dc0d      	bgt.n	8004a86 <DecodeCmd+0x18a>
				if (tempF[i] == (j+0x30))
 8004a6a:	4a55      	ldr	r2, [pc, #340]	; (8004bc0 <DecodeCmd+0x2c4>)
 8004a6c:	5d11      	ldrb	r1, [r2, r4]
 8004a6e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004a72:	4291      	cmp	r1, r2
 8004a74:	d1f1      	bne.n	8004a5a <DecodeCmd+0x15e>
					pinsValue[i] = numberMap[j];
 8004a76:	4a55      	ldr	r2, [pc, #340]	; (8004bcc <DecodeCmd+0x2d0>)
 8004a78:	5cd2      	ldrb	r2, [r2, r3]
 8004a7a:	4b55      	ldr	r3, [pc, #340]	; (8004bd0 <DecodeCmd+0x2d4>)
 8004a7c:	551a      	strb	r2, [r3, r4]
					j = 10;
 8004a7e:	220a      	movs	r2, #10
 8004a80:	4b51      	ldr	r3, [pc, #324]	; (8004bc8 <DecodeCmd+0x2cc>)
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	e7e9      	b.n	8004a5a <DecodeCmd+0x15e>
			i++;
 8004a86:	3401      	adds	r4, #1
 8004a88:	4b4c      	ldr	r3, [pc, #304]	; (8004bbc <DecodeCmd+0x2c0>)
 8004a8a:	601c      	str	r4, [r3, #0]
		while (i < charsL)
 8004a8c:	4b4b      	ldr	r3, [pc, #300]	; (8004bbc <DecodeCmd+0x2c0>)
 8004a8e:	681c      	ldr	r4, [r3, #0]
 8004a90:	42a0      	cmp	r0, r4
 8004a92:	dd03      	ble.n	8004a9c <DecodeCmd+0x1a0>
			for (j=0; j <10; j++)
 8004a94:	2200      	movs	r2, #0
 8004a96:	4b4c      	ldr	r3, [pc, #304]	; (8004bc8 <DecodeCmd+0x2cc>)
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e7e2      	b.n	8004a62 <DecodeCmd+0x166>
		i = 0;
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
		segmentsL = charsL;
 8004aa0:	4b4c      	ldr	r3, [pc, #304]	; (8004bd4 <DecodeCmd+0x2d8>)
 8004aa2:	7018      	strb	r0, [r3, #0]
		break;
 8004aa4:	e756      	b.n	8004954 <DecodeCmd+0x58>
		txBuf[0] = '$';	txBuf[1] = 'G';	txBuf[2] = ',';
 8004aa6:	4c3e      	ldr	r4, [pc, #248]	; (8004ba0 <DecodeCmd+0x2a4>)
 8004aa8:	2324      	movs	r3, #36	; 0x24
 8004aaa:	7023      	strb	r3, [r4, #0]
 8004aac:	2347      	movs	r3, #71	; 0x47
 8004aae:	7063      	strb	r3, [r4, #1]
 8004ab0:	232c      	movs	r3, #44	; 0x2c
 8004ab2:	70a3      	strb	r3, [r4, #2]
		charsL = Int2String(txBuf+3, tempSetpoint, 4);
 8004ab4:	4b40      	ldr	r3, [pc, #256]	; (8004bb8 <DecodeCmd+0x2bc>)
 8004ab6:	8819      	ldrh	r1, [r3, #0]
 8004ab8:	2204      	movs	r2, #4
 8004aba:	b209      	sxth	r1, r1
 8004abc:	1ce0      	adds	r0, r4, #3
 8004abe:	f7ff f9ad 	bl	8003e1c <Int2String>
 8004ac2:	b2c2      	uxtb	r2, r0
 8004ac4:	4b3f      	ldr	r3, [pc, #252]	; (8004bc4 <DecodeCmd+0x2c8>)
 8004ac6:	701a      	strb	r2, [r3, #0]
		txBuf[3 + charsL] = '\r'; txBuf[4 + charsL] = '\n';
 8004ac8:	1cd3      	adds	r3, r2, #3
 8004aca:	210d      	movs	r1, #13
 8004acc:	54e1      	strb	r1, [r4, r3]
 8004ace:	1d13      	adds	r3, r2, #4
 8004ad0:	210a      	movs	r1, #10
 8004ad2:	54e1      	strb	r1, [r4, r3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL+5, 1000);
 8004ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ad8:	3205      	adds	r2, #5
 8004ada:	4621      	mov	r1, r4
 8004adc:	482d      	ldr	r0, [pc, #180]	; (8004b94 <DecodeCmd+0x298>)
 8004ade:	f7fe ff06 	bl	80038ee <HAL_UART_Transmit>
		break;
 8004ae2:	e737      	b.n	8004954 <DecodeCmd+0x58>
		timeL = 0;
 8004ae4:	4c3c      	ldr	r4, [pc, #240]	; (8004bd8 <DecodeCmd+0x2dc>)
 8004ae6:	2500      	movs	r5, #0
 8004ae8:	7025      	strb	r5, [r4, #0]
		timeL = StringTime2Int(cmdBuf+3+timeL, &HH_set);
 8004aea:	7820      	ldrb	r0, [r4, #0]
 8004aec:	3003      	adds	r0, #3
 8004aee:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8004bf4 <DecodeCmd+0x2f8>
 8004af2:	4e26      	ldr	r6, [pc, #152]	; (8004b8c <DecodeCmd+0x290>)
 8004af4:	4641      	mov	r1, r8
 8004af6:	4430      	add	r0, r6
 8004af8:	f7ff f934 	bl	8003d64 <StringTime2Int>
 8004afc:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+3+timeL, &mm_set);
 8004afe:	7820      	ldrb	r0, [r4, #0]
 8004b00:	3003      	adds	r0, #3
 8004b02:	4f36      	ldr	r7, [pc, #216]	; (8004bdc <DecodeCmd+0x2e0>)
 8004b04:	4639      	mov	r1, r7
 8004b06:	4430      	add	r0, r6
 8004b08:	f7ff f92c 	bl	8003d64 <StringTime2Int>
 8004b0c:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+3+timeL, &ss_set);
 8004b0e:	7820      	ldrb	r0, [r4, #0]
 8004b10:	3003      	adds	r0, #3
 8004b12:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8004bf8 <DecodeCmd+0x2fc>
 8004b16:	4649      	mov	r1, r9
 8004b18:	4430      	add	r0, r6
 8004b1a:	f7ff f923 	bl	8003d64 <StringTime2Int>
 8004b1e:	7020      	strb	r0, [r4, #0]
		setTime.Hours = HH_set;
 8004b20:	4e2f      	ldr	r6, [pc, #188]	; (8004be0 <DecodeCmd+0x2e4>)
 8004b22:	f898 3000 	ldrb.w	r3, [r8]
 8004b26:	7033      	strb	r3, [r6, #0]
		setTime.Minutes = mm_set;
 8004b28:	783b      	ldrb	r3, [r7, #0]
 8004b2a:	7073      	strb	r3, [r6, #1]
		setTime.Seconds = ss_set;
 8004b2c:	f899 3000 	ldrb.w	r3, [r9]
 8004b30:	70b3      	strb	r3, [r6, #2]
		__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8004b32:	4c2c      	ldr	r4, [pc, #176]	; (8004be4 <DecodeCmd+0x2e8>)
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	22ca      	movs	r2, #202	; 0xca
 8004b38:	625a      	str	r2, [r3, #36]	; 0x24
 8004b3a:	2253      	movs	r2, #83	; 0x53
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24
		halStatus = RTC_EnterInitMode(&hrtc); // Enter init mode
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f7fe f863 	bl	8002c0a <RTC_EnterInitMode>
 8004b44:	4f28      	ldr	r7, [pc, #160]	; (8004be8 <DecodeCmd+0x2ec>)
 8004b46:	7038      	strb	r0, [r7, #0]
		halStatus = HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BIN);
 8004b48:	462a      	mov	r2, r5
 8004b4a:	4631      	mov	r1, r6
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f7fe f8e7 	bl	8002d20 <HAL_RTC_SetTime>
 8004b52:	7038      	strb	r0, [r7, #0]
		halStatus = HAL_RTC_SetDate(&hrtc, &setDate, RTC_FORMAT_BIN);
 8004b54:	462a      	mov	r2, r5
 8004b56:	4925      	ldr	r1, [pc, #148]	; (8004bec <DecodeCmd+0x2f0>)
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f7fe f960 	bl	8002e1e <HAL_RTC_SetDate>
 8004b5e:	7038      	strb	r0, [r7, #0]
		__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	22ff      	movs	r2, #255	; 0xff
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24
		s1Counter = 0;
 8004b66:	4b22      	ldr	r3, [pc, #136]	; (8004bf0 <DecodeCmd+0x2f4>)
 8004b68:	801d      	strh	r5, [r3, #0]
		txBuf[0] = '$';	txBuf[1] = 'H';
 8004b6a:	490d      	ldr	r1, [pc, #52]	; (8004ba0 <DecodeCmd+0x2a4>)
 8004b6c:	2324      	movs	r3, #36	; 0x24
 8004b6e:	700b      	strb	r3, [r1, #0]
 8004b70:	2348      	movs	r3, #72	; 0x48
 8004b72:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8004b74:	230d      	movs	r3, #13
 8004b76:	708b      	strb	r3, [r1, #2]
 8004b78:	230a      	movs	r3, #10
 8004b7a:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8004b7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b80:	2204      	movs	r2, #4
 8004b82:	4804      	ldr	r0, [pc, #16]	; (8004b94 <DecodeCmd+0x298>)
 8004b84:	f7fe feb3 	bl	80038ee <HAL_UART_Transmit>
		break;
 8004b88:	e6e4      	b.n	8004954 <DecodeCmd+0x58>
 8004b8a:	bf00      	nop
 8004b8c:	20000794 	.word	0x20000794
 8004b90:	20000004 	.word	0x20000004
 8004b94:	2000038c 	.word	0x2000038c
 8004b98:	200002d4 	.word	0x200002d4
 8004b9c:	20000797 	.word	0x20000797
 8004ba0:	200005cc 	.word	0x200005cc
 8004ba4:	200002ea 	.word	0x200002ea
 8004ba8:	200002d0 	.word	0x200002d0
 8004bac:	200002a2 	.word	0x200002a2
 8004bb0:	200002a9 	.word	0x200002a9
 8004bb4:	200004cc 	.word	0x200004cc
 8004bb8:	200002c0 	.word	0x200002c0
 8004bbc:	200002c4 	.word	0x200002c4
 8004bc0:	200007f4 	.word	0x200007f4
 8004bc4:	200002c8 	.word	0x200002c8
 8004bc8:	200002a4 	.word	0x200002a4
 8004bcc:	2000046c 	.word	0x2000046c
 8004bd0:	200007d4 	.word	0x200007d4
 8004bd4:	20000244 	.word	0x20000244
 8004bd8:	200002a0 	.word	0x200002a0
 8004bdc:	200007f0 	.word	0x200007f0
 8004be0:	20000724 	.word	0x20000724
 8004be4:	200003fc 	.word	0x200003fc
 8004be8:	200004c2 	.word	0x200004c2
 8004bec:	2000066c 	.word	0x2000066c
 8004bf0:	200007d8 	.word	0x200007d8
 8004bf4:	200004d5 	.word	0x200004d5
 8004bf8:	200004c0 	.word	0x200004c0
		halStatus = HAL_RTC_GetTime(&hrtc, &getTimeLive, RTC_FORMAT_BIN);
 8004bfc:	4cbe      	ldr	r4, [pc, #760]	; (8004ef8 <DecodeCmd+0x5fc>)
 8004bfe:	4ebf      	ldr	r6, [pc, #764]	; (8004efc <DecodeCmd+0x600>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	4621      	mov	r1, r4
 8004c04:	4630      	mov	r0, r6
 8004c06:	f7fe f980 	bl	8002f0a <HAL_RTC_GetTime>
 8004c0a:	4dbd      	ldr	r5, [pc, #756]	; (8004f00 <DecodeCmd+0x604>)
 8004c0c:	7028      	strb	r0, [r5, #0]
		halStatus = HAL_RTC_GetDate(&hrtc, &getDateLive, RTC_FORMAT_BIN);
 8004c0e:	4fbd      	ldr	r7, [pc, #756]	; (8004f04 <DecodeCmd+0x608>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	4639      	mov	r1, r7
 8004c14:	4630      	mov	r0, r6
 8004c16:	f7fe f9a3 	bl	8002f60 <HAL_RTC_GetDate>
 8004c1a:	7028      	strb	r0, [r5, #0]
		getTime = getTimeLive;
 8004c1c:	4eba      	ldr	r6, [pc, #744]	; (8004f08 <DecodeCmd+0x60c>)
 8004c1e:	4635      	mov	r5, r6
 8004c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	602b      	str	r3, [r5, #0]
		getDate = getDateLive;
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	4bb8      	ldr	r3, [pc, #736]	; (8004f0c <DecodeCmd+0x610>)
 8004c2c:	601a      	str	r2, [r3, #0]
		txBuf[0] = '$';	txBuf[1] = 'I';
 8004c2e:	4cb8      	ldr	r4, [pc, #736]	; (8004f10 <DecodeCmd+0x614>)
 8004c30:	2324      	movs	r3, #36	; 0x24
 8004c32:	7023      	strb	r3, [r4, #0]
 8004c34:	2349      	movs	r3, #73	; 0x49
 8004c36:	7063      	strb	r3, [r4, #1]
		txBuf[2] = ',';
 8004c38:	272c      	movs	r7, #44	; 0x2c
 8004c3a:	70a7      	strb	r7, [r4, #2]
		charsL = 3;
 8004c3c:	4db5      	ldr	r5, [pc, #724]	; (8004f14 <DecodeCmd+0x618>)
 8004c3e:	2303      	movs	r3, #3
 8004c40:	702b      	strb	r3, [r5, #0]
		charsL += Int2String(txBuf+charsL, (uint32_t) getTime.Hours, 2);
 8004c42:	2202      	movs	r2, #2
 8004c44:	7831      	ldrb	r1, [r6, #0]
 8004c46:	18e0      	adds	r0, r4, r3
 8004c48:	f7ff f8e8 	bl	8003e1c <Int2String>
 8004c4c:	782b      	ldrb	r3, [r5, #0]
 8004c4e:	4403      	add	r3, r0
 8004c50:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004c52:	54e7      	strb	r7, [r4, r3]
 8004c54:	3301      	adds	r3, #1
 8004c56:	b2d8      	uxtb	r0, r3
 8004c58:	7028      	strb	r0, [r5, #0]
		charsL += Int2String(txBuf+charsL, (uint32_t) getTime.Minutes, 2);
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	7871      	ldrb	r1, [r6, #1]
 8004c5e:	4420      	add	r0, r4
 8004c60:	f7ff f8dc 	bl	8003e1c <Int2String>
 8004c64:	782b      	ldrb	r3, [r5, #0]
 8004c66:	4403      	add	r3, r0
 8004c68:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004c6a:	54e7      	strb	r7, [r4, r3]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	b2d8      	uxtb	r0, r3
 8004c70:	7028      	strb	r0, [r5, #0]
		charsL += Int2String(txBuf+charsL, (uint32_t) getTime.Seconds, 2);
 8004c72:	2202      	movs	r2, #2
 8004c74:	78b1      	ldrb	r1, [r6, #2]
 8004c76:	4420      	add	r0, r4
 8004c78:	f7ff f8d0 	bl	8003e1c <Int2String>
 8004c7c:	782b      	ldrb	r3, [r5, #0]
 8004c7e:	4403      	add	r3, r0
 8004c80:	b2db      	uxtb	r3, r3
		txBuf[charsL] = '\r'; charsL++; txBuf[charsL] = '\n'; charsL++;
 8004c82:	220d      	movs	r2, #13
 8004c84:	54e2      	strb	r2, [r4, r3]
 8004c86:	3301      	adds	r3, #1
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	220a      	movs	r2, #10
 8004c8c:	54e2      	strb	r2, [r4, r3]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	702a      	strb	r2, [r5, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL, 1000);
 8004c94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c98:	4621      	mov	r1, r4
 8004c9a:	489f      	ldr	r0, [pc, #636]	; (8004f18 <DecodeCmd+0x61c>)
 8004c9c:	f7fe fe27 	bl	80038ee <HAL_UART_Transmit>
		break;
 8004ca0:	e658      	b.n	8004954 <DecodeCmd+0x58>
		String2Int(cmdBuf+3, &heatingWindow);
 8004ca2:	4e9e      	ldr	r6, [pc, #632]	; (8004f1c <DecodeCmd+0x620>)
 8004ca4:	4d9e      	ldr	r5, [pc, #632]	; (8004f20 <DecodeCmd+0x624>)
 8004ca6:	4631      	mov	r1, r6
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f7ff f887 	bl	8003dbc <String2Int>
		timeL = 0;
 8004cae:	4c9d      	ldr	r4, [pc, #628]	; (8004f24 <DecodeCmd+0x628>)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	7023      	strb	r3, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5, &HH_on);
 8004cb4:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 8004f5c <DecodeCmd+0x660>
 8004cb8:	4659      	mov	r1, fp
 8004cba:	1ca8      	adds	r0, r5, #2
 8004cbc:	f7ff f852 	bl	8003d64 <StringTime2Int>
 8004cc0:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &mm_on);
 8004cc2:	7820      	ldrb	r0, [r4, #0]
 8004cc4:	3005      	adds	r0, #5
 8004cc6:	f8df a298 	ldr.w	sl, [pc, #664]	; 8004f60 <DecodeCmd+0x664>
 8004cca:	3d03      	subs	r5, #3
 8004ccc:	4651      	mov	r1, sl
 8004cce:	4428      	add	r0, r5
 8004cd0:	f7ff f848 	bl	8003d64 <StringTime2Int>
 8004cd4:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &ss_on);
 8004cd6:	7820      	ldrb	r0, [r4, #0]
 8004cd8:	3005      	adds	r0, #5
 8004cda:	f8df 9288 	ldr.w	r9, [pc, #648]	; 8004f64 <DecodeCmd+0x668>
 8004cde:	4649      	mov	r1, r9
 8004ce0:	4428      	add	r0, r5
 8004ce2:	f7ff f83f 	bl	8003d64 <StringTime2Int>
 8004ce6:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &HH_off);
 8004ce8:	7820      	ldrb	r0, [r4, #0]
 8004cea:	3005      	adds	r0, #5
 8004cec:	f8df 8278 	ldr.w	r8, [pc, #632]	; 8004f68 <DecodeCmd+0x66c>
 8004cf0:	4641      	mov	r1, r8
 8004cf2:	4428      	add	r0, r5
 8004cf4:	f7ff f836 	bl	8003d64 <StringTime2Int>
 8004cf8:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &mm_off);
 8004cfa:	7820      	ldrb	r0, [r4, #0]
 8004cfc:	3005      	adds	r0, #5
 8004cfe:	4f8a      	ldr	r7, [pc, #552]	; (8004f28 <DecodeCmd+0x62c>)
 8004d00:	4639      	mov	r1, r7
 8004d02:	4428      	add	r0, r5
 8004d04:	f7ff f82e 	bl	8003d64 <StringTime2Int>
 8004d08:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &ss_off);
 8004d0a:	7820      	ldrb	r0, [r4, #0]
 8004d0c:	3005      	adds	r0, #5
 8004d0e:	4987      	ldr	r1, [pc, #540]	; (8004f2c <DecodeCmd+0x630>)
 8004d10:	4428      	add	r0, r5
 8004d12:	f7ff f827 	bl	8003d64 <StringTime2Int>
 8004d16:	7020      	strb	r0, [r4, #0]
		onTime[heatingWindow-1].Hours = HH_on;
 8004d18:	f9b6 4000 	ldrsh.w	r4, [r6]
 8004d1c:	3c01      	subs	r4, #1
 8004d1e:	4984      	ldr	r1, [pc, #528]	; (8004f30 <DecodeCmd+0x634>)
 8004d20:	00a3      	lsls	r3, r4, #2
 8004d22:	4423      	add	r3, r4
 8004d24:	009a      	lsls	r2, r3, #2
 8004d26:	188b      	adds	r3, r1, r2
 8004d28:	f89b 0000 	ldrb.w	r0, [fp]
 8004d2c:	5488      	strb	r0, [r1, r2]
		onTime[heatingWindow-1].Minutes = mm_on;
 8004d2e:	f89a 2000 	ldrb.w	r2, [sl]
 8004d32:	705a      	strb	r2, [r3, #1]
		onTime[heatingWindow-1].Seconds = ss_on;
 8004d34:	f899 2000 	ldrb.w	r2, [r9]
 8004d38:	709a      	strb	r2, [r3, #2]
		onEpoch[heatingWindow-1] = timeToEpoch(getDateLive, onTime[heatingWindow-1]);
 8004d3a:	4d72      	ldr	r5, [pc, #456]	; (8004f04 <DecodeCmd+0x608>)
 8004d3c:	f8d5 e000 	ldr.w	lr, [r5]
 8004d40:	f103 020c 	add.w	r2, r3, #12
 8004d44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d48:	e88d 0003 	stmia.w	sp, {r0, r1}
 8004d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d4e:	4670      	mov	r0, lr
 8004d50:	f7ff f932 	bl	8003fb8 <timeToEpoch>
 8004d54:	4b77      	ldr	r3, [pc, #476]	; (8004f34 <DecodeCmd+0x638>)
 8004d56:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		offTime[heatingWindow-1].Hours = HH_off;
 8004d5a:	f9b6 4000 	ldrsh.w	r4, [r6]
 8004d5e:	3c01      	subs	r4, #1
 8004d60:	4975      	ldr	r1, [pc, #468]	; (8004f38 <DecodeCmd+0x63c>)
 8004d62:	00a3      	lsls	r3, r4, #2
 8004d64:	4423      	add	r3, r4
 8004d66:	009a      	lsls	r2, r3, #2
 8004d68:	188b      	adds	r3, r1, r2
 8004d6a:	f898 0000 	ldrb.w	r0, [r8]
 8004d6e:	5488      	strb	r0, [r1, r2]
		offTime[heatingWindow-1].Minutes = mm_off;
 8004d70:	783a      	ldrb	r2, [r7, #0]
 8004d72:	705a      	strb	r2, [r3, #1]
		offTime[heatingWindow-1].Seconds = ss_off;
 8004d74:	4a6d      	ldr	r2, [pc, #436]	; (8004f2c <DecodeCmd+0x630>)
 8004d76:	7812      	ldrb	r2, [r2, #0]
 8004d78:	709a      	strb	r2, [r3, #2]
		offEpoch[heatingWindow-1] = timeToEpoch(getDateLive, offTime[heatingWindow-1]);
 8004d7a:	682d      	ldr	r5, [r5, #0]
 8004d7c:	f103 020c 	add.w	r2, r3, #12
 8004d80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d84:	e88d 0003 	stmia.w	sp, {r0, r1}
 8004d88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	f7ff f914 	bl	8003fb8 <timeToEpoch>
 8004d90:	4b6a      	ldr	r3, [pc, #424]	; (8004f3c <DecodeCmd+0x640>)
 8004d92:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
		txBuf[0] = '$';	txBuf[1] = 'J';
 8004d96:	495e      	ldr	r1, [pc, #376]	; (8004f10 <DecodeCmd+0x614>)
 8004d98:	2324      	movs	r3, #36	; 0x24
 8004d9a:	700b      	strb	r3, [r1, #0]
 8004d9c:	234a      	movs	r3, #74	; 0x4a
 8004d9e:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8004da0:	230d      	movs	r3, #13
 8004da2:	708b      	strb	r3, [r1, #2]
 8004da4:	230a      	movs	r3, #10
 8004da6:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8004da8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dac:	2204      	movs	r2, #4
 8004dae:	485a      	ldr	r0, [pc, #360]	; (8004f18 <DecodeCmd+0x61c>)
 8004db0:	f7fe fd9d 	bl	80038ee <HAL_UART_Transmit>
		break;
 8004db4:	e5ce      	b.n	8004954 <DecodeCmd+0x58>
		txBuf[0] = '$'; txBuf[1] = 'K'; txBuf[2] = ',';
 8004db6:	4c56      	ldr	r4, [pc, #344]	; (8004f10 <DecodeCmd+0x614>)
 8004db8:	2324      	movs	r3, #36	; 0x24
 8004dba:	7023      	strb	r3, [r4, #0]
 8004dbc:	234b      	movs	r3, #75	; 0x4b
 8004dbe:	7063      	strb	r3, [r4, #1]
 8004dc0:	262c      	movs	r6, #44	; 0x2c
 8004dc2:	70a6      	strb	r6, [r4, #2]
		charsL = 3;
 8004dc4:	4d53      	ldr	r5, [pc, #332]	; (8004f14 <DecodeCmd+0x618>)
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	702b      	strb	r3, [r5, #0]
		charsL += Int2String(txBuf+charsL, irmsA, 10);
 8004dca:	220a      	movs	r2, #10
 8004dcc:	4b5c      	ldr	r3, [pc, #368]	; (8004f40 <DecodeCmd+0x644>)
 8004dce:	6819      	ldr	r1, [r3, #0]
 8004dd0:	1ce0      	adds	r0, r4, #3
 8004dd2:	f7ff f823 	bl	8003e1c <Int2String>
 8004dd6:	782b      	ldrb	r3, [r5, #0]
 8004dd8:	4403      	add	r3, r0
 8004dda:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004ddc:	54e6      	strb	r6, [r4, r3]
 8004dde:	3301      	adds	r3, #1
 8004de0:	b2d8      	uxtb	r0, r3
 8004de2:	7028      	strb	r0, [r5, #0]
		charsL += Int2String(txBuf+charsL, vrmsV, 10);
 8004de4:	220a      	movs	r2, #10
 8004de6:	4b57      	ldr	r3, [pc, #348]	; (8004f44 <DecodeCmd+0x648>)
 8004de8:	6819      	ldr	r1, [r3, #0]
 8004dea:	4420      	add	r0, r4
 8004dec:	f7ff f816 	bl	8003e1c <Int2String>
 8004df0:	782b      	ldrb	r3, [r5, #0]
 8004df2:	4403      	add	r3, r0
 8004df4:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004df6:	54e6      	strb	r6, [r4, r3]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	b2df      	uxtb	r7, r3
 8004dfc:	702f      	strb	r7, [r5, #0]
		charsL += Int2String(txBuf+charsL, TempConv(ambientTavg), 10);    // temp ambient
 8004dfe:	4b52      	ldr	r3, [pc, #328]	; (8004f48 <DecodeCmd+0x64c>)
 8004e00:	edd3 7a00 	vldr	s15, [r3]
 8004e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e08:	ee17 0a90 	vmov	r0, s15
 8004e0c:	f7fe ff78 	bl	8003d00 <TempConv>
 8004e10:	220a      	movs	r2, #10
 8004e12:	4601      	mov	r1, r0
 8004e14:	19e0      	adds	r0, r4, r7
 8004e16:	f7ff f801 	bl	8003e1c <Int2String>
 8004e1a:	782b      	ldrb	r3, [r5, #0]
 8004e1c:	4403      	add	r3, r0
 8004e1e:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004e20:	54e6      	strb	r6, [r4, r3]
 8004e22:	3301      	adds	r3, #1
 8004e24:	b2df      	uxtb	r7, r3
 8004e26:	702f      	strb	r7, [r5, #0]
		charsL += Int2String(txBuf+charsL, TempConv(waterTavg), 10);    // temp water
 8004e28:	4b48      	ldr	r3, [pc, #288]	; (8004f4c <DecodeCmd+0x650>)
 8004e2a:	edd3 7a00 	vldr	s15, [r3]
 8004e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e32:	ee17 0a90 	vmov	r0, s15
 8004e36:	f7fe ff63 	bl	8003d00 <TempConv>
 8004e3a:	220a      	movs	r2, #10
 8004e3c:	4601      	mov	r1, r0
 8004e3e:	19e0      	adds	r0, r4, r7
 8004e40:	f7fe ffec 	bl	8003e1c <Int2String>
 8004e44:	782b      	ldrb	r3, [r5, #0]
 8004e46:	4403      	add	r3, r0
 8004e48:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004e4a:	54e6      	strb	r6, [r4, r3]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	b2d8      	uxtb	r0, r3
 8004e50:	7028      	strb	r0, [r5, #0]
		charsL += Int2String(txBuf+charsL, totalFlow, 10);    // flow totalFlow
 8004e52:	220a      	movs	r2, #10
 8004e54:	4b3e      	ldr	r3, [pc, #248]	; (8004f50 <DecodeCmd+0x654>)
 8004e56:	6819      	ldr	r1, [r3, #0]
 8004e58:	4420      	add	r0, r4
 8004e5a:	f7fe ffdf 	bl	8003e1c <Int2String>
 8004e5e:	782b      	ldrb	r3, [r5, #0]
 8004e60:	4403      	add	r3, r0
 8004e62:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004e64:	54e6      	strb	r6, [r4, r3]
 8004e66:	3301      	adds	r3, #1
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	702b      	strb	r3, [r5, #0]
		if (heaterState == 0U)
 8004e6c:	4a39      	ldr	r2, [pc, #228]	; (8004f54 <DecodeCmd+0x658>)
 8004e6e:	8812      	ldrh	r2, [r2, #0]
 8004e70:	b212      	sxth	r2, r2
 8004e72:	2a00      	cmp	r2, #0
 8004e74:	d17a      	bne.n	8004f6c <DecodeCmd+0x670>
			txBuf[charsL] = 'O'; charsL++;
 8004e76:	4622      	mov	r2, r4
 8004e78:	214f      	movs	r1, #79	; 0x4f
 8004e7a:	54e1      	strb	r1, [r4, r3]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'F'; charsL++;
 8004e80:	2146      	movs	r1, #70	; 0x46
 8004e82:	54e1      	strb	r1, [r4, r3]
 8004e84:	3301      	adds	r3, #1
 8004e86:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'F'; charsL++;
 8004e88:	54e1      	strb	r1, [r4, r3]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	b2db      	uxtb	r3, r3
			txBuf[charsL] = ','; charsL++;
 8004e8e:	54d6      	strb	r6, [r2, r3]
 8004e90:	3301      	adds	r3, #1
 8004e92:	702b      	strb	r3, [r5, #0]
		if(valveState==0U)
 8004e94:	4b30      	ldr	r3, [pc, #192]	; (8004f58 <DecodeCmd+0x65c>)
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b21b      	sxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d17a      	bne.n	8004f94 <DecodeCmd+0x698>
			txBuf[charsL] = 'C'; charsL++;
 8004e9e:	491d      	ldr	r1, [pc, #116]	; (8004f14 <DecodeCmd+0x618>)
 8004ea0:	780b      	ldrb	r3, [r1, #0]
 8004ea2:	4a1b      	ldr	r2, [pc, #108]	; (8004f10 <DecodeCmd+0x614>)
 8004ea4:	2043      	movs	r0, #67	; 0x43
 8004ea6:	54d0      	strb	r0, [r2, r3]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'L'; charsL++;
 8004eac:	204c      	movs	r0, #76	; 0x4c
 8004eae:	54d0      	strb	r0, [r2, r3]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'O'; charsL++;
 8004eb4:	204f      	movs	r0, #79	; 0x4f
 8004eb6:	54d0      	strb	r0, [r2, r3]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'S'; charsL++;
 8004ebc:	2053      	movs	r0, #83	; 0x53
 8004ebe:	54d0      	strb	r0, [r2, r3]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'E'; charsL++;
 8004ec4:	2045      	movs	r0, #69	; 0x45
 8004ec6:	54d0      	strb	r0, [r2, r3]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'D'; charsL++;
 8004ecc:	2044      	movs	r0, #68	; 0x44
 8004ece:	54d0      	strb	r0, [r2, r3]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	700b      	strb	r3, [r1, #0]
		txBuf[charsL] = '\r'; charsL++; txBuf[charsL] = '\n'; charsL++;
 8004ed4:	480f      	ldr	r0, [pc, #60]	; (8004f14 <DecodeCmd+0x618>)
 8004ed6:	7803      	ldrb	r3, [r0, #0]
 8004ed8:	490d      	ldr	r1, [pc, #52]	; (8004f10 <DecodeCmd+0x614>)
 8004eda:	220d      	movs	r2, #13
 8004edc:	54ca      	strb	r2, [r1, r3]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	220a      	movs	r2, #10
 8004ee4:	54ca      	strb	r2, [r1, r3]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	7002      	strb	r2, [r0, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL, 1000);
 8004eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ef0:	4809      	ldr	r0, [pc, #36]	; (8004f18 <DecodeCmd+0x61c>)
 8004ef2:	f7fe fcfc 	bl	80038ee <HAL_UART_Transmit>
		break;
 8004ef6:	e52d      	b.n	8004954 <DecodeCmd+0x58>
 8004ef8:	200004d8 	.word	0x200004d8
 8004efc:	200003fc 	.word	0x200003fc
 8004f00:	200004c2 	.word	0x200004c2
 8004f04:	20000830 	.word	0x20000830
 8004f08:	200007dc 	.word	0x200007dc
 8004f0c:	200004c4 	.word	0x200004c4
 8004f10:	200005cc 	.word	0x200005cc
 8004f14:	200002c8 	.word	0x200002c8
 8004f18:	2000038c 	.word	0x2000038c
 8004f1c:	2000081c 	.word	0x2000081c
 8004f20:	20000797 	.word	0x20000797
 8004f24:	200002a0 	.word	0x200002a0
 8004f28:	200007fa 	.word	0x200007fa
 8004f2c:	20000718 	.word	0x20000718
 8004f30:	20000590 	.word	0x20000590
 8004f34:	200002ac 	.word	0x200002ac
 8004f38:	2000047c 	.word	0x2000047c
 8004f3c:	200002dc 	.word	0x200002dc
 8004f40:	200004d0 	.word	0x200004d0
 8004f44:	20000478 	.word	0x20000478
 8004f48:	20000460 	.word	0x20000460
 8004f4c:	20000664 	.word	0x20000664
 8004f50:	20000820 	.word	0x20000820
 8004f54:	200002d0 	.word	0x200002d0
 8004f58:	200002d4 	.word	0x200002d4
 8004f5c:	200004d4 	.word	0x200004d4
 8004f60:	20000720 	.word	0x20000720
 8004f64:	20000824 	.word	0x20000824
 8004f68:	200007db 	.word	0x200007db
		else if(heaterState==1U)
 8004f6c:	4a8f      	ldr	r2, [pc, #572]	; (80051ac <DecodeCmd+0x8b0>)
 8004f6e:	8812      	ldrh	r2, [r2, #0]
 8004f70:	b212      	sxth	r2, r2
 8004f72:	2a01      	cmp	r2, #1
 8004f74:	d18e      	bne.n	8004e94 <DecodeCmd+0x598>
			txBuf[charsL] = 'O'; charsL++;
 8004f76:	4a8e      	ldr	r2, [pc, #568]	; (80051b0 <DecodeCmd+0x8b4>)
 8004f78:	214f      	movs	r1, #79	; 0x4f
 8004f7a:	54d1      	strb	r1, [r2, r3]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'N'; charsL++;
 8004f80:	214e      	movs	r1, #78	; 0x4e
 8004f82:	54d1      	strb	r1, [r2, r3]
 8004f84:	3301      	adds	r3, #1
 8004f86:	b2db      	uxtb	r3, r3
			txBuf[charsL] = ','; charsL++;
 8004f88:	212c      	movs	r1, #44	; 0x2c
 8004f8a:	54d1      	strb	r1, [r2, r3]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	4a89      	ldr	r2, [pc, #548]	; (80051b4 <DecodeCmd+0x8b8>)
 8004f90:	7013      	strb	r3, [r2, #0]
 8004f92:	e77f      	b.n	8004e94 <DecodeCmd+0x598>
		else if(valveState==1U)
 8004f94:	4b88      	ldr	r3, [pc, #544]	; (80051b8 <DecodeCmd+0x8bc>)
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	b21b      	sxth	r3, r3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d19a      	bne.n	8004ed4 <DecodeCmd+0x5d8>
			txBuf[charsL] = 'O'; charsL++;
 8004f9e:	4985      	ldr	r1, [pc, #532]	; (80051b4 <DecodeCmd+0x8b8>)
 8004fa0:	780b      	ldrb	r3, [r1, #0]
 8004fa2:	4a83      	ldr	r2, [pc, #524]	; (80051b0 <DecodeCmd+0x8b4>)
 8004fa4:	204f      	movs	r0, #79	; 0x4f
 8004fa6:	54d0      	strb	r0, [r2, r3]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'P'; charsL++;
 8004fac:	2050      	movs	r0, #80	; 0x50
 8004fae:	54d0      	strb	r0, [r2, r3]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'E'; charsL++;
 8004fb4:	2045      	movs	r0, #69	; 0x45
 8004fb6:	54d0      	strb	r0, [r2, r3]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	b2db      	uxtb	r3, r3
			txBuf[charsL] = 'N'; charsL++;
 8004fbc:	204e      	movs	r0, #78	; 0x4e
 8004fbe:	54d0      	strb	r0, [r2, r3]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	700b      	strb	r3, [r1, #0]
 8004fc4:	e786      	b.n	8004ed4 <DecodeCmd+0x5d8>
		String2Int(cmdBuf+3, (int16_t*) &logCnt);
 8004fc6:	4c7d      	ldr	r4, [pc, #500]	; (80051bc <DecodeCmd+0x8c0>)
 8004fc8:	4621      	mov	r1, r4
 8004fca:	487d      	ldr	r0, [pc, #500]	; (80051c0 <DecodeCmd+0x8c4>)
 8004fcc:	f7fe fef6 	bl	8003dbc <String2Int>
		logHrs = *(uint32_t*)(startAddress+(40*logCnt));
 8004fd0:	8823      	ldrh	r3, [r4, #0]
 8004fd2:	b21b      	sxth	r3, r3
 8004fd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004fd8:	00da      	lsls	r2, r3, #3
 8004fda:	f102 6300 	add.w	r3, r2, #134217728	; 0x8000000
 8004fde:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4b77      	ldr	r3, [pc, #476]	; (80051c4 <DecodeCmd+0x8c8>)
 8004fe6:	601a      	str	r2, [r3, #0]
		logMin = *(uint32_t*)(startAddress+(40*logCnt)+4);
 8004fe8:	8823      	ldrh	r3, [r4, #0]
 8004fea:	b21b      	sxth	r3, r3
 8004fec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ff0:	00d9      	lsls	r1, r3, #3
 8004ff2:	4b75      	ldr	r3, [pc, #468]	; (80051c8 <DecodeCmd+0x8cc>)
 8004ff4:	58cb      	ldr	r3, [r1, r3]
 8004ff6:	4975      	ldr	r1, [pc, #468]	; (80051cc <DecodeCmd+0x8d0>)
 8004ff8:	600b      	str	r3, [r1, #0]
		logSec = *(uint32_t*)(startAddress+(40*logCnt)+8);
 8004ffa:	8821      	ldrh	r1, [r4, #0]
 8004ffc:	b209      	sxth	r1, r1
 8004ffe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005002:	00c8      	lsls	r0, r1, #3
 8005004:	4972      	ldr	r1, [pc, #456]	; (80051d0 <DecodeCmd+0x8d4>)
 8005006:	5840      	ldr	r0, [r0, r1]
 8005008:	4972      	ldr	r1, [pc, #456]	; (80051d4 <DecodeCmd+0x8d8>)
 800500a:	6008      	str	r0, [r1, #0]
		irmsA = *(uint32_t*)(startAddress+(40*logCnt)+12);
 800500c:	8821      	ldrh	r1, [r4, #0]
 800500e:	b209      	sxth	r1, r1
 8005010:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005014:	00cd      	lsls	r5, r1, #3
 8005016:	4970      	ldr	r1, [pc, #448]	; (80051d8 <DecodeCmd+0x8dc>)
 8005018:	586d      	ldr	r5, [r5, r1]
 800501a:	4970      	ldr	r1, [pc, #448]	; (80051dc <DecodeCmd+0x8e0>)
 800501c:	600d      	str	r5, [r1, #0]
		vrmsV = *(uint32_t*)(startAddress+(40*logCnt)+16);
 800501e:	8821      	ldrh	r1, [r4, #0]
 8005020:	b209      	sxth	r1, r1
 8005022:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005026:	00ce      	lsls	r6, r1, #3
 8005028:	496d      	ldr	r1, [pc, #436]	; (80051e0 <DecodeCmd+0x8e4>)
 800502a:	5876      	ldr	r6, [r6, r1]
 800502c:	496d      	ldr	r1, [pc, #436]	; (80051e4 <DecodeCmd+0x8e8>)
 800502e:	600e      	str	r6, [r1, #0]
		logAmbientT = *(uint32_t*)(startAddress+(40*logCnt)+20);
 8005030:	8821      	ldrh	r1, [r4, #0]
 8005032:	b209      	sxth	r1, r1
 8005034:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005038:	00cf      	lsls	r7, r1, #3
 800503a:	496b      	ldr	r1, [pc, #428]	; (80051e8 <DecodeCmd+0x8ec>)
 800503c:	587f      	ldr	r7, [r7, r1]
 800503e:	496b      	ldr	r1, [pc, #428]	; (80051ec <DecodeCmd+0x8f0>)
 8005040:	600f      	str	r7, [r1, #0]
		logWaterT = *(uint32_t*)(startAddress+(40*logCnt)+24);
 8005042:	8821      	ldrh	r1, [r4, #0]
 8005044:	b209      	sxth	r1, r1
 8005046:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800504a:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800504e:	4968      	ldr	r1, [pc, #416]	; (80051f0 <DecodeCmd+0x8f4>)
 8005050:	f85e e001 	ldr.w	lr, [lr, r1]
 8005054:	4967      	ldr	r1, [pc, #412]	; (80051f4 <DecodeCmd+0x8f8>)
 8005056:	f8c1 e000 	str.w	lr, [r1]
		totalFlow = *(uint32_t*)(startAddress+(40*logCnt)+28);
 800505a:	8821      	ldrh	r1, [r4, #0]
 800505c:	b209      	sxth	r1, r1
 800505e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005062:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 8005066:	4964      	ldr	r1, [pc, #400]	; (80051f8 <DecodeCmd+0x8fc>)
 8005068:	f85c c001 	ldr.w	ip, [ip, r1]
 800506c:	4963      	ldr	r1, [pc, #396]	; (80051fc <DecodeCmd+0x900>)
 800506e:	f8c1 c000 	str.w	ip, [r1]
		valveState = *(uint32_t*)(startAddress+(40*logCnt)+32);
 8005072:	8821      	ldrh	r1, [r4, #0]
 8005074:	b209      	sxth	r1, r1
 8005076:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800507a:	ea4f 08c1 	mov.w	r8, r1, lsl #3
 800507e:	4960      	ldr	r1, [pc, #384]	; (8005200 <DecodeCmd+0x904>)
 8005080:	f938 8001 	ldrsh.w	r8, [r8, r1]
 8005084:	494c      	ldr	r1, [pc, #304]	; (80051b8 <DecodeCmd+0x8bc>)
 8005086:	f8a1 8000 	strh.w	r8, [r1]
		heaterState = *(uint32_t*)(startAddress+(40*logCnt)+36);
 800508a:	8821      	ldrh	r1, [r4, #0]
 800508c:	b209      	sxth	r1, r1
 800508e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005092:	00cc      	lsls	r4, r1, #3
 8005094:	495b      	ldr	r1, [pc, #364]	; (8005204 <DecodeCmd+0x908>)
 8005096:	5e64      	ldrsh	r4, [r4, r1]
 8005098:	4944      	ldr	r1, [pc, #272]	; (80051ac <DecodeCmd+0x8b0>)
 800509a:	800c      	strh	r4, [r1, #0]
		if (heaterState == 0U && valveState == 0U)
 800509c:	8809      	ldrh	r1, [r1, #0]
 800509e:	b209      	sxth	r1, r1
 80050a0:	b921      	cbnz	r1, 80050ac <DecodeCmd+0x7b0>
 80050a2:	4945      	ldr	r1, [pc, #276]	; (80051b8 <DecodeCmd+0x8bc>)
 80050a4:	8809      	ldrh	r1, [r1, #0]
 80050a6:	b209      	sxth	r1, r1
 80050a8:	2900      	cmp	r1, #0
 80050aa:	d040      	beq.n	800512e <DecodeCmd+0x832>
		if(heaterState == 0U && valveState == 1U)
 80050ac:	4b3f      	ldr	r3, [pc, #252]	; (80051ac <DecodeCmd+0x8b0>)
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b21b      	sxth	r3, r3
 80050b2:	b923      	cbnz	r3, 80050be <DecodeCmd+0x7c2>
 80050b4:	4b40      	ldr	r3, [pc, #256]	; (80051b8 <DecodeCmd+0x8bc>)
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	b21b      	sxth	r3, r3
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d04f      	beq.n	800515e <DecodeCmd+0x862>
		if(heaterState == 1U && valveState == 0U)
 80050be:	4b3b      	ldr	r3, [pc, #236]	; (80051ac <DecodeCmd+0x8b0>)
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	b21b      	sxth	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	f000 80a7 	beq.w	8005218 <DecodeCmd+0x91c>
		if(heaterState == 1U && valveState == 1U)
 80050ca:	4b38      	ldr	r3, [pc, #224]	; (80051ac <DecodeCmd+0x8b0>)
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b21b      	sxth	r3, r3
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	f47f ac3f 	bne.w	8004954 <DecodeCmd+0x58>
 80050d6:	4b38      	ldr	r3, [pc, #224]	; (80051b8 <DecodeCmd+0x8bc>)
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b21b      	sxth	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	f47f ac39 	bne.w	8004954 <DecodeCmd+0x58>
			sprintf(txBuf,"$L,%lu,%lu,%lu,%lu,%lu,%lu,%lu,%lu,ON,OPEN\r\n",logHrs,logMin,logSec,irmsA,vrmsV,logAmbientT,logWaterT,totalFlow);
 80050e2:	4b3a      	ldr	r3, [pc, #232]	; (80051cc <DecodeCmd+0x8d0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a37      	ldr	r2, [pc, #220]	; (80051c4 <DecodeCmd+0x8c8>)
 80050e8:	6812      	ldr	r2, [r2, #0]
 80050ea:	4c31      	ldr	r4, [pc, #196]	; (80051b0 <DecodeCmd+0x8b4>)
 80050ec:	4943      	ldr	r1, [pc, #268]	; (80051fc <DecodeCmd+0x900>)
 80050ee:	6809      	ldr	r1, [r1, #0]
 80050f0:	9105      	str	r1, [sp, #20]
 80050f2:	4940      	ldr	r1, [pc, #256]	; (80051f4 <DecodeCmd+0x8f8>)
 80050f4:	6809      	ldr	r1, [r1, #0]
 80050f6:	9104      	str	r1, [sp, #16]
 80050f8:	493c      	ldr	r1, [pc, #240]	; (80051ec <DecodeCmd+0x8f0>)
 80050fa:	6809      	ldr	r1, [r1, #0]
 80050fc:	9103      	str	r1, [sp, #12]
 80050fe:	4939      	ldr	r1, [pc, #228]	; (80051e4 <DecodeCmd+0x8e8>)
 8005100:	6809      	ldr	r1, [r1, #0]
 8005102:	9102      	str	r1, [sp, #8]
 8005104:	4935      	ldr	r1, [pc, #212]	; (80051dc <DecodeCmd+0x8e0>)
 8005106:	6809      	ldr	r1, [r1, #0]
 8005108:	9101      	str	r1, [sp, #4]
 800510a:	4932      	ldr	r1, [pc, #200]	; (80051d4 <DecodeCmd+0x8d8>)
 800510c:	6809      	ldr	r1, [r1, #0]
 800510e:	9100      	str	r1, [sp, #0]
 8005110:	493d      	ldr	r1, [pc, #244]	; (8005208 <DecodeCmd+0x90c>)
 8005112:	4620      	mov	r0, r4
 8005114:	f000 ff88 	bl	8006028 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) txBuf, strlen(txBuf), 1000);
 8005118:	4620      	mov	r0, r4
 800511a:	f7fb f859 	bl	80001d0 <strlen>
 800511e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005122:	b282      	uxth	r2, r0
 8005124:	4621      	mov	r1, r4
 8005126:	4839      	ldr	r0, [pc, #228]	; (800520c <DecodeCmd+0x910>)
 8005128:	f7fe fbe1 	bl	80038ee <HAL_UART_Transmit>
 800512c:	e412      	b.n	8004954 <DecodeCmd+0x58>
			sprintf(txBuf,"$L,%lu,%lu,%lu,%lu,%lu,%lu,%lu,%lu,OFF,CLOSED\r\n",logHrs,logMin,logSec,irmsA,vrmsV,logAmbientT,logWaterT,totalFlow);
 800512e:	4c20      	ldr	r4, [pc, #128]	; (80051b0 <DecodeCmd+0x8b4>)
 8005130:	f8cd c014 	str.w	ip, [sp, #20]
 8005134:	f8cd e010 	str.w	lr, [sp, #16]
 8005138:	9703      	str	r7, [sp, #12]
 800513a:	9602      	str	r6, [sp, #8]
 800513c:	9501      	str	r5, [sp, #4]
 800513e:	9000      	str	r0, [sp, #0]
 8005140:	4933      	ldr	r1, [pc, #204]	; (8005210 <DecodeCmd+0x914>)
 8005142:	4620      	mov	r0, r4
 8005144:	f000 ff70 	bl	8006028 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) txBuf, strlen(txBuf), 1000);
 8005148:	4620      	mov	r0, r4
 800514a:	f7fb f841 	bl	80001d0 <strlen>
 800514e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005152:	b282      	uxth	r2, r0
 8005154:	4621      	mov	r1, r4
 8005156:	482d      	ldr	r0, [pc, #180]	; (800520c <DecodeCmd+0x910>)
 8005158:	f7fe fbc9 	bl	80038ee <HAL_UART_Transmit>
 800515c:	e7a6      	b.n	80050ac <DecodeCmd+0x7b0>
			sprintf(txBuf,"$L,%lu,%lu,%lu,%lu,%lu,%lu,%lu,%lu,OFF,OPEN\r\n",logHrs,logMin,logSec,irmsA,vrmsV,logAmbientT,logWaterT,totalFlow);
 800515e:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <DecodeCmd+0x8d0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a18      	ldr	r2, [pc, #96]	; (80051c4 <DecodeCmd+0x8c8>)
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	4c12      	ldr	r4, [pc, #72]	; (80051b0 <DecodeCmd+0x8b4>)
 8005168:	4924      	ldr	r1, [pc, #144]	; (80051fc <DecodeCmd+0x900>)
 800516a:	6809      	ldr	r1, [r1, #0]
 800516c:	9105      	str	r1, [sp, #20]
 800516e:	4921      	ldr	r1, [pc, #132]	; (80051f4 <DecodeCmd+0x8f8>)
 8005170:	6809      	ldr	r1, [r1, #0]
 8005172:	9104      	str	r1, [sp, #16]
 8005174:	491d      	ldr	r1, [pc, #116]	; (80051ec <DecodeCmd+0x8f0>)
 8005176:	6809      	ldr	r1, [r1, #0]
 8005178:	9103      	str	r1, [sp, #12]
 800517a:	491a      	ldr	r1, [pc, #104]	; (80051e4 <DecodeCmd+0x8e8>)
 800517c:	6809      	ldr	r1, [r1, #0]
 800517e:	9102      	str	r1, [sp, #8]
 8005180:	4916      	ldr	r1, [pc, #88]	; (80051dc <DecodeCmd+0x8e0>)
 8005182:	6809      	ldr	r1, [r1, #0]
 8005184:	9101      	str	r1, [sp, #4]
 8005186:	4913      	ldr	r1, [pc, #76]	; (80051d4 <DecodeCmd+0x8d8>)
 8005188:	6809      	ldr	r1, [r1, #0]
 800518a:	9100      	str	r1, [sp, #0]
 800518c:	4921      	ldr	r1, [pc, #132]	; (8005214 <DecodeCmd+0x918>)
 800518e:	4620      	mov	r0, r4
 8005190:	f000 ff4a 	bl	8006028 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) txBuf, strlen(txBuf), 1000);
 8005194:	4620      	mov	r0, r4
 8005196:	f7fb f81b 	bl	80001d0 <strlen>
 800519a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800519e:	b282      	uxth	r2, r0
 80051a0:	4621      	mov	r1, r4
 80051a2:	481a      	ldr	r0, [pc, #104]	; (800520c <DecodeCmd+0x910>)
 80051a4:	f7fe fba3 	bl	80038ee <HAL_UART_Transmit>
 80051a8:	e789      	b.n	80050be <DecodeCmd+0x7c2>
 80051aa:	bf00      	nop
 80051ac:	200002d0 	.word	0x200002d0
 80051b0:	200005cc 	.word	0x200005cc
 80051b4:	200002c8 	.word	0x200002c8
 80051b8:	200002d4 	.word	0x200002d4
 80051bc:	200002ca 	.word	0x200002ca
 80051c0:	20000797 	.word	0x20000797
 80051c4:	20000810 	.word	0x20000810
 80051c8:	08009004 	.word	0x08009004
 80051cc:	2000065c 	.word	0x2000065c
 80051d0:	08009008 	.word	0x08009008
 80051d4:	20000814 	.word	0x20000814
 80051d8:	0800900c 	.word	0x0800900c
 80051dc:	200004d0 	.word	0x200004d0
 80051e0:	08009010 	.word	0x08009010
 80051e4:	20000478 	.word	0x20000478
 80051e8:	08009014 	.word	0x08009014
 80051ec:	20000828 	.word	0x20000828
 80051f0:	08009018 	.word	0x08009018
 80051f4:	200007fc 	.word	0x200007fc
 80051f8:	0800901c 	.word	0x0800901c
 80051fc:	20000820 	.word	0x20000820
 8005200:	08009020 	.word	0x08009020
 8005204:	08009024 	.word	0x08009024
 8005208:	08007b18 	.word	0x08007b18
 800520c:	2000038c 	.word	0x2000038c
 8005210:	08007a88 	.word	0x08007a88
 8005214:	08007ab8 	.word	0x08007ab8
		if(heaterState == 1U && valveState == 0U)
 8005218:	4b21      	ldr	r3, [pc, #132]	; (80052a0 <DecodeCmd+0x9a4>)
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	b21b      	sxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	f47f af53 	bne.w	80050ca <DecodeCmd+0x7ce>
			sprintf(txBuf,"$L,%lu,%lu,%lu,%lu,%lu,%lu,%lu,%lu,ON,CLOSED\r\n",logHrs,logMin,logSec,irmsA,vrmsV,logAmbientT,logWaterT,totalFlow);
 8005224:	4b1f      	ldr	r3, [pc, #124]	; (80052a4 <DecodeCmd+0x9a8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1f      	ldr	r2, [pc, #124]	; (80052a8 <DecodeCmd+0x9ac>)
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	4c1f      	ldr	r4, [pc, #124]	; (80052ac <DecodeCmd+0x9b0>)
 800522e:	4920      	ldr	r1, [pc, #128]	; (80052b0 <DecodeCmd+0x9b4>)
 8005230:	6809      	ldr	r1, [r1, #0]
 8005232:	9105      	str	r1, [sp, #20]
 8005234:	491f      	ldr	r1, [pc, #124]	; (80052b4 <DecodeCmd+0x9b8>)
 8005236:	6809      	ldr	r1, [r1, #0]
 8005238:	9104      	str	r1, [sp, #16]
 800523a:	491f      	ldr	r1, [pc, #124]	; (80052b8 <DecodeCmd+0x9bc>)
 800523c:	6809      	ldr	r1, [r1, #0]
 800523e:	9103      	str	r1, [sp, #12]
 8005240:	491e      	ldr	r1, [pc, #120]	; (80052bc <DecodeCmd+0x9c0>)
 8005242:	6809      	ldr	r1, [r1, #0]
 8005244:	9102      	str	r1, [sp, #8]
 8005246:	491e      	ldr	r1, [pc, #120]	; (80052c0 <DecodeCmd+0x9c4>)
 8005248:	6809      	ldr	r1, [r1, #0]
 800524a:	9101      	str	r1, [sp, #4]
 800524c:	491d      	ldr	r1, [pc, #116]	; (80052c4 <DecodeCmd+0x9c8>)
 800524e:	6809      	ldr	r1, [r1, #0]
 8005250:	9100      	str	r1, [sp, #0]
 8005252:	491d      	ldr	r1, [pc, #116]	; (80052c8 <DecodeCmd+0x9cc>)
 8005254:	4620      	mov	r0, r4
 8005256:	f000 fee7 	bl	8006028 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) txBuf, strlen(txBuf), 1000);
 800525a:	4620      	mov	r0, r4
 800525c:	f7fa ffb8 	bl	80001d0 <strlen>
 8005260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005264:	b282      	uxth	r2, r0
 8005266:	4621      	mov	r1, r4
 8005268:	4818      	ldr	r0, [pc, #96]	; (80052cc <DecodeCmd+0x9d0>)
 800526a:	f7fe fb40 	bl	80038ee <HAL_UART_Transmit>
 800526e:	e72c      	b.n	80050ca <DecodeCmd+0x7ce>
		HAL_FLASH_Unlock();
 8005270:	f7fc fa1c 	bl	80016ac <HAL_FLASH_Unlock>
		FLASH_PageErase(startAddress);
 8005274:	4816      	ldr	r0, [pc, #88]	; (80052d0 <DecodeCmd+0x9d4>)
 8005276:	f7fc fab7 	bl	80017e8 <FLASH_PageErase>
		HAL_FLASH_Lock();
 800527a:	f7fc fa2b 	bl	80016d4 <HAL_FLASH_Lock>
		txBuf[0] = '$';	txBuf[1] = 'Z';
 800527e:	490b      	ldr	r1, [pc, #44]	; (80052ac <DecodeCmd+0x9b0>)
 8005280:	2324      	movs	r3, #36	; 0x24
 8005282:	700b      	strb	r3, [r1, #0]
 8005284:	235a      	movs	r3, #90	; 0x5a
 8005286:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8005288:	230d      	movs	r3, #13
 800528a:	708b      	strb	r3, [r1, #2]
 800528c:	230a      	movs	r3, #10
 800528e:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8005290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005294:	2204      	movs	r2, #4
 8005296:	480d      	ldr	r0, [pc, #52]	; (80052cc <DecodeCmd+0x9d0>)
 8005298:	f7fe fb29 	bl	80038ee <HAL_UART_Transmit>
}
 800529c:	f7ff bb5a 	b.w	8004954 <DecodeCmd+0x58>
 80052a0:	200002d4 	.word	0x200002d4
 80052a4:	2000065c 	.word	0x2000065c
 80052a8:	20000810 	.word	0x20000810
 80052ac:	200005cc 	.word	0x200005cc
 80052b0:	20000820 	.word	0x20000820
 80052b4:	200007fc 	.word	0x200007fc
 80052b8:	20000828 	.word	0x20000828
 80052bc:	20000478 	.word	0x20000478
 80052c0:	200004d0 	.word	0x200004d0
 80052c4:	20000814 	.word	0x20000814
 80052c8:	08007ae8 	.word	0x08007ae8
 80052cc:	2000038c 	.word	0x2000038c
 80052d0:	08009000 	.word	0x08009000

080052d4 <Logging>:

void Logging(void)
{
 80052d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	halStatus = HAL_RTC_GetTime(&hrtc, &getTimeLive, RTC_FORMAT_BIN);
 80052d6:	4d5b      	ldr	r5, [pc, #364]	; (8005444 <Logging+0x170>)
 80052d8:	4e5b      	ldr	r6, [pc, #364]	; (8005448 <Logging+0x174>)
 80052da:	2200      	movs	r2, #0
 80052dc:	4629      	mov	r1, r5
 80052de:	4630      	mov	r0, r6
 80052e0:	f7fd fe13 	bl	8002f0a <HAL_RTC_GetTime>
 80052e4:	4c59      	ldr	r4, [pc, #356]	; (800544c <Logging+0x178>)
 80052e6:	7020      	strb	r0, [r4, #0]
	halStatus = HAL_RTC_GetDate(&hrtc, &getDateLive, RTC_FORMAT_BIN);
 80052e8:	2200      	movs	r2, #0
 80052ea:	4959      	ldr	r1, [pc, #356]	; (8005450 <Logging+0x17c>)
 80052ec:	4630      	mov	r0, r6
 80052ee:	f7fd fe37 	bl	8002f60 <HAL_RTC_GetDate>
 80052f2:	7020      	strb	r0, [r4, #0]
	logAmbientT = TempConv(ambientTavg);
 80052f4:	4b57      	ldr	r3, [pc, #348]	; (8005454 <Logging+0x180>)
 80052f6:	edd3 7a00 	vldr	s15, [r3]
 80052fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052fe:	ee17 0a90 	vmov	r0, s15
 8005302:	f7fe fcfd 	bl	8003d00 <TempConv>
 8005306:	4f54      	ldr	r7, [pc, #336]	; (8005458 <Logging+0x184>)
 8005308:	6038      	str	r0, [r7, #0]
	logWaterT = TempConv(waterTavg);
 800530a:	4b54      	ldr	r3, [pc, #336]	; (800545c <Logging+0x188>)
 800530c:	edd3 7a00 	vldr	s15, [r3]
 8005310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005314:	ee17 0a90 	vmov	r0, s15
 8005318:	f7fe fcf2 	bl	8003d00 <TempConv>
 800531c:	4e50      	ldr	r6, [pc, #320]	; (8005460 <Logging+0x18c>)
 800531e:	6030      	str	r0, [r6, #0]

	HAL_FLASH_Unlock();
 8005320:	f7fc f9c4 	bl	80016ac <HAL_FLASH_Unlock>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(startAddress+4*addressIndex),(uint32_t)(getTimeLive.Hours));
 8005324:	4c4f      	ldr	r4, [pc, #316]	; (8005464 <Logging+0x190>)
 8005326:	6821      	ldr	r1, [r4, #0]
 8005328:	f101 7100 	add.w	r1, r1, #33554432	; 0x2000000
 800532c:	f501 5110 	add.w	r1, r1, #9216	; 0x2400
 8005330:	782a      	ldrb	r2, [r5, #0]
 8005332:	2300      	movs	r3, #0
 8005334:	0089      	lsls	r1, r1, #2
 8005336:	2002      	movs	r0, #2
 8005338:	f7fc fa08 	bl	800174c <HAL_FLASH_Program>
	addressIndex++;
 800533c:	6821      	ldr	r1, [r4, #0]
 800533e:	3101      	adds	r1, #1
 8005340:	6021      	str	r1, [r4, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(startAddress+4*addressIndex),(uint32_t)(getTimeLive.Minutes));
 8005342:	f101 7100 	add.w	r1, r1, #33554432	; 0x2000000
 8005346:	f501 5110 	add.w	r1, r1, #9216	; 0x2400
 800534a:	786a      	ldrb	r2, [r5, #1]
 800534c:	2300      	movs	r3, #0
 800534e:	0089      	lsls	r1, r1, #2
 8005350:	2002      	movs	r0, #2
 8005352:	f7fc f9fb 	bl	800174c <HAL_FLASH_Program>
	addressIndex++;
 8005356:	6821      	ldr	r1, [r4, #0]
 8005358:	3101      	adds	r1, #1
 800535a:	6021      	str	r1, [r4, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(startAddress+4*addressIndex),(uint32_t)(getTimeLive.Seconds));
 800535c:	f101 7100 	add.w	r1, r1, #33554432	; 0x2000000
 8005360:	f501 5110 	add.w	r1, r1, #9216	; 0x2400
 8005364:	78aa      	ldrb	r2, [r5, #2]
 8005366:	2300      	movs	r3, #0
 8005368:	0089      	lsls	r1, r1, #2
 800536a:	2002      	movs	r0, #2
 800536c:	f7fc f9ee 	bl	800174c <HAL_FLASH_Program>
	addressIndex++;
 8005370:	6821      	ldr	r1, [r4, #0]
 8005372:	3101      	adds	r1, #1
 8005374:	6021      	str	r1, [r4, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(startAddress+4*addressIndex),(uint32_t)(irmsA));
 8005376:	2500      	movs	r5, #0
 8005378:	f101 7100 	add.w	r1, r1, #33554432	; 0x2000000
 800537c:	f501 5110 	add.w	r1, r1, #9216	; 0x2400
 8005380:	4b39      	ldr	r3, [pc, #228]	; (8005468 <Logging+0x194>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	462b      	mov	r3, r5
 8005386:	0089      	lsls	r1, r1, #2
 8005388:	2002      	movs	r0, #2
 800538a:	f7fc f9df 	bl	800174c <HAL_FLASH_Program>
	addressIndex++;
 800538e:	6821      	ldr	r1, [r4, #0]
 8005390:	3101      	adds	r1, #1
 8005392:	6021      	str	r1, [r4, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(startAddress+4*addressIndex),(uint32_t)(vrmsV));
 8005394:	f101 7100 	add.w	r1, r1, #33554432	; 0x2000000
 8005398:	f501 5110 	add.w	r1, r1, #9216	; 0x2400
 800539c:	4b33      	ldr	r3, [pc, #204]	; (800546c <Logging+0x198>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	462b      	mov	r3, r5
 80053a2:	0089      	lsls	r1, r1, #2
 80053a4:	2002      	movs	r0, #2
 80053a6:	f7fc f9d1 	bl	800174c <HAL_FLASH_Program>
	addressIndex++;
 80053aa:	6821      	ldr	r1, [r4, #0]
 80053ac:	3101      	adds	r1, #1
 80053ae:	6021      	str	r1, [r4, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(startAddress+4*addressIndex),(uint32_t)(logAmbientT));
 80053b0:	f101 7100 	add.w	r1, r1, #33554432	; 0x2000000
 80053b4:	f501 5110 	add.w	r1, r1, #9216	; 0x2400
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	462b      	mov	r3, r5
 80053bc:	0089      	lsls	r1, r1, #2
 80053be:	2002      	movs	r0, #2
 80053c0:	f7fc f9c4 	bl	800174c <HAL_FLASH_Program>
	addressIndex++;
 80053c4:	6821      	ldr	r1, [r4, #0]
 80053c6:	3101      	adds	r1, #1
 80053c8:	6021      	str	r1, [r4, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(startAddress+4*addressIndex),(uint32_t)(logWaterT));
 80053ca:	f101 7100 	add.w	r1, r1, #33554432	; 0x2000000
 80053ce:	f501 5110 	add.w	r1, r1, #9216	; 0x2400
 80053d2:	6832      	ldr	r2, [r6, #0]
 80053d4:	462b      	mov	r3, r5
 80053d6:	0089      	lsls	r1, r1, #2
 80053d8:	2002      	movs	r0, #2
 80053da:	f7fc f9b7 	bl	800174c <HAL_FLASH_Program>
	addressIndex++;
 80053de:	6821      	ldr	r1, [r4, #0]
 80053e0:	3101      	adds	r1, #1
 80053e2:	6021      	str	r1, [r4, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(startAddress+4*addressIndex),(uint32_t)(totalFlow));
 80053e4:	f101 7100 	add.w	r1, r1, #33554432	; 0x2000000
 80053e8:	f501 5110 	add.w	r1, r1, #9216	; 0x2400
 80053ec:	4b20      	ldr	r3, [pc, #128]	; (8005470 <Logging+0x19c>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	462b      	mov	r3, r5
 80053f2:	0089      	lsls	r1, r1, #2
 80053f4:	2002      	movs	r0, #2
 80053f6:	f7fc f9a9 	bl	800174c <HAL_FLASH_Program>
	addressIndex++;
 80053fa:	6821      	ldr	r1, [r4, #0]
 80053fc:	3101      	adds	r1, #1
 80053fe:	6021      	str	r1, [r4, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(startAddress+4*addressIndex),(uint32_t)(valveState));
 8005400:	4b1c      	ldr	r3, [pc, #112]	; (8005474 <Logging+0x1a0>)
 8005402:	881a      	ldrh	r2, [r3, #0]
 8005404:	f101 7100 	add.w	r1, r1, #33554432	; 0x2000000
 8005408:	f501 5110 	add.w	r1, r1, #9216	; 0x2400
 800540c:	b212      	sxth	r2, r2
 800540e:	462b      	mov	r3, r5
 8005410:	0089      	lsls	r1, r1, #2
 8005412:	2002      	movs	r0, #2
 8005414:	f7fc f99a 	bl	800174c <HAL_FLASH_Program>
	addressIndex++;
 8005418:	6821      	ldr	r1, [r4, #0]
 800541a:	3101      	adds	r1, #1
 800541c:	6021      	str	r1, [r4, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(startAddress+4*addressIndex),(uint32_t)(heaterState));
 800541e:	4b16      	ldr	r3, [pc, #88]	; (8005478 <Logging+0x1a4>)
 8005420:	881a      	ldrh	r2, [r3, #0]
 8005422:	f101 7100 	add.w	r1, r1, #33554432	; 0x2000000
 8005426:	f501 5110 	add.w	r1, r1, #9216	; 0x2400
 800542a:	b212      	sxth	r2, r2
 800542c:	462b      	mov	r3, r5
 800542e:	0089      	lsls	r1, r1, #2
 8005430:	2002      	movs	r0, #2
 8005432:	f7fc f98b 	bl	800174c <HAL_FLASH_Program>
	addressIndex++;
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	3301      	adds	r3, #1
 800543a:	6023      	str	r3, [r4, #0]

	HAL_FLASH_Lock();
 800543c:	f7fc f94a 	bl	80016d4 <HAL_FLASH_Lock>
 8005440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005442:	bf00      	nop
 8005444:	200004d8 	.word	0x200004d8
 8005448:	200003fc 	.word	0x200003fc
 800544c:	200004c2 	.word	0x200004c2
 8005450:	20000830 	.word	0x20000830
 8005454:	20000460 	.word	0x20000460
 8005458:	20000828 	.word	0x20000828
 800545c:	20000664 	.word	0x20000664
 8005460:	200007fc 	.word	0x200007fc
 8005464:	20000464 	.word	0x20000464
 8005468:	200004d0 	.word	0x200004d0
 800546c:	20000478 	.word	0x20000478
 8005470:	20000820 	.word	0x20000820
 8005474:	200002d4 	.word	0x200002d4
 8005478:	200002d0 	.word	0x200002d0

0800547c <Flags>:
}

void Flags(void)
{
 800547c:	b570      	push	{r4, r5, r6, lr}
 800547e:	ed2d 8b02 	vpush	{d8}
 8005482:	b088      	sub	sp, #32
	//halStatus = HAL_I2C_Master_Transmit_IT(&hi2c1, 0x44<<1, &pData, 1);	// I2C write call

	if (uartRxFlag)
 8005484:	4bba      	ldr	r3, [pc, #744]	; (8005770 <Flags+0x2f4>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	b1f3      	cbz	r3, 80054c8 <Flags+0x4c>
	{
		if (uartRxChar == '$')
 800548a:	4bba      	ldr	r3, [pc, #744]	; (8005774 <Flags+0x2f8>)
 800548c:	781a      	ldrb	r2, [r3, #0]
 800548e:	2a24      	cmp	r2, #36	; 0x24
 8005490:	f000 8129 	beq.w	80056e6 <Flags+0x26a>
			cmdBufPos = 0;

		// add character to command buffer, but only if there is more space in the command buffer
		if (cmdBufPos < cmdBufL)
 8005494:	4bb8      	ldr	r3, [pc, #736]	; (8005778 <Flags+0x2fc>)
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	2b3b      	cmp	r3, #59	; 0x3b
 800549a:	d804      	bhi.n	80054a6 <Flags+0x2a>
			cmdBuf[cmdBufPos++] = uartRxChar;
 800549c:	1c58      	adds	r0, r3, #1
 800549e:	49b6      	ldr	r1, [pc, #728]	; (8005778 <Flags+0x2fc>)
 80054a0:	8008      	strh	r0, [r1, #0]
 80054a2:	49b6      	ldr	r1, [pc, #728]	; (800577c <Flags+0x300>)
 80054a4:	54ca      	strb	r2, [r1, r3]

		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 80054a6:	4bb4      	ldr	r3, [pc, #720]	; (8005778 <Flags+0x2fc>)
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d904      	bls.n	80054b8 <Flags+0x3c>
 80054ae:	4ab3      	ldr	r2, [pc, #716]	; (800577c <Flags+0x300>)
 80054b0:	7812      	ldrb	r2, [r2, #0]
 80054b2:	2a24      	cmp	r2, #36	; 0x24
 80054b4:	f000 811b 	beq.w	80056ee <Flags+0x272>
		{
			DecodeCmd();
			cmdBufPos = 0;	// clear buffer
		}
		uartRxFlag = false;  // clear the flag - the 'receive character' event has been handled.
 80054b8:	2200      	movs	r2, #0
 80054ba:	4bad      	ldr	r3, [pc, #692]	; (8005770 <Flags+0x2f4>)
 80054bc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 80054be:	2201      	movs	r2, #1
 80054c0:	49ac      	ldr	r1, [pc, #688]	; (8005774 <Flags+0x2f8>)
 80054c2:	48af      	ldr	r0, [pc, #700]	; (8005780 <Flags+0x304>)
 80054c4:	f7fe f83f 	bl	8003546 <HAL_UART_Receive_IT>
	}
	if(adcFlag == 1U)
 80054c8:	4bae      	ldr	r3, [pc, #696]	; (8005784 <Flags+0x308>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 81c9 	beq.w	8005864 <Flags+0x3e8>
		// 3. change the ADC channel
		// 4. start a new ADC sampling iteration
		//
		// the result is that all ADC 4 channels are sampled every 1ms

		if (adcCh == 0)
 80054d2:	4bad      	ldr	r3, [pc, #692]	; (8005788 <Flags+0x30c>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 811a 	beq.w	8005710 <Flags+0x294>
			vsample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
			//Result := ((Input - InputLow) / (InputHigh - InputLow)) * (OutputHigh - OutputLow) + OutputLow;
			//vsample[sampleCntr] = ((vsample[sampleCntr]-298)/(3871-298))*(220000+220000)-220000;

		}
		else if (adcCh == 1)
 80054dc:	2b01      	cmp	r3, #1
 80054de:	f000 8120 	beq.w	8005722 <Flags+0x2a6>
		{
			isample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
		}
		else if (adcCh == 2)
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	f000 8126 	beq.w	8005734 <Flags+0x2b8>
		{
			//--------------------------------------------------------------------------------------------------sample time
			ambientTSample[tempCntr] = HAL_ADC_GetValue(&hadc1);
		}
		else if (adcCh == 3)
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	f000 8132 	beq.w	8005752 <Flags+0x2d6>
		{
			waterTSample[tempCntr] = HAL_ADC_GetValue(&hadc1);
		}

		adcCh++;
 80054ee:	4aa6      	ldr	r2, [pc, #664]	; (8005788 <Flags+0x30c>)
 80054f0:	7813      	ldrb	r3, [r2, #0]
 80054f2:	3301      	adds	r3, #1
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	7013      	strb	r3, [r2, #0]
		if (adcCh >= 4)
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	f240 80e9 	bls.w	80056d0 <Flags+0x254>
		{
			adcCh = 0;
 80054fe:	2200      	movs	r2, #0
 8005500:	4ba1      	ldr	r3, [pc, #644]	; (8005788 <Flags+0x30c>)
 8005502:	701a      	strb	r2, [r3, #0]

			vrms = ((float) (vsample[sampleCntr]-660)/(3620-660))*(220000+220000)-220000;
 8005504:	4ba1      	ldr	r3, [pc, #644]	; (800578c <Flags+0x310>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	4aa1      	ldr	r2, [pc, #644]	; (8005790 <Flags+0x314>)
 800550a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800550e:	f5a2 7125 	sub.w	r1, r2, #660	; 0x294
 8005512:	ee07 1a10 	vmov	s14, r1
 8005516:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800551a:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8005794 <Flags+0x318>
 800551e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005522:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8005798 <Flags+0x31c>
 8005526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800552a:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800579c <Flags+0x320>
 800552e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005532:	499b      	ldr	r1, [pc, #620]	; (80057a0 <Flags+0x324>)
 8005534:	edc1 7a00 	vstr	s15, [r1]
			vrmsSum += vrms * vrms;
 8005538:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800553c:	4999      	ldr	r1, [pc, #612]	; (80057a4 <Flags+0x328>)
 800553e:	ed91 7a00 	vldr	s14, [r1]
 8005542:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005546:	edc1 7a00 	vstr	s15, [r1]

			if (vsample[sampleCntr] > 1880 && vsample[sampleCntr] < 2260)
 800554a:	f2a2 7159 	subw	r1, r2, #1881	; 0x759
 800554e:	b289      	uxth	r1, r1
 8005550:	f5b1 7fbd 	cmp.w	r1, #378	; 0x17a
 8005554:	d827      	bhi.n	80055a6 <Flags+0x12a>
			{
				sampleSmallCntr++;
 8005556:	4894      	ldr	r0, [pc, #592]	; (80057a8 <Flags+0x32c>)
 8005558:	7801      	ldrb	r1, [r0, #0]
 800555a:	3101      	adds	r1, #1
 800555c:	b2c9      	uxtb	r1, r1
 800555e:	7001      	strb	r1, [r0, #0]
				if (sampleSmallCntr > 36)
 8005560:	2924      	cmp	r1, #36	; 0x24
 8005562:	d902      	bls.n	800556a <Flags+0xee>
				{
					vrmsSmallFlag = 1;
 8005564:	2001      	movs	r0, #1
 8005566:	4991      	ldr	r1, [pc, #580]	; (80057ac <Flags+0x330>)
 8005568:	7008      	strb	r0, [r1, #0]
				}
				vrmsSmall = ((float) (vsample[sampleCntr]-1890)/(2250-1890))*(27500+27500)-27500;
 800556a:	f2a2 7262 	subw	r2, r2, #1890	; 0x762
 800556e:	ee07 2a10 	vmov	s14, r2
 8005572:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005576:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 80057b0 <Flags+0x334>
 800557a:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800557e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80057b4 <Flags+0x338>
 8005582:	ee26 7a87 	vmul.f32	s14, s13, s14
 8005586:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80057b8 <Flags+0x33c>
 800558a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800558e:	4a8b      	ldr	r2, [pc, #556]	; (80057bc <Flags+0x340>)
 8005590:	ed82 7a00 	vstr	s14, [r2]
				vrmsSmallSum += vrmsSmall * vrmsSmall;
 8005594:	ee27 7a07 	vmul.f32	s14, s14, s14
 8005598:	4a89      	ldr	r2, [pc, #548]	; (80057c0 <Flags+0x344>)
 800559a:	edd2 6a00 	vldr	s13, [r2]
 800559e:	ee36 7a87 	vadd.f32	s14, s13, s14
 80055a2:	ed82 7a00 	vstr	s14, [r2]
			}

			irms = ((float) (isample[sampleCntr]-660)/(3620-660))*(13000+13000)-13000;
 80055a6:	4a87      	ldr	r2, [pc, #540]	; (80057c4 <Flags+0x348>)
 80055a8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80055ac:	f5a2 7225 	sub.w	r2, r2, #660	; 0x294
 80055b0:	ee07 2a10 	vmov	s14, r2
 80055b4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80055b8:	ed9f 6a76 	vldr	s12, [pc, #472]	; 8005794 <Flags+0x318>
 80055bc:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80055c0:	eddf 6a81 	vldr	s13, [pc, #516]	; 80057c8 <Flags+0x34c>
 80055c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80055c8:	eddf 6a80 	vldr	s13, [pc, #512]	; 80057cc <Flags+0x350>
 80055cc:	ee37 7a66 	vsub.f32	s14, s14, s13
 80055d0:	4a7f      	ldr	r2, [pc, #508]	; (80057d0 <Flags+0x354>)
 80055d2:	ed82 7a00 	vstr	s14, [r2]
			irmsSum += irms * irms;
 80055d6:	ee27 7a07 	vmul.f32	s14, s14, s14
 80055da:	4a7e      	ldr	r2, [pc, #504]	; (80057d4 <Flags+0x358>)
 80055dc:	edd2 6a00 	vldr	s13, [r2]
 80055e0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80055e4:	ed82 7a00 	vstr	s14, [r2]

			ambientTSum += ambientTSample[tempCntr];
 80055e8:	4a7b      	ldr	r2, [pc, #492]	; (80057d8 <Flags+0x35c>)
 80055ea:	7812      	ldrb	r2, [r2, #0]
 80055ec:	0094      	lsls	r4, r2, #2
 80055ee:	487b      	ldr	r0, [pc, #492]	; (80057dc <Flags+0x360>)
 80055f0:	4420      	add	r0, r4
 80055f2:	edd0 6a00 	vldr	s13, [r0]
 80055f6:	497a      	ldr	r1, [pc, #488]	; (80057e0 <Flags+0x364>)
 80055f8:	ed91 7a00 	vldr	s14, [r1]
 80055fc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005600:	ed81 7a00 	vstr	s14, [r1]
			waterTSum += waterTSample[tempCntr];
 8005604:	4977      	ldr	r1, [pc, #476]	; (80057e4 <Flags+0x368>)
 8005606:	4421      	add	r1, r4
 8005608:	edd1 6a00 	vldr	s13, [r1]
 800560c:	4976      	ldr	r1, [pc, #472]	; (80057e8 <Flags+0x36c>)
 800560e:	ed91 7a00 	vldr	s14, [r1]
 8005612:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005616:	ed81 7a00 	vstr	s14, [r1]

			sampleCntr++;
 800561a:	3301      	adds	r3, #1
 800561c:	b2db      	uxtb	r3, r3
 800561e:	495b      	ldr	r1, [pc, #364]	; (800578c <Flags+0x310>)
 8005620:	700b      	strb	r3, [r1, #0]

			if (sampleCntr >= RMS_WINDOW)
 8005622:	2b27      	cmp	r3, #39	; 0x27
 8005624:	d954      	bls.n	80056d0 <Flags+0x254>
			{
				sampleCntr = 0;
 8005626:	2300      	movs	r3, #0
 8005628:	700b      	strb	r3, [r1, #0]
				sampleSmallCntr = 0;
 800562a:	495f      	ldr	r1, [pc, #380]	; (80057a8 <Flags+0x32c>)
 800562c:	700b      	strb	r3, [r1, #0]

				tempCntr++;
 800562e:	3201      	adds	r2, #1
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	4b69      	ldr	r3, [pc, #420]	; (80057d8 <Flags+0x35c>)
 8005634:	701a      	strb	r2, [r3, #0]

				if (tempCntr >= RMS_WINDOW)
 8005636:	2a27      	cmp	r2, #39	; 0x27
 8005638:	d901      	bls.n	800563e <Flags+0x1c2>
				{
					tempCntr = 0;
 800563a:	2200      	movs	r2, #0
 800563c:	701a      	strb	r2, [r3, #0]
				}

				vrmsSum /= RMS_WINDOW;
 800563e:	eddf 6a6b 	vldr	s13, [pc, #428]	; 80057ec <Flags+0x370>
 8005642:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005646:	4c57      	ldr	r4, [pc, #348]	; (80057a4 <Flags+0x328>)
 8005648:	ed84 7a00 	vstr	s14, [r4]
				vrmsV = sqrt(vrmsSum);
 800564c:	ee17 0a10 	vmov	r0, s14
 8005650:	f7fa ff8a 	bl	8000568 <__aeabi_f2d>
 8005654:	ec41 0b10 	vmov	d0, r0, r1
 8005658:	f002 f8c0 	bl	80077dc <sqrt>
 800565c:	ec51 0b10 	vmov	r0, r1, d0
 8005660:	f7fb fa86 	bl	8000b70 <__aeabi_d2uiz>
 8005664:	4b62      	ldr	r3, [pc, #392]	; (80057f0 <Flags+0x374>)
 8005666:	6018      	str	r0, [r3, #0]
				vrmsSum = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	6023      	str	r3, [r4, #0]

				if (vrmsSmallFlag == 1)
 800566c:	4b4f      	ldr	r3, [pc, #316]	; (80057ac <Flags+0x330>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	f040 80c7 	bne.w	8005804 <Flags+0x388>
					vrmsSmallSum /= RMS_WINDOW;
					vrmsV = sqrt(vrmsSmallSum);
					vrmsSmallSum = 0;
				}

				irmsSum /= RMS_WINDOW;
 8005676:	4c57      	ldr	r4, [pc, #348]	; (80057d4 <Flags+0x358>)
 8005678:	ed94 7a00 	vldr	s14, [r4]
 800567c:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 80057ec <Flags+0x370>
 8005680:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8005684:	edc4 7a00 	vstr	s15, [r4]
				irmsA = sqrt(irmsSum);
 8005688:	ee17 0a90 	vmov	r0, s15
 800568c:	f7fa ff6c 	bl	8000568 <__aeabi_f2d>
 8005690:	ec41 0b10 	vmov	d0, r0, r1
 8005694:	f002 f8a2 	bl	80077dc <sqrt>
 8005698:	ec51 0b10 	vmov	r0, r1, d0
 800569c:	f7fb fa68 	bl	8000b70 <__aeabi_d2uiz>
 80056a0:	4b54      	ldr	r3, [pc, #336]	; (80057f4 <Flags+0x378>)
 80056a2:	6018      	str	r0, [r3, #0]
				irmsSum = 0;
 80056a4:	2300      	movs	r3, #0
 80056a6:	6023      	str	r3, [r4, #0]

				ambientTSum /= RMS_WINDOW;
 80056a8:	4b4d      	ldr	r3, [pc, #308]	; (80057e0 <Flags+0x364>)
 80056aa:	ed93 7a00 	vldr	s14, [r3]
 80056ae:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80056b2:	edc3 7a00 	vstr	s15, [r3]
				ambientTavg = ambientTSum;
 80056b6:	4b50      	ldr	r3, [pc, #320]	; (80057f8 <Flags+0x37c>)
 80056b8:	edc3 7a00 	vstr	s15, [r3]

				waterTSum /= RMS_WINDOW;
 80056bc:	4b4a      	ldr	r3, [pc, #296]	; (80057e8 <Flags+0x36c>)
 80056be:	ed93 7a00 	vldr	s14, [r3]
 80056c2:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80056c6:	edc3 7a00 	vstr	s15, [r3]
				waterTavg = waterTSum;
 80056ca:	4b4c      	ldr	r3, [pc, #304]	; (80057fc <Flags+0x380>)
 80056cc:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		ADC_ChannelConfTypeDef chdef;
		switch (adcCh)
 80056d0:	4b2d      	ldr	r3, [pc, #180]	; (8005788 <Flags+0x30c>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	f200 80b4 	bhi.w	8005842 <Flags+0x3c6>
 80056da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80056de:	00b0      	.short	0x00b0
 80056e0:	0140013d 	.word	0x0140013d
 80056e4:	0143      	.short	0x0143
			cmdBufPos = 0;
 80056e6:	2100      	movs	r1, #0
 80056e8:	4b23      	ldr	r3, [pc, #140]	; (8005778 <Flags+0x2fc>)
 80056ea:	8019      	strh	r1, [r3, #0]
 80056ec:	e6d2      	b.n	8005494 <Flags+0x18>
		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 80056ee:	1e9a      	subs	r2, r3, #2
 80056f0:	4922      	ldr	r1, [pc, #136]	; (800577c <Flags+0x300>)
 80056f2:	5c8a      	ldrb	r2, [r1, r2]
 80056f4:	2a0d      	cmp	r2, #13
 80056f6:	f47f aedf 	bne.w	80054b8 <Flags+0x3c>
 80056fa:	3b01      	subs	r3, #1
 80056fc:	5ccb      	ldrb	r3, [r1, r3]
 80056fe:	2b0a      	cmp	r3, #10
 8005700:	f47f aeda 	bne.w	80054b8 <Flags+0x3c>
			DecodeCmd();
 8005704:	f7ff f8fa 	bl	80048fc <DecodeCmd>
			cmdBufPos = 0;	// clear buffer
 8005708:	2200      	movs	r2, #0
 800570a:	4b1b      	ldr	r3, [pc, #108]	; (8005778 <Flags+0x2fc>)
 800570c:	801a      	strh	r2, [r3, #0]
 800570e:	e6d3      	b.n	80054b8 <Flags+0x3c>
			vsample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
 8005710:	4b1e      	ldr	r3, [pc, #120]	; (800578c <Flags+0x310>)
 8005712:	781c      	ldrb	r4, [r3, #0]
 8005714:	483a      	ldr	r0, [pc, #232]	; (8005800 <Flags+0x384>)
 8005716:	f7fb fc97 	bl	8001048 <HAL_ADC_GetValue>
 800571a:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <Flags+0x314>)
 800571c:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 8005720:	e6e5      	b.n	80054ee <Flags+0x72>
			isample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
 8005722:	4b1a      	ldr	r3, [pc, #104]	; (800578c <Flags+0x310>)
 8005724:	781c      	ldrb	r4, [r3, #0]
 8005726:	4836      	ldr	r0, [pc, #216]	; (8005800 <Flags+0x384>)
 8005728:	f7fb fc8e 	bl	8001048 <HAL_ADC_GetValue>
 800572c:	4b25      	ldr	r3, [pc, #148]	; (80057c4 <Flags+0x348>)
 800572e:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 8005732:	e6dc      	b.n	80054ee <Flags+0x72>
			ambientTSample[tempCntr] = HAL_ADC_GetValue(&hadc1);
 8005734:	4b28      	ldr	r3, [pc, #160]	; (80057d8 <Flags+0x35c>)
 8005736:	781c      	ldrb	r4, [r3, #0]
 8005738:	4831      	ldr	r0, [pc, #196]	; (8005800 <Flags+0x384>)
 800573a:	f7fb fc85 	bl	8001048 <HAL_ADC_GetValue>
 800573e:	4b27      	ldr	r3, [pc, #156]	; (80057dc <Flags+0x360>)
 8005740:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005744:	ee07 0a90 	vmov	s15, r0
 8005748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574c:	edc3 7a00 	vstr	s15, [r3]
 8005750:	e6cd      	b.n	80054ee <Flags+0x72>
			waterTSample[tempCntr] = HAL_ADC_GetValue(&hadc1);
 8005752:	4b21      	ldr	r3, [pc, #132]	; (80057d8 <Flags+0x35c>)
 8005754:	781c      	ldrb	r4, [r3, #0]
 8005756:	482a      	ldr	r0, [pc, #168]	; (8005800 <Flags+0x384>)
 8005758:	f7fb fc76 	bl	8001048 <HAL_ADC_GetValue>
 800575c:	4b21      	ldr	r3, [pc, #132]	; (80057e4 <Flags+0x368>)
 800575e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005762:	ee07 0a90 	vmov	s15, r0
 8005766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576a:	edc3 7a00 	vstr	s15, [r3]
 800576e:	e6be      	b.n	80054ee <Flags+0x72>
 8005770:	200002d7 	.word	0x200002d7
 8005774:	20000674 	.word	0x20000674
 8005778:	2000082c 	.word	0x2000082c
 800577c:	20000794 	.word	0x20000794
 8005780:	2000038c 	.word	0x2000038c
 8005784:	200002e8 	.word	0x200002e8
 8005788:	200007f9 	.word	0x200007f9
 800578c:	20000468 	.word	0x20000468
 8005790:	20000608 	.word	0x20000608
 8005794:	45390000 	.word	0x45390000
 8005798:	48d6d800 	.word	0x48d6d800
 800579c:	4856d800 	.word	0x4856d800
 80057a0:	20000818 	.word	0x20000818
 80057a4:	20000804 	.word	0x20000804
 80057a8:	20000738 	.word	0x20000738
 80057ac:	200002d2 	.word	0x200002d2
 80057b0:	43b40000 	.word	0x43b40000
 80057b4:	4756d800 	.word	0x4756d800
 80057b8:	46d6d800 	.word	0x46d6d800
 80057bc:	200004bc 	.word	0x200004bc
 80057c0:	200004c8 	.word	0x200004c8
 80057c4:	2000073c 	.word	0x2000073c
 80057c8:	46cb2000 	.word	0x46cb2000
 80057cc:	464b2000 	.word	0x464b2000
 80057d0:	2000078c 	.word	0x2000078c
 80057d4:	2000071c 	.word	0x2000071c
 80057d8:	20000477 	.word	0x20000477
 80057dc:	200004ec 	.word	0x200004ec
 80057e0:	20000670 	.word	0x20000670
 80057e4:	20000678 	.word	0x20000678
 80057e8:	2000080c 	.word	0x2000080c
 80057ec:	42200000 	.word	0x42200000
 80057f0:	20000478 	.word	0x20000478
 80057f4:	200004d0 	.word	0x200004d0
 80057f8:	20000460 	.word	0x20000460
 80057fc:	20000664 	.word	0x20000664
 8005800:	20000338 	.word	0x20000338
					vrmsSmallFlag = 0;
 8005804:	2200      	movs	r2, #0
 8005806:	4b8f      	ldr	r3, [pc, #572]	; (8005a44 <Flags+0x5c8>)
 8005808:	701a      	strb	r2, [r3, #0]
					vrmsSmallSum /= RMS_WINDOW;
 800580a:	4c8f      	ldr	r4, [pc, #572]	; (8005a48 <Flags+0x5cc>)
 800580c:	edd4 6a00 	vldr	s13, [r4]
 8005810:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8005a4c <Flags+0x5d0>
 8005814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005818:	edc4 7a00 	vstr	s15, [r4]
					vrmsV = sqrt(vrmsSmallSum);
 800581c:	ee17 0a90 	vmov	r0, s15
 8005820:	f7fa fea2 	bl	8000568 <__aeabi_f2d>
 8005824:	ec41 0b10 	vmov	d0, r0, r1
 8005828:	f001 ffd8 	bl	80077dc <sqrt>
 800582c:	ec51 0b10 	vmov	r0, r1, d0
 8005830:	f7fb f99e 	bl	8000b70 <__aeabi_d2uiz>
 8005834:	4b86      	ldr	r3, [pc, #536]	; (8005a50 <Flags+0x5d4>)
 8005836:	6018      	str	r0, [r3, #0]
					vrmsSmallSum = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	6023      	str	r3, [r4, #0]
 800583c:	e71b      	b.n	8005676 <Flags+0x1fa>
		{
		case 0: chdef.Channel = ADC_CHANNEL_12; break;  //V				//PB1
 800583e:	230c      	movs	r3, #12
 8005840:	9302      	str	r3, [sp, #8]
		case 1: chdef.Channel = ADC_CHANNEL_13; break;  //I				//PB13
		case 2: chdef.Channel = ADC_CHANNEL_8; break; //temp ambient	//PC2
		case 3: chdef.Channel = ADC_CHANNEL_9; break; //temp water		//PC3
		}

		chdef.Rank = 1;
 8005842:	2301      	movs	r3, #1
 8005844:	9303      	str	r3, [sp, #12]
		chdef.SingleDiff = ADC_SINGLE_ENDED;
 8005846:	2400      	movs	r4, #0
 8005848:	9405      	str	r4, [sp, #20]
		chdef.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800584a:	9404      	str	r4, [sp, #16]
		chdef.OffsetNumber = ADC_OFFSET_NONE;
 800584c:	9406      	str	r4, [sp, #24]
		chdef.Offset = 0;
 800584e:	9407      	str	r4, [sp, #28]
		HAL_ADC_ConfigChannel(&hadc1, &chdef);
 8005850:	4d80      	ldr	r5, [pc, #512]	; (8005a54 <Flags+0x5d8>)
 8005852:	a902      	add	r1, sp, #8
 8005854:	4628      	mov	r0, r5
 8005856:	f7fb fbfb 	bl	8001050 <HAL_ADC_ConfigChannel>

		HAL_ADC_Start(&hadc1);
 800585a:	4628      	mov	r0, r5
 800585c:	f7fb fb72 	bl	8000f44 <HAL_ADC_Start>

		adcFlag = 0;
 8005860:	4b7d      	ldr	r3, [pc, #500]	; (8005a58 <Flags+0x5dc>)
 8005862:	701c      	strb	r4, [r3, #0]
	}

	if (flowHighFlag == 1)
 8005864:	4b7d      	ldr	r3, [pc, #500]	; (8005a5c <Flags+0x5e0>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	b1c3      	cbz	r3, 800589c <Flags+0x420>
	{
		if (firstHighFlag == 1)
 800586a:	4b7d      	ldr	r3, [pc, #500]	; (8005a60 <Flags+0x5e4>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	b143      	cbz	r3, 8005882 <Flags+0x406>
		{
			firstHighFlag = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	4a7b      	ldr	r2, [pc, #492]	; (8005a60 <Flags+0x5e4>)
 8005874:	7013      	strb	r3, [r2, #0]
			ms5Counter = 0;
 8005876:	4a7b      	ldr	r2, [pc, #492]	; (8005a64 <Flags+0x5e8>)
 8005878:	7013      	strb	r3, [r2, #0]
			ms5Flag = 0;
 800587a:	4a7b      	ldr	r2, [pc, #492]	; (8005a68 <Flags+0x5ec>)
 800587c:	7013      	strb	r3, [r2, #0]
			flowPulse = 0;
 800587e:	4a7b      	ldr	r2, [pc, #492]	; (8005a6c <Flags+0x5f0>)
 8005880:	7013      	strb	r3, [r2, #0]
		}
		if (ms5Flag == 1)
 8005882:	4b79      	ldr	r3, [pc, #484]	; (8005a68 <Flags+0x5ec>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	b14b      	cbz	r3, 800589c <Flags+0x420>
		{
			ms5Flag = 0;
 8005888:	2200      	movs	r2, #0
 800588a:	4b77      	ldr	r3, [pc, #476]	; (8005a68 <Flags+0x5ec>)
 800588c:	701a      	strb	r2, [r3, #0]

			flowPulse++;
 800588e:	4a77      	ldr	r2, [pc, #476]	; (8005a6c <Flags+0x5f0>)
 8005890:	7813      	ldrb	r3, [r2, #0]
 8005892:	3301      	adds	r3, #1
 8005894:	b2db      	uxtb	r3, r3
 8005896:	7013      	strb	r3, [r2, #0]
			if (flowPulse == 1)
 8005898:	2b01      	cmp	r3, #1
 800589a:	d066      	beq.n	800596a <Flags+0x4ee>
			}
		}
	}

	// 1ms timer
	uint32_t tick = HAL_GetTick();
 800589c:	f7fb f9b8 	bl	8000c10 <HAL_GetTick>
	if (tick != lasttick)
 80058a0:	4b73      	ldr	r3, [pc, #460]	; (8005a70 <Flags+0x5f4>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4298      	cmp	r0, r3
 80058a6:	d040      	beq.n	800592a <Flags+0x4ae>
	{
		lasttick = tick;
 80058a8:	4b71      	ldr	r3, [pc, #452]	; (8005a70 <Flags+0x5f4>)
 80058aa:	6018      	str	r0, [r3, #0]

		ms5Counter++;
 80058ac:	4a6d      	ldr	r2, [pc, #436]	; (8005a64 <Flags+0x5e8>)
 80058ae:	7813      	ldrb	r3, [r2, #0]
 80058b0:	3301      	adds	r3, #1
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	7013      	strb	r3, [r2, #0]
		if (ms5Counter >= 5)
 80058b6:	7813      	ldrb	r3, [r2, #0]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d905      	bls.n	80058ca <Flags+0x44e>
		{
			ms5Counter = 0;
 80058be:	2200      	movs	r2, #0
 80058c0:	4b68      	ldr	r3, [pc, #416]	; (8005a64 <Flags+0x5e8>)
 80058c2:	701a      	strb	r2, [r3, #0]
			ms5Flag = 1;
 80058c4:	2201      	movs	r2, #1
 80058c6:	4b68      	ldr	r3, [pc, #416]	; (8005a68 <Flags+0x5ec>)
 80058c8:	701a      	strb	r2, [r3, #0]
		}

		s1Counter++;
 80058ca:	4a6a      	ldr	r2, [pc, #424]	; (8005a74 <Flags+0x5f8>)
 80058cc:	8813      	ldrh	r3, [r2, #0]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3301      	adds	r3, #1
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	8013      	strh	r3, [r2, #0]
		if (s1Counter >= 1000)
 80058d6:	8813      	ldrh	r3, [r2, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058de:	d305      	bcc.n	80058ec <Flags+0x470>
		{
			s1Counter = 0;
 80058e0:	2200      	movs	r2, #0
 80058e2:	4b64      	ldr	r3, [pc, #400]	; (8005a74 <Flags+0x5f8>)
 80058e4:	801a      	strh	r2, [r3, #0]
			s1Flag = 1;
 80058e6:	2201      	movs	r2, #1
 80058e8:	4b63      	ldr	r3, [pc, #396]	; (8005a78 <Flags+0x5fc>)
 80058ea:	701a      	strb	r2, [r3, #0]
		}

		s10Counter++;
 80058ec:	4b63      	ldr	r3, [pc, #396]	; (8005a7c <Flags+0x600>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	3201      	adds	r2, #1
 80058f2:	601a      	str	r2, [r3, #0]
		if (s10Counter >= 10000)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d905      	bls.n	800590a <Flags+0x48e>
		{
			s10Counter = 0;
 80058fe:	2200      	movs	r2, #0
 8005900:	4b5e      	ldr	r3, [pc, #376]	; (8005a7c <Flags+0x600>)
 8005902:	601a      	str	r2, [r3, #0]
			s10Flag = 1;
 8005904:	2201      	movs	r2, #1
 8005906:	4b5e      	ldr	r3, [pc, #376]	; (8005a80 <Flags+0x604>)
 8005908:	701a      	strb	r2, [r3, #0]
		}

		writeToPins(segementsSet, pinsValue, segmentsL, j);
 800590a:	4c5e      	ldr	r4, [pc, #376]	; (8005a84 <Flags+0x608>)
 800590c:	4d5e      	ldr	r5, [pc, #376]	; (8005a88 <Flags+0x60c>)
 800590e:	7823      	ldrb	r3, [r4, #0]
 8005910:	782a      	ldrb	r2, [r5, #0]
 8005912:	495e      	ldr	r1, [pc, #376]	; (8005a8c <Flags+0x610>)
 8005914:	485e      	ldr	r0, [pc, #376]	; (8005a90 <Flags+0x614>)
 8005916:	f7fe fad1 	bl	8003ebc <writeToPins>
		j++;
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	3301      	adds	r3, #1
 800591e:	6023      	str	r3, [r4, #0]

		if (j >= segmentsL)
 8005920:	782a      	ldrb	r2, [r5, #0]
 8005922:	4293      	cmp	r3, r2
 8005924:	db01      	blt.n	800592a <Flags+0x4ae>
			j = 0;
 8005926:	2200      	movs	r2, #0
 8005928:	6022      	str	r2, [r4, #0]
	}

	if (s1Flag == 1)
 800592a:	4b53      	ldr	r3, [pc, #332]	; (8005a78 <Flags+0x5fc>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	bb33      	cbnz	r3, 800597e <Flags+0x502>
			}
			switchHeater();
		}
	}

	if (s10Flag)
 8005930:	4b53      	ldr	r3, [pc, #332]	; (8005a80 <Flags+0x604>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	b133      	cbz	r3, 8005944 <Flags+0x4c8>
	{
		s10Flag	= 0;
 8005936:	2200      	movs	r2, #0
 8005938:	4b51      	ldr	r3, [pc, #324]	; (8005a80 <Flags+0x604>)
 800593a:	701a      	strb	r2, [r3, #0]

		if (LoggerFlag)
 800593c:	4b55      	ldr	r3, [pc, #340]	; (8005a94 <Flags+0x618>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d17c      	bne.n	8005a3e <Flags+0x5c2>
	//HAL_I2C_Master_Receive(&hi2c1, 0x45<<1, &buffer[1], 3, 100);
	//HAL_I2C_Master_Transmit(&hi2c1, 0x45<<1, buffer, 4, 100); //45 rotary slider
	//HAL_I2C_Master_Receive(&hi2c1, 0x45<<1, &buffer[0], 1, 100);


	if (i2cTxFlag)	//Now process the interrupt call-back
 8005944:	4b54      	ldr	r3, [pc, #336]	; (8005a98 <Flags+0x61c>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	b113      	cbz	r3, 8005950 <Flags+0x4d4>
	{
		i2cTxFlag = 0;
 800594a:	2200      	movs	r2, #0
 800594c:	4b52      	ldr	r3, [pc, #328]	; (8005a98 <Flags+0x61c>)
 800594e:	701a      	strb	r2, [r3, #0]
		//float value = buffer[0]<<8 | buffer[1]; //combine 2 8-bit into 1 16-bit

		//HAL_Delay(100);
		//HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
	}
}
 8005950:	b008      	add	sp, #32
 8005952:	ecbd 8b02 	vpop	{d8}
 8005956:	bd70      	pop	{r4, r5, r6, pc}
		case 1: chdef.Channel = ADC_CHANNEL_13; break;  //I				//PB13
 8005958:	230d      	movs	r3, #13
 800595a:	9302      	str	r3, [sp, #8]
 800595c:	e771      	b.n	8005842 <Flags+0x3c6>
		case 2: chdef.Channel = ADC_CHANNEL_8; break; //temp ambient	//PC2
 800595e:	2308      	movs	r3, #8
 8005960:	9302      	str	r3, [sp, #8]
 8005962:	e76e      	b.n	8005842 <Flags+0x3c6>
		case 3: chdef.Channel = ADC_CHANNEL_9; break; //temp water		//PC3
 8005964:	2309      	movs	r3, #9
 8005966:	9302      	str	r3, [sp, #8]
 8005968:	e76b      	b.n	8005842 <Flags+0x3c6>
				flowCounter++;
 800596a:	4a4c      	ldr	r2, [pc, #304]	; (8005a9c <Flags+0x620>)
 800596c:	6813      	ldr	r3, [r2, #0]
 800596e:	3301      	adds	r3, #1
 8005970:	6013      	str	r3, [r2, #0]
				totalFlow = 100*flowCounter;
 8005972:	2264      	movs	r2, #100	; 0x64
 8005974:	fb02 f303 	mul.w	r3, r2, r3
 8005978:	4a49      	ldr	r2, [pc, #292]	; (8005aa0 <Flags+0x624>)
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	e78e      	b.n	800589c <Flags+0x420>
		s1Flag = 0;
 800597e:	2400      	movs	r4, #0
 8005980:	4b3d      	ldr	r3, [pc, #244]	; (8005a78 <Flags+0x5fc>)
 8005982:	701c      	strb	r4, [r3, #0]
		halStatus = HAL_RTC_GetTime(&hrtc, &getTimeLive, RTC_FORMAT_BIN);
 8005984:	4e47      	ldr	r6, [pc, #284]	; (8005aa4 <Flags+0x628>)
 8005986:	4622      	mov	r2, r4
 8005988:	4947      	ldr	r1, [pc, #284]	; (8005aa8 <Flags+0x62c>)
 800598a:	4630      	mov	r0, r6
 800598c:	f7fd fabd 	bl	8002f0a <HAL_RTC_GetTime>
 8005990:	4d46      	ldr	r5, [pc, #280]	; (8005aac <Flags+0x630>)
 8005992:	7028      	strb	r0, [r5, #0]
		halStatus = HAL_RTC_GetDate(&hrtc, &getDateLive, RTC_FORMAT_BIN);
 8005994:	4622      	mov	r2, r4
 8005996:	4946      	ldr	r1, [pc, #280]	; (8005ab0 <Flags+0x634>)
 8005998:	4630      	mov	r0, r6
 800599a:	f7fd fae1 	bl	8002f60 <HAL_RTC_GetDate>
 800599e:	7028      	strb	r0, [r5, #0]
		if (scheduleState == 1)
 80059a0:	4b44      	ldr	r3, [pc, #272]	; (8005ab4 <Flags+0x638>)
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	b21b      	sxth	r3, r3
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d1c2      	bne.n	8005930 <Flags+0x4b4>
			tNow = timeToEpoch(getDateLive, getTimeLive);
 80059aa:	4b3f      	ldr	r3, [pc, #252]	; (8005aa8 <Flags+0x62c>)
 80059ac:	4a40      	ldr	r2, [pc, #256]	; (8005ab0 <Flags+0x634>)
 80059ae:	6814      	ldr	r4, [r2, #0]
 80059b0:	f103 020c 	add.w	r2, r3, #12
 80059b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059b8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80059bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059be:	4620      	mov	r0, r4
 80059c0:	f7fe fafa 	bl	8003fb8 <timeToEpoch>
 80059c4:	4b3c      	ldr	r3, [pc, #240]	; (8005ab8 <Flags+0x63c>)
 80059c6:	6018      	str	r0, [r3, #0]
			i = 0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	4a3c      	ldr	r2, [pc, #240]	; (8005abc <Flags+0x640>)
 80059cc:	6013      	str	r3, [r2, #0]
			heaterFlag = 0;
 80059ce:	4a3c      	ldr	r2, [pc, #240]	; (8005ac0 <Flags+0x644>)
 80059d0:	7013      	strb	r3, [r2, #0]
			while (i < 3)
 80059d2:	e013      	b.n	80059fc <Flags+0x580>
				if (tNow >= offEpoch[iCurrent] && heaterFlag == 1)
 80059d4:	4a3b      	ldr	r2, [pc, #236]	; (8005ac4 <Flags+0x648>)
 80059d6:	7811      	ldrb	r1, [r2, #0]
 80059d8:	4a3b      	ldr	r2, [pc, #236]	; (8005ac8 <Flags+0x64c>)
 80059da:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80059de:	4a36      	ldr	r2, [pc, #216]	; (8005ab8 <Flags+0x63c>)
 80059e0:	6812      	ldr	r2, [r2, #0]
 80059e2:	4291      	cmp	r1, r2
 80059e4:	dc07      	bgt.n	80059f6 <Flags+0x57a>
 80059e6:	4a36      	ldr	r2, [pc, #216]	; (8005ac0 <Flags+0x644>)
 80059e8:	7812      	ldrb	r2, [r2, #0]
 80059ea:	b122      	cbz	r2, 80059f6 <Flags+0x57a>
					heaterState = 0;
 80059ec:	2200      	movs	r2, #0
 80059ee:	4937      	ldr	r1, [pc, #220]	; (8005acc <Flags+0x650>)
 80059f0:	800a      	strh	r2, [r1, #0]
					heaterFlag = 0;
 80059f2:	4933      	ldr	r1, [pc, #204]	; (8005ac0 <Flags+0x644>)
 80059f4:	700a      	strb	r2, [r1, #0]
				i++;
 80059f6:	3301      	adds	r3, #1
 80059f8:	4a30      	ldr	r2, [pc, #192]	; (8005abc <Flags+0x640>)
 80059fa:	6013      	str	r3, [r2, #0]
			while (i < 3)
 80059fc:	4b2f      	ldr	r3, [pc, #188]	; (8005abc <Flags+0x640>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	dc19      	bgt.n	8005a38 <Flags+0x5bc>
				if (tNow >= onEpoch[i] && tNow <= offEpoch[i] && heaterFlag == 0)
 8005a04:	4a32      	ldr	r2, [pc, #200]	; (8005ad0 <Flags+0x654>)
 8005a06:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a0a:	4a2b      	ldr	r2, [pc, #172]	; (8005ab8 <Flags+0x63c>)
 8005a0c:	6812      	ldr	r2, [r2, #0]
 8005a0e:	4291      	cmp	r1, r2
 8005a10:	dce0      	bgt.n	80059d4 <Flags+0x558>
 8005a12:	4a2d      	ldr	r2, [pc, #180]	; (8005ac8 <Flags+0x64c>)
 8005a14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a18:	4a27      	ldr	r2, [pc, #156]	; (8005ab8 <Flags+0x63c>)
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	4291      	cmp	r1, r2
 8005a1e:	dbd9      	blt.n	80059d4 <Flags+0x558>
 8005a20:	4a27      	ldr	r2, [pc, #156]	; (8005ac0 <Flags+0x644>)
 8005a22:	7812      	ldrb	r2, [r2, #0]
 8005a24:	2a00      	cmp	r2, #0
 8005a26:	d1d5      	bne.n	80059d4 <Flags+0x558>
					heaterState = 1;
 8005a28:	2201      	movs	r2, #1
 8005a2a:	4928      	ldr	r1, [pc, #160]	; (8005acc <Flags+0x650>)
 8005a2c:	800a      	strh	r2, [r1, #0]
					iCurrent = i;
 8005a2e:	4925      	ldr	r1, [pc, #148]	; (8005ac4 <Flags+0x648>)
 8005a30:	700b      	strb	r3, [r1, #0]
					heaterFlag = 1;
 8005a32:	4923      	ldr	r1, [pc, #140]	; (8005ac0 <Flags+0x644>)
 8005a34:	700a      	strb	r2, [r1, #0]
 8005a36:	e7cd      	b.n	80059d4 <Flags+0x558>
			switchHeater();
 8005a38:	f7fe f978 	bl	8003d2c <switchHeater>
 8005a3c:	e778      	b.n	8005930 <Flags+0x4b4>
			Logging();
 8005a3e:	f7ff fc49 	bl	80052d4 <Logging>
 8005a42:	e77f      	b.n	8005944 <Flags+0x4c8>
 8005a44:	200002d2 	.word	0x200002d2
 8005a48:	200004c8 	.word	0x200004c8
 8005a4c:	42200000 	.word	0x42200000
 8005a50:	20000478 	.word	0x20000478
 8005a54:	20000338 	.word	0x20000338
 8005a58:	200002e8 	.word	0x200002e8
 8005a5c:	200002d6 	.word	0x200002d6
 8005a60:	200002b8 	.word	0x200002b8
 8005a64:	200007d0 	.word	0x200007d0
 8005a68:	200004c1 	.word	0x200004c1
 8005a6c:	200007f7 	.word	0x200007f7
 8005a70:	2000058c 	.word	0x2000058c
 8005a74:	200007d8 	.word	0x200007d8
 8005a78:	20000800 	.word	0x20000800
 8005a7c:	200004cc 	.word	0x200004cc
 8005a80:	20000658 	.word	0x20000658
 8005a84:	200002a4 	.word	0x200002a4
 8005a88:	20000244 	.word	0x20000244
 8005a8c:	200007d4 	.word	0x200007d4
 8005a90:	200002bc 	.word	0x200002bc
 8005a94:	200002a9 	.word	0x200002a9
 8005a98:	200002d9 	.word	0x200002d9
 8005a9c:	20000808 	.word	0x20000808
 8005aa0:	20000820 	.word	0x20000820
 8005aa4:	200003fc 	.word	0x200003fc
 8005aa8:	200004d8 	.word	0x200004d8
 8005aac:	200004c2 	.word	0x200004c2
 8005ab0:	20000830 	.word	0x20000830
 8005ab4:	200002ea 	.word	0x200002ea
 8005ab8:	200002cc 	.word	0x200002cc
 8005abc:	200002c4 	.word	0x200002c4
 8005ac0:	200007f1 	.word	0x200007f1
 8005ac4:	20000660 	.word	0x20000660
 8005ac8:	200002dc 	.word	0x200002dc
 8005acc:	200002d0 	.word	0x200002d0
 8005ad0:	200002ac 	.word	0x200002ac

08005ad4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b0c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005ad8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005ada:	e003      	b.n	8005ae4 <LoopCopyDataInit>

08005adc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005adc:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005ade:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005ae0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005ae2:	3104      	adds	r1, #4

08005ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005ae4:	480b      	ldr	r0, [pc, #44]	; (8005b14 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005ae6:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005ae8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005aea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005aec:	d3f6      	bcc.n	8005adc <CopyDataInit>
	ldr	r2, =_sbss
 8005aee:	4a0b      	ldr	r2, [pc, #44]	; (8005b1c <LoopForever+0x12>)
	b	LoopFillZerobss
 8005af0:	e002      	b.n	8005af8 <LoopFillZerobss>

08005af2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005af2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005af4:	f842 3b04 	str.w	r3, [r2], #4

08005af8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005af8:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <LoopForever+0x16>)
	cmp	r2, r3
 8005afa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005afc:	d3f9      	bcc.n	8005af2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005afe:	f7fe fe51 	bl	80047a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b02:	f000 f811 	bl	8005b28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005b06:	f7fe fce1 	bl	80044cc <main>

08005b0a <LoopForever>:

LoopForever:
    b LoopForever
 8005b0a:	e7fe      	b.n	8005b0a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005b0c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8005b10:	08007e20 	.word	0x08007e20
	ldr	r0, =_sdata
 8005b14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005b18:	20000228 	.word	0x20000228
	ldr	r2, =_sbss
 8005b1c:	20000228 	.word	0x20000228
	ldr	r3, = _ebss
 8005b20:	2000083c 	.word	0x2000083c

08005b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005b24:	e7fe      	b.n	8005b24 <ADC1_2_IRQHandler>
	...

08005b28 <__libc_init_array>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	4e0d      	ldr	r6, [pc, #52]	; (8005b60 <__libc_init_array+0x38>)
 8005b2c:	4c0d      	ldr	r4, [pc, #52]	; (8005b64 <__libc_init_array+0x3c>)
 8005b2e:	1ba4      	subs	r4, r4, r6
 8005b30:	10a4      	asrs	r4, r4, #2
 8005b32:	2500      	movs	r5, #0
 8005b34:	42a5      	cmp	r5, r4
 8005b36:	d109      	bne.n	8005b4c <__libc_init_array+0x24>
 8005b38:	4e0b      	ldr	r6, [pc, #44]	; (8005b68 <__libc_init_array+0x40>)
 8005b3a:	4c0c      	ldr	r4, [pc, #48]	; (8005b6c <__libc_init_array+0x44>)
 8005b3c:	f001 ff6e 	bl	8007a1c <_init>
 8005b40:	1ba4      	subs	r4, r4, r6
 8005b42:	10a4      	asrs	r4, r4, #2
 8005b44:	2500      	movs	r5, #0
 8005b46:	42a5      	cmp	r5, r4
 8005b48:	d105      	bne.n	8005b56 <__libc_init_array+0x2e>
 8005b4a:	bd70      	pop	{r4, r5, r6, pc}
 8005b4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b50:	4798      	blx	r3
 8005b52:	3501      	adds	r5, #1
 8005b54:	e7ee      	b.n	8005b34 <__libc_init_array+0xc>
 8005b56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b5a:	4798      	blx	r3
 8005b5c:	3501      	adds	r5, #1
 8005b5e:	e7f2      	b.n	8005b46 <__libc_init_array+0x1e>
 8005b60:	08007e18 	.word	0x08007e18
 8005b64:	08007e18 	.word	0x08007e18
 8005b68:	08007e18 	.word	0x08007e18
 8005b6c:	08007e1c 	.word	0x08007e1c

08005b70 <validate_structure>:
 8005b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b72:	6801      	ldr	r1, [r0, #0]
 8005b74:	293b      	cmp	r1, #59	; 0x3b
 8005b76:	4604      	mov	r4, r0
 8005b78:	d911      	bls.n	8005b9e <validate_structure+0x2e>
 8005b7a:	223c      	movs	r2, #60	; 0x3c
 8005b7c:	4668      	mov	r0, sp
 8005b7e:	f000 fca9 	bl	80064d4 <div>
 8005b82:	9a01      	ldr	r2, [sp, #4]
 8005b84:	6863      	ldr	r3, [r4, #4]
 8005b86:	9900      	ldr	r1, [sp, #0]
 8005b88:	2a00      	cmp	r2, #0
 8005b8a:	440b      	add	r3, r1
 8005b8c:	6063      	str	r3, [r4, #4]
 8005b8e:	bfbb      	ittet	lt
 8005b90:	323c      	addlt	r2, #60	; 0x3c
 8005b92:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8005b96:	6022      	strge	r2, [r4, #0]
 8005b98:	6022      	strlt	r2, [r4, #0]
 8005b9a:	bfb8      	it	lt
 8005b9c:	6063      	strlt	r3, [r4, #4]
 8005b9e:	6861      	ldr	r1, [r4, #4]
 8005ba0:	293b      	cmp	r1, #59	; 0x3b
 8005ba2:	d911      	bls.n	8005bc8 <validate_structure+0x58>
 8005ba4:	223c      	movs	r2, #60	; 0x3c
 8005ba6:	4668      	mov	r0, sp
 8005ba8:	f000 fc94 	bl	80064d4 <div>
 8005bac:	9a01      	ldr	r2, [sp, #4]
 8005bae:	68a3      	ldr	r3, [r4, #8]
 8005bb0:	9900      	ldr	r1, [sp, #0]
 8005bb2:	2a00      	cmp	r2, #0
 8005bb4:	440b      	add	r3, r1
 8005bb6:	60a3      	str	r3, [r4, #8]
 8005bb8:	bfbb      	ittet	lt
 8005bba:	323c      	addlt	r2, #60	; 0x3c
 8005bbc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8005bc0:	6062      	strge	r2, [r4, #4]
 8005bc2:	6062      	strlt	r2, [r4, #4]
 8005bc4:	bfb8      	it	lt
 8005bc6:	60a3      	strlt	r3, [r4, #8]
 8005bc8:	68a1      	ldr	r1, [r4, #8]
 8005bca:	2917      	cmp	r1, #23
 8005bcc:	d911      	bls.n	8005bf2 <validate_structure+0x82>
 8005bce:	2218      	movs	r2, #24
 8005bd0:	4668      	mov	r0, sp
 8005bd2:	f000 fc7f 	bl	80064d4 <div>
 8005bd6:	9a01      	ldr	r2, [sp, #4]
 8005bd8:	68e3      	ldr	r3, [r4, #12]
 8005bda:	9900      	ldr	r1, [sp, #0]
 8005bdc:	2a00      	cmp	r2, #0
 8005bde:	440b      	add	r3, r1
 8005be0:	60e3      	str	r3, [r4, #12]
 8005be2:	bfbb      	ittet	lt
 8005be4:	3218      	addlt	r2, #24
 8005be6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8005bea:	60a2      	strge	r2, [r4, #8]
 8005bec:	60a2      	strlt	r2, [r4, #8]
 8005bee:	bfb8      	it	lt
 8005bf0:	60e3      	strlt	r3, [r4, #12]
 8005bf2:	6921      	ldr	r1, [r4, #16]
 8005bf4:	290b      	cmp	r1, #11
 8005bf6:	d911      	bls.n	8005c1c <validate_structure+0xac>
 8005bf8:	220c      	movs	r2, #12
 8005bfa:	4668      	mov	r0, sp
 8005bfc:	f000 fc6a 	bl	80064d4 <div>
 8005c00:	9a01      	ldr	r2, [sp, #4]
 8005c02:	6963      	ldr	r3, [r4, #20]
 8005c04:	9900      	ldr	r1, [sp, #0]
 8005c06:	2a00      	cmp	r2, #0
 8005c08:	440b      	add	r3, r1
 8005c0a:	6163      	str	r3, [r4, #20]
 8005c0c:	bfbb      	ittet	lt
 8005c0e:	320c      	addlt	r2, #12
 8005c10:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8005c14:	6122      	strge	r2, [r4, #16]
 8005c16:	6122      	strlt	r2, [r4, #16]
 8005c18:	bfb8      	it	lt
 8005c1a:	6163      	strlt	r3, [r4, #20]
 8005c1c:	6963      	ldr	r3, [r4, #20]
 8005c1e:	0799      	lsls	r1, r3, #30
 8005c20:	d143      	bne.n	8005caa <validate_structure+0x13a>
 8005c22:	2164      	movs	r1, #100	; 0x64
 8005c24:	fb93 f2f1 	sdiv	r2, r3, r1
 8005c28:	fb01 3212 	mls	r2, r1, r2, r3
 8005c2c:	2a00      	cmp	r2, #0
 8005c2e:	d13e      	bne.n	8005cae <validate_structure+0x13e>
 8005c30:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8005c34:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005c38:	fb93 f2f1 	sdiv	r2, r3, r1
 8005c3c:	fb01 3312 	mls	r3, r1, r2, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	bf14      	ite	ne
 8005c44:	231c      	movne	r3, #28
 8005c46:	231d      	moveq	r3, #29
 8005c48:	68e2      	ldr	r2, [r4, #12]
 8005c4a:	2a00      	cmp	r2, #0
 8005c4c:	dd31      	ble.n	8005cb2 <validate_structure+0x142>
 8005c4e:	4f37      	ldr	r7, [pc, #220]	; (8005d2c <validate_structure+0x1bc>)
 8005c50:	2602      	movs	r6, #2
 8005c52:	f04f 0e00 	mov.w	lr, #0
 8005c56:	2064      	movs	r0, #100	; 0x64
 8005c58:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8005c5c:	6921      	ldr	r1, [r4, #16]
 8005c5e:	68e2      	ldr	r2, [r4, #12]
 8005c60:	2901      	cmp	r1, #1
 8005c62:	d05d      	beq.n	8005d20 <validate_structure+0x1b0>
 8005c64:	f857 c021 	ldr.w	ip, [r7, r1, lsl #2]
 8005c68:	4562      	cmp	r2, ip
 8005c6a:	dd2c      	ble.n	8005cc6 <validate_structure+0x156>
 8005c6c:	3101      	adds	r1, #1
 8005c6e:	eba2 020c 	sub.w	r2, r2, ip
 8005c72:	290c      	cmp	r1, #12
 8005c74:	60e2      	str	r2, [r4, #12]
 8005c76:	6121      	str	r1, [r4, #16]
 8005c78:	d1f0      	bne.n	8005c5c <validate_structure+0xec>
 8005c7a:	6963      	ldr	r3, [r4, #20]
 8005c7c:	f8c4 e010 	str.w	lr, [r4, #16]
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	0791      	lsls	r1, r2, #30
 8005c84:	6162      	str	r2, [r4, #20]
 8005c86:	d147      	bne.n	8005d18 <validate_structure+0x1a8>
 8005c88:	fb92 f1f0 	sdiv	r1, r2, r0
 8005c8c:	fb00 2211 	mls	r2, r0, r1, r2
 8005c90:	2a00      	cmp	r2, #0
 8005c92:	d143      	bne.n	8005d1c <validate_structure+0x1ac>
 8005c94:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8005c98:	fb93 f2f5 	sdiv	r2, r3, r5
 8005c9c:	fb05 3312 	mls	r3, r5, r2, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	bf14      	ite	ne
 8005ca4:	231c      	movne	r3, #28
 8005ca6:	231d      	moveq	r3, #29
 8005ca8:	e7d8      	b.n	8005c5c <validate_structure+0xec>
 8005caa:	231c      	movs	r3, #28
 8005cac:	e7cc      	b.n	8005c48 <validate_structure+0xd8>
 8005cae:	231d      	movs	r3, #29
 8005cb0:	e7ca      	b.n	8005c48 <validate_structure+0xd8>
 8005cb2:	4f1e      	ldr	r7, [pc, #120]	; (8005d2c <validate_structure+0x1bc>)
 8005cb4:	260b      	movs	r6, #11
 8005cb6:	2064      	movs	r0, #100	; 0x64
 8005cb8:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8005cbc:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8005cc0:	f1be 0f00 	cmp.w	lr, #0
 8005cc4:	dd01      	ble.n	8005cca <validate_structure+0x15a>
 8005cc6:	b003      	add	sp, #12
 8005cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cca:	6921      	ldr	r1, [r4, #16]
 8005ccc:	3901      	subs	r1, #1
 8005cce:	6121      	str	r1, [r4, #16]
 8005cd0:	3101      	adds	r1, #1
 8005cd2:	d114      	bne.n	8005cfe <validate_structure+0x18e>
 8005cd4:	6963      	ldr	r3, [r4, #20]
 8005cd6:	6126      	str	r6, [r4, #16]
 8005cd8:	1e59      	subs	r1, r3, #1
 8005cda:	078a      	lsls	r2, r1, #30
 8005cdc:	6161      	str	r1, [r4, #20]
 8005cde:	d117      	bne.n	8005d10 <validate_structure+0x1a0>
 8005ce0:	fb91 f2f0 	sdiv	r2, r1, r0
 8005ce4:	fb00 1112 	mls	r1, r0, r2, r1
 8005ce8:	b9a1      	cbnz	r1, 8005d14 <validate_structure+0x1a4>
 8005cea:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8005cee:	fb93 f2f5 	sdiv	r2, r3, r5
 8005cf2:	fb05 3312 	mls	r3, r5, r2, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bf14      	ite	ne
 8005cfa:	231c      	movne	r3, #28
 8005cfc:	231d      	moveq	r3, #29
 8005cfe:	6922      	ldr	r2, [r4, #16]
 8005d00:	2a01      	cmp	r2, #1
 8005d02:	bf14      	ite	ne
 8005d04:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8005d08:	461a      	moveq	r2, r3
 8005d0a:	4472      	add	r2, lr
 8005d0c:	60e2      	str	r2, [r4, #12]
 8005d0e:	e7d5      	b.n	8005cbc <validate_structure+0x14c>
 8005d10:	231c      	movs	r3, #28
 8005d12:	e7f4      	b.n	8005cfe <validate_structure+0x18e>
 8005d14:	231d      	movs	r3, #29
 8005d16:	e7f2      	b.n	8005cfe <validate_structure+0x18e>
 8005d18:	231c      	movs	r3, #28
 8005d1a:	e79f      	b.n	8005c5c <validate_structure+0xec>
 8005d1c:	231d      	movs	r3, #29
 8005d1e:	e79d      	b.n	8005c5c <validate_structure+0xec>
 8005d20:	4293      	cmp	r3, r2
 8005d22:	dad0      	bge.n	8005cc6 <validate_structure+0x156>
 8005d24:	1ad2      	subs	r2, r2, r3
 8005d26:	60e2      	str	r2, [r4, #12]
 8005d28:	6126      	str	r6, [r4, #16]
 8005d2a:	e797      	b.n	8005c5c <validate_structure+0xec>
 8005d2c:	08007b58 	.word	0x08007b58

08005d30 <mktime>:
 8005d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d34:	4681      	mov	r9, r0
 8005d36:	f000 fc29 	bl	800658c <__gettzinfo>
 8005d3a:	4680      	mov	r8, r0
 8005d3c:	4648      	mov	r0, r9
 8005d3e:	f7ff ff17 	bl	8005b70 <validate_structure>
 8005d42:	e899 0081 	ldmia.w	r9, {r0, r7}
 8005d46:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005d4a:	4ab4      	ldr	r2, [pc, #720]	; (800601c <mktime+0x2ec>)
 8005d4c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8005d50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d54:	253c      	movs	r5, #60	; 0x3c
 8005d56:	fb05 0707 	mla	r7, r5, r7, r0
 8005d5a:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8005d5e:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 8005d62:	3c01      	subs	r4, #1
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	fb05 7000 	mla	r0, r5, r0, r7
 8005d6a:	4414      	add	r4, r2
 8005d6c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005d70:	dd11      	ble.n	8005d96 <mktime+0x66>
 8005d72:	0799      	lsls	r1, r3, #30
 8005d74:	d10f      	bne.n	8005d96 <mktime+0x66>
 8005d76:	2164      	movs	r1, #100	; 0x64
 8005d78:	fb93 f2f1 	sdiv	r2, r3, r1
 8005d7c:	fb01 3212 	mls	r2, r1, r2, r3
 8005d80:	b942      	cbnz	r2, 8005d94 <mktime+0x64>
 8005d82:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8005d86:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005d8a:	fb95 f2f1 	sdiv	r2, r5, r1
 8005d8e:	fb01 5212 	mls	r2, r1, r2, r5
 8005d92:	b902      	cbnz	r2, 8005d96 <mktime+0x66>
 8005d94:	3401      	adds	r4, #1
 8005d96:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 8005d9a:	3210      	adds	r2, #16
 8005d9c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8005da0:	428a      	cmp	r2, r1
 8005da2:	f8c9 401c 	str.w	r4, [r9, #28]
 8005da6:	f200 812d 	bhi.w	8006004 <mktime+0x2d4>
 8005daa:	2b46      	cmp	r3, #70	; 0x46
 8005dac:	dd70      	ble.n	8005e90 <mktime+0x160>
 8005dae:	2546      	movs	r5, #70	; 0x46
 8005db0:	f240 176d 	movw	r7, #365	; 0x16d
 8005db4:	2164      	movs	r1, #100	; 0x64
 8005db6:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8005dba:	07aa      	lsls	r2, r5, #30
 8005dbc:	d162      	bne.n	8005e84 <mktime+0x154>
 8005dbe:	fb95 f2f1 	sdiv	r2, r5, r1
 8005dc2:	fb01 5212 	mls	r2, r1, r2, r5
 8005dc6:	2a00      	cmp	r2, #0
 8005dc8:	d15f      	bne.n	8005e8a <mktime+0x15a>
 8005dca:	f205 7e6c 	addw	lr, r5, #1900	; 0x76c
 8005dce:	fb9e f2f6 	sdiv	r2, lr, r6
 8005dd2:	fb06 e212 	mls	r2, r6, r2, lr
 8005dd6:	2a00      	cmp	r2, #0
 8005dd8:	bf14      	ite	ne
 8005dda:	463a      	movne	r2, r7
 8005ddc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8005de0:	3501      	adds	r5, #1
 8005de2:	42ab      	cmp	r3, r5
 8005de4:	4414      	add	r4, r2
 8005de6:	d1e8      	bne.n	8005dba <mktime+0x8a>
 8005de8:	4f8d      	ldr	r7, [pc, #564]	; (8006020 <mktime+0x2f0>)
 8005dea:	fb07 0704 	mla	r7, r7, r4, r0
 8005dee:	f000 f9e7 	bl	80061c0 <__tz_lock>
 8005df2:	f000 f9e7 	bl	80061c4 <_tzset_unlocked>
 8005df6:	4b8b      	ldr	r3, [pc, #556]	; (8006024 <mktime+0x2f4>)
 8005df8:	681e      	ldr	r6, [r3, #0]
 8005dfa:	2e00      	cmp	r6, #0
 8005dfc:	f000 810a 	beq.w	8006014 <mktime+0x2e4>
 8005e00:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8005e04:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	bfa8      	it	ge
 8005e0c:	2301      	movge	r3, #1
 8005e0e:	469a      	mov	sl, r3
 8005e10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005e14:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8005e18:	4298      	cmp	r0, r3
 8005e1a:	d17c      	bne.n	8005f16 <mktime+0x1e6>
 8005e1c:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 8005e20:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8005e24:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 8005e28:	f8d8 101c 	ldr.w	r1, [r8, #28]
 8005e2c:	1ad6      	subs	r6, r2, r3
 8005e2e:	42b7      	cmp	r7, r6
 8005e30:	eba1 0100 	sub.w	r1, r1, r0
 8005e34:	da76      	bge.n	8005f24 <mktime+0x1f4>
 8005e36:	f8d8 2000 	ldr.w	r2, [r8]
 8005e3a:	2a00      	cmp	r2, #0
 8005e3c:	d076      	beq.n	8005f2c <mktime+0x1fc>
 8005e3e:	428f      	cmp	r7, r1
 8005e40:	f2c0 80e3 	blt.w	800600a <mktime+0x2da>
 8005e44:	42b7      	cmp	r7, r6
 8005e46:	bfac      	ite	ge
 8005e48:	2600      	movge	r6, #0
 8005e4a:	2601      	movlt	r6, #1
 8005e4c:	f1ba 0f00 	cmp.w	sl, #0
 8005e50:	da72      	bge.n	8005f38 <mktime+0x208>
 8005e52:	2e01      	cmp	r6, #1
 8005e54:	f040 80de 	bne.w	8006014 <mktime+0x2e4>
 8005e58:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 8005e5c:	2601      	movs	r6, #1
 8005e5e:	443d      	add	r5, r7
 8005e60:	f000 f9af 	bl	80061c2 <__tz_unlock>
 8005e64:	3404      	adds	r4, #4
 8005e66:	2307      	movs	r3, #7
 8005e68:	fb94 f3f3 	sdiv	r3, r4, r3
 8005e6c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005e70:	1ae4      	subs	r4, r4, r3
 8005e72:	bf48      	it	mi
 8005e74:	3407      	addmi	r4, #7
 8005e76:	f8c9 6020 	str.w	r6, [r9, #32]
 8005e7a:	f8c9 4018 	str.w	r4, [r9, #24]
 8005e7e:	4628      	mov	r0, r5
 8005e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e84:	f240 126d 	movw	r2, #365	; 0x16d
 8005e88:	e7aa      	b.n	8005de0 <mktime+0xb0>
 8005e8a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8005e8e:	e7a7      	b.n	8005de0 <mktime+0xb0>
 8005e90:	d01e      	beq.n	8005ed0 <mktime+0x1a0>
 8005e92:	2245      	movs	r2, #69	; 0x45
 8005e94:	f240 176d 	movw	r7, #365	; 0x16d
 8005e98:	2564      	movs	r5, #100	; 0x64
 8005e9a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	dc18      	bgt.n	8005ed4 <mktime+0x1a4>
 8005ea2:	079d      	lsls	r5, r3, #30
 8005ea4:	d131      	bne.n	8005f0a <mktime+0x1da>
 8005ea6:	2164      	movs	r1, #100	; 0x64
 8005ea8:	fb93 f2f1 	sdiv	r2, r3, r1
 8005eac:	fb01 3212 	mls	r2, r1, r2, r3
 8005eb0:	bb72      	cbnz	r2, 8005f10 <mktime+0x1e0>
 8005eb2:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8005eb6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005eba:	fb95 f2f1 	sdiv	r2, r5, r1
 8005ebe:	fb01 5212 	mls	r2, r1, r2, r5
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	f240 126d 	movw	r2, #365	; 0x16d
 8005ec8:	bf08      	it	eq
 8005eca:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8005ece:	1aa4      	subs	r4, r4, r2
 8005ed0:	461d      	mov	r5, r3
 8005ed2:	e789      	b.n	8005de8 <mktime+0xb8>
 8005ed4:	0791      	lsls	r1, r2, #30
 8005ed6:	d112      	bne.n	8005efe <mktime+0x1ce>
 8005ed8:	fb92 f1f5 	sdiv	r1, r2, r5
 8005edc:	fb05 2111 	mls	r1, r5, r1, r2
 8005ee0:	b981      	cbnz	r1, 8005f04 <mktime+0x1d4>
 8005ee2:	f202 7e6c 	addw	lr, r2, #1900	; 0x76c
 8005ee6:	fb9e f1f6 	sdiv	r1, lr, r6
 8005eea:	fb06 e111 	mls	r1, r6, r1, lr
 8005eee:	2900      	cmp	r1, #0
 8005ef0:	bf14      	ite	ne
 8005ef2:	4639      	movne	r1, r7
 8005ef4:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
 8005ef8:	1a64      	subs	r4, r4, r1
 8005efa:	3a01      	subs	r2, #1
 8005efc:	e7cf      	b.n	8005e9e <mktime+0x16e>
 8005efe:	f240 116d 	movw	r1, #365	; 0x16d
 8005f02:	e7f9      	b.n	8005ef8 <mktime+0x1c8>
 8005f04:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8005f08:	e7f6      	b.n	8005ef8 <mktime+0x1c8>
 8005f0a:	f240 126d 	movw	r2, #365	; 0x16d
 8005f0e:	e7de      	b.n	8005ece <mktime+0x19e>
 8005f10:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8005f14:	e7db      	b.n	8005ece <mktime+0x19e>
 8005f16:	f000 f8ab 	bl	8006070 <__tzcalc_limits>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	f47f af7e 	bne.w	8005e1c <mktime+0xec>
 8005f20:	4656      	mov	r6, sl
 8005f22:	e796      	b.n	8005e52 <mktime+0x122>
 8005f24:	1a12      	subs	r2, r2, r0
 8005f26:	4297      	cmp	r7, r2
 8005f28:	dbfa      	blt.n	8005f20 <mktime+0x1f0>
 8005f2a:	e784      	b.n	8005e36 <mktime+0x106>
 8005f2c:	428f      	cmp	r7, r1
 8005f2e:	db89      	blt.n	8005e44 <mktime+0x114>
 8005f30:	f1ba 0f00 	cmp.w	sl, #0
 8005f34:	db90      	blt.n	8005e58 <mktime+0x128>
 8005f36:	2601      	movs	r6, #1
 8005f38:	ea8a 0a06 	eor.w	sl, sl, r6
 8005f3c:	f1ba 0f01 	cmp.w	sl, #1
 8005f40:	d187      	bne.n	8005e52 <mktime+0x122>
 8005f42:	1a1b      	subs	r3, r3, r0
 8005f44:	b906      	cbnz	r6, 8005f48 <mktime+0x218>
 8005f46:	425b      	negs	r3, r3
 8005f48:	f8d9 2000 	ldr.w	r2, [r9]
 8005f4c:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8005f50:	441a      	add	r2, r3
 8005f52:	f8c9 2000 	str.w	r2, [r9]
 8005f56:	4648      	mov	r0, r9
 8005f58:	441f      	add	r7, r3
 8005f5a:	f7ff fe09 	bl	8005b70 <validate_structure>
 8005f5e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8005f62:	ebb3 030a 	subs.w	r3, r3, sl
 8005f66:	f43f af74 	beq.w	8005e52 <mktime+0x122>
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	dc21      	bgt.n	8005fb2 <mktime+0x282>
 8005f6e:	1c98      	adds	r0, r3, #2
 8005f70:	bfd8      	it	le
 8005f72:	2301      	movle	r3, #1
 8005f74:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8005f78:	441c      	add	r4, r3
 8005f7a:	189b      	adds	r3, r3, r2
 8005f7c:	d522      	bpl.n	8005fc4 <mktime+0x294>
 8005f7e:	1e6a      	subs	r2, r5, #1
 8005f80:	0791      	lsls	r1, r2, #30
 8005f82:	d119      	bne.n	8005fb8 <mktime+0x288>
 8005f84:	2164      	movs	r1, #100	; 0x64
 8005f86:	fb92 f3f1 	sdiv	r3, r2, r1
 8005f8a:	fb01 2313 	mls	r3, r1, r3, r2
 8005f8e:	b9b3      	cbnz	r3, 8005fbe <mktime+0x28e>
 8005f90:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 8005f94:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005f98:	fb95 f3f2 	sdiv	r3, r5, r2
 8005f9c:	fb02 5513 	mls	r5, r2, r3, r5
 8005fa0:	2d00      	cmp	r5, #0
 8005fa2:	f240 136d 	movw	r3, #365	; 0x16d
 8005fa6:	bf18      	it	ne
 8005fa8:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8005fac:	f8c9 301c 	str.w	r3, [r9, #28]
 8005fb0:	e74f      	b.n	8005e52 <mktime+0x122>
 8005fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb6:	e7dd      	b.n	8005f74 <mktime+0x244>
 8005fb8:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8005fbc:	e7f6      	b.n	8005fac <mktime+0x27c>
 8005fbe:	f240 136d 	movw	r3, #365	; 0x16d
 8005fc2:	e7f3      	b.n	8005fac <mktime+0x27c>
 8005fc4:	07aa      	lsls	r2, r5, #30
 8005fc6:	d117      	bne.n	8005ff8 <mktime+0x2c8>
 8005fc8:	2164      	movs	r1, #100	; 0x64
 8005fca:	fb95 f2f1 	sdiv	r2, r5, r1
 8005fce:	fb01 5212 	mls	r2, r1, r2, r5
 8005fd2:	b9a2      	cbnz	r2, 8005ffe <mktime+0x2ce>
 8005fd4:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8005fd8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005fdc:	fb95 f2f1 	sdiv	r2, r5, r1
 8005fe0:	fb01 5512 	mls	r5, r1, r2, r5
 8005fe4:	2d00      	cmp	r5, #0
 8005fe6:	f240 126d 	movw	r2, #365	; 0x16d
 8005fea:	bf08      	it	eq
 8005fec:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	bfd8      	it	le
 8005ff4:	1a9b      	suble	r3, r3, r2
 8005ff6:	e7d9      	b.n	8005fac <mktime+0x27c>
 8005ff8:	f240 126d 	movw	r2, #365	; 0x16d
 8005ffc:	e7f8      	b.n	8005ff0 <mktime+0x2c0>
 8005ffe:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8006002:	e7f5      	b.n	8005ff0 <mktime+0x2c0>
 8006004:	f04f 35ff 	mov.w	r5, #4294967295
 8006008:	e739      	b.n	8005e7e <mktime+0x14e>
 800600a:	f1ba 0f00 	cmp.w	sl, #0
 800600e:	f04f 0600 	mov.w	r6, #0
 8006012:	da91      	bge.n	8005f38 <mktime+0x208>
 8006014:	f8d8 5020 	ldr.w	r5, [r8, #32]
 8006018:	443d      	add	r5, r7
 800601a:	e721      	b.n	8005e60 <mktime+0x130>
 800601c:	08007b88 	.word	0x08007b88
 8006020:	00015180 	.word	0x00015180
 8006024:	20000260 	.word	0x20000260

08006028 <siprintf>:
 8006028:	b40e      	push	{r1, r2, r3}
 800602a:	b500      	push	{lr}
 800602c:	b09c      	sub	sp, #112	; 0x70
 800602e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006032:	ab1d      	add	r3, sp, #116	; 0x74
 8006034:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006038:	9002      	str	r0, [sp, #8]
 800603a:	9006      	str	r0, [sp, #24]
 800603c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006040:	480a      	ldr	r0, [pc, #40]	; (800606c <siprintf+0x44>)
 8006042:	9104      	str	r1, [sp, #16]
 8006044:	9107      	str	r1, [sp, #28]
 8006046:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800604a:	f853 2b04 	ldr.w	r2, [r3], #4
 800604e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006052:	6800      	ldr	r0, [r0, #0]
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	a902      	add	r1, sp, #8
 8006058:	f000 fbac 	bl	80067b4 <_svfiprintf_r>
 800605c:	9b02      	ldr	r3, [sp, #8]
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	b01c      	add	sp, #112	; 0x70
 8006064:	f85d eb04 	ldr.w	lr, [sp], #4
 8006068:	b003      	add	sp, #12
 800606a:	4770      	bx	lr
 800606c:	20000050 	.word	0x20000050

08006070 <__tzcalc_limits>:
 8006070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006074:	4604      	mov	r4, r0
 8006076:	f000 fa89 	bl	800658c <__gettzinfo>
 800607a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800607e:	429c      	cmp	r4, r3
 8006080:	f340 8098 	ble.w	80061b4 <__tzcalc_limits+0x144>
 8006084:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8006088:	18e3      	adds	r3, r4, r3
 800608a:	109b      	asrs	r3, r3, #2
 800608c:	f240 126d 	movw	r2, #365	; 0x16d
 8006090:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 8006094:	fb02 3505 	mla	r5, r2, r5, r3
 8006098:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800609c:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 80060a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80060a4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80060a8:	441d      	add	r5, r3
 80060aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80060ae:	18a2      	adds	r2, r4, r2
 80060b0:	fb94 f7f3 	sdiv	r7, r4, r3
 80060b4:	fb92 f2f3 	sdiv	r2, r2, r3
 80060b8:	fb03 4717 	mls	r7, r3, r7, r4
 80060bc:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80060c0:	4415      	add	r5, r2
 80060c2:	fab7 fe87 	clz	lr, r7
 80060c6:	2264      	movs	r2, #100	; 0x64
 80060c8:	9301      	str	r3, [sp, #4]
 80060ca:	f004 0303 	and.w	r3, r4, #3
 80060ce:	fb94 f6f2 	sdiv	r6, r4, r2
 80060d2:	6044      	str	r4, [r0, #4]
 80060d4:	fb02 4616 	mls	r6, r2, r6, r4
 80060d8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80060dc:	4601      	mov	r1, r0
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 80060e4:	7a0b      	ldrb	r3, [r1, #8]
 80060e6:	2b4a      	cmp	r3, #74	; 0x4a
 80060e8:	d123      	bne.n	8006132 <__tzcalc_limits+0xc2>
 80060ea:	694c      	ldr	r4, [r1, #20]
 80060ec:	9a00      	ldr	r2, [sp, #0]
 80060ee:	192b      	adds	r3, r5, r4
 80060f0:	b902      	cbnz	r2, 80060f4 <__tzcalc_limits+0x84>
 80060f2:	b906      	cbnz	r6, 80060f6 <__tzcalc_limits+0x86>
 80060f4:	b9df      	cbnz	r7, 800612e <__tzcalc_limits+0xbe>
 80060f6:	2c3b      	cmp	r4, #59	; 0x3b
 80060f8:	bfd4      	ite	le
 80060fa:	2400      	movle	r4, #0
 80060fc:	2401      	movgt	r4, #1
 80060fe:	441c      	add	r4, r3
 8006100:	3c01      	subs	r4, #1
 8006102:	4b2d      	ldr	r3, [pc, #180]	; (80061b8 <__tzcalc_limits+0x148>)
 8006104:	698a      	ldr	r2, [r1, #24]
 8006106:	fb03 2404 	mla	r4, r3, r4, r2
 800610a:	6a0b      	ldr	r3, [r1, #32]
 800610c:	441c      	add	r4, r3
 800610e:	f841 4f1c 	str.w	r4, [r1, #28]!
 8006112:	9b01      	ldr	r3, [sp, #4]
 8006114:	428b      	cmp	r3, r1
 8006116:	d1e5      	bne.n	80060e4 <__tzcalc_limits+0x74>
 8006118:	69c3      	ldr	r3, [r0, #28]
 800611a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800611c:	4293      	cmp	r3, r2
 800611e:	bfac      	ite	ge
 8006120:	2300      	movge	r3, #0
 8006122:	2301      	movlt	r3, #1
 8006124:	6003      	str	r3, [r0, #0]
 8006126:	2001      	movs	r0, #1
 8006128:	b003      	add	sp, #12
 800612a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612e:	2400      	movs	r4, #0
 8006130:	e7e5      	b.n	80060fe <__tzcalc_limits+0x8e>
 8006132:	2b44      	cmp	r3, #68	; 0x44
 8006134:	d102      	bne.n	800613c <__tzcalc_limits+0xcc>
 8006136:	694b      	ldr	r3, [r1, #20]
 8006138:	18ec      	adds	r4, r5, r3
 800613a:	e7e2      	b.n	8006102 <__tzcalc_limits+0x92>
 800613c:	9b00      	ldr	r3, [sp, #0]
 800613e:	bb7b      	cbnz	r3, 80061a0 <__tzcalc_limits+0x130>
 8006140:	2e00      	cmp	r6, #0
 8006142:	bf0c      	ite	eq
 8006144:	46f0      	moveq	r8, lr
 8006146:	f04f 0801 	movne.w	r8, #1
 800614a:	4b1c      	ldr	r3, [pc, #112]	; (80061bc <__tzcalc_limits+0x14c>)
 800614c:	68cc      	ldr	r4, [r1, #12]
 800614e:	2230      	movs	r2, #48	; 0x30
 8006150:	fb02 3808 	mla	r8, r2, r8, r3
 8006154:	f1a8 0a04 	sub.w	sl, r8, #4
 8006158:	462b      	mov	r3, r5
 800615a:	f04f 0901 	mov.w	r9, #1
 800615e:	45a1      	cmp	r9, r4
 8006160:	db20      	blt.n	80061a4 <__tzcalc_limits+0x134>
 8006162:	2c01      	cmp	r4, #1
 8006164:	bfb8      	it	lt
 8006166:	2401      	movlt	r4, #1
 8006168:	46a1      	mov	r9, r4
 800616a:	f103 0b04 	add.w	fp, r3, #4
 800616e:	2207      	movs	r2, #7
 8006170:	694c      	ldr	r4, [r1, #20]
 8006172:	fb9b faf2 	sdiv	sl, fp, r2
 8006176:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800617a:	ebab 0a0a 	sub.w	sl, fp, sl
 800617e:	ebb4 0a0a 	subs.w	sl, r4, sl
 8006182:	690c      	ldr	r4, [r1, #16]
 8006184:	44e1      	add	r9, ip
 8006186:	f104 34ff 	add.w	r4, r4, #4294967295
 800618a:	bf48      	it	mi
 800618c:	4492      	addmi	sl, r2
 800618e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8006192:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 8006196:	4454      	add	r4, sl
 8006198:	4544      	cmp	r4, r8
 800619a:	da09      	bge.n	80061b0 <__tzcalc_limits+0x140>
 800619c:	441c      	add	r4, r3
 800619e:	e7b0      	b.n	8006102 <__tzcalc_limits+0x92>
 80061a0:	46f0      	mov	r8, lr
 80061a2:	e7d2      	b.n	800614a <__tzcalc_limits+0xda>
 80061a4:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80061a8:	f109 0901 	add.w	r9, r9, #1
 80061ac:	445b      	add	r3, fp
 80061ae:	e7d6      	b.n	800615e <__tzcalc_limits+0xee>
 80061b0:	3c07      	subs	r4, #7
 80061b2:	e7f1      	b.n	8006198 <__tzcalc_limits+0x128>
 80061b4:	2000      	movs	r0, #0
 80061b6:	e7b7      	b.n	8006128 <__tzcalc_limits+0xb8>
 80061b8:	00015180 	.word	0x00015180
 80061bc:	08007bf4 	.word	0x08007bf4

080061c0 <__tz_lock>:
 80061c0:	4770      	bx	lr

080061c2 <__tz_unlock>:
 80061c2:	4770      	bx	lr

080061c4 <_tzset_unlocked>:
 80061c4:	4b01      	ldr	r3, [pc, #4]	; (80061cc <_tzset_unlocked+0x8>)
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	f000 b802 	b.w	80061d0 <_tzset_unlocked_r>
 80061cc:	20000050 	.word	0x20000050

080061d0 <_tzset_unlocked_r>:
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	b08d      	sub	sp, #52	; 0x34
 80061d6:	4607      	mov	r7, r0
 80061d8:	f000 f9d8 	bl	800658c <__gettzinfo>
 80061dc:	49b1      	ldr	r1, [pc, #708]	; (80064a4 <_tzset_unlocked_r+0x2d4>)
 80061de:	4eb2      	ldr	r6, [pc, #712]	; (80064a8 <_tzset_unlocked_r+0x2d8>)
 80061e0:	4605      	mov	r5, r0
 80061e2:	4638      	mov	r0, r7
 80061e4:	f000 f9ca 	bl	800657c <_getenv_r>
 80061e8:	4604      	mov	r4, r0
 80061ea:	b970      	cbnz	r0, 800620a <_tzset_unlocked_r+0x3a>
 80061ec:	4baf      	ldr	r3, [pc, #700]	; (80064ac <_tzset_unlocked_r+0x2dc>)
 80061ee:	4ab0      	ldr	r2, [pc, #704]	; (80064b0 <_tzset_unlocked_r+0x2e0>)
 80061f0:	6018      	str	r0, [r3, #0]
 80061f2:	4bb0      	ldr	r3, [pc, #704]	; (80064b4 <_tzset_unlocked_r+0x2e4>)
 80061f4:	6018      	str	r0, [r3, #0]
 80061f6:	4bb0      	ldr	r3, [pc, #704]	; (80064b8 <_tzset_unlocked_r+0x2e8>)
 80061f8:	6830      	ldr	r0, [r6, #0]
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	f000 f9c9 	bl	8006594 <free>
 8006202:	6034      	str	r4, [r6, #0]
 8006204:	b00d      	add	sp, #52	; 0x34
 8006206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620a:	6831      	ldr	r1, [r6, #0]
 800620c:	2900      	cmp	r1, #0
 800620e:	d160      	bne.n	80062d2 <_tzset_unlocked_r+0x102>
 8006210:	6830      	ldr	r0, [r6, #0]
 8006212:	f000 f9bf 	bl	8006594 <free>
 8006216:	4620      	mov	r0, r4
 8006218:	f7f9 ffda 	bl	80001d0 <strlen>
 800621c:	1c41      	adds	r1, r0, #1
 800621e:	4638      	mov	r0, r7
 8006220:	f000 fa0e 	bl	8006640 <_malloc_r>
 8006224:	6030      	str	r0, [r6, #0]
 8006226:	2800      	cmp	r0, #0
 8006228:	d158      	bne.n	80062dc <_tzset_unlocked_r+0x10c>
 800622a:	7823      	ldrb	r3, [r4, #0]
 800622c:	4aa3      	ldr	r2, [pc, #652]	; (80064bc <_tzset_unlocked_r+0x2ec>)
 800622e:	49a4      	ldr	r1, [pc, #656]	; (80064c0 <_tzset_unlocked_r+0x2f0>)
 8006230:	2b3a      	cmp	r3, #58	; 0x3a
 8006232:	bf08      	it	eq
 8006234:	3401      	addeq	r4, #1
 8006236:	ae0a      	add	r6, sp, #40	; 0x28
 8006238:	4633      	mov	r3, r6
 800623a:	4620      	mov	r0, r4
 800623c:	f000 fd54 	bl	8006ce8 <siscanf>
 8006240:	2800      	cmp	r0, #0
 8006242:	dddf      	ble.n	8006204 <_tzset_unlocked_r+0x34>
 8006244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006246:	18e7      	adds	r7, r4, r3
 8006248:	5ce3      	ldrb	r3, [r4, r3]
 800624a:	2b2d      	cmp	r3, #45	; 0x2d
 800624c:	d14a      	bne.n	80062e4 <_tzset_unlocked_r+0x114>
 800624e:	3701      	adds	r7, #1
 8006250:	f04f 34ff 	mov.w	r4, #4294967295
 8006254:	f10d 0a20 	add.w	sl, sp, #32
 8006258:	f10d 0b1e 	add.w	fp, sp, #30
 800625c:	f04f 0800 	mov.w	r8, #0
 8006260:	9603      	str	r6, [sp, #12]
 8006262:	f8cd a008 	str.w	sl, [sp, #8]
 8006266:	9601      	str	r6, [sp, #4]
 8006268:	f8cd b000 	str.w	fp, [sp]
 800626c:	4633      	mov	r3, r6
 800626e:	aa07      	add	r2, sp, #28
 8006270:	4994      	ldr	r1, [pc, #592]	; (80064c4 <_tzset_unlocked_r+0x2f4>)
 8006272:	f8ad 801e 	strh.w	r8, [sp, #30]
 8006276:	4638      	mov	r0, r7
 8006278:	f8ad 8020 	strh.w	r8, [sp, #32]
 800627c:	f000 fd34 	bl	8006ce8 <siscanf>
 8006280:	4540      	cmp	r0, r8
 8006282:	ddbf      	ble.n	8006204 <_tzset_unlocked_r+0x34>
 8006284:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006288:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800628c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80064d0 <_tzset_unlocked_r+0x300>
 8006290:	213c      	movs	r1, #60	; 0x3c
 8006292:	fb01 2203 	mla	r2, r1, r3, r2
 8006296:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800629a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800629e:	fb01 2303 	mla	r3, r1, r3, r2
 80062a2:	435c      	muls	r4, r3
 80062a4:	622c      	str	r4, [r5, #32]
 80062a6:	4c84      	ldr	r4, [pc, #528]	; (80064b8 <_tzset_unlocked_r+0x2e8>)
 80062a8:	4b84      	ldr	r3, [pc, #528]	; (80064bc <_tzset_unlocked_r+0x2ec>)
 80062aa:	6023      	str	r3, [r4, #0]
 80062ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ae:	4984      	ldr	r1, [pc, #528]	; (80064c0 <_tzset_unlocked_r+0x2f0>)
 80062b0:	441f      	add	r7, r3
 80062b2:	464a      	mov	r2, r9
 80062b4:	4633      	mov	r3, r6
 80062b6:	4638      	mov	r0, r7
 80062b8:	f000 fd16 	bl	8006ce8 <siscanf>
 80062bc:	4540      	cmp	r0, r8
 80062be:	dc16      	bgt.n	80062ee <_tzset_unlocked_r+0x11e>
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	6063      	str	r3, [r4, #4]
 80062c4:	4b79      	ldr	r3, [pc, #484]	; (80064ac <_tzset_unlocked_r+0x2dc>)
 80062c6:	6a2a      	ldr	r2, [r5, #32]
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	4b7a      	ldr	r3, [pc, #488]	; (80064b4 <_tzset_unlocked_r+0x2e4>)
 80062cc:	f8c3 8000 	str.w	r8, [r3]
 80062d0:	e798      	b.n	8006204 <_tzset_unlocked_r+0x34>
 80062d2:	f7f9 ff85 	bl	80001e0 <strcmp>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d094      	beq.n	8006204 <_tzset_unlocked_r+0x34>
 80062da:	e799      	b.n	8006210 <_tzset_unlocked_r+0x40>
 80062dc:	4621      	mov	r1, r4
 80062de:	f000 fd2f 	bl	8006d40 <strcpy>
 80062e2:	e7a2      	b.n	800622a <_tzset_unlocked_r+0x5a>
 80062e4:	2b2b      	cmp	r3, #43	; 0x2b
 80062e6:	bf08      	it	eq
 80062e8:	3701      	addeq	r7, #1
 80062ea:	2401      	movs	r4, #1
 80062ec:	e7b2      	b.n	8006254 <_tzset_unlocked_r+0x84>
 80062ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f0:	f8c4 9004 	str.w	r9, [r4, #4]
 80062f4:	18fc      	adds	r4, r7, r3
 80062f6:	5cfb      	ldrb	r3, [r7, r3]
 80062f8:	2b2d      	cmp	r3, #45	; 0x2d
 80062fa:	f040 8092 	bne.w	8006422 <_tzset_unlocked_r+0x252>
 80062fe:	3401      	adds	r4, #1
 8006300:	f04f 37ff 	mov.w	r7, #4294967295
 8006304:	2300      	movs	r3, #0
 8006306:	f8ad 301c 	strh.w	r3, [sp, #28]
 800630a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800630e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006312:	930a      	str	r3, [sp, #40]	; 0x28
 8006314:	9603      	str	r6, [sp, #12]
 8006316:	f8cd a008 	str.w	sl, [sp, #8]
 800631a:	9601      	str	r6, [sp, #4]
 800631c:	f8cd b000 	str.w	fp, [sp]
 8006320:	4633      	mov	r3, r6
 8006322:	aa07      	add	r2, sp, #28
 8006324:	4967      	ldr	r1, [pc, #412]	; (80064c4 <_tzset_unlocked_r+0x2f4>)
 8006326:	4620      	mov	r0, r4
 8006328:	f000 fcde 	bl	8006ce8 <siscanf>
 800632c:	2800      	cmp	r0, #0
 800632e:	dc7d      	bgt.n	800642c <_tzset_unlocked_r+0x25c>
 8006330:	6a2b      	ldr	r3, [r5, #32]
 8006332:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8006336:	63eb      	str	r3, [r5, #60]	; 0x3c
 8006338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633a:	462f      	mov	r7, r5
 800633c:	441c      	add	r4, r3
 800633e:	f04f 0900 	mov.w	r9, #0
 8006342:	7823      	ldrb	r3, [r4, #0]
 8006344:	2b2c      	cmp	r3, #44	; 0x2c
 8006346:	bf08      	it	eq
 8006348:	3401      	addeq	r4, #1
 800634a:	f894 8000 	ldrb.w	r8, [r4]
 800634e:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8006352:	d17b      	bne.n	800644c <_tzset_unlocked_r+0x27c>
 8006354:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8006358:	9302      	str	r3, [sp, #8]
 800635a:	ab09      	add	r3, sp, #36	; 0x24
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	9603      	str	r6, [sp, #12]
 8006360:	9601      	str	r6, [sp, #4]
 8006362:	4633      	mov	r3, r6
 8006364:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8006368:	4957      	ldr	r1, [pc, #348]	; (80064c8 <_tzset_unlocked_r+0x2f8>)
 800636a:	4620      	mov	r0, r4
 800636c:	f000 fcbc 	bl	8006ce8 <siscanf>
 8006370:	2803      	cmp	r0, #3
 8006372:	f47f af47 	bne.w	8006204 <_tzset_unlocked_r+0x34>
 8006376:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800637a:	1e4b      	subs	r3, r1, #1
 800637c:	2b0b      	cmp	r3, #11
 800637e:	f63f af41 	bhi.w	8006204 <_tzset_unlocked_r+0x34>
 8006382:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8006386:	1e53      	subs	r3, r2, #1
 8006388:	2b04      	cmp	r3, #4
 800638a:	f63f af3b 	bhi.w	8006204 <_tzset_unlocked_r+0x34>
 800638e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8006392:	2b06      	cmp	r3, #6
 8006394:	f63f af36 	bhi.w	8006204 <_tzset_unlocked_r+0x34>
 8006398:	f887 8008 	strb.w	r8, [r7, #8]
 800639c:	60f9      	str	r1, [r7, #12]
 800639e:	613a      	str	r2, [r7, #16]
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a4:	eb04 0803 	add.w	r8, r4, r3
 80063a8:	2302      	movs	r3, #2
 80063aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80063ae:	2300      	movs	r3, #0
 80063b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80063b4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80063b8:	930a      	str	r3, [sp, #40]	; 0x28
 80063ba:	f898 3000 	ldrb.w	r3, [r8]
 80063be:	2b2f      	cmp	r3, #47	; 0x2f
 80063c0:	d10b      	bne.n	80063da <_tzset_unlocked_r+0x20a>
 80063c2:	9603      	str	r6, [sp, #12]
 80063c4:	f8cd a008 	str.w	sl, [sp, #8]
 80063c8:	9601      	str	r6, [sp, #4]
 80063ca:	f8cd b000 	str.w	fp, [sp]
 80063ce:	4633      	mov	r3, r6
 80063d0:	aa07      	add	r2, sp, #28
 80063d2:	493e      	ldr	r1, [pc, #248]	; (80064cc <_tzset_unlocked_r+0x2fc>)
 80063d4:	4640      	mov	r0, r8
 80063d6:	f000 fc87 	bl	8006ce8 <siscanf>
 80063da:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80063de:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80063e2:	213c      	movs	r1, #60	; 0x3c
 80063e4:	fb01 2203 	mla	r2, r1, r3, r2
 80063e8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80063ec:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80063f0:	fb01 2303 	mla	r3, r1, r3, r2
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80063f8:	f109 0901 	add.w	r9, r9, #1
 80063fc:	f1b9 0f02 	cmp.w	r9, #2
 8006400:	4444      	add	r4, r8
 8006402:	f107 071c 	add.w	r7, r7, #28
 8006406:	d19c      	bne.n	8006342 <_tzset_unlocked_r+0x172>
 8006408:	6868      	ldr	r0, [r5, #4]
 800640a:	f7ff fe31 	bl	8006070 <__tzcalc_limits>
 800640e:	4b27      	ldr	r3, [pc, #156]	; (80064ac <_tzset_unlocked_r+0x2dc>)
 8006410:	6a2a      	ldr	r2, [r5, #32]
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006416:	1a9b      	subs	r3, r3, r2
 8006418:	4a26      	ldr	r2, [pc, #152]	; (80064b4 <_tzset_unlocked_r+0x2e4>)
 800641a:	bf18      	it	ne
 800641c:	2301      	movne	r3, #1
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	e6f0      	b.n	8006204 <_tzset_unlocked_r+0x34>
 8006422:	2b2b      	cmp	r3, #43	; 0x2b
 8006424:	bf08      	it	eq
 8006426:	3401      	addeq	r4, #1
 8006428:	2701      	movs	r7, #1
 800642a:	e76b      	b.n	8006304 <_tzset_unlocked_r+0x134>
 800642c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006430:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8006434:	213c      	movs	r1, #60	; 0x3c
 8006436:	fb01 2203 	mla	r2, r1, r3, r2
 800643a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800643e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006442:	fb01 2303 	mla	r3, r1, r3, r2
 8006446:	435f      	muls	r7, r3
 8006448:	63ef      	str	r7, [r5, #60]	; 0x3c
 800644a:	e775      	b.n	8006338 <_tzset_unlocked_r+0x168>
 800644c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8006450:	bf06      	itte	eq
 8006452:	3401      	addeq	r4, #1
 8006454:	4643      	moveq	r3, r8
 8006456:	2344      	movne	r3, #68	; 0x44
 8006458:	220a      	movs	r2, #10
 800645a:	a90b      	add	r1, sp, #44	; 0x2c
 800645c:	4620      	mov	r0, r4
 800645e:	9305      	str	r3, [sp, #20]
 8006460:	f000 fd18 	bl	8006e94 <strtoul>
 8006464:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8006468:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800646c:	4544      	cmp	r4, r8
 800646e:	9b05      	ldr	r3, [sp, #20]
 8006470:	d114      	bne.n	800649c <_tzset_unlocked_r+0x2cc>
 8006472:	234d      	movs	r3, #77	; 0x4d
 8006474:	f1b9 0f00 	cmp.w	r9, #0
 8006478:	d107      	bne.n	800648a <_tzset_unlocked_r+0x2ba>
 800647a:	722b      	strb	r3, [r5, #8]
 800647c:	2303      	movs	r3, #3
 800647e:	60eb      	str	r3, [r5, #12]
 8006480:	2302      	movs	r3, #2
 8006482:	612b      	str	r3, [r5, #16]
 8006484:	f8c5 9014 	str.w	r9, [r5, #20]
 8006488:	e78e      	b.n	80063a8 <_tzset_unlocked_r+0x1d8>
 800648a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 800648e:	230b      	movs	r3, #11
 8006490:	62ab      	str	r3, [r5, #40]	; 0x28
 8006492:	2301      	movs	r3, #1
 8006494:	62eb      	str	r3, [r5, #44]	; 0x2c
 8006496:	2300      	movs	r3, #0
 8006498:	632b      	str	r3, [r5, #48]	; 0x30
 800649a:	e785      	b.n	80063a8 <_tzset_unlocked_r+0x1d8>
 800649c:	b280      	uxth	r0, r0
 800649e:	723b      	strb	r3, [r7, #8]
 80064a0:	6178      	str	r0, [r7, #20]
 80064a2:	e781      	b.n	80063a8 <_tzset_unlocked_r+0x1d8>
 80064a4:	08007bb8 	.word	0x08007bb8
 80064a8:	2000025c 	.word	0x2000025c
 80064ac:	20000264 	.word	0x20000264
 80064b0:	08007bbb 	.word	0x08007bbb
 80064b4:	20000260 	.word	0x20000260
 80064b8:	20000008 	.word	0x20000008
 80064bc:	20000250 	.word	0x20000250
 80064c0:	08007bbf 	.word	0x08007bbf
 80064c4:	08007be2 	.word	0x08007be2
 80064c8:	08007bce 	.word	0x08007bce
 80064cc:	08007be1 	.word	0x08007be1
 80064d0:	20000245 	.word	0x20000245

080064d4 <div>:
 80064d4:	2900      	cmp	r1, #0
 80064d6:	b510      	push	{r4, lr}
 80064d8:	fb91 f4f2 	sdiv	r4, r1, r2
 80064dc:	fb02 1314 	mls	r3, r2, r4, r1
 80064e0:	db06      	blt.n	80064f0 <div+0x1c>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	da01      	bge.n	80064ea <div+0x16>
 80064e6:	3401      	adds	r4, #1
 80064e8:	1a9b      	subs	r3, r3, r2
 80064ea:	6004      	str	r4, [r0, #0]
 80064ec:	6043      	str	r3, [r0, #4]
 80064ee:	bd10      	pop	{r4, pc}
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	bfc4      	itt	gt
 80064f4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80064f8:	189b      	addgt	r3, r3, r2
 80064fa:	e7f6      	b.n	80064ea <div+0x16>

080064fc <_findenv_r>:
 80064fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006500:	4606      	mov	r6, r0
 8006502:	468a      	mov	sl, r1
 8006504:	4617      	mov	r7, r2
 8006506:	f000 fcdb 	bl	8006ec0 <__env_lock>
 800650a:	4b1b      	ldr	r3, [pc, #108]	; (8006578 <_findenv_r+0x7c>)
 800650c:	f8d3 8000 	ldr.w	r8, [r3]
 8006510:	4699      	mov	r9, r3
 8006512:	f1b8 0f00 	cmp.w	r8, #0
 8006516:	d007      	beq.n	8006528 <_findenv_r+0x2c>
 8006518:	4654      	mov	r4, sl
 800651a:	4623      	mov	r3, r4
 800651c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006520:	b332      	cbz	r2, 8006570 <_findenv_r+0x74>
 8006522:	2a3d      	cmp	r2, #61	; 0x3d
 8006524:	461c      	mov	r4, r3
 8006526:	d1f8      	bne.n	800651a <_findenv_r+0x1e>
 8006528:	4630      	mov	r0, r6
 800652a:	f000 fcca 	bl	8006ec2 <__env_unlock>
 800652e:	2000      	movs	r0, #0
 8006530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006534:	f108 0804 	add.w	r8, r8, #4
 8006538:	f8d8 0000 	ldr.w	r0, [r8]
 800653c:	2800      	cmp	r0, #0
 800653e:	d0f3      	beq.n	8006528 <_findenv_r+0x2c>
 8006540:	4622      	mov	r2, r4
 8006542:	4651      	mov	r1, sl
 8006544:	f000 fc04 	bl	8006d50 <strncmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	d1f3      	bne.n	8006534 <_findenv_r+0x38>
 800654c:	f8d8 3000 	ldr.w	r3, [r8]
 8006550:	191d      	adds	r5, r3, r4
 8006552:	5d1b      	ldrb	r3, [r3, r4]
 8006554:	2b3d      	cmp	r3, #61	; 0x3d
 8006556:	d1ed      	bne.n	8006534 <_findenv_r+0x38>
 8006558:	f8d9 3000 	ldr.w	r3, [r9]
 800655c:	eba8 0303 	sub.w	r3, r8, r3
 8006560:	109b      	asrs	r3, r3, #2
 8006562:	4630      	mov	r0, r6
 8006564:	603b      	str	r3, [r7, #0]
 8006566:	f000 fcac 	bl	8006ec2 <__env_unlock>
 800656a:	1c68      	adds	r0, r5, #1
 800656c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006570:	eba4 040a 	sub.w	r4, r4, sl
 8006574:	e7e0      	b.n	8006538 <_findenv_r+0x3c>
 8006576:	bf00      	nop
 8006578:	200000b4 	.word	0x200000b4

0800657c <_getenv_r>:
 800657c:	b507      	push	{r0, r1, r2, lr}
 800657e:	aa01      	add	r2, sp, #4
 8006580:	f7ff ffbc 	bl	80064fc <_findenv_r>
 8006584:	b003      	add	sp, #12
 8006586:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800658c <__gettzinfo>:
 800658c:	4800      	ldr	r0, [pc, #0]	; (8006590 <__gettzinfo+0x4>)
 800658e:	4770      	bx	lr
 8006590:	20000010 	.word	0x20000010

08006594 <free>:
 8006594:	4b02      	ldr	r3, [pc, #8]	; (80065a0 <free+0xc>)
 8006596:	4601      	mov	r1, r0
 8006598:	6818      	ldr	r0, [r3, #0]
 800659a:	f000 b803 	b.w	80065a4 <_free_r>
 800659e:	bf00      	nop
 80065a0:	20000050 	.word	0x20000050

080065a4 <_free_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4605      	mov	r5, r0
 80065a8:	2900      	cmp	r1, #0
 80065aa:	d045      	beq.n	8006638 <_free_r+0x94>
 80065ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065b0:	1f0c      	subs	r4, r1, #4
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bfb8      	it	lt
 80065b6:	18e4      	addlt	r4, r4, r3
 80065b8:	f000 fccd 	bl	8006f56 <__malloc_lock>
 80065bc:	4a1f      	ldr	r2, [pc, #124]	; (800663c <_free_r+0x98>)
 80065be:	6813      	ldr	r3, [r2, #0]
 80065c0:	4610      	mov	r0, r2
 80065c2:	b933      	cbnz	r3, 80065d2 <_free_r+0x2e>
 80065c4:	6063      	str	r3, [r4, #4]
 80065c6:	6014      	str	r4, [r2, #0]
 80065c8:	4628      	mov	r0, r5
 80065ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065ce:	f000 bcc3 	b.w	8006f58 <__malloc_unlock>
 80065d2:	42a3      	cmp	r3, r4
 80065d4:	d90c      	bls.n	80065f0 <_free_r+0x4c>
 80065d6:	6821      	ldr	r1, [r4, #0]
 80065d8:	1862      	adds	r2, r4, r1
 80065da:	4293      	cmp	r3, r2
 80065dc:	bf04      	itt	eq
 80065de:	681a      	ldreq	r2, [r3, #0]
 80065e0:	685b      	ldreq	r3, [r3, #4]
 80065e2:	6063      	str	r3, [r4, #4]
 80065e4:	bf04      	itt	eq
 80065e6:	1852      	addeq	r2, r2, r1
 80065e8:	6022      	streq	r2, [r4, #0]
 80065ea:	6004      	str	r4, [r0, #0]
 80065ec:	e7ec      	b.n	80065c8 <_free_r+0x24>
 80065ee:	4613      	mov	r3, r2
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	b10a      	cbz	r2, 80065f8 <_free_r+0x54>
 80065f4:	42a2      	cmp	r2, r4
 80065f6:	d9fa      	bls.n	80065ee <_free_r+0x4a>
 80065f8:	6819      	ldr	r1, [r3, #0]
 80065fa:	1858      	adds	r0, r3, r1
 80065fc:	42a0      	cmp	r0, r4
 80065fe:	d10b      	bne.n	8006618 <_free_r+0x74>
 8006600:	6820      	ldr	r0, [r4, #0]
 8006602:	4401      	add	r1, r0
 8006604:	1858      	adds	r0, r3, r1
 8006606:	4282      	cmp	r2, r0
 8006608:	6019      	str	r1, [r3, #0]
 800660a:	d1dd      	bne.n	80065c8 <_free_r+0x24>
 800660c:	6810      	ldr	r0, [r2, #0]
 800660e:	6852      	ldr	r2, [r2, #4]
 8006610:	605a      	str	r2, [r3, #4]
 8006612:	4401      	add	r1, r0
 8006614:	6019      	str	r1, [r3, #0]
 8006616:	e7d7      	b.n	80065c8 <_free_r+0x24>
 8006618:	d902      	bls.n	8006620 <_free_r+0x7c>
 800661a:	230c      	movs	r3, #12
 800661c:	602b      	str	r3, [r5, #0]
 800661e:	e7d3      	b.n	80065c8 <_free_r+0x24>
 8006620:	6820      	ldr	r0, [r4, #0]
 8006622:	1821      	adds	r1, r4, r0
 8006624:	428a      	cmp	r2, r1
 8006626:	bf04      	itt	eq
 8006628:	6811      	ldreq	r1, [r2, #0]
 800662a:	6852      	ldreq	r2, [r2, #4]
 800662c:	6062      	str	r2, [r4, #4]
 800662e:	bf04      	itt	eq
 8006630:	1809      	addeq	r1, r1, r0
 8006632:	6021      	streq	r1, [r4, #0]
 8006634:	605c      	str	r4, [r3, #4]
 8006636:	e7c7      	b.n	80065c8 <_free_r+0x24>
 8006638:	bd38      	pop	{r3, r4, r5, pc}
 800663a:	bf00      	nop
 800663c:	20000268 	.word	0x20000268

08006640 <_malloc_r>:
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	1ccd      	adds	r5, r1, #3
 8006644:	f025 0503 	bic.w	r5, r5, #3
 8006648:	3508      	adds	r5, #8
 800664a:	2d0c      	cmp	r5, #12
 800664c:	bf38      	it	cc
 800664e:	250c      	movcc	r5, #12
 8006650:	2d00      	cmp	r5, #0
 8006652:	4606      	mov	r6, r0
 8006654:	db01      	blt.n	800665a <_malloc_r+0x1a>
 8006656:	42a9      	cmp	r1, r5
 8006658:	d903      	bls.n	8006662 <_malloc_r+0x22>
 800665a:	230c      	movs	r3, #12
 800665c:	6033      	str	r3, [r6, #0]
 800665e:	2000      	movs	r0, #0
 8006660:	bd70      	pop	{r4, r5, r6, pc}
 8006662:	f000 fc78 	bl	8006f56 <__malloc_lock>
 8006666:	4a23      	ldr	r2, [pc, #140]	; (80066f4 <_malloc_r+0xb4>)
 8006668:	6814      	ldr	r4, [r2, #0]
 800666a:	4621      	mov	r1, r4
 800666c:	b991      	cbnz	r1, 8006694 <_malloc_r+0x54>
 800666e:	4c22      	ldr	r4, [pc, #136]	; (80066f8 <_malloc_r+0xb8>)
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	b91b      	cbnz	r3, 800667c <_malloc_r+0x3c>
 8006674:	4630      	mov	r0, r6
 8006676:	f000 fb27 	bl	8006cc8 <_sbrk_r>
 800667a:	6020      	str	r0, [r4, #0]
 800667c:	4629      	mov	r1, r5
 800667e:	4630      	mov	r0, r6
 8006680:	f000 fb22 	bl	8006cc8 <_sbrk_r>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d126      	bne.n	80066d6 <_malloc_r+0x96>
 8006688:	230c      	movs	r3, #12
 800668a:	6033      	str	r3, [r6, #0]
 800668c:	4630      	mov	r0, r6
 800668e:	f000 fc63 	bl	8006f58 <__malloc_unlock>
 8006692:	e7e4      	b.n	800665e <_malloc_r+0x1e>
 8006694:	680b      	ldr	r3, [r1, #0]
 8006696:	1b5b      	subs	r3, r3, r5
 8006698:	d41a      	bmi.n	80066d0 <_malloc_r+0x90>
 800669a:	2b0b      	cmp	r3, #11
 800669c:	d90f      	bls.n	80066be <_malloc_r+0x7e>
 800669e:	600b      	str	r3, [r1, #0]
 80066a0:	50cd      	str	r5, [r1, r3]
 80066a2:	18cc      	adds	r4, r1, r3
 80066a4:	4630      	mov	r0, r6
 80066a6:	f000 fc57 	bl	8006f58 <__malloc_unlock>
 80066aa:	f104 000b 	add.w	r0, r4, #11
 80066ae:	1d23      	adds	r3, r4, #4
 80066b0:	f020 0007 	bic.w	r0, r0, #7
 80066b4:	1ac3      	subs	r3, r0, r3
 80066b6:	d01b      	beq.n	80066f0 <_malloc_r+0xb0>
 80066b8:	425a      	negs	r2, r3
 80066ba:	50e2      	str	r2, [r4, r3]
 80066bc:	bd70      	pop	{r4, r5, r6, pc}
 80066be:	428c      	cmp	r4, r1
 80066c0:	bf0d      	iteet	eq
 80066c2:	6863      	ldreq	r3, [r4, #4]
 80066c4:	684b      	ldrne	r3, [r1, #4]
 80066c6:	6063      	strne	r3, [r4, #4]
 80066c8:	6013      	streq	r3, [r2, #0]
 80066ca:	bf18      	it	ne
 80066cc:	460c      	movne	r4, r1
 80066ce:	e7e9      	b.n	80066a4 <_malloc_r+0x64>
 80066d0:	460c      	mov	r4, r1
 80066d2:	6849      	ldr	r1, [r1, #4]
 80066d4:	e7ca      	b.n	800666c <_malloc_r+0x2c>
 80066d6:	1cc4      	adds	r4, r0, #3
 80066d8:	f024 0403 	bic.w	r4, r4, #3
 80066dc:	42a0      	cmp	r0, r4
 80066de:	d005      	beq.n	80066ec <_malloc_r+0xac>
 80066e0:	1a21      	subs	r1, r4, r0
 80066e2:	4630      	mov	r0, r6
 80066e4:	f000 faf0 	bl	8006cc8 <_sbrk_r>
 80066e8:	3001      	adds	r0, #1
 80066ea:	d0cd      	beq.n	8006688 <_malloc_r+0x48>
 80066ec:	6025      	str	r5, [r4, #0]
 80066ee:	e7d9      	b.n	80066a4 <_malloc_r+0x64>
 80066f0:	bd70      	pop	{r4, r5, r6, pc}
 80066f2:	bf00      	nop
 80066f4:	20000268 	.word	0x20000268
 80066f8:	2000026c 	.word	0x2000026c

080066fc <__ssputs_r>:
 80066fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006700:	688e      	ldr	r6, [r1, #8]
 8006702:	429e      	cmp	r6, r3
 8006704:	4682      	mov	sl, r0
 8006706:	460c      	mov	r4, r1
 8006708:	4691      	mov	r9, r2
 800670a:	4698      	mov	r8, r3
 800670c:	d835      	bhi.n	800677a <__ssputs_r+0x7e>
 800670e:	898a      	ldrh	r2, [r1, #12]
 8006710:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006714:	d031      	beq.n	800677a <__ssputs_r+0x7e>
 8006716:	6825      	ldr	r5, [r4, #0]
 8006718:	6909      	ldr	r1, [r1, #16]
 800671a:	1a6f      	subs	r7, r5, r1
 800671c:	6965      	ldr	r5, [r4, #20]
 800671e:	2302      	movs	r3, #2
 8006720:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006724:	fb95 f5f3 	sdiv	r5, r5, r3
 8006728:	f108 0301 	add.w	r3, r8, #1
 800672c:	443b      	add	r3, r7
 800672e:	429d      	cmp	r5, r3
 8006730:	bf38      	it	cc
 8006732:	461d      	movcc	r5, r3
 8006734:	0553      	lsls	r3, r2, #21
 8006736:	d531      	bpl.n	800679c <__ssputs_r+0xa0>
 8006738:	4629      	mov	r1, r5
 800673a:	f7ff ff81 	bl	8006640 <_malloc_r>
 800673e:	4606      	mov	r6, r0
 8006740:	b950      	cbnz	r0, 8006758 <__ssputs_r+0x5c>
 8006742:	230c      	movs	r3, #12
 8006744:	f8ca 3000 	str.w	r3, [sl]
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800674e:	81a3      	strh	r3, [r4, #12]
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006758:	463a      	mov	r2, r7
 800675a:	6921      	ldr	r1, [r4, #16]
 800675c:	f000 fbd6 	bl	8006f0c <memcpy>
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676a:	81a3      	strh	r3, [r4, #12]
 800676c:	6126      	str	r6, [r4, #16]
 800676e:	6165      	str	r5, [r4, #20]
 8006770:	443e      	add	r6, r7
 8006772:	1bed      	subs	r5, r5, r7
 8006774:	6026      	str	r6, [r4, #0]
 8006776:	60a5      	str	r5, [r4, #8]
 8006778:	4646      	mov	r6, r8
 800677a:	4546      	cmp	r6, r8
 800677c:	bf28      	it	cs
 800677e:	4646      	movcs	r6, r8
 8006780:	4632      	mov	r2, r6
 8006782:	4649      	mov	r1, r9
 8006784:	6820      	ldr	r0, [r4, #0]
 8006786:	f000 fbcc 	bl	8006f22 <memmove>
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	1b9b      	subs	r3, r3, r6
 800678e:	60a3      	str	r3, [r4, #8]
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	441e      	add	r6, r3
 8006794:	6026      	str	r6, [r4, #0]
 8006796:	2000      	movs	r0, #0
 8006798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800679c:	462a      	mov	r2, r5
 800679e:	f000 fbdc 	bl	8006f5a <_realloc_r>
 80067a2:	4606      	mov	r6, r0
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d1e1      	bne.n	800676c <__ssputs_r+0x70>
 80067a8:	6921      	ldr	r1, [r4, #16]
 80067aa:	4650      	mov	r0, sl
 80067ac:	f7ff fefa 	bl	80065a4 <_free_r>
 80067b0:	e7c7      	b.n	8006742 <__ssputs_r+0x46>
	...

080067b4 <_svfiprintf_r>:
 80067b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b8:	b09d      	sub	sp, #116	; 0x74
 80067ba:	4680      	mov	r8, r0
 80067bc:	9303      	str	r3, [sp, #12]
 80067be:	898b      	ldrh	r3, [r1, #12]
 80067c0:	061c      	lsls	r4, r3, #24
 80067c2:	460d      	mov	r5, r1
 80067c4:	4616      	mov	r6, r2
 80067c6:	d50f      	bpl.n	80067e8 <_svfiprintf_r+0x34>
 80067c8:	690b      	ldr	r3, [r1, #16]
 80067ca:	b96b      	cbnz	r3, 80067e8 <_svfiprintf_r+0x34>
 80067cc:	2140      	movs	r1, #64	; 0x40
 80067ce:	f7ff ff37 	bl	8006640 <_malloc_r>
 80067d2:	6028      	str	r0, [r5, #0]
 80067d4:	6128      	str	r0, [r5, #16]
 80067d6:	b928      	cbnz	r0, 80067e4 <_svfiprintf_r+0x30>
 80067d8:	230c      	movs	r3, #12
 80067da:	f8c8 3000 	str.w	r3, [r8]
 80067de:	f04f 30ff 	mov.w	r0, #4294967295
 80067e2:	e0c5      	b.n	8006970 <_svfiprintf_r+0x1bc>
 80067e4:	2340      	movs	r3, #64	; 0x40
 80067e6:	616b      	str	r3, [r5, #20]
 80067e8:	2300      	movs	r3, #0
 80067ea:	9309      	str	r3, [sp, #36]	; 0x24
 80067ec:	2320      	movs	r3, #32
 80067ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067f2:	2330      	movs	r3, #48	; 0x30
 80067f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067f8:	f04f 0b01 	mov.w	fp, #1
 80067fc:	4637      	mov	r7, r6
 80067fe:	463c      	mov	r4, r7
 8006800:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d13c      	bne.n	8006882 <_svfiprintf_r+0xce>
 8006808:	ebb7 0a06 	subs.w	sl, r7, r6
 800680c:	d00b      	beq.n	8006826 <_svfiprintf_r+0x72>
 800680e:	4653      	mov	r3, sl
 8006810:	4632      	mov	r2, r6
 8006812:	4629      	mov	r1, r5
 8006814:	4640      	mov	r0, r8
 8006816:	f7ff ff71 	bl	80066fc <__ssputs_r>
 800681a:	3001      	adds	r0, #1
 800681c:	f000 80a3 	beq.w	8006966 <_svfiprintf_r+0x1b2>
 8006820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006822:	4453      	add	r3, sl
 8006824:	9309      	str	r3, [sp, #36]	; 0x24
 8006826:	783b      	ldrb	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 809c 	beq.w	8006966 <_svfiprintf_r+0x1b2>
 800682e:	2300      	movs	r3, #0
 8006830:	f04f 32ff 	mov.w	r2, #4294967295
 8006834:	9304      	str	r3, [sp, #16]
 8006836:	9307      	str	r3, [sp, #28]
 8006838:	9205      	str	r2, [sp, #20]
 800683a:	9306      	str	r3, [sp, #24]
 800683c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006840:	931a      	str	r3, [sp, #104]	; 0x68
 8006842:	2205      	movs	r2, #5
 8006844:	7821      	ldrb	r1, [r4, #0]
 8006846:	4850      	ldr	r0, [pc, #320]	; (8006988 <_svfiprintf_r+0x1d4>)
 8006848:	f7f9 fcda 	bl	8000200 <memchr>
 800684c:	1c67      	adds	r7, r4, #1
 800684e:	9b04      	ldr	r3, [sp, #16]
 8006850:	b9d8      	cbnz	r0, 800688a <_svfiprintf_r+0xd6>
 8006852:	06d9      	lsls	r1, r3, #27
 8006854:	bf44      	itt	mi
 8006856:	2220      	movmi	r2, #32
 8006858:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800685c:	071a      	lsls	r2, r3, #28
 800685e:	bf44      	itt	mi
 8006860:	222b      	movmi	r2, #43	; 0x2b
 8006862:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006866:	7822      	ldrb	r2, [r4, #0]
 8006868:	2a2a      	cmp	r2, #42	; 0x2a
 800686a:	d016      	beq.n	800689a <_svfiprintf_r+0xe6>
 800686c:	9a07      	ldr	r2, [sp, #28]
 800686e:	2100      	movs	r1, #0
 8006870:	200a      	movs	r0, #10
 8006872:	4627      	mov	r7, r4
 8006874:	3401      	adds	r4, #1
 8006876:	783b      	ldrb	r3, [r7, #0]
 8006878:	3b30      	subs	r3, #48	; 0x30
 800687a:	2b09      	cmp	r3, #9
 800687c:	d951      	bls.n	8006922 <_svfiprintf_r+0x16e>
 800687e:	b1c9      	cbz	r1, 80068b4 <_svfiprintf_r+0x100>
 8006880:	e011      	b.n	80068a6 <_svfiprintf_r+0xf2>
 8006882:	2b25      	cmp	r3, #37	; 0x25
 8006884:	d0c0      	beq.n	8006808 <_svfiprintf_r+0x54>
 8006886:	4627      	mov	r7, r4
 8006888:	e7b9      	b.n	80067fe <_svfiprintf_r+0x4a>
 800688a:	4a3f      	ldr	r2, [pc, #252]	; (8006988 <_svfiprintf_r+0x1d4>)
 800688c:	1a80      	subs	r0, r0, r2
 800688e:	fa0b f000 	lsl.w	r0, fp, r0
 8006892:	4318      	orrs	r0, r3
 8006894:	9004      	str	r0, [sp, #16]
 8006896:	463c      	mov	r4, r7
 8006898:	e7d3      	b.n	8006842 <_svfiprintf_r+0x8e>
 800689a:	9a03      	ldr	r2, [sp, #12]
 800689c:	1d11      	adds	r1, r2, #4
 800689e:	6812      	ldr	r2, [r2, #0]
 80068a0:	9103      	str	r1, [sp, #12]
 80068a2:	2a00      	cmp	r2, #0
 80068a4:	db01      	blt.n	80068aa <_svfiprintf_r+0xf6>
 80068a6:	9207      	str	r2, [sp, #28]
 80068a8:	e004      	b.n	80068b4 <_svfiprintf_r+0x100>
 80068aa:	4252      	negs	r2, r2
 80068ac:	f043 0302 	orr.w	r3, r3, #2
 80068b0:	9207      	str	r2, [sp, #28]
 80068b2:	9304      	str	r3, [sp, #16]
 80068b4:	783b      	ldrb	r3, [r7, #0]
 80068b6:	2b2e      	cmp	r3, #46	; 0x2e
 80068b8:	d10e      	bne.n	80068d8 <_svfiprintf_r+0x124>
 80068ba:	787b      	ldrb	r3, [r7, #1]
 80068bc:	2b2a      	cmp	r3, #42	; 0x2a
 80068be:	f107 0101 	add.w	r1, r7, #1
 80068c2:	d132      	bne.n	800692a <_svfiprintf_r+0x176>
 80068c4:	9b03      	ldr	r3, [sp, #12]
 80068c6:	1d1a      	adds	r2, r3, #4
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	9203      	str	r2, [sp, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bfb8      	it	lt
 80068d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80068d4:	3702      	adds	r7, #2
 80068d6:	9305      	str	r3, [sp, #20]
 80068d8:	4c2c      	ldr	r4, [pc, #176]	; (800698c <_svfiprintf_r+0x1d8>)
 80068da:	7839      	ldrb	r1, [r7, #0]
 80068dc:	2203      	movs	r2, #3
 80068de:	4620      	mov	r0, r4
 80068e0:	f7f9 fc8e 	bl	8000200 <memchr>
 80068e4:	b138      	cbz	r0, 80068f6 <_svfiprintf_r+0x142>
 80068e6:	2340      	movs	r3, #64	; 0x40
 80068e8:	1b00      	subs	r0, r0, r4
 80068ea:	fa03 f000 	lsl.w	r0, r3, r0
 80068ee:	9b04      	ldr	r3, [sp, #16]
 80068f0:	4303      	orrs	r3, r0
 80068f2:	9304      	str	r3, [sp, #16]
 80068f4:	3701      	adds	r7, #1
 80068f6:	7839      	ldrb	r1, [r7, #0]
 80068f8:	4825      	ldr	r0, [pc, #148]	; (8006990 <_svfiprintf_r+0x1dc>)
 80068fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068fe:	2206      	movs	r2, #6
 8006900:	1c7e      	adds	r6, r7, #1
 8006902:	f7f9 fc7d 	bl	8000200 <memchr>
 8006906:	2800      	cmp	r0, #0
 8006908:	d035      	beq.n	8006976 <_svfiprintf_r+0x1c2>
 800690a:	4b22      	ldr	r3, [pc, #136]	; (8006994 <_svfiprintf_r+0x1e0>)
 800690c:	b9fb      	cbnz	r3, 800694e <_svfiprintf_r+0x19a>
 800690e:	9b03      	ldr	r3, [sp, #12]
 8006910:	3307      	adds	r3, #7
 8006912:	f023 0307 	bic.w	r3, r3, #7
 8006916:	3308      	adds	r3, #8
 8006918:	9303      	str	r3, [sp, #12]
 800691a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691c:	444b      	add	r3, r9
 800691e:	9309      	str	r3, [sp, #36]	; 0x24
 8006920:	e76c      	b.n	80067fc <_svfiprintf_r+0x48>
 8006922:	fb00 3202 	mla	r2, r0, r2, r3
 8006926:	2101      	movs	r1, #1
 8006928:	e7a3      	b.n	8006872 <_svfiprintf_r+0xbe>
 800692a:	2300      	movs	r3, #0
 800692c:	9305      	str	r3, [sp, #20]
 800692e:	4618      	mov	r0, r3
 8006930:	240a      	movs	r4, #10
 8006932:	460f      	mov	r7, r1
 8006934:	3101      	adds	r1, #1
 8006936:	783a      	ldrb	r2, [r7, #0]
 8006938:	3a30      	subs	r2, #48	; 0x30
 800693a:	2a09      	cmp	r2, #9
 800693c:	d903      	bls.n	8006946 <_svfiprintf_r+0x192>
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0ca      	beq.n	80068d8 <_svfiprintf_r+0x124>
 8006942:	9005      	str	r0, [sp, #20]
 8006944:	e7c8      	b.n	80068d8 <_svfiprintf_r+0x124>
 8006946:	fb04 2000 	mla	r0, r4, r0, r2
 800694a:	2301      	movs	r3, #1
 800694c:	e7f1      	b.n	8006932 <_svfiprintf_r+0x17e>
 800694e:	ab03      	add	r3, sp, #12
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	462a      	mov	r2, r5
 8006954:	4b10      	ldr	r3, [pc, #64]	; (8006998 <_svfiprintf_r+0x1e4>)
 8006956:	a904      	add	r1, sp, #16
 8006958:	4640      	mov	r0, r8
 800695a:	f3af 8000 	nop.w
 800695e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006962:	4681      	mov	r9, r0
 8006964:	d1d9      	bne.n	800691a <_svfiprintf_r+0x166>
 8006966:	89ab      	ldrh	r3, [r5, #12]
 8006968:	065b      	lsls	r3, r3, #25
 800696a:	f53f af38 	bmi.w	80067de <_svfiprintf_r+0x2a>
 800696e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006970:	b01d      	add	sp, #116	; 0x74
 8006972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006976:	ab03      	add	r3, sp, #12
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	462a      	mov	r2, r5
 800697c:	4b06      	ldr	r3, [pc, #24]	; (8006998 <_svfiprintf_r+0x1e4>)
 800697e:	a904      	add	r1, sp, #16
 8006980:	4640      	mov	r0, r8
 8006982:	f000 f881 	bl	8006a88 <_printf_i>
 8006986:	e7ea      	b.n	800695e <_svfiprintf_r+0x1aa>
 8006988:	08007c54 	.word	0x08007c54
 800698c:	08007c5a 	.word	0x08007c5a
 8006990:	08007c5e 	.word	0x08007c5e
 8006994:	00000000 	.word	0x00000000
 8006998:	080066fd 	.word	0x080066fd

0800699c <_printf_common>:
 800699c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069a0:	4691      	mov	r9, r2
 80069a2:	461f      	mov	r7, r3
 80069a4:	688a      	ldr	r2, [r1, #8]
 80069a6:	690b      	ldr	r3, [r1, #16]
 80069a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069ac:	4293      	cmp	r3, r2
 80069ae:	bfb8      	it	lt
 80069b0:	4613      	movlt	r3, r2
 80069b2:	f8c9 3000 	str.w	r3, [r9]
 80069b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069ba:	4606      	mov	r6, r0
 80069bc:	460c      	mov	r4, r1
 80069be:	b112      	cbz	r2, 80069c6 <_printf_common+0x2a>
 80069c0:	3301      	adds	r3, #1
 80069c2:	f8c9 3000 	str.w	r3, [r9]
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	0699      	lsls	r1, r3, #26
 80069ca:	bf42      	ittt	mi
 80069cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80069d0:	3302      	addmi	r3, #2
 80069d2:	f8c9 3000 	strmi.w	r3, [r9]
 80069d6:	6825      	ldr	r5, [r4, #0]
 80069d8:	f015 0506 	ands.w	r5, r5, #6
 80069dc:	d107      	bne.n	80069ee <_printf_common+0x52>
 80069de:	f104 0a19 	add.w	sl, r4, #25
 80069e2:	68e3      	ldr	r3, [r4, #12]
 80069e4:	f8d9 2000 	ldr.w	r2, [r9]
 80069e8:	1a9b      	subs	r3, r3, r2
 80069ea:	429d      	cmp	r5, r3
 80069ec:	db29      	blt.n	8006a42 <_printf_common+0xa6>
 80069ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80069f2:	6822      	ldr	r2, [r4, #0]
 80069f4:	3300      	adds	r3, #0
 80069f6:	bf18      	it	ne
 80069f8:	2301      	movne	r3, #1
 80069fa:	0692      	lsls	r2, r2, #26
 80069fc:	d42e      	bmi.n	8006a5c <_printf_common+0xc0>
 80069fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a02:	4639      	mov	r1, r7
 8006a04:	4630      	mov	r0, r6
 8006a06:	47c0      	blx	r8
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d021      	beq.n	8006a50 <_printf_common+0xb4>
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	68e5      	ldr	r5, [r4, #12]
 8006a10:	f8d9 2000 	ldr.w	r2, [r9]
 8006a14:	f003 0306 	and.w	r3, r3, #6
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	bf08      	it	eq
 8006a1c:	1aad      	subeq	r5, r5, r2
 8006a1e:	68a3      	ldr	r3, [r4, #8]
 8006a20:	6922      	ldr	r2, [r4, #16]
 8006a22:	bf0c      	ite	eq
 8006a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a28:	2500      	movne	r5, #0
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	bfc4      	itt	gt
 8006a2e:	1a9b      	subgt	r3, r3, r2
 8006a30:	18ed      	addgt	r5, r5, r3
 8006a32:	f04f 0900 	mov.w	r9, #0
 8006a36:	341a      	adds	r4, #26
 8006a38:	454d      	cmp	r5, r9
 8006a3a:	d11b      	bne.n	8006a74 <_printf_common+0xd8>
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a42:	2301      	movs	r3, #1
 8006a44:	4652      	mov	r2, sl
 8006a46:	4639      	mov	r1, r7
 8006a48:	4630      	mov	r0, r6
 8006a4a:	47c0      	blx	r8
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d103      	bne.n	8006a58 <_printf_common+0xbc>
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295
 8006a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a58:	3501      	adds	r5, #1
 8006a5a:	e7c2      	b.n	80069e2 <_printf_common+0x46>
 8006a5c:	18e1      	adds	r1, r4, r3
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	2030      	movs	r0, #48	; 0x30
 8006a62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a66:	4422      	add	r2, r4
 8006a68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a70:	3302      	adds	r3, #2
 8006a72:	e7c4      	b.n	80069fe <_printf_common+0x62>
 8006a74:	2301      	movs	r3, #1
 8006a76:	4622      	mov	r2, r4
 8006a78:	4639      	mov	r1, r7
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	47c0      	blx	r8
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d0e6      	beq.n	8006a50 <_printf_common+0xb4>
 8006a82:	f109 0901 	add.w	r9, r9, #1
 8006a86:	e7d7      	b.n	8006a38 <_printf_common+0x9c>

08006a88 <_printf_i>:
 8006a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a8c:	4617      	mov	r7, r2
 8006a8e:	7e0a      	ldrb	r2, [r1, #24]
 8006a90:	b085      	sub	sp, #20
 8006a92:	2a6e      	cmp	r2, #110	; 0x6e
 8006a94:	4698      	mov	r8, r3
 8006a96:	4606      	mov	r6, r0
 8006a98:	460c      	mov	r4, r1
 8006a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a9c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006aa0:	f000 80bc 	beq.w	8006c1c <_printf_i+0x194>
 8006aa4:	d81a      	bhi.n	8006adc <_printf_i+0x54>
 8006aa6:	2a63      	cmp	r2, #99	; 0x63
 8006aa8:	d02e      	beq.n	8006b08 <_printf_i+0x80>
 8006aaa:	d80a      	bhi.n	8006ac2 <_printf_i+0x3a>
 8006aac:	2a00      	cmp	r2, #0
 8006aae:	f000 80c8 	beq.w	8006c42 <_printf_i+0x1ba>
 8006ab2:	2a58      	cmp	r2, #88	; 0x58
 8006ab4:	f000 808a 	beq.w	8006bcc <_printf_i+0x144>
 8006ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006abc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006ac0:	e02a      	b.n	8006b18 <_printf_i+0x90>
 8006ac2:	2a64      	cmp	r2, #100	; 0x64
 8006ac4:	d001      	beq.n	8006aca <_printf_i+0x42>
 8006ac6:	2a69      	cmp	r2, #105	; 0x69
 8006ac8:	d1f6      	bne.n	8006ab8 <_printf_i+0x30>
 8006aca:	6821      	ldr	r1, [r4, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006ad2:	d023      	beq.n	8006b1c <_printf_i+0x94>
 8006ad4:	1d11      	adds	r1, r2, #4
 8006ad6:	6019      	str	r1, [r3, #0]
 8006ad8:	6813      	ldr	r3, [r2, #0]
 8006ada:	e027      	b.n	8006b2c <_printf_i+0xa4>
 8006adc:	2a73      	cmp	r2, #115	; 0x73
 8006ade:	f000 80b4 	beq.w	8006c4a <_printf_i+0x1c2>
 8006ae2:	d808      	bhi.n	8006af6 <_printf_i+0x6e>
 8006ae4:	2a6f      	cmp	r2, #111	; 0x6f
 8006ae6:	d02a      	beq.n	8006b3e <_printf_i+0xb6>
 8006ae8:	2a70      	cmp	r2, #112	; 0x70
 8006aea:	d1e5      	bne.n	8006ab8 <_printf_i+0x30>
 8006aec:	680a      	ldr	r2, [r1, #0]
 8006aee:	f042 0220 	orr.w	r2, r2, #32
 8006af2:	600a      	str	r2, [r1, #0]
 8006af4:	e003      	b.n	8006afe <_printf_i+0x76>
 8006af6:	2a75      	cmp	r2, #117	; 0x75
 8006af8:	d021      	beq.n	8006b3e <_printf_i+0xb6>
 8006afa:	2a78      	cmp	r2, #120	; 0x78
 8006afc:	d1dc      	bne.n	8006ab8 <_printf_i+0x30>
 8006afe:	2278      	movs	r2, #120	; 0x78
 8006b00:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006b04:	496e      	ldr	r1, [pc, #440]	; (8006cc0 <_printf_i+0x238>)
 8006b06:	e064      	b.n	8006bd2 <_printf_i+0x14a>
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006b0e:	1d11      	adds	r1, r2, #4
 8006b10:	6019      	str	r1, [r3, #0]
 8006b12:	6813      	ldr	r3, [r2, #0]
 8006b14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e0a3      	b.n	8006c64 <_printf_i+0x1dc>
 8006b1c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006b20:	f102 0104 	add.w	r1, r2, #4
 8006b24:	6019      	str	r1, [r3, #0]
 8006b26:	d0d7      	beq.n	8006ad8 <_printf_i+0x50>
 8006b28:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	da03      	bge.n	8006b38 <_printf_i+0xb0>
 8006b30:	222d      	movs	r2, #45	; 0x2d
 8006b32:	425b      	negs	r3, r3
 8006b34:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006b38:	4962      	ldr	r1, [pc, #392]	; (8006cc4 <_printf_i+0x23c>)
 8006b3a:	220a      	movs	r2, #10
 8006b3c:	e017      	b.n	8006b6e <_printf_i+0xe6>
 8006b3e:	6820      	ldr	r0, [r4, #0]
 8006b40:	6819      	ldr	r1, [r3, #0]
 8006b42:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006b46:	d003      	beq.n	8006b50 <_printf_i+0xc8>
 8006b48:	1d08      	adds	r0, r1, #4
 8006b4a:	6018      	str	r0, [r3, #0]
 8006b4c:	680b      	ldr	r3, [r1, #0]
 8006b4e:	e006      	b.n	8006b5e <_printf_i+0xd6>
 8006b50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b54:	f101 0004 	add.w	r0, r1, #4
 8006b58:	6018      	str	r0, [r3, #0]
 8006b5a:	d0f7      	beq.n	8006b4c <_printf_i+0xc4>
 8006b5c:	880b      	ldrh	r3, [r1, #0]
 8006b5e:	4959      	ldr	r1, [pc, #356]	; (8006cc4 <_printf_i+0x23c>)
 8006b60:	2a6f      	cmp	r2, #111	; 0x6f
 8006b62:	bf14      	ite	ne
 8006b64:	220a      	movne	r2, #10
 8006b66:	2208      	moveq	r2, #8
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006b6e:	6865      	ldr	r5, [r4, #4]
 8006b70:	60a5      	str	r5, [r4, #8]
 8006b72:	2d00      	cmp	r5, #0
 8006b74:	f2c0 809c 	blt.w	8006cb0 <_printf_i+0x228>
 8006b78:	6820      	ldr	r0, [r4, #0]
 8006b7a:	f020 0004 	bic.w	r0, r0, #4
 8006b7e:	6020      	str	r0, [r4, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d13f      	bne.n	8006c04 <_printf_i+0x17c>
 8006b84:	2d00      	cmp	r5, #0
 8006b86:	f040 8095 	bne.w	8006cb4 <_printf_i+0x22c>
 8006b8a:	4675      	mov	r5, lr
 8006b8c:	2a08      	cmp	r2, #8
 8006b8e:	d10b      	bne.n	8006ba8 <_printf_i+0x120>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	07da      	lsls	r2, r3, #31
 8006b94:	d508      	bpl.n	8006ba8 <_printf_i+0x120>
 8006b96:	6923      	ldr	r3, [r4, #16]
 8006b98:	6862      	ldr	r2, [r4, #4]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	bfde      	ittt	le
 8006b9e:	2330      	movle	r3, #48	; 0x30
 8006ba0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ba4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ba8:	ebae 0305 	sub.w	r3, lr, r5
 8006bac:	6123      	str	r3, [r4, #16]
 8006bae:	f8cd 8000 	str.w	r8, [sp]
 8006bb2:	463b      	mov	r3, r7
 8006bb4:	aa03      	add	r2, sp, #12
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f7ff feef 	bl	800699c <_printf_common>
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	d155      	bne.n	8006c6e <_printf_i+0x1e6>
 8006bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc6:	b005      	add	sp, #20
 8006bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bcc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006bd0:	493c      	ldr	r1, [pc, #240]	; (8006cc4 <_printf_i+0x23c>)
 8006bd2:	6822      	ldr	r2, [r4, #0]
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006bda:	f100 0504 	add.w	r5, r0, #4
 8006bde:	601d      	str	r5, [r3, #0]
 8006be0:	d001      	beq.n	8006be6 <_printf_i+0x15e>
 8006be2:	6803      	ldr	r3, [r0, #0]
 8006be4:	e002      	b.n	8006bec <_printf_i+0x164>
 8006be6:	0655      	lsls	r5, r2, #25
 8006be8:	d5fb      	bpl.n	8006be2 <_printf_i+0x15a>
 8006bea:	8803      	ldrh	r3, [r0, #0]
 8006bec:	07d0      	lsls	r0, r2, #31
 8006bee:	bf44      	itt	mi
 8006bf0:	f042 0220 	orrmi.w	r2, r2, #32
 8006bf4:	6022      	strmi	r2, [r4, #0]
 8006bf6:	b91b      	cbnz	r3, 8006c00 <_printf_i+0x178>
 8006bf8:	6822      	ldr	r2, [r4, #0]
 8006bfa:	f022 0220 	bic.w	r2, r2, #32
 8006bfe:	6022      	str	r2, [r4, #0]
 8006c00:	2210      	movs	r2, #16
 8006c02:	e7b1      	b.n	8006b68 <_printf_i+0xe0>
 8006c04:	4675      	mov	r5, lr
 8006c06:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c0a:	fb02 3310 	mls	r3, r2, r0, r3
 8006c0e:	5ccb      	ldrb	r3, [r1, r3]
 8006c10:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006c14:	4603      	mov	r3, r0
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d1f5      	bne.n	8006c06 <_printf_i+0x17e>
 8006c1a:	e7b7      	b.n	8006b8c <_printf_i+0x104>
 8006c1c:	6808      	ldr	r0, [r1, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	6949      	ldr	r1, [r1, #20]
 8006c22:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006c26:	d004      	beq.n	8006c32 <_printf_i+0x1aa>
 8006c28:	1d10      	adds	r0, r2, #4
 8006c2a:	6018      	str	r0, [r3, #0]
 8006c2c:	6813      	ldr	r3, [r2, #0]
 8006c2e:	6019      	str	r1, [r3, #0]
 8006c30:	e007      	b.n	8006c42 <_printf_i+0x1ba>
 8006c32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c36:	f102 0004 	add.w	r0, r2, #4
 8006c3a:	6018      	str	r0, [r3, #0]
 8006c3c:	6813      	ldr	r3, [r2, #0]
 8006c3e:	d0f6      	beq.n	8006c2e <_printf_i+0x1a6>
 8006c40:	8019      	strh	r1, [r3, #0]
 8006c42:	2300      	movs	r3, #0
 8006c44:	6123      	str	r3, [r4, #16]
 8006c46:	4675      	mov	r5, lr
 8006c48:	e7b1      	b.n	8006bae <_printf_i+0x126>
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	1d11      	adds	r1, r2, #4
 8006c4e:	6019      	str	r1, [r3, #0]
 8006c50:	6815      	ldr	r5, [r2, #0]
 8006c52:	6862      	ldr	r2, [r4, #4]
 8006c54:	2100      	movs	r1, #0
 8006c56:	4628      	mov	r0, r5
 8006c58:	f7f9 fad2 	bl	8000200 <memchr>
 8006c5c:	b108      	cbz	r0, 8006c62 <_printf_i+0x1da>
 8006c5e:	1b40      	subs	r0, r0, r5
 8006c60:	6060      	str	r0, [r4, #4]
 8006c62:	6863      	ldr	r3, [r4, #4]
 8006c64:	6123      	str	r3, [r4, #16]
 8006c66:	2300      	movs	r3, #0
 8006c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c6c:	e79f      	b.n	8006bae <_printf_i+0x126>
 8006c6e:	6923      	ldr	r3, [r4, #16]
 8006c70:	462a      	mov	r2, r5
 8006c72:	4639      	mov	r1, r7
 8006c74:	4630      	mov	r0, r6
 8006c76:	47c0      	blx	r8
 8006c78:	3001      	adds	r0, #1
 8006c7a:	d0a2      	beq.n	8006bc2 <_printf_i+0x13a>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	079b      	lsls	r3, r3, #30
 8006c80:	d507      	bpl.n	8006c92 <_printf_i+0x20a>
 8006c82:	2500      	movs	r5, #0
 8006c84:	f104 0919 	add.w	r9, r4, #25
 8006c88:	68e3      	ldr	r3, [r4, #12]
 8006c8a:	9a03      	ldr	r2, [sp, #12]
 8006c8c:	1a9b      	subs	r3, r3, r2
 8006c8e:	429d      	cmp	r5, r3
 8006c90:	db05      	blt.n	8006c9e <_printf_i+0x216>
 8006c92:	68e0      	ldr	r0, [r4, #12]
 8006c94:	9b03      	ldr	r3, [sp, #12]
 8006c96:	4298      	cmp	r0, r3
 8006c98:	bfb8      	it	lt
 8006c9a:	4618      	movlt	r0, r3
 8006c9c:	e793      	b.n	8006bc6 <_printf_i+0x13e>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	464a      	mov	r2, r9
 8006ca2:	4639      	mov	r1, r7
 8006ca4:	4630      	mov	r0, r6
 8006ca6:	47c0      	blx	r8
 8006ca8:	3001      	adds	r0, #1
 8006caa:	d08a      	beq.n	8006bc2 <_printf_i+0x13a>
 8006cac:	3501      	adds	r5, #1
 8006cae:	e7eb      	b.n	8006c88 <_printf_i+0x200>
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1a7      	bne.n	8006c04 <_printf_i+0x17c>
 8006cb4:	780b      	ldrb	r3, [r1, #0]
 8006cb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cbe:	e765      	b.n	8006b8c <_printf_i+0x104>
 8006cc0:	08007c76 	.word	0x08007c76
 8006cc4:	08007c65 	.word	0x08007c65

08006cc8 <_sbrk_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	4c06      	ldr	r4, [pc, #24]	; (8006ce4 <_sbrk_r+0x1c>)
 8006ccc:	2300      	movs	r3, #0
 8006cce:	4605      	mov	r5, r0
 8006cd0:	4608      	mov	r0, r1
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	f000 fe94 	bl	8007a00 <_sbrk>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d102      	bne.n	8006ce2 <_sbrk_r+0x1a>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	b103      	cbz	r3, 8006ce2 <_sbrk_r+0x1a>
 8006ce0:	602b      	str	r3, [r5, #0]
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	20000838 	.word	0x20000838

08006ce8 <siscanf>:
 8006ce8:	b40e      	push	{r1, r2, r3}
 8006cea:	b530      	push	{r4, r5, lr}
 8006cec:	b09c      	sub	sp, #112	; 0x70
 8006cee:	ac1f      	add	r4, sp, #124	; 0x7c
 8006cf0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006cf4:	f854 5b04 	ldr.w	r5, [r4], #4
 8006cf8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006cfc:	9002      	str	r0, [sp, #8]
 8006cfe:	9006      	str	r0, [sp, #24]
 8006d00:	f7f9 fa66 	bl	80001d0 <strlen>
 8006d04:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <siscanf+0x4c>)
 8006d06:	9003      	str	r0, [sp, #12]
 8006d08:	9007      	str	r0, [sp, #28]
 8006d0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d0c:	480a      	ldr	r0, [pc, #40]	; (8006d38 <siscanf+0x50>)
 8006d0e:	9401      	str	r4, [sp, #4]
 8006d10:	2300      	movs	r3, #0
 8006d12:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d14:	9314      	str	r3, [sp, #80]	; 0x50
 8006d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d1e:	462a      	mov	r2, r5
 8006d20:	4623      	mov	r3, r4
 8006d22:	a902      	add	r1, sp, #8
 8006d24:	6800      	ldr	r0, [r0, #0]
 8006d26:	f000 f999 	bl	800705c <__ssvfiscanf_r>
 8006d2a:	b01c      	add	sp, #112	; 0x70
 8006d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d30:	b003      	add	sp, #12
 8006d32:	4770      	bx	lr
 8006d34:	08006d3d 	.word	0x08006d3d
 8006d38:	20000050 	.word	0x20000050

08006d3c <__seofread>:
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	4770      	bx	lr

08006d40 <strcpy>:
 8006d40:	4603      	mov	r3, r0
 8006d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d46:	f803 2b01 	strb.w	r2, [r3], #1
 8006d4a:	2a00      	cmp	r2, #0
 8006d4c:	d1f9      	bne.n	8006d42 <strcpy+0x2>
 8006d4e:	4770      	bx	lr

08006d50 <strncmp>:
 8006d50:	b510      	push	{r4, lr}
 8006d52:	b16a      	cbz	r2, 8006d70 <strncmp+0x20>
 8006d54:	3901      	subs	r1, #1
 8006d56:	1884      	adds	r4, r0, r2
 8006d58:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d5c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d103      	bne.n	8006d6c <strncmp+0x1c>
 8006d64:	42a0      	cmp	r0, r4
 8006d66:	d001      	beq.n	8006d6c <strncmp+0x1c>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1f5      	bne.n	8006d58 <strncmp+0x8>
 8006d6c:	1a98      	subs	r0, r3, r2
 8006d6e:	bd10      	pop	{r4, pc}
 8006d70:	4610      	mov	r0, r2
 8006d72:	bd10      	pop	{r4, pc}

08006d74 <_strtoul_l.isra.0>:
 8006d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d78:	4680      	mov	r8, r0
 8006d7a:	4689      	mov	r9, r1
 8006d7c:	4692      	mov	sl, r2
 8006d7e:	461e      	mov	r6, r3
 8006d80:	460f      	mov	r7, r1
 8006d82:	463d      	mov	r5, r7
 8006d84:	9808      	ldr	r0, [sp, #32]
 8006d86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d8a:	f000 f89b 	bl	8006ec4 <__locale_ctype_ptr_l>
 8006d8e:	4420      	add	r0, r4
 8006d90:	7843      	ldrb	r3, [r0, #1]
 8006d92:	f013 0308 	ands.w	r3, r3, #8
 8006d96:	d10a      	bne.n	8006dae <_strtoul_l.isra.0+0x3a>
 8006d98:	2c2d      	cmp	r4, #45	; 0x2d
 8006d9a:	d10a      	bne.n	8006db2 <_strtoul_l.isra.0+0x3e>
 8006d9c:	782c      	ldrb	r4, [r5, #0]
 8006d9e:	2301      	movs	r3, #1
 8006da0:	1cbd      	adds	r5, r7, #2
 8006da2:	b15e      	cbz	r6, 8006dbc <_strtoul_l.isra.0+0x48>
 8006da4:	2e10      	cmp	r6, #16
 8006da6:	d113      	bne.n	8006dd0 <_strtoul_l.isra.0+0x5c>
 8006da8:	2c30      	cmp	r4, #48	; 0x30
 8006daa:	d009      	beq.n	8006dc0 <_strtoul_l.isra.0+0x4c>
 8006dac:	e010      	b.n	8006dd0 <_strtoul_l.isra.0+0x5c>
 8006dae:	462f      	mov	r7, r5
 8006db0:	e7e7      	b.n	8006d82 <_strtoul_l.isra.0+0xe>
 8006db2:	2c2b      	cmp	r4, #43	; 0x2b
 8006db4:	bf04      	itt	eq
 8006db6:	782c      	ldrbeq	r4, [r5, #0]
 8006db8:	1cbd      	addeq	r5, r7, #2
 8006dba:	e7f2      	b.n	8006da2 <_strtoul_l.isra.0+0x2e>
 8006dbc:	2c30      	cmp	r4, #48	; 0x30
 8006dbe:	d125      	bne.n	8006e0c <_strtoul_l.isra.0+0x98>
 8006dc0:	782a      	ldrb	r2, [r5, #0]
 8006dc2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006dc6:	2a58      	cmp	r2, #88	; 0x58
 8006dc8:	d14a      	bne.n	8006e60 <_strtoul_l.isra.0+0xec>
 8006dca:	786c      	ldrb	r4, [r5, #1]
 8006dcc:	2610      	movs	r6, #16
 8006dce:	3502      	adds	r5, #2
 8006dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8006dd4:	2700      	movs	r7, #0
 8006dd6:	fbb1 f1f6 	udiv	r1, r1, r6
 8006dda:	fb06 fe01 	mul.w	lr, r6, r1
 8006dde:	ea6f 0e0e 	mvn.w	lr, lr
 8006de2:	4638      	mov	r0, r7
 8006de4:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8006de8:	2a09      	cmp	r2, #9
 8006dea:	d811      	bhi.n	8006e10 <_strtoul_l.isra.0+0x9c>
 8006dec:	4614      	mov	r4, r2
 8006dee:	42a6      	cmp	r6, r4
 8006df0:	dd1d      	ble.n	8006e2e <_strtoul_l.isra.0+0xba>
 8006df2:	2f00      	cmp	r7, #0
 8006df4:	db18      	blt.n	8006e28 <_strtoul_l.isra.0+0xb4>
 8006df6:	4281      	cmp	r1, r0
 8006df8:	d316      	bcc.n	8006e28 <_strtoul_l.isra.0+0xb4>
 8006dfa:	d101      	bne.n	8006e00 <_strtoul_l.isra.0+0x8c>
 8006dfc:	45a6      	cmp	lr, r4
 8006dfe:	db13      	blt.n	8006e28 <_strtoul_l.isra.0+0xb4>
 8006e00:	fb00 4006 	mla	r0, r0, r6, r4
 8006e04:	2701      	movs	r7, #1
 8006e06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e0a:	e7eb      	b.n	8006de4 <_strtoul_l.isra.0+0x70>
 8006e0c:	260a      	movs	r6, #10
 8006e0e:	e7df      	b.n	8006dd0 <_strtoul_l.isra.0+0x5c>
 8006e10:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8006e14:	2a19      	cmp	r2, #25
 8006e16:	d801      	bhi.n	8006e1c <_strtoul_l.isra.0+0xa8>
 8006e18:	3c37      	subs	r4, #55	; 0x37
 8006e1a:	e7e8      	b.n	8006dee <_strtoul_l.isra.0+0x7a>
 8006e1c:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8006e20:	2a19      	cmp	r2, #25
 8006e22:	d804      	bhi.n	8006e2e <_strtoul_l.isra.0+0xba>
 8006e24:	3c57      	subs	r4, #87	; 0x57
 8006e26:	e7e2      	b.n	8006dee <_strtoul_l.isra.0+0x7a>
 8006e28:	f04f 37ff 	mov.w	r7, #4294967295
 8006e2c:	e7eb      	b.n	8006e06 <_strtoul_l.isra.0+0x92>
 8006e2e:	2f00      	cmp	r7, #0
 8006e30:	da09      	bge.n	8006e46 <_strtoul_l.isra.0+0xd2>
 8006e32:	2322      	movs	r3, #34	; 0x22
 8006e34:	f8c8 3000 	str.w	r3, [r8]
 8006e38:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3c:	f1ba 0f00 	cmp.w	sl, #0
 8006e40:	d107      	bne.n	8006e52 <_strtoul_l.isra.0+0xde>
 8006e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e46:	b103      	cbz	r3, 8006e4a <_strtoul_l.isra.0+0xd6>
 8006e48:	4240      	negs	r0, r0
 8006e4a:	f1ba 0f00 	cmp.w	sl, #0
 8006e4e:	d00c      	beq.n	8006e6a <_strtoul_l.isra.0+0xf6>
 8006e50:	b127      	cbz	r7, 8006e5c <_strtoul_l.isra.0+0xe8>
 8006e52:	3d01      	subs	r5, #1
 8006e54:	f8ca 5000 	str.w	r5, [sl]
 8006e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e5c:	464d      	mov	r5, r9
 8006e5e:	e7f9      	b.n	8006e54 <_strtoul_l.isra.0+0xe0>
 8006e60:	2430      	movs	r4, #48	; 0x30
 8006e62:	2e00      	cmp	r6, #0
 8006e64:	d1b4      	bne.n	8006dd0 <_strtoul_l.isra.0+0x5c>
 8006e66:	2608      	movs	r6, #8
 8006e68:	e7b2      	b.n	8006dd0 <_strtoul_l.isra.0+0x5c>
 8006e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006e70 <_strtoul_r>:
 8006e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e72:	4c06      	ldr	r4, [pc, #24]	; (8006e8c <_strtoul_r+0x1c>)
 8006e74:	4d06      	ldr	r5, [pc, #24]	; (8006e90 <_strtoul_r+0x20>)
 8006e76:	6824      	ldr	r4, [r4, #0]
 8006e78:	6a24      	ldr	r4, [r4, #32]
 8006e7a:	2c00      	cmp	r4, #0
 8006e7c:	bf08      	it	eq
 8006e7e:	462c      	moveq	r4, r5
 8006e80:	9400      	str	r4, [sp, #0]
 8006e82:	f7ff ff77 	bl	8006d74 <_strtoul_l.isra.0>
 8006e86:	b003      	add	sp, #12
 8006e88:	bd30      	pop	{r4, r5, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000050 	.word	0x20000050
 8006e90:	200000b8 	.word	0x200000b8

08006e94 <strtoul>:
 8006e94:	4b08      	ldr	r3, [pc, #32]	; (8006eb8 <strtoul+0x24>)
 8006e96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e98:	681c      	ldr	r4, [r3, #0]
 8006e9a:	4d08      	ldr	r5, [pc, #32]	; (8006ebc <strtoul+0x28>)
 8006e9c:	6a23      	ldr	r3, [r4, #32]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	bf08      	it	eq
 8006ea2:	462b      	moveq	r3, r5
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	460a      	mov	r2, r1
 8006eaa:	4601      	mov	r1, r0
 8006eac:	4620      	mov	r0, r4
 8006eae:	f7ff ff61 	bl	8006d74 <_strtoul_l.isra.0>
 8006eb2:	b003      	add	sp, #12
 8006eb4:	bd30      	pop	{r4, r5, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20000050 	.word	0x20000050
 8006ebc:	200000b8 	.word	0x200000b8

08006ec0 <__env_lock>:
 8006ec0:	4770      	bx	lr

08006ec2 <__env_unlock>:
 8006ec2:	4770      	bx	lr

08006ec4 <__locale_ctype_ptr_l>:
 8006ec4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006ec8:	4770      	bx	lr
	...

08006ecc <__locale_ctype_ptr>:
 8006ecc:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <__locale_ctype_ptr+0x14>)
 8006ece:	4a05      	ldr	r2, [pc, #20]	; (8006ee4 <__locale_ctype_ptr+0x18>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bf08      	it	eq
 8006ed8:	4613      	moveq	r3, r2
 8006eda:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006ede:	4770      	bx	lr
 8006ee0:	20000050 	.word	0x20000050
 8006ee4:	200000b8 	.word	0x200000b8

08006ee8 <__ascii_mbtowc>:
 8006ee8:	b082      	sub	sp, #8
 8006eea:	b901      	cbnz	r1, 8006eee <__ascii_mbtowc+0x6>
 8006eec:	a901      	add	r1, sp, #4
 8006eee:	b142      	cbz	r2, 8006f02 <__ascii_mbtowc+0x1a>
 8006ef0:	b14b      	cbz	r3, 8006f06 <__ascii_mbtowc+0x1e>
 8006ef2:	7813      	ldrb	r3, [r2, #0]
 8006ef4:	600b      	str	r3, [r1, #0]
 8006ef6:	7812      	ldrb	r2, [r2, #0]
 8006ef8:	1c10      	adds	r0, r2, #0
 8006efa:	bf18      	it	ne
 8006efc:	2001      	movne	r0, #1
 8006efe:	b002      	add	sp, #8
 8006f00:	4770      	bx	lr
 8006f02:	4610      	mov	r0, r2
 8006f04:	e7fb      	b.n	8006efe <__ascii_mbtowc+0x16>
 8006f06:	f06f 0001 	mvn.w	r0, #1
 8006f0a:	e7f8      	b.n	8006efe <__ascii_mbtowc+0x16>

08006f0c <memcpy>:
 8006f0c:	b510      	push	{r4, lr}
 8006f0e:	1e43      	subs	r3, r0, #1
 8006f10:	440a      	add	r2, r1
 8006f12:	4291      	cmp	r1, r2
 8006f14:	d100      	bne.n	8006f18 <memcpy+0xc>
 8006f16:	bd10      	pop	{r4, pc}
 8006f18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f20:	e7f7      	b.n	8006f12 <memcpy+0x6>

08006f22 <memmove>:
 8006f22:	4288      	cmp	r0, r1
 8006f24:	b510      	push	{r4, lr}
 8006f26:	eb01 0302 	add.w	r3, r1, r2
 8006f2a:	d803      	bhi.n	8006f34 <memmove+0x12>
 8006f2c:	1e42      	subs	r2, r0, #1
 8006f2e:	4299      	cmp	r1, r3
 8006f30:	d10c      	bne.n	8006f4c <memmove+0x2a>
 8006f32:	bd10      	pop	{r4, pc}
 8006f34:	4298      	cmp	r0, r3
 8006f36:	d2f9      	bcs.n	8006f2c <memmove+0xa>
 8006f38:	1881      	adds	r1, r0, r2
 8006f3a:	1ad2      	subs	r2, r2, r3
 8006f3c:	42d3      	cmn	r3, r2
 8006f3e:	d100      	bne.n	8006f42 <memmove+0x20>
 8006f40:	bd10      	pop	{r4, pc}
 8006f42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f46:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006f4a:	e7f7      	b.n	8006f3c <memmove+0x1a>
 8006f4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f50:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006f54:	e7eb      	b.n	8006f2e <memmove+0xc>

08006f56 <__malloc_lock>:
 8006f56:	4770      	bx	lr

08006f58 <__malloc_unlock>:
 8006f58:	4770      	bx	lr

08006f5a <_realloc_r>:
 8006f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	4614      	mov	r4, r2
 8006f60:	460e      	mov	r6, r1
 8006f62:	b921      	cbnz	r1, 8006f6e <_realloc_r+0x14>
 8006f64:	4611      	mov	r1, r2
 8006f66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f6a:	f7ff bb69 	b.w	8006640 <_malloc_r>
 8006f6e:	b922      	cbnz	r2, 8006f7a <_realloc_r+0x20>
 8006f70:	f7ff fb18 	bl	80065a4 <_free_r>
 8006f74:	4625      	mov	r5, r4
 8006f76:	4628      	mov	r0, r5
 8006f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f7a:	f000 fc25 	bl	80077c8 <_malloc_usable_size_r>
 8006f7e:	4284      	cmp	r4, r0
 8006f80:	d90f      	bls.n	8006fa2 <_realloc_r+0x48>
 8006f82:	4621      	mov	r1, r4
 8006f84:	4638      	mov	r0, r7
 8006f86:	f7ff fb5b 	bl	8006640 <_malloc_r>
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d0f2      	beq.n	8006f76 <_realloc_r+0x1c>
 8006f90:	4631      	mov	r1, r6
 8006f92:	4622      	mov	r2, r4
 8006f94:	f7ff ffba 	bl	8006f0c <memcpy>
 8006f98:	4631      	mov	r1, r6
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	f7ff fb02 	bl	80065a4 <_free_r>
 8006fa0:	e7e9      	b.n	8006f76 <_realloc_r+0x1c>
 8006fa2:	4635      	mov	r5, r6
 8006fa4:	e7e7      	b.n	8006f76 <_realloc_r+0x1c>

08006fa6 <_sungetc_r>:
 8006fa6:	b538      	push	{r3, r4, r5, lr}
 8006fa8:	1c4b      	adds	r3, r1, #1
 8006faa:	4614      	mov	r4, r2
 8006fac:	d103      	bne.n	8006fb6 <_sungetc_r+0x10>
 8006fae:	f04f 35ff 	mov.w	r5, #4294967295
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	bd38      	pop	{r3, r4, r5, pc}
 8006fb6:	8993      	ldrh	r3, [r2, #12]
 8006fb8:	f023 0320 	bic.w	r3, r3, #32
 8006fbc:	8193      	strh	r3, [r2, #12]
 8006fbe:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8006fc0:	6852      	ldr	r2, [r2, #4]
 8006fc2:	b2cd      	uxtb	r5, r1
 8006fc4:	b18b      	cbz	r3, 8006fea <_sungetc_r+0x44>
 8006fc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	da08      	bge.n	8006fde <_sungetc_r+0x38>
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	1e5a      	subs	r2, r3, #1
 8006fd0:	6022      	str	r2, [r4, #0]
 8006fd2:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006fd6:	6863      	ldr	r3, [r4, #4]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	6063      	str	r3, [r4, #4]
 8006fdc:	e7e9      	b.n	8006fb2 <_sungetc_r+0xc>
 8006fde:	4621      	mov	r1, r4
 8006fe0:	f000 fbaa 	bl	8007738 <__submore>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d0f1      	beq.n	8006fcc <_sungetc_r+0x26>
 8006fe8:	e7e1      	b.n	8006fae <_sungetc_r+0x8>
 8006fea:	6921      	ldr	r1, [r4, #16]
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	b151      	cbz	r1, 8007006 <_sungetc_r+0x60>
 8006ff0:	4299      	cmp	r1, r3
 8006ff2:	d208      	bcs.n	8007006 <_sungetc_r+0x60>
 8006ff4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006ff8:	428d      	cmp	r5, r1
 8006ffa:	d104      	bne.n	8007006 <_sungetc_r+0x60>
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	3201      	adds	r2, #1
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	6062      	str	r2, [r4, #4]
 8007004:	e7d5      	b.n	8006fb2 <_sungetc_r+0xc>
 8007006:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800700c:	6363      	str	r3, [r4, #52]	; 0x34
 800700e:	2303      	movs	r3, #3
 8007010:	63a3      	str	r3, [r4, #56]	; 0x38
 8007012:	4623      	mov	r3, r4
 8007014:	6422      	str	r2, [r4, #64]	; 0x40
 8007016:	f803 5f46 	strb.w	r5, [r3, #70]!
 800701a:	6023      	str	r3, [r4, #0]
 800701c:	2301      	movs	r3, #1
 800701e:	e7dc      	b.n	8006fda <_sungetc_r+0x34>

08007020 <__ssrefill_r>:
 8007020:	b510      	push	{r4, lr}
 8007022:	460c      	mov	r4, r1
 8007024:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007026:	b169      	cbz	r1, 8007044 <__ssrefill_r+0x24>
 8007028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800702c:	4299      	cmp	r1, r3
 800702e:	d001      	beq.n	8007034 <__ssrefill_r+0x14>
 8007030:	f7ff fab8 	bl	80065a4 <_free_r>
 8007034:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007036:	6063      	str	r3, [r4, #4]
 8007038:	2000      	movs	r0, #0
 800703a:	6360      	str	r0, [r4, #52]	; 0x34
 800703c:	b113      	cbz	r3, 8007044 <__ssrefill_r+0x24>
 800703e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	bd10      	pop	{r4, pc}
 8007044:	6923      	ldr	r3, [r4, #16]
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	2300      	movs	r3, #0
 800704a:	6063      	str	r3, [r4, #4]
 800704c:	89a3      	ldrh	r3, [r4, #12]
 800704e:	f043 0320 	orr.w	r3, r3, #32
 8007052:	81a3      	strh	r3, [r4, #12]
 8007054:	f04f 30ff 	mov.w	r0, #4294967295
 8007058:	bd10      	pop	{r4, pc}
	...

0800705c <__ssvfiscanf_r>:
 800705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007060:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8007064:	f10d 080c 	add.w	r8, sp, #12
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	2300      	movs	r3, #0
 800706c:	9346      	str	r3, [sp, #280]	; 0x118
 800706e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007070:	4ba0      	ldr	r3, [pc, #640]	; (80072f4 <__ssvfiscanf_r+0x298>)
 8007072:	93a2      	str	r3, [sp, #648]	; 0x288
 8007074:	f8df 9284 	ldr.w	r9, [pc, #644]	; 80072fc <__ssvfiscanf_r+0x2a0>
 8007078:	4b9f      	ldr	r3, [pc, #636]	; (80072f8 <__ssvfiscanf_r+0x29c>)
 800707a:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800707e:	4606      	mov	r6, r0
 8007080:	460c      	mov	r4, r1
 8007082:	93a3      	str	r3, [sp, #652]	; 0x28c
 8007084:	4692      	mov	sl, r2
 8007086:	270a      	movs	r7, #10
 8007088:	f89a 3000 	ldrb.w	r3, [sl]
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 812f 	beq.w	80072f0 <__ssvfiscanf_r+0x294>
 8007092:	f7ff ff1b 	bl	8006ecc <__locale_ctype_ptr>
 8007096:	f89a b000 	ldrb.w	fp, [sl]
 800709a:	4458      	add	r0, fp
 800709c:	7843      	ldrb	r3, [r0, #1]
 800709e:	f013 0308 	ands.w	r3, r3, #8
 80070a2:	d143      	bne.n	800712c <__ssvfiscanf_r+0xd0>
 80070a4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80070a8:	f10a 0501 	add.w	r5, sl, #1
 80070ac:	f040 8099 	bne.w	80071e2 <__ssvfiscanf_r+0x186>
 80070b0:	9345      	str	r3, [sp, #276]	; 0x114
 80070b2:	9343      	str	r3, [sp, #268]	; 0x10c
 80070b4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80070b8:	2b2a      	cmp	r3, #42	; 0x2a
 80070ba:	d103      	bne.n	80070c4 <__ssvfiscanf_r+0x68>
 80070bc:	2310      	movs	r3, #16
 80070be:	9343      	str	r3, [sp, #268]	; 0x10c
 80070c0:	f10a 0502 	add.w	r5, sl, #2
 80070c4:	7829      	ldrb	r1, [r5, #0]
 80070c6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80070ca:	2a09      	cmp	r2, #9
 80070cc:	46aa      	mov	sl, r5
 80070ce:	f105 0501 	add.w	r5, r5, #1
 80070d2:	d941      	bls.n	8007158 <__ssvfiscanf_r+0xfc>
 80070d4:	2203      	movs	r2, #3
 80070d6:	4889      	ldr	r0, [pc, #548]	; (80072fc <__ssvfiscanf_r+0x2a0>)
 80070d8:	f7f9 f892 	bl	8000200 <memchr>
 80070dc:	b138      	cbz	r0, 80070ee <__ssvfiscanf_r+0x92>
 80070de:	eba0 0309 	sub.w	r3, r0, r9
 80070e2:	2001      	movs	r0, #1
 80070e4:	4098      	lsls	r0, r3
 80070e6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80070e8:	4318      	orrs	r0, r3
 80070ea:	9043      	str	r0, [sp, #268]	; 0x10c
 80070ec:	46aa      	mov	sl, r5
 80070ee:	f89a 3000 	ldrb.w	r3, [sl]
 80070f2:	2b67      	cmp	r3, #103	; 0x67
 80070f4:	f10a 0501 	add.w	r5, sl, #1
 80070f8:	d84a      	bhi.n	8007190 <__ssvfiscanf_r+0x134>
 80070fa:	2b65      	cmp	r3, #101	; 0x65
 80070fc:	f080 80b7 	bcs.w	800726e <__ssvfiscanf_r+0x212>
 8007100:	2b47      	cmp	r3, #71	; 0x47
 8007102:	d82f      	bhi.n	8007164 <__ssvfiscanf_r+0x108>
 8007104:	2b45      	cmp	r3, #69	; 0x45
 8007106:	f080 80b2 	bcs.w	800726e <__ssvfiscanf_r+0x212>
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 8082 	beq.w	8007214 <__ssvfiscanf_r+0x1b8>
 8007110:	2b25      	cmp	r3, #37	; 0x25
 8007112:	d066      	beq.n	80071e2 <__ssvfiscanf_r+0x186>
 8007114:	2303      	movs	r3, #3
 8007116:	9349      	str	r3, [sp, #292]	; 0x124
 8007118:	9744      	str	r7, [sp, #272]	; 0x110
 800711a:	e045      	b.n	80071a8 <__ssvfiscanf_r+0x14c>
 800711c:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800711e:	3101      	adds	r1, #1
 8007120:	9147      	str	r1, [sp, #284]	; 0x11c
 8007122:	6861      	ldr	r1, [r4, #4]
 8007124:	3301      	adds	r3, #1
 8007126:	3901      	subs	r1, #1
 8007128:	6061      	str	r1, [r4, #4]
 800712a:	6023      	str	r3, [r4, #0]
 800712c:	6863      	ldr	r3, [r4, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	dd0b      	ble.n	800714a <__ssvfiscanf_r+0xee>
 8007132:	f7ff fecb 	bl	8006ecc <__locale_ctype_ptr>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	7819      	ldrb	r1, [r3, #0]
 800713a:	4408      	add	r0, r1
 800713c:	7841      	ldrb	r1, [r0, #1]
 800713e:	070d      	lsls	r5, r1, #28
 8007140:	d4ec      	bmi.n	800711c <__ssvfiscanf_r+0xc0>
 8007142:	f10a 0501 	add.w	r5, sl, #1
 8007146:	46aa      	mov	sl, r5
 8007148:	e79e      	b.n	8007088 <__ssvfiscanf_r+0x2c>
 800714a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800714c:	4621      	mov	r1, r4
 800714e:	4630      	mov	r0, r6
 8007150:	4798      	blx	r3
 8007152:	2800      	cmp	r0, #0
 8007154:	d0ed      	beq.n	8007132 <__ssvfiscanf_r+0xd6>
 8007156:	e7f4      	b.n	8007142 <__ssvfiscanf_r+0xe6>
 8007158:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800715a:	fb07 1303 	mla	r3, r7, r3, r1
 800715e:	3b30      	subs	r3, #48	; 0x30
 8007160:	9345      	str	r3, [sp, #276]	; 0x114
 8007162:	e7af      	b.n	80070c4 <__ssvfiscanf_r+0x68>
 8007164:	2b5b      	cmp	r3, #91	; 0x5b
 8007166:	d061      	beq.n	800722c <__ssvfiscanf_r+0x1d0>
 8007168:	d80c      	bhi.n	8007184 <__ssvfiscanf_r+0x128>
 800716a:	2b58      	cmp	r3, #88	; 0x58
 800716c:	d1d2      	bne.n	8007114 <__ssvfiscanf_r+0xb8>
 800716e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8007170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007174:	9243      	str	r2, [sp, #268]	; 0x10c
 8007176:	2210      	movs	r2, #16
 8007178:	9244      	str	r2, [sp, #272]	; 0x110
 800717a:	2b6f      	cmp	r3, #111	; 0x6f
 800717c:	bfb4      	ite	lt
 800717e:	2303      	movlt	r3, #3
 8007180:	2304      	movge	r3, #4
 8007182:	e010      	b.n	80071a6 <__ssvfiscanf_r+0x14a>
 8007184:	2b63      	cmp	r3, #99	; 0x63
 8007186:	d05c      	beq.n	8007242 <__ssvfiscanf_r+0x1e6>
 8007188:	2b64      	cmp	r3, #100	; 0x64
 800718a:	d1c3      	bne.n	8007114 <__ssvfiscanf_r+0xb8>
 800718c:	9744      	str	r7, [sp, #272]	; 0x110
 800718e:	e7f4      	b.n	800717a <__ssvfiscanf_r+0x11e>
 8007190:	2b70      	cmp	r3, #112	; 0x70
 8007192:	d042      	beq.n	800721a <__ssvfiscanf_r+0x1be>
 8007194:	d81d      	bhi.n	80071d2 <__ssvfiscanf_r+0x176>
 8007196:	2b6e      	cmp	r3, #110	; 0x6e
 8007198:	d059      	beq.n	800724e <__ssvfiscanf_r+0x1f2>
 800719a:	d843      	bhi.n	8007224 <__ssvfiscanf_r+0x1c8>
 800719c:	2b69      	cmp	r3, #105	; 0x69
 800719e:	d1b9      	bne.n	8007114 <__ssvfiscanf_r+0xb8>
 80071a0:	2300      	movs	r3, #0
 80071a2:	9344      	str	r3, [sp, #272]	; 0x110
 80071a4:	2303      	movs	r3, #3
 80071a6:	9349      	str	r3, [sp, #292]	; 0x124
 80071a8:	6863      	ldr	r3, [r4, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	dd61      	ble.n	8007272 <__ssvfiscanf_r+0x216>
 80071ae:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80071b0:	0659      	lsls	r1, r3, #25
 80071b2:	d56f      	bpl.n	8007294 <__ssvfiscanf_r+0x238>
 80071b4:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	dc7c      	bgt.n	80072b4 <__ssvfiscanf_r+0x258>
 80071ba:	ab01      	add	r3, sp, #4
 80071bc:	4622      	mov	r2, r4
 80071be:	a943      	add	r1, sp, #268	; 0x10c
 80071c0:	4630      	mov	r0, r6
 80071c2:	f000 f89f 	bl	8007304 <_scanf_chars>
 80071c6:	2801      	cmp	r0, #1
 80071c8:	f000 8092 	beq.w	80072f0 <__ssvfiscanf_r+0x294>
 80071cc:	2802      	cmp	r0, #2
 80071ce:	d1ba      	bne.n	8007146 <__ssvfiscanf_r+0xea>
 80071d0:	e01d      	b.n	800720e <__ssvfiscanf_r+0x1b2>
 80071d2:	2b75      	cmp	r3, #117	; 0x75
 80071d4:	d0da      	beq.n	800718c <__ssvfiscanf_r+0x130>
 80071d6:	2b78      	cmp	r3, #120	; 0x78
 80071d8:	d0c9      	beq.n	800716e <__ssvfiscanf_r+0x112>
 80071da:	2b73      	cmp	r3, #115	; 0x73
 80071dc:	d19a      	bne.n	8007114 <__ssvfiscanf_r+0xb8>
 80071de:	2302      	movs	r3, #2
 80071e0:	e7e1      	b.n	80071a6 <__ssvfiscanf_r+0x14a>
 80071e2:	6863      	ldr	r3, [r4, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	dd0c      	ble.n	8007202 <__ssvfiscanf_r+0x1a6>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	781a      	ldrb	r2, [r3, #0]
 80071ec:	4593      	cmp	fp, r2
 80071ee:	d17f      	bne.n	80072f0 <__ssvfiscanf_r+0x294>
 80071f0:	3301      	adds	r3, #1
 80071f2:	6862      	ldr	r2, [r4, #4]
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80071f8:	3a01      	subs	r2, #1
 80071fa:	3301      	adds	r3, #1
 80071fc:	6062      	str	r2, [r4, #4]
 80071fe:	9347      	str	r3, [sp, #284]	; 0x11c
 8007200:	e7a1      	b.n	8007146 <__ssvfiscanf_r+0xea>
 8007202:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8007204:	4621      	mov	r1, r4
 8007206:	4630      	mov	r0, r6
 8007208:	4798      	blx	r3
 800720a:	2800      	cmp	r0, #0
 800720c:	d0ec      	beq.n	80071e8 <__ssvfiscanf_r+0x18c>
 800720e:	9846      	ldr	r0, [sp, #280]	; 0x118
 8007210:	2800      	cmp	r0, #0
 8007212:	d163      	bne.n	80072dc <__ssvfiscanf_r+0x280>
 8007214:	f04f 30ff 	mov.w	r0, #4294967295
 8007218:	e066      	b.n	80072e8 <__ssvfiscanf_r+0x28c>
 800721a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800721c:	f042 0220 	orr.w	r2, r2, #32
 8007220:	9243      	str	r2, [sp, #268]	; 0x10c
 8007222:	e7a4      	b.n	800716e <__ssvfiscanf_r+0x112>
 8007224:	2308      	movs	r3, #8
 8007226:	9344      	str	r3, [sp, #272]	; 0x110
 8007228:	2304      	movs	r3, #4
 800722a:	e7bc      	b.n	80071a6 <__ssvfiscanf_r+0x14a>
 800722c:	4629      	mov	r1, r5
 800722e:	4640      	mov	r0, r8
 8007230:	f000 f9c0 	bl	80075b4 <__sccl>
 8007234:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800723a:	9343      	str	r3, [sp, #268]	; 0x10c
 800723c:	4605      	mov	r5, r0
 800723e:	2301      	movs	r3, #1
 8007240:	e7b1      	b.n	80071a6 <__ssvfiscanf_r+0x14a>
 8007242:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007248:	9343      	str	r3, [sp, #268]	; 0x10c
 800724a:	2300      	movs	r3, #0
 800724c:	e7ab      	b.n	80071a6 <__ssvfiscanf_r+0x14a>
 800724e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8007250:	06d0      	lsls	r0, r2, #27
 8007252:	f53f af78 	bmi.w	8007146 <__ssvfiscanf_r+0xea>
 8007256:	f012 0f01 	tst.w	r2, #1
 800725a:	9a01      	ldr	r2, [sp, #4]
 800725c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800725e:	f102 0104 	add.w	r1, r2, #4
 8007262:	9101      	str	r1, [sp, #4]
 8007264:	6812      	ldr	r2, [r2, #0]
 8007266:	bf14      	ite	ne
 8007268:	8013      	strhne	r3, [r2, #0]
 800726a:	6013      	streq	r3, [r2, #0]
 800726c:	e76b      	b.n	8007146 <__ssvfiscanf_r+0xea>
 800726e:	2305      	movs	r3, #5
 8007270:	e799      	b.n	80071a6 <__ssvfiscanf_r+0x14a>
 8007272:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8007274:	4621      	mov	r1, r4
 8007276:	4630      	mov	r0, r6
 8007278:	4798      	blx	r3
 800727a:	2800      	cmp	r0, #0
 800727c:	d097      	beq.n	80071ae <__ssvfiscanf_r+0x152>
 800727e:	e7c6      	b.n	800720e <__ssvfiscanf_r+0x1b2>
 8007280:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8007282:	3201      	adds	r2, #1
 8007284:	9247      	str	r2, [sp, #284]	; 0x11c
 8007286:	6862      	ldr	r2, [r4, #4]
 8007288:	3a01      	subs	r2, #1
 800728a:	2a00      	cmp	r2, #0
 800728c:	6062      	str	r2, [r4, #4]
 800728e:	dd0a      	ble.n	80072a6 <__ssvfiscanf_r+0x24a>
 8007290:	3301      	adds	r3, #1
 8007292:	6023      	str	r3, [r4, #0]
 8007294:	f7ff fe1a 	bl	8006ecc <__locale_ctype_ptr>
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	781a      	ldrb	r2, [r3, #0]
 800729c:	4410      	add	r0, r2
 800729e:	7842      	ldrb	r2, [r0, #1]
 80072a0:	0712      	lsls	r2, r2, #28
 80072a2:	d4ed      	bmi.n	8007280 <__ssvfiscanf_r+0x224>
 80072a4:	e786      	b.n	80071b4 <__ssvfiscanf_r+0x158>
 80072a6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80072a8:	4621      	mov	r1, r4
 80072aa:	4630      	mov	r0, r6
 80072ac:	4798      	blx	r3
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d0f0      	beq.n	8007294 <__ssvfiscanf_r+0x238>
 80072b2:	e7ac      	b.n	800720e <__ssvfiscanf_r+0x1b2>
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	dc06      	bgt.n	80072c6 <__ssvfiscanf_r+0x26a>
 80072b8:	ab01      	add	r3, sp, #4
 80072ba:	4622      	mov	r2, r4
 80072bc:	a943      	add	r1, sp, #268	; 0x10c
 80072be:	4630      	mov	r0, r6
 80072c0:	f000 f884 	bl	80073cc <_scanf_i>
 80072c4:	e77f      	b.n	80071c6 <__ssvfiscanf_r+0x16a>
 80072c6:	4b0e      	ldr	r3, [pc, #56]	; (8007300 <__ssvfiscanf_r+0x2a4>)
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f43f af3c 	beq.w	8007146 <__ssvfiscanf_r+0xea>
 80072ce:	ab01      	add	r3, sp, #4
 80072d0:	4622      	mov	r2, r4
 80072d2:	a943      	add	r1, sp, #268	; 0x10c
 80072d4:	4630      	mov	r0, r6
 80072d6:	f3af 8000 	nop.w
 80072da:	e774      	b.n	80071c6 <__ssvfiscanf_r+0x16a>
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80072e2:	bf18      	it	ne
 80072e4:	f04f 30ff 	movne.w	r0, #4294967295
 80072e8:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 80072ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f0:	9846      	ldr	r0, [sp, #280]	; 0x118
 80072f2:	e7f9      	b.n	80072e8 <__ssvfiscanf_r+0x28c>
 80072f4:	08006fa7 	.word	0x08006fa7
 80072f8:	08007021 	.word	0x08007021
 80072fc:	08007c5a 	.word	0x08007c5a
 8007300:	00000000 	.word	0x00000000

08007304 <_scanf_chars>:
 8007304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007308:	4615      	mov	r5, r2
 800730a:	688a      	ldr	r2, [r1, #8]
 800730c:	4680      	mov	r8, r0
 800730e:	460c      	mov	r4, r1
 8007310:	b932      	cbnz	r2, 8007320 <_scanf_chars+0x1c>
 8007312:	698a      	ldr	r2, [r1, #24]
 8007314:	2a00      	cmp	r2, #0
 8007316:	bf0c      	ite	eq
 8007318:	2201      	moveq	r2, #1
 800731a:	f04f 32ff 	movne.w	r2, #4294967295
 800731e:	608a      	str	r2, [r1, #8]
 8007320:	6822      	ldr	r2, [r4, #0]
 8007322:	06d1      	lsls	r1, r2, #27
 8007324:	bf5f      	itttt	pl
 8007326:	681a      	ldrpl	r2, [r3, #0]
 8007328:	1d11      	addpl	r1, r2, #4
 800732a:	6019      	strpl	r1, [r3, #0]
 800732c:	6817      	ldrpl	r7, [r2, #0]
 800732e:	2600      	movs	r6, #0
 8007330:	69a3      	ldr	r3, [r4, #24]
 8007332:	b1db      	cbz	r3, 800736c <_scanf_chars+0x68>
 8007334:	2b01      	cmp	r3, #1
 8007336:	d107      	bne.n	8007348 <_scanf_chars+0x44>
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	6962      	ldr	r2, [r4, #20]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	5cd3      	ldrb	r3, [r2, r3]
 8007340:	b9a3      	cbnz	r3, 800736c <_scanf_chars+0x68>
 8007342:	2e00      	cmp	r6, #0
 8007344:	d132      	bne.n	80073ac <_scanf_chars+0xa8>
 8007346:	e006      	b.n	8007356 <_scanf_chars+0x52>
 8007348:	2b02      	cmp	r3, #2
 800734a:	d007      	beq.n	800735c <_scanf_chars+0x58>
 800734c:	2e00      	cmp	r6, #0
 800734e:	d12d      	bne.n	80073ac <_scanf_chars+0xa8>
 8007350:	69a3      	ldr	r3, [r4, #24]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d12a      	bne.n	80073ac <_scanf_chars+0xa8>
 8007356:	2001      	movs	r0, #1
 8007358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800735c:	f7ff fdb6 	bl	8006ecc <__locale_ctype_ptr>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	4418      	add	r0, r3
 8007366:	7843      	ldrb	r3, [r0, #1]
 8007368:	071b      	lsls	r3, r3, #28
 800736a:	d4ef      	bmi.n	800734c <_scanf_chars+0x48>
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	06da      	lsls	r2, r3, #27
 8007370:	bf5e      	ittt	pl
 8007372:	682b      	ldrpl	r3, [r5, #0]
 8007374:	781b      	ldrbpl	r3, [r3, #0]
 8007376:	703b      	strbpl	r3, [r7, #0]
 8007378:	682a      	ldr	r2, [r5, #0]
 800737a:	686b      	ldr	r3, [r5, #4]
 800737c:	f102 0201 	add.w	r2, r2, #1
 8007380:	602a      	str	r2, [r5, #0]
 8007382:	68a2      	ldr	r2, [r4, #8]
 8007384:	f103 33ff 	add.w	r3, r3, #4294967295
 8007388:	f102 32ff 	add.w	r2, r2, #4294967295
 800738c:	606b      	str	r3, [r5, #4]
 800738e:	f106 0601 	add.w	r6, r6, #1
 8007392:	bf58      	it	pl
 8007394:	3701      	addpl	r7, #1
 8007396:	60a2      	str	r2, [r4, #8]
 8007398:	b142      	cbz	r2, 80073ac <_scanf_chars+0xa8>
 800739a:	2b00      	cmp	r3, #0
 800739c:	dcc8      	bgt.n	8007330 <_scanf_chars+0x2c>
 800739e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80073a2:	4629      	mov	r1, r5
 80073a4:	4640      	mov	r0, r8
 80073a6:	4798      	blx	r3
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d0c1      	beq.n	8007330 <_scanf_chars+0x2c>
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	f013 0310 	ands.w	r3, r3, #16
 80073b2:	d105      	bne.n	80073c0 <_scanf_chars+0xbc>
 80073b4:	68e2      	ldr	r2, [r4, #12]
 80073b6:	3201      	adds	r2, #1
 80073b8:	60e2      	str	r2, [r4, #12]
 80073ba:	69a2      	ldr	r2, [r4, #24]
 80073bc:	b102      	cbz	r2, 80073c0 <_scanf_chars+0xbc>
 80073be:	703b      	strb	r3, [r7, #0]
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	441e      	add	r6, r3
 80073c4:	6126      	str	r6, [r4, #16]
 80073c6:	2000      	movs	r0, #0
 80073c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073cc <_scanf_i>:
 80073cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d0:	469a      	mov	sl, r3
 80073d2:	4b74      	ldr	r3, [pc, #464]	; (80075a4 <_scanf_i+0x1d8>)
 80073d4:	460c      	mov	r4, r1
 80073d6:	4683      	mov	fp, r0
 80073d8:	4616      	mov	r6, r2
 80073da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80073de:	b087      	sub	sp, #28
 80073e0:	ab03      	add	r3, sp, #12
 80073e2:	68a7      	ldr	r7, [r4, #8]
 80073e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80073e8:	4b6f      	ldr	r3, [pc, #444]	; (80075a8 <_scanf_i+0x1dc>)
 80073ea:	69a1      	ldr	r1, [r4, #24]
 80073ec:	4a6f      	ldr	r2, [pc, #444]	; (80075ac <_scanf_i+0x1e0>)
 80073ee:	2903      	cmp	r1, #3
 80073f0:	bf18      	it	ne
 80073f2:	461a      	movne	r2, r3
 80073f4:	1e7b      	subs	r3, r7, #1
 80073f6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80073fa:	bf84      	itt	hi
 80073fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007400:	60a3      	strhi	r3, [r4, #8]
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	9200      	str	r2, [sp, #0]
 8007406:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800740a:	bf88      	it	hi
 800740c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007410:	f104 091c 	add.w	r9, r4, #28
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	bf8c      	ite	hi
 8007418:	197f      	addhi	r7, r7, r5
 800741a:	2700      	movls	r7, #0
 800741c:	464b      	mov	r3, r9
 800741e:	f04f 0800 	mov.w	r8, #0
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	6831      	ldr	r1, [r6, #0]
 8007426:	ab03      	add	r3, sp, #12
 8007428:	2202      	movs	r2, #2
 800742a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800742e:	7809      	ldrb	r1, [r1, #0]
 8007430:	f7f8 fee6 	bl	8000200 <memchr>
 8007434:	9b01      	ldr	r3, [sp, #4]
 8007436:	b328      	cbz	r0, 8007484 <_scanf_i+0xb8>
 8007438:	f1b8 0f01 	cmp.w	r8, #1
 800743c:	d156      	bne.n	80074ec <_scanf_i+0x120>
 800743e:	6862      	ldr	r2, [r4, #4]
 8007440:	b92a      	cbnz	r2, 800744e <_scanf_i+0x82>
 8007442:	2208      	movs	r2, #8
 8007444:	6062      	str	r2, [r4, #4]
 8007446:	6822      	ldr	r2, [r4, #0]
 8007448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800744c:	6022      	str	r2, [r4, #0]
 800744e:	6822      	ldr	r2, [r4, #0]
 8007450:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007454:	6022      	str	r2, [r4, #0]
 8007456:	68a2      	ldr	r2, [r4, #8]
 8007458:	1e51      	subs	r1, r2, #1
 800745a:	60a1      	str	r1, [r4, #8]
 800745c:	b192      	cbz	r2, 8007484 <_scanf_i+0xb8>
 800745e:	6832      	ldr	r2, [r6, #0]
 8007460:	1c51      	adds	r1, r2, #1
 8007462:	6031      	str	r1, [r6, #0]
 8007464:	7812      	ldrb	r2, [r2, #0]
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	1c5d      	adds	r5, r3, #1
 800746a:	6873      	ldr	r3, [r6, #4]
 800746c:	3b01      	subs	r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	6073      	str	r3, [r6, #4]
 8007472:	dc06      	bgt.n	8007482 <_scanf_i+0xb6>
 8007474:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007478:	4631      	mov	r1, r6
 800747a:	4658      	mov	r0, fp
 800747c:	4798      	blx	r3
 800747e:	2800      	cmp	r0, #0
 8007480:	d176      	bne.n	8007570 <_scanf_i+0x1a4>
 8007482:	462b      	mov	r3, r5
 8007484:	f108 0801 	add.w	r8, r8, #1
 8007488:	f1b8 0f03 	cmp.w	r8, #3
 800748c:	d1c9      	bne.n	8007422 <_scanf_i+0x56>
 800748e:	6862      	ldr	r2, [r4, #4]
 8007490:	b90a      	cbnz	r2, 8007496 <_scanf_i+0xca>
 8007492:	220a      	movs	r2, #10
 8007494:	6062      	str	r2, [r4, #4]
 8007496:	6862      	ldr	r2, [r4, #4]
 8007498:	4945      	ldr	r1, [pc, #276]	; (80075b0 <_scanf_i+0x1e4>)
 800749a:	6960      	ldr	r0, [r4, #20]
 800749c:	9301      	str	r3, [sp, #4]
 800749e:	1a89      	subs	r1, r1, r2
 80074a0:	f000 f888 	bl	80075b4 <__sccl>
 80074a4:	9b01      	ldr	r3, [sp, #4]
 80074a6:	f04f 0800 	mov.w	r8, #0
 80074aa:	461d      	mov	r5, r3
 80074ac:	68a3      	ldr	r3, [r4, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d038      	beq.n	8007524 <_scanf_i+0x158>
 80074b2:	6831      	ldr	r1, [r6, #0]
 80074b4:	6960      	ldr	r0, [r4, #20]
 80074b6:	780a      	ldrb	r2, [r1, #0]
 80074b8:	5c80      	ldrb	r0, [r0, r2]
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d032      	beq.n	8007524 <_scanf_i+0x158>
 80074be:	2a30      	cmp	r2, #48	; 0x30
 80074c0:	6822      	ldr	r2, [r4, #0]
 80074c2:	d121      	bne.n	8007508 <_scanf_i+0x13c>
 80074c4:	0510      	lsls	r0, r2, #20
 80074c6:	d51f      	bpl.n	8007508 <_scanf_i+0x13c>
 80074c8:	f108 0801 	add.w	r8, r8, #1
 80074cc:	b117      	cbz	r7, 80074d4 <_scanf_i+0x108>
 80074ce:	3301      	adds	r3, #1
 80074d0:	3f01      	subs	r7, #1
 80074d2:	60a3      	str	r3, [r4, #8]
 80074d4:	6873      	ldr	r3, [r6, #4]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	6073      	str	r3, [r6, #4]
 80074dc:	dd1b      	ble.n	8007516 <_scanf_i+0x14a>
 80074de:	6833      	ldr	r3, [r6, #0]
 80074e0:	3301      	adds	r3, #1
 80074e2:	6033      	str	r3, [r6, #0]
 80074e4:	68a3      	ldr	r3, [r4, #8]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	60a3      	str	r3, [r4, #8]
 80074ea:	e7df      	b.n	80074ac <_scanf_i+0xe0>
 80074ec:	f1b8 0f02 	cmp.w	r8, #2
 80074f0:	d1b1      	bne.n	8007456 <_scanf_i+0x8a>
 80074f2:	6822      	ldr	r2, [r4, #0]
 80074f4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80074f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80074fc:	d1c2      	bne.n	8007484 <_scanf_i+0xb8>
 80074fe:	2110      	movs	r1, #16
 8007500:	6061      	str	r1, [r4, #4]
 8007502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007506:	e7a5      	b.n	8007454 <_scanf_i+0x88>
 8007508:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800750c:	6022      	str	r2, [r4, #0]
 800750e:	780b      	ldrb	r3, [r1, #0]
 8007510:	702b      	strb	r3, [r5, #0]
 8007512:	3501      	adds	r5, #1
 8007514:	e7de      	b.n	80074d4 <_scanf_i+0x108>
 8007516:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800751a:	4631      	mov	r1, r6
 800751c:	4658      	mov	r0, fp
 800751e:	4798      	blx	r3
 8007520:	2800      	cmp	r0, #0
 8007522:	d0df      	beq.n	80074e4 <_scanf_i+0x118>
 8007524:	6823      	ldr	r3, [r4, #0]
 8007526:	05d9      	lsls	r1, r3, #23
 8007528:	d50c      	bpl.n	8007544 <_scanf_i+0x178>
 800752a:	454d      	cmp	r5, r9
 800752c:	d908      	bls.n	8007540 <_scanf_i+0x174>
 800752e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007532:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007536:	4632      	mov	r2, r6
 8007538:	4658      	mov	r0, fp
 800753a:	4798      	blx	r3
 800753c:	1e6f      	subs	r7, r5, #1
 800753e:	463d      	mov	r5, r7
 8007540:	454d      	cmp	r5, r9
 8007542:	d02c      	beq.n	800759e <_scanf_i+0x1d2>
 8007544:	6822      	ldr	r2, [r4, #0]
 8007546:	f012 0210 	ands.w	r2, r2, #16
 800754a:	d11e      	bne.n	800758a <_scanf_i+0x1be>
 800754c:	702a      	strb	r2, [r5, #0]
 800754e:	6863      	ldr	r3, [r4, #4]
 8007550:	9e00      	ldr	r6, [sp, #0]
 8007552:	4649      	mov	r1, r9
 8007554:	4658      	mov	r0, fp
 8007556:	47b0      	blx	r6
 8007558:	6822      	ldr	r2, [r4, #0]
 800755a:	f8da 3000 	ldr.w	r3, [sl]
 800755e:	f012 0f20 	tst.w	r2, #32
 8007562:	d008      	beq.n	8007576 <_scanf_i+0x1aa>
 8007564:	1d1a      	adds	r2, r3, #4
 8007566:	f8ca 2000 	str.w	r2, [sl]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6018      	str	r0, [r3, #0]
 800756e:	e009      	b.n	8007584 <_scanf_i+0x1b8>
 8007570:	f04f 0800 	mov.w	r8, #0
 8007574:	e7d6      	b.n	8007524 <_scanf_i+0x158>
 8007576:	07d2      	lsls	r2, r2, #31
 8007578:	d5f4      	bpl.n	8007564 <_scanf_i+0x198>
 800757a:	1d1a      	adds	r2, r3, #4
 800757c:	f8ca 2000 	str.w	r2, [sl]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	8018      	strh	r0, [r3, #0]
 8007584:	68e3      	ldr	r3, [r4, #12]
 8007586:	3301      	adds	r3, #1
 8007588:	60e3      	str	r3, [r4, #12]
 800758a:	eba5 0509 	sub.w	r5, r5, r9
 800758e:	44a8      	add	r8, r5
 8007590:	6925      	ldr	r5, [r4, #16]
 8007592:	4445      	add	r5, r8
 8007594:	6125      	str	r5, [r4, #16]
 8007596:	2000      	movs	r0, #0
 8007598:	b007      	add	sp, #28
 800759a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759e:	2001      	movs	r0, #1
 80075a0:	e7fa      	b.n	8007598 <_scanf_i+0x1cc>
 80075a2:	bf00      	nop
 80075a4:	08007a34 	.word	0x08007a34
 80075a8:	08006e71 	.word	0x08006e71
 80075ac:	08007715 	.word	0x08007715
 80075b0:	08007ca1 	.word	0x08007ca1

080075b4 <__sccl>:
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	780b      	ldrb	r3, [r1, #0]
 80075b8:	2b5e      	cmp	r3, #94	; 0x5e
 80075ba:	bf13      	iteet	ne
 80075bc:	1c4a      	addne	r2, r1, #1
 80075be:	1c8a      	addeq	r2, r1, #2
 80075c0:	784b      	ldrbeq	r3, [r1, #1]
 80075c2:	2100      	movne	r1, #0
 80075c4:	bf08      	it	eq
 80075c6:	2101      	moveq	r1, #1
 80075c8:	1e44      	subs	r4, r0, #1
 80075ca:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80075ce:	f804 1f01 	strb.w	r1, [r4, #1]!
 80075d2:	42a5      	cmp	r5, r4
 80075d4:	d1fb      	bne.n	80075ce <__sccl+0x1a>
 80075d6:	b913      	cbnz	r3, 80075de <__sccl+0x2a>
 80075d8:	3a01      	subs	r2, #1
 80075da:	4610      	mov	r0, r2
 80075dc:	bd70      	pop	{r4, r5, r6, pc}
 80075de:	f081 0401 	eor.w	r4, r1, #1
 80075e2:	54c4      	strb	r4, [r0, r3]
 80075e4:	4611      	mov	r1, r2
 80075e6:	780d      	ldrb	r5, [r1, #0]
 80075e8:	2d2d      	cmp	r5, #45	; 0x2d
 80075ea:	f101 0201 	add.w	r2, r1, #1
 80075ee:	d006      	beq.n	80075fe <__sccl+0x4a>
 80075f0:	2d5d      	cmp	r5, #93	; 0x5d
 80075f2:	d0f2      	beq.n	80075da <__sccl+0x26>
 80075f4:	b90d      	cbnz	r5, 80075fa <__sccl+0x46>
 80075f6:	460a      	mov	r2, r1
 80075f8:	e7ef      	b.n	80075da <__sccl+0x26>
 80075fa:	462b      	mov	r3, r5
 80075fc:	e7f1      	b.n	80075e2 <__sccl+0x2e>
 80075fe:	784e      	ldrb	r6, [r1, #1]
 8007600:	2e5d      	cmp	r6, #93	; 0x5d
 8007602:	d0fa      	beq.n	80075fa <__sccl+0x46>
 8007604:	42b3      	cmp	r3, r6
 8007606:	dcf8      	bgt.n	80075fa <__sccl+0x46>
 8007608:	3102      	adds	r1, #2
 800760a:	3301      	adds	r3, #1
 800760c:	429e      	cmp	r6, r3
 800760e:	54c4      	strb	r4, [r0, r3]
 8007610:	dcfb      	bgt.n	800760a <__sccl+0x56>
 8007612:	e7e8      	b.n	80075e6 <__sccl+0x32>

08007614 <_strtol_l.isra.0>:
 8007614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007618:	4680      	mov	r8, r0
 800761a:	4689      	mov	r9, r1
 800761c:	4692      	mov	sl, r2
 800761e:	461f      	mov	r7, r3
 8007620:	468b      	mov	fp, r1
 8007622:	465d      	mov	r5, fp
 8007624:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007626:	f815 4b01 	ldrb.w	r4, [r5], #1
 800762a:	f7ff fc4b 	bl	8006ec4 <__locale_ctype_ptr_l>
 800762e:	4420      	add	r0, r4
 8007630:	7846      	ldrb	r6, [r0, #1]
 8007632:	f016 0608 	ands.w	r6, r6, #8
 8007636:	d10b      	bne.n	8007650 <_strtol_l.isra.0+0x3c>
 8007638:	2c2d      	cmp	r4, #45	; 0x2d
 800763a:	d10b      	bne.n	8007654 <_strtol_l.isra.0+0x40>
 800763c:	782c      	ldrb	r4, [r5, #0]
 800763e:	2601      	movs	r6, #1
 8007640:	f10b 0502 	add.w	r5, fp, #2
 8007644:	b167      	cbz	r7, 8007660 <_strtol_l.isra.0+0x4c>
 8007646:	2f10      	cmp	r7, #16
 8007648:	d114      	bne.n	8007674 <_strtol_l.isra.0+0x60>
 800764a:	2c30      	cmp	r4, #48	; 0x30
 800764c:	d00a      	beq.n	8007664 <_strtol_l.isra.0+0x50>
 800764e:	e011      	b.n	8007674 <_strtol_l.isra.0+0x60>
 8007650:	46ab      	mov	fp, r5
 8007652:	e7e6      	b.n	8007622 <_strtol_l.isra.0+0xe>
 8007654:	2c2b      	cmp	r4, #43	; 0x2b
 8007656:	bf04      	itt	eq
 8007658:	782c      	ldrbeq	r4, [r5, #0]
 800765a:	f10b 0502 	addeq.w	r5, fp, #2
 800765e:	e7f1      	b.n	8007644 <_strtol_l.isra.0+0x30>
 8007660:	2c30      	cmp	r4, #48	; 0x30
 8007662:	d127      	bne.n	80076b4 <_strtol_l.isra.0+0xa0>
 8007664:	782b      	ldrb	r3, [r5, #0]
 8007666:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800766a:	2b58      	cmp	r3, #88	; 0x58
 800766c:	d14b      	bne.n	8007706 <_strtol_l.isra.0+0xf2>
 800766e:	786c      	ldrb	r4, [r5, #1]
 8007670:	2710      	movs	r7, #16
 8007672:	3502      	adds	r5, #2
 8007674:	2e00      	cmp	r6, #0
 8007676:	bf0c      	ite	eq
 8007678:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800767c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007680:	2200      	movs	r2, #0
 8007682:	fbb1 fef7 	udiv	lr, r1, r7
 8007686:	4610      	mov	r0, r2
 8007688:	fb07 1c1e 	mls	ip, r7, lr, r1
 800768c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007690:	2b09      	cmp	r3, #9
 8007692:	d811      	bhi.n	80076b8 <_strtol_l.isra.0+0xa4>
 8007694:	461c      	mov	r4, r3
 8007696:	42a7      	cmp	r7, r4
 8007698:	dd1d      	ble.n	80076d6 <_strtol_l.isra.0+0xc2>
 800769a:	1c53      	adds	r3, r2, #1
 800769c:	d007      	beq.n	80076ae <_strtol_l.isra.0+0x9a>
 800769e:	4586      	cmp	lr, r0
 80076a0:	d316      	bcc.n	80076d0 <_strtol_l.isra.0+0xbc>
 80076a2:	d101      	bne.n	80076a8 <_strtol_l.isra.0+0x94>
 80076a4:	45a4      	cmp	ip, r4
 80076a6:	db13      	blt.n	80076d0 <_strtol_l.isra.0+0xbc>
 80076a8:	fb00 4007 	mla	r0, r0, r7, r4
 80076ac:	2201      	movs	r2, #1
 80076ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076b2:	e7eb      	b.n	800768c <_strtol_l.isra.0+0x78>
 80076b4:	270a      	movs	r7, #10
 80076b6:	e7dd      	b.n	8007674 <_strtol_l.isra.0+0x60>
 80076b8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80076bc:	2b19      	cmp	r3, #25
 80076be:	d801      	bhi.n	80076c4 <_strtol_l.isra.0+0xb0>
 80076c0:	3c37      	subs	r4, #55	; 0x37
 80076c2:	e7e8      	b.n	8007696 <_strtol_l.isra.0+0x82>
 80076c4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80076c8:	2b19      	cmp	r3, #25
 80076ca:	d804      	bhi.n	80076d6 <_strtol_l.isra.0+0xc2>
 80076cc:	3c57      	subs	r4, #87	; 0x57
 80076ce:	e7e2      	b.n	8007696 <_strtol_l.isra.0+0x82>
 80076d0:	f04f 32ff 	mov.w	r2, #4294967295
 80076d4:	e7eb      	b.n	80076ae <_strtol_l.isra.0+0x9a>
 80076d6:	1c53      	adds	r3, r2, #1
 80076d8:	d108      	bne.n	80076ec <_strtol_l.isra.0+0xd8>
 80076da:	2322      	movs	r3, #34	; 0x22
 80076dc:	f8c8 3000 	str.w	r3, [r8]
 80076e0:	4608      	mov	r0, r1
 80076e2:	f1ba 0f00 	cmp.w	sl, #0
 80076e6:	d107      	bne.n	80076f8 <_strtol_l.isra.0+0xe4>
 80076e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ec:	b106      	cbz	r6, 80076f0 <_strtol_l.isra.0+0xdc>
 80076ee:	4240      	negs	r0, r0
 80076f0:	f1ba 0f00 	cmp.w	sl, #0
 80076f4:	d00c      	beq.n	8007710 <_strtol_l.isra.0+0xfc>
 80076f6:	b122      	cbz	r2, 8007702 <_strtol_l.isra.0+0xee>
 80076f8:	3d01      	subs	r5, #1
 80076fa:	f8ca 5000 	str.w	r5, [sl]
 80076fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007702:	464d      	mov	r5, r9
 8007704:	e7f9      	b.n	80076fa <_strtol_l.isra.0+0xe6>
 8007706:	2430      	movs	r4, #48	; 0x30
 8007708:	2f00      	cmp	r7, #0
 800770a:	d1b3      	bne.n	8007674 <_strtol_l.isra.0+0x60>
 800770c:	2708      	movs	r7, #8
 800770e:	e7b1      	b.n	8007674 <_strtol_l.isra.0+0x60>
 8007710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007714 <_strtol_r>:
 8007714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007716:	4c06      	ldr	r4, [pc, #24]	; (8007730 <_strtol_r+0x1c>)
 8007718:	4d06      	ldr	r5, [pc, #24]	; (8007734 <_strtol_r+0x20>)
 800771a:	6824      	ldr	r4, [r4, #0]
 800771c:	6a24      	ldr	r4, [r4, #32]
 800771e:	2c00      	cmp	r4, #0
 8007720:	bf08      	it	eq
 8007722:	462c      	moveq	r4, r5
 8007724:	9400      	str	r4, [sp, #0]
 8007726:	f7ff ff75 	bl	8007614 <_strtol_l.isra.0>
 800772a:	b003      	add	sp, #12
 800772c:	bd30      	pop	{r4, r5, pc}
 800772e:	bf00      	nop
 8007730:	20000050 	.word	0x20000050
 8007734:	200000b8 	.word	0x200000b8

08007738 <__submore>:
 8007738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800773c:	460c      	mov	r4, r1
 800773e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007744:	4299      	cmp	r1, r3
 8007746:	d11e      	bne.n	8007786 <__submore+0x4e>
 8007748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800774c:	f7fe ff78 	bl	8006640 <_malloc_r>
 8007750:	b918      	cbnz	r0, 800775a <__submore+0x22>
 8007752:	f04f 30ff 	mov.w	r0, #4294967295
 8007756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800775a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800775e:	63a3      	str	r3, [r4, #56]	; 0x38
 8007760:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007764:	6360      	str	r0, [r4, #52]	; 0x34
 8007766:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800776a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800776e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007772:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007776:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800777a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800777e:	6020      	str	r0, [r4, #0]
 8007780:	2000      	movs	r0, #0
 8007782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007786:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007788:	0077      	lsls	r7, r6, #1
 800778a:	463a      	mov	r2, r7
 800778c:	f7ff fbe5 	bl	8006f5a <_realloc_r>
 8007790:	4605      	mov	r5, r0
 8007792:	2800      	cmp	r0, #0
 8007794:	d0dd      	beq.n	8007752 <__submore+0x1a>
 8007796:	eb00 0806 	add.w	r8, r0, r6
 800779a:	4601      	mov	r1, r0
 800779c:	4632      	mov	r2, r6
 800779e:	4640      	mov	r0, r8
 80077a0:	f7ff fbb4 	bl	8006f0c <memcpy>
 80077a4:	f8c4 8000 	str.w	r8, [r4]
 80077a8:	6365      	str	r5, [r4, #52]	; 0x34
 80077aa:	63a7      	str	r7, [r4, #56]	; 0x38
 80077ac:	e7e8      	b.n	8007780 <__submore+0x48>

080077ae <__ascii_wctomb>:
 80077ae:	b149      	cbz	r1, 80077c4 <__ascii_wctomb+0x16>
 80077b0:	2aff      	cmp	r2, #255	; 0xff
 80077b2:	bf85      	ittet	hi
 80077b4:	238a      	movhi	r3, #138	; 0x8a
 80077b6:	6003      	strhi	r3, [r0, #0]
 80077b8:	700a      	strbls	r2, [r1, #0]
 80077ba:	f04f 30ff 	movhi.w	r0, #4294967295
 80077be:	bf98      	it	ls
 80077c0:	2001      	movls	r0, #1
 80077c2:	4770      	bx	lr
 80077c4:	4608      	mov	r0, r1
 80077c6:	4770      	bx	lr

080077c8 <_malloc_usable_size_r>:
 80077c8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80077cc:	2800      	cmp	r0, #0
 80077ce:	f1a0 0004 	sub.w	r0, r0, #4
 80077d2:	bfbc      	itt	lt
 80077d4:	580b      	ldrlt	r3, [r1, r0]
 80077d6:	18c0      	addlt	r0, r0, r3
 80077d8:	4770      	bx	lr
	...

080077dc <sqrt>:
 80077dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077e0:	ed2d 8b02 	vpush	{d8}
 80077e4:	b08b      	sub	sp, #44	; 0x2c
 80077e6:	ec55 4b10 	vmov	r4, r5, d0
 80077ea:	f000 f851 	bl	8007890 <__ieee754_sqrt>
 80077ee:	4b26      	ldr	r3, [pc, #152]	; (8007888 <sqrt+0xac>)
 80077f0:	eeb0 8a40 	vmov.f32	s16, s0
 80077f4:	eef0 8a60 	vmov.f32	s17, s1
 80077f8:	f993 6000 	ldrsb.w	r6, [r3]
 80077fc:	1c73      	adds	r3, r6, #1
 80077fe:	d02a      	beq.n	8007856 <sqrt+0x7a>
 8007800:	4622      	mov	r2, r4
 8007802:	462b      	mov	r3, r5
 8007804:	4620      	mov	r0, r4
 8007806:	4629      	mov	r1, r5
 8007808:	f7f9 f99c 	bl	8000b44 <__aeabi_dcmpun>
 800780c:	4607      	mov	r7, r0
 800780e:	bb10      	cbnz	r0, 8007856 <sqrt+0x7a>
 8007810:	f04f 0800 	mov.w	r8, #0
 8007814:	f04f 0900 	mov.w	r9, #0
 8007818:	4642      	mov	r2, r8
 800781a:	464b      	mov	r3, r9
 800781c:	4620      	mov	r0, r4
 800781e:	4629      	mov	r1, r5
 8007820:	f7f9 f968 	bl	8000af4 <__aeabi_dcmplt>
 8007824:	b1b8      	cbz	r0, 8007856 <sqrt+0x7a>
 8007826:	2301      	movs	r3, #1
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	4b18      	ldr	r3, [pc, #96]	; (800788c <sqrt+0xb0>)
 800782c:	9301      	str	r3, [sp, #4]
 800782e:	9708      	str	r7, [sp, #32]
 8007830:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007834:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007838:	b9b6      	cbnz	r6, 8007868 <sqrt+0x8c>
 800783a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800783e:	4668      	mov	r0, sp
 8007840:	f000 f8d6 	bl	80079f0 <matherr>
 8007844:	b1d0      	cbz	r0, 800787c <sqrt+0xa0>
 8007846:	9b08      	ldr	r3, [sp, #32]
 8007848:	b11b      	cbz	r3, 8007852 <sqrt+0x76>
 800784a:	f000 f8d3 	bl	80079f4 <__errno>
 800784e:	9b08      	ldr	r3, [sp, #32]
 8007850:	6003      	str	r3, [r0, #0]
 8007852:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007856:	eeb0 0a48 	vmov.f32	s0, s16
 800785a:	eef0 0a68 	vmov.f32	s1, s17
 800785e:	b00b      	add	sp, #44	; 0x2c
 8007860:	ecbd 8b02 	vpop	{d8}
 8007864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007868:	4642      	mov	r2, r8
 800786a:	464b      	mov	r3, r9
 800786c:	4640      	mov	r0, r8
 800786e:	4649      	mov	r1, r9
 8007870:	f7f8 fff8 	bl	8000864 <__aeabi_ddiv>
 8007874:	2e02      	cmp	r6, #2
 8007876:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800787a:	d1e0      	bne.n	800783e <sqrt+0x62>
 800787c:	f000 f8ba 	bl	80079f4 <__errno>
 8007880:	2321      	movs	r3, #33	; 0x21
 8007882:	6003      	str	r3, [r0, #0]
 8007884:	e7df      	b.n	8007846 <sqrt+0x6a>
 8007886:	bf00      	nop
 8007888:	20000224 	.word	0x20000224
 800788c:	08007e10 	.word	0x08007e10

08007890 <__ieee754_sqrt>:
 8007890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007894:	ec55 4b10 	vmov	r4, r5, d0
 8007898:	4e54      	ldr	r6, [pc, #336]	; (80079ec <__ieee754_sqrt+0x15c>)
 800789a:	43ae      	bics	r6, r5
 800789c:	ee10 0a10 	vmov	r0, s0
 80078a0:	462b      	mov	r3, r5
 80078a2:	462a      	mov	r2, r5
 80078a4:	4621      	mov	r1, r4
 80078a6:	d113      	bne.n	80078d0 <__ieee754_sqrt+0x40>
 80078a8:	ee10 2a10 	vmov	r2, s0
 80078ac:	462b      	mov	r3, r5
 80078ae:	ee10 0a10 	vmov	r0, s0
 80078b2:	4629      	mov	r1, r5
 80078b4:	f7f8 feac 	bl	8000610 <__aeabi_dmul>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4620      	mov	r0, r4
 80078be:	4629      	mov	r1, r5
 80078c0:	f7f8 fcf4 	bl	80002ac <__adddf3>
 80078c4:	4604      	mov	r4, r0
 80078c6:	460d      	mov	r5, r1
 80078c8:	ec45 4b10 	vmov	d0, r4, r5
 80078cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078d0:	2d00      	cmp	r5, #0
 80078d2:	dc10      	bgt.n	80078f6 <__ieee754_sqrt+0x66>
 80078d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80078d8:	4330      	orrs	r0, r6
 80078da:	d0f5      	beq.n	80078c8 <__ieee754_sqrt+0x38>
 80078dc:	b15d      	cbz	r5, 80078f6 <__ieee754_sqrt+0x66>
 80078de:	ee10 2a10 	vmov	r2, s0
 80078e2:	462b      	mov	r3, r5
 80078e4:	4620      	mov	r0, r4
 80078e6:	4629      	mov	r1, r5
 80078e8:	f7f8 fcde 	bl	80002a8 <__aeabi_dsub>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	f7f8 ffb8 	bl	8000864 <__aeabi_ddiv>
 80078f4:	e7e6      	b.n	80078c4 <__ieee754_sqrt+0x34>
 80078f6:	151b      	asrs	r3, r3, #20
 80078f8:	d10c      	bne.n	8007914 <__ieee754_sqrt+0x84>
 80078fa:	2a00      	cmp	r2, #0
 80078fc:	d06d      	beq.n	80079da <__ieee754_sqrt+0x14a>
 80078fe:	2000      	movs	r0, #0
 8007900:	02d6      	lsls	r6, r2, #11
 8007902:	d56e      	bpl.n	80079e2 <__ieee754_sqrt+0x152>
 8007904:	1e44      	subs	r4, r0, #1
 8007906:	1b1b      	subs	r3, r3, r4
 8007908:	f1c0 0420 	rsb	r4, r0, #32
 800790c:	fa21 f404 	lsr.w	r4, r1, r4
 8007910:	4322      	orrs	r2, r4
 8007912:	4081      	lsls	r1, r0
 8007914:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007918:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800791c:	07dd      	lsls	r5, r3, #31
 800791e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007922:	bf42      	ittt	mi
 8007924:	0052      	lslmi	r2, r2, #1
 8007926:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800792a:	0049      	lslmi	r1, r1, #1
 800792c:	1058      	asrs	r0, r3, #1
 800792e:	2500      	movs	r5, #0
 8007930:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8007934:	441a      	add	r2, r3
 8007936:	0049      	lsls	r1, r1, #1
 8007938:	2316      	movs	r3, #22
 800793a:	462c      	mov	r4, r5
 800793c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007940:	19a7      	adds	r7, r4, r6
 8007942:	4297      	cmp	r7, r2
 8007944:	bfde      	ittt	le
 8007946:	1bd2      	suble	r2, r2, r7
 8007948:	19bc      	addle	r4, r7, r6
 800794a:	19ad      	addle	r5, r5, r6
 800794c:	0052      	lsls	r2, r2, #1
 800794e:	3b01      	subs	r3, #1
 8007950:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007954:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007958:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800795c:	d1f0      	bne.n	8007940 <__ieee754_sqrt+0xb0>
 800795e:	f04f 0e20 	mov.w	lr, #32
 8007962:	469c      	mov	ip, r3
 8007964:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007968:	42a2      	cmp	r2, r4
 800796a:	eb06 070c 	add.w	r7, r6, ip
 800796e:	dc02      	bgt.n	8007976 <__ieee754_sqrt+0xe6>
 8007970:	d112      	bne.n	8007998 <__ieee754_sqrt+0x108>
 8007972:	428f      	cmp	r7, r1
 8007974:	d810      	bhi.n	8007998 <__ieee754_sqrt+0x108>
 8007976:	2f00      	cmp	r7, #0
 8007978:	eb07 0c06 	add.w	ip, r7, r6
 800797c:	da34      	bge.n	80079e8 <__ieee754_sqrt+0x158>
 800797e:	f1bc 0f00 	cmp.w	ip, #0
 8007982:	db31      	blt.n	80079e8 <__ieee754_sqrt+0x158>
 8007984:	f104 0801 	add.w	r8, r4, #1
 8007988:	1b12      	subs	r2, r2, r4
 800798a:	428f      	cmp	r7, r1
 800798c:	bf88      	it	hi
 800798e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007992:	1bc9      	subs	r1, r1, r7
 8007994:	4433      	add	r3, r6
 8007996:	4644      	mov	r4, r8
 8007998:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 800799c:	f1be 0e01 	subs.w	lr, lr, #1
 80079a0:	443a      	add	r2, r7
 80079a2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80079a6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80079aa:	d1dd      	bne.n	8007968 <__ieee754_sqrt+0xd8>
 80079ac:	430a      	orrs	r2, r1
 80079ae:	d006      	beq.n	80079be <__ieee754_sqrt+0x12e>
 80079b0:	1c5c      	adds	r4, r3, #1
 80079b2:	bf13      	iteet	ne
 80079b4:	3301      	addne	r3, #1
 80079b6:	3501      	addeq	r5, #1
 80079b8:	4673      	moveq	r3, lr
 80079ba:	f023 0301 	bicne.w	r3, r3, #1
 80079be:	106a      	asrs	r2, r5, #1
 80079c0:	085b      	lsrs	r3, r3, #1
 80079c2:	07e9      	lsls	r1, r5, #31
 80079c4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80079c8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80079cc:	bf48      	it	mi
 80079ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80079d2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80079d6:	461c      	mov	r4, r3
 80079d8:	e776      	b.n	80078c8 <__ieee754_sqrt+0x38>
 80079da:	0aca      	lsrs	r2, r1, #11
 80079dc:	3b15      	subs	r3, #21
 80079de:	0549      	lsls	r1, r1, #21
 80079e0:	e78b      	b.n	80078fa <__ieee754_sqrt+0x6a>
 80079e2:	0052      	lsls	r2, r2, #1
 80079e4:	3001      	adds	r0, #1
 80079e6:	e78b      	b.n	8007900 <__ieee754_sqrt+0x70>
 80079e8:	46a0      	mov	r8, r4
 80079ea:	e7cd      	b.n	8007988 <__ieee754_sqrt+0xf8>
 80079ec:	7ff00000 	.word	0x7ff00000

080079f0 <matherr>:
 80079f0:	2000      	movs	r0, #0
 80079f2:	4770      	bx	lr

080079f4 <__errno>:
 80079f4:	4b01      	ldr	r3, [pc, #4]	; (80079fc <__errno+0x8>)
 80079f6:	6818      	ldr	r0, [r3, #0]
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	20000050 	.word	0x20000050

08007a00 <_sbrk>:
 8007a00:	4b04      	ldr	r3, [pc, #16]	; (8007a14 <_sbrk+0x14>)
 8007a02:	6819      	ldr	r1, [r3, #0]
 8007a04:	4602      	mov	r2, r0
 8007a06:	b909      	cbnz	r1, 8007a0c <_sbrk+0xc>
 8007a08:	4903      	ldr	r1, [pc, #12]	; (8007a18 <_sbrk+0x18>)
 8007a0a:	6019      	str	r1, [r3, #0]
 8007a0c:	6818      	ldr	r0, [r3, #0]
 8007a0e:	4402      	add	r2, r0
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	4770      	bx	lr
 8007a14:	20000274 	.word	0x20000274
 8007a18:	2000083c 	.word	0x2000083c

08007a1c <_init>:
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	bf00      	nop
 8007a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a22:	bc08      	pop	{r3}
 8007a24:	469e      	mov	lr, r3
 8007a26:	4770      	bx	lr

08007a28 <_fini>:
 8007a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2a:	bf00      	nop
 8007a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a2e:	bc08      	pop	{r3}
 8007a30:	469e      	mov	lr, r3
 8007a32:	4770      	bx	lr
