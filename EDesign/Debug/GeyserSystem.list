
E:\EDesign\V5.0\GeyserSystem\Debug\GeyserSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004684  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800480c  0800480c  0001480c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004864  08004864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  0800486c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
  7 .bss          00000410  20000008  20000008  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000418  20000418  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024f8c  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000384a  00000000  00000000  00044fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ff6d  00000000  00000000  0004880e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001230  00000000  00000000  00058780  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001180  00000000  00000000  000599b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002041a  00000000  00000000  0005ab30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000fe44  00000000  00000000  0007af4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000b2415  00000000  00000000  0008ad8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0013d1a3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003298  00000000  00000000  0013d220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080047f4 	.word	0x080047f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	080047f4 	.word	0x080047f4

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <HAL_InitTick+0x24>)
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <HAL_InitTick+0x28>)
 80001d2:	fba3 3000 	umull	r3, r0, r3, r0
 80001d6:	0980      	lsrs	r0, r0, #6
 80001d8:	f000 fcf6 	bl	8000bc8 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 fcb2 	bl	8000b4c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000
 80001f0:	10624dd3 	.word	0x10624dd3

080001f4 <HAL_Init>:
{
 80001f4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f6:	4a07      	ldr	r2, [pc, #28]	; (8000214 <HAL_Init+0x20>)
 80001f8:	6813      	ldr	r3, [r2, #0]
 80001fa:	f043 0310 	orr.w	r3, r3, #16
 80001fe:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000200:	2003      	movs	r0, #3
 8000202:	f000 fc91 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000206:	2000      	movs	r0, #0
 8000208:	f7ff ffde 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 800020c:	f003 fc0e 	bl	8003a2c <HAL_MspInit>
}
 8000210:	2000      	movs	r0, #0
 8000212:	bd08      	pop	{r3, pc}
 8000214:	40022000 	.word	0x40022000

08000218 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000218:	4a02      	ldr	r2, [pc, #8]	; (8000224 <HAL_IncTick+0xc>)
 800021a:	6813      	ldr	r3, [r2, #0]
 800021c:	3301      	adds	r3, #1
 800021e:	6013      	str	r3, [r2, #0]
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	20000028 	.word	0x20000028

08000228 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000228:	4b01      	ldr	r3, [pc, #4]	; (8000230 <HAL_GetTick+0x8>)
 800022a:	6818      	ldr	r0, [r3, #0]
}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000028 	.word	0x20000028

08000234 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000234:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000236:	6802      	ldr	r2, [r0, #0]
 8000238:	6893      	ldr	r3, [r2, #8]
 800023a:	f003 0303 	and.w	r3, r3, #3
 800023e:	2b01      	cmp	r3, #1
 8000240:	d011      	beq.n	8000266 <ADC_Disable+0x32>
 8000242:	2300      	movs	r3, #0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d037      	beq.n	80002b8 <ADC_Disable+0x84>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000248:	6893      	ldr	r3, [r2, #8]
 800024a:	f003 030d 	and.w	r3, r3, #13
 800024e:	2b01      	cmp	r3, #1
 8000250:	d011      	beq.n	8000276 <ADC_Disable+0x42>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000252:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000254:	f043 0310 	orr.w	r3, r3, #16
 8000258:	6443      	str	r3, [r0, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800025a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	6483      	str	r3, [r0, #72]	; 0x48
      
      return HAL_ERROR;
 8000262:	2001      	movs	r0, #1
 8000264:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000266:	6813      	ldr	r3, [r2, #0]
 8000268:	f013 0f01 	tst.w	r3, #1
 800026c:	d101      	bne.n	8000272 <ADC_Disable+0x3e>
 800026e:	2300      	movs	r3, #0
 8000270:	e7e8      	b.n	8000244 <ADC_Disable+0x10>
 8000272:	2301      	movs	r3, #1
 8000274:	e7e6      	b.n	8000244 <ADC_Disable+0x10>
 8000276:	4604      	mov	r4, r0
      __HAL_ADC_DISABLE(hadc);
 8000278:	6893      	ldr	r3, [r2, #8]
 800027a:	f043 0302 	orr.w	r3, r3, #2
 800027e:	6093      	str	r3, [r2, #8]
 8000280:	6803      	ldr	r3, [r0, #0]
 8000282:	2203      	movs	r2, #3
 8000284:	601a      	str	r2, [r3, #0]
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000286:	f7ff ffcf 	bl	8000228 <HAL_GetTick>
 800028a:	4605      	mov	r5, r0
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800028c:	6823      	ldr	r3, [r4, #0]
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	f013 0f01 	tst.w	r3, #1
 8000294:	d00e      	beq.n	80002b4 <ADC_Disable+0x80>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000296:	f7ff ffc7 	bl	8000228 <HAL_GetTick>
 800029a:	1b40      	subs	r0, r0, r5
 800029c:	2802      	cmp	r0, #2
 800029e:	d9f5      	bls.n	800028c <ADC_Disable+0x58>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002a2:	f043 0310 	orr.w	r3, r3, #16
 80002a6:	6463      	str	r3, [r4, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 80002b0:	2001      	movs	r0, #1
 80002b2:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80002b4:	2000      	movs	r0, #0
 80002b6:	bd38      	pop	{r3, r4, r5, pc}
 80002b8:	2000      	movs	r0, #0
}
 80002ba:	bd38      	pop	{r3, r4, r5, pc}

080002bc <ADC_Enable>:
{
 80002bc:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002be:	6802      	ldr	r2, [r0, #0]
 80002c0:	6893      	ldr	r3, [r2, #8]
 80002c2:	f003 0303 	and.w	r3, r3, #3
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d010      	beq.n	80002ec <ADC_Enable+0x30>
 80002ca:	2300      	movs	r3, #0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d133      	bne.n	8000338 <ADC_Enable+0x7c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80002d0:	6891      	ldr	r1, [r2, #8]
 80002d2:	4b1a      	ldr	r3, [pc, #104]	; (800033c <ADC_Enable+0x80>)
 80002d4:	4219      	tst	r1, r3
 80002d6:	d011      	beq.n	80002fc <ADC_Enable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002d8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80002da:	f043 0310 	orr.w	r3, r3, #16
 80002de:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002e0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 80002e8:	2001      	movs	r0, #1
 80002ea:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002ec:	6813      	ldr	r3, [r2, #0]
 80002ee:	f013 0f01 	tst.w	r3, #1
 80002f2:	d101      	bne.n	80002f8 <ADC_Enable+0x3c>
 80002f4:	2300      	movs	r3, #0
 80002f6:	e7e9      	b.n	80002cc <ADC_Enable+0x10>
 80002f8:	2301      	movs	r3, #1
 80002fa:	e7e7      	b.n	80002cc <ADC_Enable+0x10>
 80002fc:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80002fe:	6893      	ldr	r3, [r2, #8]
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8000306:	f7ff ff8f 	bl	8000228 <HAL_GetTick>
 800030a:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800030c:	6823      	ldr	r3, [r4, #0]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f013 0f01 	tst.w	r3, #1
 8000314:	d10e      	bne.n	8000334 <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000316:	f7ff ff87 	bl	8000228 <HAL_GetTick>
 800031a:	1b40      	subs	r0, r0, r5
 800031c:	2802      	cmp	r0, #2
 800031e:	d9f5      	bls.n	800030c <ADC_Enable+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000320:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000322:	f043 0310 	orr.w	r3, r3, #16
 8000326:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000328:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000330:	2001      	movs	r0, #1
 8000332:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8000334:	2000      	movs	r0, #0
 8000336:	bd38      	pop	{r3, r4, r5, pc}
 8000338:	2000      	movs	r0, #0
}
 800033a:	bd38      	pop	{r3, r4, r5, pc}
 800033c:	8000003f 	.word	0x8000003f

08000340 <HAL_ADC_Init>:
{
 8000340:	b530      	push	{r4, r5, lr}
 8000342:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000344:	2300      	movs	r3, #0
 8000346:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000348:	2800      	cmp	r0, #0
 800034a:	f000 80fb 	beq.w	8000544 <HAL_ADC_Init+0x204>
 800034e:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000350:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000352:	f013 0f10 	tst.w	r3, #16
 8000356:	d151      	bne.n	80003fc <HAL_ADC_Init+0xbc>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000358:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800035a:	b1ab      	cbz	r3, 8000388 <HAL_ADC_Init+0x48>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800035c:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800035e:	6823      	ldr	r3, [r4, #0]
 8000360:	689a      	ldr	r2, [r3, #8]
 8000362:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000366:	d003      	beq.n	8000370 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000368:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800036a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800036e:	d046      	beq.n	80003fe <HAL_ADC_Init+0xbe>
      ADC_STATE_CLR_SET(hadc->State,
 8000370:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000372:	f023 0312 	bic.w	r3, r3, #18
 8000376:	f043 0310 	orr.w	r3, r3, #16
 800037a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800037c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800037e:	f043 0301 	orr.w	r3, r3, #1
 8000382:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000384:	2001      	movs	r0, #1
 8000386:	e03a      	b.n	80003fe <HAL_ADC_Init+0xbe>
      ADC_CLEAR_ERRORCODE(hadc);
 8000388:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 800038a:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 800038c:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 800038e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000392:	f003 fb89 	bl	8003aa8 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000396:	6823      	ldr	r3, [r4, #0]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800039e:	d001      	beq.n	80003a4 <HAL_ADC_Init+0x64>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003a0:	2000      	movs	r0, #0
 80003a2:	e7dc      	b.n	800035e <HAL_ADC_Init+0x1e>
        tmp_hal_status = ADC_Disable(hadc);
 80003a4:	4620      	mov	r0, r4
 80003a6:	f7ff ff45 	bl	8000234 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003ac:	f013 0f10 	tst.w	r3, #16
 80003b0:	d1d5      	bne.n	800035e <HAL_ADC_Init+0x1e>
 80003b2:	2800      	cmp	r0, #0
 80003b4:	d1d3      	bne.n	800035e <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 80003b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80003bc:	f023 0302 	bic.w	r3, r3, #2
 80003c0:	f043 0302 	orr.w	r3, r3, #2
 80003c4:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80003c6:	6822      	ldr	r2, [r4, #0]
 80003c8:	6893      	ldr	r3, [r2, #8]
 80003ca:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80003ce:	6093      	str	r3, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80003d0:	6822      	ldr	r2, [r4, #0]
 80003d2:	6893      	ldr	r3, [r2, #8]
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d8:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003da:	4b5b      	ldr	r3, [pc, #364]	; (8000548 <HAL_ADC_Init+0x208>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a5b      	ldr	r2, [pc, #364]	; (800054c <HAL_ADC_Init+0x20c>)
 80003e0:	fba2 2303 	umull	r2, r3, r2, r3
 80003e4:	0c9b      	lsrs	r3, r3, #18
 80003e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80003ea:	005a      	lsls	r2, r3, #1
 80003ec:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80003ee:	9b00      	ldr	r3, [sp, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d0b4      	beq.n	800035e <HAL_ADC_Init+0x1e>
            wait_loop_index--;
 80003f4:	9b00      	ldr	r3, [sp, #0]
 80003f6:	3b01      	subs	r3, #1
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	e7f8      	b.n	80003ee <HAL_ADC_Init+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003fc:	2000      	movs	r0, #0
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000400:	f013 0f10 	tst.w	r3, #16
 8000404:	f040 8095 	bne.w	8000532 <HAL_ADC_Init+0x1f2>
 8000408:	2800      	cmp	r0, #0
 800040a:	f040 8092 	bne.w	8000532 <HAL_ADC_Init+0x1f2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800040e:	6822      	ldr	r2, [r4, #0]
 8000410:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000412:	f013 0304 	ands.w	r3, r3, #4
 8000416:	f040 808c 	bne.w	8000532 <HAL_ADC_Init+0x1f2>
    ADC_STATE_CLR_SET(hadc->State,
 800041a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800041c:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8000420:	f041 0102 	orr.w	r1, r1, #2
 8000424:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000426:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800042a:	d055      	beq.n	80004d8 <HAL_ADC_Init+0x198>
 800042c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000430:	9101      	str	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000432:	6891      	ldr	r1, [r2, #8]
 8000434:	f001 0103 	and.w	r1, r1, #3
 8000438:	2901      	cmp	r1, #1
 800043a:	d050      	beq.n	80004de <HAL_ADC_Init+0x19e>
 800043c:	2200      	movs	r2, #0
 800043e:	b972      	cbnz	r2, 800045e <HAL_ADC_Init+0x11e>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000440:	9d01      	ldr	r5, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000442:	b12d      	cbz	r5, 8000450 <HAL_ADC_Init+0x110>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000444:	68a9      	ldr	r1, [r5, #8]
 8000446:	f001 0103 	and.w	r1, r1, #3
 800044a:	2901      	cmp	r1, #1
 800044c:	d04f      	beq.n	80004ee <HAL_ADC_Init+0x1ae>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800044e:	b932      	cbnz	r2, 800045e <HAL_ADC_Init+0x11e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000450:	493f      	ldr	r1, [pc, #252]	; (8000550 <HAL_ADC_Init+0x210>)
 8000452:	688a      	ldr	r2, [r1, #8]
 8000454:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000458:	6865      	ldr	r5, [r4, #4]
 800045a:	432a      	orrs	r2, r5
 800045c:	608a      	str	r2, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800045e:	69e2      	ldr	r2, [r4, #28]
 8000460:	0351      	lsls	r1, r2, #13
 8000462:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000464:	2d01      	cmp	r5, #1
 8000466:	d001      	beq.n	800046c <HAL_ADC_Init+0x12c>
 8000468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800046c:	430b      	orrs	r3, r1
 800046e:	68e1      	ldr	r1, [r4, #12]
 8000470:	430b      	orrs	r3, r1
 8000472:	68a1      	ldr	r1, [r4, #8]
 8000474:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000476:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000478:	2901      	cmp	r1, #1
 800047a:	d03e      	beq.n	80004fa <HAL_ADC_Init+0x1ba>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800047c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800047e:	2a01      	cmp	r2, #1
 8000480:	d002      	beq.n	8000488 <HAL_ADC_Init+0x148>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000482:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000484:	430a      	orrs	r2, r1
 8000486:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000488:	6822      	ldr	r2, [r4, #0]
 800048a:	6891      	ldr	r1, [r2, #8]
 800048c:	f011 0f0c 	tst.w	r1, #12
 8000490:	d10b      	bne.n	80004aa <HAL_ADC_Init+0x16a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000492:	68d1      	ldr	r1, [r2, #12]
 8000494:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000498:	f021 0102 	bic.w	r1, r1, #2
 800049c:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800049e:	69a1      	ldr	r1, [r4, #24]
 80004a0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80004a2:	0052      	lsls	r2, r2, #1
 80004a4:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 80004a8:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 80004aa:	6821      	ldr	r1, [r4, #0]
 80004ac:	68cd      	ldr	r5, [r1, #12]
 80004ae:	4a29      	ldr	r2, [pc, #164]	; (8000554 <HAL_ADC_Init+0x214>)
 80004b0:	402a      	ands	r2, r5
 80004b2:	4313      	orrs	r3, r2
 80004b4:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80004b6:	6923      	ldr	r3, [r4, #16]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d031      	beq.n	8000520 <HAL_ADC_Init+0x1e0>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80004bc:	6822      	ldr	r2, [r4, #0]
 80004be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80004c0:	f023 030f 	bic.w	r3, r3, #15
 80004c4:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80004c6:	2300      	movs	r3, #0
 80004c8:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80004ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004cc:	f023 0303 	bic.w	r3, r3, #3
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6463      	str	r3, [r4, #68]	; 0x44
 80004d6:	e033      	b.n	8000540 <HAL_ADC_Init+0x200>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004d8:	491f      	ldr	r1, [pc, #124]	; (8000558 <HAL_ADC_Init+0x218>)
 80004da:	9101      	str	r1, [sp, #4]
 80004dc:	e7a9      	b.n	8000432 <HAL_ADC_Init+0xf2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004de:	6812      	ldr	r2, [r2, #0]
 80004e0:	f012 0f01 	tst.w	r2, #1
 80004e4:	d101      	bne.n	80004ea <HAL_ADC_Init+0x1aa>
 80004e6:	2200      	movs	r2, #0
 80004e8:	e7a9      	b.n	800043e <HAL_ADC_Init+0xfe>
 80004ea:	2201      	movs	r2, #1
 80004ec:	e7a7      	b.n	800043e <HAL_ADC_Init+0xfe>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80004ee:	6829      	ldr	r1, [r5, #0]
 80004f0:	f011 0f01 	tst.w	r1, #1
 80004f4:	d0ab      	beq.n	800044e <HAL_ADC_Init+0x10e>
 80004f6:	2201      	movs	r2, #1
 80004f8:	e7a9      	b.n	800044e <HAL_ADC_Init+0x10e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80004fa:	b932      	cbnz	r2, 800050a <HAL_ADC_Init+0x1ca>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80004fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004fe:	3a01      	subs	r2, #1
 8000500:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000508:	e7b8      	b.n	800047c <HAL_ADC_Init+0x13c>
        ADC_STATE_CLR_SET(hadc->State,
 800050a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800050c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8000510:	f042 0220 	orr.w	r2, r2, #32
 8000514:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000516:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000518:	f042 0201 	orr.w	r2, r2, #1
 800051c:	64a2      	str	r2, [r4, #72]	; 0x48
 800051e:	e7ad      	b.n	800047c <HAL_ADC_Init+0x13c>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000520:	6821      	ldr	r1, [r4, #0]
 8000522:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000524:	f023 030f 	bic.w	r3, r3, #15
 8000528:	6a22      	ldr	r2, [r4, #32]
 800052a:	3a01      	subs	r2, #1
 800052c:	4313      	orrs	r3, r2
 800052e:	630b      	str	r3, [r1, #48]	; 0x30
 8000530:	e7c9      	b.n	80004c6 <HAL_ADC_Init+0x186>
    ADC_STATE_CLR_SET(hadc->State,
 8000532:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000534:	f023 0312 	bic.w	r3, r3, #18
 8000538:	f043 0310 	orr.w	r3, r3, #16
 800053c:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR; 
 800053e:	2001      	movs	r0, #1
}
 8000540:	b017      	add	sp, #92	; 0x5c
 8000542:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8000544:	2001      	movs	r0, #1
 8000546:	e7fb      	b.n	8000540 <HAL_ADC_Init+0x200>
 8000548:	20000000 	.word	0x20000000
 800054c:	431bde83 	.word	0x431bde83
 8000550:	50000300 	.word	0x50000300
 8000554:	fff0c007 	.word	0xfff0c007
 8000558:	50000100 	.word	0x50000100

0800055c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800055c:	6803      	ldr	r3, [r0, #0]
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	f013 0f04 	tst.w	r3, #4
 8000564:	d002      	beq.n	800056c <HAL_ADC_Start+0x10>
    tmp_hal_status = HAL_BUSY;
 8000566:	2302      	movs	r3, #2
}
 8000568:	4618      	mov	r0, r3
 800056a:	4770      	bx	lr
    __HAL_LOCK(hadc);
 800056c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000570:	2b01      	cmp	r3, #1
 8000572:	d101      	bne.n	8000578 <HAL_ADC_Start+0x1c>
 8000574:	2302      	movs	r3, #2
 8000576:	e7f7      	b.n	8000568 <HAL_ADC_Start+0xc>
{
 8000578:	b510      	push	{r4, lr}
 800057a:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800057c:	2301      	movs	r3, #1
 800057e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 8000582:	f7ff fe9b 	bl	80002bc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000586:	4603      	mov	r3, r0
 8000588:	2800      	cmp	r0, #0
 800058a:	d160      	bne.n	800064e <HAL_ADC_Start+0xf2>
      ADC_STATE_CLR_SET(hadc->State,
 800058c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800058e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000592:	f022 0201 	bic.w	r2, r2, #1
 8000596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800059a:	6462      	str	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800059c:	4a2e      	ldr	r2, [pc, #184]	; (8000658 <HAL_ADC_Start+0xfc>)
 800059e:	6892      	ldr	r2, [r2, #8]
 80005a0:	f012 0f1f 	tst.w	r2, #31
 80005a4:	d033      	beq.n	800060e <HAL_ADC_Start+0xb2>
 80005a6:	6821      	ldr	r1, [r4, #0]
 80005a8:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80005ac:	d02f      	beq.n	800060e <HAL_ADC_Start+0xb2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80005b4:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005b6:	4a29      	ldr	r2, [pc, #164]	; (800065c <HAL_ADC_Start+0x100>)
 80005b8:	4291      	cmp	r1, r2
 80005ba:	d038      	beq.n	800062e <HAL_ADC_Start+0xd2>
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005bc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005be:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80005c2:	d041      	beq.n	8000648 <HAL_ADC_Start+0xec>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80005c4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80005c6:	f022 0206 	bic.w	r2, r2, #6
 80005ca:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80005cc:	2200      	movs	r2, #0
 80005ce:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005d2:	6822      	ldr	r2, [r4, #0]
 80005d4:	211c      	movs	r1, #28
 80005d6:	6011      	str	r1, [r2, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80005d8:	4a1f      	ldr	r2, [pc, #124]	; (8000658 <HAL_ADC_Start+0xfc>)
 80005da:	6892      	ldr	r2, [r2, #8]
 80005dc:	f012 0f1f 	tst.w	r2, #31
 80005e0:	d00f      	beq.n	8000602 <HAL_ADC_Start+0xa6>
 80005e2:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <HAL_ADC_Start+0xfc>)
 80005e4:	6892      	ldr	r2, [r2, #8]
 80005e6:	f002 021f 	and.w	r2, r2, #31
 80005ea:	2a05      	cmp	r2, #5
 80005ec:	d009      	beq.n	8000602 <HAL_ADC_Start+0xa6>
 80005ee:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <HAL_ADC_Start+0xfc>)
 80005f0:	6892      	ldr	r2, [r2, #8]
 80005f2:	f002 021f 	and.w	r2, r2, #31
 80005f6:	2a09      	cmp	r2, #9
 80005f8:	d003      	beq.n	8000602 <HAL_ADC_Start+0xa6>
 80005fa:	6822      	ldr	r2, [r4, #0]
 80005fc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000600:	d128      	bne.n	8000654 <HAL_ADC_Start+0xf8>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000602:	6821      	ldr	r1, [r4, #0]
 8000604:	688a      	ldr	r2, [r1, #8]
 8000606:	f042 0204 	orr.w	r2, r2, #4
 800060a:	608a      	str	r2, [r1, #8]
 800060c:	e022      	b.n	8000654 <HAL_ADC_Start+0xf8>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800060e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000610:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000614:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000616:	6822      	ldr	r2, [r4, #0]
 8000618:	68d2      	ldr	r2, [r2, #12]
 800061a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800061e:	d0cd      	beq.n	80005bc <HAL_ADC_Start+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000620:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000622:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000626:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800062a:	6462      	str	r2, [r4, #68]	; 0x44
 800062c:	e7c6      	b.n	80005bc <HAL_ADC_Start+0x60>
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800062e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000632:	68d2      	ldr	r2, [r2, #12]
 8000634:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000638:	d0c0      	beq.n	80005bc <HAL_ADC_Start+0x60>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800063a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800063c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000640:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000644:	6462      	str	r2, [r4, #68]	; 0x44
 8000646:	e7b9      	b.n	80005bc <HAL_ADC_Start+0x60>
        ADC_CLEAR_ERRORCODE(hadc);
 8000648:	2200      	movs	r2, #0
 800064a:	64a2      	str	r2, [r4, #72]	; 0x48
 800064c:	e7be      	b.n	80005cc <HAL_ADC_Start+0x70>
      __HAL_UNLOCK(hadc);
 800064e:	2200      	movs	r2, #0
 8000650:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
}
 8000654:	4618      	mov	r0, r3
 8000656:	bd10      	pop	{r4, pc}
 8000658:	50000300 	.word	0x50000300
 800065c:	50000100 	.word	0x50000100

08000660 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000660:	6803      	ldr	r3, [r0, #0]
 8000662:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000664:	4770      	bx	lr
	...

08000668 <HAL_ADC_ConfigChannel>:
{
 8000668:	b470      	push	{r4, r5, r6}
 800066a:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 800066c:	2200      	movs	r2, #0
 800066e:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(hadc);
 8000670:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8000674:	2a01      	cmp	r2, #1
 8000676:	f000 81ad 	beq.w	80009d4 <HAL_ADC_ConfigChannel+0x36c>
 800067a:	4603      	mov	r3, r0
 800067c:	2201      	movs	r2, #1
 800067e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000682:	6800      	ldr	r0, [r0, #0]
 8000684:	6882      	ldr	r2, [r0, #8]
 8000686:	f012 0f04 	tst.w	r2, #4
 800068a:	f040 8196 	bne.w	80009ba <HAL_ADC_ConfigChannel+0x352>
    if (sConfig->Rank < 5U)
 800068e:	684a      	ldr	r2, [r1, #4]
 8000690:	2a04      	cmp	r2, #4
 8000692:	d831      	bhi.n	80006f8 <HAL_ADC_ConfigChannel+0x90>
      MODIFY_REG(hadc->Instance->SQR1,
 8000694:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000696:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800069a:	0055      	lsls	r5, r2, #1
 800069c:	221f      	movs	r2, #31
 800069e:	40aa      	lsls	r2, r5
 80006a0:	ea24 0202 	bic.w	r2, r4, r2
 80006a4:	680c      	ldr	r4, [r1, #0]
 80006a6:	40ac      	lsls	r4, r5
 80006a8:	4322      	orrs	r2, r4
 80006aa:	6302      	str	r2, [r0, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	6882      	ldr	r2, [r0, #8]
 80006b0:	f012 0f0c 	tst.w	r2, #12
 80006b4:	d168      	bne.n	8000788 <HAL_ADC_ConfigChannel+0x120>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80006b6:	680a      	ldr	r2, [r1, #0]
 80006b8:	2a09      	cmp	r2, #9
 80006ba:	d94e      	bls.n	800075a <HAL_ADC_ConfigChannel+0xf2>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80006bc:	6984      	ldr	r4, [r0, #24]
 80006be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80006c2:	3a1e      	subs	r2, #30
 80006c4:	2507      	movs	r5, #7
 80006c6:	4095      	lsls	r5, r2
 80006c8:	ea24 0405 	bic.w	r4, r4, r5
 80006cc:	688d      	ldr	r5, [r1, #8]
 80006ce:	fa05 f202 	lsl.w	r2, r5, r2
 80006d2:	4322      	orrs	r2, r4
 80006d4:	6182      	str	r2, [r0, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80006d6:	6948      	ldr	r0, [r1, #20]
 80006d8:	681c      	ldr	r4, [r3, #0]
 80006da:	68e2      	ldr	r2, [r4, #12]
 80006dc:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80006e0:	0052      	lsls	r2, r2, #1
 80006e2:	fa00 f202 	lsl.w	r2, r0, r2
    switch (sConfig->OffsetNumber)
 80006e6:	6908      	ldr	r0, [r1, #16]
 80006e8:	3801      	subs	r0, #1
 80006ea:	2803      	cmp	r0, #3
 80006ec:	f200 808f 	bhi.w	800080e <HAL_ADC_ConfigChannel+0x1a6>
 80006f0:	e8df f000 	tbb	[pc, r0]
 80006f4:	82776c40 	.word	0x82776c40
    else if (sConfig->Rank < 10U)
 80006f8:	2a09      	cmp	r2, #9
 80006fa:	d80e      	bhi.n	800071a <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 80006fc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80006fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000702:	0055      	lsls	r5, r2, #1
 8000704:	3d1e      	subs	r5, #30
 8000706:	221f      	movs	r2, #31
 8000708:	40aa      	lsls	r2, r5
 800070a:	ea24 0202 	bic.w	r2, r4, r2
 800070e:	680c      	ldr	r4, [r1, #0]
 8000710:	fa04 f505 	lsl.w	r5, r4, r5
 8000714:	432a      	orrs	r2, r5
 8000716:	6342      	str	r2, [r0, #52]	; 0x34
 8000718:	e7c8      	b.n	80006ac <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 800071a:	2a0e      	cmp	r2, #14
 800071c:	d80e      	bhi.n	800073c <HAL_ADC_ConfigChannel+0xd4>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800071e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8000720:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000724:	0055      	lsls	r5, r2, #1
 8000726:	3d3c      	subs	r5, #60	; 0x3c
 8000728:	221f      	movs	r2, #31
 800072a:	40aa      	lsls	r2, r5
 800072c:	ea24 0202 	bic.w	r2, r4, r2
 8000730:	680c      	ldr	r4, [r1, #0]
 8000732:	fa04 f505 	lsl.w	r5, r4, r5
 8000736:	432a      	orrs	r2, r5
 8000738:	6382      	str	r2, [r0, #56]	; 0x38
 800073a:	e7b7      	b.n	80006ac <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800073c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800073e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000742:	0055      	lsls	r5, r2, #1
 8000744:	3d5a      	subs	r5, #90	; 0x5a
 8000746:	221f      	movs	r2, #31
 8000748:	40aa      	lsls	r2, r5
 800074a:	ea24 0202 	bic.w	r2, r4, r2
 800074e:	680c      	ldr	r4, [r1, #0]
 8000750:	fa04 f505 	lsl.w	r5, r4, r5
 8000754:	432a      	orrs	r2, r5
 8000756:	63c2      	str	r2, [r0, #60]	; 0x3c
 8000758:	e7a8      	b.n	80006ac <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800075a:	6944      	ldr	r4, [r0, #20]
 800075c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000760:	2507      	movs	r5, #7
 8000762:	4095      	lsls	r5, r2
 8000764:	ea24 0405 	bic.w	r4, r4, r5
 8000768:	688d      	ldr	r5, [r1, #8]
 800076a:	fa05 f202 	lsl.w	r2, r5, r2
 800076e:	4322      	orrs	r2, r4
 8000770:	6142      	str	r2, [r0, #20]
 8000772:	e7b0      	b.n	80006d6 <HAL_ADC_ConfigChannel+0x6e>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000774:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8000776:	4d98      	ldr	r5, [pc, #608]	; (80009d8 <HAL_ADC_ConfigChannel+0x370>)
 8000778:	4005      	ands	r5, r0
 800077a:	6808      	ldr	r0, [r1, #0]
 800077c:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000780:	4315      	orrs	r5, r2
 8000782:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8000786:	6625      	str	r5, [r4, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	6882      	ldr	r2, [r0, #8]
 800078c:	f002 0203 	and.w	r2, r2, #3
 8000790:	2a01      	cmp	r2, #1
 8000792:	d06f      	beq.n	8000874 <HAL_ADC_ConfigChannel+0x20c>
 8000794:	2200      	movs	r2, #0
 8000796:	2a00      	cmp	r2, #0
 8000798:	f040 811a 	bne.w	80009d0 <HAL_ADC_ConfigChannel+0x368>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800079c:	68cc      	ldr	r4, [r1, #12]
 800079e:	2c01      	cmp	r4, #1
 80007a0:	d070      	beq.n	8000884 <HAL_ADC_ConfigChannel+0x21c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80007a2:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80007a6:	680e      	ldr	r6, [r1, #0]
 80007a8:	2501      	movs	r5, #1
 80007aa:	40b5      	lsls	r5, r6
 80007ac:	ea24 0405 	bic.w	r4, r4, r5
 80007b0:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80007b4:	6809      	ldr	r1, [r1, #0]
 80007b6:	2910      	cmp	r1, #16
 80007b8:	f000 808d 	beq.w	80008d6 <HAL_ADC_ConfigChannel+0x26e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80007bc:	2911      	cmp	r1, #17
 80007be:	f000 80af 	beq.w	8000920 <HAL_ADC_ConfigChannel+0x2b8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80007c2:	2912      	cmp	r1, #18
 80007c4:	f000 80b2 	beq.w	800092c <HAL_ADC_ConfigChannel+0x2c4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007c8:	2000      	movs	r0, #0
 80007ca:	e0fb      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x35c>
      MODIFY_REG(hadc->Instance->OFR2               ,
 80007cc:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80007ce:	4d82      	ldr	r5, [pc, #520]	; (80009d8 <HAL_ADC_ConfigChannel+0x370>)
 80007d0:	4005      	ands	r5, r0
 80007d2:	6808      	ldr	r0, [r1, #0]
 80007d4:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80007d8:	4315      	orrs	r5, r2
 80007da:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80007de:	6665      	str	r5, [r4, #100]	; 0x64
      break;
 80007e0:	e7d2      	b.n	8000788 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80007e2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80007e4:	4d7c      	ldr	r5, [pc, #496]	; (80009d8 <HAL_ADC_ConfigChannel+0x370>)
 80007e6:	4005      	ands	r5, r0
 80007e8:	6808      	ldr	r0, [r1, #0]
 80007ea:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 80007ee:	4315      	orrs	r5, r2
 80007f0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80007f4:	66a5      	str	r5, [r4, #104]	; 0x68
      break;
 80007f6:	e7c7      	b.n	8000788 <HAL_ADC_ConfigChannel+0x120>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80007f8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80007fa:	4877      	ldr	r0, [pc, #476]	; (80009d8 <HAL_ADC_ConfigChannel+0x370>)
 80007fc:	4028      	ands	r0, r5
 80007fe:	680d      	ldr	r5, [r1, #0]
 8000800:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
 8000804:	4302      	orrs	r2, r0
 8000806:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800080a:	66e2      	str	r2, [r4, #108]	; 0x6c
      break;
 800080c:	e7bc      	b.n	8000788 <HAL_ADC_ConfigChannel+0x120>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800080e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000810:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000814:	6808      	ldr	r0, [r1, #0]
 8000816:	ebb2 6f80 	cmp.w	r2, r0, lsl #26
 800081a:	d01c      	beq.n	8000856 <HAL_ADC_ConfigChannel+0x1ee>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000820:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000824:	680c      	ldr	r4, [r1, #0]
 8000826:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800082a:	d019      	beq.n	8000860 <HAL_ADC_ConfigChannel+0x1f8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800082c:	6818      	ldr	r0, [r3, #0]
 800082e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8000830:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000834:	680c      	ldr	r4, [r1, #0]
 8000836:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800083a:	d016      	beq.n	800086a <HAL_ADC_ConfigChannel+0x202>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800083c:	6818      	ldr	r0, [r3, #0]
 800083e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000840:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000844:	680c      	ldr	r4, [r1, #0]
 8000846:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
 800084a:	d19d      	bne.n	8000788 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800084c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800084e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000852:	66c2      	str	r2, [r0, #108]	; 0x6c
 8000854:	e798      	b.n	8000788 <HAL_ADC_ConfigChannel+0x120>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000856:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000858:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800085c:	6622      	str	r2, [r4, #96]	; 0x60
 800085e:	e7dd      	b.n	800081c <HAL_ADC_ConfigChannel+0x1b4>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000860:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000862:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000866:	6642      	str	r2, [r0, #100]	; 0x64
 8000868:	e7e0      	b.n	800082c <HAL_ADC_ConfigChannel+0x1c4>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800086a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800086c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000870:	6682      	str	r2, [r0, #104]	; 0x68
 8000872:	e7e3      	b.n	800083c <HAL_ADC_ConfigChannel+0x1d4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000874:	6802      	ldr	r2, [r0, #0]
 8000876:	f012 0f01 	tst.w	r2, #1
 800087a:	d101      	bne.n	8000880 <HAL_ADC_ConfigChannel+0x218>
 800087c:	2200      	movs	r2, #0
 800087e:	e78a      	b.n	8000796 <HAL_ADC_ConfigChannel+0x12e>
 8000880:	2201      	movs	r2, #1
 8000882:	e788      	b.n	8000796 <HAL_ADC_ConfigChannel+0x12e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000884:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8000888:	680e      	ldr	r6, [r1, #0]
 800088a:	2501      	movs	r5, #1
 800088c:	40b5      	lsls	r5, r6
 800088e:	432c      	orrs	r4, r5
 8000890:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000894:	6808      	ldr	r0, [r1, #0]
 8000896:	2809      	cmp	r0, #9
 8000898:	d90e      	bls.n	80008b8 <HAL_ADC_ConfigChannel+0x250>
        MODIFY_REG(hadc->Instance->SMPR2,
 800089a:	681e      	ldr	r6, [r3, #0]
 800089c:	69b4      	ldr	r4, [r6, #24]
 800089e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80008a2:	381b      	subs	r0, #27
 80008a4:	2507      	movs	r5, #7
 80008a6:	4085      	lsls	r5, r0
 80008a8:	ea24 0405 	bic.w	r4, r4, r5
 80008ac:	688d      	ldr	r5, [r1, #8]
 80008ae:	fa05 f000 	lsl.w	r0, r5, r0
 80008b2:	4320      	orrs	r0, r4
 80008b4:	61b0      	str	r0, [r6, #24]
 80008b6:	e77d      	b.n	80007b4 <HAL_ADC_ConfigChannel+0x14c>
        MODIFY_REG(hadc->Instance->SMPR1,
 80008b8:	681e      	ldr	r6, [r3, #0]
 80008ba:	6974      	ldr	r4, [r6, #20]
 80008bc:	3001      	adds	r0, #1
 80008be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80008c2:	2507      	movs	r5, #7
 80008c4:	4085      	lsls	r5, r0
 80008c6:	ea24 0405 	bic.w	r4, r4, r5
 80008ca:	688d      	ldr	r5, [r1, #8]
 80008cc:	fa05 f000 	lsl.w	r0, r5, r0
 80008d0:	4320      	orrs	r0, r4
 80008d2:	6170      	str	r0, [r6, #20]
 80008d4:	e76e      	b.n	80007b4 <HAL_ADC_ConfigChannel+0x14c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80008d6:	4841      	ldr	r0, [pc, #260]	; (80009dc <HAL_ADC_ConfigChannel+0x374>)
 80008d8:	6880      	ldr	r0, [r0, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80008da:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80008de:	f47f af6d 	bne.w	80007bc <HAL_ADC_ConfigChannel+0x154>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80008e2:	681c      	ldr	r4, [r3, #0]
 80008e4:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80008e8:	d027      	beq.n	800093a <HAL_ADC_ConfigChannel+0x2d2>
 80008ea:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80008ee:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80008f0:	68a0      	ldr	r0, [r4, #8]
 80008f2:	f000 0003 	and.w	r0, r0, #3
 80008f6:	2801      	cmp	r0, #1
 80008f8:	d022      	beq.n	8000940 <HAL_ADC_ConfigChannel+0x2d8>
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	d157      	bne.n	80009ae <HAL_ADC_ConfigChannel+0x346>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80008fe:	9d01      	ldr	r5, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000900:	b135      	cbz	r5, 8000910 <HAL_ADC_ConfigChannel+0x2a8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000902:	68a8      	ldr	r0, [r5, #8]
 8000904:	f000 0003 	and.w	r0, r0, #3
 8000908:	2801      	cmp	r0, #1
 800090a:	d01f      	beq.n	800094c <HAL_ADC_ConfigChannel+0x2e4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800090c:	2a00      	cmp	r2, #0
 800090e:	d14e      	bne.n	80009ae <HAL_ADC_ConfigChannel+0x346>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000910:	2910      	cmp	r1, #16
 8000912:	d021      	beq.n	8000958 <HAL_ADC_ConfigChannel+0x2f0>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000914:	2911      	cmp	r1, #17
 8000916:	d039      	beq.n	800098c <HAL_ADC_ConfigChannel+0x324>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000918:	2912      	cmp	r1, #18
 800091a:	d041      	beq.n	80009a0 <HAL_ADC_ConfigChannel+0x338>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800091c:	2000      	movs	r0, #0
 800091e:	e051      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x35c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000920:	482e      	ldr	r0, [pc, #184]	; (80009dc <HAL_ADC_ConfigChannel+0x374>)
 8000922:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000924:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8000928:	d0db      	beq.n	80008e2 <HAL_ADC_ConfigChannel+0x27a>
 800092a:	e74a      	b.n	80007c2 <HAL_ADC_ConfigChannel+0x15a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800092c:	482b      	ldr	r0, [pc, #172]	; (80009dc <HAL_ADC_ConfigChannel+0x374>)
 800092e:	6880      	ldr	r0, [r0, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000930:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8000934:	d0d5      	beq.n	80008e2 <HAL_ADC_ConfigChannel+0x27a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000936:	2000      	movs	r0, #0
 8000938:	e044      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x35c>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800093a:	4829      	ldr	r0, [pc, #164]	; (80009e0 <HAL_ADC_ConfigChannel+0x378>)
 800093c:	9001      	str	r0, [sp, #4]
 800093e:	e7d7      	b.n	80008f0 <HAL_ADC_ConfigChannel+0x288>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000940:	6820      	ldr	r0, [r4, #0]
 8000942:	f010 0f01 	tst.w	r0, #1
 8000946:	d0d8      	beq.n	80008fa <HAL_ADC_ConfigChannel+0x292>
 8000948:	2201      	movs	r2, #1
 800094a:	e7d6      	b.n	80008fa <HAL_ADC_ConfigChannel+0x292>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800094c:	6828      	ldr	r0, [r5, #0]
 800094e:	f010 0f01 	tst.w	r0, #1
 8000952:	d0db      	beq.n	800090c <HAL_ADC_ConfigChannel+0x2a4>
 8000954:	2201      	movs	r2, #1
 8000956:	e7d9      	b.n	800090c <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000958:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800095c:	d1da      	bne.n	8000914 <HAL_ADC_ConfigChannel+0x2ac>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800095e:	491f      	ldr	r1, [pc, #124]	; (80009dc <HAL_ADC_ConfigChannel+0x374>)
 8000960:	688a      	ldr	r2, [r1, #8]
 8000962:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000966:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000968:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <HAL_ADC_ConfigChannel+0x37c>)
 800096a:	6812      	ldr	r2, [r2, #0]
 800096c:	491e      	ldr	r1, [pc, #120]	; (80009e8 <HAL_ADC_ConfigChannel+0x380>)
 800096e:	fbb2 f1f1 	udiv	r1, r2, r1
 8000972:	220a      	movs	r2, #10
 8000974:	fb02 f201 	mul.w	r2, r2, r1
 8000978:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 800097a:	e002      	b.n	8000982 <HAL_ADC_ConfigChannel+0x31a>
            wait_loop_index--;
 800097c:	9a00      	ldr	r2, [sp, #0]
 800097e:	3a01      	subs	r2, #1
 8000980:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 8000982:	9a00      	ldr	r2, [sp, #0]
 8000984:	2a00      	cmp	r2, #0
 8000986:	d1f9      	bne.n	800097c <HAL_ADC_ConfigChannel+0x314>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000988:	2000      	movs	r0, #0
 800098a:	e01b      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x35c>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800098c:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8000990:	d1c2      	bne.n	8000918 <HAL_ADC_ConfigChannel+0x2b0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000992:	4912      	ldr	r1, [pc, #72]	; (80009dc <HAL_ADC_ConfigChannel+0x374>)
 8000994:	688a      	ldr	r2, [r1, #8]
 8000996:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800099a:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800099c:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800099e:	e011      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x35c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80009a0:	490e      	ldr	r1, [pc, #56]	; (80009dc <HAL_ADC_ConfigChannel+0x374>)
 80009a2:	688a      	ldr	r2, [r1, #8]
 80009a4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80009a8:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009aa:	2000      	movs	r0, #0
 80009ac:	e00a      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x35c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009b0:	f042 0220 	orr.w	r2, r2, #32
 80009b4:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 80009b6:	2001      	movs	r0, #1
 80009b8:	e004      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x35c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009bc:	f042 0220 	orr.w	r2, r2, #32
 80009c0:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80009c2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80009ca:	b017      	add	sp, #92	; 0x5c
 80009cc:	bc70      	pop	{r4, r5, r6}
 80009ce:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009d0:	2000      	movs	r0, #0
 80009d2:	e7f7      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x35c>
  __HAL_LOCK(hadc);
 80009d4:	2002      	movs	r0, #2
 80009d6:	e7f8      	b.n	80009ca <HAL_ADC_ConfigChannel+0x362>
 80009d8:	83fff000 	.word	0x83fff000
 80009dc:	50000300 	.word	0x50000300
 80009e0:	50000100 	.word	0x50000100
 80009e4:	20000000 	.word	0x20000000
 80009e8:	000f4240 	.word	0x000f4240

080009ec <HAL_ADCEx_MultiModeConfigChannel>:
{
 80009ec:	b470      	push	{r4, r5, r6}
 80009ee:	b097      	sub	sp, #92	; 0x5c
 80009f0:	4603      	mov	r3, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80009f2:	6802      	ldr	r2, [r0, #0]
 80009f4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80009f8:	d040      	beq.n	8000a7c <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80009fa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80009fe:	9001      	str	r0, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000a00:	9801      	ldr	r0, [sp, #4]
 8000a02:	2800      	cmp	r0, #0
 8000a04:	f000 8088 	beq.w	8000b18 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
  __HAL_LOCK(hadc);
 8000a08:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
 8000a0c:	2c01      	cmp	r4, #1
 8000a0e:	f000 8085 	beq.w	8000b1c <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8000a12:	2401      	movs	r4, #1
 8000a14:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000a18:	6892      	ldr	r2, [r2, #8]
 8000a1a:	f012 0f04 	tst.w	r2, #4
 8000a1e:	d168      	bne.n	8000af2 <HAL_ADCEx_MultiModeConfigChannel+0x106>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000a20:	6882      	ldr	r2, [r0, #8]
 8000a22:	f012 0f04 	tst.w	r2, #4
 8000a26:	d164      	bne.n	8000af2 <HAL_ADCEx_MultiModeConfigChannel+0x106>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000a28:	680a      	ldr	r2, [r1, #0]
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	d037      	beq.n	8000a9e <HAL_ADCEx_MultiModeConfigChannel+0xb2>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000a2e:	4d3c      	ldr	r5, [pc, #240]	; (8000b20 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8000a30:	68aa      	ldr	r2, [r5, #8]
 8000a32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000a36:	684c      	ldr	r4, [r1, #4]
 8000a38:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8000a3a:	ea44 3446 	orr.w	r4, r4, r6, lsl #13
 8000a3e:	4322      	orrs	r2, r4
 8000a40:	60aa      	str	r2, [r5, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000a42:	681c      	ldr	r4, [r3, #0]
 8000a44:	68a2      	ldr	r2, [r4, #8]
 8000a46:	f002 0203 	and.w	r2, r2, #3
 8000a4a:	2a01      	cmp	r2, #1
 8000a4c:	d019      	beq.n	8000a82 <HAL_ADCEx_MultiModeConfigChannel+0x96>
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2a00      	cmp	r2, #0
 8000a52:	d159      	bne.n	8000b08 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000a54:	6884      	ldr	r4, [r0, #8]
 8000a56:	f004 0403 	and.w	r4, r4, #3
 8000a5a:	2c01      	cmp	r4, #1
 8000a5c:	d019      	beq.n	8000a92 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000a5e:	2a00      	cmp	r2, #0
 8000a60:	d154      	bne.n	8000b0c <HAL_ADCEx_MultiModeConfigChannel+0x120>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000a62:	4c2f      	ldr	r4, [pc, #188]	; (8000b20 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8000a64:	68a2      	ldr	r2, [r4, #8]
 8000a66:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000a6a:	f022 020f 	bic.w	r2, r2, #15
 8000a6e:	6808      	ldr	r0, [r1, #0]
 8000a70:	6889      	ldr	r1, [r1, #8]
 8000a72:	4301      	orrs	r1, r0
 8000a74:	430a      	orrs	r2, r1
 8000a76:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a78:	2000      	movs	r0, #0
 8000a7a:	e03f      	b.n	8000afc <HAL_ADCEx_MultiModeConfigChannel+0x110>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a7c:	4829      	ldr	r0, [pc, #164]	; (8000b24 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8000a7e:	9001      	str	r0, [sp, #4]
 8000a80:	e7be      	b.n	8000a00 <HAL_ADCEx_MultiModeConfigChannel+0x14>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000a82:	6822      	ldr	r2, [r4, #0]
 8000a84:	f012 0f01 	tst.w	r2, #1
 8000a88:	d101      	bne.n	8000a8e <HAL_ADCEx_MultiModeConfigChannel+0xa2>
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	e7e0      	b.n	8000a50 <HAL_ADCEx_MultiModeConfigChannel+0x64>
 8000a8e:	2201      	movs	r2, #1
 8000a90:	e7de      	b.n	8000a50 <HAL_ADCEx_MultiModeConfigChannel+0x64>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000a92:	6800      	ldr	r0, [r0, #0]
 8000a94:	f010 0f01 	tst.w	r0, #1
 8000a98:	d0e1      	beq.n	8000a5e <HAL_ADCEx_MultiModeConfigChannel+0x72>
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	e7df      	b.n	8000a5e <HAL_ADCEx_MultiModeConfigChannel+0x72>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000a9e:	4920      	ldr	r1, [pc, #128]	; (8000b20 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8000aa0:	688a      	ldr	r2, [r1, #8]
 8000aa2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000aa6:	608a      	str	r2, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000aa8:	6819      	ldr	r1, [r3, #0]
 8000aaa:	688a      	ldr	r2, [r1, #8]
 8000aac:	f002 0203 	and.w	r2, r2, #3
 8000ab0:	2a01      	cmp	r2, #1
 8000ab2:	d010      	beq.n	8000ad6 <HAL_ADCEx_MultiModeConfigChannel+0xea>
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	bb5a      	cbnz	r2, 8000b10 <HAL_ADCEx_MultiModeConfigChannel+0x124>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000ab8:	6881      	ldr	r1, [r0, #8]
 8000aba:	f001 0103 	and.w	r1, r1, #3
 8000abe:	2901      	cmp	r1, #1
 8000ac0:	d011      	beq.n	8000ae6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000ac2:	bb3a      	cbnz	r2, 8000b14 <HAL_ADCEx_MultiModeConfigChannel+0x128>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000ac4:	4916      	ldr	r1, [pc, #88]	; (8000b20 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8000ac6:	688a      	ldr	r2, [r1, #8]
 8000ac8:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000acc:	f022 020f 	bic.w	r2, r2, #15
 8000ad0:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	e012      	b.n	8000afc <HAL_ADCEx_MultiModeConfigChannel+0x110>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000ad6:	680a      	ldr	r2, [r1, #0]
 8000ad8:	f012 0f01 	tst.w	r2, #1
 8000adc:	d101      	bne.n	8000ae2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8000ade:	2200      	movs	r2, #0
 8000ae0:	e7e9      	b.n	8000ab6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	e7e7      	b.n	8000ab6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000ae6:	6801      	ldr	r1, [r0, #0]
 8000ae8:	f011 0f01 	tst.w	r1, #1
 8000aec:	d0e9      	beq.n	8000ac2 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
 8000aee:	2201      	movs	r2, #1
 8000af0:	e7e7      	b.n	8000ac2 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000af4:	f042 0220 	orr.w	r2, r2, #32
 8000af8:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000afa:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 8000b02:	b017      	add	sp, #92	; 0x5c
 8000b04:	bc70      	pop	{r4, r5, r6}
 8000b06:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b08:	2000      	movs	r0, #0
 8000b0a:	e7f7      	b.n	8000afc <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	e7f5      	b.n	8000afc <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8000b10:	2000      	movs	r0, #0
 8000b12:	e7f3      	b.n	8000afc <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8000b14:	2000      	movs	r0, #0
 8000b16:	e7f1      	b.n	8000afc <HAL_ADCEx_MultiModeConfigChannel+0x110>
    return HAL_ERROR;
 8000b18:	2001      	movs	r0, #1
 8000b1a:	e7f2      	b.n	8000b02 <HAL_ADCEx_MultiModeConfigChannel+0x116>
  __HAL_LOCK(hadc);
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	e7f0      	b.n	8000b02 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8000b20:	50000300 	.word	0x50000300
 8000b24:	50000100 	.word	0x50000100

08000b28 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b2a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b30:	041b      	lsls	r3, r3, #16
 8000b32:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b34:	0200      	lsls	r0, r0, #8
 8000b36:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000b3c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000b40:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000b44:	60d0      	str	r0, [r2, #12]
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <HAL_NVIC_SetPriority+0x5c>)
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b56:	f1c3 0407 	rsb	r4, r3, #7
 8000b5a:	2c04      	cmp	r4, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b60:	1d1d      	adds	r5, r3, #4
 8000b62:	2d06      	cmp	r5, #6
 8000b64:	d917      	bls.n	8000b96 <HAL_NVIC_SetPriority+0x4a>
 8000b66:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	2501      	movs	r5, #1
 8000b6a:	fa05 f404 	lsl.w	r4, r5, r4
 8000b6e:	3c01      	subs	r4, #1
 8000b70:	4021      	ands	r1, r4
 8000b72:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b74:	fa05 f303 	lsl.w	r3, r5, r3
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	db0b      	blt.n	8000b9a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b82:	0109      	lsls	r1, r1, #4
 8000b84:	b2c9      	uxtb	r1, r1
 8000b86:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b8a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000b8e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b92:	bc30      	pop	{r4, r5}
 8000b94:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b96:	2300      	movs	r3, #0
 8000b98:	e7e6      	b.n	8000b68 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	f000 000f 	and.w	r0, r0, #15
 8000b9e:	0109      	lsls	r1, r1, #4
 8000ba0:	b2c9      	uxtb	r1, r1
 8000ba2:	4b02      	ldr	r3, [pc, #8]	; (8000bac <HAL_NVIC_SetPriority+0x60>)
 8000ba4:	5419      	strb	r1, [r3, r0]
 8000ba6:	e7f4      	b.n	8000b92 <HAL_NVIC_SetPriority+0x46>
 8000ba8:	e000ed00 	.word	0xe000ed00
 8000bac:	e000ed14 	.word	0xe000ed14

08000bb0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bb0:	0942      	lsrs	r2, r0, #5
 8000bb2:	f000 001f 	and.w	r0, r0, #31
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	fa03 f000 	lsl.w	r0, r3, r0
 8000bbc:	4b01      	ldr	r3, [pc, #4]	; (8000bc4 <HAL_NVIC_EnableIRQ+0x14>)
 8000bbe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	3801      	subs	r0, #1
 8000bca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bce:	d20a      	bcs.n	8000be6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_SYSTICK_Config+0x24>)
 8000bd2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	21f0      	movs	r1, #240	; 0xf0
 8000bd6:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <HAL_SYSTICK_Config+0x28>)
 8000bd8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bdc:	2000      	movs	r0, #0
 8000bde:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000be6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000bf4:	2804      	cmp	r0, #4
 8000bf6:	d005      	beq.n	8000c04 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000bf8:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000bfa:	6813      	ldr	r3, [r2, #0]
 8000bfc:	f023 0304 	bic.w	r3, r3, #4
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000c04:	4a02      	ldr	r2, [pc, #8]	; (8000c10 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000c06:	6813      	ldr	r3, [r2, #0]
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	4770      	bx	lr
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c14:	4770      	bx	lr

08000c16 <HAL_SYSTICK_IRQHandler>:
{
 8000c16:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000c18:	f7ff fffc 	bl	8000c14 <HAL_SYSTICK_Callback>
 8000c1c:	bd08      	pop	{r3, pc}

08000c1e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c1e:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c20:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d003      	beq.n	8000c30 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	bd08      	pop	{r3, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c30:	6802      	ldr	r2, [r0, #0]
 8000c32:	6813      	ldr	r3, [r2, #0]
 8000c34:	f023 030e 	bic.w	r3, r3, #14
 8000c38:	6013      	str	r3, [r2, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c3a:	6802      	ldr	r2, [r0, #0]
 8000c3c:	6813      	ldr	r3, [r2, #0]
 8000c3e:	f023 0301 	bic.w	r3, r3, #1
 8000c42:	6013      	str	r3, [r2, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c44:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000c46:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000c48:	2201      	movs	r2, #1
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	604b      	str	r3, [r1, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c50:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c54:	2300      	movs	r3, #0
 8000c56:	f880 3020 	strb.w	r3, [r0, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000c5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000c5c:	b113      	cbz	r3, 8000c64 <HAL_DMA_Abort_IT+0x46>
    {
      hdma->XferAbortCallback(hdma);
 8000c5e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000c60:	2000      	movs	r0, #0
 8000c62:	bd08      	pop	{r3, pc}
 8000c64:	2000      	movs	r0, #0
    } 
  }
  return status;
}
 8000c66:	bd08      	pop	{r3, pc}

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8000c6c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c6e:	e088      	b.n	8000d82 <HAL_GPIO_Init+0x11a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c70:	08de      	lsrs	r6, r3, #3
 8000c72:	3608      	adds	r6, #8
 8000c74:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c78:	f003 0e07 	and.w	lr, r3, #7
 8000c7c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000c80:	270f      	movs	r7, #15
 8000c82:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c86:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c8a:	690f      	ldr	r7, [r1, #16]
 8000c8c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c90:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8000c92:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8000c96:	e083      	b.n	8000da0 <HAL_GPIO_Init+0x138>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c98:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c9a:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c9c:	68cf      	ldr	r7, [r1, #12]
 8000c9e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ca2:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000ca4:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca8:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cac:	684e      	ldr	r6, [r1, #4]
 8000cae:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000cb2:	409e      	lsls	r6, r3
 8000cb4:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000cb6:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cb8:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cba:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cbc:	688d      	ldr	r5, [r1, #8]
 8000cbe:	fa05 f50e 	lsl.w	r5, r5, lr
 8000cc2:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000cc4:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc6:	684c      	ldr	r4, [r1, #4]
 8000cc8:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000ccc:	d058      	beq.n	8000d80 <HAL_GPIO_Init+0x118>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4c47      	ldr	r4, [pc, #284]	; (8000dec <HAL_GPIO_Init+0x184>)
 8000cd0:	69a5      	ldr	r5, [r4, #24]
 8000cd2:	f045 0501 	orr.w	r5, r5, #1
 8000cd6:	61a5      	str	r5, [r4, #24]
 8000cd8:	69a4      	ldr	r4, [r4, #24]
 8000cda:	f004 0401 	and.w	r4, r4, #1
 8000cde:	9401      	str	r4, [sp, #4]
 8000ce0:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ce2:	089d      	lsrs	r5, r3, #2
 8000ce4:	1cae      	adds	r6, r5, #2
 8000ce6:	4c42      	ldr	r4, [pc, #264]	; (8000df0 <HAL_GPIO_Init+0x188>)
 8000ce8:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000cec:	f003 0603 	and.w	r6, r3, #3
 8000cf0:	00b6      	lsls	r6, r6, #2
 8000cf2:	270f      	movs	r7, #15
 8000cf4:	40b7      	lsls	r7, r6
 8000cf6:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cfa:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000cfe:	d06c      	beq.n	8000dda <HAL_GPIO_Init+0x172>
 8000d00:	4f3c      	ldr	r7, [pc, #240]	; (8000df4 <HAL_GPIO_Init+0x18c>)
 8000d02:	42b8      	cmp	r0, r7
 8000d04:	d06b      	beq.n	8000dde <HAL_GPIO_Init+0x176>
 8000d06:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000d0a:	42b8      	cmp	r0, r7
 8000d0c:	d069      	beq.n	8000de2 <HAL_GPIO_Init+0x17a>
 8000d0e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000d12:	42b8      	cmp	r0, r7
 8000d14:	d05f      	beq.n	8000dd6 <HAL_GPIO_Init+0x16e>
 8000d16:	2705      	movs	r7, #5
 8000d18:	fa07 f606 	lsl.w	r6, r7, r6
 8000d1c:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d1e:	3502      	adds	r5, #2
 8000d20:	4e33      	ldr	r6, [pc, #204]	; (8000df0 <HAL_GPIO_Init+0x188>)
 8000d22:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d26:	4c34      	ldr	r4, [pc, #208]	; (8000df8 <HAL_GPIO_Init+0x190>)
 8000d28:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d2a:	43d4      	mvns	r4, r2
 8000d2c:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d30:	684f      	ldr	r7, [r1, #4]
 8000d32:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000d36:	d001      	beq.n	8000d3c <HAL_GPIO_Init+0xd4>
        {
          temp |= iocurrent;
 8000d38:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8000d3c:	4d2e      	ldr	r5, [pc, #184]	; (8000df8 <HAL_GPIO_Init+0x190>)
 8000d3e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8000d40:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d42:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d46:	684f      	ldr	r7, [r1, #4]
 8000d48:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000d4c:	d001      	beq.n	8000d52 <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 8000d4e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8000d52:	4d29      	ldr	r5, [pc, #164]	; (8000df8 <HAL_GPIO_Init+0x190>)
 8000d54:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d56:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d58:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d5c:	684f      	ldr	r7, [r1, #4]
 8000d5e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000d62:	d001      	beq.n	8000d68 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 8000d64:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8000d68:	4d23      	ldr	r5, [pc, #140]	; (8000df8 <HAL_GPIO_Init+0x190>)
 8000d6a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8000d6c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d6e:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d70:	684e      	ldr	r6, [r1, #4]
 8000d72:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000d76:	d001      	beq.n	8000d7c <HAL_GPIO_Init+0x114>
        {
          temp |= iocurrent;
 8000d78:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <HAL_GPIO_Init+0x190>)
 8000d7e:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8000d80:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d82:	680a      	ldr	r2, [r1, #0]
 8000d84:	fa32 f403 	lsrs.w	r4, r2, r3
 8000d88:	d02d      	beq.n	8000de6 <HAL_GPIO_Init+0x17e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d8a:	2501      	movs	r5, #1
 8000d8c:	409d      	lsls	r5, r3
    if(iocurrent)
 8000d8e:	402a      	ands	r2, r5
 8000d90:	d0f6      	beq.n	8000d80 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d92:	684c      	ldr	r4, [r1, #4]
 8000d94:	2c02      	cmp	r4, #2
 8000d96:	f43f af6b 	beq.w	8000c70 <HAL_GPIO_Init+0x8>
 8000d9a:	2c12      	cmp	r4, #18
 8000d9c:	f43f af68 	beq.w	8000c70 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000da0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000da6:	2403      	movs	r4, #3
 8000da8:	fa04 f40e 	lsl.w	r4, r4, lr
 8000dac:	43e4      	mvns	r4, r4
 8000dae:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db0:	684f      	ldr	r7, [r1, #4]
 8000db2:	f007 0703 	and.w	r7, r7, #3
 8000db6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dba:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000dbc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dbe:	684e      	ldr	r6, [r1, #4]
 8000dc0:	1e77      	subs	r7, r6, #1
 8000dc2:	2f01      	cmp	r7, #1
 8000dc4:	f67f af68 	bls.w	8000c98 <HAL_GPIO_Init+0x30>
 8000dc8:	2e11      	cmp	r6, #17
 8000dca:	f43f af65 	beq.w	8000c98 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dce:	2e12      	cmp	r6, #18
 8000dd0:	f47f af72 	bne.w	8000cb8 <HAL_GPIO_Init+0x50>
 8000dd4:	e760      	b.n	8000c98 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dd6:	2703      	movs	r7, #3
 8000dd8:	e79e      	b.n	8000d18 <HAL_GPIO_Init+0xb0>
 8000dda:	2700      	movs	r7, #0
 8000ddc:	e79c      	b.n	8000d18 <HAL_GPIO_Init+0xb0>
 8000dde:	2701      	movs	r7, #1
 8000de0:	e79a      	b.n	8000d18 <HAL_GPIO_Init+0xb0>
 8000de2:	2702      	movs	r7, #2
 8000de4:	e798      	b.n	8000d18 <HAL_GPIO_Init+0xb0>
  }
}
 8000de6:	b003      	add	sp, #12
 8000de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40010000 	.word	0x40010000
 8000df4:	48000400 	.word	0x48000400
 8000df8:	40010400 	.word	0x40010400

08000dfc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dfc:	b90a      	cbnz	r2, 8000e02 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dfe:	6281      	str	r1, [r0, #40]	; 0x28
 8000e00:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e02:	6181      	str	r1, [r0, #24]
 8000e04:	4770      	bx	lr
	...

08000e08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e08:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	4203      	tst	r3, r0
 8000e10:	d100      	bne.n	8000e14 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8000e12:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e14:	4b02      	ldr	r3, [pc, #8]	; (8000e20 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000e16:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e18:	f002 fb9e 	bl	8003558 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e1c:	e7f9      	b.n	8000e12 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000e1e:	bf00      	nop
 8000e20:	40010400 	.word	0x40010400

08000e24 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000e24:	6803      	ldr	r3, [r0, #0]
 8000e26:	699a      	ldr	r2, [r3, #24]
 8000e28:	f012 0f02 	tst.w	r2, #2
 8000e2c:	d001      	beq.n	8000e32 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000e2e:	2200      	movs	r2, #0
 8000e30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e32:	6803      	ldr	r3, [r0, #0]
 8000e34:	699a      	ldr	r2, [r3, #24]
 8000e36:	f012 0f01 	tst.w	r2, #1
 8000e3a:	d103      	bne.n	8000e44 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000e3c:	699a      	ldr	r2, [r3, #24]
 8000e3e:	f042 0201 	orr.w	r2, r2, #1
 8000e42:	619a      	str	r2, [r3, #24]
 8000e44:	4770      	bx	lr

08000e46 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8000e46:	b410      	push	{r4}
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8000e48:	f011 0f01 	tst.w	r1, #1
 8000e4c:	d009      	beq.n	8000e62 <I2C_Disable_IRQ+0x1c>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8000e4e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000e52:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8000e56:	2b28      	cmp	r3, #40	; 0x28
 8000e58:	d001      	beq.n	8000e5e <I2C_Disable_IRQ+0x18>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000e5a:	23f2      	movs	r3, #242	; 0xf2
 8000e5c:	e002      	b.n	8000e64 <I2C_Disable_IRQ+0x1e>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8000e5e:	2342      	movs	r3, #66	; 0x42
 8000e60:	e000      	b.n	8000e64 <I2C_Disable_IRQ+0x1e>
  uint32_t tmpisr = 0U;
 8000e62:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8000e64:	f011 0f02 	tst.w	r1, #2
 8000e68:	d009      	beq.n	8000e7e <I2C_Disable_IRQ+0x38>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000e6a:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if ((hi2c->State & HAL_I2C_STATE_LISTEN) != HAL_I2C_STATE_LISTEN)
 8000e6e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000e72:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8000e76:	2a28      	cmp	r2, #40	; 0x28
 8000e78:	d019      	beq.n	8000eae <I2C_Disable_IRQ+0x68>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000e7a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8000e7e:	f011 0f04 	tst.w	r1, #4
 8000e82:	d001      	beq.n	8000e88 <I2C_Disable_IRQ+0x42>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8000e84:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8000e88:	f001 0211 	and.w	r2, r1, #17
 8000e8c:	2a11      	cmp	r2, #17
 8000e8e:	d010      	beq.n	8000eb2 <I2C_Disable_IRQ+0x6c>
 8000e90:	f001 0112 	and.w	r1, r1, #18
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8000e94:	2912      	cmp	r1, #18
 8000e96:	d00f      	beq.n	8000eb8 <I2C_Disable_IRQ+0x72>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8000e98:	2912      	cmp	r1, #18
 8000e9a:	d010      	beq.n	8000ebe <I2C_Disable_IRQ+0x78>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8000e9c:	6801      	ldr	r1, [r0, #0]
 8000e9e:	680a      	ldr	r2, [r1, #0]
 8000ea0:	ea22 0303 	bic.w	r3, r2, r3
 8000ea4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
}
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000eac:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8000eae:	4623      	mov	r3, r4
 8000eb0:	e7e5      	b.n	8000e7e <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8000eb2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000eb6:	e7eb      	b.n	8000e90 <I2C_Disable_IRQ+0x4a>
    tmpisr |= I2C_IT_STOPI;
 8000eb8:	f043 0320 	orr.w	r3, r3, #32
 8000ebc:	e7ec      	b.n	8000e98 <I2C_Disable_IRQ+0x52>
    tmpisr |= I2C_IT_TCI;
 8000ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec2:	e7eb      	b.n	8000e9c <I2C_Disable_IRQ+0x56>

08000ec4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d059      	beq.n	8000f7c <HAL_I2C_Init+0xb8>
{
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ecc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d043      	beq.n	8000f5c <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ed4:	2324      	movs	r3, #36	; 0x24
 8000ed6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000eda:	6822      	ldr	r2, [r4, #0]
 8000edc:	6813      	ldr	r3, [r2, #0]
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ee4:	6822      	ldr	r2, [r4, #0]
 8000ee6:	6863      	ldr	r3, [r4, #4]
 8000ee8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000eec:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000eee:	6822      	ldr	r2, [r4, #0]
 8000ef0:	6893      	ldr	r3, [r2, #8]
 8000ef2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ef6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ef8:	68e3      	ldr	r3, [r4, #12]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d033      	beq.n	8000f66 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000efe:	6822      	ldr	r2, [r4, #0]
 8000f00:	68a3      	ldr	r3, [r4, #8]
 8000f02:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8000f06:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f08:	68e3      	ldr	r3, [r4, #12]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d031      	beq.n	8000f72 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f0e:	6822      	ldr	r2, [r4, #0]
 8000f10:	6853      	ldr	r3, [r2, #4]
 8000f12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f1a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f1c:	6822      	ldr	r2, [r4, #0]
 8000f1e:	68d3      	ldr	r3, [r2, #12]
 8000f20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f24:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f26:	6822      	ldr	r2, [r4, #0]
 8000f28:	6923      	ldr	r3, [r4, #16]
 8000f2a:	6961      	ldr	r1, [r4, #20]
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	69a1      	ldr	r1, [r4, #24]
 8000f30:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000f34:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f36:	6822      	ldr	r2, [r4, #0]
 8000f38:	69e3      	ldr	r3, [r4, #28]
 8000f3a:	6a21      	ldr	r1, [r4, #32]
 8000f3c:	430b      	orrs	r3, r1
 8000f3e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000f40:	6822      	ldr	r2, [r4, #0]
 8000f42:	6813      	ldr	r3, [r2, #0]
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f4e:	2320      	movs	r3, #32
 8000f50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f54:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f56:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000f5a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000f5c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000f60:	f002 fdd0 	bl	8003b04 <HAL_I2C_MspInit>
 8000f64:	e7b6      	b.n	8000ed4 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f66:	6822      	ldr	r2, [r4, #0]
 8000f68:	68a3      	ldr	r3, [r4, #8]
 8000f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f6e:	6093      	str	r3, [r2, #8]
 8000f70:	e7ca      	b.n	8000f08 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	e7c8      	b.n	8000f0e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	4770      	bx	lr

08000f80 <HAL_I2C_EV_IRQHandler>:
{
 8000f80:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000f82:	6803      	ldr	r3, [r0, #0]
 8000f84:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000f86:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8000f88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000f8a:	b103      	cbz	r3, 8000f8e <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8000f8c:	4798      	blx	r3
 8000f8e:	bd08      	pop	{r3, pc}

08000f90 <HAL_I2C_SlaveTxCpltCallback>:
{
 8000f90:	4770      	bx	lr

08000f92 <HAL_I2C_SlaveRxCpltCallback>:
{
 8000f92:	4770      	bx	lr

08000f94 <I2C_ITSlaveSequentialCplt>:
{
 8000f94:	b510      	push	{r4, lr}
 8000f96:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8000f9e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b29      	cmp	r3, #41	; 0x29
 8000fa6:	d005      	beq.n	8000fb4 <I2C_ITSlaveSequentialCplt+0x20>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8000fa8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b2a      	cmp	r3, #42	; 0x2a
 8000fb0:	d00f      	beq.n	8000fd2 <I2C_ITSlaveSequentialCplt+0x3e>
 8000fb2:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000fb4:	2328      	movs	r3, #40	; 0x28
 8000fb6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000fba:	2321      	movs	r3, #33	; 0x21
 8000fbc:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	f7ff ff41 	bl	8000e46 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f7ff ffe0 	bl	8000f90 <HAL_I2C_SlaveTxCpltCallback>
 8000fd0:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8000fd2:	2328      	movs	r3, #40	; 0x28
 8000fd4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000fd8:	2322      	movs	r3, #34	; 0x22
 8000fda:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8000fdc:	2102      	movs	r1, #2
 8000fde:	f7ff ff32 	bl	8000e46 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f7ff ffd2 	bl	8000f92 <HAL_I2C_SlaveRxCpltCallback>
}
 8000fee:	e7e0      	b.n	8000fb2 <I2C_ITSlaveSequentialCplt+0x1e>

08000ff0 <HAL_I2C_AddrCallback>:
{
 8000ff0:	4770      	bx	lr

08000ff2 <I2C_ITAddrCplt>:
{
 8000ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hi2c->State & HAL_I2C_STATE_LISTEN) == HAL_I2C_STATE_LISTEN)
 8000ff4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000ff8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8000ffc:	2b28      	cmp	r3, #40	; 0x28
 8000ffe:	d006      	beq.n	800100e <I2C_ITAddrCplt+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001000:	6803      	ldr	r3, [r0, #0]
 8001002:	2208      	movs	r2, #8
 8001004:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001006:	2300      	movs	r3, #0
 8001008:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800100c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800100e:	4604      	mov	r4, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8001010:	6803      	ldr	r3, [r0, #0]
 8001012:	699e      	ldr	r6, [r3, #24]
 8001014:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001018:	699a      	ldr	r2, [r3, #24]
 800101a:	0c12      	lsrs	r2, r2, #16
 800101c:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001026:	68df      	ldr	r7, [r3, #12]
 8001028:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800102c:	68c1      	ldr	r1, [r0, #12]
 800102e:	2902      	cmp	r1, #2
 8001030:	d121      	bne.n	8001076 <I2C_ITAddrCplt+0x84>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001032:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8001036:	f015 0f06 	tst.w	r5, #6
 800103a:	d110      	bne.n	800105e <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 800103c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800103e:	3101      	adds	r1, #1
 8001040:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001042:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001044:	2902      	cmp	r1, #2
 8001046:	d1e1      	bne.n	800100c <I2C_ITAddrCplt+0x1a>
          hi2c->AddrEventCount = 0U;
 8001048:	2100      	movs	r1, #0
 800104a:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800104c:	2008      	movs	r0, #8
 800104e:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8001050:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001054:	4631      	mov	r1, r6
 8001056:	4620      	mov	r0, r4
 8001058:	f7ff ffca 	bl	8000ff0 <HAL_I2C_AddrCallback>
 800105c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800105e:	2104      	movs	r1, #4
 8001060:	f7ff fef1 	bl	8000e46 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001064:	2300      	movs	r3, #0
 8001066:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800106a:	463a      	mov	r2, r7
 800106c:	4631      	mov	r1, r6
 800106e:	4620      	mov	r0, r4
 8001070:	f7ff ffbe 	bl	8000ff0 <HAL_I2C_AddrCallback>
 8001074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001076:	2104      	movs	r1, #4
 8001078:	f7ff fee5 	bl	8000e46 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800107c:	2300      	movs	r3, #0
 800107e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001082:	462a      	mov	r2, r5
 8001084:	4631      	mov	r1, r6
 8001086:	4620      	mov	r0, r4
 8001088:	f7ff ffb2 	bl	8000ff0 <HAL_I2C_AddrCallback>
 800108c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800108e <HAL_I2C_ListenCpltCallback>:
{
 800108e:	4770      	bx	lr

08001090 <I2C_ITListenCplt>:
{
 8001090:	b510      	push	{r4, lr}
 8001092:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <I2C_ITListenCplt+0x60>)
 8001096:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001098:	2300      	movs	r3, #0
 800109a:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800109c:	2220      	movs	r2, #32
 800109e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010a2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 80010a6:	6343      	str	r3, [r0, #52]	; 0x34
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 80010a8:	f011 0f04 	tst.w	r1, #4
 80010ac:	d012      	beq.n	80010d4 <I2C_ITListenCplt+0x44>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80010ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80010b0:	1c5a      	adds	r2, r3, #1
 80010b2:	6242      	str	r2, [r0, #36]	; 0x24
 80010b4:	6802      	ldr	r2, [r0, #0]
 80010b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010b8:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 80010ba:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80010bc:	b153      	cbz	r3, 80010d4 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 80010be:	3b01      	subs	r3, #1
 80010c0:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 80010c2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	3b01      	subs	r3, #1
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80010cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80010d4:	2107      	movs	r1, #7
 80010d6:	4620      	mov	r0, r4
 80010d8:	f7ff feb5 	bl	8000e46 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	2210      	movs	r2, #16
 80010e0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80010e2:	2300      	movs	r3, #0
 80010e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80010e8:	4620      	mov	r0, r4
 80010ea:	f7ff ffd0 	bl	800108e <HAL_I2C_ListenCpltCallback>
 80010ee:	bd10      	pop	{r4, pc}
 80010f0:	ffff0000 	.word	0xffff0000

080010f4 <HAL_I2C_ErrorCallback>:
{
 80010f4:	4770      	bx	lr

080010f6 <HAL_I2C_AbortCpltCallback>:
{
 80010f6:	4770      	bx	lr

080010f8 <I2C_ITError>:
{
 80010f8:	b510      	push	{r4, lr}
 80010fa:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001102:	4a3a      	ldr	r2, [pc, #232]	; (80011ec <I2C_ITError+0xf4>)
 8001104:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001106:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8001108:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800110a:	4319      	orrs	r1, r3
 800110c:	6441      	str	r1, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 800110e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b28      	cmp	r3, #40	; 0x28
 8001116:	d018      	beq.n	800114a <I2C_ITError+0x52>
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001118:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800111c:	b2db      	uxtb	r3, r3
  if ((hi2c->State == HAL_I2C_STATE_LISTEN)         ||
 800111e:	2b29      	cmp	r3, #41	; 0x29
 8001120:	d013      	beq.n	800114a <I2C_ITError+0x52>
      (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001122:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001126:	b2db      	uxtb	r3, r3
      (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001128:	2b2a      	cmp	r3, #42	; 0x2a
 800112a:	d00e      	beq.n	800114a <I2C_ITError+0x52>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800112c:	2107      	movs	r1, #7
 800112e:	f7ff fe8a 	bl	8000e46 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001132:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b60      	cmp	r3, #96	; 0x60
 800113a:	d002      	beq.n	8001142 <I2C_ITError+0x4a>
      hi2c->State         = HAL_I2C_STATE_READY;
 800113c:	2320      	movs	r3, #32
 800113e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001142:	2300      	movs	r3, #0
 8001144:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001146:	6363      	str	r3, [r4, #52]	; 0x34
 8001148:	e00a      	b.n	8001160 <I2C_ITError+0x68>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800114a:	2103      	movs	r1, #3
 800114c:	4620      	mov	r0, r4
 800114e:	f7ff fe7a 	bl	8000e46 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001152:	2328      	movs	r3, #40	; 0x28
 8001154:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001158:	2300      	movs	r3, #0
 800115a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <I2C_ITError+0xf8>)
 800115e:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8001168:	d10f      	bne.n	800118a <I2C_ITError+0x92>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001170:	d11e      	bne.n	80011b0 <I2C_ITError+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001172:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b60      	cmp	r3, #96	; 0x60
 800117a:	d02c      	beq.n	80011d6 <I2C_ITError+0xde>
    __HAL_UNLOCK(hi2c);
 800117c:	2300      	movs	r3, #0
 800117e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001182:	4620      	mov	r0, r4
 8001184:	f7ff ffb6 	bl	80010f4 <HAL_I2C_ErrorCallback>
 8001188:	bd10      	pop	{r4, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001190:	601a      	str	r2, [r3, #0]
    hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001192:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001194:	4a17      	ldr	r2, [pc, #92]	; (80011f4 <I2C_ITError+0xfc>)
 8001196:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8001198:	2300      	movs	r3, #0
 800119a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800119e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80011a0:	f7ff fd3d 	bl	8000c1e <HAL_DMA_Abort_IT>
 80011a4:	2800      	cmp	r0, #0
 80011a6:	d0ef      	beq.n	8001188 <I2C_ITError+0x90>
      hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80011a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80011aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80011ac:	4798      	blx	r3
 80011ae:	bd10      	pop	{r4, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011b6:	601a      	str	r2, [r3, #0]
    hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80011b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <I2C_ITError+0xfc>)
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 80011be:	2300      	movs	r3, #0
 80011c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80011c4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80011c6:	f7ff fd2a 	bl	8000c1e <HAL_DMA_Abort_IT>
 80011ca:	2800      	cmp	r0, #0
 80011cc:	d0dc      	beq.n	8001188 <I2C_ITError+0x90>
      hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80011ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80011d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80011d2:	4798      	blx	r3
 80011d4:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80011d6:	2320      	movs	r3, #32
 80011d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80011dc:	2300      	movs	r3, #0
 80011de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80011e2:	4620      	mov	r0, r4
 80011e4:	f7ff ff87 	bl	80010f6 <HAL_I2C_AbortCpltCallback>
 80011e8:	bd10      	pop	{r4, pc}
 80011ea:	bf00      	nop
 80011ec:	ffff0000 	.word	0xffff0000
 80011f0:	08001321 	.word	0x08001321
 80011f4:	080014db 	.word	0x080014db

080011f8 <I2C_ITSlaveCplt>:
{
 80011f8:	b538      	push	{r3, r4, r5, lr}
 80011fa:	4604      	mov	r4, r0
 80011fc:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011fe:	6803      	ldr	r3, [r0, #0]
 8001200:	2220      	movs	r2, #32
 8001202:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001204:	6803      	ldr	r3, [r0, #0]
 8001206:	2208      	movs	r2, #8
 8001208:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800120a:	2107      	movs	r1, #7
 800120c:	f7ff fe1b 	bl	8000e46 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001210:	6822      	ldr	r2, [r4, #0]
 8001212:	6853      	ldr	r3, [r2, #4]
 8001214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001218:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800121a:	6822      	ldr	r2, [r4, #0]
 800121c:	6853      	ldr	r3, [r2, #4]
 800121e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001222:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001226:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800122a:	f023 0301 	bic.w	r3, r3, #1
 800122e:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8001230:	4620      	mov	r0, r4
 8001232:	f7ff fdf7 	bl	8000e24 <I2C_Flush_TXDR>
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8001236:	6822      	ldr	r2, [r4, #0]
 8001238:	6813      	ldr	r3, [r2, #0]
 800123a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800123e:	d103      	bne.n	8001248 <I2C_ITSlaveCplt+0x50>
      ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN))
 8001240:	6813      	ldr	r3, [r2, #0]
  if (((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN) ||
 8001242:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001246:	d009      	beq.n	800125c <I2C_ITSlaveCplt+0x64>
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 8001248:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b21      	cmp	r3, #33	; 0x21
 8001250:	d03a      	beq.n	80012c8 <I2C_ITSlaveCplt+0xd0>
 8001252:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	b29b      	uxth	r3, r3
 800125a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800125c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800125e:	b29b      	uxth	r3, r3
 8001260:	b11b      	cbz	r3, 800126a <I2C_ITSlaveCplt+0x72>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001262:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	6463      	str	r3, [r4, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_RXNE) != RESET))
 800126a:	f015 0f04 	tst.w	r5, #4
 800126e:	d011      	beq.n	8001294 <I2C_ITSlaveCplt+0x9c>
    (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001272:	1c59      	adds	r1, r3, #1
 8001274:	6261      	str	r1, [r4, #36]	; 0x24
 8001276:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001278:	701a      	strb	r2, [r3, #0]
    if ((hi2c->XferSize > 0U))
 800127a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800127c:	b153      	cbz	r3, 8001294 <I2C_ITSlaveCplt+0x9c>
      hi2c->XferSize--;
 800127e:	3b01      	subs	r3, #1
 8001280:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001282:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001284:	b29b      	uxth	r3, r3
 8001286:	3b01      	subs	r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800128c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8001294:	2300      	movs	r3, #0
 8001296:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 800129c:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800129e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012a0:	b9bb      	cbnz	r3, 80012d2 <I2C_ITSlaveCplt+0xda>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80012a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80012a8:	d121      	bne.n	80012ee <I2C_ITSlaveCplt+0xf6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80012aa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b22      	cmp	r3, #34	; 0x22
 80012b2:	d028      	beq.n	8001306 <I2C_ITSlaveCplt+0x10e>
    hi2c->State = HAL_I2C_STATE_READY;
 80012b4:	2320      	movs	r3, #32
 80012b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012ba:	2300      	movs	r3, #0
 80012bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80012c0:	4620      	mov	r0, r4
 80012c2:	f7ff fe65 	bl	8000f90 <HAL_I2C_SlaveTxCpltCallback>
 80012c6:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->XferCount = I2C_GET_DMA_REMAIN_DATA(hi2c);
 80012c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	e7c3      	b.n	800125a <I2C_ITSlaveCplt+0x62>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80012d2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80012d4:	4620      	mov	r0, r4
 80012d6:	f7ff ff0f 	bl	80010f8 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80012da:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b28      	cmp	r3, #40	; 0x28
 80012e2:	d1f0      	bne.n	80012c6 <I2C_ITSlaveCplt+0xce>
      I2C_ITListenCplt(hi2c, ITFlags);
 80012e4:	4629      	mov	r1, r5
 80012e6:	4620      	mov	r0, r4
 80012e8:	f7ff fed2 	bl	8001090 <I2C_ITListenCplt>
 80012ec:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <I2C_ITSlaveCplt+0x124>)
 80012f0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80012f2:	2320      	movs	r3, #32
 80012f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012f8:	2300      	movs	r3, #0
 80012fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80012fe:	4620      	mov	r0, r4
 8001300:	f7ff fec5 	bl	800108e <HAL_I2C_ListenCpltCallback>
 8001304:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001306:	2320      	movs	r3, #32
 8001308:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800130c:	2300      	movs	r3, #0
 800130e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001312:	4620      	mov	r0, r4
 8001314:	f7ff fe3d 	bl	8000f92 <HAL_I2C_SlaveRxCpltCallback>
 8001318:	bd38      	pop	{r3, r4, r5, pc}
 800131a:	bf00      	nop
 800131c:	ffff0000 	.word	0xffff0000

08001320 <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 8001320:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001324:	2b01      	cmp	r3, #1
 8001326:	f000 80a0 	beq.w	800146a <I2C_Slave_ISR_IT+0x14a>
{
 800132a:	b570      	push	{r4, r5, r6, lr}
 800132c:	4616      	mov	r6, r2
 800132e:	460d      	mov	r5, r1
 8001330:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8001332:	2301      	movs	r3, #1
 8001334:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (((ITFlags & I2C_FLAG_AF) != RESET) && ((ITSources & I2C_IT_NACKI) != RESET))
 8001338:	f011 0f10 	tst.w	r1, #16
 800133c:	d03f      	beq.n	80013be <I2C_Slave_ISR_IT+0x9e>
 800133e:	f012 0f10 	tst.w	r2, #16
 8001342:	d03c      	beq.n	80013be <I2C_Slave_ISR_IT+0x9e>
    if (hi2c->XferCount == 0U)
 8001344:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001346:	b29b      	uxth	r3, r3
 8001348:	bb43      	cbnz	r3, 800139c <I2C_Slave_ISR_IT+0x7c>
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 800134a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800134c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001350:	d010      	beq.n	8001374 <I2C_Slave_ISR_IT+0x54>
 8001352:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001354:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001358:	d00c      	beq.n	8001374 <I2C_Slave_ISR_IT+0x54>
      else if ((hi2c->XferOptions != I2C_NO_OPTION_FRAME) && (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800135a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800135c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001360:	d004      	beq.n	800136c <I2C_Slave_ISR_IT+0x4c>
 8001362:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b29      	cmp	r3, #41	; 0x29
 800136a:	d00d      	beq.n	8001388 <I2C_Slave_ISR_IT+0x68>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	2210      	movs	r2, #16
 8001370:	61da      	str	r2, [r3, #28]
 8001372:	e01a      	b.n	80013aa <I2C_Slave_ISR_IT+0x8a>
          (hi2c->State == HAL_I2C_STATE_LISTEN))
 8001374:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001378:	b2db      	uxtb	r3, r3
      if (((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_LAST_FRAME)) && \
 800137a:	2b28      	cmp	r3, #40	; 0x28
 800137c:	d1ed      	bne.n	800135a <I2C_Slave_ISR_IT+0x3a>
        I2C_ITListenCplt(hi2c, ITFlags);
 800137e:	4629      	mov	r1, r5
 8001380:	4620      	mov	r0, r4
 8001382:	f7ff fe85 	bl	8001090 <I2C_ITListenCplt>
 8001386:	e010      	b.n	80013aa <I2C_Slave_ISR_IT+0x8a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	2210      	movs	r2, #16
 800138c:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 800138e:	4620      	mov	r0, r4
 8001390:	f7ff fd48 	bl	8000e24 <I2C_Flush_TXDR>
        I2C_ITSlaveSequentialCplt(hi2c);
 8001394:	4620      	mov	r0, r4
 8001396:	f7ff fdfd 	bl	8000f94 <I2C_ITSlaveSequentialCplt>
 800139a:	e006      	b.n	80013aa <I2C_Slave_ISR_IT+0x8a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800139c:	6803      	ldr	r3, [r0, #0]
 800139e:	2210      	movs	r2, #16
 80013a0:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80013a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6443      	str	r3, [r0, #68]	; 0x44
  if (((ITFlags & I2C_FLAG_STOPF) != RESET) && ((ITSources & I2C_IT_STOPI) != RESET))
 80013aa:	f015 0f20 	tst.w	r5, #32
 80013ae:	d002      	beq.n	80013b6 <I2C_Slave_ISR_IT+0x96>
 80013b0:	f016 0f20 	tst.w	r6, #32
 80013b4:	d154      	bne.n	8001460 <I2C_Slave_ISR_IT+0x140>
  __HAL_UNLOCK(hi2c);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
  else if (((ITFlags & I2C_FLAG_RXNE) != RESET) && ((ITSources & I2C_IT_RXI) != RESET))
 80013be:	f015 0f04 	tst.w	r5, #4
 80013c2:	d01f      	beq.n	8001404 <I2C_Slave_ISR_IT+0xe4>
 80013c4:	f016 0f04 	tst.w	r6, #4
 80013c8:	d01c      	beq.n	8001404 <I2C_Slave_ISR_IT+0xe4>
    if (hi2c->XferCount > 0U)
 80013ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	b16b      	cbz	r3, 80013ec <I2C_Slave_ISR_IT+0xcc>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80013d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	6262      	str	r2, [r4, #36]	; 0x24
 80013d6:	6822      	ldr	r2, [r4, #0]
 80013d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013da:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80013dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80013de:	3b01      	subs	r3, #1
 80013e0:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80013e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	3b01      	subs	r3, #1
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80013ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1da      	bne.n	80013aa <I2C_Slave_ISR_IT+0x8a>
        (hi2c->XferOptions != I2C_NO_OPTION_FRAME))
 80013f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ((hi2c->XferCount == 0U) && \
 80013f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80013fa:	d0d6      	beq.n	80013aa <I2C_Slave_ISR_IT+0x8a>
      I2C_ITSlaveSequentialCplt(hi2c);
 80013fc:	4620      	mov	r0, r4
 80013fe:	f7ff fdc9 	bl	8000f94 <I2C_ITSlaveSequentialCplt>
 8001402:	e7d2      	b.n	80013aa <I2C_Slave_ISR_IT+0x8a>
  else if (((ITFlags & I2C_FLAG_ADDR) != RESET) && ((ITSources & I2C_IT_ADDRI) != RESET))
 8001404:	f015 0f08 	tst.w	r5, #8
 8001408:	d002      	beq.n	8001410 <I2C_Slave_ISR_IT+0xf0>
 800140a:	f016 0f08 	tst.w	r6, #8
 800140e:	d117      	bne.n	8001440 <I2C_Slave_ISR_IT+0x120>
  else if (((ITFlags & I2C_FLAG_TXIS) != RESET) && ((ITSources & I2C_IT_TXI) != RESET))
 8001410:	f015 0f02 	tst.w	r5, #2
 8001414:	d0c9      	beq.n	80013aa <I2C_Slave_ISR_IT+0x8a>
 8001416:	f016 0f02 	tst.w	r6, #2
 800141a:	d0c6      	beq.n	80013aa <I2C_Slave_ISR_IT+0x8a>
    if (hi2c->XferCount > 0U)
 800141c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800141e:	b29b      	uxth	r3, r3
 8001420:	b19b      	cbz	r3, 800144a <I2C_Slave_ISR_IT+0x12a>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001422:	6822      	ldr	r2, [r4, #0]
 8001424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001426:	1c59      	adds	r1, r3, #1
 8001428:	6261      	str	r1, [r4, #36]	; 0x24
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800142e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001430:	b29b      	uxth	r3, r3
 8001432:	3b01      	subs	r3, #1
 8001434:	b29b      	uxth	r3, r3
 8001436:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001438:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800143a:	3b01      	subs	r3, #1
 800143c:	8523      	strh	r3, [r4, #40]	; 0x28
 800143e:	e7b4      	b.n	80013aa <I2C_Slave_ISR_IT+0x8a>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001440:	4629      	mov	r1, r5
 8001442:	4620      	mov	r0, r4
 8001444:	f7ff fdd5 	bl	8000ff2 <I2C_ITAddrCplt>
 8001448:	e7af      	b.n	80013aa <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->XferOptions == I2C_NEXT_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME))
 800144a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800144c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001450:	d002      	beq.n	8001458 <I2C_Slave_ISR_IT+0x138>
 8001452:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1a8      	bne.n	80013aa <I2C_Slave_ISR_IT+0x8a>
        I2C_ITSlaveSequentialCplt(hi2c);
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff fd9b 	bl	8000f94 <I2C_ITSlaveSequentialCplt>
 800145e:	e7a4      	b.n	80013aa <I2C_Slave_ISR_IT+0x8a>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001460:	4629      	mov	r1, r5
 8001462:	4620      	mov	r0, r4
 8001464:	f7ff fec8 	bl	80011f8 <I2C_ITSlaveCplt>
 8001468:	e7a5      	b.n	80013b6 <I2C_Slave_ISR_IT+0x96>
  __HAL_LOCK(hi2c);
 800146a:	2002      	movs	r0, #2
 800146c:	4770      	bx	lr

0800146e <HAL_I2C_ER_IRQHandler>:
{
 800146e:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001470:	6802      	ldr	r2, [r0, #0]
 8001472:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001474:	6811      	ldr	r1, [r2, #0]
  if (((itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001476:	f413 7f80 	tst.w	r3, #256	; 0x100
 800147a:	d009      	beq.n	8001490 <HAL_I2C_ER_IRQHandler+0x22>
 800147c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001480:	d006      	beq.n	8001490 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001482:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001484:	f044 0401 	orr.w	r4, r4, #1
 8001488:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800148a:	f44f 7480 	mov.w	r4, #256	; 0x100
 800148e:	61d4      	str	r4, [r2, #28]
  if (((itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 8001490:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001494:	d00a      	beq.n	80014ac <HAL_I2C_ER_IRQHandler+0x3e>
 8001496:	f011 0f80 	tst.w	r1, #128	; 0x80
 800149a:	d007      	beq.n	80014ac <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800149c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800149e:	f042 0208 	orr.w	r2, r2, #8
 80014a2:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80014a4:	6802      	ldr	r2, [r0, #0]
 80014a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80014aa:	61d4      	str	r4, [r2, #28]
  if (((itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERRI) != RESET))
 80014ac:	f413 7f00 	tst.w	r3, #512	; 0x200
 80014b0:	d00a      	beq.n	80014c8 <HAL_I2C_ER_IRQHandler+0x5a>
 80014b2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80014b6:	d007      	beq.n	80014c8 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80014b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80014c0:	6803      	ldr	r3, [r0, #0]
 80014c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c6:	61da      	str	r2, [r3, #28]
  if ((hi2c->ErrorCode & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80014c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80014ca:	f013 0f0b 	tst.w	r3, #11
 80014ce:	d100      	bne.n	80014d2 <HAL_I2C_ER_IRQHandler+0x64>
 80014d0:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80014d2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80014d4:	f7ff fe10 	bl	80010f8 <I2C_ITError>
}
 80014d8:	e7fa      	b.n	80014d0 <HAL_I2C_ER_IRQHandler+0x62>

080014da <I2C_DMAAbort>:
{
 80014da:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80014de:	6802      	ldr	r2, [r0, #0]
 80014e0:	6853      	ldr	r3, [r2, #4]
 80014e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014e6:	6053      	str	r3, [r2, #4]
  hi2c->hdmatx->XferAbortCallback = NULL;
 80014e8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80014ea:	2300      	movs	r3, #0
 80014ec:	6353      	str	r3, [r2, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 80014ee:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80014f0:	6353      	str	r3, [r2, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80014f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b60      	cmp	r3, #96	; 0x60
 80014fa:	d002      	beq.n	8001502 <I2C_DMAAbort+0x28>
    HAL_I2C_ErrorCallback(hi2c);
 80014fc:	f7ff fdfa 	bl	80010f4 <HAL_I2C_ErrorCallback>
 8001500:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001502:	2320      	movs	r3, #32
 8001504:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8001508:	f7ff fdf5 	bl	80010f6 <HAL_I2C_AbortCpltCallback>
 800150c:	bd08      	pop	{r3, pc}

0800150e <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800150e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b20      	cmp	r3, #32
 8001516:	d001      	beq.n	800151c <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001518:	2002      	movs	r0, #2
 800151a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800151c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001520:	2b01      	cmp	r3, #1
 8001522:	d020      	beq.n	8001566 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001524:	2301      	movs	r3, #1
 8001526:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800152a:	2324      	movs	r3, #36	; 0x24
 800152c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001530:	6802      	ldr	r2, [r0, #0]
 8001532:	6813      	ldr	r3, [r2, #0]
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800153a:	6802      	ldr	r2, [r0, #0]
 800153c:	6813      	ldr	r3, [r2, #0]
 800153e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001542:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001544:	6802      	ldr	r2, [r0, #0]
 8001546:	6813      	ldr	r3, [r2, #0]
 8001548:	4319      	orrs	r1, r3
 800154a:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800154c:	6802      	ldr	r2, [r0, #0]
 800154e:	6813      	ldr	r3, [r2, #0]
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001556:	2320      	movs	r3, #32
 8001558:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800155c:	2300      	movs	r3, #0
 800155e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 8001562:	4618      	mov	r0, r3
 8001564:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001566:	2002      	movs	r0, #2
  }
}
 8001568:	4770      	bx	lr

0800156a <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800156a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b20      	cmp	r3, #32
 8001572:	d001      	beq.n	8001578 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001574:	2002      	movs	r0, #2
 8001576:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001578:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800157c:	2b01      	cmp	r3, #1
 800157e:	d01e      	beq.n	80015be <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001580:	2301      	movs	r3, #1
 8001582:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001586:	2324      	movs	r3, #36	; 0x24
 8001588:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800158c:	6802      	ldr	r2, [r0, #0]
 800158e:	6813      	ldr	r3, [r2, #0]
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8001596:	6802      	ldr	r2, [r0, #0]
 8001598:	6813      	ldr	r3, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800159a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800159e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80015a2:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80015a4:	6802      	ldr	r2, [r0, #0]
 80015a6:	6813      	ldr	r3, [r2, #0]
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80015ae:	2320      	movs	r3, #32
 80015b0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80015b4:	2300      	movs	r3, #0
 80015b6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
 80015ba:	4618      	mov	r0, r3
 80015bc:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80015be:	2002      	movs	r0, #2
  }
}
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c4:	b570      	push	{r4, r5, r6, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ca:	6803      	ldr	r3, [r0, #0]
 80015cc:	f013 0f01 	tst.w	r3, #1
 80015d0:	d063      	beq.n	800169a <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015d2:	4bb5      	ldr	r3, [pc, #724]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d046      	beq.n	800166c <HAL_RCC_OscConfig+0xa8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015de:	4bb2      	ldr	r3, [pc, #712]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d03b      	beq.n	8001662 <HAL_RCC_OscConfig+0x9e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ea:	6863      	ldr	r3, [r4, #4]
 80015ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f0:	f000 808e 	beq.w	8001710 <HAL_RCC_OscConfig+0x14c>
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f040 8091 	bne.w	800171c <HAL_RCC_OscConfig+0x158>
 80015fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015fe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001610:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001612:	4aa5      	ldr	r2, [pc, #660]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 8001614:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001616:	f023 030f 	bic.w	r3, r3, #15
 800161a:	68a1      	ldr	r1, [r4, #8]
 800161c:	430b      	orrs	r3, r1
 800161e:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001620:	6863      	ldr	r3, [r4, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8094 	beq.w	8001750 <HAL_RCC_OscConfig+0x18c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7fe fdfe 	bl	8000228 <HAL_GetTick>
 800162c:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001632:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b9c      	ldr	r3, [pc, #624]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 8001638:	6819      	ldr	r1, [r3, #0]
 800163a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	fab3 f383 	clz	r3, r3
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	2201      	movs	r2, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	4219      	tst	r1, r3
 8001652:	d122      	bne.n	800169a <HAL_RCC_OscConfig+0xd6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001654:	f7fe fde8 	bl	8000228 <HAL_GetTick>
 8001658:	1b40      	subs	r0, r0, r5
 800165a:	2864      	cmp	r0, #100	; 0x64
 800165c:	d9e7      	bls.n	800162e <HAL_RCC_OscConfig+0x6a>
          {
            return HAL_TIMEOUT;
 800165e:	2003      	movs	r0, #3
 8001660:	e2ab      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001662:	4b91      	ldr	r3, [pc, #580]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800166a:	d0be      	beq.n	80015ea <HAL_RCC_OscConfig+0x26>
 800166c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001670:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001674:	4b8c      	ldr	r3, [pc, #560]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 8001676:	6819      	ldr	r1, [r3, #0]
 8001678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800167c:	fa93 f3a3 	rbit	r3, r3
 8001680:	fab3 f383 	clz	r3, r3
 8001684:	f003 031f 	and.w	r3, r3, #31
 8001688:	2201      	movs	r2, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	4219      	tst	r1, r3
 8001690:	d003      	beq.n	800169a <HAL_RCC_OscConfig+0xd6>
 8001692:	6863      	ldr	r3, [r4, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8289 	beq.w	8001bac <HAL_RCC_OscConfig+0x5e8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169a:	6823      	ldr	r3, [r4, #0]
 800169c:	f013 0f02 	tst.w	r3, #2
 80016a0:	f000 809c 	beq.w	80017dc <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016a4:	4b80      	ldr	r3, [pc, #512]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f013 0f0c 	tst.w	r3, #12
 80016ac:	d072      	beq.n	8001794 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016ae:	4b7e      	ldr	r3, [pc, #504]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d067      	beq.n	800178a <HAL_RCC_OscConfig+0x1c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ba:	6923      	ldr	r3, [r4, #16]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80cb 	beq.w	8001858 <HAL_RCC_OscConfig+0x294>
 80016c2:	2201      	movs	r2, #1
 80016c4:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c8:	fab3 f383 	clz	r3, r3
 80016cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7fe fda6 	bl	8000228 <HAL_GetTick>
 80016dc:	4605      	mov	r5, r0
 80016de:	2302      	movs	r3, #2
 80016e0:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e4:	4b70      	ldr	r3, [pc, #448]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 80016e6:	6819      	ldr	r1, [r3, #0]
 80016e8:	2302      	movs	r3, #2
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	2201      	movs	r2, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	4219      	tst	r1, r3
 80016fe:	f040 809c 	bne.w	800183a <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001702:	f7fe fd91 	bl	8000228 <HAL_GetTick>
 8001706:	1b40      	subs	r0, r0, r5
 8001708:	2802      	cmp	r0, #2
 800170a:	d9e8      	bls.n	80016de <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800170c:	2003      	movs	r0, #3
 800170e:	e254      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001710:	4a65      	ldr	r2, [pc, #404]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 8001712:	6813      	ldr	r3, [r2, #0]
 8001714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e77a      	b.n	8001612 <HAL_RCC_OscConfig+0x4e>
 800171c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001720:	d009      	beq.n	8001736 <HAL_RCC_OscConfig+0x172>
 8001722:	4b61      	ldr	r3, [pc, #388]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e76d      	b.n	8001612 <HAL_RCC_OscConfig+0x4e>
 8001736:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800173a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e760      	b.n	8001612 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8001750:	f7fe fd6a 	bl	8000228 <HAL_GetTick>
 8001754:	4605      	mov	r5, r0
 8001756:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800175a:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175e:	4b52      	ldr	r3, [pc, #328]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 8001760:	6819      	ldr	r1, [r3, #0]
 8001762:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001766:	fa93 f3a3 	rbit	r3, r3
 800176a:	fab3 f383 	clz	r3, r3
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	2201      	movs	r2, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	4219      	tst	r1, r3
 800177a:	d08e      	beq.n	800169a <HAL_RCC_OscConfig+0xd6>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800177c:	f7fe fd54 	bl	8000228 <HAL_GetTick>
 8001780:	1b40      	subs	r0, r0, r5
 8001782:	2864      	cmp	r0, #100	; 0x64
 8001784:	d9e7      	bls.n	8001756 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8001786:	2003      	movs	r0, #3
 8001788:	e217      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800178a:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001792:	d192      	bne.n	80016ba <HAL_RCC_OscConfig+0xf6>
 8001794:	2302      	movs	r3, #2
 8001796:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179a:	4b43      	ldr	r3, [pc, #268]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 800179c:	6819      	ldr	r1, [r3, #0]
 800179e:	2302      	movs	r3, #2
 80017a0:	fa93 f3a3 	rbit	r3, r3
 80017a4:	fab3 f383 	clz	r3, r3
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	2201      	movs	r2, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	4219      	tst	r1, r3
 80017b4:	d004      	beq.n	80017c0 <HAL_RCC_OscConfig+0x1fc>
 80017b6:	6923      	ldr	r3, [r4, #16]
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 80017bc:	2001      	movs	r0, #1
 80017be:	e1fc      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c0:	4839      	ldr	r0, [pc, #228]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 80017c2:	6803      	ldr	r3, [r0, #0]
 80017c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017c8:	6961      	ldr	r1, [r4, #20]
 80017ca:	22f8      	movs	r2, #248	; 0xf8
 80017cc:	fa92 f2a2 	rbit	r2, r2
 80017d0:	fab2 f282 	clz	r2, r2
 80017d4:	fa01 f202 	lsl.w	r2, r1, r2
 80017d8:	4313      	orrs	r3, r2
 80017da:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017dc:	6823      	ldr	r3, [r4, #0]
 80017de:	f013 0f08 	tst.w	r3, #8
 80017e2:	f000 808d 	beq.w	8001900 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017e6:	69a3      	ldr	r3, [r4, #24]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d061      	beq.n	80018b0 <HAL_RCC_OscConfig+0x2ec>
 80017ec:	2101      	movs	r1, #1
 80017ee:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f2:	fab2 f282 	clz	r2, r2
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_RCC_OscConfig+0x2e8>)
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fe:	f7fe fd13 	bl	8000228 <HAL_GetTick>
 8001802:	4605      	mov	r5, r0
 8001804:	2302      	movs	r3, #2
 8001806:	fa93 f2a3 	rbit	r2, r3
 800180a:	fa93 f2a3 	rbit	r2, r3
 800180e:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	4a25      	ldr	r2, [pc, #148]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 8001814:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	2201      	movs	r2, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	4219      	tst	r1, r3
 800182a:	d169      	bne.n	8001900 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800182c:	f7fe fcfc 	bl	8000228 <HAL_GetTick>
 8001830:	1b40      	subs	r0, r0, r5
 8001832:	2802      	cmp	r0, #2
 8001834:	d9e6      	bls.n	8001804 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001836:	2003      	movs	r0, #3
 8001838:	e1bf      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183a:	481b      	ldr	r0, [pc, #108]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 800183c:	6803      	ldr	r3, [r0, #0]
 800183e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001842:	6961      	ldr	r1, [r4, #20]
 8001844:	22f8      	movs	r2, #248	; 0xf8
 8001846:	fa92 f2a2 	rbit	r2, r2
 800184a:	fab2 f282 	clz	r2, r2
 800184e:	fa01 f202 	lsl.w	r2, r1, r2
 8001852:	4313      	orrs	r3, r2
 8001854:	6003      	str	r3, [r0, #0]
 8001856:	e7c1      	b.n	80017dc <HAL_RCC_OscConfig+0x218>
 8001858:	2301      	movs	r3, #1
 800185a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 800185e:	fab3 f383 	clz	r3, r3
 8001862:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001866:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001870:	f7fe fcda 	bl	8000228 <HAL_GetTick>
 8001874:	4605      	mov	r5, r0
 8001876:	2302      	movs	r3, #2
 8001878:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_RCC_OscConfig+0x2e4>)
 800187e:	6819      	ldr	r1, [r3, #0]
 8001880:	2302      	movs	r3, #2
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	fab3 f383 	clz	r3, r3
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	2201      	movs	r2, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	4219      	tst	r1, r3
 8001896:	d0a1      	beq.n	80017dc <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001898:	f7fe fcc6 	bl	8000228 <HAL_GetTick>
 800189c:	1b40      	subs	r0, r0, r5
 800189e:	2802      	cmp	r0, #2
 80018a0:	d9e9      	bls.n	8001876 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 80018a2:	2003      	movs	r0, #3
 80018a4:	e189      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	10908120 	.word	0x10908120
 80018b0:	2201      	movs	r2, #1
 80018b2:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b6:	fab2 f282 	clz	r2, r2
 80018ba:	4bc1      	ldr	r3, [pc, #772]	; (8001bc0 <HAL_RCC_OscConfig+0x5fc>)
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c4:	f7fe fcb0 	bl	8000228 <HAL_GetTick>
 80018c8:	4605      	mov	r5, r0
 80018ca:	2302      	movs	r3, #2
 80018cc:	fa93 f2a3 	rbit	r2, r3
 80018d0:	fa93 f2a3 	rbit	r2, r3
 80018d4:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d8:	4aba      	ldr	r2, [pc, #744]	; (8001bc4 <HAL_RCC_OscConfig+0x600>)
 80018da:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80018dc:	fa93 f3a3 	rbit	r3, r3
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	2201      	movs	r2, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	4219      	tst	r1, r3
 80018f0:	d006      	beq.n	8001900 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f2:	f7fe fc99 	bl	8000228 <HAL_GetTick>
 80018f6:	1b40      	subs	r0, r0, r5
 80018f8:	2802      	cmp	r0, #2
 80018fa:	d9e6      	bls.n	80018ca <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 80018fc:	2003      	movs	r0, #3
 80018fe:	e15c      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	f013 0f04 	tst.w	r3, #4
 8001906:	f000 80b3 	beq.w	8001a70 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190a:	4bae      	ldr	r3, [pc, #696]	; (8001bc4 <HAL_RCC_OscConfig+0x600>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001912:	d126      	bne.n	8001962 <HAL_RCC_OscConfig+0x39e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001914:	4bab      	ldr	r3, [pc, #684]	; (8001bc4 <HAL_RCC_OscConfig+0x600>)
 8001916:	69da      	ldr	r2, [r3, #28]
 8001918:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800191c:	61da      	str	r2, [r3, #28]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001928:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192a:	4ba7      	ldr	r3, [pc, #668]	; (8001bc8 <HAL_RCC_OscConfig+0x604>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001932:	d018      	beq.n	8001966 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001934:	68e3      	ldr	r3, [r4, #12]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d029      	beq.n	800198e <HAL_RCC_OscConfig+0x3ca>
 800193a:	bb73      	cbnz	r3, 800199a <HAL_RCC_OscConfig+0x3d6>
 800193c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001940:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001944:	6a1a      	ldr	r2, [r3, #32]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	621a      	str	r2, [r3, #32]
 800194c:	6a1a      	ldr	r2, [r3, #32]
 800194e:	f022 0204 	bic.w	r2, r2, #4
 8001952:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001954:	68e3      	ldr	r3, [r4, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d05d      	beq.n	8001a16 <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7fe fc65 	bl	8000228 <HAL_GetTick>
 800195e:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001960:	e047      	b.n	80019f2 <HAL_RCC_OscConfig+0x42e>
    FlagStatus       pwrclkchanged = RESET;
 8001962:	2500      	movs	r5, #0
 8001964:	e7e1      	b.n	800192a <HAL_RCC_OscConfig+0x366>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001966:	4a98      	ldr	r2, [pc, #608]	; (8001bc8 <HAL_RCC_OscConfig+0x604>)
 8001968:	6813      	ldr	r3, [r2, #0]
 800196a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001970:	f7fe fc5a 	bl	8000228 <HAL_GetTick>
 8001974:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	4b94      	ldr	r3, [pc, #592]	; (8001bc8 <HAL_RCC_OscConfig+0x604>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800197e:	d1d9      	bne.n	8001934 <HAL_RCC_OscConfig+0x370>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001980:	f7fe fc52 	bl	8000228 <HAL_GetTick>
 8001984:	1b80      	subs	r0, r0, r6
 8001986:	2864      	cmp	r0, #100	; 0x64
 8001988:	d9f5      	bls.n	8001976 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 800198a:	2003      	movs	r0, #3
 800198c:	e115      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198e:	4a8d      	ldr	r2, [pc, #564]	; (8001bc4 <HAL_RCC_OscConfig+0x600>)
 8001990:	6a13      	ldr	r3, [r2, #32]
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6213      	str	r3, [r2, #32]
 8001998:	e7dc      	b.n	8001954 <HAL_RCC_OscConfig+0x390>
 800199a:	2b05      	cmp	r3, #5
 800199c:	d009      	beq.n	80019b2 <HAL_RCC_OscConfig+0x3ee>
 800199e:	4b89      	ldr	r3, [pc, #548]	; (8001bc4 <HAL_RCC_OscConfig+0x600>)
 80019a0:	6a1a      	ldr	r2, [r3, #32]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	621a      	str	r2, [r3, #32]
 80019a8:	6a1a      	ldr	r2, [r3, #32]
 80019aa:	f022 0204 	bic.w	r2, r2, #4
 80019ae:	621a      	str	r2, [r3, #32]
 80019b0:	e7d0      	b.n	8001954 <HAL_RCC_OscConfig+0x390>
 80019b2:	4b84      	ldr	r3, [pc, #528]	; (8001bc4 <HAL_RCC_OscConfig+0x600>)
 80019b4:	6a1a      	ldr	r2, [r3, #32]
 80019b6:	f042 0204 	orr.w	r2, r2, #4
 80019ba:	621a      	str	r2, [r3, #32]
 80019bc:	6a1a      	ldr	r2, [r3, #32]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	621a      	str	r2, [r3, #32]
 80019c4:	e7c6      	b.n	8001954 <HAL_RCC_OscConfig+0x390>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c6:	4b7f      	ldr	r3, [pc, #508]	; (8001bc4 <HAL_RCC_OscConfig+0x600>)
 80019c8:	6a19      	ldr	r1, [r3, #32]
 80019ca:	2302      	movs	r3, #2
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	f003 031f 	and.w	r3, r3, #31
 80019d8:	2201      	movs	r2, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	4219      	tst	r1, r3
 80019e0:	d145      	bne.n	8001a6e <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e2:	f7fe fc21 	bl	8000228 <HAL_GetTick>
 80019e6:	1b80      	subs	r0, r0, r6
 80019e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80019ec:	4298      	cmp	r0, r3
 80019ee:	f200 80df 	bhi.w	8001bb0 <HAL_RCC_OscConfig+0x5ec>
 80019f2:	2302      	movs	r3, #2
 80019f4:	fa93 f2a3 	rbit	r2, r3
 80019f8:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	095b      	lsrs	r3, r3, #5
 8001a02:	f043 0302 	orr.w	r3, r3, #2
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d0dd      	beq.n	80019c6 <HAL_RCC_OscConfig+0x402>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	fa93 f3a3 	rbit	r3, r3
 8001a10:	4b6c      	ldr	r3, [pc, #432]	; (8001bc4 <HAL_RCC_OscConfig+0x600>)
 8001a12:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a14:	e7d9      	b.n	80019ca <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a16:	f7fe fc07 	bl	8000228 <HAL_GetTick>
 8001a1a:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	e015      	b.n	8001a4a <HAL_RCC_OscConfig+0x486>
 8001a1e:	4b69      	ldr	r3, [pc, #420]	; (8001bc4 <HAL_RCC_OscConfig+0x600>)
 8001a20:	6a19      	ldr	r1, [r3, #32]
 8001a22:	2302      	movs	r3, #2
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	f003 031f 	and.w	r3, r3, #31
 8001a30:	2201      	movs	r2, #1
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	4219      	tst	r1, r3
 8001a38:	d019      	beq.n	8001a6e <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7fe fbf5 	bl	8000228 <HAL_GetTick>
 8001a3e:	1b80      	subs	r0, r0, r6
 8001a40:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a44:	4298      	cmp	r0, r3
 8001a46:	f200 80b5 	bhi.w	8001bb4 <HAL_RCC_OscConfig+0x5f0>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	fa93 f2a3 	rbit	r2, r3
 8001a50:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	095b      	lsrs	r3, r3, #5
 8001a5a:	f043 0302 	orr.w	r3, r3, #2
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d0dd      	beq.n	8001a1e <HAL_RCC_OscConfig+0x45a>
 8001a62:	2302      	movs	r3, #2
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	4b56      	ldr	r3, [pc, #344]	; (8001bc4 <HAL_RCC_OscConfig+0x600>)
 8001a6a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a6c:	e7d9      	b.n	8001a22 <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a6e:	bbb5      	cbnz	r5, 8001ade <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a70:	69e3      	ldr	r3, [r4, #28]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 80a0 	beq.w	8001bb8 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_RCC_OscConfig+0x600>)
 8001a7a:	6852      	ldr	r2, [r2, #4]
 8001a7c:	f002 020c 	and.w	r2, r2, #12
 8001a80:	2a08      	cmp	r2, #8
 8001a82:	f000 80a3 	beq.w	8001bcc <HAL_RCC_OscConfig+0x608>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d02f      	beq.n	8001aea <HAL_RCC_OscConfig+0x526>
 8001a8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a8e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7fe fbc0 	bl	8000228 <HAL_GetTick>
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aae:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab2:	4b44      	ldr	r3, [pc, #272]	; (8001bc4 <HAL_RCC_OscConfig+0x600>)
 8001ab4:	6819      	ldr	r1, [r3, #0]
 8001ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	4219      	tst	r1, r3
 8001ace:	d06b      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7fe fbaa 	bl	8000228 <HAL_GetTick>
 8001ad4:	1b00      	subs	r0, r0, r4
 8001ad6:	2802      	cmp	r0, #2
 8001ad8:	d9e7      	bls.n	8001aaa <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 8001ada:	2003      	movs	r0, #3
 8001adc:	e06d      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ade:	4a39      	ldr	r2, [pc, #228]	; (8001bc4 <HAL_RCC_OscConfig+0x600>)
 8001ae0:	69d3      	ldr	r3, [r2, #28]
 8001ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	61d3      	str	r3, [r2, #28]
 8001ae8:	e7c2      	b.n	8001a70 <HAL_RCC_OscConfig+0x4ac>
 8001aea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001aee:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001afa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b04:	f7fe fb90 	bl	8000228 <HAL_GetTick>
 8001b08:	4605      	mov	r5, r0
 8001b0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b0e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b12:	4b2c      	ldr	r3, [pc, #176]	; (8001bc4 <HAL_RCC_OscConfig+0x600>)
 8001b14:	6819      	ldr	r1, [r3, #0]
 8001b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	2201      	movs	r2, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	4219      	tst	r1, r3
 8001b2e:	d006      	beq.n	8001b3e <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b30:	f7fe fb7a 	bl	8000228 <HAL_GetTick>
 8001b34:	1b40      	subs	r0, r0, r5
 8001b36:	2802      	cmp	r0, #2
 8001b38:	d9e7      	bls.n	8001b0a <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 8001b3a:	2003      	movs	r0, #3
 8001b3c:	e03d      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3e:	4921      	ldr	r1, [pc, #132]	; (8001bc4 <HAL_RCC_OscConfig+0x600>)
 8001b40:	684b      	ldr	r3, [r1, #4]
 8001b42:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001b46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b48:	6a20      	ldr	r0, [r4, #32]
 8001b4a:	4302      	orrs	r2, r0
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
 8001b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b54:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	2201      	movs	r2, #1
 8001b68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b6a:	f7fe fb5d 	bl	8000228 <HAL_GetTick>
 8001b6e:	4604      	mov	r4, r0
 8001b70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b74:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_OscConfig+0x600>)
 8001b7a:	6819      	ldr	r1, [r3, #0]
 8001b7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	f003 031f 	and.w	r3, r3, #31
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	4219      	tst	r1, r3
 8001b94:	d106      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x5e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b96:	f7fe fb47 	bl	8000228 <HAL_GetTick>
 8001b9a:	1b00      	subs	r0, r0, r4
 8001b9c:	2802      	cmp	r0, #2
 8001b9e:	d9e7      	bls.n	8001b70 <HAL_RCC_OscConfig+0x5ac>
            return HAL_TIMEOUT;
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>
 8001ba8:	2000      	movs	r0, #0
 8001baa:	e006      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>
        return HAL_ERROR;
 8001bac:	2001      	movs	r0, #1
 8001bae:	e004      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	e002      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>
          return HAL_TIMEOUT;
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	e000      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>
  return HAL_OK;
 8001bb8:	2000      	movs	r0, #0
}
 8001bba:	b002      	add	sp, #8
 8001bbc:	bd70      	pop	{r4, r5, r6, pc}
 8001bbe:	bf00      	nop
 8001bc0:	10908120 	.word	0x10908120
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40007000 	.word	0x40007000
      return HAL_ERROR;
 8001bcc:	2001      	movs	r0, #1
 8001bce:	e7f4      	b.n	8001bba <HAL_RCC_OscConfig+0x5f6>

08001bd0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bd4:	f003 020c 	and.w	r2, r3, #12
 8001bd8:	2a08      	cmp	r2, #8
 8001bda:	d124      	bne.n	8001c26 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001bdc:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8001be0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001be4:	fa92 f2a2 	rbit	r2, r2
 8001be8:	fab2 f282 	clz	r2, r2
 8001bec:	fa21 f202 	lsr.w	r2, r1, r2
 8001bf0:	490f      	ldr	r1, [pc, #60]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x60>)
 8001bf2:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x5c>)
 8001bf6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bf8:	f002 020f 	and.w	r2, r2, #15
 8001bfc:	210f      	movs	r1, #15
 8001bfe:	fa91 f1a1 	rbit	r1, r1
 8001c02:	fab1 f181 	clz	r1, r1
 8001c06:	40ca      	lsrs	r2, r1
 8001c08:	490a      	ldr	r1, [pc, #40]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x64>)
 8001c0a:	5c8a      	ldrb	r2, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001c0c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001c10:	d103      	bne.n	8001c1a <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x68>)
 8001c14:	fb03 f000 	mul.w	r0, r3, r0
 8001c18:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x6c>)
 8001c1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c20:	fb03 f000 	mul.w	r0, r3, r0
 8001c24:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	0800480c 	.word	0x0800480c
 8001c34:	0800481c 	.word	0x0800481c
 8001c38:	003d0900 	.word	0x003d0900
 8001c3c:	007a1200 	.word	0x007a1200

08001c40 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c40:	4b70      	ldr	r3, [pc, #448]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	428b      	cmp	r3, r1
 8001c4a:	d20c      	bcs.n	8001c66 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4c:	4a6d      	ldr	r2, [pc, #436]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	f023 0307 	bic.w	r3, r3, #7
 8001c54:	430b      	orrs	r3, r1
 8001c56:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c58:	6813      	ldr	r3, [r2, #0]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	4299      	cmp	r1, r3
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8001c62:	2001      	movs	r0, #1
 8001c64:	4770      	bx	lr
{
 8001c66:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c68:	6803      	ldr	r3, [r0, #0]
 8001c6a:	f013 0f02 	tst.w	r3, #2
 8001c6e:	d006      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c70:	4a65      	ldr	r2, [pc, #404]	; (8001e08 <HAL_RCC_ClockConfig+0x1c8>)
 8001c72:	6853      	ldr	r3, [r2, #4]
 8001c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c78:	6884      	ldr	r4, [r0, #8]
 8001c7a:	4323      	orrs	r3, r4
 8001c7c:	6053      	str	r3, [r2, #4]
 8001c7e:	460d      	mov	r5, r1
 8001c80:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c82:	6803      	ldr	r3, [r0, #0]
 8001c84:	f013 0f01 	tst.w	r3, #1
 8001c88:	d07a      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x140>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	6843      	ldr	r3, [r0, #4]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d02f      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d042      	beq.n	8001d1a <HAL_RCC_ClockConfig+0xda>
 8001c94:	2202      	movs	r2, #2
 8001c96:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9a:	4a5b      	ldr	r2, [pc, #364]	; (8001e08 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9c:	6810      	ldr	r0, [r2, #0]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	fa92 f2a2 	rbit	r2, r2
 8001ca4:	fab2 f282 	clz	r2, r2
 8001ca8:	f002 021f 	and.w	r2, r2, #31
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb2:	4210      	tst	r0, r2
 8001cb4:	f000 80a4 	beq.w	8001e00 <HAL_RCC_ClockConfig+0x1c0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb8:	4953      	ldr	r1, [pc, #332]	; (8001e08 <HAL_RCC_ClockConfig+0x1c8>)
 8001cba:	684a      	ldr	r2, [r1, #4]
 8001cbc:	f022 0203 	bic.w	r2, r2, #3
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001cc4:	f7fe fab0 	bl	8000228 <HAL_GetTick>
 8001cc8:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cca:	6863      	ldr	r3, [r4, #4]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d039      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x104>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d046      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x122>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd4:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f013 0f0c 	tst.w	r3, #12
 8001cdc:	d050      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cde:	f7fe faa3 	bl	8000228 <HAL_GetTick>
 8001ce2:	1b80      	subs	r0, r0, r6
 8001ce4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ce8:	4298      	cmp	r0, r3
 8001cea:	d9f3      	bls.n	8001cd4 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8001cec:	2003      	movs	r0, #3
 8001cee:	bd70      	pop	{r4, r5, r6, pc}
 8001cf0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cf4:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf8:	4a43      	ldr	r2, [pc, #268]	; (8001e08 <HAL_RCC_ClockConfig+0x1c8>)
 8001cfa:	6810      	ldr	r0, [r2, #0]
 8001cfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d00:	fa92 f2a2 	rbit	r2, r2
 8001d04:	fab2 f282 	clz	r2, r2
 8001d08:	f002 021f 	and.w	r2, r2, #31
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	4210      	tst	r0, r2
 8001d14:	d1d0      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8001d16:	2001      	movs	r0, #1
 8001d18:	bd70      	pop	{r4, r5, r6, pc}
 8001d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d1e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d22:	4a39      	ldr	r2, [pc, #228]	; (8001e08 <HAL_RCC_ClockConfig+0x1c8>)
 8001d24:	6810      	ldr	r0, [r2, #0]
 8001d26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d2a:	fa92 f2a2 	rbit	r2, r2
 8001d2e:	fab2 f282 	clz	r2, r2
 8001d32:	f002 021f 	and.w	r2, r2, #31
 8001d36:	2101      	movs	r1, #1
 8001d38:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3c:	4210      	tst	r0, r2
 8001d3e:	d1bb      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x78>
        return HAL_ERROR;
 8001d40:	2001      	movs	r0, #1
 8001d42:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d44:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <HAL_RCC_ClockConfig+0x1c8>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d017      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7fe fa6a 	bl	8000228 <HAL_GetTick>
 8001d54:	1b80      	subs	r0, r0, r6
 8001d56:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d5a:	4298      	cmp	r0, r3
 8001d5c:	d9f2      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x104>
          return HAL_TIMEOUT;
 8001d5e:	2003      	movs	r0, #3
 8001d60:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d62:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <HAL_RCC_ClockConfig+0x1c8>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d008      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x140>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6e:	f7fe fa5b 	bl	8000228 <HAL_GetTick>
 8001d72:	1b80      	subs	r0, r0, r6
 8001d74:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d78:	4298      	cmp	r0, r3
 8001d7a:	d9f2      	bls.n	8001d62 <HAL_RCC_ClockConfig+0x122>
          return HAL_TIMEOUT;
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d80:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	429d      	cmp	r5, r3
 8001d8a:	d20c      	bcs.n	8001da6 <HAL_RCC_ClockConfig+0x166>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8c:	4a1d      	ldr	r2, [pc, #116]	; (8001e04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	6813      	ldr	r3, [r2, #0]
 8001d90:	f023 0307 	bic.w	r3, r3, #7
 8001d94:	432b      	orrs	r3, r5
 8001d96:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d98:	6813      	ldr	r3, [r2, #0]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	429d      	cmp	r5, r3
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x166>
      return HAL_ERROR;
 8001da2:	2001      	movs	r0, #1
}
 8001da4:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	f013 0f04 	tst.w	r3, #4
 8001dac:	d006      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dae:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <HAL_RCC_ClockConfig+0x1c8>)
 8001db0:	6853      	ldr	r3, [r2, #4]
 8001db2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001db6:	68e1      	ldr	r1, [r4, #12]
 8001db8:	430b      	orrs	r3, r1
 8001dba:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	f013 0f08 	tst.w	r3, #8
 8001dc2:	d007      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x194>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dc4:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc6:	6853      	ldr	r3, [r2, #4]
 8001dc8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001dcc:	6921      	ldr	r1, [r4, #16]
 8001dce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001dd2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dd4:	f7ff fefc 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_ClockConfig+0x1c8>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de0:	22f0      	movs	r2, #240	; 0xf0
 8001de2:	fa92 f2a2 	rbit	r2, r2
 8001de6:	fab2 f282 	clz	r2, r2
 8001dea:	40d3      	lsrs	r3, r2
 8001dec:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <HAL_RCC_ClockConfig+0x1cc>)
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
 8001df0:	40d8      	lsrs	r0, r3
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <HAL_RCC_ClockConfig+0x1d0>)
 8001df4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f7fe f9e6 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001e00:	2001      	movs	r0, #1
 8001e02:	bd70      	pop	{r4, r5, r6, pc}
 8001e04:	40022000 	.word	0x40022000
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	0800483c 	.word	0x0800483c
 8001e10:	20000000 	.word	0x20000000

08001e14 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001e14:	4b01      	ldr	r3, [pc, #4]	; (8001e1c <HAL_RCC_GetHCLKFreq+0x8>)
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000000 	.word	0x20000000

08001e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e20:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001e22:	f7ff fff7 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e2e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e32:	fa92 f2a2 	rbit	r2, r2
 8001e36:	fab2 f282 	clz	r2, r2
 8001e3a:	40d3      	lsrs	r3, r2
 8001e3c:	4a02      	ldr	r2, [pc, #8]	; (8001e48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e3e:	5cd3      	ldrb	r3, [r2, r3]
}    
 8001e40:	40d8      	lsrs	r0, r3
 8001e42:	bd08      	pop	{r3, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	0800484c 	.word	0x0800484c

08001e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e4c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001e4e:	f7ff ffe1 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001e5a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001e5e:	fa92 f2a2 	rbit	r2, r2
 8001e62:	fab2 f282 	clz	r2, r2
 8001e66:	40d3      	lsrs	r3, r2
 8001e68:	4a02      	ldr	r2, [pc, #8]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001e6c:	40d8      	lsrs	r0, r3
 8001e6e:	bd08      	pop	{r3, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	0800484c 	.word	0x0800484c

08001e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e7e:	6803      	ldr	r3, [r0, #0]
 8001e80:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001e84:	d044      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e86:	4b64      	ldr	r3, [pc, #400]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001e8e:	d179      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e90:	4b61      	ldr	r3, [pc, #388]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001e92:	69da      	ldr	r2, [r3, #28]
 8001e94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e98:	61da      	str	r2, [r3, #28]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ea4:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	4b5d      	ldr	r3, [pc, #372]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001eae:	d06b      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eb0:	4b59      	ldr	r3, [pc, #356]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eb4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001eb8:	d021      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x86>
 8001eba:	6862      	ldr	r2, [r4, #4]
 8001ebc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d01c      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ec4:	4854      	ldr	r0, [pc, #336]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001ec6:	6a01      	ldr	r1, [r0, #32]
 8001ec8:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8001ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed0:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ed4:	fab2 f282 	clz	r2, r2
 8001ed8:	4f51      	ldr	r7, [pc, #324]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001eda:	443a      	add	r2, r7
 8001edc:	0092      	lsls	r2, r2, #2
 8001ede:	f04f 0e01 	mov.w	lr, #1
 8001ee2:	f8c2 e000 	str.w	lr, [r2]
 8001ee6:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	443b      	add	r3, r7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ef6:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ef8:	f011 0f01 	tst.w	r1, #1
 8001efc:	d158      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001efe:	4a46      	ldr	r2, [pc, #280]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001f00:	6a13      	ldr	r3, [r2, #32]
 8001f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f06:	6861      	ldr	r1, [r4, #4]
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f0c:	2d00      	cmp	r5, #0
 8001f0e:	d17a      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	f013 0f01 	tst.w	r3, #1
 8001f16:	d006      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f18:	4a3f      	ldr	r2, [pc, #252]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001f1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f1c:	f023 0303 	bic.w	r3, r3, #3
 8001f20:	68a1      	ldr	r1, [r4, #8]
 8001f22:	430b      	orrs	r3, r1
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	f013 0f20 	tst.w	r3, #32
 8001f2c:	d006      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f2e:	4a3a      	ldr	r2, [pc, #232]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001f30:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f32:	f023 0310 	bic.w	r3, r3, #16
 8001f36:	68e1      	ldr	r1, [r4, #12]
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f42:	d006      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001f44:	4a34      	ldr	r2, [pc, #208]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001f46:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f48:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001f4c:	6921      	ldr	r1, [r4, #16]
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001f58:	d006      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f5a:	4a2f      	ldr	r2, [pc, #188]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001f5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f62:	6961      	ldr	r1, [r4, #20]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001f6e:	d051      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8001f70:	4a29      	ldr	r2, [pc, #164]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001f72:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001f74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f78:	69a1      	ldr	r1, [r4, #24]
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001f7e:	2000      	movs	r0, #0
}
 8001f80:	b003      	add	sp, #12
 8001f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001f84:	2500      	movs	r5, #0
 8001f86:	e78e      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f88:	4a24      	ldr	r2, [pc, #144]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f8a:	6813      	ldr	r3, [r2, #0]
 8001f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f90:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f92:	f7fe f949 	bl	8000228 <HAL_GetTick>
 8001f96:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f98:	4b20      	ldr	r3, [pc, #128]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001fa0:	d186      	bne.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa2:	f7fe f941 	bl	8000228 <HAL_GetTick>
 8001fa6:	1b80      	subs	r0, r0, r6
 8001fa8:	2864      	cmp	r0, #100	; 0x64
 8001faa:	d9f5      	bls.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8001fac:	2003      	movs	r0, #3
 8001fae:	e7e7      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8001fb0:	f7fe f93a 	bl	8000228 <HAL_GetTick>
 8001fb4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb6:	e014      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001fba:	6a19      	ldr	r1, [r3, #32]
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	2201      	movs	r2, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	4219      	tst	r1, r3
 8001fd2:	d194      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd4:	f7fe f928 	bl	8000228 <HAL_GetTick>
 8001fd8:	1b80      	subs	r0, r0, r6
 8001fda:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fde:	4298      	cmp	r0, r3
 8001fe0:	d816      	bhi.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	fa93 f2a3 	rbit	r2, r3
 8001fe8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	f043 0302 	orr.w	r3, r3, #2
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d0de      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002002:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002004:	e7da      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002006:	69d3      	ldr	r3, [r2, #28]
 8002008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200c:	61d3      	str	r3, [r2, #28]
 800200e:	e77f      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8002010:	2003      	movs	r0, #3
 8002012:	e7b5      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 8002014:	2000      	movs	r0, #0
 8002016:	e7b3      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8002018:	40021000 	.word	0x40021000
 800201c:	40007000 	.word	0x40007000
 8002020:	10908100 	.word	0x10908100

08002024 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002024:	b538      	push	{r3, r4, r5, lr}
 8002026:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002028:	6802      	ldr	r2, [r0, #0]
 800202a:	68d3      	ldr	r3, [r2, #12]
 800202c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002030:	60d3      	str	r3, [r2, #12]
  
  tickstart = HAL_GetTick();
 8002032:	f7fe f8f9 	bl	8000228 <HAL_GetTick>
 8002036:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f013 0f20 	tst.w	r3, #32
 8002040:	d107      	bne.n	8002052 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002042:	f7fe f8f1 	bl	8000228 <HAL_GetTick>
 8002046:	1b40      	subs	r0, r0, r5
 8002048:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800204c:	d9f4      	bls.n	8002038 <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 800204e:	2003      	movs	r0, #3
    } 
  }

  return HAL_OK;
}
 8002050:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002052:	2000      	movs	r0, #0
 8002054:	bd38      	pop	{r3, r4, r5, pc}

08002056 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002056:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002058:	6803      	ldr	r3, [r0, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002060:	d001      	beq.n	8002066 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8002062:	2000      	movs	r0, #0
 8002064:	bd38      	pop	{r3, r4, r5, pc}
 8002066:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800206e:	f7fe f8db 	bl	8000228 <HAL_GetTick>
 8002072:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002074:	6823      	ldr	r3, [r4, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f013 0f40 	tst.w	r3, #64	; 0x40
 800207c:	d107      	bne.n	800208e <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 800207e:	f7fe f8d3 	bl	8000228 <HAL_GetTick>
 8002082:	1b40      	subs	r0, r0, r5
 8002084:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002088:	d9f4      	bls.n	8002074 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 800208a:	2003      	movs	r0, #3
}
 800208c:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;  
 800208e:	2000      	movs	r0, #0
 8002090:	bd38      	pop	{r3, r4, r5, pc}

08002092 <HAL_RTC_Init>:
{
 8002092:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002094:	2800      	cmp	r0, #0
 8002096:	d05c      	beq.n	8002152 <HAL_RTC_Init+0xc0>
 8002098:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800209a:	7f43      	ldrb	r3, [r0, #29]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d041      	beq.n	8002124 <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80020a0:	2302      	movs	r3, #2
 80020a2:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	22ca      	movs	r2, #202	; 0xca
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24
 80020aa:	6823      	ldr	r3, [r4, #0]
 80020ac:	2253      	movs	r2, #83	; 0x53
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80020b0:	4620      	mov	r0, r4
 80020b2:	f7ff ffd0 	bl	8002056 <RTC_EnterInitMode>
 80020b6:	4605      	mov	r5, r0
 80020b8:	2800      	cmp	r0, #0
 80020ba:	d137      	bne.n	800212c <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80020bc:	6822      	ldr	r2, [r4, #0]
 80020be:	6893      	ldr	r3, [r2, #8]
 80020c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80020c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020c8:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80020ca:	6821      	ldr	r1, [r4, #0]
 80020cc:	688a      	ldr	r2, [r1, #8]
 80020ce:	6863      	ldr	r3, [r4, #4]
 80020d0:	6920      	ldr	r0, [r4, #16]
 80020d2:	4303      	orrs	r3, r0
 80020d4:	6960      	ldr	r0, [r4, #20]
 80020d6:	4303      	orrs	r3, r0
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	68e2      	ldr	r2, [r4, #12]
 80020e0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80020e2:	6822      	ldr	r2, [r4, #0]
 80020e4:	6913      	ldr	r3, [r2, #16]
 80020e6:	68a1      	ldr	r1, [r4, #8]
 80020e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80020ec:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80020ee:	6822      	ldr	r2, [r4, #0]
 80020f0:	68d3      	ldr	r3, [r2, #12]
 80020f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020f6:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f013 0f20 	tst.w	r3, #32
 8002100:	d01b      	beq.n	800213a <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002102:	6822      	ldr	r2, [r4, #0]
 8002104:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210a:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800210c:	6822      	ldr	r2, [r4, #0]
 800210e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002110:	69a1      	ldr	r1, [r4, #24]
 8002112:	430b      	orrs	r3, r1
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	22ff      	movs	r2, #255	; 0xff
 800211a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800211c:	2301      	movs	r3, #1
 800211e:	7763      	strb	r3, [r4, #29]
}
 8002120:	4628      	mov	r0, r5
 8002122:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002124:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002126:	f001 fd33 	bl	8003b90 <HAL_RTC_MspInit>
 800212a:	e7b9      	b.n	80020a0 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	22ff      	movs	r2, #255	; 0xff
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002132:	2304      	movs	r3, #4
 8002134:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8002136:	2501      	movs	r5, #1
 8002138:	e7f2      	b.n	8002120 <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800213a:	4620      	mov	r0, r4
 800213c:	f7ff ff72 	bl	8002024 <HAL_RTC_WaitForSynchro>
 8002140:	2800      	cmp	r0, #0
 8002142:	d0de      	beq.n	8002102 <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	22ff      	movs	r2, #255	; 0xff
 8002148:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800214a:	2304      	movs	r3, #4
 800214c:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 800214e:	2501      	movs	r5, #1
 8002150:	e7e6      	b.n	8002120 <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 8002152:	2501      	movs	r5, #1
 8002154:	e7e4      	b.n	8002120 <HAL_RTC_Init+0x8e>

08002156 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002156:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8002158:	e002      	b.n	8002160 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 800215a:	3301      	adds	r3, #1
    Value -= 10U;
 800215c:	380a      	subs	r0, #10
 800215e:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002160:	2809      	cmp	r0, #9
 8002162:	d8fa      	bhi.n	800215a <RTC_ByteToBcd2+0x4>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	b2db      	uxtb	r3, r3
}
 8002168:	4318      	orrs	r0, r3
 800216a:	4770      	bx	lr

0800216c <HAL_RTC_SetTime>:
{
 800216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800216e:	7f03      	ldrb	r3, [r0, #28]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d077      	beq.n	8002264 <HAL_RTC_SetTime+0xf8>
 8002174:	460e      	mov	r6, r1
 8002176:	4604      	mov	r4, r0
 8002178:	2301      	movs	r3, #1
 800217a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800217c:	2302      	movs	r3, #2
 800217e:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8002180:	2a00      	cmp	r2, #0
 8002182:	d146      	bne.n	8002212 <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002184:	6803      	ldr	r3, [r0, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f013 0f40 	tst.w	r3, #64	; 0x40
 800218c:	d101      	bne.n	8002192 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002192:	7830      	ldrb	r0, [r6, #0]
 8002194:	f7ff ffdf 	bl	8002156 <RTC_ByteToBcd2>
 8002198:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800219a:	7870      	ldrb	r0, [r6, #1]
 800219c:	f7ff ffdb 	bl	8002156 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80021a0:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80021a4:	78b0      	ldrb	r0, [r6, #2]
 80021a6:	f7ff ffd6 	bl	8002156 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80021aa:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 80021ac:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80021ae:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	22ca      	movs	r2, #202	; 0xca
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	2253      	movs	r2, #83	; 0x53
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80021be:	4620      	mov	r0, r4
 80021c0:	f7ff ff49 	bl	8002056 <RTC_EnterInitMode>
 80021c4:	4607      	mov	r7, r0
 80021c6:	2800      	cmp	r0, #0
 80021c8:	d135      	bne.n	8002236 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 80021d0:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 80021d4:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80021d6:	6822      	ldr	r2, [r4, #0]
 80021d8:	6893      	ldr	r3, [r2, #8]
 80021da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021de:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80021e0:	6821      	ldr	r1, [r4, #0]
 80021e2:	688b      	ldr	r3, [r1, #8]
 80021e4:	68f2      	ldr	r2, [r6, #12]
 80021e6:	6930      	ldr	r0, [r6, #16]
 80021e8:	4302      	orrs	r2, r0
 80021ea:	4313      	orrs	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80021ee:	6822      	ldr	r2, [r4, #0]
 80021f0:	68d3      	ldr	r3, [r2, #12]
 80021f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021f6:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f013 0f20 	tst.w	r3, #32
 8002200:	d022      	beq.n	8002248 <HAL_RTC_SetTime+0xdc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	22ff      	movs	r2, #255	; 0xff
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002208:	2301      	movs	r3, #1
 800220a:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 800220c:	2300      	movs	r3, #0
 800220e:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8002210:	e029      	b.n	8002266 <HAL_RTC_SetTime+0xfa>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002212:	6803      	ldr	r3, [r0, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f013 0f40 	tst.w	r3, #64	; 0x40
 800221a:	d101      	bne.n	8002220 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 800221c:	2300      	movs	r3, #0
 800221e:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002220:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002222:	7870      	ldrb	r0, [r6, #1]
 8002224:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002226:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 800222a:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800222c:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 800222e:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002230:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8002234:	e7bd      	b.n	80021b2 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	22ff      	movs	r2, #255	; 0xff
 800223a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800223c:	2304      	movs	r3, #4
 800223e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002240:	2300      	movs	r3, #0
 8002242:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8002244:	2701      	movs	r7, #1
 8002246:	e00e      	b.n	8002266 <HAL_RTC_SetTime+0xfa>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002248:	4620      	mov	r0, r4
 800224a:	f7ff feeb 	bl	8002024 <HAL_RTC_WaitForSynchro>
 800224e:	2800      	cmp	r0, #0
 8002250:	d0d7      	beq.n	8002202 <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	22ff      	movs	r2, #255	; 0xff
 8002256:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002258:	2304      	movs	r3, #4
 800225a:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800225c:	2300      	movs	r3, #0
 800225e:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8002260:	2701      	movs	r7, #1
 8002262:	e000      	b.n	8002266 <HAL_RTC_SetTime+0xfa>
  __HAL_LOCK(hrtc);
 8002264:	2702      	movs	r7, #2
}
 8002266:	4638      	mov	r0, r7
 8002268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800226a <HAL_RTC_SetDate>:
{
 800226a:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 800226c:	7f03      	ldrb	r3, [r0, #28]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d065      	beq.n	800233e <HAL_RTC_SetDate+0xd4>
 8002272:	2301      	movs	r3, #1
 8002274:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002276:	2302      	movs	r3, #2
 8002278:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800227a:	b93a      	cbnz	r2, 800228c <HAL_RTC_SetDate+0x22>
 800227c:	784b      	ldrb	r3, [r1, #1]
 800227e:	f013 0f10 	tst.w	r3, #16
 8002282:	d003      	beq.n	800228c <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002284:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002288:	330a      	adds	r3, #10
 800228a:	704b      	strb	r3, [r1, #1]
 800228c:	460e      	mov	r6, r1
 800228e:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8002290:	2a00      	cmp	r2, #0
 8002292:	d132      	bne.n	80022fa <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002294:	78c8      	ldrb	r0, [r1, #3]
 8002296:	f7ff ff5e 	bl	8002156 <RTC_ByteToBcd2>
 800229a:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800229c:	7870      	ldrb	r0, [r6, #1]
 800229e:	f7ff ff5a 	bl	8002156 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80022a2:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80022a6:	78b0      	ldrb	r0, [r6, #2]
 80022a8:	f7ff ff55 	bl	8002156 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80022ac:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));   
 80022ae:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80022b0:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	22ca      	movs	r2, #202	; 0xca
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	2253      	movs	r2, #83	; 0x53
 80022be:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7ff fec8 	bl	8002056 <RTC_EnterInitMode>
 80022c6:	4606      	mov	r6, r0
 80022c8:	bb10      	cbnz	r0, 8002310 <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80022d0:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80022d4:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80022d6:	6822      	ldr	r2, [r4, #0]
 80022d8:	68d3      	ldr	r3, [r2, #12]
 80022da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022de:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f013 0f20 	tst.w	r3, #32
 80022e8:	d01b      	beq.n	8002322 <HAL_RTC_SetDate+0xb8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	22ff      	movs	r2, #255	; 0xff
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80022f0:	2301      	movs	r3, #1
 80022f2:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80022f4:	2300      	movs	r3, #0
 80022f6:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 80022f8:	e022      	b.n	8002340 <HAL_RTC_SetDate+0xd6>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 80022fa:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 80022fc:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80022fe:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002300:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002306:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8002308:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800230a:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 800230e:	e7d1      	b.n	80022b4 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	22ff      	movs	r2, #255	; 0xff
 8002314:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002316:	2304      	movs	r3, #4
 8002318:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800231a:	2300      	movs	r3, #0
 800231c:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 800231e:	2601      	movs	r6, #1
 8002320:	e00e      	b.n	8002340 <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002322:	4620      	mov	r0, r4
 8002324:	f7ff fe7e 	bl	8002024 <HAL_RTC_WaitForSynchro>
 8002328:	2800      	cmp	r0, #0
 800232a:	d0de      	beq.n	80022ea <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	22ff      	movs	r2, #255	; 0xff
 8002330:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002332:	2304      	movs	r3, #4
 8002334:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002336:	2300      	movs	r3, #0
 8002338:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800233a:	2601      	movs	r6, #1
 800233c:	e000      	b.n	8002340 <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 800233e:	2602      	movs	r6, #2
}
 8002340:	4630      	mov	r0, r6
 8002342:	bd70      	pop	{r4, r5, r6, pc}

08002344 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002344:	0903      	lsrs	r3, r0, #4
 8002346:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800234a:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0FU));
 800234c:	f000 000f 	and.w	r0, r0, #15
 8002350:	4410      	add	r0, r2
}
 8002352:	b2c0      	uxtb	r0, r0
 8002354:	4770      	bx	lr

08002356 <HAL_RTC_GetTime>:
{
 8002356:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002358:	6803      	ldr	r3, [r0, #0]
 800235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235c:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800235e:	6803      	ldr	r3, [r0, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002366:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002368:	6803      	ldr	r3, [r0, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002370:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002374:	0c1d      	lsrs	r5, r3, #16
 8002376:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 800237a:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800237c:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8002380:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002382:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8002386:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002388:	f005 0540 	and.w	r5, r5, #64	; 0x40
 800238c:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 800238e:	b95a      	cbnz	r2, 80023a8 <HAL_RTC_GetTime+0x52>
 8002390:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002392:	f7ff ffd7 	bl	8002344 <RTC_Bcd2ToByte>
 8002396:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002398:	4630      	mov	r0, r6
 800239a:	f7ff ffd3 	bl	8002344 <RTC_Bcd2ToByte>
 800239e:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80023a0:	4620      	mov	r0, r4
 80023a2:	f7ff ffcf 	bl	8002344 <RTC_Bcd2ToByte>
 80023a6:	70a8      	strb	r0, [r5, #2]
}
 80023a8:	2000      	movs	r0, #0
 80023aa:	bd70      	pop	{r4, r5, r6, pc}

080023ac <HAL_RTC_GetDate>:
{
 80023ac:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80023ae:	6803      	ldr	r3, [r0, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80023ba:	0c18      	lsrs	r0, r3, #16
 80023bc:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80023be:	f3c3 2604 	ubfx	r6, r3, #8, #5
 80023c2:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80023c4:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 80023c8:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80023ca:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80023ce:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80023d0:	b95a      	cbnz	r2, 80023ea <HAL_RTC_GetDate+0x3e>
 80023d2:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80023d4:	f7ff ffb6 	bl	8002344 <RTC_Bcd2ToByte>
 80023d8:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80023da:	4630      	mov	r0, r6
 80023dc:	f7ff ffb2 	bl	8002344 <RTC_Bcd2ToByte>
 80023e0:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80023e2:	4628      	mov	r0, r5
 80023e4:	f7ff ffae 	bl	8002344 <RTC_Bcd2ToByte>
 80023e8:	70a0      	strb	r0, [r4, #2]
}
 80023ea:	2000      	movs	r0, #0
 80023ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080023f0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80023f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023f2:	7f03      	ldrb	r3, [r0, #28]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d06d      	beq.n	80024d4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 80023f8:	4615      	mov	r5, r2
 80023fa:	460e      	mov	r6, r1
 80023fc:	4604      	mov	r4, r0
 80023fe:	2301      	movs	r3, #1
 8002400:	7703      	strb	r3, [r0, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002402:	2302      	movs	r3, #2
 8002404:	7743      	strb	r3, [r0, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002406:	6803      	ldr	r3, [r0, #0]
 8002408:	22ca      	movs	r2, #202	; 0xca
 800240a:	625a      	str	r2, [r3, #36]	; 0x24
 800240c:	6803      	ldr	r3, [r0, #0]
 800240e:	2253      	movs	r2, #83	; 0x53
 8002410:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET){
 8002412:	6803      	ldr	r3, [r0, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800241a:	d015      	beq.n	8002448 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
    tickstart = HAL_GetTick();
 800241c:	f7fd ff04 	bl	8000228 <HAL_GetTick>
 8002420:	4607      	mov	r7, r0
 
   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f013 0f04 	tst.w	r3, #4
 800242a:	d00d      	beq.n	8002448 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800242c:	f7fd fefc 	bl	8000228 <HAL_GetTick>
 8002430:	1bc0      	subs	r0, r0, r7
 8002432:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002436:	d9f4      	bls.n	8002422 <HAL_RTCEx_SetWakeUpTimer_IT+0x32>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	22ff      	movs	r2, #255	; 0xff
 800243c:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800243e:	2003      	movs	r0, #3
 8002440:	7760      	strb	r0, [r4, #29]

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8002442:	2300      	movs	r3, #0
 8002444:	7723      	strb	r3, [r4, #28]

       return HAL_TIMEOUT;
 8002446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
  }

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002448:	6822      	ldr	r2, [r4, #0]
 800244a:	6893      	ldr	r3, [r2, #8]
 800244c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002450:	6093      	str	r3, [r2, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002452:	6822      	ldr	r2, [r4, #0]
 8002454:	68d3      	ldr	r3, [r2, #12]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	f463 6390 	orn	r3, r3, #1152	; 0x480
 800245c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800245e:	f7fd fee3 	bl	8000228 <HAL_GetTick>
 8002462:	4607      	mov	r7, r0

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	68d8      	ldr	r0, [r3, #12]
 8002468:	f010 0f04 	tst.w	r0, #4
 800246c:	d10d      	bne.n	800248a <HAL_RTCEx_SetWakeUpTimer_IT+0x9a>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 800246e:	f7fd fedb 	bl	8000228 <HAL_GetTick>
 8002472:	1bc0      	subs	r0, r0, r7
 8002474:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002478:	d9f4      	bls.n	8002464 <HAL_RTCEx_SetWakeUpTimer_IT+0x74>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	22ff      	movs	r2, #255	; 0xff
 800247e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002480:	2003      	movs	r0, #3
 8002482:	7760      	strb	r0, [r4, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002484:	2300      	movs	r3, #0
 8002486:	7723      	strb	r3, [r4, #28]

      return HAL_TIMEOUT;
 8002488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800248a:	615e      	str	r6, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800248c:	6822      	ldr	r2, [r4, #0]
 800248e:	6893      	ldr	r3, [r2, #8]
 8002490:	f023 0307 	bic.w	r3, r3, #7
 8002494:	6093      	str	r3, [r2, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002496:	6822      	ldr	r2, [r4, #0]
 8002498:	6893      	ldr	r3, [r2, #8]
 800249a:	431d      	orrs	r5, r3
 800249c:	6095      	str	r5, [r2, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024a6:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024ae:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80024b0:	6822      	ldr	r2, [r4, #0]
 80024b2:	6893      	ldr	r3, [r2, #8]
 80024b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b8:	6093      	str	r3, [r2, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80024ba:	6822      	ldr	r2, [r4, #0]
 80024bc:	6893      	ldr	r3, [r2, #8]
 80024be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024c2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024c4:	6823      	ldr	r3, [r4, #0]
 80024c6:	22ff      	movs	r2, #255	; 0xff
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80024ca:	2301      	movs	r3, #1
 80024cc:	7763      	strb	r3, [r4, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024ce:	2000      	movs	r0, #0
 80024d0:	7720      	strb	r0, [r4, #28]

  return HAL_OK;
 80024d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 80024d4:	2002      	movs	r0, #2
}
 80024d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024d8:	40010400 	.word	0x40010400

080024dc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80024dc:	b510      	push	{r4, lr}
 80024de:	4604      	mov	r4, r0
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 80024e0:	6803      	ldr	r3, [r0, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80024e8:	d106      	bne.n	80024f8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80024ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80024f0:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80024f2:	2301      	movs	r3, #1
 80024f4:	7763      	strb	r3, [r4, #29]
 80024f6:	bd10      	pop	{r4, pc}
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80024f8:	f001 f838 	bl	800356c <HAL_RTCEx_WakeUpTimerEventCallback>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80024fc:	6822      	ldr	r2, [r4, #0]
 80024fe:	68d3      	ldr	r3, [r2, #12]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f463 6390 	orn	r3, r3, #1152	; 0x480
 8002506:	60d3      	str	r3, [r2, #12]
 8002508:	e7ef      	b.n	80024ea <HAL_RTCEx_WakeUpTimerIRQHandler+0xe>
 800250a:	bf00      	nop
 800250c:	40010400 	.word	0x40010400

08002510 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002510:	6803      	ldr	r3, [r0, #0]
 8002512:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002514:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002518:	4770      	bx	lr

0800251a <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800251a:	6803      	ldr	r3, [r0, #0]
 800251c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800251e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8002522:	4770      	bx	lr

08002524 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002524:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002526:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002528:	6a04      	ldr	r4, [r0, #32]
 800252a:	f024 0401 	bic.w	r4, r4, #1
 800252e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002530:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002532:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002536:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800253a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800253e:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002540:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002542:	6203      	str	r3, [r0, #32]
}
 8002544:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002548:	4770      	bx	lr

0800254a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800254a:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800254c:	6a03      	ldr	r3, [r0, #32]
 800254e:	f023 0310 	bic.w	r3, r3, #16
 8002552:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002554:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002556:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002558:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800255c:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002560:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002564:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002568:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800256a:	6203      	str	r3, [r0, #32]
}
 800256c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002570:	4770      	bx	lr

08002572 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002572:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002578:	f041 0107 	orr.w	r1, r1, #7
 800257c:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800257e:	6083      	str	r3, [r0, #8]
 8002580:	4770      	bx	lr

08002582 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8002582:	4770      	bx	lr

08002584 <HAL_TIM_IC_CaptureCallback>:
{
 8002584:	4770      	bx	lr

08002586 <HAL_TIM_PWM_PulseFinishedCallback>:
{
 8002586:	4770      	bx	lr

08002588 <HAL_TIM_TriggerCallback>:
{
 8002588:	4770      	bx	lr

0800258a <HAL_TIM_IRQHandler>:
{
 800258a:	b510      	push	{r4, lr}
 800258c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800258e:	6803      	ldr	r3, [r0, #0]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	f012 0f02 	tst.w	r2, #2
 8002596:	d011      	beq.n	80025bc <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	f012 0f02 	tst.w	r2, #2
 800259e:	d00d      	beq.n	80025bc <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025a0:	f06f 0202 	mvn.w	r2, #2
 80025a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025a6:	2301      	movs	r3, #1
 80025a8:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025aa:	6803      	ldr	r3, [r0, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f013 0f03 	tst.w	r3, #3
 80025b2:	d079      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80025b4:	f7ff ffe6 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b8:	2300      	movs	r3, #0
 80025ba:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	f012 0f04 	tst.w	r2, #4
 80025c4:	d012      	beq.n	80025ec <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	f012 0f04 	tst.w	r2, #4
 80025cc:	d00e      	beq.n	80025ec <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025ce:	f06f 0204 	mvn.w	r2, #4
 80025d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025d4:	2302      	movs	r3, #2
 80025d6:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f413 7f40 	tst.w	r3, #768	; 0x300
 80025e0:	d068      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	4620      	mov	r0, r4
 80025e4:	f7ff ffce 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e8:	2300      	movs	r3, #0
 80025ea:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	f012 0f08 	tst.w	r2, #8
 80025f4:	d012      	beq.n	800261c <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	f012 0f08 	tst.w	r2, #8
 80025fc:	d00e      	beq.n	800261c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025fe:	f06f 0208 	mvn.w	r2, #8
 8002602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002604:	2304      	movs	r3, #4
 8002606:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	f013 0f03 	tst.w	r3, #3
 8002610:	d057      	beq.n	80026c2 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8002612:	4620      	mov	r0, r4
 8002614:	f7ff ffb6 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002618:	2300      	movs	r3, #0
 800261a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	f012 0f10 	tst.w	r2, #16
 8002624:	d012      	beq.n	800264c <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	f012 0f10 	tst.w	r2, #16
 800262c:	d00e      	beq.n	800264c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800262e:	f06f 0210 	mvn.w	r2, #16
 8002632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002634:	2308      	movs	r3, #8
 8002636:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002640:	d046      	beq.n	80026d0 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002642:	4620      	mov	r0, r4
 8002644:	f7ff ff9e 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002648:	2300      	movs	r3, #0
 800264a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	f012 0f01 	tst.w	r2, #1
 8002654:	d003      	beq.n	800265e <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	f012 0f01 	tst.w	r2, #1
 800265c:	d13f      	bne.n	80026de <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002666:	d003      	beq.n	8002670 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800266e:	d13d      	bne.n	80026ec <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002678:	d003      	beq.n	8002682 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002680:	d13b      	bne.n	80026fa <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	f012 0f40 	tst.w	r2, #64	; 0x40
 800268a:	d003      	beq.n	8002694 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002692:	d139      	bne.n	8002708 <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	f012 0f20 	tst.w	r2, #32
 800269c:	d003      	beq.n	80026a6 <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	f012 0f20 	tst.w	r2, #32
 80026a4:	d137      	bne.n	8002716 <HAL_TIM_IRQHandler+0x18c>
 80026a6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a8:	f7ff ff6b 	bl	8002582 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7ff ff6a 	bl	8002586 <HAL_TIM_PWM_PulseFinishedCallback>
 80026b2:	e781      	b.n	80025b8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b4:	4620      	mov	r0, r4
 80026b6:	f7ff ff64 	bl	8002582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ba:	4620      	mov	r0, r4
 80026bc:	f7ff ff63 	bl	8002586 <HAL_TIM_PWM_PulseFinishedCallback>
 80026c0:	e792      	b.n	80025e8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c2:	4620      	mov	r0, r4
 80026c4:	f7ff ff5d 	bl	8002582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80026c8:	4620      	mov	r0, r4
 80026ca:	f7ff ff5c 	bl	8002586 <HAL_TIM_PWM_PulseFinishedCallback>
 80026ce:	e7a3      	b.n	8002618 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d0:	4620      	mov	r0, r4
 80026d2:	f7ff ff56 	bl	8002582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d6:	4620      	mov	r0, r4
 80026d8:	f7ff ff55 	bl	8002586 <HAL_TIM_PWM_PulseFinishedCallback>
 80026dc:	e7b4      	b.n	8002648 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026de:	f06f 0201 	mvn.w	r2, #1
 80026e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80026e4:	4620      	mov	r0, r4
 80026e6:	f000 ff2b 	bl	8003540 <HAL_TIM_PeriodElapsedCallback>
 80026ea:	e7b8      	b.n	800265e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80026f2:	4620      	mov	r0, r4
 80026f4:	f000 f93b 	bl	800296e <HAL_TIMEx_BreakCallback>
 80026f8:	e7ba      	b.n	8002670 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80026fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002700:	4620      	mov	r0, r4
 8002702:	f000 f935 	bl	8002970 <HAL_TIMEx_Break2Callback>
 8002706:	e7bc      	b.n	8002682 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002708:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800270c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800270e:	4620      	mov	r0, r4
 8002710:	f7ff ff3a 	bl	8002588 <HAL_TIM_TriggerCallback>
 8002714:	e7be      	b.n	8002694 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002716:	f06f 0220 	mvn.w	r2, #32
 800271a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800271c:	4620      	mov	r0, r4
 800271e:	f000 f925 	bl	800296c <HAL_TIMEx_CommutationCallback>
}
 8002722:	e7c0      	b.n	80026a6 <HAL_TIM_IRQHandler+0x11c>

08002724 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002724:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002726:	4a23      	ldr	r2, [pc, #140]	; (80027b4 <TIM_Base_SetConfig+0x90>)
 8002728:	4290      	cmp	r0, r2
 800272a:	d03d      	beq.n	80027a8 <TIM_Base_SetConfig+0x84>
 800272c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002730:	d03a      	beq.n	80027a8 <TIM_Base_SetConfig+0x84>
 8002732:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002736:	4290      	cmp	r0, r2
 8002738:	d036      	beq.n	80027a8 <TIM_Base_SetConfig+0x84>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800273a:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <TIM_Base_SetConfig+0x90>)
 800273c:	4290      	cmp	r0, r2
 800273e:	d012      	beq.n	8002766 <TIM_Base_SetConfig+0x42>
 8002740:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002744:	d00f      	beq.n	8002766 <TIM_Base_SetConfig+0x42>
 8002746:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800274a:	4290      	cmp	r0, r2
 800274c:	d00b      	beq.n	8002766 <TIM_Base_SetConfig+0x42>
 800274e:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8002752:	4290      	cmp	r0, r2
 8002754:	d007      	beq.n	8002766 <TIM_Base_SetConfig+0x42>
 8002756:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800275a:	4290      	cmp	r0, r2
 800275c:	d003      	beq.n	8002766 <TIM_Base_SetConfig+0x42>
 800275e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002762:	4290      	cmp	r0, r2
 8002764:	d103      	bne.n	800276e <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800276a:	68ca      	ldr	r2, [r1, #12]
 800276c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800276e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002772:	694a      	ldr	r2, [r1, #20]
 8002774:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002776:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002778:	688b      	ldr	r3, [r1, #8]
 800277a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800277c:	680b      	ldr	r3, [r1, #0]
 800277e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <TIM_Base_SetConfig+0x90>)
 8002782:	4298      	cmp	r0, r3
 8002784:	d00b      	beq.n	800279e <TIM_Base_SetConfig+0x7a>
 8002786:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800278a:	4298      	cmp	r0, r3
 800278c:	d007      	beq.n	800279e <TIM_Base_SetConfig+0x7a>
 800278e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002792:	4298      	cmp	r0, r3
 8002794:	d003      	beq.n	800279e <TIM_Base_SetConfig+0x7a>
 8002796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800279a:	4298      	cmp	r0, r3
 800279c:	d101      	bne.n	80027a2 <TIM_Base_SetConfig+0x7e>
    TIMx->RCR = Structure->RepetitionCounter;
 800279e:	690b      	ldr	r3, [r1, #16]
 80027a0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80027a2:	2301      	movs	r3, #1
 80027a4:	6143      	str	r3, [r0, #20]
 80027a6:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80027ac:	684a      	ldr	r2, [r1, #4]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	e7c3      	b.n	800273a <TIM_Base_SetConfig+0x16>
 80027b2:	bf00      	nop
 80027b4:	40012c00 	.word	0x40012c00

080027b8 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80027b8:	b1a8      	cbz	r0, 80027e6 <HAL_TIM_Base_Init+0x2e>
{ 
 80027ba:	b510      	push	{r4, lr}
 80027bc:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80027be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027c2:	b15b      	cbz	r3, 80027dc <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80027c4:	2302      	movs	r3, #2
 80027c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80027ca:	1d21      	adds	r1, r4, #4
 80027cc:	6820      	ldr	r0, [r4, #0]
 80027ce:	f7ff ffa9 	bl	8002724 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80027d8:	2000      	movs	r0, #0
 80027da:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80027dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80027e0:	f001 f9f4 	bl	8003bcc <HAL_TIM_Base_MspInit>
 80027e4:	e7ee      	b.n	80027c4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80027e6:	2001      	movs	r0, #1
 80027e8:	4770      	bx	lr

080027ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027ea:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80027ec:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ee:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027f2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80027f6:	4319      	orrs	r1, r3
 80027f8:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027fa:	6084      	str	r4, [r0, #8]
} 
 80027fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002804:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002808:	2b01      	cmp	r3, #1
 800280a:	f000 8082 	beq.w	8002912 <HAL_TIM_ConfigClockSource+0x10e>
{
 800280e:	b510      	push	{r4, lr}
 8002810:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002812:	2301      	movs	r3, #1
 8002814:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	2302      	movs	r3, #2
 800281a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800281e:	6802      	ldr	r2, [r0, #0]
 8002820:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002822:	4b3d      	ldr	r3, [pc, #244]	; (8002918 <HAL_TIM_ConfigClockSource+0x114>)
 8002824:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8002826:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002828:	680b      	ldr	r3, [r1, #0]
 800282a:	2b40      	cmp	r3, #64	; 0x40
 800282c:	d05d      	beq.n	80028ea <HAL_TIM_ConfigClockSource+0xe6>
 800282e:	d910      	bls.n	8002852 <HAL_TIM_ConfigClockSource+0x4e>
 8002830:	2b70      	cmp	r3, #112	; 0x70
 8002832:	d040      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0xb2>
 8002834:	d81f      	bhi.n	8002876 <HAL_TIM_ConfigClockSource+0x72>
 8002836:	2b50      	cmp	r3, #80	; 0x50
 8002838:	d04d      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0xd2>
 800283a:	2b60      	cmp	r3, #96	; 0x60
 800283c:	d134      	bne.n	80028a8 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800283e:	68ca      	ldr	r2, [r1, #12]
 8002840:	6849      	ldr	r1, [r1, #4]
 8002842:	6820      	ldr	r0, [r4, #0]
 8002844:	f7ff fe81 	bl	800254a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002848:	2160      	movs	r1, #96	; 0x60
 800284a:	6820      	ldr	r0, [r4, #0]
 800284c:	f7ff fe91 	bl	8002572 <TIM_ITRx_SetConfig>
    break;
 8002850:	e02a      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8002852:	2b10      	cmp	r3, #16
 8002854:	d053      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0xfa>
 8002856:	d908      	bls.n	800286a <HAL_TIM_ConfigClockSource+0x66>
 8002858:	2b20      	cmp	r3, #32
 800285a:	d055      	beq.n	8002908 <HAL_TIM_ConfigClockSource+0x104>
 800285c:	2b30      	cmp	r3, #48	; 0x30
 800285e:	d123      	bne.n	80028a8 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002860:	2130      	movs	r1, #48	; 0x30
 8002862:	6820      	ldr	r0, [r4, #0]
 8002864:	f7ff fe85 	bl	8002572 <TIM_ITRx_SetConfig>
    break;
 8002868:	e01e      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 800286a:	b9eb      	cbnz	r3, 80028a8 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800286c:	2100      	movs	r1, #0
 800286e:	6820      	ldr	r0, [r4, #0]
 8002870:	f7ff fe7f 	bl	8002572 <TIM_ITRx_SetConfig>
    break;
 8002874:	e018      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 8002876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287a:	d00e      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x96>
 800287c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002880:	d112      	bne.n	80028a8 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance, 
 8002882:	68cb      	ldr	r3, [r1, #12]
 8002884:	684a      	ldr	r2, [r1, #4]
 8002886:	6889      	ldr	r1, [r1, #8]
 8002888:	6820      	ldr	r0, [r4, #0]
 800288a:	f7ff ffae 	bl	80027ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800288e:	6822      	ldr	r2, [r4, #0]
 8002890:	6893      	ldr	r3, [r2, #8]
 8002892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002896:	6093      	str	r3, [r2, #8]
    break;
 8002898:	e006      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0xa4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800289a:	6822      	ldr	r2, [r4, #0]
 800289c:	6893      	ldr	r3, [r2, #8]
 800289e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a2:	f023 0307 	bic.w	r3, r3, #7
 80028a6:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80028b4:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 80028b6:	68cb      	ldr	r3, [r1, #12]
 80028b8:	684a      	ldr	r2, [r1, #4]
 80028ba:	6889      	ldr	r1, [r1, #8]
 80028bc:	6820      	ldr	r0, [r4, #0]
 80028be:	f7ff ff94 	bl	80027ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028c2:	6822      	ldr	r2, [r4, #0]
 80028c4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80028d2:	6093      	str	r3, [r2, #8]
    break;
 80028d4:	e7e8      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80028d6:	68ca      	ldr	r2, [r1, #12]
 80028d8:	6849      	ldr	r1, [r1, #4]
 80028da:	6820      	ldr	r0, [r4, #0]
 80028dc:	f7ff fe22 	bl	8002524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028e0:	2150      	movs	r1, #80	; 0x50
 80028e2:	6820      	ldr	r0, [r4, #0]
 80028e4:	f7ff fe45 	bl	8002572 <TIM_ITRx_SetConfig>
    break;
 80028e8:	e7de      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80028ea:	68ca      	ldr	r2, [r1, #12]
 80028ec:	6849      	ldr	r1, [r1, #4]
 80028ee:	6820      	ldr	r0, [r4, #0]
 80028f0:	f7ff fe18 	bl	8002524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028f4:	2140      	movs	r1, #64	; 0x40
 80028f6:	6820      	ldr	r0, [r4, #0]
 80028f8:	f7ff fe3b 	bl	8002572 <TIM_ITRx_SetConfig>
    break;
 80028fc:	e7d4      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80028fe:	2110      	movs	r1, #16
 8002900:	6820      	ldr	r0, [r4, #0]
 8002902:	f7ff fe36 	bl	8002572 <TIM_ITRx_SetConfig>
    break;
 8002906:	e7cf      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002908:	2120      	movs	r1, #32
 800290a:	6820      	ldr	r0, [r4, #0]
 800290c:	f7ff fe31 	bl	8002572 <TIM_ITRx_SetConfig>
    break;
 8002910:	e7ca      	b.n	80028a8 <HAL_TIM_ConfigClockSource+0xa4>
  __HAL_LOCK(htim);
 8002912:	2002      	movs	r0, #2
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	fffe0088 	.word	0xfffe0088

0800291c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800291c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d01f      	beq.n	8002964 <HAL_TIMEx_MasterConfigSynchronization+0x48>
{
 8002924:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002926:	2301      	movs	r3, #1
 8002928:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800292c:	6804      	ldr	r4, [r0, #0]
 800292e:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002930:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002932:	4d0d      	ldr	r5, [pc, #52]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
 8002934:	42ac      	cmp	r4, r5
 8002936:	d010      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800293c:	680d      	ldr	r5, [r1, #0]
 800293e:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002944:	6889      	ldr	r1, [r1, #8]
 8002946:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002948:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800294a:	6803      	ldr	r3, [r0, #0]
 800294c:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800294e:	2300      	movs	r3, #0
 8002950:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8002954:	4618      	mov	r0, r3
} 
 8002956:	bc30      	pop	{r4, r5}
 8002958:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 800295a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800295e:	684d      	ldr	r5, [r1, #4]
 8002960:	432b      	orrs	r3, r5
 8002962:	e7e9      	b.n	8002938 <HAL_TIMEx_MasterConfigSynchronization+0x1c>
  __HAL_LOCK(htim);
 8002964:	2002      	movs	r0, #2
 8002966:	4770      	bx	lr
 8002968:	40012c00 	.word	0x40012c00

0800296c <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800296c:	4770      	bx	lr

0800296e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800296e:	4770      	bx	lr

08002970 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002970:	4770      	bx	lr

08002972 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002972:	6802      	ldr	r2, [r0, #0]
 8002974:	6813      	ldr	r3, [r2, #0]
 8002976:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800297a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297c:	6802      	ldr	r2, [r0, #0]
 800297e:	6893      	ldr	r3, [r2, #8]
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002986:	2320      	movs	r3, #32
 8002988:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 800298c:	4770      	bx	lr

0800298e <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 800298e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b20      	cmp	r3, #32
 8002996:	d001      	beq.n	800299c <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8002998:	2002      	movs	r0, #2
 800299a:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 800299c:	2900      	cmp	r1, #0
 800299e:	d047      	beq.n	8002a30 <HAL_UART_Receive_IT+0xa2>
 80029a0:	2a00      	cmp	r2, #0
 80029a2:	d047      	beq.n	8002a34 <HAL_UART_Receive_IT+0xa6>
    __HAL_LOCK(huart);
 80029a4:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d045      	beq.n	8002a38 <HAL_UART_Receive_IT+0xaa>
 80029ac:	2301      	movs	r3, #1
 80029ae:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
 80029b2:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80029b4:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 80029b8:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80029bc:	6883      	ldr	r3, [r0, #8]
 80029be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c2:	d006      	beq.n	80029d2 <HAL_UART_Receive_IT+0x44>
 80029c4:	b9a3      	cbnz	r3, 80029f0 <HAL_UART_Receive_IT+0x62>
 80029c6:	6903      	ldr	r3, [r0, #16]
 80029c8:	b973      	cbnz	r3, 80029e8 <HAL_UART_Receive_IT+0x5a>
 80029ca:	23ff      	movs	r3, #255	; 0xff
 80029cc:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80029d0:	e011      	b.n	80029f6 <HAL_UART_Receive_IT+0x68>
 80029d2:	6903      	ldr	r3, [r0, #16]
 80029d4:	b923      	cbnz	r3, 80029e0 <HAL_UART_Receive_IT+0x52>
 80029d6:	f240 13ff 	movw	r3, #511	; 0x1ff
 80029da:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80029de:	e00a      	b.n	80029f6 <HAL_UART_Receive_IT+0x68>
 80029e0:	23ff      	movs	r3, #255	; 0xff
 80029e2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80029e6:	e006      	b.n	80029f6 <HAL_UART_Receive_IT+0x68>
 80029e8:	237f      	movs	r3, #127	; 0x7f
 80029ea:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80029ee:	e002      	b.n	80029f6 <HAL_UART_Receive_IT+0x68>
 80029f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029f4:	d012      	beq.n	8002a1c <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029fa:	2222      	movs	r2, #34	; 0x22
 80029fc:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8002a00:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a04:	6801      	ldr	r1, [r0, #0]
 8002a06:	688a      	ldr	r2, [r1, #8]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	608a      	str	r2, [r1, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002a0e:	6801      	ldr	r1, [r0, #0]
 8002a10:	680a      	ldr	r2, [r1, #0]
 8002a12:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002a16:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8002a18:	4618      	mov	r0, r3
 8002a1a:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8002a1c:	6903      	ldr	r3, [r0, #16]
 8002a1e:	b91b      	cbnz	r3, 8002a28 <HAL_UART_Receive_IT+0x9a>
 8002a20:	237f      	movs	r3, #127	; 0x7f
 8002a22:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002a26:	e7e6      	b.n	80029f6 <HAL_UART_Receive_IT+0x68>
 8002a28:	233f      	movs	r3, #63	; 0x3f
 8002a2a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002a2e:	e7e2      	b.n	80029f6 <HAL_UART_Receive_IT+0x68>
      return HAL_ERROR;
 8002a30:	2001      	movs	r0, #1
 8002a32:	4770      	bx	lr
 8002a34:	2001      	movs	r0, #1
 8002a36:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002a38:	2002      	movs	r0, #2
}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_UART_TxCpltCallback>:
{
 8002a3c:	4770      	bx	lr

08002a3e <HAL_UART_ErrorCallback>:
{
 8002a3e:	4770      	bx	lr

08002a40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a40:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002a42:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002a4a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002a4e:	f7ff fff6 	bl	8002a3e <HAL_UART_ErrorCallback>
 8002a52:	bd08      	pop	{r3, pc}

08002a54 <UART_SetConfig>:
{
 8002a54:	b538      	push	{r3, r4, r5, lr}
 8002a56:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a58:	6883      	ldr	r3, [r0, #8]
 8002a5a:	6902      	ldr	r2, [r0, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	6942      	ldr	r2, [r0, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	69c2      	ldr	r2, [r0, #28]
 8002a64:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a66:	6801      	ldr	r1, [r0, #0]
 8002a68:	6808      	ldr	r0, [r1, #0]
 8002a6a:	4a64      	ldr	r2, [pc, #400]	; (8002bfc <UART_SetConfig+0x1a8>)
 8002a6c:	4002      	ands	r2, r0
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a72:	6822      	ldr	r2, [r4, #0]
 8002a74:	6853      	ldr	r3, [r2, #4]
 8002a76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a7a:	68e1      	ldr	r1, [r4, #12]
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002a80:	69a3      	ldr	r3, [r4, #24]
 8002a82:	6a22      	ldr	r2, [r4, #32]
 8002a84:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002a86:	6821      	ldr	r1, [r4, #0]
 8002a88:	688a      	ldr	r2, [r1, #8]
 8002a8a:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a92:	6825      	ldr	r5, [r4, #0]
 8002a94:	4b5a      	ldr	r3, [pc, #360]	; (8002c00 <UART_SetConfig+0x1ac>)
 8002a96:	429d      	cmp	r5, r3
 8002a98:	d015      	beq.n	8002ac6 <UART_SetConfig+0x72>
 8002a9a:	4b5a      	ldr	r3, [pc, #360]	; (8002c04 <UART_SetConfig+0x1b0>)
 8002a9c:	429d      	cmp	r5, r3
 8002a9e:	d029      	beq.n	8002af4 <UART_SetConfig+0xa0>
 8002aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aa4:	429d      	cmp	r5, r3
 8002aa6:	d021      	beq.n	8002aec <UART_SetConfig+0x98>
 8002aa8:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aaa:	69e2      	ldr	r2, [r4, #28]
 8002aac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002ab0:	d022      	beq.n	8002af8 <UART_SetConfig+0xa4>
    switch (clocksource)
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	f200 809f 	bhi.w	8002bf6 <UART_SetConfig+0x1a2>
 8002ab8:	e8df f003 	tbb	[pc, r3]
 8002abc:	9d7c7166 	.word	0x9d7c7166
 8002ac0:	9d9d9d88 	.word	0x9d9d9d88
 8002ac4:	93          	.byte	0x93
 8002ac5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ac6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d809      	bhi.n	8002ae8 <UART_SetConfig+0x94>
 8002ad4:	e8df f003 	tbb	[pc, r3]
 8002ad8:	0c060402 	.word	0x0c060402
 8002adc:	2300      	movs	r3, #0
 8002ade:	e7e4      	b.n	8002aaa <UART_SetConfig+0x56>
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	e7e2      	b.n	8002aaa <UART_SetConfig+0x56>
 8002ae4:	2308      	movs	r3, #8
 8002ae6:	e7e0      	b.n	8002aaa <UART_SetConfig+0x56>
 8002ae8:	2310      	movs	r3, #16
 8002aea:	e7de      	b.n	8002aaa <UART_SetConfig+0x56>
 8002aec:	2300      	movs	r3, #0
 8002aee:	e7dc      	b.n	8002aaa <UART_SetConfig+0x56>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e7da      	b.n	8002aaa <UART_SetConfig+0x56>
 8002af4:	2300      	movs	r3, #0
 8002af6:	e7d8      	b.n	8002aaa <UART_SetConfig+0x56>
    switch (clocksource)
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d842      	bhi.n	8002b82 <UART_SetConfig+0x12e>
 8002afc:	e8df f003 	tbb	[pc, r3]
 8002b00:	41221705 	.word	0x41221705
 8002b04:	4141412d 	.word	0x4141412d
 8002b08:	38          	.byte	0x38
 8002b09:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b0a:	f7ff f989 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8002b0e:	6862      	ldr	r2, [r4, #4]
 8002b10:	0853      	lsrs	r3, r2, #1
 8002b12:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002b16:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b1a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b1c:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002b1e:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b22:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002b26:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8002b28:	6822      	ldr	r2, [r4, #0]
 8002b2a:	60d3      	str	r3, [r2, #12]
 8002b2c:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002b2e:	f7ff f98d 	bl	8001e4c <HAL_RCC_GetPCLK2Freq>
 8002b32:	6862      	ldr	r2, [r4, #4]
 8002b34:	0853      	lsrs	r3, r2, #1
 8002b36:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b3e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b40:	2000      	movs	r0, #0
        break;
 8002b42:	e7ec      	b.n	8002b1e <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b44:	6862      	ldr	r2, [r4, #4]
 8002b46:	0853      	lsrs	r3, r2, #1
 8002b48:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002b4c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b54:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b56:	2000      	movs	r0, #0
        break;
 8002b58:	e7e1      	b.n	8002b1e <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b5a:	f7ff f839 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8002b5e:	6862      	ldr	r2, [r4, #4]
 8002b60:	0853      	lsrs	r3, r2, #1
 8002b62:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002b66:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b6a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b6c:	2000      	movs	r0, #0
        break;
 8002b6e:	e7d6      	b.n	8002b1e <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b70:	6862      	ldr	r2, [r4, #4]
 8002b72:	0853      	lsrs	r3, r2, #1
 8002b74:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002b78:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b7c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b7e:	2000      	movs	r0, #0
        break;
 8002b80:	e7cd      	b.n	8002b1e <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8002b82:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e7ca      	b.n	8002b1e <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b88:	f7ff f94a 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8002b8c:	6863      	ldr	r3, [r4, #4]
 8002b8e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002b92:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b96:	b280      	uxth	r0, r0
 8002b98:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b9a:	2000      	movs	r0, #0
        break;
 8002b9c:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002b9e:	f7ff f955 	bl	8001e4c <HAL_RCC_GetPCLK2Freq>
 8002ba2:	6863      	ldr	r3, [r4, #4]
 8002ba4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002ba8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002bac:	b280      	uxth	r0, r0
 8002bae:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bb0:	2000      	movs	r0, #0
        break;
 8002bb2:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002bb4:	6862      	ldr	r2, [r4, #4]
 8002bb6:	0853      	lsrs	r3, r2, #1
 8002bb8:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002bbc:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002bc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bc8:	2000      	movs	r0, #0
        break;
 8002bca:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002bcc:	f7ff f800 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8002bd0:	6863      	ldr	r3, [r4, #4]
 8002bd2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002bd6:	fbb0 f0f3 	udiv	r0, r0, r3
 8002bda:	b280      	uxth	r0, r0
 8002bdc:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bde:	2000      	movs	r0, #0
        break;
 8002be0:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002be2:	6862      	ldr	r2, [r4, #4]
 8002be4:	0853      	lsrs	r3, r2, #1
 8002be6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002bea:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bf2:	2000      	movs	r0, #0
        break;
 8002bf4:	bd38      	pop	{r3, r4, r5, pc}
        ret = HAL_ERROR;
 8002bf6:	2001      	movs	r0, #1
}
 8002bf8:	bd38      	pop	{r3, r4, r5, pc}
 8002bfa:	bf00      	nop
 8002bfc:	efff69f3 	.word	0xefff69f3
 8002c00:	40013800 	.word	0x40013800
 8002c04:	40004400 	.word	0x40004400

08002c08 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c0a:	f013 0f01 	tst.w	r3, #1
 8002c0e:	d006      	beq.n	8002c1e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c10:	6802      	ldr	r2, [r0, #0]
 8002c12:	6853      	ldr	r3, [r2, #4]
 8002c14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002c18:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c20:	f013 0f02 	tst.w	r3, #2
 8002c24:	d006      	beq.n	8002c34 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c26:	6802      	ldr	r2, [r0, #0]
 8002c28:	6853      	ldr	r3, [r2, #4]
 8002c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002c30:	430b      	orrs	r3, r1
 8002c32:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c36:	f013 0f04 	tst.w	r3, #4
 8002c3a:	d006      	beq.n	8002c4a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c3c:	6802      	ldr	r2, [r0, #0]
 8002c3e:	6853      	ldr	r3, [r2, #4]
 8002c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c44:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002c46:	430b      	orrs	r3, r1
 8002c48:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c4c:	f013 0f08 	tst.w	r3, #8
 8002c50:	d006      	beq.n	8002c60 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c52:	6802      	ldr	r2, [r0, #0]
 8002c54:	6853      	ldr	r3, [r2, #4]
 8002c56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c5a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c62:	f013 0f10 	tst.w	r3, #16
 8002c66:	d006      	beq.n	8002c76 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c68:	6802      	ldr	r2, [r0, #0]
 8002c6a:	6893      	ldr	r3, [r2, #8]
 8002c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c70:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002c72:	430b      	orrs	r3, r1
 8002c74:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c76:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c78:	f013 0f20 	tst.w	r3, #32
 8002c7c:	d006      	beq.n	8002c8c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c7e:	6802      	ldr	r2, [r0, #0]
 8002c80:	6893      	ldr	r3, [r2, #8]
 8002c82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c86:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c8e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002c92:	d00a      	beq.n	8002caa <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c94:	6802      	ldr	r2, [r0, #0]
 8002c96:	6853      	ldr	r3, [r2, #4]
 8002c98:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c9c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ca2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca8:	d00b      	beq.n	8002cc2 <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002caa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cac:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002cb0:	d006      	beq.n	8002cc0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cb2:	6802      	ldr	r2, [r0, #0]
 8002cb4:	6853      	ldr	r3, [r2, #4]
 8002cb6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002cba:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6053      	str	r3, [r2, #4]
 8002cc0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cc2:	6802      	ldr	r2, [r0, #0]
 8002cc4:	6853      	ldr	r3, [r2, #4]
 8002cc6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cca:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	6053      	str	r3, [r2, #4]
 8002cd0:	e7eb      	b.n	8002caa <UART_AdvFeatureConfig+0xa2>

08002cd2 <UART_WaitOnFlagUntilTimeout>:
{
 8002cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cd6:	4605      	mov	r5, r0
 8002cd8:	460f      	mov	r7, r1
 8002cda:	4616      	mov	r6, r2
 8002cdc:	4698      	mov	r8, r3
 8002cde:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ce0:	682b      	ldr	r3, [r5, #0]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	ea37 0303 	bics.w	r3, r7, r3
 8002ce8:	bf0c      	ite	eq
 8002cea:	2301      	moveq	r3, #1
 8002cec:	2300      	movne	r3, #0
 8002cee:	42b3      	cmp	r3, r6
 8002cf0:	d11e      	bne.n	8002d30 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8002cf2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002cf6:	d0f3      	beq.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002cf8:	b12c      	cbz	r4, 8002d06 <UART_WaitOnFlagUntilTimeout+0x34>
 8002cfa:	f7fd fa95 	bl	8000228 <HAL_GetTick>
 8002cfe:	eba0 0008 	sub.w	r0, r0, r8
 8002d02:	4284      	cmp	r4, r0
 8002d04:	d2ec      	bcs.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d06:	682a      	ldr	r2, [r5, #0]
 8002d08:	6813      	ldr	r3, [r2, #0]
 8002d0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d0e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d10:	682a      	ldr	r2, [r5, #0]
 8002d12:	6893      	ldr	r3, [r2, #8]
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002d1a:	2320      	movs	r3, #32
 8002d1c:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002d20:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002d24:	2300      	movs	r3, #0
 8002d26:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8002d2a:	2003      	movs	r0, #3
 8002d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8002d30:	2000      	movs	r0, #0
}
 8002d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002d36 <HAL_UART_Transmit>:
{
 8002d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002d3e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d004      	beq.n	8002d52 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	b002      	add	sp, #8
 8002d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d52:	4604      	mov	r4, r0
 8002d54:	460d      	mov	r5, r1
 8002d56:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8002d58:	2900      	cmp	r1, #0
 8002d5a:	d04e      	beq.n	8002dfa <HAL_UART_Transmit+0xc4>
 8002d5c:	2a00      	cmp	r2, #0
 8002d5e:	d04e      	beq.n	8002dfe <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8002d60:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_UART_Transmit+0x36>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e7ee      	b.n	8002d4a <HAL_UART_Transmit+0x14>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d76:	2321      	movs	r3, #33	; 0x21
 8002d78:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8002d7c:	f7fd fa54 	bl	8000228 <HAL_GetTick>
 8002d80:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002d82:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d86:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002d8a:	e003      	b.n	8002d94 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	782a      	ldrb	r2, [r5, #0]
 8002d90:	851a      	strh	r2, [r3, #40]	; 0x28
 8002d92:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 8002d94:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	b1e3      	cbz	r3, 8002dd6 <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 8002d9c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002daa:	9600      	str	r6, [sp, #0]
 8002dac:	463b      	mov	r3, r7
 8002dae:	2200      	movs	r2, #0
 8002db0:	2180      	movs	r1, #128	; 0x80
 8002db2:	4620      	mov	r0, r4
 8002db4:	f7ff ff8d 	bl	8002cd2 <UART_WaitOnFlagUntilTimeout>
 8002db8:	bb18      	cbnz	r0, 8002e02 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dba:	68a3      	ldr	r3, [r4, #8]
 8002dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc0:	d1e4      	bne.n	8002d8c <HAL_UART_Transmit+0x56>
 8002dc2:	6923      	ldr	r3, [r4, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1e1      	bne.n	8002d8c <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002dc8:	6822      	ldr	r2, [r4, #0]
 8002dca:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd2:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8002dd4:	e7de      	b.n	8002d94 <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dd6:	9600      	str	r6, [sp, #0]
 8002dd8:	463b      	mov	r3, r7
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2140      	movs	r1, #64	; 0x40
 8002dde:	4620      	mov	r0, r4
 8002de0:	f7ff ff77 	bl	8002cd2 <UART_WaitOnFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	b108      	cbz	r0, 8002dec <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e7ae      	b.n	8002d4a <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8002dec:	2220      	movs	r2, #32
 8002dee:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002df2:	2200      	movs	r2, #0
 8002df4:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    return HAL_OK;
 8002df8:	e7a7      	b.n	8002d4a <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e7a5      	b.n	8002d4a <HAL_UART_Transmit+0x14>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e7a3      	b.n	8002d4a <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e7a1      	b.n	8002d4a <HAL_UART_Transmit+0x14>

08002e06 <UART_CheckIdleState>:
{
 8002e06:	b530      	push	{r4, r5, lr}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002e10:	f7fd fa0a 	bl	8000228 <HAL_GetTick>
 8002e14:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f013 0f08 	tst.w	r3, #8
 8002e1e:	d10e      	bne.n	8002e3e <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f013 0f04 	tst.w	r3, #4
 8002e28:	d117      	bne.n	8002e5a <UART_CheckIdleState+0x54>
  huart->gState  = HAL_UART_STATE_READY;
 8002e2a:	2320      	movs	r3, #32
 8002e2c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002e30:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  __HAL_UNLOCK(huart);
 8002e34:	2000      	movs	r0, #0
 8002e36:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 8002e3a:	b003      	add	sp, #12
 8002e3c:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	4603      	mov	r3, r0
 8002e46:	2200      	movs	r2, #0
 8002e48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f7ff ff40 	bl	8002cd2 <UART_WaitOnFlagUntilTimeout>
 8002e52:	2800      	cmp	r0, #0
 8002e54:	d0e4      	beq.n	8002e20 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002e56:	2003      	movs	r0, #3
 8002e58:	e7ef      	b.n	8002e3a <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	462b      	mov	r3, r5
 8002e62:	2200      	movs	r2, #0
 8002e64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f7ff ff32 	bl	8002cd2 <UART_WaitOnFlagUntilTimeout>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d0db      	beq.n	8002e2a <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8002e72:	2003      	movs	r0, #3
 8002e74:	e7e1      	b.n	8002e3a <UART_CheckIdleState+0x34>

08002e76 <HAL_UART_Init>:
  if(huart == NULL)
 8002e76:	b378      	cbz	r0, 8002ed8 <HAL_UART_Init+0x62>
{
 8002e78:	b510      	push	{r4, lr}
 8002e7a:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8002e7c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002e80:	b30b      	cbz	r3, 8002ec6 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002e82:	2324      	movs	r3, #36	; 0x24
 8002e84:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002e88:	6822      	ldr	r2, [r4, #0]
 8002e8a:	6813      	ldr	r3, [r2, #0]
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e92:	4620      	mov	r0, r4
 8002e94:	f7ff fdde 	bl	8002a54 <UART_SetConfig>
 8002e98:	2801      	cmp	r0, #1
 8002e9a:	d01f      	beq.n	8002edc <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e9e:	b9bb      	cbnz	r3, 8002ed0 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ea0:	6822      	ldr	r2, [r4, #0]
 8002ea2:	6853      	ldr	r3, [r2, #4]
 8002ea4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002ea8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eaa:	6822      	ldr	r2, [r4, #0]
 8002eac:	6893      	ldr	r3, [r2, #8]
 8002eae:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002eb2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002eb4:	6822      	ldr	r2, [r4, #0]
 8002eb6:	6813      	ldr	r3, [r2, #0]
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f7ff ffa1 	bl	8002e06 <UART_CheckIdleState>
 8002ec4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002ec6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002eca:	f000 fe9d 	bl	8003c08 <HAL_UART_MspInit>
 8002ece:	e7d8      	b.n	8002e82 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f7ff fe99 	bl	8002c08 <UART_AdvFeatureConfig>
 8002ed6:	e7e3      	b.n	8002ea0 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002ed8:	2001      	movs	r0, #1
 8002eda:	4770      	bx	lr
}
 8002edc:	bd10      	pop	{r4, pc}

08002ede <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ede:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b21      	cmp	r3, #33	; 0x21
 8002ee6:	d001      	beq.n	8002eec <UART_Transmit_IT+0xe>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002ee8:	2002      	movs	r0, #2
  }
}
 8002eea:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8002eec:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	b193      	cbz	r3, 8002f1a <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef4:	6883      	ldr	r3, [r0, #8]
 8002ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efa:	d01a      	beq.n	8002f32 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002efc:	6802      	ldr	r2, [r0, #0]
 8002efe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002f00:	1c59      	adds	r1, r3, #1
 8002f02:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002f08:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 8002f16:	2000      	movs	r0, #0
 8002f18:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f1a:	6802      	ldr	r2, [r0, #0]
 8002f1c:	6813      	ldr	r3, [r2, #0]
 8002f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f22:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f24:	6802      	ldr	r2, [r0, #0]
 8002f26:	6813      	ldr	r3, [r2, #0]
 8002f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f2c:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8002f2e:	2000      	movs	r0, #0
 8002f30:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f32:	6903      	ldr	r3, [r0, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e1      	bne.n	8002efc <UART_Transmit_IT+0x1e>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8002f38:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002f3a:	6802      	ldr	r2, [r0, #0]
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f42:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002f44:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002f46:	3302      	adds	r3, #2
 8002f48:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002f4a:	e7dd      	b.n	8002f08 <UART_Transmit_IT+0x2a>

08002f4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f4c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f4e:	6801      	ldr	r1, [r0, #0]
 8002f50:	680b      	ldr	r3, [r1, #0]
 8002f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f56:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f58:	2320      	movs	r3, #32
 8002f5a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8002f5e:	f7ff fd6d 	bl	8002a3c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8002f62:	2000      	movs	r0, #0
 8002f64:	bd08      	pop	{r3, pc}

08002f66 <UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8002f66:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f6a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b22      	cmp	r3, #34	; 0x22
 8002f72:	d006      	beq.n	8002f82 <UART_Receive_IT+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002f74:	6802      	ldr	r2, [r0, #0]
 8002f76:	6993      	ldr	r3, [r2, #24]
 8002f78:	f043 0308 	orr.w	r3, r3, #8
 8002f7c:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8002f7e:	2002      	movs	r0, #2
 8002f80:	4770      	bx	lr
{
 8002f82:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002f84:	6803      	ldr	r3, [r0, #0]
 8002f86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002f88:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f8a:	6881      	ldr	r1, [r0, #8]
 8002f8c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002f90:	d00f      	beq.n	8002fb2 <UART_Receive_IT+0x4c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002f92:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8002f94:	1c4c      	adds	r4, r1, #1
 8002f96:	6544      	str	r4, [r0, #84]	; 0x54
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	700a      	strb	r2, [r1, #0]
    if(--huart->RxXferCount == 0U)
 8002f9e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8002fac:	b15b      	cbz	r3, 8002fc6 <UART_Receive_IT+0x60>
    return HAL_OK;
 8002fae:	2000      	movs	r0, #0
  }
}
 8002fb0:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fb2:	6901      	ldr	r1, [r0, #16]
 8002fb4:	2900      	cmp	r1, #0
 8002fb6:	d1ec      	bne.n	8002f92 <UART_Receive_IT+0x2c>
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002fb8:	6d41      	ldr	r1, [r0, #84]	; 0x54
      *tmp = (uint16_t)(uhdata & uhMask);
 8002fba:	401a      	ands	r2, r3
 8002fbc:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2U;
 8002fbe:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	6543      	str	r3, [r0, #84]	; 0x54
 8002fc4:	e7eb      	b.n	8002f9e <UART_Receive_IT+0x38>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fc6:	6802      	ldr	r2, [r0, #0]
 8002fc8:	6813      	ldr	r3, [r2, #0]
 8002fca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fce:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd0:	6802      	ldr	r2, [r0, #0]
 8002fd2:	6893      	ldr	r3, [r2, #8]
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002fda:	2320      	movs	r3, #32
 8002fdc:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8002fe0:	f000 faa8 	bl	8003534 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	bd10      	pop	{r4, pc}

08002fe8 <HAL_UART_IRQHandler>:
{
 8002fe8:	b538      	push	{r3, r4, r5, lr}
 8002fea:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fec:	6802      	ldr	r2, [r0, #0]
 8002fee:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ff0:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 8002ff2:	f013 050f 	ands.w	r5, r3, #15
 8002ff6:	d105      	bne.n	8003004 <HAL_UART_IRQHandler+0x1c>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ff8:	f013 0f20 	tst.w	r3, #32
 8002ffc:	d002      	beq.n	8003004 <HAL_UART_IRQHandler+0x1c>
 8002ffe:	f011 0f20 	tst.w	r1, #32
 8003002:	d160      	bne.n	80030c6 <HAL_UART_IRQHandler+0xde>
  cr3its = READ_REG(huart->Instance->CR3);
 8003004:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8003006:	2d00      	cmp	r5, #0
 8003008:	d072      	beq.n	80030f0 <HAL_UART_IRQHandler+0x108>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800300a:	f010 0501 	ands.w	r5, r0, #1
 800300e:	d102      	bne.n	8003016 <HAL_UART_IRQHandler+0x2e>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003010:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003014:	d06c      	beq.n	80030f0 <HAL_UART_IRQHandler+0x108>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003016:	f013 0f01 	tst.w	r3, #1
 800301a:	d007      	beq.n	800302c <HAL_UART_IRQHandler+0x44>
 800301c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003020:	d004      	beq.n	800302c <HAL_UART_IRQHandler+0x44>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003022:	2001      	movs	r0, #1
 8003024:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003026:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003028:	4302      	orrs	r2, r0
 800302a:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800302c:	f013 0f02 	tst.w	r3, #2
 8003030:	d007      	beq.n	8003042 <HAL_UART_IRQHandler+0x5a>
 8003032:	b135      	cbz	r5, 8003042 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003034:	6822      	ldr	r2, [r4, #0]
 8003036:	2002      	movs	r0, #2
 8003038:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800303a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800303c:	f042 0204 	orr.w	r2, r2, #4
 8003040:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003042:	f013 0f04 	tst.w	r3, #4
 8003046:	d007      	beq.n	8003058 <HAL_UART_IRQHandler+0x70>
 8003048:	b135      	cbz	r5, 8003058 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800304a:	6822      	ldr	r2, [r4, #0]
 800304c:	2004      	movs	r0, #4
 800304e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003050:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003052:	f042 0202 	orr.w	r2, r2, #2
 8003056:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003058:	f013 0f08 	tst.w	r3, #8
 800305c:	d009      	beq.n	8003072 <HAL_UART_IRQHandler+0x8a>
 800305e:	f011 0f20 	tst.w	r1, #32
 8003062:	d100      	bne.n	8003066 <HAL_UART_IRQHandler+0x7e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003064:	b12d      	cbz	r5, 8003072 <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003066:	6822      	ldr	r2, [r4, #0]
 8003068:	2008      	movs	r0, #8
 800306a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800306c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800306e:	4302      	orrs	r2, r0
 8003070:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003072:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003074:	2a00      	cmp	r2, #0
 8003076:	d04d      	beq.n	8003114 <HAL_UART_IRQHandler+0x12c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003078:	f013 0f20 	tst.w	r3, #32
 800307c:	d002      	beq.n	8003084 <HAL_UART_IRQHandler+0x9c>
 800307e:	f011 0f20 	tst.w	r1, #32
 8003082:	d123      	bne.n	80030cc <HAL_UART_IRQHandler+0xe4>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003084:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003086:	f013 0f08 	tst.w	r3, #8
 800308a:	d104      	bne.n	8003096 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003090:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003094:	d026      	beq.n	80030e4 <HAL_UART_IRQHandler+0xfc>
        UART_EndRxTransfer(huart);
 8003096:	4620      	mov	r0, r4
 8003098:	f7ff fc6b 	bl	8002972 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80030a4:	d01a      	beq.n	80030dc <HAL_UART_IRQHandler+0xf4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ac:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80030ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030b0:	b183      	cbz	r3, 80030d4 <HAL_UART_IRQHandler+0xec>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030b2:	4a23      	ldr	r2, [pc, #140]	; (8003140 <HAL_UART_IRQHandler+0x158>)
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030b6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80030b8:	f7fd fdb1 	bl	8000c1e <HAL_DMA_Abort_IT>
 80030bc:	b350      	cbz	r0, 8003114 <HAL_UART_IRQHandler+0x12c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030be:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80030c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80030c2:	4798      	blx	r3
 80030c4:	bd38      	pop	{r3, r4, r5, pc}
      UART_Receive_IT(huart);
 80030c6:	f7ff ff4e 	bl	8002f66 <UART_Receive_IT>
      return;
 80030ca:	bd38      	pop	{r3, r4, r5, pc}
        UART_Receive_IT(huart);
 80030cc:	4620      	mov	r0, r4
 80030ce:	f7ff ff4a 	bl	8002f66 <UART_Receive_IT>
 80030d2:	e7d7      	b.n	8003084 <HAL_UART_IRQHandler+0x9c>
            HAL_UART_ErrorCallback(huart);
 80030d4:	4620      	mov	r0, r4
 80030d6:	f7ff fcb2 	bl	8002a3e <HAL_UART_ErrorCallback>
 80030da:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 80030dc:	4620      	mov	r0, r4
 80030de:	f7ff fcae 	bl	8002a3e <HAL_UART_ErrorCallback>
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 80030e4:	4620      	mov	r0, r4
 80030e6:	f7ff fcaa 	bl	8002a3e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	66e3      	str	r3, [r4, #108]	; 0x6c
 80030ee:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80030f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80030f4:	d002      	beq.n	80030fc <HAL_UART_IRQHandler+0x114>
 80030f6:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80030fa:	d10c      	bne.n	8003116 <HAL_UART_IRQHandler+0x12e>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003100:	d002      	beq.n	8003108 <HAL_UART_IRQHandler+0x120>
 8003102:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003106:	d112      	bne.n	800312e <HAL_UART_IRQHandler+0x146>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003108:	f013 0f40 	tst.w	r3, #64	; 0x40
 800310c:	d002      	beq.n	8003114 <HAL_UART_IRQHandler+0x12c>
 800310e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003112:	d110      	bne.n	8003136 <HAL_UART_IRQHandler+0x14e>
 8003114:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003116:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800311a:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 800311c:	2320      	movs	r3, #32
 800311e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8003122:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8003126:	4620      	mov	r0, r4
 8003128:	f000 f80c 	bl	8003144 <HAL_UARTEx_WakeupCallback>
    return;
 800312c:	bd38      	pop	{r3, r4, r5, pc}
    UART_Transmit_IT(huart);
 800312e:	4620      	mov	r0, r4
 8003130:	f7ff fed5 	bl	8002ede <UART_Transmit_IT>
    return;
 8003134:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8003136:	4620      	mov	r0, r4
 8003138:	f7ff ff08 	bl	8002f4c <UART_EndTransmit_IT>
    return;
 800313c:	e7ea      	b.n	8003114 <HAL_UART_IRQHandler+0x12c>
 800313e:	bf00      	nop
 8003140:	08002a41 	.word	0x08002a41

08003144 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003144:	4770      	bx	lr
	...

08003148 <TempConv>:
uint32_t TempConv(uint32_t tempVal)
{
	uint32_t temp = 0;
	uint32_t scale = 0;

	temp = ((100*tempVal)>>7)+((100*tempVal)>>12);
 8003148:	2364      	movs	r3, #100	; 0x64
 800314a:	fb03 f300 	mul.w	r3, r3, r0
 800314e:	0b18      	lsrs	r0, r3, #12
 8003150:	eb00 10d3 	add.w	r0, r0, r3, lsr #7
	scale = (temp-500)/10;
 8003154:	f5a0 70fa 	sub.w	r0, r0, #500	; 0x1f4
 8003158:	4b02      	ldr	r3, [pc, #8]	; (8003164 <TempConv+0x1c>)
 800315a:	fba3 3000 	umull	r3, r0, r3, r0

	return scale;
}
 800315e:	08c0      	lsrs	r0, r0, #3
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	cccccccd 	.word	0xcccccccd

08003168 <switchHeater>:

void switchHeater(void)
{
 8003168:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12,heaterState);
 800316a:	4b04      	ldr	r3, [pc, #16]	; (800317c <switchHeater+0x14>)
 800316c:	881a      	ldrh	r2, [r3, #0]
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003174:	4802      	ldr	r0, [pc, #8]	; (8003180 <switchHeater+0x18>)
 8003176:	f7fd fe41 	bl	8000dfc <HAL_GPIO_WritePin>
 800317a:	bd08      	pop	{r3, pc}
 800317c:	20000044 	.word	0x20000044
 8003180:	48000800 	.word	0x48000800

08003184 <switchValve>:
}

void switchValve(void)
{
 8003184:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,valveState);
 8003186:	4b04      	ldr	r3, [pc, #16]	; (8003198 <switchValve+0x14>)
 8003188:	881a      	ldrh	r2, [r3, #0]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003190:	4802      	ldr	r0, [pc, #8]	; (800319c <switchValve+0x18>)
 8003192:	f7fd fe33 	bl	8000dfc <HAL_GPIO_WritePin>
 8003196:	bd08      	pop	{r3, pc}
 8003198:	20000046 	.word	0x20000046
 800319c:	48000800 	.word	0x48000800

080031a0 <StringTime2Int>:
}

uint8_t StringTime2Int(char* inputTimeString, uint8_t* outputTimeInt)
{
	int returnValue = 0;
	timeL += 1;
 80031a0:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <StringTime2Int+0x54>)
 80031a2:	7813      	ldrb	r3, [r2, #0]
 80031a4:	3301      	adds	r3, #1
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	7013      	strb	r3, [r2, #0]

	if (*inputTimeString == ',')
 80031aa:	7803      	ldrb	r3, [r0, #0]
 80031ac:	2b2c      	cmp	r3, #44	; 0x2c
 80031ae:	d01d      	beq.n	80031ec <StringTime2Int+0x4c>
{
 80031b0:	b410      	push	{r4}
 80031b2:	2300      	movs	r3, #0
		return 0;

	while ((*inputTimeString >= '0') && (*inputTimeString <= '9'))
 80031b4:	7802      	ldrb	r2, [r0, #0]
 80031b6:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 80031ba:	b2e4      	uxtb	r4, r4
 80031bc:	2c09      	cmp	r4, #9
 80031be:	d80e      	bhi.n	80031de <StringTime2Int+0x3e>
	{
		returnValue *= 10;
 80031c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80031c4:	005c      	lsls	r4, r3, #1
		returnValue += (*inputTimeString - 48);
 80031c6:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80031ca:	4423      	add	r3, r4

		if (returnValue >= 128)
 80031cc:	2b7f      	cmp	r3, #127	; 0x7f
 80031ce:	dc0f      	bgt.n	80031f0 <StringTime2Int+0x50>
			return 0;

		inputTimeString++;
 80031d0:	3001      	adds	r0, #1
		timeL++;
 80031d2:	4c08      	ldr	r4, [pc, #32]	; (80031f4 <StringTime2Int+0x54>)
 80031d4:	7822      	ldrb	r2, [r4, #0]
 80031d6:	3201      	adds	r2, #1
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	7022      	strb	r2, [r4, #0]
 80031dc:	e7ea      	b.n	80031b4 <StringTime2Int+0x14>
	}
	*outputTimeInt = (int8_t)(returnValue);
 80031de:	700b      	strb	r3, [r1, #0]
	return timeL;
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <StringTime2Int+0x54>)
 80031e2:	7818      	ldrb	r0, [r3, #0]
 80031e4:	b2c0      	uxtb	r0, r0
}
 80031e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031ea:	4770      	bx	lr
		return 0;
 80031ec:	2000      	movs	r0, #0
 80031ee:	4770      	bx	lr
			return 0;
 80031f0:	2000      	movs	r0, #0
 80031f2:	e7f8      	b.n	80031e6 <StringTime2Int+0x46>
 80031f4:	2000002c 	.word	0x2000002c

080031f8 <String2Int>:
uint8_t String2Int(char* inputString, int16_t* outputInt)
{
	int returnValue = 0;
	int sign = 1;

	if (*inputString == '\0')
 80031f8:	7803      	ldrb	r3, [r0, #0]
 80031fa:	b353      	cbz	r3, 8003252 <String2Int+0x5a>
{
 80031fc:	b430      	push	{r4, r5}
		return 0;

	if (*inputString == '-')
 80031fe:	2b2d      	cmp	r3, #45	; 0x2d
 8003200:	d002      	beq.n	8003208 <String2Int+0x10>
	int sign = 1;
 8003202:	2501      	movs	r5, #1
 8003204:	2300      	movs	r3, #0
 8003206:	e009      	b.n	800321c <String2Int+0x24>
	{
		sign = -1;
		inputString++;
 8003208:	3001      	adds	r0, #1
		sign = -1;
 800320a:	f04f 35ff 	mov.w	r5, #4294967295
 800320e:	e7f9      	b.n	8003204 <String2Int+0xc>
	while ((*inputString >= '0') && (*inputString <= '9'))
	{
		returnValue *= 10;
		returnValue += (*inputString - 48);

		if (((sign == 1) && (returnValue >= 32768)) ||
 8003210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003214:	db0f      	blt.n	8003236 <String2Int+0x3e>
				((sign == -1) && (returnValue >= 32769)))
			return 0;
 8003216:	2000      	movs	r0, #0
 8003218:	e019      	b.n	800324e <String2Int+0x56>

		inputString++;
 800321a:	3001      	adds	r0, #1
	while ((*inputString >= '0') && (*inputString <= '9'))
 800321c:	7802      	ldrb	r2, [r0, #0]
 800321e:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8003222:	b2e4      	uxtb	r4, r4
 8003224:	2c09      	cmp	r4, #9
 8003226:	d80e      	bhi.n	8003246 <String2Int+0x4e>
		returnValue *= 10;
 8003228:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800322c:	005c      	lsls	r4, r3, #1
		returnValue += (*inputString - 48);
 800322e:	3a30      	subs	r2, #48	; 0x30
 8003230:	18a3      	adds	r3, r4, r2
		if (((sign == 1) && (returnValue >= 32768)) ||
 8003232:	2d01      	cmp	r5, #1
 8003234:	d0ec      	beq.n	8003210 <String2Int+0x18>
 8003236:	f1b5 3fff 	cmp.w	r5, #4294967295
 800323a:	d1ee      	bne.n	800321a <String2Int+0x22>
				((sign == -1) && (returnValue >= 32769)))
 800323c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003240:	ddeb      	ble.n	800321a <String2Int+0x22>
			return 0;
 8003242:	2000      	movs	r0, #0
 8003244:	e003      	b.n	800324e <String2Int+0x56>
	}
	*outputInt = (int16_t)(sign * returnValue);
 8003246:	fb15 f303 	smulbb	r3, r5, r3
 800324a:	800b      	strh	r3, [r1, #0]
	return 1;
 800324c:	2001      	movs	r0, #1
}
 800324e:	bc30      	pop	{r4, r5}
 8003250:	4770      	bx	lr
		return 0;
 8003252:	2000      	movs	r0, #0
 8003254:	4770      	bx	lr
	...

08003258 <Int2String>:
{
	int numWritten = 0;
	int writePosition = 0;
	uint8_t digits = 0;

	if (maxL == 0)
 8003258:	2a00      	cmp	r2, #0
 800325a:	d044      	beq.n	80032e6 <Int2String+0x8e>
{
 800325c:	b470      	push	{r4, r5, r6}
 800325e:	4614      	mov	r4, r2
		return 0;

	if (value < 0)
 8003260:	2900      	cmp	r1, #0
 8003262:	db13      	blt.n	800328c <Int2String+0x34>
	int numWritten = 0;
 8003264:	2500      	movs	r5, #0
		maxL--;
		value = -value;
		numWritten = 1;
	}

	if (value < 10)
 8003266:	2909      	cmp	r1, #9
 8003268:	dd18      	ble.n	800329c <Int2String+0x44>
		digits = 1;
	else if (value < 100)
 800326a:	2963      	cmp	r1, #99	; 0x63
 800326c:	dd1b      	ble.n	80032a6 <Int2String+0x4e>
		digits = 2;
	else if (value < 1000)
 800326e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8003272:	db1a      	blt.n	80032aa <Int2String+0x52>
		digits = 3;
	else if (value < 10000)
 8003274:	f242 730f 	movw	r3, #9999	; 0x270f
 8003278:	4299      	cmp	r1, r3
 800327a:	dd18      	ble.n	80032ae <Int2String+0x56>
		digits = 4;
	else if (value < 100000)
 800327c:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <Int2String+0x94>)
 800327e:	4299      	cmp	r1, r3
 8003280:	dd17      	ble.n	80032b2 <Int2String+0x5a>
		digits = 5;
	else if (value < 1000000)
 8003282:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <Int2String+0x98>)
 8003284:	4299      	cmp	r1, r3
 8003286:	dc16      	bgt.n	80032b6 <Int2String+0x5e>
		digits = 6;
 8003288:	2306      	movs	r3, #6
 800328a:	e008      	b.n	800329e <Int2String+0x46>
		outputString[0] = '-';
 800328c:	232d      	movs	r3, #45	; 0x2d
 800328e:	f800 3b01 	strb.w	r3, [r0], #1
		maxL--;
 8003292:	1e54      	subs	r4, r2, #1
 8003294:	b2e4      	uxtb	r4, r4
		value = -value;
 8003296:	4249      	negs	r1, r1
		numWritten = 1;
 8003298:	2501      	movs	r5, #1
 800329a:	e7e4      	b.n	8003266 <Int2String+0xe>
		digits = 1;
 800329c:	2301      	movs	r3, #1
	else
		digits = 7;

	if (digits > maxL)
 800329e:	429c      	cmp	r4, r3
 80032a0:	d21c      	bcs.n	80032dc <Int2String+0x84>
		return 0; // error - not enough space in output string!
 80032a2:	2000      	movs	r0, #0
 80032a4:	e01d      	b.n	80032e2 <Int2String+0x8a>
		digits = 2;
 80032a6:	2302      	movs	r3, #2
 80032a8:	e7f9      	b.n	800329e <Int2String+0x46>
		digits = 3;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e7f7      	b.n	800329e <Int2String+0x46>
		digits = 4;
 80032ae:	2304      	movs	r3, #4
 80032b0:	e7f5      	b.n	800329e <Int2String+0x46>
		digits = 5;
 80032b2:	2305      	movs	r3, #5
 80032b4:	e7f3      	b.n	800329e <Int2String+0x46>
		digits = 7;
 80032b6:	2307      	movs	r3, #7
 80032b8:	e7f1      	b.n	800329e <Int2String+0x46>

	writePosition = digits;
	while (writePosition > 0)
	{
		outputString[writePosition-1] = (char) ((value % 10) + 48);
 80032ba:	1e5a      	subs	r2, r3, #1
 80032bc:	4c0d      	ldr	r4, [pc, #52]	; (80032f4 <Int2String+0x9c>)
 80032be:	fb84 3401 	smull	r3, r4, r4, r1
 80032c2:	17cb      	asrs	r3, r1, #31
 80032c4:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
 80032c8:	461e      	mov	r6, r3
 80032ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80032ce:	005c      	lsls	r4, r3, #1
 80032d0:	1b0b      	subs	r3, r1, r4
 80032d2:	3330      	adds	r3, #48	; 0x30
 80032d4:	5483      	strb	r3, [r0, r2]
		value /= 10;
 80032d6:	4631      	mov	r1, r6
		writePosition--;
 80032d8:	4613      	mov	r3, r2
		numWritten++;
 80032da:	3501      	adds	r5, #1
	while (writePosition > 0)
 80032dc:	2b00      	cmp	r3, #0
 80032de:	dcec      	bgt.n	80032ba <Int2String+0x62>
	}

	return numWritten;
 80032e0:	4628      	mov	r0, r5
}
 80032e2:	bc70      	pop	{r4, r5, r6}
 80032e4:	4770      	bx	lr
		return 0;
 80032e6:	2000      	movs	r0, #0
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	0001869f 	.word	0x0001869f
 80032f0:	000f423f 	.word	0x000f423f
 80032f4:	66666667 	.word	0x66666667

080032f8 <writeToPins>:

void writeToPins(uint8_t segments[], uint8_t pins[], int segmentsL)
{
 80032f8:	b570      	push	{r4, r5, r6, lr}
 80032fa:	4605      	mov	r5, r0
 80032fc:	460c      	mov	r4, r1

	if(in == segmentsL)
 80032fe:	4b89      	ldr	r3, [pc, #548]	; (8003524 <writeToPins+0x22c>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	4293      	cmp	r3, r2
 8003304:	d00b      	beq.n	800331e <writeToPins+0x26>
	{
		in = 0;
	}
	else
	{
		in++;
 8003306:	3301      	adds	r3, #1
 8003308:	4a86      	ldr	r2, [pc, #536]	; (8003524 <writeToPins+0x22c>)
 800330a:	7013      	strb	r3, [r2, #0]
	}

	switch(in)
 800330c:	4b85      	ldr	r3, [pc, #532]	; (8003524 <writeToPins+0x22c>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	3b01      	subs	r3, #1
 8003312:	2b03      	cmp	r3, #3
 8003314:	d830      	bhi.n	8003378 <writeToPins+0x80>
 8003316:	e8df f003 	tbb	[pc, r3]
 800331a:	8706      	.short	0x8706
 800331c:	dbb1      	.short	0xdbb1
		in = 0;
 800331e:	2200      	movs	r2, #0
 8003320:	4b80      	ldr	r3, [pc, #512]	; (8003524 <writeToPins+0x22c>)
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e7f2      	b.n	800330c <writeToPins+0x14>
	{
	case 1 :
	{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segments[0] >> 0) & 0b00000001)); //1
 8003326:	782a      	ldrb	r2, [r5, #0]
 8003328:	f082 0201 	eor.w	r2, r2, #1
 800332c:	4e7e      	ldr	r6, [pc, #504]	; (8003528 <writeToPins+0x230>)
 800332e:	f002 0201 	and.w	r2, r2, #1
 8003332:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003336:	4630      	mov	r0, r6
 8003338:	f7fd fd60 	bl	8000dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segments[0] >> 1) & 0b00000001)); //2
 800333c:	782a      	ldrb	r2, [r5, #0]
 800333e:	0852      	lsrs	r2, r2, #1
 8003340:	f082 0201 	eor.w	r2, r2, #1
 8003344:	f002 0201 	and.w	r2, r2, #1
 8003348:	2110      	movs	r1, #16
 800334a:	4630      	mov	r0, r6
 800334c:	f7fd fd56 	bl	8000dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segments[0] >> 2) & 0b00000001)); //3
 8003350:	782a      	ldrb	r2, [r5, #0]
 8003352:	0892      	lsrs	r2, r2, #2
 8003354:	f082 0201 	eor.w	r2, r2, #1
 8003358:	f002 0201 	and.w	r2, r2, #1
 800335c:	2120      	movs	r1, #32
 800335e:	4630      	mov	r0, r6
 8003360:	f7fd fd4c 	bl	8000dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segments[0] >> 3) & 0b00000001)); //4
 8003364:	782a      	ldrb	r2, [r5, #0]
 8003366:	08d2      	lsrs	r2, r2, #3
 8003368:	f082 0201 	eor.w	r2, r2, #1
 800336c:	f002 0201 	and.w	r2, r2, #1
 8003370:	2108      	movs	r1, #8
 8003372:	4630      	mov	r0, r6
 8003374:	f7fd fd42 	bl	8000dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segments[3] >> 3) & 0b00000001)); //4
	}
	break;
	}

	i = (int)(in - 1);
 8003378:	4b6a      	ldr	r3, [pc, #424]	; (8003524 <writeToPins+0x22c>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	3b01      	subs	r3, #1
 800337e:	4d6b      	ldr	r5, [pc, #428]	; (800352c <writeToPins+0x234>)
 8003380:	602b      	str	r3, [r5, #0]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, (~(pins[i] >> 0) & 0b00000001)); //a
 8003382:	5ce2      	ldrb	r2, [r4, r3]
 8003384:	f082 0201 	eor.w	r2, r2, #1
 8003388:	f002 0201 	and.w	r2, r2, #1
 800338c:	2120      	movs	r1, #32
 800338e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003392:	f7fd fd33 	bl	8000dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6, (~(pins[i] >> 1) & 0b00000001)); //b
 8003396:	682b      	ldr	r3, [r5, #0]
 8003398:	5ce2      	ldrb	r2, [r4, r3]
 800339a:	0852      	lsrs	r2, r2, #1
 800339c:	f082 0201 	eor.w	r2, r2, #1
 80033a0:	f002 0201 	and.w	r2, r2, #1
 80033a4:	2140      	movs	r1, #64	; 0x40
 80033a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033aa:	f7fd fd27 	bl	8000dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, (~(pins[i] >> 2) & 0b00000001)); //c
 80033ae:	682b      	ldr	r3, [r5, #0]
 80033b0:	5ce2      	ldrb	r2, [r4, r3]
 80033b2:	0892      	lsrs	r2, r2, #2
 80033b4:	f082 0201 	eor.w	r2, r2, #1
 80033b8:	f002 0201 	and.w	r2, r2, #1
 80033bc:	2180      	movs	r1, #128	; 0x80
 80033be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033c2:	f7fd fd1b 	bl	8000dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6, (~(pins[i] >> 3) & 0b00000001)); //d
 80033c6:	682b      	ldr	r3, [r5, #0]
 80033c8:	5ce2      	ldrb	r2, [r4, r3]
 80033ca:	08d2      	lsrs	r2, r2, #3
 80033cc:	f082 0201 	eor.w	r2, r2, #1
 80033d0:	f002 0201 	and.w	r2, r2, #1
 80033d4:	2140      	movs	r1, #64	; 0x40
 80033d6:	4854      	ldr	r0, [pc, #336]	; (8003528 <writeToPins+0x230>)
 80033d8:	f7fd fd10 	bl	8000dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7, (~(pins[i] >> 4) & 0b00000001)); //e
 80033dc:	682b      	ldr	r3, [r5, #0]
 80033de:	5ce2      	ldrb	r2, [r4, r3]
 80033e0:	0912      	lsrs	r2, r2, #4
 80033e2:	f082 0201 	eor.w	r2, r2, #1
 80033e6:	f002 0201 	and.w	r2, r2, #1
 80033ea:	2180      	movs	r1, #128	; 0x80
 80033ec:	4850      	ldr	r0, [pc, #320]	; (8003530 <writeToPins+0x238>)
 80033ee:	f7fd fd05 	bl	8000dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, (~(pins[i] >> 5) & 0b00000001)); //f
 80033f2:	682b      	ldr	r3, [r5, #0]
 80033f4:	5ce2      	ldrb	r2, [r4, r3]
 80033f6:	0952      	lsrs	r2, r2, #5
 80033f8:	f082 0201 	eor.w	r2, r2, #1
 80033fc:	f002 0201 	and.w	r2, r2, #1
 8003400:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003408:	f7fd fcf8 	bl	8000dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, (~(pins[i] >> 6) & 0b00000001)); //g
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	5ce2      	ldrb	r2, [r4, r3]
 8003410:	0992      	lsrs	r2, r2, #6
 8003412:	f082 0201 	eor.w	r2, r2, #1
 8003416:	f002 0201 	and.w	r2, r2, #1
 800341a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800341e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003422:	f7fd fceb 	bl	8000dfc <HAL_GPIO_WritePin>
 8003426:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segments[1] >> 0) & 0b00000001)); //1
 8003428:	786a      	ldrb	r2, [r5, #1]
 800342a:	f082 0201 	eor.w	r2, r2, #1
 800342e:	4e3e      	ldr	r6, [pc, #248]	; (8003528 <writeToPins+0x230>)
 8003430:	f002 0201 	and.w	r2, r2, #1
 8003434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003438:	4630      	mov	r0, r6
 800343a:	f7fd fcdf 	bl	8000dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segments[1] >> 1) & 0b00000001)); //2
 800343e:	786a      	ldrb	r2, [r5, #1]
 8003440:	0852      	lsrs	r2, r2, #1
 8003442:	f082 0201 	eor.w	r2, r2, #1
 8003446:	f002 0201 	and.w	r2, r2, #1
 800344a:	2110      	movs	r1, #16
 800344c:	4630      	mov	r0, r6
 800344e:	f7fd fcd5 	bl	8000dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segments[1] >> 2) & 0b00000001)); //3
 8003452:	786a      	ldrb	r2, [r5, #1]
 8003454:	0892      	lsrs	r2, r2, #2
 8003456:	f082 0201 	eor.w	r2, r2, #1
 800345a:	f002 0201 	and.w	r2, r2, #1
 800345e:	2120      	movs	r1, #32
 8003460:	4630      	mov	r0, r6
 8003462:	f7fd fccb 	bl	8000dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segments[1] >> 3) & 0b00000001)); //4
 8003466:	786a      	ldrb	r2, [r5, #1]
 8003468:	08d2      	lsrs	r2, r2, #3
 800346a:	f082 0201 	eor.w	r2, r2, #1
 800346e:	f002 0201 	and.w	r2, r2, #1
 8003472:	2108      	movs	r1, #8
 8003474:	4630      	mov	r0, r6
 8003476:	f7fd fcc1 	bl	8000dfc <HAL_GPIO_WritePin>
	break;
 800347a:	e77d      	b.n	8003378 <writeToPins+0x80>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segments[2] >> 0) & 0b00000001)); //1
 800347c:	78aa      	ldrb	r2, [r5, #2]
 800347e:	f082 0201 	eor.w	r2, r2, #1
 8003482:	4e29      	ldr	r6, [pc, #164]	; (8003528 <writeToPins+0x230>)
 8003484:	f002 0201 	and.w	r2, r2, #1
 8003488:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800348c:	4630      	mov	r0, r6
 800348e:	f7fd fcb5 	bl	8000dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segments[2] >> 1) & 0b00000001)); //2
 8003492:	78aa      	ldrb	r2, [r5, #2]
 8003494:	0852      	lsrs	r2, r2, #1
 8003496:	f082 0201 	eor.w	r2, r2, #1
 800349a:	f002 0201 	and.w	r2, r2, #1
 800349e:	2110      	movs	r1, #16
 80034a0:	4630      	mov	r0, r6
 80034a2:	f7fd fcab 	bl	8000dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segments[2] >> 2) & 0b00000001)); //3
 80034a6:	78aa      	ldrb	r2, [r5, #2]
 80034a8:	0892      	lsrs	r2, r2, #2
 80034aa:	f082 0201 	eor.w	r2, r2, #1
 80034ae:	f002 0201 	and.w	r2, r2, #1
 80034b2:	2120      	movs	r1, #32
 80034b4:	4630      	mov	r0, r6
 80034b6:	f7fd fca1 	bl	8000dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segments[2] >> 3) & 0b00000001)); //4
 80034ba:	78aa      	ldrb	r2, [r5, #2]
 80034bc:	08d2      	lsrs	r2, r2, #3
 80034be:	f082 0201 	eor.w	r2, r2, #1
 80034c2:	f002 0201 	and.w	r2, r2, #1
 80034c6:	2108      	movs	r1, #8
 80034c8:	4630      	mov	r0, r6
 80034ca:	f7fd fc97 	bl	8000dfc <HAL_GPIO_WritePin>
	break;
 80034ce:	e753      	b.n	8003378 <writeToPins+0x80>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,(~(segments[3] >> 0) & 0b00000001)); //1
 80034d0:	78ea      	ldrb	r2, [r5, #3]
 80034d2:	f082 0201 	eor.w	r2, r2, #1
 80034d6:	4e14      	ldr	r6, [pc, #80]	; (8003528 <writeToPins+0x230>)
 80034d8:	f002 0201 	and.w	r2, r2, #1
 80034dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034e0:	4630      	mov	r0, r6
 80034e2:	f7fd fc8b 	bl	8000dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,(~(segments[3] >> 1) & 0b00000001)); //2
 80034e6:	78ea      	ldrb	r2, [r5, #3]
 80034e8:	0852      	lsrs	r2, r2, #1
 80034ea:	f082 0201 	eor.w	r2, r2, #1
 80034ee:	f002 0201 	and.w	r2, r2, #1
 80034f2:	2110      	movs	r1, #16
 80034f4:	4630      	mov	r0, r6
 80034f6:	f7fd fc81 	bl	8000dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,(~(segments[3] >> 2) & 0b00000001)); //3
 80034fa:	78ea      	ldrb	r2, [r5, #3]
 80034fc:	0892      	lsrs	r2, r2, #2
 80034fe:	f082 0201 	eor.w	r2, r2, #1
 8003502:	f002 0201 	and.w	r2, r2, #1
 8003506:	2120      	movs	r1, #32
 8003508:	4630      	mov	r0, r6
 800350a:	f7fd fc77 	bl	8000dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,(~(segments[3] >> 3) & 0b00000001)); //4
 800350e:	78ea      	ldrb	r2, [r5, #3]
 8003510:	08d2      	lsrs	r2, r2, #3
 8003512:	f082 0201 	eor.w	r2, r2, #1
 8003516:	f002 0201 	and.w	r2, r2, #1
 800351a:	2108      	movs	r1, #8
 800351c:	4630      	mov	r0, r6
 800351e:	f7fd fc6d 	bl	8000dfc <HAL_GPIO_WritePin>
	break;
 8003522:	e729      	b.n	8003378 <writeToPins+0x80>
 8003524:	20000034 	.word	0x20000034
 8003528:	48000400 	.word	0x48000400
 800352c:	20000040 	.word	0x20000040
 8003530:	48000800 	.word	0x48000800

08003534 <HAL_UART_RxCpltCallback>:
// This function will execute whenever a character is received from the UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
	// the interrupt handler will automatically put the received character in the uartRXChar variable (no need to write any code for that).
	// so all we do it set flag to indicate character was received, and then process the received character further in the main loop
	uartRxFlag = true;
 8003534:	2201      	movs	r2, #1
 8003536:	4b01      	ldr	r3, [pc, #4]	; (800353c <HAL_UART_RxCpltCallback+0x8>)
 8003538:	701a      	strb	r2, [r3, #0]
 800353a:	4770      	bx	lr
 800353c:	20000049 	.word	0x20000049

08003540 <HAL_TIM_PeriodElapsedCallback>:
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //every 250 ns
{
	if (htim == &htim2)
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003542:	4283      	cmp	r3, r0
 8003544:	d000      	beq.n	8003548 <HAL_TIM_PeriodElapsedCallback+0x8>
 8003546:	4770      	bx	lr
		adcFlag = true;
 8003548:	2201      	movs	r2, #1
 800354a:	4b02      	ldr	r3, [pc, #8]	; (8003554 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800354c:	701a      	strb	r2, [r3, #0]

}
 800354e:	e7fa      	b.n	8003546 <HAL_TIM_PeriodElapsedCallback+0x6>
 8003550:	20000180 	.word	0x20000180
 8003554:	2000004c 	.word	0x2000004c

08003558 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	flowHighFlag = 1;
 8003558:	2301      	movs	r3, #1
 800355a:	4a02      	ldr	r2, [pc, #8]	; (8003564 <HAL_GPIO_EXTI_Callback+0xc>)
 800355c:	7013      	strb	r3, [r2, #0]
	firstHighFlag = 1;
 800355e:	4a02      	ldr	r2, [pc, #8]	; (8003568 <HAL_GPIO_EXTI_Callback+0x10>)
 8003560:	7013      	strb	r3, [r2, #0]
 8003562:	4770      	bx	lr
 8003564:	20000048 	.word	0x20000048
 8003568:	20000035 	.word	0x20000035

0800356c <HAL_RTCEx_WakeUpTimerEventCallback>:
}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
	rtcSecFlag = 1;
 800356c:	2201      	movs	r2, #1
 800356e:	4b01      	ldr	r3, [pc, #4]	; (8003574 <HAL_RTCEx_WakeUpTimerEventCallback+0x8>)
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	4770      	bx	lr
 8003574:	2000004a 	.word	0x2000004a

08003578 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
static void MX_GPIO_Init(void)
{
 8003578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800357c:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800357e:	4b56      	ldr	r3, [pc, #344]	; (80036d8 <MX_GPIO_Init+0x160>)
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003586:	615a      	str	r2, [r3, #20]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800358e:	9201      	str	r2, [sp, #4]
 8003590:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003592:	695a      	ldr	r2, [r3, #20]
 8003594:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003598:	615a      	str	r2, [r3, #20]
 800359a:	695a      	ldr	r2, [r3, #20]
 800359c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80035a0:	9202      	str	r2, [sp, #8]
 80035a2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80035aa:	615a      	str	r2, [r3, #20]
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80035b2:	9203      	str	r2, [sp, #12]
 80035b4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b6:	695a      	ldr	r2, [r3, #20]
 80035b8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80035bc:	615a      	str	r2, [r3, #20]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c4:	9304      	str	r3, [sp, #16]
 80035c6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_SET);
 80035c8:	2201      	movs	r2, #1
 80035ca:	2113      	movs	r1, #19
 80035cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035d0:	f7fd fc14 	bl	8000dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 80035d4:	2200      	movs	r2, #0
 80035d6:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80035da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035de:	f7fd fc0d 	bl	8000dfc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80035e2:	4f3e      	ldr	r7, [pc, #248]	; (80036dc <MX_GPIO_Init+0x164>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80035ea:	4638      	mov	r0, r7
 80035ec:	f7fd fc06 	bl	8000dfc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 80035f0:	4d3b      	ldr	r5, [pc, #236]	; (80036e0 <MX_GPIO_Init+0x168>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 80035f8:	4628      	mov	r0, r5
 80035fa:	f7fd fbff 	bl	8000dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80035fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003602:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003604:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <MX_GPIO_Init+0x16c>)
 8003606:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	2400      	movs	r4, #0
 800360a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800360c:	a905      	add	r1, sp, #20
 800360e:	4628      	mov	r0, r5
 8003610:	f7fd fb2a 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003614:	f04f 0803 	mov.w	r8, #3
 8003618:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800361c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003620:	a905      	add	r1, sp, #20
 8003622:	4628      	mov	r0, r5
 8003624:	f7fd fb20 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8003628:	2313      	movs	r3, #19
 800362a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800362c:	2311      	movs	r3, #17
 800362e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003630:	2601      	movs	r6, #1
 8003632:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003634:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003636:	a905      	add	r1, sp, #20
 8003638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800363c:	f7fd fb14 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003640:	230c      	movs	r3, #12
 8003642:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003644:	2302      	movs	r3, #2
 8003646:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800364a:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800364e:	2307      	movs	r3, #7
 8003650:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003652:	a905      	add	r1, sp, #20
 8003654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003658:	f7fd fb06 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 PA8 
                           PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 800365c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8003660:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003662:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003666:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003668:	a905      	add	r1, sp, #20
 800366a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800366e:	f7fd fafb 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8003672:	f44f 638f 	mov.w	r3, #1144	; 0x478
 8003676:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003678:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800367e:	a905      	add	r1, sp, #20
 8003680:	4638      	mov	r0, r7
 8003682:	f7fd faf1 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8003686:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800368a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800368c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003690:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003692:	a905      	add	r1, sp, #20
 8003694:	4628      	mov	r0, r5
 8003696:	f7fd fae7 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800369a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800369e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <MX_GPIO_Init+0x170>)
 80036a2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a6:	a905      	add	r1, sp, #20
 80036a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ac:	f7fd fadc 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036b4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036b6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ba:	a905      	add	r1, sp, #20
 80036bc:	4638      	mov	r0, r7
 80036be:	f7fd fad3 	bl	8000c68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80036c2:	4622      	mov	r2, r4
 80036c4:	4621      	mov	r1, r4
 80036c6:	2028      	movs	r0, #40	; 0x28
 80036c8:	f7fd fa40 	bl	8000b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80036cc:	2028      	movs	r0, #40	; 0x28
 80036ce:	f7fd fa6f 	bl	8000bb0 <HAL_NVIC_EnableIRQ>

}
 80036d2:	b00a      	add	sp, #40	; 0x28
 80036d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036d8:	40021000 	.word	0x40021000
 80036dc:	48000400 	.word	0x48000400
 80036e0:	48000800 	.word	0x48000800
 80036e4:	10210000 	.word	0x10210000
 80036e8:	10310000 	.word	0x10310000

080036ec <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80036ec:	e7fe      	b.n	80036ec <_Error_Handler>
	...

080036f0 <MX_USART1_UART_Init>:
{
 80036f0:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80036f2:	480c      	ldr	r0, [pc, #48]	; (8003724 <MX_USART1_UART_Init+0x34>)
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <MX_USART1_UART_Init+0x38>)
 80036f6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80036f8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80036fc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036fe:	2300      	movs	r3, #0
 8003700:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003702:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003704:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003706:	220c      	movs	r2, #12
 8003708:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800370a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800370c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800370e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003710:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003712:	f7ff fbb0 	bl	8002e76 <HAL_UART_Init>
 8003716:	b900      	cbnz	r0, 800371a <MX_USART1_UART_Init+0x2a>
 8003718:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 800371a:	f44f 71c1 	mov.w	r1, #386	; 0x182
 800371e:	4803      	ldr	r0, [pc, #12]	; (800372c <MX_USART1_UART_Init+0x3c>)
 8003720:	f7ff ffe4 	bl	80036ec <_Error_Handler>
 8003724:	200000f0 	.word	0x200000f0
 8003728:	40013800 	.word	0x40013800
 800372c:	0800482c 	.word	0x0800482c

08003730 <MX_ADC1_Init>:
{
 8003730:	b500      	push	{lr}
 8003732:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Instance = ADC1;
 8003734:	481d      	ldr	r0, [pc, #116]	; (80037ac <MX_ADC1_Init+0x7c>)
 8003736:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800373a:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800373c:	2300      	movs	r3, #0
 800373e:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003740:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003742:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003744:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003746:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003748:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800374a:	2201      	movs	r2, #1
 800374c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800374e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003750:	6202      	str	r2, [r0, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003752:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003754:	2204      	movs	r2, #4
 8003756:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003758:	6183      	str	r3, [r0, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800375a:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800375c:	f7fc fdf0 	bl	8000340 <HAL_ADC_Init>
 8003760:	b9c0      	cbnz	r0, 8003794 <MX_ADC1_Init+0x64>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003762:	a90a      	add	r1, sp, #40	; 0x28
 8003764:	2300      	movs	r3, #0
 8003766:	f841 3d0c 	str.w	r3, [r1, #-12]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800376a:	4810      	ldr	r0, [pc, #64]	; (80037ac <MX_ADC1_Init+0x7c>)
 800376c:	f7fd f93e 	bl	80009ec <HAL_ADCEx_MultiModeConfigChannel>
 8003770:	b9a0      	cbnz	r0, 800379c <MX_ADC1_Init+0x6c>
  sConfig.Channel = ADC_CHANNEL_9;
 8003772:	2309      	movs	r3, #9
 8003774:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003776:	2301      	movs	r3, #1
 8003778:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800377a:	2300      	movs	r3, #0
 800377c:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800377e:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003780:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 8003782:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003784:	a901      	add	r1, sp, #4
 8003786:	4809      	ldr	r0, [pc, #36]	; (80037ac <MX_ADC1_Init+0x7c>)
 8003788:	f7fc ff6e 	bl	8000668 <HAL_ADC_ConfigChannel>
 800378c:	b950      	cbnz	r0, 80037a4 <MX_ADC1_Init+0x74>
}
 800378e:	b00b      	add	sp, #44	; 0x2c
 8003790:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8003794:	21dd      	movs	r1, #221	; 0xdd
 8003796:	4806      	ldr	r0, [pc, #24]	; (80037b0 <MX_ADC1_Init+0x80>)
 8003798:	f7ff ffa8 	bl	80036ec <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800379c:	21e5      	movs	r1, #229	; 0xe5
 800379e:	4804      	ldr	r0, [pc, #16]	; (80037b0 <MX_ADC1_Init+0x80>)
 80037a0:	f7ff ffa4 	bl	80036ec <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80037a4:	21f2      	movs	r1, #242	; 0xf2
 80037a6:	4802      	ldr	r0, [pc, #8]	; (80037b0 <MX_ADC1_Init+0x80>)
 80037a8:	f7ff ffa0 	bl	80036ec <_Error_Handler>
 80037ac:	2000009c 	.word	0x2000009c
 80037b0:	0800482c 	.word	0x0800482c

080037b4 <MX_I2C1_Init>:
{
 80037b4:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80037b6:	4815      	ldr	r0, [pc, #84]	; (800380c <MX_I2C1_Init+0x58>)
 80037b8:	4b15      	ldr	r3, [pc, #84]	; (8003810 <MX_I2C1_Init+0x5c>)
 80037ba:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80037bc:	4b15      	ldr	r3, [pc, #84]	; (8003814 <MX_I2C1_Init+0x60>)
 80037be:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037c4:	2201      	movs	r2, #1
 80037c6:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037c8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80037ca:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80037cc:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037ce:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037d0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037d2:	f7fd fb77 	bl	8000ec4 <HAL_I2C_Init>
 80037d6:	b950      	cbnz	r0, 80037ee <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037d8:	2100      	movs	r1, #0
 80037da:	480c      	ldr	r0, [pc, #48]	; (800380c <MX_I2C1_Init+0x58>)
 80037dc:	f7fd fe97 	bl	800150e <HAL_I2CEx_ConfigAnalogFilter>
 80037e0:	b950      	cbnz	r0, 80037f8 <MX_I2C1_Init+0x44>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80037e2:	2100      	movs	r1, #0
 80037e4:	4809      	ldr	r0, [pc, #36]	; (800380c <MX_I2C1_Init+0x58>)
 80037e6:	f7fd fec0 	bl	800156a <HAL_I2CEx_ConfigDigitalFilter>
 80037ea:	b950      	cbnz	r0, 8003802 <MX_I2C1_Init+0x4e>
 80037ec:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 80037ee:	f44f 7183 	mov.w	r1, #262	; 0x106
 80037f2:	4809      	ldr	r0, [pc, #36]	; (8003818 <MX_I2C1_Init+0x64>)
 80037f4:	f7ff ff7a 	bl	80036ec <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80037f8:	f240 110d 	movw	r1, #269	; 0x10d
 80037fc:	4806      	ldr	r0, [pc, #24]	; (8003818 <MX_I2C1_Init+0x64>)
 80037fe:	f7ff ff75 	bl	80036ec <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003802:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003806:	4804      	ldr	r0, [pc, #16]	; (8003818 <MX_I2C1_Init+0x64>)
 8003808:	f7ff ff70 	bl	80036ec <_Error_Handler>
 800380c:	20000050 	.word	0x20000050
 8003810:	40005400 	.word	0x40005400
 8003814:	2000090e 	.word	0x2000090e
 8003818:	0800482c 	.word	0x0800482c

0800381c <MX_RTC_Init>:
{
 800381c:	b500      	push	{lr}
 800381e:	b087      	sub	sp, #28
  hrtc.Instance = RTC;
 8003820:	482b      	ldr	r0, [pc, #172]	; (80038d0 <MX_RTC_Init+0xb4>)
 8003822:	4b2c      	ldr	r3, [pc, #176]	; (80038d4 <MX_RTC_Init+0xb8>)
 8003824:	6003      	str	r3, [r0, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8003826:	2100      	movs	r1, #0
 8003828:	f7fe fe77 	bl	800251a <HAL_RTCEx_BKUPRead>
 800382c:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8003830:	4298      	cmp	r0, r3
 8003832:	d036      	beq.n	80038a2 <MX_RTC_Init+0x86>
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003834:	4826      	ldr	r0, [pc, #152]	; (80038d0 <MX_RTC_Init+0xb4>)
 8003836:	2300      	movs	r3, #0
 8003838:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800383a:	227f      	movs	r2, #127	; 0x7f
 800383c:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800383e:	22ff      	movs	r2, #255	; 0xff
 8003840:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003842:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003844:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003846:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003848:	f7fe fc23 	bl	8002092 <HAL_RTC_Init>
 800384c:	bb60      	cbnz	r0, 80038a8 <MX_RTC_Init+0x8c>
  sTime.Hours = 0x0;
 800384e:	2300      	movs	r3, #0
 8003850:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8003854:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8003858:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800385c:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800385e:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003860:	2201      	movs	r2, #1
 8003862:	a901      	add	r1, sp, #4
 8003864:	481a      	ldr	r0, [pc, #104]	; (80038d0 <MX_RTC_Init+0xb4>)
 8003866:	f7fe fc81 	bl	800216c <HAL_RTC_SetTime>
 800386a:	bb10      	cbnz	r0, 80038b2 <MX_RTC_Init+0x96>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800386c:	2201      	movs	r2, #1
 800386e:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8003872:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8003876:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 800387a:	2300      	movs	r3, #0
 800387c:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003880:	4669      	mov	r1, sp
 8003882:	4813      	ldr	r0, [pc, #76]	; (80038d0 <MX_RTC_Init+0xb4>)
 8003884:	f7fe fcf1 	bl	800226a <HAL_RTC_SetDate>
 8003888:	b9c0      	cbnz	r0, 80038bc <MX_RTC_Init+0xa0>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800388a:	2204      	movs	r2, #4
 800388c:	2100      	movs	r1, #0
 800388e:	4810      	ldr	r0, [pc, #64]	; (80038d0 <MX_RTC_Init+0xb4>)
 8003890:	f7fe fdae 	bl	80023f0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003894:	b9b8      	cbnz	r0, 80038c6 <MX_RTC_Init+0xaa>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8003896:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800389a:	2100      	movs	r1, #0
 800389c:	480c      	ldr	r0, [pc, #48]	; (80038d0 <MX_RTC_Init+0xb4>)
 800389e:	f7fe fe37 	bl	8002510 <HAL_RTCEx_BKUPWrite>
}
 80038a2:	b007      	add	sp, #28
 80038a4:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80038a8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80038ac:	480a      	ldr	r0, [pc, #40]	; (80038d8 <MX_RTC_Init+0xbc>)
 80038ae:	f7ff ff1d 	bl	80036ec <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80038b2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80038b6:	4808      	ldr	r0, [pc, #32]	; (80038d8 <MX_RTC_Init+0xbc>)
 80038b8:	f7ff ff18 	bl	80036ec <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80038bc:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80038c0:	4805      	ldr	r0, [pc, #20]	; (80038d8 <MX_RTC_Init+0xbc>)
 80038c2:	f7ff ff13 	bl	80036ec <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80038c6:	f240 1149 	movw	r1, #329	; 0x149
 80038ca:	4803      	ldr	r0, [pc, #12]	; (80038d8 <MX_RTC_Init+0xbc>)
 80038cc:	f7ff ff0e 	bl	80036ec <_Error_Handler>
 80038d0:	20000160 	.word	0x20000160
 80038d4:	40002800 	.word	0x40002800
 80038d8:	0800482c 	.word	0x0800482c

080038dc <MX_TIM2_Init>:
{
 80038dc:	b500      	push	{lr}
 80038de:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 80038e0:	4819      	ldr	r0, [pc, #100]	; (8003948 <MX_TIM2_Init+0x6c>)
 80038e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038e6:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80038ec:	2210      	movs	r2, #16
 80038ee:	6082      	str	r2, [r0, #8]
  htim2.Init.Period = 16000;
 80038f0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80038f4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038f6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038fc:	f7fe ff5c 	bl	80027b8 <HAL_TIM_Base_Init>
 8003900:	b998      	cbnz	r0, 800392a <MX_TIM2_Init+0x4e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003902:	a908      	add	r1, sp, #32
 8003904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003908:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800390c:	480e      	ldr	r0, [pc, #56]	; (8003948 <MX_TIM2_Init+0x6c>)
 800390e:	f7fe ff79 	bl	8002804 <HAL_TIM_ConfigClockSource>
 8003912:	b978      	cbnz	r0, 8003934 <MX_TIM2_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003914:	2300      	movs	r3, #0
 8003916:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003918:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800391a:	a901      	add	r1, sp, #4
 800391c:	480a      	ldr	r0, [pc, #40]	; (8003948 <MX_TIM2_Init+0x6c>)
 800391e:	f7fe fffd 	bl	800291c <HAL_TIMEx_MasterConfigSynchronization>
 8003922:	b960      	cbnz	r0, 800393e <MX_TIM2_Init+0x62>
}
 8003924:	b009      	add	sp, #36	; 0x24
 8003926:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800392a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800392e:	4807      	ldr	r0, [pc, #28]	; (800394c <MX_TIM2_Init+0x70>)
 8003930:	f7ff fedc 	bl	80036ec <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8003934:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8003938:	4804      	ldr	r0, [pc, #16]	; (800394c <MX_TIM2_Init+0x70>)
 800393a:	f7ff fed7 	bl	80036ec <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800393e:	f240 116d 	movw	r1, #365	; 0x16d
 8003942:	4802      	ldr	r0, [pc, #8]	; (800394c <MX_TIM2_Init+0x70>)
 8003944:	f7ff fed2 	bl	80036ec <_Error_Handler>
 8003948:	20000180 	.word	0x20000180
 800394c:	0800482c 	.word	0x0800482c

08003950 <SystemClock_Config>:
{
 8003950:	b500      	push	{lr}
 8003952:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003954:	230a      	movs	r3, #10
 8003956:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003958:	2301      	movs	r3, #1
 800395a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800395c:	2210      	movs	r2, #16
 800395e:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003960:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003962:	2302      	movs	r3, #2
 8003964:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003966:	2300      	movs	r3, #0
 8003968:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800396a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800396e:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003970:	a80c      	add	r0, sp, #48	; 0x30
 8003972:	f7fd fe27 	bl	80015c4 <HAL_RCC_OscConfig>
 8003976:	bb80      	cbnz	r0, 80039da <SystemClock_Config+0x8a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003978:	230f      	movs	r3, #15
 800397a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800397c:	2102      	movs	r1, #2
 800397e:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003980:	2300      	movs	r3, #0
 8003982:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003988:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800398a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800398c:	a807      	add	r0, sp, #28
 800398e:	f7fe f957 	bl	8001c40 <HAL_RCC_ClockConfig>
 8003992:	bb30      	cbnz	r0, 80039e2 <SystemClock_Config+0x92>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8003994:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <SystemClock_Config+0xa4>)
 8003996:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003998:	2300      	movs	r3, #0
 800399a:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800399c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039a0:	9204      	str	r2, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80039a2:	9303      	str	r3, [sp, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80039a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039a8:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039aa:	4668      	mov	r0, sp
 80039ac:	f7fe fa64 	bl	8001e78 <HAL_RCCEx_PeriphCLKConfig>
 80039b0:	b9d8      	cbnz	r0, 80039ea <SystemClock_Config+0x9a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80039b2:	f7fe fa2f 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <SystemClock_Config+0xa8>)
 80039b8:	fba3 3000 	umull	r3, r0, r3, r0
 80039bc:	0980      	lsrs	r0, r0, #6
 80039be:	f7fd f903 	bl	8000bc8 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80039c2:	2004      	movs	r0, #4
 80039c4:	f7fd f916 	bl	8000bf4 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80039c8:	2200      	movs	r2, #0
 80039ca:	4611      	mov	r1, r2
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295
 80039d0:	f7fd f8bc 	bl	8000b4c <HAL_NVIC_SetPriority>
}
 80039d4:	b017      	add	sp, #92	; 0x5c
 80039d6:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80039da:	219c      	movs	r1, #156	; 0x9c
 80039dc:	4807      	ldr	r0, [pc, #28]	; (80039fc <SystemClock_Config+0xac>)
 80039de:	f7ff fe85 	bl	80036ec <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80039e2:	21aa      	movs	r1, #170	; 0xaa
 80039e4:	4805      	ldr	r0, [pc, #20]	; (80039fc <SystemClock_Config+0xac>)
 80039e6:	f7ff fe81 	bl	80036ec <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80039ea:	21b5      	movs	r1, #181	; 0xb5
 80039ec:	4803      	ldr	r0, [pc, #12]	; (80039fc <SystemClock_Config+0xac>)
 80039ee:	f7ff fe7d 	bl	80036ec <_Error_Handler>
 80039f2:	bf00      	nop
 80039f4:	000100a1 	.word	0x000100a1
 80039f8:	10624dd3 	.word	0x10624dd3
 80039fc:	0800482c 	.word	0x0800482c

08003a00 <main>:
{
 8003a00:	b508      	push	{r3, lr}
  HAL_Init();
 8003a02:	f7fc fbf7 	bl	80001f4 <HAL_Init>
  SystemClock_Config();
 8003a06:	f7ff ffa3 	bl	8003950 <SystemClock_Config>
  MX_GPIO_Init();
 8003a0a:	f7ff fdb5 	bl	8003578 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003a0e:	f7ff fe6f 	bl	80036f0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8003a12:	f7ff fe8d 	bl	8003730 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003a16:	f7ff fecd 	bl	80037b4 <MX_I2C1_Init>
  MX_RTC_Init();
 8003a1a:	f7ff feff 	bl	800381c <MX_RTC_Init>
  MX_TIM2_Init();
 8003a1e:	f7ff ff5d 	bl	80038dc <MX_TIM2_Init>
  UserInitialise();
 8003a22:	f000 f98d 	bl	8003d40 <UserInitialise>
	  Flags();
 8003a26:	f000 fd61 	bl	80044ec <Flags>
 8003a2a:	e7fc      	b.n	8003a26 <main+0x26>

08003a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a2c:	b500      	push	{lr}
 8003a2e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a30:	4b1c      	ldr	r3, [pc, #112]	; (8003aa4 <HAL_MspInit+0x78>)
 8003a32:	699a      	ldr	r2, [r3, #24]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	619a      	str	r2, [r3, #24]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003a44:	2007      	movs	r0, #7
 8003a46:	f7fd f86f 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	f06f 000b 	mvn.w	r0, #11
 8003a52:	f7fd f87b 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003a56:	2200      	movs	r2, #0
 8003a58:	4611      	mov	r1, r2
 8003a5a:	f06f 000a 	mvn.w	r0, #10
 8003a5e:	f7fd f875 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003a62:	2200      	movs	r2, #0
 8003a64:	4611      	mov	r1, r2
 8003a66:	f06f 0009 	mvn.w	r0, #9
 8003a6a:	f7fd f86f 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4611      	mov	r1, r2
 8003a72:	f06f 0004 	mvn.w	r0, #4
 8003a76:	f7fd f869 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	f06f 0003 	mvn.w	r0, #3
 8003a82:	f7fd f863 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003a86:	2200      	movs	r2, #0
 8003a88:	4611      	mov	r1, r2
 8003a8a:	f06f 0001 	mvn.w	r0, #1
 8003a8e:	f7fd f85d 	bl	8000b4c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003a92:	2200      	movs	r2, #0
 8003a94:	4611      	mov	r1, r2
 8003a96:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9a:	f7fd f857 	bl	8000b4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a9e:	b003      	add	sp, #12
 8003aa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003aa4:	40021000 	.word	0x40021000

08003aa8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003aa8:	6803      	ldr	r3, [r0, #0]
 8003aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aae:	d000      	beq.n	8003ab2 <HAL_ADC_MspInit+0xa>
 8003ab0:	4770      	bx	lr
{
 8003ab2:	b530      	push	{r4, r5, lr}
 8003ab4:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003ab6:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8003aba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ac4:	615a      	str	r2, [r3, #20]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	9b00      	ldr	r3, [sp, #0]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PB1     ------> ADC1_IN12
    PB13     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ad0:	230c      	movs	r3, #12
 8003ad2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ad4:	2503      	movs	r5, #3
 8003ad6:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2400      	movs	r4, #0
 8003ada:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003adc:	a901      	add	r1, sp, #4
 8003ade:	4807      	ldr	r0, [pc, #28]	; (8003afc <HAL_ADC_MspInit+0x54>)
 8003ae0:	f7fd f8c2 	bl	8000c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 8003ae4:	f242 0302 	movw	r3, #8194	; 0x2002
 8003ae8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003aea:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aee:	a901      	add	r1, sp, #4
 8003af0:	4803      	ldr	r0, [pc, #12]	; (8003b00 <HAL_ADC_MspInit+0x58>)
 8003af2:	f7fd f8b9 	bl	8000c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003af6:	b007      	add	sp, #28
 8003af8:	bd30      	pop	{r4, r5, pc}
 8003afa:	bf00      	nop
 8003afc:	48000800 	.word	0x48000800
 8003b00:	48000400 	.word	0x48000400

08003b04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8003b04:	6802      	ldr	r2, [r0, #0]
 8003b06:	4b1f      	ldr	r3, [pc, #124]	; (8003b84 <HAL_I2C_MspInit+0x80>)
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d000      	beq.n	8003b0e <HAL_I2C_MspInit+0xa>
 8003b0c:	4770      	bx	lr
{
 8003b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b10:	b087      	sub	sp, #28
  
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b16:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b18:	2712      	movs	r7, #18
 8003b1a:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b1c:	2601      	movs	r6, #1
 8003b1e:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b20:	2503      	movs	r5, #3
 8003b22:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b24:	2404      	movs	r4, #4
 8003b26:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b28:	eb0d 0104 	add.w	r1, sp, r4
 8003b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b30:	f7fd f89a 	bl	8000c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b38:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b3a:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b3c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b3e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b40:	eb0d 0104 	add.w	r1, sp, r4
 8003b44:	4810      	ldr	r0, [pc, #64]	; (8003b88 <HAL_I2C_MspInit+0x84>)
 8003b46:	f7fd f88f 	bl	8000c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <HAL_I2C_MspInit+0x88>)
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003b52:	61da      	str	r2, [r3, #28]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	9b00      	ldr	r3, [sp, #0]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	4611      	mov	r1, r2
 8003b62:	201f      	movs	r0, #31
 8003b64:	f7fc fff2 	bl	8000b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b68:	201f      	movs	r0, #31
 8003b6a:	f7fd f821 	bl	8000bb0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	4611      	mov	r1, r2
 8003b72:	2020      	movs	r0, #32
 8003b74:	f7fc ffea 	bl	8000b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003b78:	2020      	movs	r0, #32
 8003b7a:	f7fd f819 	bl	8000bb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b7e:	b007      	add	sp, #28
 8003b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40005400 	.word	0x40005400
 8003b88:	48000400 	.word	0x48000400
 8003b8c:	40021000 	.word	0x40021000

08003b90 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003b90:	b508      	push	{r3, lr}

  if(hrtc->Instance==RTC)
 8003b92:	6802      	ldr	r2, [r0, #0]
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RTC_MspInit+0x34>)
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d000      	beq.n	8003b9c <HAL_RTC_MspInit+0xc>
 8003b9a:	bd08      	pop	{r3, pc}
 8003b9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ba0:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003ba4:	fab2 f282 	clz	r2, r2
 8003ba8:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <HAL_RTC_MspInit+0x38>)
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	2003      	movs	r0, #3
 8003bb8:	f7fc ffc8 	bl	8000b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003bbc:	2003      	movs	r0, #3
 8003bbe:	f7fc fff7 	bl	8000bb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003bc2:	e7ea      	b.n	8003b9a <HAL_RTC_MspInit+0xa>
 8003bc4:	40002800 	.word	0x40002800
 8003bc8:	10908100 	.word	0x10908100

08003bcc <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8003bcc:	6803      	ldr	r3, [r0, #0]
 8003bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd2:	d000      	beq.n	8003bd6 <HAL_TIM_Base_MspInit+0xa>
 8003bd4:	4770      	bx	lr
{
 8003bd6:	b500      	push	{lr}
 8003bd8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bda:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	f042 0201 	orr.w	r2, r2, #1
 8003be4:	61da      	str	r2, [r3, #28]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	9301      	str	r3, [sp, #4]
 8003bee:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	201c      	movs	r0, #28
 8003bf6:	f7fc ffa9 	bl	8000b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003bfa:	201c      	movs	r0, #28
 8003bfc:	f7fc ffd8 	bl	8000bb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003c00:	b003      	add	sp, #12
 8003c02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003c08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003c08:	6802      	ldr	r2, [r0, #0]
 8003c0a:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <HAL_UART_MspInit+0x58>)
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d000      	beq.n	8003c12 <HAL_UART_MspInit+0xa>
 8003c10:	4770      	bx	lr
{
 8003c12:	b500      	push	{lr}
 8003c14:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c16:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003c1a:	699a      	ldr	r2, [r3, #24]
 8003c1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c20:	619a      	str	r2, [r3, #24]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c2c:	2330      	movs	r3, #48	; 0x30
 8003c2e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c30:	2302      	movs	r3, #2
 8003c32:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c34:	2301      	movs	r3, #1
 8003c36:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c3c:	2307      	movs	r3, #7
 8003c3e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c40:	a901      	add	r1, sp, #4
 8003c42:	4808      	ldr	r0, [pc, #32]	; (8003c64 <HAL_UART_MspInit+0x5c>)
 8003c44:	f7fd f810 	bl	8000c68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c48:	2200      	movs	r2, #0
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	2025      	movs	r0, #37	; 0x25
 8003c4e:	f7fc ff7d 	bl	8000b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c52:	2025      	movs	r0, #37	; 0x25
 8003c54:	f7fc ffac 	bl	8000bb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c58:	b007      	add	sp, #28
 8003c5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c5e:	bf00      	nop
 8003c60:	40013800 	.word	0x40013800
 8003c64:	48000800 	.word	0x48000800

08003c68 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003c68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c6a:	f7fc fad5 	bl	8000218 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003c6e:	f7fc ffd2 	bl	8000c16 <HAL_SYSTICK_IRQHandler>
 8003c72:	bd08      	pop	{r3, pc}

08003c74 <RTC_WKUP_IRQHandler>:

/**
* @brief This function handles RTC wake-up interrupt through EXTI line 20.
*/
void RTC_WKUP_IRQHandler(void)
{
 8003c74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003c76:	4802      	ldr	r0, [pc, #8]	; (8003c80 <RTC_WKUP_IRQHandler+0xc>)
 8003c78:	f7fe fc30 	bl	80024dc <HAL_RTCEx_WakeUpTimerIRQHandler>
 8003c7c:	bd08      	pop	{r3, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000160 	.word	0x20000160

08003c84 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8003c84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c86:	4802      	ldr	r0, [pc, #8]	; (8003c90 <TIM2_IRQHandler+0xc>)
 8003c88:	f7fe fc7f 	bl	800258a <HAL_TIM_IRQHandler>
 8003c8c:	bd08      	pop	{r3, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000180 	.word	0x20000180

08003c94 <I2C1_EV_IRQHandler>:

/**
* @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
*/
void I2C1_EV_IRQHandler(void)
{
 8003c94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c96:	4802      	ldr	r0, [pc, #8]	; (8003ca0 <I2C1_EV_IRQHandler+0xc>)
 8003c98:	f7fd f972 	bl	8000f80 <HAL_I2C_EV_IRQHandler>
 8003c9c:	bd08      	pop	{r3, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000050 	.word	0x20000050

08003ca4 <I2C1_ER_IRQHandler>:

/**
* @brief This function handles I2C1 error interrupt.
*/
void I2C1_ER_IRQHandler(void)
{
 8003ca4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003ca6:	4802      	ldr	r0, [pc, #8]	; (8003cb0 <I2C1_ER_IRQHandler+0xc>)
 8003ca8:	f7fd fbe1 	bl	800146e <HAL_I2C_ER_IRQHandler>
 8003cac:	bd08      	pop	{r3, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000050 	.word	0x20000050

08003cb4 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
*/
void USART1_IRQHandler(void)
{
 8003cb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003cb6:	4802      	ldr	r0, [pc, #8]	; (8003cc0 <USART1_IRQHandler+0xc>)
 8003cb8:	f7ff f996 	bl	8002fe8 <HAL_UART_IRQHandler>
 8003cbc:	bd08      	pop	{r3, pc}
 8003cbe:	bf00      	nop
 8003cc0:	200000f0 	.word	0x200000f0

08003cc4 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void)
{
 8003cc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003cc6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003cca:	f7fd f89d 	bl	8000e08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003cce:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003cd2:	f7fd f899 	bl	8000e08 <HAL_GPIO_EXTI_IRQHandler>
 8003cd6:	bd08      	pop	{r3, pc}

08003cd8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cd8:	4915      	ldr	r1, [pc, #84]	; (8003d30 <SystemInit+0x58>)
 8003cda:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003cde:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003ce6:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <SystemInit+0x5c>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003cf0:	6858      	ldr	r0, [r3, #4]
 8003cf2:	4a11      	ldr	r2, [pc, #68]	; (8003d38 <SystemInit+0x60>)
 8003cf4:	4002      	ands	r2, r0
 8003cf6:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003cfe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d02:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d0a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003d12:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d16:	f022 020f 	bic.w	r2, r2, #15
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003d1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d1e:	4a07      	ldr	r2, [pc, #28]	; (8003d3c <SystemInit+0x64>)
 8003d20:	4002      	ands	r2, r0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003d24:	2200      	movs	r2, #0
 8003d26:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d2c:	608b      	str	r3, [r1, #8]
 8003d2e:	4770      	bx	lr
 8003d30:	e000ed00 	.word	0xe000ed00
 8003d34:	40021000 	.word	0x40021000
 8003d38:	f87fc00c 	.word	0xf87fc00c
 8003d3c:	ff00fccc 	.word	0xff00fccc

08003d40 <UserInitialise>:
uint8_t mm_get;
uint8_t ss_get;


void UserInitialise(void)
{
 8003d40:	b508      	push	{r3, lr}
	uartRxFlag = false;
 8003d42:	2300      	movs	r3, #0
 8003d44:	4a23      	ldr	r2, [pc, #140]	; (8003dd4 <UserInitialise+0x94>)
 8003d46:	7013      	strb	r3, [r2, #0]
	tempSetpoint = 60;		// initial value
 8003d48:	213c      	movs	r1, #60	; 0x3c
 8003d4a:	4a23      	ldr	r2, [pc, #140]	; (8003dd8 <UserInitialise+0x98>)
 8003d4c:	8011      	strh	r1, [r2, #0]

	//---------------------Prof code--------------------------//
	adcFlag = false;
 8003d4e:	4a23      	ldr	r2, [pc, #140]	; (8003ddc <UserInitialise+0x9c>)
 8003d50:	7013      	strb	r3, [r2, #0]
	adcCh = 0;
 8003d52:	4a23      	ldr	r2, [pc, #140]	; (8003de0 <UserInitialise+0xa0>)
 8003d54:	7013      	strb	r3, [r2, #0]
	sampleCntr = 0;
 8003d56:	4a23      	ldr	r2, [pc, #140]	; (8003de4 <UserInitialise+0xa4>)
 8003d58:	7013      	strb	r3, [r2, #0]
	irmsSum = 0;
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	4922      	ldr	r1, [pc, #136]	; (8003de8 <UserInitialise+0xa8>)
 8003d5e:	600a      	str	r2, [r1, #0]
	vrmsSum = 0;
 8003d60:	4922      	ldr	r1, [pc, #136]	; (8003dec <UserInitialise+0xac>)
 8003d62:	600a      	str	r2, [r1, #0]

	//digit = 0;
	//---------------------Prof code--------------------------//

	valveState = 0;
 8003d64:	4a22      	ldr	r2, [pc, #136]	; (8003df0 <UserInitialise+0xb0>)
 8003d66:	8013      	strh	r3, [r2, #0]
	heaterState = 0;
 8003d68:	4a22      	ldr	r2, [pc, #136]	; (8003df4 <UserInitialise+0xb4>)
 8003d6a:	8013      	strh	r3, [r2, #0]
	scheduleState = 0;
 8003d6c:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <UserInitialise+0xb8>)
 8003d6e:	8013      	strh	r3, [r2, #0]

	numberMap[0] = 0b00111111;
 8003d70:	4b22      	ldr	r3, [pc, #136]	; (8003dfc <UserInitialise+0xbc>)
 8003d72:	223f      	movs	r2, #63	; 0x3f
 8003d74:	701a      	strb	r2, [r3, #0]
	numberMap[1] = 0b00000110;
 8003d76:	2206      	movs	r2, #6
 8003d78:	705a      	strb	r2, [r3, #1]
	numberMap[2] = 0b01011011;
 8003d7a:	225b      	movs	r2, #91	; 0x5b
 8003d7c:	709a      	strb	r2, [r3, #2]
	numberMap[3] = 0b01001111;
 8003d7e:	224f      	movs	r2, #79	; 0x4f
 8003d80:	70da      	strb	r2, [r3, #3]
	numberMap[4] = 0b01100110;
 8003d82:	2266      	movs	r2, #102	; 0x66
 8003d84:	711a      	strb	r2, [r3, #4]
	numberMap[5] = 0b01101101;
 8003d86:	226d      	movs	r2, #109	; 0x6d
 8003d88:	715a      	strb	r2, [r3, #5]
	numberMap[6] = 0b01111101;
 8003d8a:	227d      	movs	r2, #125	; 0x7d
 8003d8c:	719a      	strb	r2, [r3, #6]
	numberMap[7] = 0b00000111;
 8003d8e:	2207      	movs	r2, #7
 8003d90:	71da      	strb	r2, [r3, #7]
	numberMap[8] = 0b01111111;
 8003d92:	227f      	movs	r2, #127	; 0x7f
 8003d94:	721a      	strb	r2, [r3, #8]
	numberMap[9] = 0b01100111;
 8003d96:	2267      	movs	r2, #103	; 0x67
 8003d98:	725a      	strb	r2, [r3, #9]

	segementsSet[0] = 0b0001;
 8003d9a:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <UserInitialise+0xc0>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	701a      	strb	r2, [r3, #0]
	segementsSet[1] = 0b0010;
 8003da0:	2102      	movs	r1, #2
 8003da2:	7059      	strb	r1, [r3, #1]
	segementsSet[2] = 0b0100;
 8003da4:	2104      	movs	r1, #4
 8003da6:	7099      	strb	r1, [r3, #2]
	segementsSet[3] = 0b1000;
 8003da8:	2108      	movs	r1, #8
 8003daa:	70d9      	strb	r1, [r3, #3]
//	pinsValue[0] = numberMap[1];
//	pinsValue[1] = numberMap[8];
//	pinsValue[2] = numberMap[5];
//	pinsValue[3] = numberMap[2];

	HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 8003dac:	4915      	ldr	r1, [pc, #84]	; (8003e04 <UserInitialise+0xc4>)
 8003dae:	4816      	ldr	r0, [pc, #88]	; (8003e08 <UserInitialise+0xc8>)
 8003db0:	f7fe fded 	bl	800298e <HAL_UART_Receive_IT>


	// start timer 2 for ADC sampling
	__HAL_TIM_ENABLE(&htim2);
 8003db4:	4a15      	ldr	r2, [pc, #84]	; (8003e0c <UserInitialise+0xcc>)
 8003db6:	6811      	ldr	r1, [r2, #0]
 8003db8:	680b      	ldr	r3, [r1, #0]
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	600b      	str	r3, [r1, #0]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	68d3      	ldr	r3, [r2, #12]
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	60d3      	str	r3, [r2, #12]

	HAL_I2C_Init(&hi2c1);
 8003dca:	4811      	ldr	r0, [pc, #68]	; (8003e10 <UserInitialise+0xd0>)
 8003dcc:	f7fd f87a 	bl	8000ec4 <HAL_I2C_Init>
 8003dd0:	bd08      	pop	{r3, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000049 	.word	0x20000049
 8003dd8:	2000003c 	.word	0x2000003c
 8003ddc:	2000004c 	.word	0x2000004c
 8003de0:	200003f1 	.word	0x200003f1
 8003de4:	200001c8 	.word	0x200001c8
 8003de8:	20000318 	.word	0x20000318
 8003dec:	200003f4 	.word	0x200003f4
 8003df0:	20000046 	.word	0x20000046
 8003df4:	20000044 	.word	0x20000044
 8003df8:	2000004e 	.word	0x2000004e
 8003dfc:	200001cc 	.word	0x200001cc
 8003e00:	20000038 	.word	0x20000038
 8003e04:	20000314 	.word	0x20000314
 8003e08:	200000f0 	.word	0x200000f0
 8003e0c:	20000180 	.word	0x20000180
 8003e10:	20000050 	.word	0x20000050

08003e14 <DecodeCmd>:
	//HAL_I2C_Master_Transmit(&hi2c1, 0x45<<1, &buffer[0], 1, 100);

}

void DecodeCmd()
{
 8003e14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//uint8_t numcharswritten;
	//---------------------Prof code--------------------------//

	uint8_t charsL;

	switch (cmdBuf[1])
 8003e18:	4ba8      	ldr	r3, [pc, #672]	; (80040bc <DecodeCmd+0x2a8>)
 8003e1a:	785b      	ldrb	r3, [r3, #1]
 8003e1c:	3b41      	subs	r3, #65	; 0x41
 8003e1e:	2b0b      	cmp	r3, #11
 8003e20:	f200 835a 	bhi.w	80044d8 <DecodeCmd+0x6c4>
 8003e24:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003e28:	0016000c 	.word	0x0016000c
 8003e2c:	0042002d 	.word	0x0042002d
 8003e30:	006e0059 	.word	0x006e0059
 8003e34:	00d100b3 	.word	0x00d100b3
 8003e38:	01e50180 	.word	0x01e50180
 8003e3c:	0343025f 	.word	0x0343025f
	{
	case 'A' : //Student number
		//flowCounter = 0;	//-----------------------------------------------------------------------------------------------------------------flow counter remove
		HAL_UART_Transmit(&huart1, (uint8_t*)txStudentNo, 13, 1000);
 8003e40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e44:	220d      	movs	r2, #13
 8003e46:	499e      	ldr	r1, [pc, #632]	; (80040c0 <DecodeCmd+0x2ac>)
 8003e48:	6809      	ldr	r1, [r1, #0]
 8003e4a:	489e      	ldr	r0, [pc, #632]	; (80040c4 <DecodeCmd+0x2b0>)
 8003e4c:	f7fe ff73 	bl	8002d36 <HAL_UART_Transmit>
		break;
 8003e50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

	case 'B' : //Switch valve
		String2Int(cmdBuf+3, (int16_t*) &valveState);
 8003e54:	499c      	ldr	r1, [pc, #624]	; (80040c8 <DecodeCmd+0x2b4>)
 8003e56:	489d      	ldr	r0, [pc, #628]	; (80040cc <DecodeCmd+0x2b8>)
 8003e58:	f7ff f9ce 	bl	80031f8 <String2Int>

		switchValve();//----------------------------------------------------------default values
 8003e5c:	f7ff f992 	bl	8003184 <switchValve>

		txBuf[0] = '$';	txBuf[1] = 'B';
 8003e60:	499b      	ldr	r1, [pc, #620]	; (80040d0 <DecodeCmd+0x2bc>)
 8003e62:	2324      	movs	r3, #36	; 0x24
 8003e64:	700b      	strb	r3, [r1, #0]
 8003e66:	2342      	movs	r3, #66	; 0x42
 8003e68:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8003e6a:	230d      	movs	r3, #13
 8003e6c:	708b      	strb	r3, [r1, #2]
 8003e6e:	230a      	movs	r3, #10
 8003e70:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8003e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e76:	2204      	movs	r2, #4
 8003e78:	4892      	ldr	r0, [pc, #584]	; (80040c4 <DecodeCmd+0x2b0>)
 8003e7a:	f7fe ff5c 	bl	8002d36 <HAL_UART_Transmit>
		break;
 8003e7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

	case 'C' : //Enable/ disable automatic schedule
		String2Int(cmdBuf+3, (int16_t*) &scheduleState);//----------------------------------------------------------default values OFF
 8003e82:	4994      	ldr	r1, [pc, #592]	; (80040d4 <DecodeCmd+0x2c0>)
 8003e84:	4891      	ldr	r0, [pc, #580]	; (80040cc <DecodeCmd+0x2b8>)
 8003e86:	f7ff f9b7 	bl	80031f8 <String2Int>
		//-----------------------------------------------------------------------------------------------------------------must i actualy code something?
		txBuf[0] = '$';	txBuf[1] = 'C';
 8003e8a:	4991      	ldr	r1, [pc, #580]	; (80040d0 <DecodeCmd+0x2bc>)
 8003e8c:	2324      	movs	r3, #36	; 0x24
 8003e8e:	700b      	strb	r3, [r1, #0]
 8003e90:	2343      	movs	r3, #67	; 0x43
 8003e92:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8003e94:	230d      	movs	r3, #13
 8003e96:	708b      	strb	r3, [r1, #2]
 8003e98:	230a      	movs	r3, #10
 8003e9a:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8003e9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	4888      	ldr	r0, [pc, #544]	; (80040c4 <DecodeCmd+0x2b0>)
 8003ea4:	f7fe ff47 	bl	8002d36 <HAL_UART_Transmit>
		break;
 8003ea8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

	case 'D' : //Switch heater
		String2Int(cmdBuf+3, (int16_t*) &heaterState);
 8003eac:	498a      	ldr	r1, [pc, #552]	; (80040d8 <DecodeCmd+0x2c4>)
 8003eae:	4887      	ldr	r0, [pc, #540]	; (80040cc <DecodeCmd+0x2b8>)
 8003eb0:	f7ff f9a2 	bl	80031f8 <String2Int>

		switchHeater();
 8003eb4:	f7ff f958 	bl	8003168 <switchHeater>

		txBuf[0] = '$';	txBuf[1] = 'D';
 8003eb8:	4985      	ldr	r1, [pc, #532]	; (80040d0 <DecodeCmd+0x2bc>)
 8003eba:	2324      	movs	r3, #36	; 0x24
 8003ebc:	700b      	strb	r3, [r1, #0]
 8003ebe:	2344      	movs	r3, #68	; 0x44
 8003ec0:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8003ec2:	230d      	movs	r3, #13
 8003ec4:	708b      	strb	r3, [r1, #2]
 8003ec6:	230a      	movs	r3, #10
 8003ec8:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8003eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ece:	2204      	movs	r2, #4
 8003ed0:	487c      	ldr	r0, [pc, #496]	; (80040c4 <DecodeCmd+0x2b0>)
 8003ed2:	f7fe ff30 	bl	8002d36 <HAL_UART_Transmit>

		break;
 8003ed6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

	case 'E' : //Enable/disable logging to flash memory
		String2Int(cmdBuf+3, (int16_t*) &valveState);
 8003eda:	497b      	ldr	r1, [pc, #492]	; (80040c8 <DecodeCmd+0x2b4>)
 8003edc:	487b      	ldr	r0, [pc, #492]	; (80040cc <DecodeCmd+0x2b8>)
 8003ede:	f7ff f98b 	bl	80031f8 <String2Int>
		//-----------------------------------------------------------------------------------------------------------------must i actualy code something?
		txBuf[0] = '$';	txBuf[1] = 'E';
 8003ee2:	497b      	ldr	r1, [pc, #492]	; (80040d0 <DecodeCmd+0x2bc>)
 8003ee4:	2324      	movs	r3, #36	; 0x24
 8003ee6:	700b      	strb	r3, [r1, #0]
 8003ee8:	2345      	movs	r3, #69	; 0x45
 8003eea:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 8003eec:	230d      	movs	r3, #13
 8003eee:	708b      	strb	r3, [r1, #2]
 8003ef0:	230a      	movs	r3, #10
 8003ef2:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8003ef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ef8:	2204      	movs	r2, #4
 8003efa:	4872      	ldr	r0, [pc, #456]	; (80040c4 <DecodeCmd+0x2b0>)
 8003efc:	f7fe ff1b 	bl	8002d36 <HAL_UART_Transmit>
		break;
 8003f00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

	case 'F': //Set Temperature
		String2Int(cmdBuf+3, (int16_t*) &tempSetpoint);
 8003f04:	4c75      	ldr	r4, [pc, #468]	; (80040dc <DecodeCmd+0x2c8>)
 8003f06:	4621      	mov	r1, r4
 8003f08:	4870      	ldr	r0, [pc, #448]	; (80040cc <DecodeCmd+0x2b8>)
 8003f0a:	f7ff f975 	bl	80031f8 <String2Int>

		txBuf[0] = '$'; txBuf[1] = 'F';	txBuf[2] = '\r'; txBuf[3] = '\n';
 8003f0e:	4970      	ldr	r1, [pc, #448]	; (80040d0 <DecodeCmd+0x2bc>)
 8003f10:	2324      	movs	r3, #36	; 0x24
 8003f12:	700b      	strb	r3, [r1, #0]
 8003f14:	2346      	movs	r3, #70	; 0x46
 8003f16:	704b      	strb	r3, [r1, #1]
 8003f18:	230d      	movs	r3, #13
 8003f1a:	708b      	strb	r3, [r1, #2]
 8003f1c:	230a      	movs	r3, #10
 8003f1e:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 8003f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f24:	2204      	movs	r2, #4
 8003f26:	4867      	ldr	r0, [pc, #412]	; (80040c4 <DecodeCmd+0x2b0>)
 8003f28:	f7fe ff05 	bl	8002d36 <HAL_UART_Transmit>

		//LedSet(tempSetpoint);

		charsL = Int2String(tempF, tempSetpoint, 4);
 8003f2c:	8821      	ldrh	r1, [r4, #0]
 8003f2e:	2204      	movs	r2, #4
 8003f30:	b209      	sxth	r1, r1
 8003f32:	486b      	ldr	r0, [pc, #428]	; (80040e0 <DecodeCmd+0x2cc>)
 8003f34:	f7ff f990 	bl	8003258 <Int2String>
 8003f38:	b2c5      	uxtb	r5, r0

		while (i < charsL)
 8003f3a:	e018      	b.n	8003f6e <DecodeCmd+0x15a>
		{
			for (j=0; j <10; j++)
 8003f3c:	4a69      	ldr	r2, [pc, #420]	; (80040e4 <DecodeCmd+0x2d0>)
 8003f3e:	6813      	ldr	r3, [r2, #0]
 8003f40:	3301      	adds	r3, #1
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	4b67      	ldr	r3, [pc, #412]	; (80040e4 <DecodeCmd+0x2d0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b09      	cmp	r3, #9
 8003f4a:	dc0d      	bgt.n	8003f68 <DecodeCmd+0x154>
			{
				if (tempF[i] == (j+0x30))
 8003f4c:	4a64      	ldr	r2, [pc, #400]	; (80040e0 <DecodeCmd+0x2cc>)
 8003f4e:	5d11      	ldrb	r1, [r2, r4]
 8003f50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003f54:	4291      	cmp	r1, r2
 8003f56:	d1f1      	bne.n	8003f3c <DecodeCmd+0x128>
				{
					pinsValue[i] = numberMap[j];
 8003f58:	4a63      	ldr	r2, [pc, #396]	; (80040e8 <DecodeCmd+0x2d4>)
 8003f5a:	5cd2      	ldrb	r2, [r2, r3]
 8003f5c:	4b63      	ldr	r3, [pc, #396]	; (80040ec <DecodeCmd+0x2d8>)
 8003f5e:	551a      	strb	r2, [r3, r4]
					j = 10;
 8003f60:	220a      	movs	r2, #10
 8003f62:	4b60      	ldr	r3, [pc, #384]	; (80040e4 <DecodeCmd+0x2d0>)
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	e7e9      	b.n	8003f3c <DecodeCmd+0x128>
				}
			}
			i++;
 8003f68:	3401      	adds	r4, #1
 8003f6a:	4b61      	ldr	r3, [pc, #388]	; (80040f0 <DecodeCmd+0x2dc>)
 8003f6c:	601c      	str	r4, [r3, #0]
		while (i < charsL)
 8003f6e:	b2c3      	uxtb	r3, r0
 8003f70:	4a5f      	ldr	r2, [pc, #380]	; (80040f0 <DecodeCmd+0x2dc>)
 8003f72:	6814      	ldr	r4, [r2, #0]
 8003f74:	42a3      	cmp	r3, r4
 8003f76:	dd03      	ble.n	8003f80 <DecodeCmd+0x16c>
			for (j=0; j <10; j++)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4b5a      	ldr	r3, [pc, #360]	; (80040e4 <DecodeCmd+0x2d0>)
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	e7e1      	b.n	8003f44 <DecodeCmd+0x130>
		}
		i = 0;
 8003f80:	2200      	movs	r2, #0
 8003f82:	4b5b      	ldr	r3, [pc, #364]	; (80040f0 <DecodeCmd+0x2dc>)
 8003f84:	601a      	str	r2, [r3, #0]

		segmentsL = charsL;
 8003f86:	4b5b      	ldr	r3, [pc, #364]	; (80040f4 <DecodeCmd+0x2e0>)
 8003f88:	701d      	strb	r5, [r3, #0]

		break;
 8003f8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

	case 'G': //Get temperature

		txBuf[0] = '$';	txBuf[1] = 'G';	txBuf[2] = ',';
 8003f8e:	4c50      	ldr	r4, [pc, #320]	; (80040d0 <DecodeCmd+0x2bc>)
 8003f90:	2324      	movs	r3, #36	; 0x24
 8003f92:	7023      	strb	r3, [r4, #0]
 8003f94:	2347      	movs	r3, #71	; 0x47
 8003f96:	7063      	strb	r3, [r4, #1]
 8003f98:	232c      	movs	r3, #44	; 0x2c
 8003f9a:	70a3      	strb	r3, [r4, #2]
		charsL = Int2String(txBuf+3, tempSetpoint, 4);
 8003f9c:	4b4f      	ldr	r3, [pc, #316]	; (80040dc <DecodeCmd+0x2c8>)
 8003f9e:	8819      	ldrh	r1, [r3, #0]
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	b209      	sxth	r1, r1
 8003fa4:	1ce0      	adds	r0, r4, #3
 8003fa6:	f7ff f957 	bl	8003258 <Int2String>
 8003faa:	b2c2      	uxtb	r2, r0
		txBuf[3 + charsL] = '\r'; txBuf[4 + charsL] = '\n';
 8003fac:	1cd3      	adds	r3, r2, #3
 8003fae:	210d      	movs	r1, #13
 8003fb0:	54e1      	strb	r1, [r4, r3]
 8003fb2:	1d13      	adds	r3, r2, #4
 8003fb4:	210a      	movs	r1, #10
 8003fb6:	54e1      	strb	r1, [r4, r3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL+5, 1000);
 8003fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fbc:	3205      	adds	r2, #5
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	4840      	ldr	r0, [pc, #256]	; (80040c4 <DecodeCmd+0x2b0>)
 8003fc2:	f7fe feb8 	bl	8002d36 <HAL_UART_Transmit>
		break;
 8003fc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

	case 'H' : //Set time

		timeL = 0;
 8003fca:	4c4b      	ldr	r4, [pc, #300]	; (80040f8 <DecodeCmd+0x2e4>)
 8003fcc:	2300      	movs	r3, #0
 8003fce:	7023      	strb	r3, [r4, #0]

		timeL = StringTime2Int(cmdBuf+5, &YYYY_set);
 8003fd0:	f8df b140 	ldr.w	fp, [pc, #320]	; 8004114 <DecodeCmd+0x300>
 8003fd4:	4d49      	ldr	r5, [pc, #292]	; (80040fc <DecodeCmd+0x2e8>)
 8003fd6:	4659      	mov	r1, fp
 8003fd8:	4628      	mov	r0, r5
 8003fda:	f7ff f8e1 	bl	80031a0 <StringTime2Int>
 8003fde:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &MM_set);
 8003fe0:	7820      	ldrb	r0, [r4, #0]
 8003fe2:	3005      	adds	r0, #5
 8003fe4:	f8df a130 	ldr.w	sl, [pc, #304]	; 8004118 <DecodeCmd+0x304>
 8003fe8:	3d05      	subs	r5, #5
 8003fea:	4651      	mov	r1, sl
 8003fec:	4428      	add	r0, r5
 8003fee:	f7ff f8d7 	bl	80031a0 <StringTime2Int>
 8003ff2:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &DD_set);
 8003ff4:	7820      	ldrb	r0, [r4, #0]
 8003ff6:	3005      	adds	r0, #5
 8003ff8:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800411c <DecodeCmd+0x308>
 8003ffc:	4649      	mov	r1, r9
 8003ffe:	4428      	add	r0, r5
 8004000:	f7ff f8ce 	bl	80031a0 <StringTime2Int>
 8004004:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &HH_set);
 8004006:	7820      	ldrb	r0, [r4, #0]
 8004008:	3005      	adds	r0, #5
 800400a:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8004120 <DecodeCmd+0x30c>
 800400e:	4641      	mov	r1, r8
 8004010:	4428      	add	r0, r5
 8004012:	f7ff f8c5 	bl	80031a0 <StringTime2Int>
 8004016:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &mm_set);
 8004018:	7820      	ldrb	r0, [r4, #0]
 800401a:	3005      	adds	r0, #5
 800401c:	4f38      	ldr	r7, [pc, #224]	; (8004100 <DecodeCmd+0x2ec>)
 800401e:	4639      	mov	r1, r7
 8004020:	4428      	add	r0, r5
 8004022:	f7ff f8bd 	bl	80031a0 <StringTime2Int>
 8004026:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &ss_set);
 8004028:	7820      	ldrb	r0, [r4, #0]
 800402a:	3005      	adds	r0, #5
 800402c:	4e35      	ldr	r6, [pc, #212]	; (8004104 <DecodeCmd+0x2f0>)
 800402e:	4631      	mov	r1, r6
 8004030:	4428      	add	r0, r5
 8004032:	f7ff f8b5 	bl	80031a0 <StringTime2Int>
 8004036:	7020      	strb	r0, [r4, #0]

		setDate.Year = YYYY_set;
 8004038:	4d33      	ldr	r5, [pc, #204]	; (8004108 <DecodeCmd+0x2f4>)
 800403a:	f89b 3000 	ldrb.w	r3, [fp]
 800403e:	70eb      	strb	r3, [r5, #3]
		setDate.Month = MM_set;
 8004040:	f89a 3000 	ldrb.w	r3, [sl]
 8004044:	706b      	strb	r3, [r5, #1]
		setDate.Date = DD_set;
 8004046:	f899 3000 	ldrb.w	r3, [r9]
 800404a:	70ab      	strb	r3, [r5, #2]
		setTime.Hours = HH_set;
 800404c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8004124 <DecodeCmd+0x310>
 8004050:	f898 3000 	ldrb.w	r3, [r8]
 8004054:	f889 3000 	strb.w	r3, [r9]
		setTime.Minutes = mm_set;
 8004058:	783b      	ldrb	r3, [r7, #0]
 800405a:	f889 3001 	strb.w	r3, [r9, #1]
		setTime.Seconds = ss_set;
 800405e:	7833      	ldrb	r3, [r6, #0]
 8004060:	f889 3002 	strb.w	r3, [r9, #2]

		//Update the Calendar (cancel write protection and enter init mode)
		__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc); // Disable write protection
 8004064:	4c29      	ldr	r4, [pc, #164]	; (800410c <DecodeCmd+0x2f8>)
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	22ca      	movs	r2, #202	; 0xca
 800406a:	625a      	str	r2, [r3, #36]	; 0x24
 800406c:	2253      	movs	r2, #83	; 0x53
 800406e:	625a      	str	r2, [r3, #36]	; 0x24
		halStatus = RTC_EnterInitMode(&hrtc); // Enter init mode
 8004070:	4620      	mov	r0, r4
 8004072:	f7fd fff0 	bl	8002056 <RTC_EnterInitMode>
 8004076:	4e26      	ldr	r6, [pc, #152]	; (8004110 <DecodeCmd+0x2fc>)
 8004078:	7030      	strb	r0, [r6, #0]
		halStatus = HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BCD);
 800407a:	2201      	movs	r2, #1
 800407c:	4649      	mov	r1, r9
 800407e:	4620      	mov	r0, r4
 8004080:	f7fe f874 	bl	800216c <HAL_RTC_SetTime>
 8004084:	7030      	strb	r0, [r6, #0]
		halStatus = HAL_RTC_SetDate(&hrtc, &setDate, RTC_FORMAT_BCD);
 8004086:	2201      	movs	r2, #1
 8004088:	4629      	mov	r1, r5
 800408a:	4620      	mov	r0, r4
 800408c:	f7fe f8ed 	bl	800226a <HAL_RTC_SetDate>
 8004090:	7030      	strb	r0, [r6, #0]
		__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	22ff      	movs	r2, #255	; 0xff
 8004096:	625a      	str	r2, [r3, #36]	; 0x24

		txBuf[0] = '$';	txBuf[1] = 'H';
 8004098:	490d      	ldr	r1, [pc, #52]	; (80040d0 <DecodeCmd+0x2bc>)
 800409a:	2324      	movs	r3, #36	; 0x24
 800409c:	700b      	strb	r3, [r1, #0]
 800409e:	2348      	movs	r3, #72	; 0x48
 80040a0:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 80040a2:	230d      	movs	r3, #13
 80040a4:	708b      	strb	r3, [r1, #2]
 80040a6:	230a      	movs	r3, #10
 80040a8:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 80040aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040ae:	2204      	movs	r2, #4
 80040b0:	4804      	ldr	r0, [pc, #16]	; (80040c4 <DecodeCmd+0x2b0>)
 80040b2:	f7fe fe40 	bl	8002d36 <HAL_UART_Transmit>
		break;
 80040b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ba:	bf00      	nop
 80040bc:	2000038c 	.word	0x2000038c
 80040c0:	20000004 	.word	0x20000004
 80040c4:	200000f0 	.word	0x200000f0
 80040c8:	20000046 	.word	0x20000046
 80040cc:	2000038f 	.word	0x2000038f
 80040d0:	2000027c 	.word	0x2000027c
 80040d4:	2000004e 	.word	0x2000004e
 80040d8:	20000044 	.word	0x20000044
 80040dc:	2000003c 	.word	0x2000003c
 80040e0:	200003ec 	.word	0x200003ec
 80040e4:	20000030 	.word	0x20000030
 80040e8:	200001cc 	.word	0x200001cc
 80040ec:	200003cc 	.word	0x200003cc
 80040f0:	20000040 	.word	0x20000040
 80040f4:	20000024 	.word	0x20000024
 80040f8:	2000002c 	.word	0x2000002c
 80040fc:	20000391 	.word	0x20000391
 8004100:	200003e8 	.word	0x200003e8
 8004104:	2000021c 	.word	0x2000021c
 8004108:	20000310 	.word	0x20000310
 800410c:	20000160 	.word	0x20000160
 8004110:	2000021e 	.word	0x2000021e
 8004114:	200003d0 	.word	0x200003d0
 8004118:	20000214 	.word	0x20000214
 800411c:	2000030c 	.word	0x2000030c
 8004120:	20000225 	.word	0x20000225
 8004124:	20000320 	.word	0x20000320
	case 'I' : //Get time

		//		halStatus = HAL_RTC_GetTime(&hrtc, &getTime, RTC_FORMAT_BCD);
		//		halStatus = HAL_RTC_GetDate(&hrtc, &getDate, RTC_FORMAT_BCD);

		getTime = getTimeLive;
 8004128:	4ebc      	ldr	r6, [pc, #752]	; (800441c <DecodeCmd+0x608>)
 800412a:	4634      	mov	r4, r6
 800412c:	4dbc      	ldr	r5, [pc, #752]	; (8004420 <DecodeCmd+0x60c>)
 800412e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004132:	682b      	ldr	r3, [r5, #0]
 8004134:	6023      	str	r3, [r4, #0]
		getDate = getDateLive;
 8004136:	f8df 8334 	ldr.w	r8, [pc, #820]	; 800446c <DecodeCmd+0x658>
 800413a:	4bba      	ldr	r3, [pc, #744]	; (8004424 <DecodeCmd+0x610>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f8c8 3000 	str.w	r3, [r8]

		txBuf[0] = '$';	txBuf[1] = 'I';
 8004142:	4db9      	ldr	r5, [pc, #740]	; (8004428 <DecodeCmd+0x614>)
 8004144:	2324      	movs	r3, #36	; 0x24
 8004146:	702b      	strb	r3, [r5, #0]
 8004148:	2349      	movs	r3, #73	; 0x49
 800414a:	706b      	strb	r3, [r5, #1]
		txBuf[2] = ',';
 800414c:	272c      	movs	r7, #44	; 0x2c
 800414e:	70af      	strb	r7, [r5, #2]
		txBuf[3] = '2';
 8004150:	2332      	movs	r3, #50	; 0x32
 8004152:	70eb      	strb	r3, [r5, #3]
		txBuf[4] = '0';
 8004154:	2330      	movs	r3, #48	; 0x30
 8004156:	712b      	strb	r3, [r5, #4]
		charsL = 5;
		charsL += Int2String(txBuf+charsL, (uint32_t) getDate.Year, 2);
 8004158:	2202      	movs	r2, #2
 800415a:	f898 1003 	ldrb.w	r1, [r8, #3]
 800415e:	1d68      	adds	r0, r5, #5
 8004160:	f7ff f87a 	bl	8003258 <Int2String>
 8004164:	b2c0      	uxtb	r0, r0
 8004166:	1d43      	adds	r3, r0, #5
 8004168:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 800416a:	54ef      	strb	r7, [r5, r3]
 800416c:	3006      	adds	r0, #6
 800416e:	b2c4      	uxtb	r4, r0
		charsL += Int2String(txBuf+charsL, (uint32_t) getDate.Month, 2);
 8004170:	2202      	movs	r2, #2
 8004172:	f898 1001 	ldrb.w	r1, [r8, #1]
 8004176:	1928      	adds	r0, r5, r4
 8004178:	f7ff f86e 	bl	8003258 <Int2String>
 800417c:	1823      	adds	r3, r4, r0
 800417e:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004180:	54ef      	strb	r7, [r5, r3]
 8004182:	3301      	adds	r3, #1
 8004184:	b2dc      	uxtb	r4, r3
		charsL += Int2String(txBuf+charsL, (uint32_t) getDate.Date, 2);
 8004186:	2202      	movs	r2, #2
 8004188:	f898 1002 	ldrb.w	r1, [r8, #2]
 800418c:	1928      	adds	r0, r5, r4
 800418e:	f7ff f863 	bl	8003258 <Int2String>
 8004192:	1823      	adds	r3, r4, r0
 8004194:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004196:	54ef      	strb	r7, [r5, r3]
 8004198:	3301      	adds	r3, #1
 800419a:	b2dc      	uxtb	r4, r3
		charsL += Int2String(txBuf+charsL, (uint32_t) getTime.Hours, 2);
 800419c:	2202      	movs	r2, #2
 800419e:	7831      	ldrb	r1, [r6, #0]
 80041a0:	1928      	adds	r0, r5, r4
 80041a2:	f7ff f859 	bl	8003258 <Int2String>
 80041a6:	1823      	adds	r3, r4, r0
 80041a8:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 80041aa:	54ef      	strb	r7, [r5, r3]
 80041ac:	3301      	adds	r3, #1
 80041ae:	b2dc      	uxtb	r4, r3
		charsL += Int2String(txBuf+charsL, (uint32_t) getTime.Minutes, 2);
 80041b0:	2202      	movs	r2, #2
 80041b2:	7871      	ldrb	r1, [r6, #1]
 80041b4:	1928      	adds	r0, r5, r4
 80041b6:	f7ff f84f 	bl	8003258 <Int2String>
 80041ba:	1823      	adds	r3, r4, r0
 80041bc:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 80041be:	54ef      	strb	r7, [r5, r3]
 80041c0:	3301      	adds	r3, #1
 80041c2:	b2dc      	uxtb	r4, r3
		charsL += Int2String(txBuf+charsL, (uint32_t) getTime.Seconds, 2);
 80041c4:	2202      	movs	r2, #2
 80041c6:	78b1      	ldrb	r1, [r6, #2]
 80041c8:	1928      	adds	r0, r5, r4
 80041ca:	f7ff f845 	bl	8003258 <Int2String>
 80041ce:	1823      	adds	r3, r4, r0
 80041d0:	b2db      	uxtb	r3, r3
		txBuf[charsL] = '\r'; charsL++; txBuf[charsL] = '\n'; charsL++;
 80041d2:	220d      	movs	r2, #13
 80041d4:	54ea      	strb	r2, [r5, r3]
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	210a      	movs	r1, #10
 80041dc:	54a9      	strb	r1, [r5, r2]
 80041de:	1c9a      	adds	r2, r3, #2
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL, 1000);
 80041e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	4629      	mov	r1, r5
 80041e8:	4890      	ldr	r0, [pc, #576]	; (800442c <DecodeCmd+0x618>)
 80041ea:	f7fe fda4 	bl	8002d36 <HAL_UART_Transmit>
		break;
 80041ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	case 'J' : //Set heating schedule
		//In order to set a heating schedule for the 2nd schedule window, to start at 8:30 AM and end at 10AM, the
		//test station will issue a command
		//$J,2,8,30,0,10,0,0<CR><LF>

		String2Int(cmdBuf+3, &heatingWindow);
 80041f2:	4e8f      	ldr	r6, [pc, #572]	; (8004430 <DecodeCmd+0x61c>)
 80041f4:	4d8f      	ldr	r5, [pc, #572]	; (8004434 <DecodeCmd+0x620>)
 80041f6:	4631      	mov	r1, r6
 80041f8:	4628      	mov	r0, r5
 80041fa:	f7fe fffd 	bl	80031f8 <String2Int>

		timeL = 0;
 80041fe:	4c8e      	ldr	r4, [pc, #568]	; (8004438 <DecodeCmd+0x624>)
 8004200:	2300      	movs	r3, #0
 8004202:	7023      	strb	r3, [r4, #0]

		timeL = StringTime2Int(cmdBuf+5, &HH_on);
 8004204:	f8df b268 	ldr.w	fp, [pc, #616]	; 8004470 <DecodeCmd+0x65c>
 8004208:	4659      	mov	r1, fp
 800420a:	1ca8      	adds	r0, r5, #2
 800420c:	f7fe ffc8 	bl	80031a0 <StringTime2Int>
 8004210:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &mm_on);
 8004212:	7820      	ldrb	r0, [r4, #0]
 8004214:	3005      	adds	r0, #5
 8004216:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8004474 <DecodeCmd+0x660>
 800421a:	3d03      	subs	r5, #3
 800421c:	4651      	mov	r1, sl
 800421e:	4428      	add	r0, r5
 8004220:	f7fe ffbe 	bl	80031a0 <StringTime2Int>
 8004224:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &ss_on);
 8004226:	7820      	ldrb	r0, [r4, #0]
 8004228:	3005      	adds	r0, #5
 800422a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004478 <DecodeCmd+0x664>
 800422e:	4649      	mov	r1, r9
 8004230:	4428      	add	r0, r5
 8004232:	f7fe ffb5 	bl	80031a0 <StringTime2Int>
 8004236:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &HH_off);
 8004238:	7820      	ldrb	r0, [r4, #0]
 800423a:	3005      	adds	r0, #5
 800423c:	f8df 823c 	ldr.w	r8, [pc, #572]	; 800447c <DecodeCmd+0x668>
 8004240:	4641      	mov	r1, r8
 8004242:	4428      	add	r0, r5
 8004244:	f7fe ffac 	bl	80031a0 <StringTime2Int>
 8004248:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &mm_off);
 800424a:	7820      	ldrb	r0, [r4, #0]
 800424c:	3005      	adds	r0, #5
 800424e:	4f7b      	ldr	r7, [pc, #492]	; (800443c <DecodeCmd+0x628>)
 8004250:	4639      	mov	r1, r7
 8004252:	4428      	add	r0, r5
 8004254:	f7fe ffa4 	bl	80031a0 <StringTime2Int>
 8004258:	7020      	strb	r0, [r4, #0]
		timeL = StringTime2Int(cmdBuf+5+timeL, &ss_off);
 800425a:	7820      	ldrb	r0, [r4, #0]
 800425c:	3005      	adds	r0, #5
 800425e:	4978      	ldr	r1, [pc, #480]	; (8004440 <DecodeCmd+0x62c>)
 8004260:	4428      	add	r0, r5
 8004262:	f7fe ff9d 	bl	80031a0 <StringTime2Int>
 8004266:	7020      	strb	r0, [r4, #0]

		onTime[heatingWindow-1].Hours = HH_on;
 8004268:	f9b6 3000 	ldrsh.w	r3, [r6]
 800426c:	1e5a      	subs	r2, r3, #1
 800426e:	4975      	ldr	r1, [pc, #468]	; (8004444 <DecodeCmd+0x630>)
 8004270:	0093      	lsls	r3, r2, #2
 8004272:	189c      	adds	r4, r3, r2
 8004274:	00a0      	lsls	r0, r4, #2
 8004276:	180c      	adds	r4, r1, r0
 8004278:	f89b 5000 	ldrb.w	r5, [fp]
 800427c:	540d      	strb	r5, [r1, r0]
		onTime[heatingWindow-1].Minutes = mm_on;
 800427e:	f89a 0000 	ldrb.w	r0, [sl]
 8004282:	7060      	strb	r0, [r4, #1]
		onTime[heatingWindow-1].Seconds = ss_on;
 8004284:	f899 0000 	ldrb.w	r0, [r9]
 8004288:	70a0      	strb	r0, [r4, #2]
		HAL_RTC_SetTime(&hrtc, &onTime[heatingWindow-1], RTC_FORMAT_BCD);
 800428a:	4413      	add	r3, r2
 800428c:	0098      	lsls	r0, r3, #2
 800428e:	4c6e      	ldr	r4, [pc, #440]	; (8004448 <DecodeCmd+0x634>)
 8004290:	2201      	movs	r2, #1
 8004292:	4401      	add	r1, r0
 8004294:	4620      	mov	r0, r4
 8004296:	f7fd ff69 	bl	800216c <HAL_RTC_SetTime>

		offTime[heatingWindow-1].Hours = HH_off;
 800429a:	f9b6 3000 	ldrsh.w	r3, [r6]
 800429e:	1e5a      	subs	r2, r3, #1
 80042a0:	496a      	ldr	r1, [pc, #424]	; (800444c <DecodeCmd+0x638>)
 80042a2:	0093      	lsls	r3, r2, #2
 80042a4:	189d      	adds	r5, r3, r2
 80042a6:	00a8      	lsls	r0, r5, #2
 80042a8:	180d      	adds	r5, r1, r0
 80042aa:	f898 6000 	ldrb.w	r6, [r8]
 80042ae:	540e      	strb	r6, [r1, r0]
		offTime[heatingWindow-1].Minutes = mm_off;
 80042b0:	7838      	ldrb	r0, [r7, #0]
 80042b2:	7068      	strb	r0, [r5, #1]
		offTime[heatingWindow-1].Seconds = ss_off;
 80042b4:	4862      	ldr	r0, [pc, #392]	; (8004440 <DecodeCmd+0x62c>)
 80042b6:	7800      	ldrb	r0, [r0, #0]
 80042b8:	70a8      	strb	r0, [r5, #2]
		HAL_RTC_SetTime(&hrtc, &offTime[heatingWindow-1], RTC_FORMAT_BCD);
 80042ba:	2201      	movs	r2, #1
 80042bc:	4629      	mov	r1, r5
 80042be:	4620      	mov	r0, r4
 80042c0:	f7fd ff54 	bl	800216c <HAL_RTC_SetTime>

		txBuf[0] = '$';	txBuf[1] = 'J';
 80042c4:	4958      	ldr	r1, [pc, #352]	; (8004428 <DecodeCmd+0x614>)
 80042c6:	2324      	movs	r3, #36	; 0x24
 80042c8:	700b      	strb	r3, [r1, #0]
 80042ca:	234a      	movs	r3, #74	; 0x4a
 80042cc:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 80042ce:	230d      	movs	r3, #13
 80042d0:	708b      	strb	r3, [r1, #2]
 80042d2:	230a      	movs	r3, #10
 80042d4:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 80042d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042da:	2204      	movs	r2, #4
 80042dc:	4853      	ldr	r0, [pc, #332]	; (800442c <DecodeCmd+0x618>)
 80042de:	f7fe fd2a 	bl	8002d36 <HAL_UART_Transmit>
		break;
 80042e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

	case 'K': //Request telemetry
		// return string with format $K,1234,220000,25,66,567800,OFF,OPEN<CR><LF>
		txBuf[0] = '$'; txBuf[1] = 'K'; txBuf[2] = ',';
 80042e6:	4d50      	ldr	r5, [pc, #320]	; (8004428 <DecodeCmd+0x614>)
 80042e8:	2324      	movs	r3, #36	; 0x24
 80042ea:	702b      	strb	r3, [r5, #0]
 80042ec:	234b      	movs	r3, #75	; 0x4b
 80042ee:	706b      	strb	r3, [r5, #1]
 80042f0:	262c      	movs	r6, #44	; 0x2c
 80042f2:	70ae      	strb	r6, [r5, #2]
		charsL = 3;
		charsL += Int2String(txBuf+charsL, irms, 10);
 80042f4:	220a      	movs	r2, #10
 80042f6:	4b56      	ldr	r3, [pc, #344]	; (8004450 <DecodeCmd+0x63c>)
 80042f8:	6819      	ldr	r1, [r3, #0]
 80042fa:	1ce8      	adds	r0, r5, #3
 80042fc:	f7fe ffac 	bl	8003258 <Int2String>
 8004300:	b2c0      	uxtb	r0, r0
 8004302:	1cc3      	adds	r3, r0, #3
 8004304:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004306:	54ee      	strb	r6, [r5, r3]
 8004308:	3004      	adds	r0, #4
 800430a:	b2c4      	uxtb	r4, r0
		charsL += Int2String(txBuf+charsL, vrms, 10);
 800430c:	220a      	movs	r2, #10
 800430e:	4b51      	ldr	r3, [pc, #324]	; (8004454 <DecodeCmd+0x640>)
 8004310:	6819      	ldr	r1, [r3, #0]
 8004312:	1928      	adds	r0, r5, r4
 8004314:	f7fe ffa0 	bl	8003258 <Int2String>
 8004318:	1823      	adds	r3, r4, r0
 800431a:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 800431c:	54ee      	strb	r6, [r5, r3]
 800431e:	3301      	adds	r3, #1
 8004320:	b2dc      	uxtb	r4, r3
		charsL += Int2String(txBuf+charsL, TempConv(ambientT), 10);    // temp ambient
 8004322:	4b4d      	ldr	r3, [pc, #308]	; (8004458 <DecodeCmd+0x644>)
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	f7fe ff0f 	bl	8003148 <TempConv>
 800432a:	220a      	movs	r2, #10
 800432c:	4601      	mov	r1, r0
 800432e:	1928      	adds	r0, r5, r4
 8004330:	f7fe ff92 	bl	8003258 <Int2String>
 8004334:	1823      	adds	r3, r4, r0
 8004336:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004338:	54ee      	strb	r6, [r5, r3]
 800433a:	3301      	adds	r3, #1
 800433c:	b2dc      	uxtb	r4, r3
		charsL += Int2String(txBuf+charsL, TempConv(waterT), 10);    // temp water
 800433e:	4b47      	ldr	r3, [pc, #284]	; (800445c <DecodeCmd+0x648>)
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	f7fe ff01 	bl	8003148 <TempConv>
 8004346:	220a      	movs	r2, #10
 8004348:	4601      	mov	r1, r0
 800434a:	1928      	adds	r0, r5, r4
 800434c:	f7fe ff84 	bl	8003258 <Int2String>
 8004350:	1823      	adds	r3, r4, r0
 8004352:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 8004354:	54ee      	strb	r6, [r5, r3]
 8004356:	3301      	adds	r3, #1
 8004358:	b2dc      	uxtb	r4, r3
		charsL += Int2String(txBuf+charsL, totalFlow, 10);    // flow totalFlow
 800435a:	220a      	movs	r2, #10
 800435c:	4b40      	ldr	r3, [pc, #256]	; (8004460 <DecodeCmd+0x64c>)
 800435e:	6819      	ldr	r1, [r3, #0]
 8004360:	1928      	adds	r0, r5, r4
 8004362:	f7fe ff79 	bl	8003258 <Int2String>
 8004366:	1823      	adds	r3, r4, r0
 8004368:	b2db      	uxtb	r3, r3
		txBuf[charsL] = ','; charsL++;
 800436a:	54ee      	strb	r6, [r5, r3]
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	b2d2      	uxtb	r2, r2

		if (heaterState == 0U)
 8004370:	493c      	ldr	r1, [pc, #240]	; (8004464 <DecodeCmd+0x650>)
 8004372:	8809      	ldrh	r1, [r1, #0]
 8004374:	b209      	sxth	r1, r1
 8004376:	2900      	cmp	r1, #0
 8004378:	d13c      	bne.n	80043f4 <DecodeCmd+0x5e0>
		{
			txBuf[charsL] = 'O'; charsL++;
 800437a:	4629      	mov	r1, r5
 800437c:	204f      	movs	r0, #79	; 0x4f
 800437e:	54a8      	strb	r0, [r5, r2]
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	b2d2      	uxtb	r2, r2
			txBuf[charsL] = 'F'; charsL++;
 8004384:	2046      	movs	r0, #70	; 0x46
 8004386:	54a8      	strb	r0, [r5, r2]
 8004388:	1cda      	adds	r2, r3, #3
 800438a:	b2d2      	uxtb	r2, r2
			txBuf[charsL] = 'F'; charsL++;
 800438c:	54a8      	strb	r0, [r5, r2]
 800438e:	1d1a      	adds	r2, r3, #4
 8004390:	b2d2      	uxtb	r2, r2
			txBuf[charsL] = ','; charsL++;
 8004392:	548e      	strb	r6, [r1, r2]
 8004394:	3305      	adds	r3, #5
 8004396:	b2da      	uxtb	r2, r3
		{
			txBuf[charsL] = 'O'; charsL++;
			txBuf[charsL] = 'N'; charsL++;
			txBuf[charsL] = ','; charsL++;
		}
		if(valveState==0U)
 8004398:	4b33      	ldr	r3, [pc, #204]	; (8004468 <DecodeCmd+0x654>)
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	b21b      	sxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d16e      	bne.n	8004480 <DecodeCmd+0x66c>
		{
			txBuf[charsL] = 'C'; charsL++;
 80043a2:	4b21      	ldr	r3, [pc, #132]	; (8004428 <DecodeCmd+0x614>)
 80043a4:	2143      	movs	r1, #67	; 0x43
 80043a6:	5499      	strb	r1, [r3, r2]
 80043a8:	1c51      	adds	r1, r2, #1
 80043aa:	b2c9      	uxtb	r1, r1
			txBuf[charsL] = 'L'; charsL++;
 80043ac:	204c      	movs	r0, #76	; 0x4c
 80043ae:	5458      	strb	r0, [r3, r1]
 80043b0:	1c91      	adds	r1, r2, #2
 80043b2:	b2c9      	uxtb	r1, r1
			txBuf[charsL] = 'O'; charsL++;
 80043b4:	204f      	movs	r0, #79	; 0x4f
 80043b6:	5458      	strb	r0, [r3, r1]
 80043b8:	1cd1      	adds	r1, r2, #3
 80043ba:	b2c9      	uxtb	r1, r1
			txBuf[charsL] = 'S'; charsL++;
 80043bc:	2053      	movs	r0, #83	; 0x53
 80043be:	5458      	strb	r0, [r3, r1]
 80043c0:	1d11      	adds	r1, r2, #4
 80043c2:	b2c9      	uxtb	r1, r1
			txBuf[charsL] = 'E'; charsL++;
 80043c4:	2045      	movs	r0, #69	; 0x45
 80043c6:	5458      	strb	r0, [r3, r1]
 80043c8:	1d51      	adds	r1, r2, #5
 80043ca:	b2c9      	uxtb	r1, r1
			txBuf[charsL] = 'D'; charsL++;
 80043cc:	2044      	movs	r0, #68	; 0x44
 80043ce:	5458      	strb	r0, [r3, r1]
 80043d0:	3206      	adds	r2, #6
 80043d2:	b2d2      	uxtb	r2, r2
			txBuf[charsL] = 'P'; charsL++;
			txBuf[charsL] = 'E'; charsL++;
			txBuf[charsL] = 'N'; charsL++;
		}

		txBuf[charsL] = '\r'; charsL++; txBuf[charsL] = '\n'; charsL++;
 80043d4:	4914      	ldr	r1, [pc, #80]	; (8004428 <DecodeCmd+0x614>)
 80043d6:	230d      	movs	r3, #13
 80043d8:	548b      	strb	r3, [r1, r2]
 80043da:	1c53      	adds	r3, r2, #1
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	200a      	movs	r0, #10
 80043e0:	54c8      	strb	r0, [r1, r3]
 80043e2:	3202      	adds	r2, #2
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, charsL, 1000);
 80043e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	4810      	ldr	r0, [pc, #64]	; (800442c <DecodeCmd+0x618>)
 80043ec:	f7fe fca3 	bl	8002d36 <HAL_UART_Transmit>

		break;
 80043f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if(heaterState==1U)
 80043f4:	491b      	ldr	r1, [pc, #108]	; (8004464 <DecodeCmd+0x650>)
 80043f6:	8809      	ldrh	r1, [r1, #0]
 80043f8:	b209      	sxth	r1, r1
 80043fa:	2901      	cmp	r1, #1
 80043fc:	d1cc      	bne.n	8004398 <DecodeCmd+0x584>
			txBuf[charsL] = 'O'; charsL++;
 80043fe:	490a      	ldr	r1, [pc, #40]	; (8004428 <DecodeCmd+0x614>)
 8004400:	204f      	movs	r0, #79	; 0x4f
 8004402:	5488      	strb	r0, [r1, r2]
 8004404:	1c9a      	adds	r2, r3, #2
 8004406:	b2d2      	uxtb	r2, r2
			txBuf[charsL] = 'N'; charsL++;
 8004408:	204e      	movs	r0, #78	; 0x4e
 800440a:	5488      	strb	r0, [r1, r2]
 800440c:	1cda      	adds	r2, r3, #3
 800440e:	b2d2      	uxtb	r2, r2
			txBuf[charsL] = ','; charsL++;
 8004410:	202c      	movs	r0, #44	; 0x2c
 8004412:	5488      	strb	r0, [r1, r2]
 8004414:	3304      	adds	r3, #4
 8004416:	b2da      	uxtb	r2, r3
 8004418:	e7be      	b.n	8004398 <DecodeCmd+0x584>
 800441a:	bf00      	nop
 800441c:	200003d4 	.word	0x200003d4
 8004420:	20000228 	.word	0x20000228
 8004424:	20000410 	.word	0x20000410
 8004428:	2000027c 	.word	0x2000027c
 800442c:	200000f0 	.word	0x200000f0
 8004430:	20000400 	.word	0x20000400
 8004434:	2000038f 	.word	0x2000038f
 8004438:	2000002c 	.word	0x2000002c
 800443c:	200003f2 	.word	0x200003f2
 8004440:	20000315 	.word	0x20000315
 8004444:	20000240 	.word	0x20000240
 8004448:	20000160 	.word	0x20000160
 800444c:	200001d8 	.word	0x200001d8
 8004450:	20000384 	.word	0x20000384
 8004454:	200003fc 	.word	0x200003fc
 8004458:	200001c4 	.word	0x200001c4
 800445c:	20000408 	.word	0x20000408
 8004460:	20000404 	.word	0x20000404
 8004464:	20000044 	.word	0x20000044
 8004468:	20000046 	.word	0x20000046
 800446c:	20000220 	.word	0x20000220
 8004470:	20000224 	.word	0x20000224
 8004474:	2000031c 	.word	0x2000031c
 8004478:	2000040c 	.word	0x2000040c
 800447c:	200003d1 	.word	0x200003d1
		else if(valveState==1U)
 8004480:	4b16      	ldr	r3, [pc, #88]	; (80044dc <DecodeCmd+0x6c8>)
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b21b      	sxth	r3, r3
 8004486:	2b01      	cmp	r3, #1
 8004488:	d1a4      	bne.n	80043d4 <DecodeCmd+0x5c0>
			txBuf[charsL] = 'O'; charsL++;
 800448a:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <DecodeCmd+0x6cc>)
 800448c:	214f      	movs	r1, #79	; 0x4f
 800448e:	5499      	strb	r1, [r3, r2]
 8004490:	1c51      	adds	r1, r2, #1
 8004492:	b2c9      	uxtb	r1, r1
			txBuf[charsL] = 'P'; charsL++;
 8004494:	2050      	movs	r0, #80	; 0x50
 8004496:	5458      	strb	r0, [r3, r1]
 8004498:	1c91      	adds	r1, r2, #2
 800449a:	b2c9      	uxtb	r1, r1
			txBuf[charsL] = 'E'; charsL++;
 800449c:	2045      	movs	r0, #69	; 0x45
 800449e:	5458      	strb	r0, [r3, r1]
 80044a0:	1cd1      	adds	r1, r2, #3
 80044a2:	b2c9      	uxtb	r1, r1
			txBuf[charsL] = 'N'; charsL++;
 80044a4:	204e      	movs	r0, #78	; 0x4e
 80044a6:	5458      	strb	r0, [r3, r1]
 80044a8:	3204      	adds	r2, #4
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	e792      	b.n	80043d4 <DecodeCmd+0x5c0>

	case 'L' : //Request log entry
		String2Int(cmdBuf+3, (int16_t*) &valveState);
 80044ae:	490b      	ldr	r1, [pc, #44]	; (80044dc <DecodeCmd+0x6c8>)
 80044b0:	480c      	ldr	r0, [pc, #48]	; (80044e4 <DecodeCmd+0x6d0>)
 80044b2:	f7fe fea1 	bl	80031f8 <String2Int>

		switchValve();
 80044b6:	f7fe fe65 	bl	8003184 <switchValve>

		txBuf[0] = '$';	txBuf[1] = 'B';
 80044ba:	4909      	ldr	r1, [pc, #36]	; (80044e0 <DecodeCmd+0x6cc>)
 80044bc:	2324      	movs	r3, #36	; 0x24
 80044be:	700b      	strb	r3, [r1, #0]
 80044c0:	2342      	movs	r3, #66	; 0x42
 80044c2:	704b      	strb	r3, [r1, #1]
		txBuf[2] = '\r'; txBuf[3] = '\n';
 80044c4:	230d      	movs	r3, #13
 80044c6:	708b      	strb	r3, [r1, #2]
 80044c8:	230a      	movs	r3, #10
 80044ca:	70cb      	strb	r3, [r1, #3]
		HAL_UART_Transmit(&huart1, (uint8_t*)txBuf, 4, 1000);
 80044cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044d0:	2204      	movs	r2, #4
 80044d2:	4805      	ldr	r0, [pc, #20]	; (80044e8 <DecodeCmd+0x6d4>)
 80044d4:	f7fe fc2f 	bl	8002d36 <HAL_UART_Transmit>
 80044d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044dc:	20000046 	.word	0x20000046
 80044e0:	2000027c 	.word	0x2000027c
 80044e4:	2000038f 	.word	0x2000038f
 80044e8:	200000f0 	.word	0x200000f0

080044ec <Flags>:
		break;
	}
}

void Flags(void)
{
 80044ec:	b530      	push	{r4, r5, lr}
 80044ee:	b087      	sub	sp, #28
	//halStatus = HAL_I2C_Master_Transmit_IT(&hi2c1, 0x44<<1, &pData, 1);	// I2C write call

	if (uartRxFlag)
 80044f0:	4b7b      	ldr	r3, [pc, #492]	; (80046e0 <Flags+0x1f4>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	b1e3      	cbz	r3, 8004530 <Flags+0x44>
	{
		if (uartRxChar == '$')
 80044f6:	4b7b      	ldr	r3, [pc, #492]	; (80046e4 <Flags+0x1f8>)
 80044f8:	781a      	ldrb	r2, [r3, #0]
 80044fa:	2a24      	cmp	r2, #36	; 0x24
 80044fc:	d042      	beq.n	8004584 <Flags+0x98>
			cmdBufPos = 0;

		// add character to command buffer, but only if there is more space in the command buffer
		if (cmdBufPos < cmdBufL)
 80044fe:	4b7a      	ldr	r3, [pc, #488]	; (80046e8 <Flags+0x1fc>)
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	2b3b      	cmp	r3, #59	; 0x3b
 8004504:	d804      	bhi.n	8004510 <Flags+0x24>
			cmdBuf[cmdBufPos++] = uartRxChar;
 8004506:	1c58      	adds	r0, r3, #1
 8004508:	4977      	ldr	r1, [pc, #476]	; (80046e8 <Flags+0x1fc>)
 800450a:	8008      	strh	r0, [r1, #0]
 800450c:	4977      	ldr	r1, [pc, #476]	; (80046ec <Flags+0x200>)
 800450e:	54ca      	strb	r2, [r1, r3]

		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 8004510:	4b75      	ldr	r3, [pc, #468]	; (80046e8 <Flags+0x1fc>)
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	2b03      	cmp	r3, #3
 8004516:	d903      	bls.n	8004520 <Flags+0x34>
 8004518:	4a74      	ldr	r2, [pc, #464]	; (80046ec <Flags+0x200>)
 800451a:	7812      	ldrb	r2, [r2, #0]
 800451c:	2a24      	cmp	r2, #36	; 0x24
 800451e:	d035      	beq.n	800458c <Flags+0xa0>
		{
			DecodeCmd();
			cmdBufPos = 0;	// clear buffer
		}
		uartRxFlag = false;  // clear the flag - the 'receive character' event has been handled.
 8004520:	2200      	movs	r2, #0
 8004522:	4b6f      	ldr	r3, [pc, #444]	; (80046e0 <Flags+0x1f4>)
 8004524:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&uartRxChar, 1);	// UART interrupt after 1 character was received
 8004526:	2201      	movs	r2, #1
 8004528:	496e      	ldr	r1, [pc, #440]	; (80046e4 <Flags+0x1f8>)
 800452a:	4871      	ldr	r0, [pc, #452]	; (80046f0 <Flags+0x204>)
 800452c:	f7fe fa2f 	bl	800298e <HAL_UART_Receive_IT>
	}
	if(adcFlag == 1U)
 8004530:	4b70      	ldr	r3, [pc, #448]	; (80046f4 <Flags+0x208>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d069      	beq.n	800460c <Flags+0x120>
		// 3. change the ADC channel
		// 4. start a new ADC sampling iteration
		//
		// the result is that all ADC 4 channels are sampled every 1ms

		if (adcCh == 0)
 8004538:	4b6f      	ldr	r3, [pc, #444]	; (80046f8 <Flags+0x20c>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d034      	beq.n	80045aa <Flags+0xbe>
		{
			vsample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
		}
		else if (adcCh == 1)
 8004540:	2b01      	cmp	r3, #1
 8004542:	d03b      	beq.n	80045bc <Flags+0xd0>
		{
			isample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
		}
		else if (adcCh == 2)
 8004544:	2b02      	cmp	r3, #2
 8004546:	d042      	beq.n	80045ce <Flags+0xe2>
		{
			ambientT = HAL_ADC_GetValue(&hadc1);
		}
		else if (adcCh == 3)
 8004548:	2b03      	cmp	r3, #3
 800454a:	d046      	beq.n	80045da <Flags+0xee>
		{
			waterT = HAL_ADC_GetValue(&hadc1);
		}

		adcCh++;
 800454c:	4a6a      	ldr	r2, [pc, #424]	; (80046f8 <Flags+0x20c>)
 800454e:	7813      	ldrb	r3, [r2, #0]
 8004550:	3301      	adds	r3, #1
 8004552:	b2db      	uxtb	r3, r3
 8004554:	7013      	strb	r3, [r2, #0]
		if (adcCh >= 4)
 8004556:	2b03      	cmp	r3, #3
 8004558:	d90c      	bls.n	8004574 <Flags+0x88>
		{
			adcCh = 0;
 800455a:	2200      	movs	r2, #0
 800455c:	4b66      	ldr	r3, [pc, #408]	; (80046f8 <Flags+0x20c>)
 800455e:	701a      	strb	r2, [r3, #0]
			sampleCntr++;
 8004560:	4a66      	ldr	r2, [pc, #408]	; (80046fc <Flags+0x210>)
 8004562:	7813      	ldrb	r3, [r2, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	b2db      	uxtb	r3, r3
 8004568:	7013      	strb	r3, [r2, #0]

			if (sampleCntr >= RMS_WINDOW)
 800456a:	2b27      	cmp	r3, #39	; 0x27
 800456c:	d902      	bls.n	8004574 <Flags+0x88>
				adcBuf12 = 0;

				//iRMS13 = measuredRMS12*84.97807018;
				irms = measuredRMS12*84.97807018;
				adcBuf13 = 0;*/
				sampleCntr = 0;
 800456e:	2200      	movs	r2, #0
 8004570:	4b62      	ldr	r3, [pc, #392]	; (80046fc <Flags+0x210>)
 8004572:	701a      	strb	r2, [r3, #0]
				temp12 += adc12;*/
			}
		}

		ADC_ChannelConfTypeDef chdef;
		switch (adcCh)
 8004574:	4b60      	ldr	r3, [pc, #384]	; (80046f8 <Flags+0x20c>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b03      	cmp	r3, #3
 800457a:	d836      	bhi.n	80045ea <Flags+0xfe>
 800457c:	e8df f003 	tbb	[pc, r3]
 8004580:	908d8a33 	.word	0x908d8a33
			cmdBufPos = 0;
 8004584:	2100      	movs	r1, #0
 8004586:	4b58      	ldr	r3, [pc, #352]	; (80046e8 <Flags+0x1fc>)
 8004588:	8019      	strh	r1, [r3, #0]
 800458a:	e7b8      	b.n	80044fe <Flags+0x12>
		if ((cmdBufPos >= 4) && (cmdBuf[0] == '$') && (cmdBuf[cmdBufPos-2] == '\r') && (cmdBuf[cmdBufPos-1] == '\n'))
 800458c:	1e9a      	subs	r2, r3, #2
 800458e:	4957      	ldr	r1, [pc, #348]	; (80046ec <Flags+0x200>)
 8004590:	5c8a      	ldrb	r2, [r1, r2]
 8004592:	2a0d      	cmp	r2, #13
 8004594:	d1c4      	bne.n	8004520 <Flags+0x34>
 8004596:	3b01      	subs	r3, #1
 8004598:	5ccb      	ldrb	r3, [r1, r3]
 800459a:	2b0a      	cmp	r3, #10
 800459c:	d1c0      	bne.n	8004520 <Flags+0x34>
			DecodeCmd();
 800459e:	f7ff fc39 	bl	8003e14 <DecodeCmd>
			cmdBufPos = 0;	// clear buffer
 80045a2:	2200      	movs	r2, #0
 80045a4:	4b50      	ldr	r3, [pc, #320]	; (80046e8 <Flags+0x1fc>)
 80045a6:	801a      	strh	r2, [r3, #0]
 80045a8:	e7ba      	b.n	8004520 <Flags+0x34>
			vsample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
 80045aa:	4b54      	ldr	r3, [pc, #336]	; (80046fc <Flags+0x210>)
 80045ac:	781c      	ldrb	r4, [r3, #0]
 80045ae:	4854      	ldr	r0, [pc, #336]	; (8004700 <Flags+0x214>)
 80045b0:	f7fc f856 	bl	8000660 <HAL_ADC_GetValue>
 80045b4:	4b53      	ldr	r3, [pc, #332]	; (8004704 <Flags+0x218>)
 80045b6:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 80045ba:	e7c7      	b.n	800454c <Flags+0x60>
			isample[sampleCntr] = HAL_ADC_GetValue(&hadc1);
 80045bc:	4b4f      	ldr	r3, [pc, #316]	; (80046fc <Flags+0x210>)
 80045be:	781c      	ldrb	r4, [r3, #0]
 80045c0:	484f      	ldr	r0, [pc, #316]	; (8004700 <Flags+0x214>)
 80045c2:	f7fc f84d 	bl	8000660 <HAL_ADC_GetValue>
 80045c6:	4b50      	ldr	r3, [pc, #320]	; (8004708 <Flags+0x21c>)
 80045c8:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
 80045cc:	e7be      	b.n	800454c <Flags+0x60>
			ambientT = HAL_ADC_GetValue(&hadc1);
 80045ce:	484c      	ldr	r0, [pc, #304]	; (8004700 <Flags+0x214>)
 80045d0:	f7fc f846 	bl	8000660 <HAL_ADC_GetValue>
 80045d4:	4b4d      	ldr	r3, [pc, #308]	; (800470c <Flags+0x220>)
 80045d6:	6018      	str	r0, [r3, #0]
 80045d8:	e7b8      	b.n	800454c <Flags+0x60>
			waterT = HAL_ADC_GetValue(&hadc1);
 80045da:	4849      	ldr	r0, [pc, #292]	; (8004700 <Flags+0x214>)
 80045dc:	f7fc f840 	bl	8000660 <HAL_ADC_GetValue>
 80045e0:	4b4b      	ldr	r3, [pc, #300]	; (8004710 <Flags+0x224>)
 80045e2:	6018      	str	r0, [r3, #0]
 80045e4:	e7b2      	b.n	800454c <Flags+0x60>
		{
		case 0: chdef.Channel = ADC_CHANNEL_12; break;  //V				//PB1
 80045e6:	230c      	movs	r3, #12
 80045e8:	9300      	str	r3, [sp, #0]
		case 1: chdef.Channel = ADC_CHANNEL_13; break;  //I				//PB13
		case 2: chdef.Channel = ADC_CHANNEL_8; break; //temp ambient	//PC2
		case 3: chdef.Channel = ADC_CHANNEL_9; break; //temp water		//PC3
		}

		chdef.Rank = 1;
 80045ea:	2301      	movs	r3, #1
 80045ec:	9301      	str	r3, [sp, #4]
		chdef.SingleDiff = ADC_SINGLE_ENDED;
 80045ee:	2400      	movs	r4, #0
 80045f0:	9403      	str	r4, [sp, #12]
		chdef.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80045f2:	9402      	str	r4, [sp, #8]
		chdef.OffsetNumber = ADC_OFFSET_NONE;
 80045f4:	9404      	str	r4, [sp, #16]
		chdef.Offset = 0;
 80045f6:	9405      	str	r4, [sp, #20]
		HAL_ADC_ConfigChannel(&hadc1, &chdef);
 80045f8:	4d41      	ldr	r5, [pc, #260]	; (8004700 <Flags+0x214>)
 80045fa:	4669      	mov	r1, sp
 80045fc:	4628      	mov	r0, r5
 80045fe:	f7fc f833 	bl	8000668 <HAL_ADC_ConfigChannel>

		HAL_ADC_Start(&hadc1);
 8004602:	4628      	mov	r0, r5
 8004604:	f7fb ffaa 	bl	800055c <HAL_ADC_Start>

		adcFlag = 0;
 8004608:	4b3a      	ldr	r3, [pc, #232]	; (80046f4 <Flags+0x208>)
 800460a:	701c      	strb	r4, [r3, #0]
	}

	if (flowHighFlag == 1)
 800460c:	4b41      	ldr	r3, [pc, #260]	; (8004714 <Flags+0x228>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	b1c3      	cbz	r3, 8004644 <Flags+0x158>
	{
		if (firstHighFlag == 1)
 8004612:	4b41      	ldr	r3, [pc, #260]	; (8004718 <Flags+0x22c>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	b143      	cbz	r3, 800462a <Flags+0x13e>
		{
			firstHighFlag = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	4a3f      	ldr	r2, [pc, #252]	; (8004718 <Flags+0x22c>)
 800461c:	7013      	strb	r3, [r2, #0]
			ms5Counter = 0;
 800461e:	4a3f      	ldr	r2, [pc, #252]	; (800471c <Flags+0x230>)
 8004620:	7013      	strb	r3, [r2, #0]
			ms5Flag = 0;
 8004622:	4a3f      	ldr	r2, [pc, #252]	; (8004720 <Flags+0x234>)
 8004624:	7013      	strb	r3, [r2, #0]
			flowPulse = 0;
 8004626:	4a3f      	ldr	r2, [pc, #252]	; (8004724 <Flags+0x238>)
 8004628:	7013      	strb	r3, [r2, #0]
		}
		if (ms5Flag == 1)
 800462a:	4b3d      	ldr	r3, [pc, #244]	; (8004720 <Flags+0x234>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	b14b      	cbz	r3, 8004644 <Flags+0x158>
		{
			ms5Flag = 0;
 8004630:	2200      	movs	r2, #0
 8004632:	4b3b      	ldr	r3, [pc, #236]	; (8004720 <Flags+0x234>)
 8004634:	701a      	strb	r2, [r3, #0]

			flowPulse++;
 8004636:	4a3b      	ldr	r2, [pc, #236]	; (8004724 <Flags+0x238>)
 8004638:	7813      	ldrb	r3, [r2, #0]
 800463a:	3301      	adds	r3, #1
 800463c:	b2db      	uxtb	r3, r3
 800463e:	7013      	strb	r3, [r2, #0]
			if (flowPulse == 1)
 8004640:	2b01      	cmp	r3, #1
 8004642:	d030      	beq.n	80046a6 <Flags+0x1ba>
			}
		}
	}

	// 1ms timer
	uint32_t tick = HAL_GetTick();
 8004644:	f7fb fdf0 	bl	8000228 <HAL_GetTick>
	if (tick != lasttick)
 8004648:	4b37      	ldr	r3, [pc, #220]	; (8004728 <Flags+0x23c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4298      	cmp	r0, r3
 800464e:	d016      	beq.n	800467e <Flags+0x192>
	{
		lasttick = tick;
 8004650:	4b35      	ldr	r3, [pc, #212]	; (8004728 <Flags+0x23c>)
 8004652:	6018      	str	r0, [r3, #0]

		//flowFlag = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);

		ms5Counter++;
 8004654:	4a31      	ldr	r2, [pc, #196]	; (800471c <Flags+0x230>)
 8004656:	7813      	ldrb	r3, [r2, #0]
 8004658:	3301      	adds	r3, #1
 800465a:	b2db      	uxtb	r3, r3
 800465c:	7013      	strb	r3, [r2, #0]
		if (ms5Counter >= 5)
 800465e:	7813      	ldrb	r3, [r2, #0]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b04      	cmp	r3, #4
 8004664:	d905      	bls.n	8004672 <Flags+0x186>
		{
			ms5Counter = 0;
 8004666:	2200      	movs	r2, #0
 8004668:	4b2c      	ldr	r3, [pc, #176]	; (800471c <Flags+0x230>)
 800466a:	701a      	strb	r2, [r3, #0]
			ms5Flag = 1;
 800466c:	2201      	movs	r2, #1
 800466e:	4b2c      	ldr	r3, [pc, #176]	; (8004720 <Flags+0x234>)
 8004670:	701a      	strb	r2, [r3, #0]
		}

		//LedUpdate();
		writeToPins(segementsSet, pinsValue, segmentsL);
 8004672:	4b2e      	ldr	r3, [pc, #184]	; (800472c <Flags+0x240>)
 8004674:	781a      	ldrb	r2, [r3, #0]
 8004676:	492e      	ldr	r1, [pc, #184]	; (8004730 <Flags+0x244>)
 8004678:	482e      	ldr	r0, [pc, #184]	; (8004734 <Flags+0x248>)
 800467a:	f7fe fe3d 	bl	80032f8 <writeToPins>
	}

	if (rtcSecFlag == 1) //------------1 second period
 800467e:	4b2e      	ldr	r3, [pc, #184]	; (8004738 <Flags+0x24c>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	b9d3      	cbnz	r3, 80046ba <Flags+0x1ce>
	//HAL_I2C_Master_Receive(&hi2c1, 0x45<<1, &buffer[1], 3, 100);
	//HAL_I2C_Master_Transmit(&hi2c1, 0x45<<1, buffer, 4, 100); //45 rotary slider
	//HAL_I2C_Master_Receive(&hi2c1, 0x45<<1, &buffer[0], 1, 100);


	if (i2cTxFlag)	//Now process the interrupt call-back
 8004684:	4b2d      	ldr	r3, [pc, #180]	; (800473c <Flags+0x250>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	b113      	cbz	r3, 8004690 <Flags+0x1a4>
	{
		i2cTxFlag = 0;
 800468a:	2200      	movs	r2, #0
 800468c:	4b2b      	ldr	r3, [pc, #172]	; (800473c <Flags+0x250>)
 800468e:	701a      	strb	r2, [r3, #0]
		//float value = buffer[0]<<8 | buffer[1]; //combine 2 8-bit into 1 16-bit

		//HAL_Delay(100);
		//HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
	}
}
 8004690:	b007      	add	sp, #28
 8004692:	bd30      	pop	{r4, r5, pc}
		case 1: chdef.Channel = ADC_CHANNEL_13; break;  //I				//PB13
 8004694:	230d      	movs	r3, #13
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	e7a7      	b.n	80045ea <Flags+0xfe>
		case 2: chdef.Channel = ADC_CHANNEL_8; break; //temp ambient	//PC2
 800469a:	2308      	movs	r3, #8
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	e7a4      	b.n	80045ea <Flags+0xfe>
		case 3: chdef.Channel = ADC_CHANNEL_9; break; //temp water		//PC3
 80046a0:	2309      	movs	r3, #9
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	e7a1      	b.n	80045ea <Flags+0xfe>
				flowCounter++;
 80046a6:	4a26      	ldr	r2, [pc, #152]	; (8004740 <Flags+0x254>)
 80046a8:	6813      	ldr	r3, [r2, #0]
 80046aa:	3301      	adds	r3, #1
 80046ac:	6013      	str	r3, [r2, #0]
				totalFlow = 100*flowCounter;
 80046ae:	2264      	movs	r2, #100	; 0x64
 80046b0:	fb02 f303 	mul.w	r3, r2, r3
 80046b4:	4a23      	ldr	r2, [pc, #140]	; (8004744 <Flags+0x258>)
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	e7c4      	b.n	8004644 <Flags+0x158>
		rtcSecFlag = 0;
 80046ba:	2200      	movs	r2, #0
 80046bc:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <Flags+0x24c>)
 80046be:	701a      	strb	r2, [r3, #0]
		halStatus = HAL_RTC_GetTime(&hrtc, &getTimeLive, RTC_FORMAT_BCD);
 80046c0:	4d21      	ldr	r5, [pc, #132]	; (8004748 <Flags+0x25c>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	4921      	ldr	r1, [pc, #132]	; (800474c <Flags+0x260>)
 80046c6:	4628      	mov	r0, r5
 80046c8:	f7fd fe45 	bl	8002356 <HAL_RTC_GetTime>
 80046cc:	4c20      	ldr	r4, [pc, #128]	; (8004750 <Flags+0x264>)
 80046ce:	7020      	strb	r0, [r4, #0]
		halStatus = HAL_RTC_GetDate(&hrtc, &getDateLive, RTC_FORMAT_BCD);
 80046d0:	2201      	movs	r2, #1
 80046d2:	4920      	ldr	r1, [pc, #128]	; (8004754 <Flags+0x268>)
 80046d4:	4628      	mov	r0, r5
 80046d6:	f7fd fe69 	bl	80023ac <HAL_RTC_GetDate>
 80046da:	7020      	strb	r0, [r4, #0]
 80046dc:	e7d2      	b.n	8004684 <Flags+0x198>
 80046de:	bf00      	nop
 80046e0:	20000049 	.word	0x20000049
 80046e4:	20000314 	.word	0x20000314
 80046e8:	2000040e 	.word	0x2000040e
 80046ec:	2000038c 	.word	0x2000038c
 80046f0:	200000f0 	.word	0x200000f0
 80046f4:	2000004c 	.word	0x2000004c
 80046f8:	200003f1 	.word	0x200003f1
 80046fc:	200001c8 	.word	0x200001c8
 8004700:	2000009c 	.word	0x2000009c
 8004704:	200002b8 	.word	0x200002b8
 8004708:	20000334 	.word	0x20000334
 800470c:	200001c4 	.word	0x200001c4
 8004710:	20000408 	.word	0x20000408
 8004714:	20000048 	.word	0x20000048
 8004718:	20000035 	.word	0x20000035
 800471c:	200003c8 	.word	0x200003c8
 8004720:	2000021d 	.word	0x2000021d
 8004724:	200003ef 	.word	0x200003ef
 8004728:	2000023c 	.word	0x2000023c
 800472c:	20000024 	.word	0x20000024
 8004730:	200003cc 	.word	0x200003cc
 8004734:	20000038 	.word	0x20000038
 8004738:	2000004a 	.word	0x2000004a
 800473c:	2000004b 	.word	0x2000004b
 8004740:	200003f8 	.word	0x200003f8
 8004744:	20000404 	.word	0x20000404
 8004748:	20000160 	.word	0x20000160
 800474c:	20000228 	.word	0x20000228
 8004750:	2000021e 	.word	0x2000021e
 8004754:	20000410 	.word	0x20000410

08004758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004790 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800475c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800475e:	e003      	b.n	8004768 <LoopCopyDataInit>

08004760 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004760:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004762:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004764:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004766:	3104      	adds	r1, #4

08004768 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004768:	480b      	ldr	r0, [pc, #44]	; (8004798 <LoopForever+0xa>)
	ldr	r3, =_edata
 800476a:	4b0c      	ldr	r3, [pc, #48]	; (800479c <LoopForever+0xe>)
	adds	r2, r0, r1
 800476c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800476e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004770:	d3f6      	bcc.n	8004760 <CopyDataInit>
	ldr	r2, =_sbss
 8004772:	4a0b      	ldr	r2, [pc, #44]	; (80047a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004774:	e002      	b.n	800477c <LoopFillZerobss>

08004776 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004776:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004778:	f842 3b04 	str.w	r3, [r2], #4

0800477c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800477c:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <LoopForever+0x16>)
	cmp	r2, r3
 800477e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004780:	d3f9      	bcc.n	8004776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004782:	f7ff faa9 	bl	8003cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004786:	f000 f811 	bl	80047ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800478a:	f7ff f939 	bl	8003a00 <main>

0800478e <LoopForever>:

LoopForever:
    b LoopForever
 800478e:	e7fe      	b.n	800478e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004790:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004794:	0800486c 	.word	0x0800486c
	ldr	r0, =_sdata
 8004798:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800479c:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 80047a0:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 80047a4:	20000418 	.word	0x20000418

080047a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80047a8:	e7fe      	b.n	80047a8 <ADC1_2_IRQHandler>
	...

080047ac <__libc_init_array>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	4e0d      	ldr	r6, [pc, #52]	; (80047e4 <__libc_init_array+0x38>)
 80047b0:	4c0d      	ldr	r4, [pc, #52]	; (80047e8 <__libc_init_array+0x3c>)
 80047b2:	1ba4      	subs	r4, r4, r6
 80047b4:	10a4      	asrs	r4, r4, #2
 80047b6:	2500      	movs	r5, #0
 80047b8:	42a5      	cmp	r5, r4
 80047ba:	d109      	bne.n	80047d0 <__libc_init_array+0x24>
 80047bc:	4e0b      	ldr	r6, [pc, #44]	; (80047ec <__libc_init_array+0x40>)
 80047be:	4c0c      	ldr	r4, [pc, #48]	; (80047f0 <__libc_init_array+0x44>)
 80047c0:	f000 f818 	bl	80047f4 <_init>
 80047c4:	1ba4      	subs	r4, r4, r6
 80047c6:	10a4      	asrs	r4, r4, #2
 80047c8:	2500      	movs	r5, #0
 80047ca:	42a5      	cmp	r5, r4
 80047cc:	d105      	bne.n	80047da <__libc_init_array+0x2e>
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047d4:	4798      	blx	r3
 80047d6:	3501      	adds	r5, #1
 80047d8:	e7ee      	b.n	80047b8 <__libc_init_array+0xc>
 80047da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047de:	4798      	blx	r3
 80047e0:	3501      	adds	r5, #1
 80047e2:	e7f2      	b.n	80047ca <__libc_init_array+0x1e>
 80047e4:	08004864 	.word	0x08004864
 80047e8:	08004864 	.word	0x08004864
 80047ec:	08004864 	.word	0x08004864
 80047f0:	08004868 	.word	0x08004868

080047f4 <_init>:
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f6:	bf00      	nop
 80047f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fa:	bc08      	pop	{r3}
 80047fc:	469e      	mov	lr, r3
 80047fe:	4770      	bx	lr

08004800 <_fini>:
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	bf00      	nop
 8004804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004806:	bc08      	pop	{r3}
 8004808:	469e      	mov	lr, r3
 800480a:	4770      	bx	lr
